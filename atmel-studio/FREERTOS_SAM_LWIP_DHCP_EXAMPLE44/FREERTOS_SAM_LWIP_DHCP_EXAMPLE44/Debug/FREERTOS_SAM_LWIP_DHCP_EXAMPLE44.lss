
FREERTOS_SAM_LWIP_DHCP_EXAMPLE44.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000313b4  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000b13b4  000b13b4  000393b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b88  20070000  000b13bc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005d74  20070b88  000b1f48  00040b88  2**3
                  ALLOC
  4 .stack        00002004  200768fc  000b7cbc  00040b88  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00040b88  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00040bb1  2**0
                  CONTENTS, READONLY
  7 .debug_info   000517df  00000000  00000000  00040c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e394  00000000  00000000  00092401  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000282ac  00000000  00000000  000a0795  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002190  00000000  00000000  000c8a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001c60  00000000  00000000  000cabd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002bbb1  00000000  00000000  000cc838  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003c4b9  00000000  00000000  000f83e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007c559  00000000  00000000  001348a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000053ec  00000000  00000000  001b0dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20078900 	.word	0x20078900
   80004:	00083c19 	.word	0x00083c19
   80008:	00083c15 	.word	0x00083c15
   8000c:	00083c15 	.word	0x00083c15
   80010:	00083c15 	.word	0x00083c15
   80014:	00083c15 	.word	0x00083c15
   80018:	00083c15 	.word	0x00083c15
	...
   8002c:	000844b1 	.word	0x000844b1
   80030:	00083c15 	.word	0x00083c15
   80034:	00000000 	.word	0x00000000
   80038:	00084561 	.word	0x00084561
   8003c:	000840c9 	.word	0x000840c9
   80040:	00083c15 	.word	0x00083c15
   80044:	00083c15 	.word	0x00083c15
   80048:	00083c15 	.word	0x00083c15
   8004c:	00083c15 	.word	0x00083c15
   80050:	00083c15 	.word	0x00083c15
   80054:	00083c15 	.word	0x00083c15
   80058:	00083c15 	.word	0x00083c15
   8005c:	00083c15 	.word	0x00083c15
   80060:	00083c15 	.word	0x00083c15
   80064:	00083c15 	.word	0x00083c15
   80068:	00083c15 	.word	0x00083c15
   8006c:	000839a1 	.word	0x000839a1
   80070:	000839b5 	.word	0x000839b5
   80074:	000839c9 	.word	0x000839c9
   80078:	000839dd 	.word	0x000839dd
   8007c:	000839f1 	.word	0x000839f1
   80080:	00083a05 	.word	0x00083a05
   80084:	00083c15 	.word	0x00083c15
   80088:	00083c15 	.word	0x00083c15
   8008c:	00083c15 	.word	0x00083c15
   80090:	00083c15 	.word	0x00083c15
   80094:	00083c15 	.word	0x00083c15
   80098:	00083c15 	.word	0x00083c15
   8009c:	00083c15 	.word	0x00083c15
   800a0:	00083c15 	.word	0x00083c15
   800a4:	00083c15 	.word	0x00083c15
   800a8:	00083c15 	.word	0x00083c15
   800ac:	00083c15 	.word	0x00083c15
   800b0:	00083c15 	.word	0x00083c15
   800b4:	00083c15 	.word	0x00083c15
   800b8:	00083c15 	.word	0x00083c15
   800bc:	00083c15 	.word	0x00083c15
   800c0:	00083c15 	.word	0x00083c15
   800c4:	00083c15 	.word	0x00083c15
   800c8:	00083c15 	.word	0x00083c15
   800cc:	00083c15 	.word	0x00083c15
   800d0:	00083c15 	.word	0x00083c15
   800d4:	00083c15 	.word	0x00083c15
   800d8:	00083c15 	.word	0x00083c15
   800dc:	00083c15 	.word	0x00083c15
   800e0:	00083c15 	.word	0x00083c15
   800e4:	00083c15 	.word	0x00083c15
   800e8:	0008c249 	.word	0x0008c249
   800ec:	00083c15 	.word	0x00083c15
   800f0:	00083c15 	.word	0x00083c15

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	000b13bc 	.word	0x000b13bc
   80110:	000b13bf 	.word	0x000b13bf
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	000b13bc 	.word	0x000b13bc
   8013c:	000b13bc 	.word	0x000b13bc
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070b88 	.word	0x20070b88
   80164:	00000000 	.word	0x00000000
   80168:	000b13bc 	.word	0x000b13bc

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	000b13bc 	.word	0x000b13bc
   80198:	20070b8c 	.word	0x20070b8c
   8019c:	000b13bc 	.word	0x000b13bc
   801a0:	00000000 	.word	0x00000000

000801a4 <__compare>:
	}
	JSON_error("__get_json_number_end() failed to find number end");
	return ERR;
}
static int __compare(xjson *b, offset off, char *str, int len)
{
   801a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   801a8:	4607      	mov	r7, r0
   801aa:	460c      	mov	r4, r1
	offset i;
	
	for(i=off; ok(b, i) && i-off < len && str[i-off]; ++i) {
   801ac:	6800      	ldr	r0, [r0, #0]
   801ae:	8901      	ldrh	r1, [r0, #8]
   801b0:	428c      	cmp	r4, r1
   801b2:	d221      	bcs.n	801f8 <__compare+0x54>
   801b4:	b31b      	cbz	r3, 801fe <__compare+0x5a>
   801b6:	7811      	ldrb	r1, [r2, #0]
   801b8:	b321      	cbz	r1, 80204 <__compare+0x60>
   801ba:	1c56      	adds	r6, r2, #1
   801bc:	eb04 0903 	add.w	r9, r4, r3
   801c0:	4615      	mov	r5, r2
		char c = at(b, i);
   801c2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8021c <__compare+0x78>
   801c6:	b2a1      	uxth	r1, r4
   801c8:	47c0      	blx	r8
		if(str[i-off] != c)
   801ca:	782a      	ldrb	r2, [r5, #0]
   801cc:	4282      	cmp	r2, r0
   801ce:	d006      	beq.n	801de <__compare+0x3a>
			return str[i-off] > c ? 1 : -1; 
   801d0:	4290      	cmp	r0, r2
   801d2:	bf2c      	ite	cs
   801d4:	f04f 30ff 	movcs.w	r0, #4294967295
   801d8:	2001      	movcc	r0, #1
   801da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
static int __compare(xjson *b, offset off, char *str, int len)
{
	offset i;
	
	for(i=off; ok(b, i) && i-off < len && str[i-off]; ++i) {
   801de:	3401      	adds	r4, #1
   801e0:	6838      	ldr	r0, [r7, #0]
   801e2:	8903      	ldrh	r3, [r0, #8]
   801e4:	42a3      	cmp	r3, r4
   801e6:	d910      	bls.n	8020a <__compare+0x66>
   801e8:	454c      	cmp	r4, r9
   801ea:	d011      	beq.n	80210 <__compare+0x6c>
   801ec:	4635      	mov	r5, r6
   801ee:	3601      	adds	r6, #1
   801f0:	782b      	ldrb	r3, [r5, #0]
   801f2:	2b00      	cmp	r3, #0
   801f4:	d1e7      	bne.n	801c6 <__compare+0x22>
   801f6:	e00e      	b.n	80216 <__compare+0x72>
		char c = at(b, i);
		if(str[i-off] != c)
			return str[i-off] > c ? 1 : -1; 
	}
	return 0;
   801f8:	2000      	movs	r0, #0
   801fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   801fe:	2000      	movs	r0, #0
   80200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80204:	2000      	movs	r0, #0
   80206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8020a:	2000      	movs	r0, #0
   8020c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80210:	2000      	movs	r0, #0
   80212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80216:	2000      	movs	r0, #0
}
   80218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8021c:	00088451 	.word	0x00088451

00080220 <__get_json_string_end>:
	}
	printf("%s", postfix);
}

static offset __get_json_string_end(xjson *b, offset off) 
{
   80220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80224:	b083      	sub	sp, #12
   80226:	4606      	mov	r6, r0
   80228:	460c      	mov	r4, r1
	offset i;
	char depth = 0;

	for(i=off; ok(b, i); ++i) {
   8022a:	6800      	ldr	r0, [r0, #0]
   8022c:	8903      	ldrh	r3, [r0, #8]
   8022e:	4299      	cmp	r1, r3
   80230:	d219      	bcs.n	80266 <__get_json_string_end+0x46>
}

static offset __get_json_string_end(xjson *b, offset off) 
{
	offset i;
	char depth = 0;
   80232:	f04f 0800 	mov.w	r8, #0

	for(i=off; ok(b, i); ++i) {
		char c = at(b, i);
   80236:	4f1d      	ldr	r7, [pc, #116]	; (802ac <__get_json_string_end+0x8c>)

		if( c == '"' ) { 			
			depth = (depth == 0); 
			if(depth == 0) {
				if( i > 0 && at(b, i-1) == '\\' ) {		
					depth = (depth == 0); 
   80238:	f04f 0901 	mov.w	r9, #1
{
	offset i;
	char depth = 0;

	for(i=off; ok(b, i); ++i) {
		char c = at(b, i);
   8023c:	b2a5      	uxth	r5, r4
   8023e:	4629      	mov	r1, r5
   80240:	47b8      	blx	r7

		if( c == '"' ) { 			
   80242:	2822      	cmp	r0, #34	; 0x22
   80244:	d10a      	bne.n	8025c <__get_json_string_end+0x3c>
			depth = (depth == 0); 
			if(depth == 0) {
   80246:	f098 0801 	eors.w	r8, r8, #1
   8024a:	d107      	bne.n	8025c <__get_json_string_end+0x3c>
				if( i > 0 && at(b, i-1) == '\\' ) {		
   8024c:	b1e4      	cbz	r4, 80288 <__get_json_string_end+0x68>
   8024e:	1e69      	subs	r1, r5, #1
   80250:	6830      	ldr	r0, [r6, #0]
   80252:	b289      	uxth	r1, r1
   80254:	47b8      	blx	r7
   80256:	285c      	cmp	r0, #92	; 0x5c
   80258:	d114      	bne.n	80284 <__get_json_string_end+0x64>
					depth = (depth == 0); 
   8025a:	46c8      	mov	r8, r9
static offset __get_json_string_end(xjson *b, offset off) 
{
	offset i;
	char depth = 0;

	for(i=off; ok(b, i); ++i) {
   8025c:	3401      	adds	r4, #1
   8025e:	6830      	ldr	r0, [r6, #0]
   80260:	8903      	ldrh	r3, [r0, #8]
   80262:	42a3      	cmp	r3, r4
   80264:	d8ea      	bhi.n	8023c <__get_json_string_end+0x1c>
				return i;
			}
			continue; 
		}		
	}
	JSON_error("__get_json_string_end() failed to find `\"'");
   80266:	4b12      	ldr	r3, [pc, #72]	; (802b0 <__get_json_string_end+0x90>)
   80268:	681b      	ldr	r3, [r3, #0]
   8026a:	68dc      	ldr	r4, [r3, #12]
   8026c:	4b11      	ldr	r3, [pc, #68]	; (802b4 <__get_json_string_end+0x94>)
   8026e:	4798      	blx	r3
   80270:	6803      	ldr	r3, [r0, #0]
   80272:	9300      	str	r3, [sp, #0]
   80274:	4620      	mov	r0, r4
   80276:	4910      	ldr	r1, [pc, #64]	; (802b8 <__get_json_string_end+0x98>)
   80278:	4a10      	ldr	r2, [pc, #64]	; (802bc <__get_json_string_end+0x9c>)
   8027a:	232d      	movs	r3, #45	; 0x2d
   8027c:	4c10      	ldr	r4, [pc, #64]	; (802c0 <__get_json_string_end+0xa0>)
   8027e:	47a0      	blx	r4
	return ERR;
   80280:	2000      	movs	r0, #0
   80282:	e00f      	b.n	802a4 <__get_json_string_end+0x84>
   80284:	4620      	mov	r0, r4
   80286:	e00d      	b.n	802a4 <__get_json_string_end+0x84>
			if(depth == 0) {
				if( i > 0 && at(b, i-1) == '\\' ) {		
					depth = (depth == 0); 
					continue;
				}
				JSON_assert("offset == ERR, bad ERR value!", i == ERR, return ERR;);
   80288:	4b09      	ldr	r3, [pc, #36]	; (802b0 <__get_json_string_end+0x90>)
   8028a:	681b      	ldr	r3, [r3, #0]
   8028c:	68dc      	ldr	r4, [r3, #12]
   8028e:	4b09      	ldr	r3, [pc, #36]	; (802b4 <__get_json_string_end+0x94>)
   80290:	4798      	blx	r3
   80292:	6803      	ldr	r3, [r0, #0]
   80294:	9300      	str	r3, [sp, #0]
   80296:	4620      	mov	r0, r4
   80298:	490a      	ldr	r1, [pc, #40]	; (802c4 <__get_json_string_end+0xa4>)
   8029a:	4a08      	ldr	r2, [pc, #32]	; (802bc <__get_json_string_end+0x9c>)
   8029c:	2327      	movs	r3, #39	; 0x27
   8029e:	4c08      	ldr	r4, [pc, #32]	; (802c0 <__get_json_string_end+0xa0>)
   802a0:	47a0      	blx	r4
   802a2:	2000      	movs	r0, #0
			continue; 
		}		
	}
	JSON_error("__get_json_string_end() failed to find `\"'");
	return ERR;
}
   802a4:	b003      	add	sp, #12
   802a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802aa:	bf00      	nop
   802ac:	00088451 	.word	0x00088451
   802b0:	200702c8 	.word	0x200702c8
   802b4:	0008c775 	.word	0x0008c775
   802b8:	000938ac 	.word	0x000938ac
   802bc:	00093870 	.word	0x00093870
   802c0:	0008c7c7 	.word	0x0008c7c7
   802c4:	0009395c 	.word	0x0009395c

000802c8 <__first_non_space>:


/*------------------------------------------------*/

static  offset __first_non_space(xjson *b, offset off) 
{	
   802c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802cc:	b082      	sub	sp, #8
   802ce:	4606      	mov	r6, r0
   802d0:	460c      	mov	r4, r1
	offset i;
	
	for(i = off; ok(b, i) && isspace(at(b, i)) ; ++i); 
   802d2:	6800      	ldr	r0, [r0, #0]
   802d4:	8903      	ldrh	r3, [r0, #8]
   802d6:	4299      	cmp	r1, r3
   802d8:	d211      	bcs.n	802fe <__first_non_space+0x36>
   802da:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80348 <__first_non_space+0x80>
   802de:	4f14      	ldr	r7, [pc, #80]	; (80330 <__first_non_space+0x68>)
   802e0:	e004      	b.n	802ec <__first_non_space+0x24>
   802e2:	3401      	adds	r4, #1
   802e4:	6830      	ldr	r0, [r6, #0]
   802e6:	8903      	ldrh	r3, [r0, #8]
   802e8:	42a3      	cmp	r3, r4
   802ea:	d908      	bls.n	802fe <__first_non_space+0x36>
   802ec:	f8d8 5000 	ldr.w	r5, [r8]
   802f0:	b2a1      	uxth	r1, r4
   802f2:	47b8      	blx	r7
   802f4:	4428      	add	r0, r5
   802f6:	7843      	ldrb	r3, [r0, #1]
   802f8:	f013 0f08 	tst.w	r3, #8
   802fc:	d1f1      	bne.n	802e2 <__first_non_space+0x1a>
	
	JSON_assert("offset == ERR, bad ERR value!", i == ERR, return ERR;);
   802fe:	b974      	cbnz	r4, 8031e <__first_non_space+0x56>
   80300:	4b0c      	ldr	r3, [pc, #48]	; (80334 <__first_non_space+0x6c>)
   80302:	681b      	ldr	r3, [r3, #0]
   80304:	68dc      	ldr	r4, [r3, #12]
   80306:	4b0c      	ldr	r3, [pc, #48]	; (80338 <__first_non_space+0x70>)
   80308:	4798      	blx	r3
   8030a:	6803      	ldr	r3, [r0, #0]
   8030c:	9300      	str	r3, [sp, #0]
   8030e:	4620      	mov	r0, r4
   80310:	490a      	ldr	r1, [pc, #40]	; (8033c <__first_non_space+0x74>)
   80312:	4a0b      	ldr	r2, [pc, #44]	; (80340 <__first_non_space+0x78>)
   80314:	23a5      	movs	r3, #165	; 0xa5
   80316:	4c0b      	ldr	r4, [pc, #44]	; (80344 <__first_non_space+0x7c>)
   80318:	47a0      	blx	r4
   8031a:	2000      	movs	r0, #0
   8031c:	e005      	b.n	8032a <__first_non_space+0x62>
	
	return ok(b, i) ? i : ERR;
   8031e:	6833      	ldr	r3, [r6, #0]
   80320:	8918      	ldrh	r0, [r3, #8]
   80322:	42a0      	cmp	r0, r4
   80324:	bf8c      	ite	hi
   80326:	4620      	movhi	r0, r4
   80328:	2000      	movls	r0, #0
}
   8032a:	b002      	add	sp, #8
   8032c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80330:	00088451 	.word	0x00088451
   80334:	200702c8 	.word	0x200702c8
   80338:	0008c775 	.word	0x0008c775
   8033c:	0009395c 	.word	0x0009395c
   80340:	00093888 	.word	0x00093888
   80344:	0008c7c7 	.word	0x0008c7c7
   80348:	200702c0 	.word	0x200702c0

0008034c <__get_next_elem>:
static offset __get_next_elem(xjson *b, offset off, char skip_once)
{
   8034c:	b570      	push	{r4, r5, r6, lr}
   8034e:	b082      	sub	sp, #8
   80350:	4605      	mov	r5, r0
   80352:	4616      	mov	r6, r2

	off = __first_non_space(b, off);
   80354:	4b12      	ldr	r3, [pc, #72]	; (803a0 <__get_next_elem+0x54>)
   80356:	4798      	blx	r3
	if(off == ERR)
   80358:	4604      	mov	r4, r0
   8035a:	b1e0      	cbz	r0, 80396 <__get_next_elem+0x4a>
		return off;

	if( at(b, off) != skip_once ) 
   8035c:	6828      	ldr	r0, [r5, #0]
   8035e:	b2a1      	uxth	r1, r4
   80360:	4b10      	ldr	r3, [pc, #64]	; (803a4 <__get_next_elem+0x58>)
   80362:	4798      	blx	r3
   80364:	42b0      	cmp	r0, r6
   80366:	d117      	bne.n	80398 <__get_next_elem+0x4c>
		return off;
		
	JSON_assert("offset == ERR, bad ERR value!", off + 1 == ERR, return ERR;);
   80368:	f1b4 3fff 	cmp.w	r4, #4294967295
   8036c:	d10e      	bne.n	8038c <__get_next_elem+0x40>
   8036e:	4b0e      	ldr	r3, [pc, #56]	; (803a8 <__get_next_elem+0x5c>)
   80370:	681b      	ldr	r3, [r3, #0]
   80372:	68dc      	ldr	r4, [r3, #12]
   80374:	4b0d      	ldr	r3, [pc, #52]	; (803ac <__get_next_elem+0x60>)
   80376:	4798      	blx	r3
   80378:	6803      	ldr	r3, [r0, #0]
   8037a:	9300      	str	r3, [sp, #0]
   8037c:	4620      	mov	r0, r4
   8037e:	490c      	ldr	r1, [pc, #48]	; (803b0 <__get_next_elem+0x64>)
   80380:	4a0c      	ldr	r2, [pc, #48]	; (803b4 <__get_next_elem+0x68>)
   80382:	23b3      	movs	r3, #179	; 0xb3
   80384:	4c0c      	ldr	r4, [pc, #48]	; (803b8 <__get_next_elem+0x6c>)
   80386:	47a0      	blx	r4
   80388:	2000      	movs	r0, #0
   8038a:	e006      	b.n	8039a <__get_next_elem+0x4e>
	off = __first_non_space(b, off+1);
   8038c:	4628      	mov	r0, r5
   8038e:	1c61      	adds	r1, r4, #1
   80390:	4b03      	ldr	r3, [pc, #12]	; (803a0 <__get_next_elem+0x54>)
   80392:	4798      	blx	r3
   80394:	e001      	b.n	8039a <__get_next_elem+0x4e>
   80396:	e000      	b.n	8039a <__get_next_elem+0x4e>
	off = __first_non_space(b, off);
	if(off == ERR)
		return off;

	if( at(b, off) != skip_once ) 
		return off;
   80398:	4620      	mov	r0, r4
	off = __first_non_space(b, off+1);
	if(off == ERR)
		return off;

	return off;
}
   8039a:	b002      	add	sp, #8
   8039c:	bd70      	pop	{r4, r5, r6, pc}
   8039e:	bf00      	nop
   803a0:	000802c9 	.word	0x000802c9
   803a4:	00088451 	.word	0x00088451
   803a8:	200702c8 	.word	0x200702c8
   803ac:	0008c775 	.word	0x0008c775
   803b0:	0009395c 	.word	0x0009395c
   803b4:	0009389c 	.word	0x0009389c
   803b8:	0008c7c7 	.word	0x0008c7c7

000803bc <_get_json_element_end>:
	JSON_assert("offset == ERR, bad ERR value!", off == ERR, return ERR;);
	return off;
}

static offset _get_json_element_end(xjson *b, offset off) 
{
   803bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803c0:	b082      	sub	sp, #8
   803c2:	4605      	mov	r5, r0
   803c4:	460e      	mov	r6, r1
	char c = at(b, off);
   803c6:	6800      	ldr	r0, [r0, #0]
   803c8:	b289      	uxth	r1, r1
   803ca:	4b89      	ldr	r3, [pc, #548]	; (805f0 <_get_json_element_end+0x234>)
   803cc:	4798      	blx	r3
	return c == '"' ? __get_json_string_end(b, off) : 
   803ce:	2822      	cmp	r0, #34	; 0x22
   803d0:	d104      	bne.n	803dc <_get_json_element_end+0x20>
   803d2:	4628      	mov	r0, r5
   803d4:	4631      	mov	r1, r6
   803d6:	4b87      	ldr	r3, [pc, #540]	; (805f4 <_get_json_element_end+0x238>)
   803d8:	4798      	blx	r3
   803da:	e140      	b.n	8065e <_get_json_element_end+0x2a2>
	       c == '{' ? __get_json_object_end(b, off) : 
   803dc:	287b      	cmp	r0, #123	; 0x7b
   803de:	d151      	bne.n	80484 <_get_json_element_end+0xc8>
{
	offset i;
	char depth = 0;

	
	for(i=off; ok(b, i) ; ++i) {
   803e0:	6828      	ldr	r0, [r5, #0]
   803e2:	8903      	ldrh	r3, [r0, #8]
   803e4:	429e      	cmp	r6, r3
   803e6:	d23c      	bcs.n	80462 <_get_json_element_end+0xa6>
   803e8:	2700      	movs	r7, #0
		char c = at(b, i);
   803ea:	4c81      	ldr	r4, [pc, #516]	; (805f0 <_get_json_element_end+0x234>)
		if( c == '"' ) {
			i = __get_json_string_end(b, i);
   803ec:	f8df 8204 	ldr.w	r8, [pc, #516]	; 805f4 <_get_json_element_end+0x238>
	offset i;
	char depth = 0;

	
	for(i=off; ok(b, i) ; ++i) {
		char c = at(b, i);
   803f0:	b2b1      	uxth	r1, r6
   803f2:	47a0      	blx	r4
		if( c == '"' ) {
   803f4:	2822      	cmp	r0, #34	; 0x22
   803f6:	d114      	bne.n	80422 <_get_json_element_end+0x66>
			i = __get_json_string_end(b, i);
   803f8:	4628      	mov	r0, r5
   803fa:	4631      	mov	r1, r6
   803fc:	47c0      	blx	r8
			if(i == ERR) {
   803fe:	4606      	mov	r6, r0
   80400:	2800      	cmp	r0, #0
   80402:	d129      	bne.n	80458 <_get_json_element_end+0x9c>
				JSON_error("__get_json_sting_end() failed");
   80404:	4b7c      	ldr	r3, [pc, #496]	; (805f8 <_get_json_element_end+0x23c>)
   80406:	681b      	ldr	r3, [r3, #0]
   80408:	68dc      	ldr	r4, [r3, #12]
   8040a:	4b7c      	ldr	r3, [pc, #496]	; (805fc <_get_json_element_end+0x240>)
   8040c:	4798      	blx	r3
   8040e:	6803      	ldr	r3, [r0, #0]
   80410:	9300      	str	r3, [sp, #0]
   80412:	4620      	mov	r0, r4
   80414:	497a      	ldr	r1, [pc, #488]	; (80600 <_get_json_element_end+0x244>)
   80416:	4a7b      	ldr	r2, [pc, #492]	; (80604 <_get_json_element_end+0x248>)
   80418:	233b      	movs	r3, #59	; 0x3b
   8041a:	4c7b      	ldr	r4, [pc, #492]	; (80608 <_get_json_element_end+0x24c>)
   8041c:	47a0      	blx	r4
				return ERR;	
   8041e:	2000      	movs	r0, #0
   80420:	e11d      	b.n	8065e <_get_json_element_end+0x2a2>
			}
			continue;
		}
				
		if( c == '{' ) { depth ++; continue; }	
   80422:	287b      	cmp	r0, #123	; 0x7b
   80424:	d102      	bne.n	8042c <_get_json_element_end+0x70>
   80426:	3701      	adds	r7, #1
   80428:	b2ff      	uxtb	r7, r7
   8042a:	e015      	b.n	80458 <_get_json_element_end+0x9c>
		if( c == '}' ) { 
   8042c:	287d      	cmp	r0, #125	; 0x7d
   8042e:	d113      	bne.n	80458 <_get_json_element_end+0x9c>
			depth --; 
   80430:	3f01      	subs	r7, #1
			if(depth == 0) { 
   80432:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   80436:	d10f      	bne.n	80458 <_get_json_element_end+0x9c>
				JSON_assert("offset == ERR, bad ERR value!", i == ERR, return ERR;);
   80438:	bb16      	cbnz	r6, 80480 <_get_json_element_end+0xc4>
   8043a:	4b6f      	ldr	r3, [pc, #444]	; (805f8 <_get_json_element_end+0x23c>)
   8043c:	681b      	ldr	r3, [r3, #0]
   8043e:	68dc      	ldr	r4, [r3, #12]
   80440:	4b6e      	ldr	r3, [pc, #440]	; (805fc <_get_json_element_end+0x240>)
   80442:	4798      	blx	r3
   80444:	6803      	ldr	r3, [r0, #0]
   80446:	9300      	str	r3, [sp, #0]
   80448:	4620      	mov	r0, r4
   8044a:	4970      	ldr	r1, [pc, #448]	; (8060c <_get_json_element_end+0x250>)
   8044c:	4a6d      	ldr	r2, [pc, #436]	; (80604 <_get_json_element_end+0x248>)
   8044e:	2345      	movs	r3, #69	; 0x45
   80450:	4c6d      	ldr	r4, [pc, #436]	; (80608 <_get_json_element_end+0x24c>)
   80452:	47a0      	blx	r4
   80454:	2000      	movs	r0, #0
   80456:	e102      	b.n	8065e <_get_json_element_end+0x2a2>
{
	offset i;
	char depth = 0;

	
	for(i=off; ok(b, i) ; ++i) {
   80458:	3601      	adds	r6, #1
   8045a:	6828      	ldr	r0, [r5, #0]
   8045c:	8903      	ldrh	r3, [r0, #8]
   8045e:	429e      	cmp	r6, r3
   80460:	d3c6      	bcc.n	803f0 <_get_json_element_end+0x34>
			}
			continue; 
		}		
	}
	
	JSON_error("__get_json_object_end() failed to find `}'");
   80462:	4b65      	ldr	r3, [pc, #404]	; (805f8 <_get_json_element_end+0x23c>)
   80464:	681b      	ldr	r3, [r3, #0]
   80466:	68dc      	ldr	r4, [r3, #12]
   80468:	4b64      	ldr	r3, [pc, #400]	; (805fc <_get_json_element_end+0x240>)
   8046a:	4798      	blx	r3
   8046c:	6803      	ldr	r3, [r0, #0]
   8046e:	9300      	str	r3, [sp, #0]
   80470:	4620      	mov	r0, r4
   80472:	4967      	ldr	r1, [pc, #412]	; (80610 <_get_json_element_end+0x254>)
   80474:	4a63      	ldr	r2, [pc, #396]	; (80604 <_get_json_element_end+0x248>)
   80476:	234c      	movs	r3, #76	; 0x4c
   80478:	4c63      	ldr	r4, [pc, #396]	; (80608 <_get_json_element_end+0x24c>)
   8047a:	47a0      	blx	r4
	return ERR;
   8047c:	2000      	movs	r0, #0
   8047e:	e0ee      	b.n	8065e <_get_json_element_end+0x2a2>
				
		if( c == '{' ) { depth ++; continue; }	
		if( c == '}' ) { 
			depth --; 
			if(depth == 0) { 
				JSON_assert("offset == ERR, bad ERR value!", i == ERR, return ERR;);
   80480:	4630      	mov	r0, r6
   80482:	e0ec      	b.n	8065e <_get_json_element_end+0x2a2>
static offset _get_json_element_end(xjson *b, offset off) 
{
	char c = at(b, off);
	return c == '"' ? __get_json_string_end(b, off) : 
	       c == '{' ? __get_json_object_end(b, off) : 
	       c == '[' ? __get_json_array_end(b, off)  : 
   80484:	285b      	cmp	r0, #91	; 0x5b
   80486:	d140      	bne.n	8050a <_get_json_element_end+0x14e>
static offset __get_json_array_end(xjson *b, offset off) 
{
	offset i;
	char depth = 0;

	for(i=off; ok(b, i) ; ++i) {
   80488:	6828      	ldr	r0, [r5, #0]
   8048a:	8903      	ldrh	r3, [r0, #8]
   8048c:	429e      	cmp	r6, r3
   8048e:	d22b      	bcs.n	804e8 <_get_json_element_end+0x12c>
   80490:	2700      	movs	r7, #0
		char c = at(b, i);
   80492:	4c57      	ldr	r4, [pc, #348]	; (805f0 <_get_json_element_end+0x234>)
		if( c == '"' ) {
			i = __get_json_string_end(b, i);
   80494:	f8df 815c 	ldr.w	r8, [pc, #348]	; 805f4 <_get_json_element_end+0x238>
{
	offset i;
	char depth = 0;

	for(i=off; ok(b, i) ; ++i) {
		char c = at(b, i);
   80498:	b2b1      	uxth	r1, r6
   8049a:	47a0      	blx	r4
		if( c == '"' ) {
   8049c:	2822      	cmp	r0, #34	; 0x22
   8049e:	d113      	bne.n	804c8 <_get_json_element_end+0x10c>
			i = __get_json_string_end(b, i);
   804a0:	4628      	mov	r0, r5
   804a2:	4631      	mov	r1, r6
   804a4:	47c0      	blx	r8
			if(i == ERR) {
   804a6:	4606      	mov	r6, r0
   804a8:	b9c8      	cbnz	r0, 804de <_get_json_element_end+0x122>
				JSON_assert("offset == ERR, bad ERR value!", i == ERR, return ERR;);
   804aa:	4b53      	ldr	r3, [pc, #332]	; (805f8 <_get_json_element_end+0x23c>)
   804ac:	681b      	ldr	r3, [r3, #0]
   804ae:	68dc      	ldr	r4, [r3, #12]
   804b0:	4b52      	ldr	r3, [pc, #328]	; (805fc <_get_json_element_end+0x240>)
   804b2:	4798      	blx	r3
   804b4:	6803      	ldr	r3, [r0, #0]
   804b6:	9300      	str	r3, [sp, #0]
   804b8:	4620      	mov	r0, r4
   804ba:	4954      	ldr	r1, [pc, #336]	; (8060c <_get_json_element_end+0x250>)
   804bc:	4a55      	ldr	r2, [pc, #340]	; (80614 <_get_json_element_end+0x258>)
   804be:	2359      	movs	r3, #89	; 0x59
   804c0:	4c51      	ldr	r4, [pc, #324]	; (80608 <_get_json_element_end+0x24c>)
   804c2:	47a0      	blx	r4
   804c4:	2000      	movs	r0, #0
   804c6:	e0ca      	b.n	8065e <_get_json_element_end+0x2a2>
				return ERR;		
			}
			continue;
		}
		
		if( c == '[' ) { depth ++; continue; }	
   804c8:	285b      	cmp	r0, #91	; 0x5b
   804ca:	d102      	bne.n	804d2 <_get_json_element_end+0x116>
   804cc:	3701      	adds	r7, #1
   804ce:	b2ff      	uxtb	r7, r7
   804d0:	e005      	b.n	804de <_get_json_element_end+0x122>
		if( c == ']' ) { 
   804d2:	285d      	cmp	r0, #93	; 0x5d
   804d4:	d103      	bne.n	804de <_get_json_element_end+0x122>
			depth --; 
   804d6:	3f01      	subs	r7, #1
			if(depth == 0) 
   804d8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   804dc:	d013      	beq.n	80506 <_get_json_element_end+0x14a>
static offset __get_json_array_end(xjson *b, offset off) 
{
	offset i;
	char depth = 0;

	for(i=off; ok(b, i) ; ++i) {
   804de:	3601      	adds	r6, #1
   804e0:	6828      	ldr	r0, [r5, #0]
   804e2:	8903      	ldrh	r3, [r0, #8]
   804e4:	429e      	cmp	r6, r3
   804e6:	d3d7      	bcc.n	80498 <_get_json_element_end+0xdc>
				return i;
			continue; 
		}
		
	}
	JSON_error("__get_json_array_end() failed to find `]'");
   804e8:	4b43      	ldr	r3, [pc, #268]	; (805f8 <_get_json_element_end+0x23c>)
   804ea:	681b      	ldr	r3, [r3, #0]
   804ec:	68dc      	ldr	r4, [r3, #12]
   804ee:	4b43      	ldr	r3, [pc, #268]	; (805fc <_get_json_element_end+0x240>)
   804f0:	4798      	blx	r3
   804f2:	6803      	ldr	r3, [r0, #0]
   804f4:	9300      	str	r3, [sp, #0]
   804f6:	4620      	mov	r0, r4
   804f8:	4947      	ldr	r1, [pc, #284]	; (80618 <_get_json_element_end+0x25c>)
   804fa:	4a46      	ldr	r2, [pc, #280]	; (80614 <_get_json_element_end+0x258>)
   804fc:	2368      	movs	r3, #104	; 0x68
   804fe:	4c42      	ldr	r4, [pc, #264]	; (80608 <_get_json_element_end+0x24c>)
   80500:	47a0      	blx	r4
	return ERR;
   80502:	2000      	movs	r0, #0
   80504:	e0ab      	b.n	8065e <_get_json_element_end+0x2a2>
		}
		
		if( c == '[' ) { depth ++; continue; }	
		if( c == ']' ) { 
			depth --; 
			if(depth == 0) 
   80506:	4630      	mov	r0, r6
   80508:	e0a9      	b.n	8065e <_get_json_element_end+0x2a2>
{
	char c = at(b, off);
	return c == '"' ? __get_json_string_end(b, off) : 
	       c == '{' ? __get_json_object_end(b, off) : 
	       c == '[' ? __get_json_array_end(b, off)  : 
	       (isdigit(c) || c == '-' || c == '+') ? __get_json_number_end(b, off) : __get_json_bool_or_null_end(b, off);	
   8050a:	4b44      	ldr	r3, [pc, #272]	; (8061c <_get_json_element_end+0x260>)
   8050c:	681b      	ldr	r3, [r3, #0]
   8050e:	4403      	add	r3, r0
   80510:	785b      	ldrb	r3, [r3, #1]
   80512:	f013 0f04 	tst.w	r3, #4
   80516:	d103      	bne.n	80520 <_get_json_element_end+0x164>
   80518:	282d      	cmp	r0, #45	; 0x2d
   8051a:	d001      	beq.n	80520 <_get_json_element_end+0x164>
   8051c:	282b      	cmp	r0, #43	; 0x2b
   8051e:	d140      	bne.n	805a2 <_get_json_element_end+0x1e6>
	return ERR;
}
static offset __get_json_number_end(xjson *b, offset off) 
{
	int i;
	for(i=off; ok(b, i); ++i) {
   80520:	4634      	mov	r4, r6
   80522:	6828      	ldr	r0, [r5, #0]
   80524:	8903      	ldrh	r3, [r0, #8]
   80526:	429e      	cmp	r6, r3
   80528:	da2c      	bge.n	80584 <_get_json_element_end+0x1c8>
		char c = at(b, i);
   8052a:	4f31      	ldr	r7, [pc, #196]	; (805f0 <_get_json_element_end+0x234>)
							
		if( !isdigit(c) && c != 'e' && c != 'E' 
   8052c:	4e3b      	ldr	r6, [pc, #236]	; (8061c <_get_json_element_end+0x260>)
}
static offset __get_json_number_end(xjson *b, offset off) 
{
	int i;
	for(i=off; ok(b, i); ++i) {
		char c = at(b, i);
   8052e:	b2a1      	uxth	r1, r4
   80530:	47b8      	blx	r7
							
		if( !isdigit(c) && c != 'e' && c != 'E' 
   80532:	6833      	ldr	r3, [r6, #0]
   80534:	4403      	add	r3, r0
   80536:	785b      	ldrb	r3, [r3, #1]
   80538:	f013 0f04 	tst.w	r3, #4
   8053c:	d11d      	bne.n	8057a <_get_json_element_end+0x1be>
   8053e:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   80542:	2b45      	cmp	r3, #69	; 0x45
   80544:	d019      	beq.n	8057a <_get_json_element_end+0x1be>
				&& c != '-' && c != '+' && c != '.' ) {
   80546:	f1a0 032d 	sub.w	r3, r0, #45	; 0x2d
   8054a:	b2db      	uxtb	r3, r3
   8054c:	2b01      	cmp	r3, #1
   8054e:	d914      	bls.n	8057a <_get_json_element_end+0x1be>
   80550:	282b      	cmp	r0, #43	; 0x2b
   80552:	d012      	beq.n	8057a <_get_json_element_end+0x1be>
				JSON_assert("offset == ERR, bad ERR value!", i-1 == ERR, return ERR;);
   80554:	2c01      	cmp	r4, #1
   80556:	d10e      	bne.n	80576 <_get_json_element_end+0x1ba>
   80558:	4b27      	ldr	r3, [pc, #156]	; (805f8 <_get_json_element_end+0x23c>)
   8055a:	681b      	ldr	r3, [r3, #0]
   8055c:	68dc      	ldr	r4, [r3, #12]
   8055e:	4b27      	ldr	r3, [pc, #156]	; (805fc <_get_json_element_end+0x240>)
   80560:	4798      	blx	r3
   80562:	6803      	ldr	r3, [r0, #0]
   80564:	9300      	str	r3, [sp, #0]
   80566:	4620      	mov	r0, r4
   80568:	4928      	ldr	r1, [pc, #160]	; (8060c <_get_json_element_end+0x250>)
   8056a:	4a2d      	ldr	r2, [pc, #180]	; (80620 <_get_json_element_end+0x264>)
   8056c:	2373      	movs	r3, #115	; 0x73
   8056e:	4c26      	ldr	r4, [pc, #152]	; (80608 <_get_json_element_end+0x24c>)
   80570:	47a0      	blx	r4
   80572:	2000      	movs	r0, #0
   80574:	e073      	b.n	8065e <_get_json_element_end+0x2a2>
				return i-1;	
   80576:	1e60      	subs	r0, r4, #1
   80578:	e071      	b.n	8065e <_get_json_element_end+0x2a2>
	return ERR;
}
static offset __get_json_number_end(xjson *b, offset off) 
{
	int i;
	for(i=off; ok(b, i); ++i) {
   8057a:	3401      	adds	r4, #1
   8057c:	6828      	ldr	r0, [r5, #0]
   8057e:	8903      	ldrh	r3, [r0, #8]
   80580:	429c      	cmp	r4, r3
   80582:	dbd4      	blt.n	8052e <_get_json_element_end+0x172>
				&& c != '-' && c != '+' && c != '.' ) {
				JSON_assert("offset == ERR, bad ERR value!", i-1 == ERR, return ERR;);
				return i-1;	
		}
	}
	JSON_error("__get_json_number_end() failed to find number end");
   80584:	4b1c      	ldr	r3, [pc, #112]	; (805f8 <_get_json_element_end+0x23c>)
   80586:	681b      	ldr	r3, [r3, #0]
   80588:	68dc      	ldr	r4, [r3, #12]
   8058a:	4b1c      	ldr	r3, [pc, #112]	; (805fc <_get_json_element_end+0x240>)
   8058c:	4798      	blx	r3
   8058e:	6803      	ldr	r3, [r0, #0]
   80590:	9300      	str	r3, [sp, #0]
   80592:	4620      	mov	r0, r4
   80594:	4923      	ldr	r1, [pc, #140]	; (80624 <_get_json_element_end+0x268>)
   80596:	4a22      	ldr	r2, [pc, #136]	; (80620 <_get_json_element_end+0x264>)
   80598:	2377      	movs	r3, #119	; 0x77
   8059a:	4c1b      	ldr	r4, [pc, #108]	; (80608 <_get_json_element_end+0x24c>)
   8059c:	47a0      	blx	r4
	return ERR;
   8059e:	2000      	movs	r0, #0
{
	char c = at(b, off);
	return c == '"' ? __get_json_string_end(b, off) : 
	       c == '{' ? __get_json_object_end(b, off) : 
	       c == '[' ? __get_json_array_end(b, off)  : 
	       (isdigit(c) || c == '-' || c == '+') ? __get_json_number_end(b, off) : __get_json_bool_or_null_end(b, off);	
   805a0:	e05d      	b.n	8065e <_get_json_element_end+0x2a2>
	}
	return 0;
}
static offset __get_json_bool_or_null_end(xjson *b, offset off) 
{
	if( __compare(b, off,  "true", 4) == 0 || __compare(b, off, "null", 4) == 0) {
   805a2:	4628      	mov	r0, r5
   805a4:	4631      	mov	r1, r6
   805a6:	4a20      	ldr	r2, [pc, #128]	; (80628 <_get_json_element_end+0x26c>)
   805a8:	2304      	movs	r3, #4
   805aa:	4c20      	ldr	r4, [pc, #128]	; (8062c <_get_json_element_end+0x270>)
   805ac:	47a0      	blx	r4
   805ae:	b128      	cbz	r0, 805bc <_get_json_element_end+0x200>
   805b0:	4628      	mov	r0, r5
   805b2:	4631      	mov	r1, r6
   805b4:	4a1e      	ldr	r2, [pc, #120]	; (80630 <_get_json_element_end+0x274>)
   805b6:	2304      	movs	r3, #4
   805b8:	47a0      	blx	r4
   805ba:	b908      	cbnz	r0, 805c0 <_get_json_element_end+0x204>
		off += 3;
   805bc:	3603      	adds	r6, #3
   805be:	e03f      	b.n	80640 <_get_json_element_end+0x284>
	} else if( __compare(b, off, "false", 5) == 0) {
   805c0:	4628      	mov	r0, r5
   805c2:	4631      	mov	r1, r6
   805c4:	4a1b      	ldr	r2, [pc, #108]	; (80634 <_get_json_element_end+0x278>)
   805c6:	2305      	movs	r3, #5
   805c8:	4c18      	ldr	r4, [pc, #96]	; (8062c <_get_json_element_end+0x270>)
   805ca:	47a0      	blx	r4
   805cc:	b908      	cbnz	r0, 805d2 <_get_json_element_end+0x216>
		off += 4;
   805ce:	3604      	adds	r6, #4
   805d0:	e036      	b.n	80640 <_get_json_element_end+0x284>
	} else {	
		JSON_error("__get_json_bool_or_null_end() bad json value");
   805d2:	4b09      	ldr	r3, [pc, #36]	; (805f8 <_get_json_element_end+0x23c>)
   805d4:	681b      	ldr	r3, [r3, #0]
   805d6:	68dc      	ldr	r4, [r3, #12]
   805d8:	4b08      	ldr	r3, [pc, #32]	; (805fc <_get_json_element_end+0x240>)
   805da:	4798      	blx	r3
   805dc:	6803      	ldr	r3, [r0, #0]
   805de:	9300      	str	r3, [sp, #0]
   805e0:	4620      	mov	r0, r4
   805e2:	4915      	ldr	r1, [pc, #84]	; (80638 <_get_json_element_end+0x27c>)
   805e4:	4a15      	ldr	r2, [pc, #84]	; (8063c <_get_json_element_end+0x280>)
   805e6:	238c      	movs	r3, #140	; 0x8c
   805e8:	4c07      	ldr	r4, [pc, #28]	; (80608 <_get_json_element_end+0x24c>)
   805ea:	47a0      	blx	r4
		return ERR;		
   805ec:	2600      	movs	r6, #0
   805ee:	e035      	b.n	8065c <_get_json_element_end+0x2a0>
   805f0:	00088451 	.word	0x00088451
   805f4:	00080221 	.word	0x00080221
   805f8:	200702c8 	.word	0x200702c8
   805fc:	0008c775 	.word	0x0008c775
   80600:	000939fc 	.word	0x000939fc
   80604:	00094148 	.word	0x00094148
   80608:	0008c7c7 	.word	0x0008c7c7
   8060c:	0009395c 	.word	0x0009395c
   80610:	00093a9c 	.word	0x00093a9c
   80614:	00094160 	.word	0x00094160
   80618:	00093b4c 	.word	0x00093b4c
   8061c:	200702c0 	.word	0x200702c0
   80620:	0009418c 	.word	0x0009418c
   80624:	00093bf8 	.word	0x00093bf8
   80628:	00093cac 	.word	0x00093cac
   8062c:	000801a5 	.word	0x000801a5
   80630:	00093cb4 	.word	0x00093cb4
   80634:	00093cbc 	.word	0x00093cbc
   80638:	00093cc4 	.word	0x00093cc4
   8063c:	00093840 	.word	0x00093840
	}
	JSON_assert("offset == ERR, bad ERR value!", off == ERR, return ERR;);
   80640:	b966      	cbnz	r6, 8065c <_get_json_element_end+0x2a0>
   80642:	4b08      	ldr	r3, [pc, #32]	; (80664 <_get_json_element_end+0x2a8>)
   80644:	681b      	ldr	r3, [r3, #0]
   80646:	68dc      	ldr	r4, [r3, #12]
   80648:	4b07      	ldr	r3, [pc, #28]	; (80668 <_get_json_element_end+0x2ac>)
   8064a:	4798      	blx	r3
   8064c:	6803      	ldr	r3, [r0, #0]
   8064e:	9300      	str	r3, [sp, #0]
   80650:	4620      	mov	r0, r4
   80652:	4906      	ldr	r1, [pc, #24]	; (8066c <_get_json_element_end+0x2b0>)
   80654:	4a06      	ldr	r2, [pc, #24]	; (80670 <_get_json_element_end+0x2b4>)
   80656:	238f      	movs	r3, #143	; 0x8f
   80658:	4c06      	ldr	r4, [pc, #24]	; (80674 <_get_json_element_end+0x2b8>)
   8065a:	47a0      	blx	r4
{
	char c = at(b, off);
	return c == '"' ? __get_json_string_end(b, off) : 
	       c == '{' ? __get_json_object_end(b, off) : 
	       c == '[' ? __get_json_array_end(b, off)  : 
	       (isdigit(c) || c == '-' || c == '+') ? __get_json_number_end(b, off) : __get_json_bool_or_null_end(b, off);	
   8065c:	4630      	mov	r0, r6
}
   8065e:	b002      	add	sp, #8
   80660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80664:	200702c8 	.word	0x200702c8
   80668:	0008c775 	.word	0x0008c775
   8066c:	0009395c 	.word	0x0009395c
   80670:	00093840 	.word	0x00093840
   80674:	0008c7c7 	.word	0x0008c7c7

00080678 <print_xjson>:


#include "generic-json-zero-copy.h"

void print_xjson(char *prefix, char *postfix, xjson *b, offset off, int len)
{
   80678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8067c:	4680      	mov	r8, r0
   8067e:	468a      	mov	sl, r1
   80680:	4616      	mov	r6, r2
   80682:	461f      	mov	r7, r3
   80684:	9d08      	ldr	r5, [sp, #32]
	int i;
	printf("len=%d,off=%d ",len, off);
   80686:	481b      	ldr	r0, [pc, #108]	; (806f4 <print_xjson+0x7c>)
   80688:	4629      	mov	r1, r5
   8068a:	461a      	mov	r2, r3
   8068c:	4c1a      	ldr	r4, [pc, #104]	; (806f8 <print_xjson+0x80>)
   8068e:	47a0      	blx	r4
	printf("%s", prefix);
   80690:	481a      	ldr	r0, [pc, #104]	; (806fc <print_xjson+0x84>)
   80692:	4641      	mov	r1, r8
   80694:	47a0      	blx	r4
	for(i=off; i < off+len && ok(b, i); ++i ) {
   80696:	463c      	mov	r4, r7
   80698:	443d      	add	r5, r7
   8069a:	42af      	cmp	r7, r5
   8069c:	d223      	bcs.n	806e6 <print_xjson+0x6e>
   8069e:	6830      	ldr	r0, [r6, #0]
   806a0:	8903      	ldrh	r3, [r0, #8]
   806a2:	429f      	cmp	r7, r3
   806a4:	da1f      	bge.n	806e6 <print_xjson+0x6e>
		char c = at(b, i);
   806a6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8070c <print_xjson+0x94>
		switch(c) {
			case '\r': printf("\\r"); 	break;
			case '\n': printf("\\n\n"); 	break;						
   806aa:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80710 <print_xjson+0x98>
   806ae:	4f12      	ldr	r7, [pc, #72]	; (806f8 <print_xjson+0x80>)
{
	int i;
	printf("len=%d,off=%d ",len, off);
	printf("%s", prefix);
	for(i=off; i < off+len && ok(b, i); ++i ) {
		char c = at(b, i);
   806b0:	b2a1      	uxth	r1, r4
   806b2:	47c0      	blx	r8
   806b4:	4601      	mov	r1, r0
		switch(c) {
   806b6:	280a      	cmp	r0, #10
   806b8:	d006      	beq.n	806c8 <print_xjson+0x50>
   806ba:	280d      	cmp	r0, #13
   806bc:	d001      	beq.n	806c2 <print_xjson+0x4a>
   806be:	b948      	cbnz	r0, 806d4 <print_xjson+0x5c>
   806c0:	e005      	b.n	806ce <print_xjson+0x56>
			case '\r': printf("\\r"); 	break;
   806c2:	480f      	ldr	r0, [pc, #60]	; (80700 <print_xjson+0x88>)
   806c4:	47b8      	blx	r7
   806c6:	e007      	b.n	806d8 <print_xjson+0x60>
			case '\n': printf("\\n\n"); 	break;						
   806c8:	4648      	mov	r0, r9
   806ca:	47b8      	blx	r7
   806cc:	e004      	b.n	806d8 <print_xjson+0x60>
			case '\0': printf("\\0"); 	break;
   806ce:	480d      	ldr	r0, [pc, #52]	; (80704 <print_xjson+0x8c>)
   806d0:	47b8      	blx	r7
   806d2:	e001      	b.n	806d8 <print_xjson+0x60>
			default:   printf("%c", c); 	break;
   806d4:	480c      	ldr	r0, [pc, #48]	; (80708 <print_xjson+0x90>)
   806d6:	47b8      	blx	r7
void print_xjson(char *prefix, char *postfix, xjson *b, offset off, int len)
{
	int i;
	printf("len=%d,off=%d ",len, off);
	printf("%s", prefix);
	for(i=off; i < off+len && ok(b, i); ++i ) {
   806d8:	3401      	adds	r4, #1
   806da:	42ac      	cmp	r4, r5
   806dc:	d203      	bcs.n	806e6 <print_xjson+0x6e>
   806de:	6830      	ldr	r0, [r6, #0]
   806e0:	8903      	ldrh	r3, [r0, #8]
   806e2:	42a3      	cmp	r3, r4
   806e4:	dce4      	bgt.n	806b0 <print_xjson+0x38>
			case '\0': printf("\\0"); 	break;
			default:   printf("%c", c); 	break;
			
		}
	}
	printf("%s", postfix);
   806e6:	4805      	ldr	r0, [pc, #20]	; (806fc <print_xjson+0x84>)
   806e8:	4651      	mov	r1, sl
   806ea:	4b03      	ldr	r3, [pc, #12]	; (806f8 <print_xjson+0x80>)
   806ec:	4798      	blx	r3
   806ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   806f2:	bf00      	nop
   806f4:	00093d74 	.word	0x00093d74
   806f8:	0008c839 	.word	0x0008c839
   806fc:	00093d84 	.word	0x00093d84
   80700:	00093d88 	.word	0x00093d88
   80704:	00093d90 	.word	0x00093d90
   80708:	00093d94 	.word	0x00093d94
   8070c:	00088451 	.word	0x00088451
   80710:	00093d8c 	.word	0x00093d8c

00080714 <JSON_decode_object>:
}

/*------------------------------------------------*/

int JSON_decode_object(xjson *b, offset off, JSON_object_cb callback, void *arg)
{
   80714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80718:	b085      	sub	sp, #20
   8071a:	4604      	mov	r4, r0
   8071c:	460e      	mov	r6, r1
   8071e:	9202      	str	r2, [sp, #8]
   80720:	9303      	str	r3, [sp, #12]
	offset ovalue, ovalue_e;
	
	int rv = 0;
	
	for(; ok(b, off) && ok(b, off + 1) ;) {			
		oname = __get_next_elem(b, off+1, ',');
   80722:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8084c <JSON_decode_object+0x138>
		if(oname == ERR) {
			JSON_error("__get_next_elem(1)");
			return -1;
		}
		if(at(b, oname) == '}' ) {
   80726:	f8df a128 	ldr.w	sl, [pc, #296]	; 80850 <JSON_decode_object+0x13c>
			return 0;
		}
		

		oname_e = __get_json_string_end(b, oname);
   8072a:	f8df b128 	ldr.w	fp, [pc, #296]	; 80854 <JSON_decode_object+0x140>
	offset oname, oname_e;
	offset ovalue, ovalue_e;
	
	int rv = 0;
	
	for(; ok(b, off) && ok(b, off + 1) ;) {			
   8072e:	e06a      	b.n	80806 <JSON_decode_object+0xf2>
		oname = __get_next_elem(b, off+1, ',');
   80730:	4620      	mov	r0, r4
   80732:	222c      	movs	r2, #44	; 0x2c
   80734:	47c8      	blx	r9
		if(oname == ERR) {
   80736:	4605      	mov	r5, r0
   80738:	b978      	cbnz	r0, 8075a <JSON_decode_object+0x46>
			JSON_error("__get_next_elem(1)");
   8073a:	4b3b      	ldr	r3, [pc, #236]	; (80828 <JSON_decode_object+0x114>)
   8073c:	681b      	ldr	r3, [r3, #0]
   8073e:	68dc      	ldr	r4, [r3, #12]
   80740:	4b3a      	ldr	r3, [pc, #232]	; (8082c <JSON_decode_object+0x118>)
   80742:	4798      	blx	r3
   80744:	6803      	ldr	r3, [r0, #0]
   80746:	9300      	str	r3, [sp, #0]
   80748:	4620      	mov	r0, r4
   8074a:	4939      	ldr	r1, [pc, #228]	; (80830 <JSON_decode_object+0x11c>)
   8074c:	4a39      	ldr	r2, [pc, #228]	; (80834 <JSON_decode_object+0x120>)
   8074e:	23c7      	movs	r3, #199	; 0xc7
   80750:	4c39      	ldr	r4, [pc, #228]	; (80838 <JSON_decode_object+0x124>)
   80752:	47a0      	blx	r4
			return -1;
   80754:	f04f 30ff 	mov.w	r0, #4294967295
   80758:	e062      	b.n	80820 <JSON_decode_object+0x10c>
		}
		if(at(b, oname) == '}' ) {
   8075a:	6820      	ldr	r0, [r4, #0]
   8075c:	b2a9      	uxth	r1, r5
   8075e:	47d0      	blx	sl
   80760:	287d      	cmp	r0, #125	; 0x7d
   80762:	d059      	beq.n	80818 <JSON_decode_object+0x104>
			return 0;
		}
		

		oname_e = __get_json_string_end(b, oname);
   80764:	4620      	mov	r0, r4
   80766:	4629      	mov	r1, r5
   80768:	47d8      	blx	fp
		if(oname_e == ERR) {
   8076a:	4680      	mov	r8, r0
   8076c:	b978      	cbnz	r0, 8078e <JSON_decode_object+0x7a>
			JSON_error("__get_json_string_end()");
   8076e:	4b2e      	ldr	r3, [pc, #184]	; (80828 <JSON_decode_object+0x114>)
   80770:	681b      	ldr	r3, [r3, #0]
   80772:	68dc      	ldr	r4, [r3, #12]
   80774:	4b2d      	ldr	r3, [pc, #180]	; (8082c <JSON_decode_object+0x118>)
   80776:	4798      	blx	r3
   80778:	6803      	ldr	r3, [r0, #0]
   8077a:	9300      	str	r3, [sp, #0]
   8077c:	4620      	mov	r0, r4
   8077e:	492f      	ldr	r1, [pc, #188]	; (8083c <JSON_decode_object+0x128>)
   80780:	4a2c      	ldr	r2, [pc, #176]	; (80834 <JSON_decode_object+0x120>)
   80782:	23d1      	movs	r3, #209	; 0xd1
   80784:	4c2c      	ldr	r4, [pc, #176]	; (80838 <JSON_decode_object+0x124>)
   80786:	47a0      	blx	r4
			return -1;
   80788:	f04f 30ff 	mov.w	r0, #4294967295
   8078c:	e048      	b.n	80820 <JSON_decode_object+0x10c>
		}
		

		ovalue = __get_next_elem(b, oname_e+1, ':');
   8078e:	4620      	mov	r0, r4
   80790:	f108 0101 	add.w	r1, r8, #1
   80794:	223a      	movs	r2, #58	; 0x3a
   80796:	47c8      	blx	r9
		if(ovalue == ERR) {
   80798:	4607      	mov	r7, r0
   8079a:	b978      	cbnz	r0, 807bc <JSON_decode_object+0xa8>
			JSON_error("__get_next_elem(2)");
   8079c:	4b22      	ldr	r3, [pc, #136]	; (80828 <JSON_decode_object+0x114>)
   8079e:	681b      	ldr	r3, [r3, #0]
   807a0:	68dc      	ldr	r4, [r3, #12]
   807a2:	4b22      	ldr	r3, [pc, #136]	; (8082c <JSON_decode_object+0x118>)
   807a4:	4798      	blx	r3
   807a6:	6803      	ldr	r3, [r0, #0]
   807a8:	9300      	str	r3, [sp, #0]
   807aa:	4620      	mov	r0, r4
   807ac:	4924      	ldr	r1, [pc, #144]	; (80840 <JSON_decode_object+0x12c>)
   807ae:	4a21      	ldr	r2, [pc, #132]	; (80834 <JSON_decode_object+0x120>)
   807b0:	23d8      	movs	r3, #216	; 0xd8
   807b2:	4c21      	ldr	r4, [pc, #132]	; (80838 <JSON_decode_object+0x124>)
   807b4:	47a0      	blx	r4
			return -1;
   807b6:	f04f 30ff 	mov.w	r0, #4294967295
   807ba:	e031      	b.n	80820 <JSON_decode_object+0x10c>
		}

		ovalue_e = _get_json_element_end(b, ovalue);
   807bc:	4620      	mov	r0, r4
   807be:	4639      	mov	r1, r7
   807c0:	4b20      	ldr	r3, [pc, #128]	; (80844 <JSON_decode_object+0x130>)
   807c2:	4798      	blx	r3
		if(ovalue_e == ERR) {
   807c4:	4606      	mov	r6, r0
   807c6:	b978      	cbnz	r0, 807e8 <JSON_decode_object+0xd4>
			JSON_error("_get_json_element_end()");
   807c8:	4b17      	ldr	r3, [pc, #92]	; (80828 <JSON_decode_object+0x114>)
   807ca:	681b      	ldr	r3, [r3, #0]
   807cc:	68dc      	ldr	r4, [r3, #12]
   807ce:	4b17      	ldr	r3, [pc, #92]	; (8082c <JSON_decode_object+0x118>)
   807d0:	4798      	blx	r3
   807d2:	6803      	ldr	r3, [r0, #0]
   807d4:	9300      	str	r3, [sp, #0]
   807d6:	4620      	mov	r0, r4
   807d8:	491b      	ldr	r1, [pc, #108]	; (80848 <JSON_decode_object+0x134>)
   807da:	4a16      	ldr	r2, [pc, #88]	; (80834 <JSON_decode_object+0x120>)
   807dc:	23de      	movs	r3, #222	; 0xde
   807de:	4c16      	ldr	r4, [pc, #88]	; (80838 <JSON_decode_object+0x124>)
   807e0:	47a0      	blx	r4
			return -1;
   807e2:	f04f 30ff 	mov.w	r0, #4294967295
   807e6:	e01b      	b.n	80820 <JSON_decode_object+0x10c>
		}
		

		rv = callback(b, oname, oname_e - oname + 1 , ovalue, ovalue_e - ovalue + 1, arg);		
   807e8:	f1c5 0201 	rsb	r2, r5, #1
   807ec:	f1c7 0301 	rsb	r3, r7, #1
   807f0:	4403      	add	r3, r0
   807f2:	9300      	str	r3, [sp, #0]
   807f4:	9b03      	ldr	r3, [sp, #12]
   807f6:	9301      	str	r3, [sp, #4]
   807f8:	4620      	mov	r0, r4
   807fa:	4629      	mov	r1, r5
   807fc:	4442      	add	r2, r8
   807fe:	463b      	mov	r3, r7
   80800:	9d02      	ldr	r5, [sp, #8]
   80802:	47a8      	blx	r5
		if(rv)
   80804:	b950      	cbnz	r0, 8081c <JSON_decode_object+0x108>
	offset oname, oname_e;
	offset ovalue, ovalue_e;
	
	int rv = 0;
	
	for(; ok(b, off) && ok(b, off + 1) ;) {			
   80806:	6823      	ldr	r3, [r4, #0]
   80808:	891b      	ldrh	r3, [r3, #8]
   8080a:	429e      	cmp	r6, r3
   8080c:	d207      	bcs.n	8081e <JSON_decode_object+0x10a>
   8080e:	1c71      	adds	r1, r6, #1
   80810:	428b      	cmp	r3, r1
   80812:	d88d      	bhi.n	80730 <JSON_decode_object+0x1c>
			return rv;
			

		off = ovalue_e;
	}
	return 0;
   80814:	2000      	movs	r0, #0
   80816:	e003      	b.n	80820 <JSON_decode_object+0x10c>
		if(oname == ERR) {
			JSON_error("__get_next_elem(1)");
			return -1;
		}
		if(at(b, oname) == '}' ) {
			return 0;
   80818:	2000      	movs	r0, #0
   8081a:	e001      	b.n	80820 <JSON_decode_object+0x10c>
   8081c:	e000      	b.n	80820 <JSON_decode_object+0x10c>
			return rv;
			

		off = ovalue_e;
	}
	return 0;
   8081e:	2000      	movs	r0, #0
}
   80820:	b005      	add	sp, #20
   80822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80826:	bf00      	nop
   80828:	200702c8 	.word	0x200702c8
   8082c:	0008c775 	.word	0x0008c775
   80830:	00093d98 	.word	0x00093d98
   80834:	00094178 	.word	0x00094178
   80838:	0008c7c7 	.word	0x0008c7c7
   8083c:	00093e30 	.word	0x00093e30
   80840:	00093ecc 	.word	0x00093ecc
   80844:	000803bd 	.word	0x000803bd
   80848:	00093f64 	.word	0x00093f64
   8084c:	0008034d 	.word	0x0008034d
   80850:	00088451 	.word	0x00088451
   80854:	00080221 	.word	0x00080221

00080858 <JSON_decode_array>:

int JSON_decode_array(xjson *b, offset off,  JSON_array_cb callback, void *arg)
{
   80858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8085c:	b087      	sub	sp, #28
   8085e:	4604      	mov	r4, r0
   80860:	460e      	mov	r6, r1
   80862:	4693      	mov	fp, r2
   80864:	9305      	str	r3, [sp, #20]
		
	offset ovalue, ovalue_e;
	int rv = 0, index = 0;
   80866:	2700      	movs	r7, #0
	
	for(; ok(b, off) && ok(b, off + 1) ;) {

		ovalue = __get_next_elem(b, off+1, ',');
   80868:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80930 <JSON_decode_array+0xd8>
		if(ovalue == ERR) {
			JSON_error("__get_next_elem()");
			return -1;
		}
		if(at(b, ovalue) == ']' ) {
   8086c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80934 <JSON_decode_array+0xdc>
{
		
	offset ovalue, ovalue_e;
	int rv = 0, index = 0;
	
	for(; ok(b, off) && ok(b, off + 1) ;) {
   80870:	e040      	b.n	808f4 <JSON_decode_array+0x9c>

		ovalue = __get_next_elem(b, off+1, ',');
   80872:	4620      	mov	r0, r4
   80874:	222c      	movs	r2, #44	; 0x2c
   80876:	47c8      	blx	r9
		if(ovalue == ERR) {
   80878:	4605      	mov	r5, r0
   8087a:	b978      	cbnz	r0, 8089c <JSON_decode_array+0x44>
			JSON_error("__get_next_elem()");
   8087c:	4b25      	ldr	r3, [pc, #148]	; (80914 <JSON_decode_array+0xbc>)
   8087e:	681b      	ldr	r3, [r3, #0]
   80880:	68dc      	ldr	r4, [r3, #12]
   80882:	4b25      	ldr	r3, [pc, #148]	; (80918 <JSON_decode_array+0xc0>)
   80884:	4798      	blx	r3
   80886:	6803      	ldr	r3, [r0, #0]
   80888:	9300      	str	r3, [sp, #0]
   8088a:	4620      	mov	r0, r4
   8088c:	4923      	ldr	r1, [pc, #140]	; (8091c <JSON_decode_array+0xc4>)
   8088e:	4a24      	ldr	r2, [pc, #144]	; (80920 <JSON_decode_array+0xc8>)
   80890:	23f7      	movs	r3, #247	; 0xf7
   80892:	4c24      	ldr	r4, [pc, #144]	; (80924 <JSON_decode_array+0xcc>)
   80894:	47a0      	blx	r4
			return -1;
   80896:	f04f 30ff 	mov.w	r0, #4294967295
   8089a:	e038      	b.n	8090e <JSON_decode_array+0xb6>
		}
		if(at(b, ovalue) == ']' ) {
   8089c:	6820      	ldr	r0, [r4, #0]
   8089e:	b2a9      	uxth	r1, r5
   808a0:	47d0      	blx	sl
   808a2:	285d      	cmp	r0, #93	; 0x5d
   808a4:	d02f      	beq.n	80906 <JSON_decode_array+0xae>
			return 0;
		}

		ovalue_e = _get_json_element_end(b, ovalue);
   808a6:	4620      	mov	r0, r4
   808a8:	4629      	mov	r1, r5
   808aa:	4a1f      	ldr	r2, [pc, #124]	; (80928 <JSON_decode_array+0xd0>)
   808ac:	4790      	blx	r2
		if(ovalue_e == ERR) {
   808ae:	4606      	mov	r6, r0
   808b0:	b998      	cbnz	r0, 808da <JSON_decode_array+0x82>
			JSON_error("_get_json_element_end() ovalue=%lu, ovalue_e=%lx", (long)ovalue, (long)ovalue_e);
   808b2:	4b18      	ldr	r3, [pc, #96]	; (80914 <JSON_decode_array+0xbc>)
   808b4:	681b      	ldr	r3, [r3, #0]
   808b6:	68dc      	ldr	r4, [r3, #12]
   808b8:	4b17      	ldr	r3, [pc, #92]	; (80918 <JSON_decode_array+0xc0>)
   808ba:	4798      	blx	r3
   808bc:	6803      	ldr	r3, [r0, #0]
   808be:	9300      	str	r3, [sp, #0]
   808c0:	9501      	str	r5, [sp, #4]
   808c2:	2300      	movs	r3, #0
   808c4:	9302      	str	r3, [sp, #8]
   808c6:	4620      	mov	r0, r4
   808c8:	4918      	ldr	r1, [pc, #96]	; (8092c <JSON_decode_array+0xd4>)
   808ca:	4a15      	ldr	r2, [pc, #84]	; (80920 <JSON_decode_array+0xc8>)
   808cc:	f44f 7380 	mov.w	r3, #256	; 0x100
   808d0:	4c14      	ldr	r4, [pc, #80]	; (80924 <JSON_decode_array+0xcc>)
   808d2:	47a0      	blx	r4
			return -1;
   808d4:	f04f 30ff 	mov.w	r0, #4294967295
   808d8:	e019      	b.n	8090e <JSON_decode_array+0xb6>
		}
		

		rv = callback(b, index++, ovalue, ovalue_e - ovalue + 1 ,arg);
   808da:	f107 0801 	add.w	r8, r7, #1
   808de:	f1c5 0301 	rsb	r3, r5, #1
   808e2:	9a05      	ldr	r2, [sp, #20]
   808e4:	9200      	str	r2, [sp, #0]
   808e6:	4620      	mov	r0, r4
   808e8:	4639      	mov	r1, r7
   808ea:	462a      	mov	r2, r5
   808ec:	4433      	add	r3, r6
   808ee:	47d8      	blx	fp
		if(rv)
   808f0:	b958      	cbnz	r0, 8090a <JSON_decode_array+0xb2>
			JSON_error("_get_json_element_end() ovalue=%lu, ovalue_e=%lx", (long)ovalue, (long)ovalue_e);
			return -1;
		}
		

		rv = callback(b, index++, ovalue, ovalue_e - ovalue + 1 ,arg);
   808f2:	4647      	mov	r7, r8
{
		
	offset ovalue, ovalue_e;
	int rv = 0, index = 0;
	
	for(; ok(b, off) && ok(b, off + 1) ;) {
   808f4:	6823      	ldr	r3, [r4, #0]
   808f6:	891b      	ldrh	r3, [r3, #8]
   808f8:	429e      	cmp	r6, r3
   808fa:	d207      	bcs.n	8090c <JSON_decode_array+0xb4>
   808fc:	1c71      	adds	r1, r6, #1
   808fe:	428b      	cmp	r3, r1
   80900:	d8b7      	bhi.n	80872 <JSON_decode_array+0x1a>
		if(rv)
			return rv;
		
		off = ovalue_e;
	}
	return 0;
   80902:	2000      	movs	r0, #0
   80904:	e003      	b.n	8090e <JSON_decode_array+0xb6>
		if(ovalue == ERR) {
			JSON_error("__get_next_elem()");
			return -1;
		}
		if(at(b, ovalue) == ']' ) {
			return 0;
   80906:	2000      	movs	r0, #0
   80908:	e001      	b.n	8090e <JSON_decode_array+0xb6>
   8090a:	e000      	b.n	8090e <JSON_decode_array+0xb6>
		if(rv)
			return rv;
		
		off = ovalue_e;
	}
	return 0;
   8090c:	2000      	movs	r0, #0
}
   8090e:	b007      	add	sp, #28
   80910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80914:	200702c8 	.word	0x200702c8
   80918:	0008c775 	.word	0x0008c775
   8091c:	00094000 	.word	0x00094000
   80920:	0009385c 	.word	0x0009385c
   80924:	0008c7c7 	.word	0x0008c7c7
   80928:	000803bd 	.word	0x000803bd
   8092c:	00094094 	.word	0x00094094
   80930:	0008034d 	.word	0x0008034d
   80934:	00088451 	.word	0x00088451

00080938 <JSON_decode>:
int JSON_decode(xjson *b, offset off, JSON_array_cb a_cb, JSON_object_cb o_cb, void *arg)
{
   80938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8093c:	4605      	mov	r5, r0
   8093e:	460c      	mov	r4, r1
   80940:	4616      	mov	r6, r2
   80942:	4698      	mov	r8, r3
	char c = at(b, off);
   80944:	6800      	ldr	r0, [r0, #0]
   80946:	b289      	uxth	r1, r1
   80948:	4f12      	ldr	r7, [pc, #72]	; (80994 <JSON_decode+0x5c>)
   8094a:	47b8      	blx	r7
	if(c == '{' && o_cb)
   8094c:	287b      	cmp	r0, #123	; 0x7b
   8094e:	d10a      	bne.n	80966 <JSON_decode+0x2e>
   80950:	f1b8 0f00 	cmp.w	r8, #0
   80954:	d012      	beq.n	8097c <JSON_decode+0x44>
		return JSON_decode_object(b, off, o_cb, arg);
   80956:	4628      	mov	r0, r5
   80958:	4621      	mov	r1, r4
   8095a:	4642      	mov	r2, r8
   8095c:	9b06      	ldr	r3, [sp, #24]
   8095e:	4c0e      	ldr	r4, [pc, #56]	; (80998 <JSON_decode+0x60>)
   80960:	47a0      	blx	r4
   80962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(c == '[' && a_cb )
   80966:	285b      	cmp	r0, #91	; 0x5b
   80968:	d10c      	bne.n	80984 <JSON_decode+0x4c>
   8096a:	b17e      	cbz	r6, 8098c <JSON_decode+0x54>
		return JSON_decode_array(b, off, a_cb, arg);
   8096c:	4628      	mov	r0, r5
   8096e:	4621      	mov	r1, r4
   80970:	4632      	mov	r2, r6
   80972:	9b06      	ldr	r3, [sp, #24]
   80974:	4c09      	ldr	r4, [pc, #36]	; (8099c <JSON_decode+0x64>)
   80976:	47a0      	blx	r4
   80978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return -1;
   8097c:	f04f 30ff 	mov.w	r0, #4294967295
   80980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80984:	f04f 30ff 	mov.w	r0, #4294967295
   80988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8098c:	f04f 30ff 	mov.w	r0, #4294967295
}
   80990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80994:	00088451 	.word	0x00088451
   80998:	00080715 	.word	0x00080715
   8099c:	00080859 	.word	0x00080859

000809a0 <netconn_printf>:
#include "http-utils.h"

#include <stdarg.h>

int netconn_printf(struct netconn *nc, char *format, ...) 
{
   809a0:	b40e      	push	{r1, r2, r3}
   809a2:	b530      	push	{r4, r5, lr}
   809a4:	b0a4      	sub	sp, #144	; 0x90
   809a6:	4605      	mov	r5, r0
   809a8:	ab27      	add	r3, sp, #156	; 0x9c
   809aa:	f853 2b04 	ldr.w	r2, [r3], #4
	char buf[NETCONN_PRINTF_BUF];
	ssize_t len;
	va_list ap;
	
        va_start(ap, format);
   809ae:	9303      	str	r3, [sp, #12]
                
	len = vsnprintf(buf, NETCONN_PRINTF_BUF-1, format, ap);
   809b0:	a804      	add	r0, sp, #16
   809b2:	217f      	movs	r1, #127	; 0x7f
   809b4:	4c11      	ldr	r4, [pc, #68]	; (809fc <netconn_printf+0x5c>)
   809b6:	47a0      	blx	r4
   809b8:	4602      	mov	r2, r0
	
	va_end(ap);
	
	if(len == -1) {
   809ba:	f1b0 3fff 	cmp.w	r0, #4294967295
   809be:	d10f      	bne.n	809e0 <netconn_printf+0x40>
		error("vsprintf()");
   809c0:	4b0f      	ldr	r3, [pc, #60]	; (80a00 <netconn_printf+0x60>)
   809c2:	681b      	ldr	r3, [r3, #0]
   809c4:	68dc      	ldr	r4, [r3, #12]
   809c6:	4b0f      	ldr	r3, [pc, #60]	; (80a04 <netconn_printf+0x64>)
   809c8:	4798      	blx	r3
   809ca:	6803      	ldr	r3, [r0, #0]
   809cc:	9300      	str	r3, [sp, #0]
   809ce:	4620      	mov	r0, r4
   809d0:	490d      	ldr	r1, [pc, #52]	; (80a08 <netconn_printf+0x68>)
   809d2:	4a0e      	ldr	r2, [pc, #56]	; (80a0c <netconn_printf+0x6c>)
   809d4:	2313      	movs	r3, #19
   809d6:	4c0e      	ldr	r4, [pc, #56]	; (80a10 <netconn_printf+0x70>)
   809d8:	47a0      	blx	r4
		return -1;
   809da:	f04f 30ff 	mov.w	r0, #4294967295
   809de:	e008      	b.n	809f2 <netconn_printf+0x52>
	}
	
	if( netconn_write(nc, (void*)buf, len, NETCONN_COPY) != ERR_OK )
   809e0:	4628      	mov	r0, r5
   809e2:	a904      	add	r1, sp, #16
   809e4:	2301      	movs	r3, #1
   809e6:	4c0b      	ldr	r4, [pc, #44]	; (80a14 <netconn_printf+0x74>)
   809e8:	47a0      	blx	r4
   809ea:	3000      	adds	r0, #0
   809ec:	bf18      	it	ne
   809ee:	2001      	movne	r0, #1
   809f0:	4240      	negs	r0, r0
		return -1;
	return 0;	
}
   809f2:	b024      	add	sp, #144	; 0x90
   809f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   809f8:	b003      	add	sp, #12
   809fa:	4770      	bx	lr
   809fc:	0008f8cb 	.word	0x0008f8cb
   80a00:	200702c8 	.word	0x200702c8
   80a04:	0008c775 	.word	0x0008c775
   80a08:	000941b4 	.word	0x000941b4
   80a0c:	000941a4 	.word	0x000941a4
   80a10:	0008c7c7 	.word	0x0008c7c7
   80a14:	0008562d 	.word	0x0008562d

00080a18 <_reply_head>:
int _reply_head(struct http_request *req)
{
   80a18:	b530      	push	{r4, r5, lr}
   80a1a:	b093      	sub	sp, #76	; 0x4c
   80a1c:	4604      	mov	r4, r0
	char *str = req->header_msg, buf[64];
   80a1e:	6a82      	ldr	r2, [r0, #40]	; 0x28
	if(str == NULL ) 
		str = "OK";
   80a20:	4b15      	ldr	r3, [pc, #84]	; (80a78 <_reply_head+0x60>)
   80a22:	2a00      	cmp	r2, #0
   80a24:	bf08      	it	eq
   80a26:	461a      	moveq	r2, r3
		
	int len = snprintf(buf, 64, "HTTP/1.0 %.3d %s\r\n", req->http_code, str);
   80a28:	68c3      	ldr	r3, [r0, #12]
   80a2a:	9200      	str	r2, [sp, #0]
   80a2c:	a802      	add	r0, sp, #8
   80a2e:	2140      	movs	r1, #64	; 0x40
   80a30:	4a12      	ldr	r2, [pc, #72]	; (80a7c <_reply_head+0x64>)
   80a32:	4d13      	ldr	r5, [pc, #76]	; (80a80 <_reply_head+0x68>)
   80a34:	47a8      	blx	r5
   80a36:	4602      	mov	r2, r0
	if( netconn_write(req->netconn, buf, len, NETCONN_COPY) != ERR_OK )
   80a38:	6860      	ldr	r0, [r4, #4]
   80a3a:	a902      	add	r1, sp, #8
   80a3c:	2301      	movs	r3, #1
   80a3e:	4d11      	ldr	r5, [pc, #68]	; (80a84 <_reply_head+0x6c>)
   80a40:	47a8      	blx	r5
   80a42:	b990      	cbnz	r0, 80a6a <_reply_head+0x52>
		return -1;	
		
	if(req->gzipped) {
   80a44:	6923      	ldr	r3, [r4, #16]
   80a46:	b12b      	cbz	r3, 80a54 <_reply_head+0x3c>
		if( netconn_write_static(req->netconn, "Content-Encoding: gzip\r\n", 0) != ERR_OK )
   80a48:	6860      	ldr	r0, [r4, #4]
   80a4a:	490f      	ldr	r1, [pc, #60]	; (80a88 <_reply_head+0x70>)
   80a4c:	2218      	movs	r2, #24
   80a4e:	2300      	movs	r3, #0
   80a50:	47a8      	blx	r5
   80a52:	b968      	cbnz	r0, 80a70 <_reply_head+0x58>
			return -1;			
	}
	
	if( netconn_write_static(req->netconn, "\r\n", 0) != ERR_OK )
   80a54:	6860      	ldr	r0, [r4, #4]
   80a56:	490d      	ldr	r1, [pc, #52]	; (80a8c <_reply_head+0x74>)
   80a58:	2202      	movs	r2, #2
   80a5a:	2300      	movs	r3, #0
   80a5c:	4c09      	ldr	r4, [pc, #36]	; (80a84 <_reply_head+0x6c>)
   80a5e:	47a0      	blx	r4
   80a60:	3000      	adds	r0, #0
   80a62:	bf18      	it	ne
   80a64:	2001      	movne	r0, #1
   80a66:	4240      	negs	r0, r0
   80a68:	e004      	b.n	80a74 <_reply_head+0x5c>
	if(str == NULL ) 
		str = "OK";
		
	int len = snprintf(buf, 64, "HTTP/1.0 %.3d %s\r\n", req->http_code, str);
	if( netconn_write(req->netconn, buf, len, NETCONN_COPY) != ERR_OK )
		return -1;	
   80a6a:	f04f 30ff 	mov.w	r0, #4294967295
   80a6e:	e001      	b.n	80a74 <_reply_head+0x5c>
		
	if(req->gzipped) {
		if( netconn_write_static(req->netconn, "Content-Encoding: gzip\r\n", 0) != ERR_OK )
			return -1;			
   80a70:	f04f 30ff 	mov.w	r0, #4294967295
	
	if( netconn_write_static(req->netconn, "\r\n", 0) != ERR_OK )
			return -1;	
	
	return 0;
}
   80a74:	b013      	add	sp, #76	; 0x4c
   80a76:	bd30      	pop	{r4, r5, pc}
   80a78:	0009422c 	.word	0x0009422c
   80a7c:	00094230 	.word	0x00094230
   80a80:	0008ce45 	.word	0x0008ce45
   80a84:	0008562d 	.word	0x0008562d
   80a88:	00094244 	.word	0x00094244
   80a8c:	00094240 	.word	0x00094240

00080a90 <_reply_body>:
int _reply_body(struct http_request *req, char *data, size_t len)
{	
   80a90:	b510      	push	{r4, lr}
   80a92:	460b      	mov	r3, r1
	return (netconn_printf(req->netconn, "{\"result\" : %.*s }", len, data) < 0) ? -1 : 0;
   80a94:	6840      	ldr	r0, [r0, #4]
   80a96:	4902      	ldr	r1, [pc, #8]	; (80aa0 <_reply_body+0x10>)
   80a98:	4c02      	ldr	r4, [pc, #8]	; (80aa4 <_reply_body+0x14>)
   80a9a:	47a0      	blx	r4
}
   80a9c:	17c0      	asrs	r0, r0, #31
   80a9e:	bd10      	pop	{r4, pc}
   80aa0:	00094260 	.word	0x00094260
   80aa4:	000809a1 	.word	0x000809a1

00080aa8 <reply_request>:
int reply_request(struct http_request *req, char *data, size_t len)
{
   80aa8:	b570      	push	{r4, r5, r6, lr}
   80aaa:	b082      	sub	sp, #8
   80aac:	4606      	mov	r6, r0
   80aae:	460d      	mov	r5, r1
   80ab0:	4614      	mov	r4, r2

	if(_reply_head(req)) {
   80ab2:	4b16      	ldr	r3, [pc, #88]	; (80b0c <reply_request+0x64>)
   80ab4:	4798      	blx	r3
   80ab6:	b178      	cbz	r0, 80ad8 <reply_request+0x30>
		error("_reply_head()");
   80ab8:	4b15      	ldr	r3, [pc, #84]	; (80b10 <reply_request+0x68>)
   80aba:	681b      	ldr	r3, [r3, #0]
   80abc:	68dc      	ldr	r4, [r3, #12]
   80abe:	4b15      	ldr	r3, [pc, #84]	; (80b14 <reply_request+0x6c>)
   80ac0:	4798      	blx	r3
   80ac2:	6803      	ldr	r3, [r0, #0]
   80ac4:	9300      	str	r3, [sp, #0]
   80ac6:	4620      	mov	r0, r4
   80ac8:	4913      	ldr	r1, [pc, #76]	; (80b18 <reply_request+0x70>)
   80aca:	4a14      	ldr	r2, [pc, #80]	; (80b1c <reply_request+0x74>)
   80acc:	2337      	movs	r3, #55	; 0x37
   80ace:	4c14      	ldr	r4, [pc, #80]	; (80b20 <reply_request+0x78>)
   80ad0:	47a0      	blx	r4
		return -1;
   80ad2:	f04f 33ff 	mov.w	r3, #4294967295
   80ad6:	e015      	b.n	80b04 <reply_request+0x5c>
	}

	if(_reply_body(req, data, len)) {
   80ad8:	4630      	mov	r0, r6
   80ada:	4629      	mov	r1, r5
   80adc:	4622      	mov	r2, r4
   80ade:	4b11      	ldr	r3, [pc, #68]	; (80b24 <reply_request+0x7c>)
   80ae0:	4798      	blx	r3
   80ae2:	4603      	mov	r3, r0
   80ae4:	b170      	cbz	r0, 80b04 <reply_request+0x5c>
		error("_reply_body()");
   80ae6:	4b0a      	ldr	r3, [pc, #40]	; (80b10 <reply_request+0x68>)
   80ae8:	681b      	ldr	r3, [r3, #0]
   80aea:	68dc      	ldr	r4, [r3, #12]
   80aec:	4b09      	ldr	r3, [pc, #36]	; (80b14 <reply_request+0x6c>)
   80aee:	4798      	blx	r3
   80af0:	6803      	ldr	r3, [r0, #0]
   80af2:	9300      	str	r3, [sp, #0]
   80af4:	4620      	mov	r0, r4
   80af6:	490c      	ldr	r1, [pc, #48]	; (80b28 <reply_request+0x80>)
   80af8:	4a08      	ldr	r2, [pc, #32]	; (80b1c <reply_request+0x74>)
   80afa:	233c      	movs	r3, #60	; 0x3c
   80afc:	4c08      	ldr	r4, [pc, #32]	; (80b20 <reply_request+0x78>)
   80afe:	47a0      	blx	r4
		return -1;
   80b00:	f04f 33ff 	mov.w	r3, #4294967295
	}

	return 0;
}
   80b04:	4618      	mov	r0, r3
   80b06:	b002      	add	sp, #8
   80b08:	bd70      	pop	{r4, r5, r6, pc}
   80b0a:	bf00      	nop
   80b0c:	00080a19 	.word	0x00080a19
   80b10:	200702c8 	.word	0x200702c8
   80b14:	0008c775 	.word	0x0008c775
   80b18:	00094274 	.word	0x00094274
   80b1c:	0009436c 	.word	0x0009436c
   80b20:	0008c7c7 	.word	0x0008c7c7
   80b24:	00080a91 	.word	0x00080a91
   80b28:	000942f0 	.word	0x000942f0

00080b2c <_get_filed_value>:
/* Parse HEADer */

#define _GFV_INTEGER 1

int _get_filed_value(struct netbuf *b, char *fname, int fname_len, int type, void *res)
{
   80b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b30:	b08a      	sub	sp, #40	; 0x28
   80b32:	4605      	mov	r5, r0
   80b34:	4617      	mov	r7, r2
   80b36:	4698      	mov	r8, r3
	int i, off = pbuf_strstr(b->p, fname);
   80b38:	6800      	ldr	r0, [r0, #0]
   80b3a:	4b16      	ldr	r3, [pc, #88]	; (80b94 <_get_filed_value+0x68>)
   80b3c:	4798      	blx	r3
	char buf[32];
	if( off == 0xFFFF )
   80b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80b42:	4298      	cmp	r0, r3
   80b44:	d01e      	beq.n	80b84 <_get_filed_value+0x58>
		return -1;
		
	off += fname_len;
   80b46:	4407      	add	r7, r0

	for(i=0; ;off++, i++) {
   80b48:	2400      	movs	r4, #0
		buf[i] = pbuf_get_at(b->p, off);
   80b4a:	4e13      	ldr	r6, [pc, #76]	; (80b98 <_get_filed_value+0x6c>)
   80b4c:	19e1      	adds	r1, r4, r7
   80b4e:	6828      	ldr	r0, [r5, #0]
   80b50:	b289      	uxth	r1, r1
   80b52:	47b0      	blx	r6
   80b54:	a902      	add	r1, sp, #8
   80b56:	5460      	strb	r0, [r4, r1]
		if(buf[i] == '\r') {
   80b58:	280d      	cmp	r0, #13
   80b5a:	d108      	bne.n	80b6e <_get_filed_value+0x42>
			buf[i] = 0;
   80b5c:	ab0a      	add	r3, sp, #40	; 0x28
   80b5e:	441c      	add	r4, r3
   80b60:	2300      	movs	r3, #0
   80b62:	f804 3c20 	strb.w	r3, [r4, #-32]
			break;
		}		
	}
	
	switch(type) {
   80b66:	f1b8 0f01 	cmp.w	r8, #1
   80b6a:	d002      	beq.n	80b72 <_get_filed_value+0x46>
   80b6c:	e00d      	b.n	80b8a <_get_filed_value+0x5e>
	if( off == 0xFFFF )
		return -1;
		
	off += fname_len;

	for(i=0; ;off++, i++) {
   80b6e:	3401      	adds	r4, #1
		buf[i] = pbuf_get_at(b->p, off);
		if(buf[i] == '\r') {
			buf[i] = 0;
			break;
		}		
	}
   80b70:	e7ec      	b.n	80b4c <_get_filed_value+0x20>
	
	switch(type) {
		case _GFV_INTEGER: {
			int *ires = (int *) res;
			char *dummy;
			*ires = strtol(buf, &dummy, 0);
   80b72:	a802      	add	r0, sp, #8
   80b74:	a901      	add	r1, sp, #4
   80b76:	2200      	movs	r2, #0
   80b78:	4b08      	ldr	r3, [pc, #32]	; (80b9c <_get_filed_value+0x70>)
   80b7a:	4798      	blx	r3
   80b7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   80b7e:	6018      	str	r0, [r3, #0]
		}
		default:
	
			return -1;			
	}
	return 0;
   80b80:	2000      	movs	r0, #0
   80b82:	e004      	b.n	80b8e <_get_filed_value+0x62>
int _get_filed_value(struct netbuf *b, char *fname, int fname_len, int type, void *res)
{
	int i, off = pbuf_strstr(b->p, fname);
	char buf[32];
	if( off == 0xFFFF )
		return -1;
   80b84:	f04f 30ff 	mov.w	r0, #4294967295
   80b88:	e001      	b.n	80b8e <_get_filed_value+0x62>
			*ires = strtol(buf, &dummy, 0);
			break; 
		}
		default:
	
			return -1;			
   80b8a:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return 0;
			

}
   80b8e:	b00a      	add	sp, #40	; 0x28
   80b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b94:	00088555 	.word	0x00088555
   80b98:	00088451 	.word	0x00088451
   80b9c:	0008d029 	.word	0x0008d029

00080ba0 <_get_method_id>:


/*-----------------------------------------------------------*/

int _get_method_id(char *path)
{
   80ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ba2:	b085      	sub	sp, #20
   80ba4:	4605      	mov	r5, r0
	int method_id, saved_errno = errno;
   80ba6:	4c14      	ldr	r4, [pc, #80]	; (80bf8 <_get_method_id+0x58>)
   80ba8:	47a0      	blx	r4
   80baa:	6807      	ldr	r7, [r0, #0]
	char *dummy;
	
	errno = 0;
   80bac:	47a0      	blx	r4
   80bae:	2200      	movs	r2, #0
   80bb0:	6002      	str	r2, [r0, #0]
	method_id = strtol(path + 4, &dummy, 0);
   80bb2:	1d28      	adds	r0, r5, #4
   80bb4:	a903      	add	r1, sp, #12
   80bb6:	4b11      	ldr	r3, [pc, #68]	; (80bfc <_get_method_id+0x5c>)
   80bb8:	4798      	blx	r3
   80bba:	4606      	mov	r6, r0
	if( errno != 0 ) {
   80bbc:	47a0      	blx	r4
   80bbe:	6803      	ldr	r3, [r0, #0]
   80bc0:	b1a3      	cbz	r3, 80bec <_get_method_id+0x4c>
		printf("errno=%d %.16s\n",errno,path);		
   80bc2:	47a0      	blx	r4
   80bc4:	6801      	ldr	r1, [r0, #0]
   80bc6:	480e      	ldr	r0, [pc, #56]	; (80c00 <_get_method_id+0x60>)
   80bc8:	462a      	mov	r2, r5
   80bca:	4b0e      	ldr	r3, [pc, #56]	; (80c04 <_get_method_id+0x64>)
   80bcc:	4798      	blx	r3
	errno = saved_errno;
	return method_id;
bad_url:

	
	error("bad_url");
   80bce:	4b0e      	ldr	r3, [pc, #56]	; (80c08 <_get_method_id+0x68>)
   80bd0:	681b      	ldr	r3, [r3, #0]
   80bd2:	68dd      	ldr	r5, [r3, #12]
   80bd4:	47a0      	blx	r4
   80bd6:	6803      	ldr	r3, [r0, #0]
   80bd8:	9300      	str	r3, [sp, #0]
   80bda:	4628      	mov	r0, r5
   80bdc:	490b      	ldr	r1, [pc, #44]	; (80c0c <_get_method_id+0x6c>)
   80bde:	4a0c      	ldr	r2, [pc, #48]	; (80c10 <_get_method_id+0x70>)
   80be0:	2343      	movs	r3, #67	; 0x43
   80be2:	4c0c      	ldr	r4, [pc, #48]	; (80c14 <_get_method_id+0x74>)
   80be4:	47a0      	blx	r4
	return -1;	
   80be6:	f04f 30ff 	mov.w	r0, #4294967295
   80bea:	e003      	b.n	80bf4 <_get_method_id+0x54>
	if( errno != 0 ) {
		printf("errno=%d %.16s\n",errno,path);		
		goto bad_url;
	}
		
	errno = saved_errno;
   80bec:	4b02      	ldr	r3, [pc, #8]	; (80bf8 <_get_method_id+0x58>)
   80bee:	4798      	blx	r3
   80bf0:	6007      	str	r7, [r0, #0]
	return method_id;
   80bf2:	4630      	mov	r0, r6
bad_url:

	
	error("bad_url");
	return -1;	
}
   80bf4:	b005      	add	sp, #20
   80bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80bf8:	0008c775 	.word	0x0008c775
   80bfc:	0008d029 	.word	0x0008d029
   80c00:	000b0154 	.word	0x000b0154
   80c04:	0008c839 	.word	0x0008c839
   80c08:	200702c8 	.word	0x200702c8
   80c0c:	000b0164 	.word	0x000b0164
   80c10:	000b0748 	.word	0x000b0748
   80c14:	0008c7c7 	.word	0x0008c7c7

00080c18 <_get_url_path>:

int _get_url_path(struct pbuf *buf, int skip, char *path)
{
   80c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80c1c:	b085      	sub	sp, #20
   80c1e:	4681      	mov	r9, r0
   80c20:	4617      	mov	r7, r2
   80c22:	460e      	mov	r6, r1
	char c;
	int i = 0;
   80c24:	2400      	movs	r4, #0

        do {    
	        c = pbuf_get_at(buf, skip ++ );
   80c26:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80ca4 <_get_url_path+0x8c>
   80c2a:	e002      	b.n	80c32 <_get_url_path+0x1a>
   80c2c:	4625      	mov	r5, r4
   80c2e:	3601      	adds	r6, #1
   80c30:	462c      	mov	r4, r5
   80c32:	4648      	mov	r0, r9
   80c34:	b2b1      	uxth	r1, r6
   80c36:	47c0      	blx	r8
	        
	        if( i == 0 && c == '/' ) 
   80c38:	b90c      	cbnz	r4, 80c3e <_get_url_path+0x26>
   80c3a:	282f      	cmp	r0, #47	; 0x2f
   80c3c:	d0f6      	beq.n	80c2c <_get_url_path+0x14>
	        	continue;
	        	        
	        path[i++] = c;
   80c3e:	1c65      	adds	r5, r4, #1
   80c40:	5538      	strb	r0, [r7, r4]
        } while (c != ' ' && c != '\n' && c != '\r' && c != '\0' && i < MAX_URL_LEN);
   80c42:	2820      	cmp	r0, #32
   80c44:	d01c      	beq.n	80c80 <_get_url_path+0x68>
   80c46:	280a      	cmp	r0, #10
   80c48:	d004      	beq.n	80c54 <_get_url_path+0x3c>
   80c4a:	280d      	cmp	r0, #13
   80c4c:	d002      	beq.n	80c54 <_get_url_path+0x3c>
   80c4e:	b108      	cbz	r0, 80c54 <_get_url_path+0x3c>
   80c50:	2d0f      	cmp	r5, #15
   80c52:	ddec      	ble.n	80c2e <_get_url_path+0x16>
        path[i-1]= '\0';
   80c54:	197b      	adds	r3, r7, r5
   80c56:	2200      	movs	r2, #0
   80c58:	f803 2c01 	strb.w	r2, [r3, #-1]
        
        if(c!=' ')  {

        	error("Strange path %s (len=%d)", path, i);
   80c5c:	4b0c      	ldr	r3, [pc, #48]	; (80c90 <_get_url_path+0x78>)
   80c5e:	681b      	ldr	r3, [r3, #0]
   80c60:	68dc      	ldr	r4, [r3, #12]
   80c62:	4b0c      	ldr	r3, [pc, #48]	; (80c94 <_get_url_path+0x7c>)
   80c64:	4798      	blx	r3
   80c66:	6803      	ldr	r3, [r0, #0]
   80c68:	9300      	str	r3, [sp, #0]
   80c6a:	9701      	str	r7, [sp, #4]
   80c6c:	9502      	str	r5, [sp, #8]
   80c6e:	4620      	mov	r0, r4
   80c70:	4909      	ldr	r1, [pc, #36]	; (80c98 <_get_url_path+0x80>)
   80c72:	4a0a      	ldr	r2, [pc, #40]	; (80c9c <_get_url_path+0x84>)
   80c74:	2358      	movs	r3, #88	; 0x58
   80c76:	4c0a      	ldr	r4, [pc, #40]	; (80ca0 <_get_url_path+0x88>)
   80c78:	47a0      	blx	r4
        	return -1;
   80c7a:	f04f 30ff 	mov.w	r0, #4294967295
   80c7e:	e003      	b.n	80c88 <_get_url_path+0x70>
	        if( i == 0 && c == '/' ) 
	        	continue;
	        	        
	        path[i++] = c;
        } while (c != ' ' && c != '\n' && c != '\r' && c != '\0' && i < MAX_URL_LEN);
        path[i-1]= '\0';
   80c80:	443d      	add	r5, r7
   80c82:	2000      	movs	r0, #0
   80c84:	f805 0c01 	strb.w	r0, [r5, #-1]
        	error("Strange path %s (len=%d)", path, i);
        	return -1;
        }
        
        return 0;		
}
   80c88:	b005      	add	sp, #20
   80c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80c8e:	bf00      	nop
   80c90:	200702c8 	.word	0x200702c8
   80c94:	0008c775 	.word	0x0008c775
   80c98:	000b01d8 	.word	0x000b01d8
   80c9c:	000b0758 	.word	0x000b0758
   80ca0:	0008c7c7 	.word	0x0008c7c7
   80ca4:	00088451 	.word	0x00088451

00080ca8 <parse_request_head>:
void parse_request_head(struct netbuf *buf, struct http_request *req)
{
   80ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   80caa:	b089      	sub	sp, #36	; 0x24
   80cac:	4605      	mov	r5, r0
   80cae:	460c      	mov	r4, r1
	req->req_type = HTTP_HEADER_ERR;
   80cb0:	23ff      	movs	r3, #255	; 0xff
   80cb2:	800b      	strh	r3, [r1, #0]
	req->body_size = 0;    
   80cb4:	2300      	movs	r3, #0
   80cb6:	618b      	str	r3, [r1, #24]
	
	if (pbuf_memfind(buf->p, (void*)"GET", 3, 0) != 0xFFFF) {	
   80cb8:	6800      	ldr	r0, [r0, #0]
   80cba:	4980      	ldr	r1, [pc, #512]	; (80ebc <parse_request_head+0x214>)
   80cbc:	2203      	movs	r2, #3
   80cbe:	4e80      	ldr	r6, [pc, #512]	; (80ec0 <parse_request_head+0x218>)
   80cc0:	47b0      	blx	r6
   80cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80cc6:	4298      	cmp	r0, r3
   80cc8:	d034      	beq.n	80d34 <parse_request_head+0x8c>
	
		req->req_type = HTTP_HEADER_GET;
   80cca:	2301      	movs	r3, #1
   80ccc:	8023      	strh	r3, [r4, #0]
		
		char a = pbuf_get_at(buf->p, 4);
   80cce:	6828      	ldr	r0, [r5, #0]
   80cd0:	2104      	movs	r1, #4
   80cd2:	4e7c      	ldr	r6, [pc, #496]	; (80ec4 <parse_request_head+0x21c>)
   80cd4:	47b0      	blx	r6
   80cd6:	4607      	mov	r7, r0
		char b = pbuf_get_at(buf->p, 5);
   80cd8:	6828      	ldr	r0, [r5, #0]
   80cda:	2105      	movs	r1, #5
   80cdc:	47b0      	blx	r6
		
		if( a != '/' && b != ' ' ) {
   80cde:	2f2f      	cmp	r7, #47	; 0x2f
   80ce0:	f000 8174 	beq.w	80fcc <parse_request_head+0x324>
   80ce4:	2820      	cmp	r0, #32
   80ce6:	f000 8171 	beq.w	80fcc <parse_request_head+0x324>
			req_err(req, 404, "URL not found"); 
   80cea:	4b77      	ldr	r3, [pc, #476]	; (80ec8 <parse_request_head+0x220>)
   80cec:	681b      	ldr	r3, [r3, #0]
   80cee:	68dd      	ldr	r5, [r3, #12]
   80cf0:	4b76      	ldr	r3, [pc, #472]	; (80ecc <parse_request_head+0x224>)
   80cf2:	4798      	blx	r3
   80cf4:	6803      	ldr	r3, [r0, #0]
   80cf6:	9300      	str	r3, [sp, #0]
   80cf8:	f44f 73ca 	mov.w	r3, #404	; 0x194
   80cfc:	9301      	str	r3, [sp, #4]
   80cfe:	4b74      	ldr	r3, [pc, #464]	; (80ed0 <parse_request_head+0x228>)
   80d00:	9302      	str	r3, [sp, #8]
   80d02:	4628      	mov	r0, r5
   80d04:	4973      	ldr	r1, [pc, #460]	; (80ed4 <parse_request_head+0x22c>)
   80d06:	4a74      	ldr	r2, [pc, #464]	; (80ed8 <parse_request_head+0x230>)
   80d08:	236b      	movs	r3, #107	; 0x6b
   80d0a:	4d74      	ldr	r5, [pc, #464]	; (80edc <parse_request_head+0x234>)
   80d0c:	47a8      	blx	r5
   80d0e:	68e3      	ldr	r3, [r4, #12]
   80d10:	b113      	cbz	r3, 80d18 <parse_request_head+0x70>
   80d12:	2bc8      	cmp	r3, #200	; 0xc8
   80d14:	f040 815a 	bne.w	80fcc <parse_request_head+0x324>
   80d18:	f44f 73ca 	mov.w	r3, #404	; 0x194
   80d1c:	60e3      	str	r3, [r4, #12]
   80d1e:	4b6c      	ldr	r3, [pc, #432]	; (80ed0 <parse_request_head+0x228>)
   80d20:	62a3      	str	r3, [r4, #40]	; 0x28
   80d22:	23ff      	movs	r3, #255	; 0xff
   80d24:	8023      	strh	r3, [r4, #0]
   80d26:	4b6e      	ldr	r3, [pc, #440]	; (80ee0 <parse_request_head+0x238>)
   80d28:	61e3      	str	r3, [r4, #28]
   80d2a:	236b      	movs	r3, #107	; 0x6b
   80d2c:	6263      	str	r3, [r4, #36]	; 0x24
   80d2e:	4b6a      	ldr	r3, [pc, #424]	; (80ed8 <parse_request_head+0x230>)
   80d30:	6223      	str	r3, [r4, #32]
   80d32:	e14b      	b.n	80fcc <parse_request_head+0x324>
			return;
		}
        } else	if (pbuf_memfind(buf->p, (void*)"POST", 4, 0) != 0xFFFF) {
   80d34:	6828      	ldr	r0, [r5, #0]
   80d36:	496b      	ldr	r1, [pc, #428]	; (80ee4 <parse_request_head+0x23c>)
   80d38:	2204      	movs	r2, #4
   80d3a:	2300      	movs	r3, #0
   80d3c:	4e60      	ldr	r6, [pc, #384]	; (80ec0 <parse_request_head+0x218>)
   80d3e:	47b0      	blx	r6
   80d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80d44:	4298      	cmp	r0, r3
   80d46:	f000 811e 	beq.w	80f86 <parse_request_head+0x2de>
        
        	req->req_type = HTTP_HEADER_POST;
   80d4a:	2302      	movs	r3, #2
   80d4c:	8023      	strh	r3, [r4, #0]
        	
        	char path[MAX_URL_LEN];
        	
            	if(_get_url_path(buf->p, 5, path) == -1) {
   80d4e:	6828      	ldr	r0, [r5, #0]
   80d50:	2105      	movs	r1, #5
   80d52:	aa04      	add	r2, sp, #16
   80d54:	4b64      	ldr	r3, [pc, #400]	; (80ee8 <parse_request_head+0x240>)
   80d56:	4798      	blx	r3
   80d58:	f1b0 3fff 	cmp.w	r0, #4294967295
   80d5c:	d130      	bne.n	80dc0 <parse_request_head+0x118>
      	        	req_err(req, 400, "Broken URL");
   80d5e:	4b5a      	ldr	r3, [pc, #360]	; (80ec8 <parse_request_head+0x220>)
   80d60:	681b      	ldr	r3, [r3, #0]
   80d62:	68dd      	ldr	r5, [r3, #12]
   80d64:	4b59      	ldr	r3, [pc, #356]	; (80ecc <parse_request_head+0x224>)
   80d66:	4798      	blx	r3
   80d68:	6803      	ldr	r3, [r0, #0]
   80d6a:	9300      	str	r3, [sp, #0]
   80d6c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80d70:	9301      	str	r3, [sp, #4]
   80d72:	4b5e      	ldr	r3, [pc, #376]	; (80eec <parse_request_head+0x244>)
   80d74:	9302      	str	r3, [sp, #8]
   80d76:	4628      	mov	r0, r5
   80d78:	4956      	ldr	r1, [pc, #344]	; (80ed4 <parse_request_head+0x22c>)
   80d7a:	4a57      	ldr	r2, [pc, #348]	; (80ed8 <parse_request_head+0x230>)
   80d7c:	2375      	movs	r3, #117	; 0x75
   80d7e:	4d57      	ldr	r5, [pc, #348]	; (80edc <parse_request_head+0x234>)
   80d80:	47a8      	blx	r5
   80d82:	68e3      	ldr	r3, [r4, #12]
   80d84:	b10b      	cbz	r3, 80d8a <parse_request_head+0xe2>
   80d86:	2bc8      	cmp	r3, #200	; 0xc8
   80d88:	d10c      	bne.n	80da4 <parse_request_head+0xfc>
   80d8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80d8e:	60e3      	str	r3, [r4, #12]
   80d90:	4b56      	ldr	r3, [pc, #344]	; (80eec <parse_request_head+0x244>)
   80d92:	62a3      	str	r3, [r4, #40]	; 0x28
   80d94:	23ff      	movs	r3, #255	; 0xff
   80d96:	8023      	strh	r3, [r4, #0]
   80d98:	4b51      	ldr	r3, [pc, #324]	; (80ee0 <parse_request_head+0x238>)
   80d9a:	61e3      	str	r3, [r4, #28]
   80d9c:	2375      	movs	r3, #117	; 0x75
   80d9e:	6263      	str	r3, [r4, #36]	; 0x24
   80da0:	4b4d      	ldr	r3, [pc, #308]	; (80ed8 <parse_request_head+0x230>)
   80da2:	6223      	str	r3, [r4, #32]
            		error("parse_url(POST)");
   80da4:	4b48      	ldr	r3, [pc, #288]	; (80ec8 <parse_request_head+0x220>)
   80da6:	681b      	ldr	r3, [r3, #0]
   80da8:	68dc      	ldr	r4, [r3, #12]
   80daa:	4b48      	ldr	r3, [pc, #288]	; (80ecc <parse_request_head+0x224>)
   80dac:	4798      	blx	r3
   80dae:	6803      	ldr	r3, [r0, #0]
   80db0:	9300      	str	r3, [sp, #0]
   80db2:	4620      	mov	r0, r4
   80db4:	494e      	ldr	r1, [pc, #312]	; (80ef0 <parse_request_head+0x248>)
   80db6:	4a48      	ldr	r2, [pc, #288]	; (80ed8 <parse_request_head+0x230>)
   80db8:	2376      	movs	r3, #118	; 0x76
   80dba:	4c48      	ldr	r4, [pc, #288]	; (80edc <parse_request_head+0x234>)
   80dbc:	47a0      	blx	r4
            		return;
   80dbe:	e105      	b.n	80fcc <parse_request_head+0x324>
            	}
            	
        	if(strncmp(path, "api/", 4) != 0) {
   80dc0:	a804      	add	r0, sp, #16
   80dc2:	494c      	ldr	r1, [pc, #304]	; (80ef4 <parse_request_head+0x24c>)
   80dc4:	2204      	movs	r2, #4
   80dc6:	4b4c      	ldr	r3, [pc, #304]	; (80ef8 <parse_request_head+0x250>)
   80dc8:	4798      	blx	r3
   80dca:	b320      	cbz	r0, 80e16 <parse_request_head+0x16e>
        		req_err(req, 501, "Method not implemented");
   80dcc:	4b3e      	ldr	r3, [pc, #248]	; (80ec8 <parse_request_head+0x220>)
   80dce:	681b      	ldr	r3, [r3, #0]
   80dd0:	68dd      	ldr	r5, [r3, #12]
   80dd2:	4b3e      	ldr	r3, [pc, #248]	; (80ecc <parse_request_head+0x224>)
   80dd4:	4798      	blx	r3
   80dd6:	6803      	ldr	r3, [r0, #0]
   80dd8:	9300      	str	r3, [sp, #0]
   80dda:	f240 13f5 	movw	r3, #501	; 0x1f5
   80dde:	9301      	str	r3, [sp, #4]
   80de0:	4b46      	ldr	r3, [pc, #280]	; (80efc <parse_request_head+0x254>)
   80de2:	9302      	str	r3, [sp, #8]
   80de4:	4628      	mov	r0, r5
   80de6:	493b      	ldr	r1, [pc, #236]	; (80ed4 <parse_request_head+0x22c>)
   80de8:	4a3b      	ldr	r2, [pc, #236]	; (80ed8 <parse_request_head+0x230>)
   80dea:	237b      	movs	r3, #123	; 0x7b
   80dec:	4d3b      	ldr	r5, [pc, #236]	; (80edc <parse_request_head+0x234>)
   80dee:	47a8      	blx	r5
   80df0:	68e3      	ldr	r3, [r4, #12]
   80df2:	b113      	cbz	r3, 80dfa <parse_request_head+0x152>
   80df4:	2bc8      	cmp	r3, #200	; 0xc8
   80df6:	f040 80e9 	bne.w	80fcc <parse_request_head+0x324>
   80dfa:	f240 13f5 	movw	r3, #501	; 0x1f5
   80dfe:	60e3      	str	r3, [r4, #12]
   80e00:	4b3e      	ldr	r3, [pc, #248]	; (80efc <parse_request_head+0x254>)
   80e02:	62a3      	str	r3, [r4, #40]	; 0x28
   80e04:	23ff      	movs	r3, #255	; 0xff
   80e06:	8023      	strh	r3, [r4, #0]
   80e08:	4b35      	ldr	r3, [pc, #212]	; (80ee0 <parse_request_head+0x238>)
   80e0a:	61e3      	str	r3, [r4, #28]
   80e0c:	237b      	movs	r3, #123	; 0x7b
   80e0e:	6263      	str	r3, [r4, #36]	; 0x24
   80e10:	4b31      	ldr	r3, [pc, #196]	; (80ed8 <parse_request_head+0x230>)
   80e12:	6223      	str	r3, [r4, #32]
   80e14:	e0da      	b.n	80fcc <parse_request_head+0x324>
        		return;
        	}
        	
        	
        	
        	int method_id = _get_method_id(path);
   80e16:	a804      	add	r0, sp, #16
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <parse_request_head+0x258>)
   80e1a:	4798      	blx	r3
        	if(method_id == -1) {
   80e1c:	f1b0 3fff 	cmp.w	r0, #4294967295
   80e20:	d124      	bne.n	80e6c <parse_request_head+0x1c4>
        		req_err(req, 400, "Bad URL, bad method-id");
   80e22:	4b29      	ldr	r3, [pc, #164]	; (80ec8 <parse_request_head+0x220>)
   80e24:	681b      	ldr	r3, [r3, #0]
   80e26:	68dd      	ldr	r5, [r3, #12]
   80e28:	4b28      	ldr	r3, [pc, #160]	; (80ecc <parse_request_head+0x224>)
   80e2a:	4798      	blx	r3
   80e2c:	6803      	ldr	r3, [r0, #0]
   80e2e:	9300      	str	r3, [sp, #0]
   80e30:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80e34:	9301      	str	r3, [sp, #4]
   80e36:	4b33      	ldr	r3, [pc, #204]	; (80f04 <parse_request_head+0x25c>)
   80e38:	9302      	str	r3, [sp, #8]
   80e3a:	4628      	mov	r0, r5
   80e3c:	4925      	ldr	r1, [pc, #148]	; (80ed4 <parse_request_head+0x22c>)
   80e3e:	4a26      	ldr	r2, [pc, #152]	; (80ed8 <parse_request_head+0x230>)
   80e40:	2383      	movs	r3, #131	; 0x83
   80e42:	4d26      	ldr	r5, [pc, #152]	; (80edc <parse_request_head+0x234>)
   80e44:	47a8      	blx	r5
   80e46:	68e3      	ldr	r3, [r4, #12]
   80e48:	b113      	cbz	r3, 80e50 <parse_request_head+0x1a8>
   80e4a:	2bc8      	cmp	r3, #200	; 0xc8
   80e4c:	f040 80be 	bne.w	80fcc <parse_request_head+0x324>
   80e50:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80e54:	60e3      	str	r3, [r4, #12]
   80e56:	4b2b      	ldr	r3, [pc, #172]	; (80f04 <parse_request_head+0x25c>)
   80e58:	62a3      	str	r3, [r4, #40]	; 0x28
   80e5a:	23ff      	movs	r3, #255	; 0xff
   80e5c:	8023      	strh	r3, [r4, #0]
   80e5e:	4b20      	ldr	r3, [pc, #128]	; (80ee0 <parse_request_head+0x238>)
   80e60:	61e3      	str	r3, [r4, #28]
   80e62:	2383      	movs	r3, #131	; 0x83
   80e64:	6263      	str	r3, [r4, #36]	; 0x24
   80e66:	4b1c      	ldr	r3, [pc, #112]	; (80ed8 <parse_request_head+0x230>)
   80e68:	6223      	str	r3, [r4, #32]
   80e6a:	e0af      	b.n	80fcc <parse_request_head+0x324>
        		return;
        	}
        	
        	if(method_id > MAX_POST_METHOD || method_id < 0) {
   80e6c:	2804      	cmp	r0, #4
   80e6e:	d94d      	bls.n	80f0c <parse_request_head+0x264>
			req_err(req, 400, "Bad URL, method-id out of range");
   80e70:	4b15      	ldr	r3, [pc, #84]	; (80ec8 <parse_request_head+0x220>)
   80e72:	681b      	ldr	r3, [r3, #0]
   80e74:	68dd      	ldr	r5, [r3, #12]
   80e76:	4b15      	ldr	r3, [pc, #84]	; (80ecc <parse_request_head+0x224>)
   80e78:	4798      	blx	r3
   80e7a:	6803      	ldr	r3, [r0, #0]
   80e7c:	9300      	str	r3, [sp, #0]
   80e7e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80e82:	9301      	str	r3, [sp, #4]
   80e84:	4b20      	ldr	r3, [pc, #128]	; (80f08 <parse_request_head+0x260>)
   80e86:	9302      	str	r3, [sp, #8]
   80e88:	4628      	mov	r0, r5
   80e8a:	4912      	ldr	r1, [pc, #72]	; (80ed4 <parse_request_head+0x22c>)
   80e8c:	4a12      	ldr	r2, [pc, #72]	; (80ed8 <parse_request_head+0x230>)
   80e8e:	2388      	movs	r3, #136	; 0x88
   80e90:	4d12      	ldr	r5, [pc, #72]	; (80edc <parse_request_head+0x234>)
   80e92:	47a8      	blx	r5
   80e94:	68e3      	ldr	r3, [r4, #12]
   80e96:	b113      	cbz	r3, 80e9e <parse_request_head+0x1f6>
   80e98:	2bc8      	cmp	r3, #200	; 0xc8
   80e9a:	f040 8097 	bne.w	80fcc <parse_request_head+0x324>
   80e9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80ea2:	60e3      	str	r3, [r4, #12]
   80ea4:	4b18      	ldr	r3, [pc, #96]	; (80f08 <parse_request_head+0x260>)
   80ea6:	62a3      	str	r3, [r4, #40]	; 0x28
   80ea8:	23ff      	movs	r3, #255	; 0xff
   80eaa:	8023      	strh	r3, [r4, #0]
   80eac:	4b0c      	ldr	r3, [pc, #48]	; (80ee0 <parse_request_head+0x238>)
   80eae:	61e3      	str	r3, [r4, #28]
   80eb0:	2388      	movs	r3, #136	; 0x88
   80eb2:	6263      	str	r3, [r4, #36]	; 0x24
   80eb4:	4b08      	ldr	r3, [pc, #32]	; (80ed8 <parse_request_head+0x230>)
   80eb6:	6223      	str	r3, [r4, #32]
   80eb8:	e088      	b.n	80fcc <parse_request_head+0x324>
   80eba:	bf00      	nop
   80ebc:	000b0260 	.word	0x000b0260
   80ec0:	000884f5 	.word	0x000884f5
   80ec4:	00088451 	.word	0x00088451
   80ec8:	200702c8 	.word	0x200702c8
   80ecc:	0008c775 	.word	0x0008c775
   80ed0:	000b02d8 	.word	0x000b02d8
   80ed4:	000b0264 	.word	0x000b0264
   80ed8:	000b0768 	.word	0x000b0768
   80edc:	0008c7c7 	.word	0x0008c7c7
   80ee0:	000b02e8 	.word	0x000b02e8
   80ee4:	000b0344 	.word	0x000b0344
   80ee8:	00080c19 	.word	0x00080c19
   80eec:	000b034c 	.word	0x000b034c
   80ef0:	000b0358 	.word	0x000b0358
   80ef4:	000b03d4 	.word	0x000b03d4
   80ef8:	0008ced3 	.word	0x0008ced3
   80efc:	000b03dc 	.word	0x000b03dc
   80f00:	00080ba1 	.word	0x00080ba1
   80f04:	000b03f4 	.word	0x000b03f4
   80f08:	000b040c 	.word	0x000b040c
			return;
		}
        	req->method = &post_method_lookup[method_id];
   80f0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f10:	4b2f      	ldr	r3, [pc, #188]	; (80fd0 <parse_request_head+0x328>)
   80f12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80f16:	60a0      	str	r0, [r4, #8]
        	
        	
        	
            	if(_get_filed_value(buf, "Content-Length:", 16, _GFV_INTEGER, &(req->body_size)) &&
   80f18:	f104 0618 	add.w	r6, r4, #24
   80f1c:	9600      	str	r6, [sp, #0]
   80f1e:	4628      	mov	r0, r5
   80f20:	492c      	ldr	r1, [pc, #176]	; (80fd4 <parse_request_head+0x32c>)
   80f22:	2210      	movs	r2, #16
   80f24:	2301      	movs	r3, #1
   80f26:	4f2c      	ldr	r7, [pc, #176]	; (80fd8 <parse_request_head+0x330>)
   80f28:	47b8      	blx	r7
   80f2a:	2800      	cmp	r0, #0
   80f2c:	d04e      	beq.n	80fcc <parse_request_head+0x324>
	           _get_filed_value(buf, "content-length:", 16, _GFV_INTEGER, &(req->body_size)) ) {
   80f2e:	9600      	str	r6, [sp, #0]
   80f30:	4628      	mov	r0, r5
   80f32:	492a      	ldr	r1, [pc, #168]	; (80fdc <parse_request_head+0x334>)
   80f34:	2210      	movs	r2, #16
   80f36:	2301      	movs	r3, #1
   80f38:	47b8      	blx	r7
		}
        	req->method = &post_method_lookup[method_id];
        	
        	
        	
            	if(_get_filed_value(buf, "Content-Length:", 16, _GFV_INTEGER, &(req->body_size)) &&
   80f3a:	2800      	cmp	r0, #0
   80f3c:	d046      	beq.n	80fcc <parse_request_head+0x324>
	           _get_filed_value(buf, "content-length:", 16, _GFV_INTEGER, &(req->body_size)) ) {
            		req_err(req, 400, "<Content-Length> filed not found");
   80f3e:	4b28      	ldr	r3, [pc, #160]	; (80fe0 <parse_request_head+0x338>)
   80f40:	681b      	ldr	r3, [r3, #0]
   80f42:	68dd      	ldr	r5, [r3, #12]
   80f44:	4b27      	ldr	r3, [pc, #156]	; (80fe4 <parse_request_head+0x33c>)
   80f46:	4798      	blx	r3
   80f48:	6803      	ldr	r3, [r0, #0]
   80f4a:	9300      	str	r3, [sp, #0]
   80f4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80f50:	9301      	str	r3, [sp, #4]
   80f52:	4b25      	ldr	r3, [pc, #148]	; (80fe8 <parse_request_head+0x340>)
   80f54:	9302      	str	r3, [sp, #8]
   80f56:	4628      	mov	r0, r5
   80f58:	4924      	ldr	r1, [pc, #144]	; (80fec <parse_request_head+0x344>)
   80f5a:	4a25      	ldr	r2, [pc, #148]	; (80ff0 <parse_request_head+0x348>)
   80f5c:	2391      	movs	r3, #145	; 0x91
   80f5e:	4d25      	ldr	r5, [pc, #148]	; (80ff4 <parse_request_head+0x34c>)
   80f60:	47a8      	blx	r5
   80f62:	68e3      	ldr	r3, [r4, #12]
   80f64:	b10b      	cbz	r3, 80f6a <parse_request_head+0x2c2>
   80f66:	2bc8      	cmp	r3, #200	; 0xc8
   80f68:	d130      	bne.n	80fcc <parse_request_head+0x324>
   80f6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   80f6e:	60e3      	str	r3, [r4, #12]
   80f70:	4b1d      	ldr	r3, [pc, #116]	; (80fe8 <parse_request_head+0x340>)
   80f72:	62a3      	str	r3, [r4, #40]	; 0x28
   80f74:	23ff      	movs	r3, #255	; 0xff
   80f76:	8023      	strh	r3, [r4, #0]
   80f78:	4b1f      	ldr	r3, [pc, #124]	; (80ff8 <parse_request_head+0x350>)
   80f7a:	61e3      	str	r3, [r4, #28]
   80f7c:	2391      	movs	r3, #145	; 0x91
   80f7e:	6263      	str	r3, [r4, #36]	; 0x24
   80f80:	4b1b      	ldr	r3, [pc, #108]	; (80ff0 <parse_request_head+0x348>)
   80f82:	6223      	str	r3, [r4, #32]
   80f84:	e022      	b.n	80fcc <parse_request_head+0x324>
            		return;            	
            	}

        } else {       
        	req_err(req, 501, "Method not implemented");        	
   80f86:	4b16      	ldr	r3, [pc, #88]	; (80fe0 <parse_request_head+0x338>)
   80f88:	681b      	ldr	r3, [r3, #0]
   80f8a:	68dd      	ldr	r5, [r3, #12]
   80f8c:	4b15      	ldr	r3, [pc, #84]	; (80fe4 <parse_request_head+0x33c>)
   80f8e:	4798      	blx	r3
   80f90:	6803      	ldr	r3, [r0, #0]
   80f92:	9300      	str	r3, [sp, #0]
   80f94:	f240 13f5 	movw	r3, #501	; 0x1f5
   80f98:	9301      	str	r3, [sp, #4]
   80f9a:	4b18      	ldr	r3, [pc, #96]	; (80ffc <parse_request_head+0x354>)
   80f9c:	9302      	str	r3, [sp, #8]
   80f9e:	4628      	mov	r0, r5
   80fa0:	4912      	ldr	r1, [pc, #72]	; (80fec <parse_request_head+0x344>)
   80fa2:	4a13      	ldr	r2, [pc, #76]	; (80ff0 <parse_request_head+0x348>)
   80fa4:	2396      	movs	r3, #150	; 0x96
   80fa6:	4d13      	ldr	r5, [pc, #76]	; (80ff4 <parse_request_head+0x34c>)
   80fa8:	47a8      	blx	r5
   80faa:	68e3      	ldr	r3, [r4, #12]
   80fac:	b10b      	cbz	r3, 80fb2 <parse_request_head+0x30a>
   80fae:	2bc8      	cmp	r3, #200	; 0xc8
   80fb0:	d10c      	bne.n	80fcc <parse_request_head+0x324>
   80fb2:	f240 13f5 	movw	r3, #501	; 0x1f5
   80fb6:	60e3      	str	r3, [r4, #12]
   80fb8:	4b10      	ldr	r3, [pc, #64]	; (80ffc <parse_request_head+0x354>)
   80fba:	62a3      	str	r3, [r4, #40]	; 0x28
   80fbc:	23ff      	movs	r3, #255	; 0xff
   80fbe:	8023      	strh	r3, [r4, #0]
   80fc0:	4b0d      	ldr	r3, [pc, #52]	; (80ff8 <parse_request_head+0x350>)
   80fc2:	61e3      	str	r3, [r4, #28]
   80fc4:	2396      	movs	r3, #150	; 0x96
   80fc6:	6263      	str	r3, [r4, #36]	; 0x24
   80fc8:	4b09      	ldr	r3, [pc, #36]	; (80ff0 <parse_request_head+0x348>)
   80fca:	6223      	str	r3, [r4, #32]
        }	
}
   80fcc:	b009      	add	sp, #36	; 0x24
   80fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80fd0:	20070244 	.word	0x20070244
   80fd4:	000b042c 	.word	0x000b042c
   80fd8:	00080b2d 	.word	0x00080b2d
   80fdc:	000b043c 	.word	0x000b043c
   80fe0:	200702c8 	.word	0x200702c8
   80fe4:	0008c775 	.word	0x0008c775
   80fe8:	000b044c 	.word	0x000b044c
   80fec:	000b0264 	.word	0x000b0264
   80ff0:	000b0768 	.word	0x000b0768
   80ff4:	0008c7c7 	.word	0x0008c7c7
   80ff8:	000b02e8 	.word	0x000b02e8
   80ffc:	000b03dc 	.word	0x000b03dc

00081000 <read_request_head>:
/*-----------------------------------------------------------*/
ssize_t read_request_head(struct netconn *netconn, struct netbuf **res)
{		
   81000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81004:	b085      	sub	sp, #20
   81006:	4606      	mov	r6, r0
   81008:	4689      	mov	r9, r1
	struct netbuf *nb, *head = NULL;
   8100a:	2400      	movs	r4, #0
	int end;
	for(;;) {
		if(netconn_recv(netconn, &nb)) {
   8100c:	4d15      	ldr	r5, [pc, #84]	; (81064 <read_request_head+0x64>)
			error("netconn_recv()");
			return -1;
		}
		
		if(head) netbuf_chain( head, nb);
   8100e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81084 <read_request_head+0x84>
		else   	 head = nb;
		end = pbuf_strstr(head->p, "\r\n\r\n");
   81012:	4f15      	ldr	r7, [pc, #84]	; (81068 <read_request_head+0x68>)
ssize_t read_request_head(struct netconn *netconn, struct netbuf **res)
{		
	struct netbuf *nb, *head = NULL;
	int end;
	for(;;) {
		if(netconn_recv(netconn, &nb)) {
   81014:	4630      	mov	r0, r6
   81016:	a903      	add	r1, sp, #12
   81018:	47a8      	blx	r5
   8101a:	b178      	cbz	r0, 8103c <read_request_head+0x3c>
			error("netconn_recv()");
   8101c:	4b13      	ldr	r3, [pc, #76]	; (8106c <read_request_head+0x6c>)
   8101e:	681b      	ldr	r3, [r3, #0]
   81020:	68dc      	ldr	r4, [r3, #12]
   81022:	4b13      	ldr	r3, [pc, #76]	; (81070 <read_request_head+0x70>)
   81024:	4798      	blx	r3
   81026:	6803      	ldr	r3, [r0, #0]
   81028:	9300      	str	r3, [sp, #0]
   8102a:	4620      	mov	r0, r4
   8102c:	4911      	ldr	r1, [pc, #68]	; (81074 <read_request_head+0x74>)
   8102e:	4a12      	ldr	r2, [pc, #72]	; (81078 <read_request_head+0x78>)
   81030:	23a0      	movs	r3, #160	; 0xa0
   81032:	4c12      	ldr	r4, [pc, #72]	; (8107c <read_request_head+0x7c>)
   81034:	47a0      	blx	r4
			return -1;
   81036:	f04f 30ff 	mov.w	r0, #4294967295
   8103a:	e00f      	b.n	8105c <read_request_head+0x5c>
		}
		
		if(head) netbuf_chain( head, nb);
   8103c:	b11c      	cbz	r4, 81046 <read_request_head+0x46>
   8103e:	4620      	mov	r0, r4
   81040:	9903      	ldr	r1, [sp, #12]
   81042:	47c0      	blx	r8
   81044:	e000      	b.n	81048 <read_request_head+0x48>
		else   	 head = nb;
   81046:	9c03      	ldr	r4, [sp, #12]
		end = pbuf_strstr(head->p, "\r\n\r\n");
   81048:	6820      	ldr	r0, [r4, #0]
   8104a:	4639      	mov	r1, r7
   8104c:	4b0c      	ldr	r3, [pc, #48]	; (81080 <read_request_head+0x80>)
   8104e:	4798      	blx	r3
		if( end != 0xFFFF) 
   81050:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81054:	4298      	cmp	r0, r3
   81056:	d0dd      	beq.n	81014 <read_request_head+0x14>
			break;	
	}		
	*res = head;
   81058:	f8c9 4000 	str.w	r4, [r9]
	return end;

}
   8105c:	b005      	add	sp, #20
   8105e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81062:	bf00      	nop
   81064:	0008558d 	.word	0x0008558d
   81068:	000b04ec 	.word	0x000b04ec
   8106c:	200702c8 	.word	0x200702c8
   81070:	0008c775 	.word	0x0008c775
   81074:	000b0470 	.word	0x000b0470
   81078:	0009437c 	.word	0x0009437c
   8107c:	0008c7c7 	.word	0x0008c7c7
   81080:	00088555 	.word	0x00088555
   81084:	000862e9 	.word	0x000862e9

00081088 <read_request_body>:



int read_request_body(struct netconn *netconn, struct netbuf **res, ssize_t bodylen )
{	
   81088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8108c:	b085      	sub	sp, #20
   8108e:	4606      	mov	r6, r0
   81090:	4689      	mov	r9, r1
   81092:	4617      	mov	r7, r2
	struct netbuf *nb, *body = NULL;
   81094:	2400      	movs	r4, #0
	for(;;) {
#ifdef STRICT

		if(netconn_recv(netconn, &nb)) {
   81096:	4d13      	ldr	r5, [pc, #76]	; (810e4 <read_request_body+0x5c>)
		if(__netconn_recv(netconn, &nb, bodylen)) {
			error("netconn_recv()");
			return -1;
		}
#endif
		if(body) netbuf_chain( body, nb);
   81098:	f8df 8060 	ldr.w	r8, [pc, #96]	; 810fc <read_request_body+0x74>
{	
	struct netbuf *nb, *body = NULL;
	for(;;) {
#ifdef STRICT

		if(netconn_recv(netconn, &nb)) {
   8109c:	4630      	mov	r0, r6
   8109e:	a903      	add	r1, sp, #12
   810a0:	47a8      	blx	r5
   810a2:	b178      	cbz	r0, 810c4 <read_request_body+0x3c>
			error("netconn_recv()");
   810a4:	4b10      	ldr	r3, [pc, #64]	; (810e8 <read_request_body+0x60>)
   810a6:	681b      	ldr	r3, [r3, #0]
   810a8:	68dc      	ldr	r4, [r3, #12]
   810aa:	4b10      	ldr	r3, [pc, #64]	; (810ec <read_request_body+0x64>)
   810ac:	4798      	blx	r3
   810ae:	6803      	ldr	r3, [r0, #0]
   810b0:	9300      	str	r3, [sp, #0]
   810b2:	4620      	mov	r0, r4
   810b4:	490e      	ldr	r1, [pc, #56]	; (810f0 <read_request_body+0x68>)
   810b6:	4a0f      	ldr	r2, [pc, #60]	; (810f4 <read_request_body+0x6c>)
   810b8:	23b8      	movs	r3, #184	; 0xb8
   810ba:	4c0f      	ldr	r4, [pc, #60]	; (810f8 <read_request_body+0x70>)
   810bc:	47a0      	blx	r4
			return -1;
   810be:	f04f 30ff 	mov.w	r0, #4294967295
   810c2:	e00c      	b.n	810de <read_request_body+0x56>
		if(__netconn_recv(netconn, &nb, bodylen)) {
			error("netconn_recv()");
			return -1;
		}
#endif
		if(body) netbuf_chain( body, nb);
   810c4:	b11c      	cbz	r4, 810ce <read_request_body+0x46>
   810c6:	4620      	mov	r0, r4
   810c8:	9903      	ldr	r1, [sp, #12]
   810ca:	47c0      	blx	r8
   810cc:	e000      	b.n	810d0 <read_request_body+0x48>
		else   	 body = nb;
   810ce:	9c03      	ldr	r4, [sp, #12]
		
		if(body->p->tot_len >= bodylen)
   810d0:	6823      	ldr	r3, [r4, #0]
   810d2:	891b      	ldrh	r3, [r3, #8]
   810d4:	42bb      	cmp	r3, r7
   810d6:	dbe1      	blt.n	8109c <read_request_body+0x14>
			break;
	}		
	*res = body;
   810d8:	f8c9 4000 	str.w	r4, [r9]
	return 0;
   810dc:	2000      	movs	r0, #0

}
   810de:	b005      	add	sp, #20
   810e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   810e4:	0008558d 	.word	0x0008558d
   810e8:	200702c8 	.word	0x200702c8
   810ec:	0008c775 	.word	0x0008c775
   810f0:	000b0470 	.word	0x000b0470
   810f4:	00094390 	.word	0x00094390
   810f8:	0008c7c7 	.word	0x0008c7c7
   810fc:	000862e9 	.word	0x000862e9

00081100 <write_webpage>:

#include "wp.h"
int write_webpage(struct http_request *req)
{
   81100:	b530      	push	{r4, r5, lr}
   81102:	b085      	sub	sp, #20
   81104:	4605      	mov	r5, r0
	if(_reply_head(req) == -1) {
   81106:	4b25      	ldr	r3, [pc, #148]	; (8119c <write_webpage+0x9c>)
   81108:	4798      	blx	r3
   8110a:	4604      	mov	r4, r0
   8110c:	f1b0 3fff 	cmp.w	r0, #4294967295
   81110:	d10d      	bne.n	8112e <write_webpage+0x2e>
		error("_reply_head()");		
   81112:	4b23      	ldr	r3, [pc, #140]	; (811a0 <write_webpage+0xa0>)
   81114:	681b      	ldr	r3, [r3, #0]
   81116:	68dd      	ldr	r5, [r3, #12]
   81118:	4b22      	ldr	r3, [pc, #136]	; (811a4 <write_webpage+0xa4>)
   8111a:	4798      	blx	r3
   8111c:	6803      	ldr	r3, [r0, #0]
   8111e:	9300      	str	r3, [sp, #0]
   81120:	4628      	mov	r0, r5
   81122:	4921      	ldr	r1, [pc, #132]	; (811a8 <write_webpage+0xa8>)
   81124:	4a21      	ldr	r2, [pc, #132]	; (811ac <write_webpage+0xac>)
   81126:	23d0      	movs	r3, #208	; 0xd0
   81128:	4d21      	ldr	r5, [pc, #132]	; (811b0 <write_webpage+0xb0>)
   8112a:	47a8      	blx	r5
		return -1;
   8112c:	e032      	b.n	81194 <write_webpage+0x94>
	}
	if(netconn_write(req->netconn, webpage, webpage_len, 0) == -1) {
   8112e:	6868      	ldr	r0, [r5, #4]
   81130:	4920      	ldr	r1, [pc, #128]	; (811b4 <write_webpage+0xb4>)
   81132:	4a21      	ldr	r2, [pc, #132]	; (811b8 <write_webpage+0xb8>)
   81134:	2300      	movs	r3, #0
   81136:	4c21      	ldr	r4, [pc, #132]	; (811bc <write_webpage+0xbc>)
   81138:	47a0      	blx	r4
   8113a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8113e:	d125      	bne.n	8118c <write_webpage+0x8c>
		req_internal(req,"netconn_write()");
   81140:	4b17      	ldr	r3, [pc, #92]	; (811a0 <write_webpage+0xa0>)
   81142:	681b      	ldr	r3, [r3, #0]
   81144:	68dc      	ldr	r4, [r3, #12]
   81146:	4b17      	ldr	r3, [pc, #92]	; (811a4 <write_webpage+0xa4>)
   81148:	4798      	blx	r3
   8114a:	6803      	ldr	r3, [r0, #0]
   8114c:	9300      	str	r3, [sp, #0]
   8114e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   81152:	9301      	str	r3, [sp, #4]
   81154:	4b1a      	ldr	r3, [pc, #104]	; (811c0 <write_webpage+0xc0>)
   81156:	9302      	str	r3, [sp, #8]
   81158:	4620      	mov	r0, r4
   8115a:	491a      	ldr	r1, [pc, #104]	; (811c4 <write_webpage+0xc4>)
   8115c:	4a13      	ldr	r2, [pc, #76]	; (811ac <write_webpage+0xac>)
   8115e:	23d4      	movs	r3, #212	; 0xd4
   81160:	4c13      	ldr	r4, [pc, #76]	; (811b0 <write_webpage+0xb0>)
   81162:	47a0      	blx	r4
   81164:	68eb      	ldr	r3, [r5, #12]
   81166:	b10b      	cbz	r3, 8116c <write_webpage+0x6c>
   81168:	2bc8      	cmp	r3, #200	; 0xc8
   8116a:	d111      	bne.n	81190 <write_webpage+0x90>
   8116c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   81170:	60eb      	str	r3, [r5, #12]
   81172:	4b13      	ldr	r3, [pc, #76]	; (811c0 <write_webpage+0xc0>)
   81174:	62ab      	str	r3, [r5, #40]	; 0x28
   81176:	23ff      	movs	r3, #255	; 0xff
   81178:	802b      	strh	r3, [r5, #0]
   8117a:	4b13      	ldr	r3, [pc, #76]	; (811c8 <write_webpage+0xc8>)
   8117c:	61eb      	str	r3, [r5, #28]
   8117e:	23d4      	movs	r3, #212	; 0xd4
   81180:	626b      	str	r3, [r5, #36]	; 0x24
   81182:	4b0a      	ldr	r3, [pc, #40]	; (811ac <write_webpage+0xac>)
   81184:	622b      	str	r3, [r5, #32]
		return  -1;
   81186:	f04f 34ff 	mov.w	r4, #4294967295
   8118a:	e003      	b.n	81194 <write_webpage+0x94>
	}
	return 0;	
   8118c:	2400      	movs	r4, #0
   8118e:	e001      	b.n	81194 <write_webpage+0x94>
		error("_reply_head()");		
		return -1;
	}
	if(netconn_write(req->netconn, webpage, webpage_len, 0) == -1) {
		req_internal(req,"netconn_write()");
		return  -1;
   81190:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return 0;	
}
   81194:	4620      	mov	r0, r4
   81196:	b005      	add	sp, #20
   81198:	bd30      	pop	{r4, r5, pc}
   8119a:	bf00      	nop
   8119c:	00080a19 	.word	0x00080a19
   811a0:	200702c8 	.word	0x200702c8
   811a4:	0008c775 	.word	0x0008c775
   811a8:	000b04f4 	.word	0x000b04f4
   811ac:	000b0144 	.word	0x000b0144
   811b0:	0008c7c7 	.word	0x0008c7c7
   811b4:	000943a4 	.word	0x000943a4
   811b8:	0001bd9d 	.word	0x0001bd9d
   811bc:	0008562d 	.word	0x0008562d
   811c0:	000b0570 	.word	0x000b0570
   811c4:	000b0264 	.word	0x000b0264
   811c8:	000b02e8 	.word	0x000b02e8

000811cc <server_start>:
int server_start(void)
{
   811cc:	b508      	push	{r3, lr}
	return open_api();	
   811ce:	4b01      	ldr	r3, [pc, #4]	; (811d4 <server_start+0x8>)
   811d0:	4798      	blx	r3
}
   811d2:	bd08      	pop	{r3, pc}
   811d4:	00081791 	.word	0x00081791

000811d8 <handle_request>:
void server_stop(void)
{
	close_api();	
}
void handle_request(struct netconn *netconn)
{
   811d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   811da:	b093      	sub	sp, #76	; 0x4c
   811dc:	4605      	mov	r5, r0
	struct http_request req;	
	struct netbuf *head, *body = NULL;
   811de:	2400      	movs	r4, #0
   811e0:	9405      	str	r4, [sp, #20]
	int body_start;

	dprintf("================[HEAD]================\n");	
   811e2:	4887      	ldr	r0, [pc, #540]	; (81400 <handle_request+0x228>)
   811e4:	4b87      	ldr	r3, [pc, #540]	; (81404 <handle_request+0x22c>)
   811e6:	4798      	blx	r3
	
	req.netconn = netconn;
   811e8:	9508      	str	r5, [sp, #32]
	req.http_code = 200;
   811ea:	23c8      	movs	r3, #200	; 0xc8
   811ec:	930a      	str	r3, [sp, #40]	; 0x28
	req.header_msg = NULL;
   811ee:	9411      	str	r4, [sp, #68]	; 0x44
	req.body_size = 0;
   811f0:	940d      	str	r4, [sp, #52]	; 0x34
	req.head_end = read_request_head(req.netconn, &head);
   811f2:	4628      	mov	r0, r5
   811f4:	a906      	add	r1, sp, #24
   811f6:	4b84      	ldr	r3, [pc, #528]	; (81408 <handle_request+0x230>)
   811f8:	4798      	blx	r3
   811fa:	900c      	str	r0, [sp, #48]	; 0x30

	if( req.head_end == -1) {	
   811fc:	f1b0 3fff 	cmp.w	r0, #4294967295
   81200:	d124      	bne.n	8124c <handle_request+0x74>
		req_internal(&req,"read_request_head()");
   81202:	4b82      	ldr	r3, [pc, #520]	; (8140c <handle_request+0x234>)
   81204:	681b      	ldr	r3, [r3, #0]
   81206:	68dc      	ldr	r4, [r3, #12]
   81208:	4b81      	ldr	r3, [pc, #516]	; (81410 <handle_request+0x238>)
   8120a:	4798      	blx	r3
   8120c:	6803      	ldr	r3, [r0, #0]
   8120e:	9300      	str	r3, [sp, #0]
   81210:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   81214:	9301      	str	r3, [sp, #4]
   81216:	4b7f      	ldr	r3, [pc, #508]	; (81414 <handle_request+0x23c>)
   81218:	9302      	str	r3, [sp, #8]
   8121a:	4620      	mov	r0, r4
   8121c:	497e      	ldr	r1, [pc, #504]	; (81418 <handle_request+0x240>)
   8121e:	4a7f      	ldr	r2, [pc, #508]	; (8141c <handle_request+0x244>)
   81220:	23f0      	movs	r3, #240	; 0xf0
   81222:	4c7f      	ldr	r4, [pc, #508]	; (81420 <handle_request+0x248>)
   81224:	47a0      	blx	r4
   81226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81228:	b10b      	cbz	r3, 8122e <handle_request+0x56>
   8122a:	2bc8      	cmp	r3, #200	; 0xc8
   8122c:	d11a      	bne.n	81264 <handle_request+0x8c>
   8122e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   81232:	930a      	str	r3, [sp, #40]	; 0x28
   81234:	4b77      	ldr	r3, [pc, #476]	; (81414 <handle_request+0x23c>)
   81236:	9311      	str	r3, [sp, #68]	; 0x44
   81238:	23ff      	movs	r3, #255	; 0xff
   8123a:	f8ad 301c 	strh.w	r3, [sp, #28]
   8123e:	4b79      	ldr	r3, [pc, #484]	; (81424 <handle_request+0x24c>)
   81240:	930e      	str	r3, [sp, #56]	; 0x38
   81242:	23f0      	movs	r3, #240	; 0xf0
   81244:	9310      	str	r3, [sp, #64]	; 0x40
   81246:	4b75      	ldr	r3, [pc, #468]	; (8141c <handle_request+0x244>)
   81248:	930f      	str	r3, [sp, #60]	; 0x3c
   8124a:	e00b      	b.n	81264 <handle_request+0x8c>
		goto req_proc;
	}

	print_xjson(" \nHEAD ->", "<-\n", head, 0, req.head_end + 4);
   8124c:	3004      	adds	r0, #4
   8124e:	9000      	str	r0, [sp, #0]
   81250:	4875      	ldr	r0, [pc, #468]	; (81428 <handle_request+0x250>)
   81252:	4976      	ldr	r1, [pc, #472]	; (8142c <handle_request+0x254>)
   81254:	9a06      	ldr	r2, [sp, #24]
   81256:	2300      	movs	r3, #0
   81258:	4c75      	ldr	r4, [pc, #468]	; (81430 <handle_request+0x258>)
   8125a:	47a0      	blx	r4
	parse_request_head(head, &req);
   8125c:	9806      	ldr	r0, [sp, #24]
   8125e:	a907      	add	r1, sp, #28
   81260:	4b74      	ldr	r3, [pc, #464]	; (81434 <handle_request+0x25c>)
   81262:	4798      	blx	r3
req_proc:

	switch(req.req_type) {
		case HTTP_HEADER_POST:

			dprintf("------------HTTP_HEADER_POST------------\n");
   81264:	4d74      	ldr	r5, [pc, #464]	; (81438 <handle_request+0x260>)
   81266:	4c67      	ldr	r4, [pc, #412]	; (81404 <handle_request+0x22c>)
			req.gzipped = 0;
			if(req.body_size) {		
				body_start = req.head_end + 4;
				dprintf("================[BODY]================\n");
   81268:	4e74      	ldr	r6, [pc, #464]	; (8143c <handle_request+0x264>)
	print_xjson(" \nHEAD ->", "<-\n", head, 0, req.head_end + 4);
	parse_request_head(head, &req);
	
req_proc:

	switch(req.req_type) {
   8126a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   8126e:	2b02      	cmp	r3, #2
   81270:	d006      	beq.n	81280 <handle_request+0xa8>
   81272:	2bff      	cmp	r3, #255	; 0xff
   81274:	f000 80a6 	beq.w	813c4 <handle_request+0x1ec>
   81278:	2b01      	cmp	r3, #1
   8127a:	f040 80bc 	bne.w	813f6 <handle_request+0x21e>
   8127e:	e089      	b.n	81394 <handle_request+0x1bc>
		case HTTP_HEADER_POST:

			dprintf("------------HTTP_HEADER_POST------------\n");
   81280:	4628      	mov	r0, r5
   81282:	47a0      	blx	r4
			req.gzipped = 0;
   81284:	2300      	movs	r3, #0
   81286:	930b      	str	r3, [sp, #44]	; 0x2c
			if(req.body_size) {		
   81288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8128a:	2b00      	cmp	r3, #0
   8128c:	f000 80b3 	beq.w	813f6 <handle_request+0x21e>
				body_start = req.head_end + 4;
   81290:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   81292:	3704      	adds	r7, #4
				dprintf("================[BODY]================\n");
   81294:	4630      	mov	r0, r6
   81296:	47a0      	blx	r4
				print_xjson(" \nALL  ->", "<-\n", head, 0, head->p->tot_len);
   81298:	9a06      	ldr	r2, [sp, #24]
   8129a:	6813      	ldr	r3, [r2, #0]
   8129c:	891b      	ldrh	r3, [r3, #8]
   8129e:	9300      	str	r3, [sp, #0]
   812a0:	4867      	ldr	r0, [pc, #412]	; (81440 <handle_request+0x268>)
   812a2:	4962      	ldr	r1, [pc, #392]	; (8142c <handle_request+0x254>)
   812a4:	2300      	movs	r3, #0
   812a6:	f8df c188 	ldr.w	ip, [pc, #392]	; 81430 <handle_request+0x258>
   812aa:	47e0      	blx	ip
				if( body_start + req.body_size > head->p->tot_len) {
   812ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   812ae:	443a      	add	r2, r7
   812b0:	9b06      	ldr	r3, [sp, #24]
   812b2:	681b      	ldr	r3, [r3, #0]
   812b4:	891b      	ldrh	r3, [r3, #8]
   812b6:	429a      	cmp	r2, r3
   812b8:	d932      	bls.n	81320 <handle_request+0x148>
					
					if(read_request_body(req.netconn, &body, 
   812ba:	9808      	ldr	r0, [sp, #32]
   812bc:	a905      	add	r1, sp, #20
   812be:	1ad2      	subs	r2, r2, r3
   812c0:	4b60      	ldr	r3, [pc, #384]	; (81444 <handle_request+0x26c>)
   812c2:	4798      	blx	r3
   812c4:	f1b0 3fff 	cmp.w	r0, #4294967295
   812c8:	d126      	bne.n	81318 <handle_request+0x140>
							     body_start + req.body_size - head->p->tot_len ) == -1) {
						req_internal(&req,"read_request_body()");
   812ca:	4b50      	ldr	r3, [pc, #320]	; (8140c <handle_request+0x234>)
   812cc:	681b      	ldr	r3, [r3, #0]
   812ce:	68df      	ldr	r7, [r3, #12]
   812d0:	4b4f      	ldr	r3, [pc, #316]	; (81410 <handle_request+0x238>)
   812d2:	4798      	blx	r3
   812d4:	6803      	ldr	r3, [r0, #0]
   812d6:	9300      	str	r3, [sp, #0]
   812d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   812dc:	9301      	str	r3, [sp, #4]
   812de:	4b5a      	ldr	r3, [pc, #360]	; (81448 <handle_request+0x270>)
   812e0:	9302      	str	r3, [sp, #8]
   812e2:	4638      	mov	r0, r7
   812e4:	494c      	ldr	r1, [pc, #304]	; (81418 <handle_request+0x240>)
   812e6:	4a4d      	ldr	r2, [pc, #308]	; (8141c <handle_request+0x244>)
   812e8:	f44f 7383 	mov.w	r3, #262	; 0x106
   812ec:	4f4c      	ldr	r7, [pc, #304]	; (81420 <handle_request+0x248>)
   812ee:	47b8      	blx	r7
   812f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   812f2:	b10b      	cbz	r3, 812f8 <handle_request+0x120>
   812f4:	2bc8      	cmp	r3, #200	; 0xc8
   812f6:	d1b8      	bne.n	8126a <handle_request+0x92>
   812f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   812fc:	930a      	str	r3, [sp, #40]	; 0x28
   812fe:	4b52      	ldr	r3, [pc, #328]	; (81448 <handle_request+0x270>)
   81300:	9311      	str	r3, [sp, #68]	; 0x44
   81302:	23ff      	movs	r3, #255	; 0xff
   81304:	f8ad 301c 	strh.w	r3, [sp, #28]
   81308:	4b46      	ldr	r3, [pc, #280]	; (81424 <handle_request+0x24c>)
   8130a:	930e      	str	r3, [sp, #56]	; 0x38
   8130c:	f44f 7383 	mov.w	r3, #262	; 0x106
   81310:	9310      	str	r3, [sp, #64]	; 0x40
   81312:	4b42      	ldr	r3, [pc, #264]	; (8141c <handle_request+0x244>)
   81314:	930f      	str	r3, [sp, #60]	; 0x3c
   81316:	e7a8      	b.n	8126a <handle_request+0x92>
						goto req_proc;
					}
					
					
					netbuf_chain(head, body);
   81318:	9806      	ldr	r0, [sp, #24]
   8131a:	9905      	ldr	r1, [sp, #20]
   8131c:	4b4b      	ldr	r3, [pc, #300]	; (8144c <handle_request+0x274>)
   8131e:	4798      	blx	r3
				}
				
				print_xjson(" \nBODY ->", "<-\n", head, req.head_end + 4, req.body_size);
   81320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81322:	9300      	str	r3, [sp, #0]
   81324:	484a      	ldr	r0, [pc, #296]	; (81450 <handle_request+0x278>)
   81326:	4941      	ldr	r1, [pc, #260]	; (8142c <handle_request+0x254>)
   81328:	9a06      	ldr	r2, [sp, #24]
   8132a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8132c:	3304      	adds	r3, #4
   8132e:	f8df c100 	ldr.w	ip, [pc, #256]	; 81430 <handle_request+0x258>
   81332:	47e0      	blx	ip

				if(execute_post_method(&req, head, body_start) == -1) {
   81334:	a807      	add	r0, sp, #28
   81336:	9906      	ldr	r1, [sp, #24]
   81338:	463a      	mov	r2, r7
   8133a:	4b46      	ldr	r3, [pc, #280]	; (81454 <handle_request+0x27c>)
   8133c:	4798      	blx	r3
   8133e:	f1b0 3fff 	cmp.w	r0, #4294967295
   81342:	d158      	bne.n	813f6 <handle_request+0x21e>
					req_err(&req, 401, "execute_post_method()");
   81344:	4b31      	ldr	r3, [pc, #196]	; (8140c <handle_request+0x234>)
   81346:	681b      	ldr	r3, [r3, #0]
   81348:	68df      	ldr	r7, [r3, #12]
   8134a:	4b31      	ldr	r3, [pc, #196]	; (81410 <handle_request+0x238>)
   8134c:	4798      	blx	r3
   8134e:	6803      	ldr	r3, [r0, #0]
   81350:	9300      	str	r3, [sp, #0]
   81352:	f240 1391 	movw	r3, #401	; 0x191
   81356:	9301      	str	r3, [sp, #4]
   81358:	4b3f      	ldr	r3, [pc, #252]	; (81458 <handle_request+0x280>)
   8135a:	9302      	str	r3, [sp, #8]
   8135c:	4638      	mov	r0, r7
   8135e:	492e      	ldr	r1, [pc, #184]	; (81418 <handle_request+0x240>)
   81360:	4a2e      	ldr	r2, [pc, #184]	; (8141c <handle_request+0x244>)
   81362:	f240 1311 	movw	r3, #273	; 0x111
   81366:	4f2e      	ldr	r7, [pc, #184]	; (81420 <handle_request+0x248>)
   81368:	47b8      	blx	r7
   8136a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8136c:	b113      	cbz	r3, 81374 <handle_request+0x19c>
   8136e:	2bc8      	cmp	r3, #200	; 0xc8
   81370:	f47f af7b 	bne.w	8126a <handle_request+0x92>
   81374:	f240 1391 	movw	r3, #401	; 0x191
   81378:	930a      	str	r3, [sp, #40]	; 0x28
   8137a:	4b37      	ldr	r3, [pc, #220]	; (81458 <handle_request+0x280>)
   8137c:	9311      	str	r3, [sp, #68]	; 0x44
   8137e:	23ff      	movs	r3, #255	; 0xff
   81380:	f8ad 301c 	strh.w	r3, [sp, #28]
   81384:	4b27      	ldr	r3, [pc, #156]	; (81424 <handle_request+0x24c>)
   81386:	930e      	str	r3, [sp, #56]	; 0x38
   81388:	f240 1311 	movw	r3, #273	; 0x111
   8138c:	9310      	str	r3, [sp, #64]	; 0x40
   8138e:	4b23      	ldr	r3, [pc, #140]	; (8141c <handle_request+0x244>)
   81390:	930f      	str	r3, [sp, #60]	; 0x3c
   81392:	e76a      	b.n	8126a <handle_request+0x92>
				
				
			}
			break;
		case HTTP_HEADER_GET:
			dprintf("------------HTTP_HEADER_GET------------\n");  
   81394:	4831      	ldr	r0, [pc, #196]	; (8145c <handle_request+0x284>)
   81396:	47a0      	blx	r4
			req.gzipped = 1;
   81398:	2301      	movs	r3, #1
   8139a:	930b      	str	r3, [sp, #44]	; 0x2c
			if(write_webpage(&req)) {
   8139c:	a807      	add	r0, sp, #28
   8139e:	4b30      	ldr	r3, [pc, #192]	; (81460 <handle_request+0x288>)
   813a0:	4798      	blx	r3
   813a2:	2800      	cmp	r0, #0
   813a4:	d027      	beq.n	813f6 <handle_request+0x21e>
				error("write_webpage()");
   813a6:	4b19      	ldr	r3, [pc, #100]	; (8140c <handle_request+0x234>)
   813a8:	681b      	ldr	r3, [r3, #0]
   813aa:	68df      	ldr	r7, [r3, #12]
   813ac:	4b18      	ldr	r3, [pc, #96]	; (81410 <handle_request+0x238>)
   813ae:	4798      	blx	r3
   813b0:	6803      	ldr	r3, [r0, #0]
   813b2:	9300      	str	r3, [sp, #0]
   813b4:	4638      	mov	r0, r7
   813b6:	492b      	ldr	r1, [pc, #172]	; (81464 <handle_request+0x28c>)
   813b8:	4a18      	ldr	r2, [pc, #96]	; (8141c <handle_request+0x244>)
   813ba:	f44f 738e 	mov.w	r3, #284	; 0x11c
   813be:	4f18      	ldr	r7, [pc, #96]	; (81420 <handle_request+0x248>)
   813c0:	47b8      	blx	r7
				goto req_proc;
   813c2:	e752      	b.n	8126a <handle_request+0x92>
			}	
						
			break;
		case HTTP_HEADER_ERR:  
			dprintf("------------HTTP_HEADER_ERR------------\n");
   813c4:	4828      	ldr	r0, [pc, #160]	; (81468 <handle_request+0x290>)
   813c6:	4b0f      	ldr	r3, [pc, #60]	; (81404 <handle_request+0x22c>)
   813c8:	4798      	blx	r3
			req.gzipped = 0;
   813ca:	2300      	movs	r3, #0
   813cc:	930b      	str	r3, [sp, #44]	; 0x2c
			if(_reply_head(&req) == -1) 
   813ce:	a807      	add	r0, sp, #28
   813d0:	4b26      	ldr	r3, [pc, #152]	; (8146c <handle_request+0x294>)
   813d2:	4798      	blx	r3
   813d4:	f1b0 3fff 	cmp.w	r0, #4294967295
   813d8:	d10d      	bne.n	813f6 <handle_request+0x21e>
				error("_reply_head()");							
   813da:	4b0c      	ldr	r3, [pc, #48]	; (8140c <handle_request+0x234>)
   813dc:	681b      	ldr	r3, [r3, #0]
   813de:	68dc      	ldr	r4, [r3, #12]
   813e0:	4b0b      	ldr	r3, [pc, #44]	; (81410 <handle_request+0x238>)
   813e2:	4798      	blx	r3
   813e4:	6803      	ldr	r3, [r0, #0]
   813e6:	9300      	str	r3, [sp, #0]
   813e8:	4620      	mov	r0, r4
   813ea:	4921      	ldr	r1, [pc, #132]	; (81470 <handle_request+0x298>)
   813ec:	4a0b      	ldr	r2, [pc, #44]	; (8141c <handle_request+0x244>)
   813ee:	f240 1325 	movw	r3, #293	; 0x125
   813f2:	4c0b      	ldr	r4, [pc, #44]	; (81420 <handle_request+0x248>)
   813f4:	47a0      	blx	r4
				
			break;
	}
	
cleanup:
	netbuf_delete(head);
   813f6:	9806      	ldr	r0, [sp, #24]
   813f8:	4b1e      	ldr	r3, [pc, #120]	; (81474 <handle_request+0x29c>)
   813fa:	4798      	blx	r3
}
   813fc:	b013      	add	sp, #76	; 0x4c
   813fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81400:	000b0580 	.word	0x000b0580
   81404:	0008c839 	.word	0x0008c839
   81408:	00081001 	.word	0x00081001
   8140c:	200702c8 	.word	0x200702c8
   81410:	0008c775 	.word	0x0008c775
   81414:	000b05a8 	.word	0x000b05a8
   81418:	000b0264 	.word	0x000b0264
   8141c:	000b0738 	.word	0x000b0738
   81420:	0008c7c7 	.word	0x0008c7c7
   81424:	000b02e8 	.word	0x000b02e8
   81428:	000b05bc 	.word	0x000b05bc
   8142c:	000b05c8 	.word	0x000b05c8
   81430:	00080679 	.word	0x00080679
   81434:	00080ca9 	.word	0x00080ca9
   81438:	000b05cc 	.word	0x000b05cc
   8143c:	000b05f8 	.word	0x000b05f8
   81440:	000b0620 	.word	0x000b0620
   81444:	00081089 	.word	0x00081089
   81448:	000b062c 	.word	0x000b062c
   8144c:	000862e9 	.word	0x000862e9
   81450:	000b0640 	.word	0x000b0640
   81454:	00082b91 	.word	0x00082b91
   81458:	000b064c 	.word	0x000b064c
   8145c:	000b0664 	.word	0x000b0664
   81460:	00081101 	.word	0x00081101
   81464:	000b0690 	.word	0x000b0690
   81468:	000b070c 	.word	0x000b070c
   8146c:	00080a19 	.word	0x00080a19
   81470:	000b04f4 	.word	0x000b04f4
   81474:	000862c1 	.word	0x000862c1

00081478 <dummy_read_register>:
}


void dummy_read_register(address_t addr, base_t *val)
{	
	if(val)	 {
   81478:	b141      	cbz	r1, 8148c <dummy_read_register+0x14>
		if(addr >= 0 && addr < ARR_LEN(registers))
   8147a:	2803      	cmp	r0, #3
   8147c:	d804      	bhi.n	81488 <dummy_read_register+0x10>
			*val = registers[addr];
   8147e:	4a04      	ldr	r2, [pc, #16]	; (81490 <dummy_read_register+0x18>)
   81480:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   81484:	600a      	str	r2, [r1, #0]
   81486:	4770      	bx	lr
		else
			*val =  0x0;
   81488:	2200      	movs	r2, #0
   8148a:	600a      	str	r2, [r1, #0]
   8148c:	4770      	bx	lr
   8148e:	bf00      	nop
   81490:	20070230 	.word	0x20070230

00081494 <dummy_write_register>:
	}
}
void dummy_write_register(address_t addr, base_t value)
{	
	if(addr >= 0 && addr < ARR_LEN(registers))
   81494:	2803      	cmp	r0, #3
		registers[addr] = value;
   81496:	bf9c      	itt	ls
   81498:	4b01      	ldrls	r3, [pc, #4]	; (814a0 <dummy_write_register+0xc>)
   8149a:	f843 1020 	strls.w	r1, [r3, r0, lsl #2]
   8149e:	4770      	bx	lr
   814a0:	20070230 	.word	0x20070230

000814a4 <__base_to_string>:
#include <stdlib.h>

#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"

ssize_t __base_to_string(base_t num, char string[MAX_STR_BASE_T + 1])
{
   814a4:	b500      	push	{lr}
   814a6:	b083      	sub	sp, #12
	return snprintf(string, MAX_STR_BASE_T,"%lld", (long long)num);	
   814a8:	4602      	mov	r2, r0
   814aa:	2300      	movs	r3, #0
   814ac:	e9cd 2300 	strd	r2, r3, [sp]
   814b0:	4608      	mov	r0, r1
   814b2:	2110      	movs	r1, #16
   814b4:	4a02      	ldr	r2, [pc, #8]	; (814c0 <__base_to_string+0x1c>)
   814b6:	4b03      	ldr	r3, [pc, #12]	; (814c4 <__base_to_string+0x20>)
   814b8:	4798      	blx	r3
}
   814ba:	b003      	add	sp, #12
   814bc:	f85d fb04 	ldr.w	pc, [sp], #4
   814c0:	000b077c 	.word	0x000b077c
   814c4:	0008ce45 	.word	0x0008ce45

000814c8 <__string_to_base>:
int __string_to_base(char string[MAX_STR_BASE_T + 1], base_t *num)
{
   814c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   814cc:	b082      	sub	sp, #8
   814ce:	4605      	mov	r5, r0
   814d0:	460e      	mov	r6, r1
	char *dummy;
	int saved_errno = errno;
   814d2:	4c10      	ldr	r4, [pc, #64]	; (81514 <__string_to_base+0x4c>)
   814d4:	47a0      	blx	r4
   814d6:	6807      	ldr	r7, [r0, #0]
	errno = 0;
   814d8:	47a0      	blx	r4
   814da:	2300      	movs	r3, #0
   814dc:	6003      	str	r3, [r0, #0]
	base_t n = strtol(string, &dummy, 10);
   814de:	4628      	mov	r0, r5
   814e0:	a901      	add	r1, sp, #4
   814e2:	220a      	movs	r2, #10
   814e4:	4b0c      	ldr	r3, [pc, #48]	; (81518 <__string_to_base+0x50>)
   814e6:	4798      	blx	r3
   814e8:	4680      	mov	r8, r0
	if(errno || dummy == string )
   814ea:	47a0      	blx	r4
   814ec:	6804      	ldr	r4, [r0, #0]
   814ee:	b944      	cbnz	r4, 81502 <__string_to_base+0x3a>
   814f0:	9b01      	ldr	r3, [sp, #4]
   814f2:	42ab      	cmp	r3, r5
   814f4:	d008      	beq.n	81508 <__string_to_base+0x40>
		return -1;
	errno = saved_errno;
   814f6:	4b07      	ldr	r3, [pc, #28]	; (81514 <__string_to_base+0x4c>)
   814f8:	4798      	blx	r3
   814fa:	6007      	str	r7, [r0, #0]
	*num = n;
   814fc:	f8c6 8000 	str.w	r8, [r6]
	return 0;	
   81500:	e004      	b.n	8150c <__string_to_base+0x44>
	char *dummy;
	int saved_errno = errno;
	errno = 0;
	base_t n = strtol(string, &dummy, 10);
	if(errno || dummy == string )
		return -1;
   81502:	f04f 34ff 	mov.w	r4, #4294967295
   81506:	e001      	b.n	8150c <__string_to_base+0x44>
   81508:	f04f 34ff 	mov.w	r4, #4294967295
	errno = saved_errno;
	*num = n;
	return 0;	
}
   8150c:	4620      	mov	r0, r4
   8150e:	b002      	add	sp, #8
   81510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81514:	0008c775 	.word	0x0008c775
   81518:	0008d029 	.word	0x0008d029

0008151c <__string_to_addr>:

int __string_to_addr(char string[MAX_STR_ADDR_T + 1], address_t *addr)
{
   8151c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81520:	b082      	sub	sp, #8
   81522:	4605      	mov	r5, r0
   81524:	460e      	mov	r6, r1
	char *dummy;
	int saved_errno = errno;
   81526:	4c10      	ldr	r4, [pc, #64]	; (81568 <__string_to_addr+0x4c>)
   81528:	47a0      	blx	r4
   8152a:	6807      	ldr	r7, [r0, #0]
	errno = 0;
   8152c:	47a0      	blx	r4
   8152e:	2300      	movs	r3, #0
   81530:	6003      	str	r3, [r0, #0]
	address_t n = strtol(string, &dummy, 10);
   81532:	4628      	mov	r0, r5
   81534:	a901      	add	r1, sp, #4
   81536:	220a      	movs	r2, #10
   81538:	4b0c      	ldr	r3, [pc, #48]	; (8156c <__string_to_addr+0x50>)
   8153a:	4798      	blx	r3
   8153c:	4680      	mov	r8, r0
	if(errno || dummy == string )
   8153e:	47a0      	blx	r4
   81540:	6804      	ldr	r4, [r0, #0]
   81542:	b944      	cbnz	r4, 81556 <__string_to_addr+0x3a>
   81544:	9b01      	ldr	r3, [sp, #4]
   81546:	42ab      	cmp	r3, r5
   81548:	d008      	beq.n	8155c <__string_to_addr+0x40>
		return -1;
	errno = saved_errno;
   8154a:	4b07      	ldr	r3, [pc, #28]	; (81568 <__string_to_addr+0x4c>)
   8154c:	4798      	blx	r3
   8154e:	6007      	str	r7, [r0, #0]
	*addr = n;
   81550:	f8c6 8000 	str.w	r8, [r6]
	return 0;	
   81554:	e004      	b.n	81560 <__string_to_addr+0x44>
	char *dummy;
	int saved_errno = errno;
	errno = 0;
	address_t n = strtol(string, &dummy, 10);
	if(errno || dummy == string )
		return -1;
   81556:	f04f 34ff 	mov.w	r4, #4294967295
   8155a:	e001      	b.n	81560 <__string_to_addr+0x44>
   8155c:	f04f 34ff 	mov.w	r4, #4294967295
	errno = saved_errno;
	*addr = n;
	return 0;	
}
   81560:	4620      	mov	r0, r4
   81562:	b002      	add	sp, #8
   81564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81568:	0008c775 	.word	0x0008c775
   8156c:	0008d029 	.word	0x0008d029

00081570 <base_to_string>:
r_type fname (a1, a2) { \
	if(API && API -> fname )	return (r_type) API-> fname (v1, v2) ;\
	return (r_type) __##fname (v1, v2) ;\
}

__define_conv_func(ssize_t, base_to_string, base_t num, char string[MAX_STR_BASE_T + 1], num, string );
   81570:	b508      	push	{r3, lr}
   81572:	4b05      	ldr	r3, [pc, #20]	; (81588 <base_to_string+0x18>)
   81574:	681b      	ldr	r3, [r3, #0]
   81576:	b11b      	cbz	r3, 81580 <base_to_string+0x10>
   81578:	6a1b      	ldr	r3, [r3, #32]
   8157a:	b10b      	cbz	r3, 81580 <base_to_string+0x10>
   8157c:	4798      	blx	r3
   8157e:	bd08      	pop	{r3, pc}
   81580:	4b02      	ldr	r3, [pc, #8]	; (8158c <base_to_string+0x1c>)
   81582:	4798      	blx	r3
   81584:	bd08      	pop	{r3, pc}
   81586:	bf00      	nop
   81588:	20070240 	.word	0x20070240
   8158c:	000814a5 	.word	0x000814a5

00081590 <string_to_base>:
__define_conv_func(int, string_to_base, char string[MAX_STR_BASE_T + 1], base_t *num, string, num );
   81590:	b508      	push	{r3, lr}
   81592:	4b05      	ldr	r3, [pc, #20]	; (815a8 <string_to_base+0x18>)
   81594:	681b      	ldr	r3, [r3, #0]
   81596:	b11b      	cbz	r3, 815a0 <string_to_base+0x10>
   81598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8159a:	b10b      	cbz	r3, 815a0 <string_to_base+0x10>
   8159c:	4798      	blx	r3
   8159e:	bd08      	pop	{r3, pc}
   815a0:	4b02      	ldr	r3, [pc, #8]	; (815ac <string_to_base+0x1c>)
   815a2:	4798      	blx	r3
   815a4:	bd08      	pop	{r3, pc}
   815a6:	bf00      	nop
   815a8:	20070240 	.word	0x20070240
   815ac:	000814c9 	.word	0x000814c9

000815b0 <string_to_addr>:
__define_conv_func(int, string_to_addr, char string[MAX_STR_ADDR_T + 1], address_t *addr, string, addr );
   815b0:	b508      	push	{r3, lr}
   815b2:	4b05      	ldr	r3, [pc, #20]	; (815c8 <string_to_addr+0x18>)
   815b4:	681b      	ldr	r3, [r3, #0]
   815b6:	b11b      	cbz	r3, 815c0 <string_to_addr+0x10>
   815b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   815ba:	b10b      	cbz	r3, 815c0 <string_to_addr+0x10>
   815bc:	4798      	blx	r3
   815be:	bd08      	pop	{r3, pc}
   815c0:	4b02      	ldr	r3, [pc, #8]	; (815cc <string_to_addr+0x1c>)
   815c2:	4798      	blx	r3
   815c4:	bd08      	pop	{r3, pc}
   815c6:	bf00      	nop
   815c8:	20070240 	.word	0x20070240
   815cc:	0008151d 	.word	0x0008151d

000815d0 <print_bmem>:
#define DUMMY_MEM_SIZE 128
base_t registers[] = {0x1, 0x44, 0x15, 0x16};
base_t memory[DUMMY_MEM_SIZE] = { [0 ... DUMMY_MEM_SIZE-1] = (base_t) 404 };

void print_bmem(char *prefix, char *fmt, void *mem, size_t len, unsigned int line_length)
{
   815d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   815d4:	4688      	mov	r8, r1
   815d6:	4691      	mov	r9, r2
   815d8:	461c      	mov	r4, r3
   815da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	if(prefix)
   815dc:	4601      	mov	r1, r0
   815de:	b110      	cbz	r0, 815e6 <print_bmem+0x16>
		printf("%s", prefix);
   815e0:	480f      	ldr	r0, [pc, #60]	; (81620 <print_bmem+0x50>)
   815e2:	4b10      	ldr	r3, [pc, #64]	; (81624 <print_bmem+0x54>)
   815e4:	4798      	blx	r3
	int i;
	base_t *bytes = (base_t *) mem;
	for(i = 0; i< len; ++i) {
   815e6:	b1b4      	cbz	r4, 81616 <print_bmem+0x46>
   815e8:	46a2      	mov	sl, r4
   815ea:	2500      	movs	r5, #0
   815ec:	462c      	mov	r4, r5
		if( !(i % line_length) && i )
			printf("\n");
		printf(fmt, bytes[i]);
   815ee:	4f0d      	ldr	r7, [pc, #52]	; (81624 <print_bmem+0x54>)
		printf("%s", prefix);
	int i;
	base_t *bytes = (base_t *) mem;
	for(i = 0; i< len; ++i) {
		if( !(i % line_length) && i )
			printf("\n");
   815f0:	f8df b034 	ldr.w	fp, [pc, #52]	; 81628 <print_bmem+0x58>
   815f4:	e007      	b.n	81606 <print_bmem+0x36>
	if(prefix)
		printf("%s", prefix);
	int i;
	base_t *bytes = (base_t *) mem;
	for(i = 0; i< len; ++i) {
		if( !(i % line_length) && i )
   815f6:	fbb4 f3f6 	udiv	r3, r4, r6
   815fa:	fb06 4313 	mls	r3, r6, r3, r4
   815fe:	b913      	cbnz	r3, 81606 <print_bmem+0x36>
   81600:	b10c      	cbz	r4, 81606 <print_bmem+0x36>
			printf("\n");
   81602:	4658      	mov	r0, fp
   81604:	47b8      	blx	r7
		printf(fmt, bytes[i]);
   81606:	4640      	mov	r0, r8
   81608:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
   8160c:	47b8      	blx	r7
{
	if(prefix)
		printf("%s", prefix);
	int i;
	base_t *bytes = (base_t *) mem;
	for(i = 0; i< len; ++i) {
   8160e:	3401      	adds	r4, #1
   81610:	4625      	mov	r5, r4
   81612:	4554      	cmp	r4, sl
   81614:	d1ef      	bne.n	815f6 <print_bmem+0x26>
		if( !(i % line_length) && i )
			printf("\n");
		printf(fmt, bytes[i]);
	}
	printf("\n");
   81616:	4804      	ldr	r0, [pc, #16]	; (81628 <print_bmem+0x58>)
   81618:	4b02      	ldr	r3, [pc, #8]	; (81624 <print_bmem+0x54>)
   8161a:	4798      	blx	r3
   8161c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81620:	00093d84 	.word	0x00093d84
   81624:	0008c839 	.word	0x0008c839
   81628:	000b1000 	.word	0x000b1000

0008162c <dummy_write_memory>:
{	
	if(addr >= 0 && addr < ARR_LEN(registers))
		registers[addr] = value;
}
void dummy_write_memory (address_t addr, base_t *value,  size_t len)
{
   8162c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81630:	b082      	sub	sp, #8
   81632:	4684      	mov	ip, r0
   81634:	460e      	mov	r6, r1
	int mlen = ARR_LEN(memory);
	if(addr >= 0 && addr < mlen) {
   81636:	287f      	cmp	r0, #127	; 0x7f
   81638:	d824      	bhi.n	81684 <dummy_write_memory+0x58>
		int j, min = MIN(len, mlen-addr);
   8163a:	f1c0 0880 	rsb	r8, r0, #128	; 0x80
   8163e:	4590      	cmp	r8, r2
   81640:	bf28      	it	cs
   81642:	4690      	movcs	r8, r2
		for(j = 0; j < min; ++j ) 
   81644:	f1b8 0f00 	cmp.w	r8, #0
   81648:	dd0b      	ble.n	81662 <dummy_write_memory+0x36>
   8164a:	ea4f 0e88 	mov.w	lr, r8, lsl #2
   8164e:	4f0f      	ldr	r7, [pc, #60]	; (8168c <dummy_write_memory+0x60>)
   81650:	eb07 0780 	add.w	r7, r7, r0, lsl #2
   81654:	2400      	movs	r4, #0
			memory[addr + j] = value[j];
   81656:	5935      	ldr	r5, [r6, r4]
   81658:	513d      	str	r5, [r7, r4]
   8165a:	3404      	adds	r4, #4
void dummy_write_memory (address_t addr, base_t *value,  size_t len)
{
	int mlen = ARR_LEN(memory);
	if(addr >= 0 && addr < mlen) {
		int j, min = MIN(len, mlen-addr);
		for(j = 0; j < min; ++j ) 
   8165c:	4574      	cmp	r4, lr
   8165e:	d1fa      	bne.n	81656 <dummy_write_memory+0x2a>
   81660:	e001      	b.n	81666 <dummy_write_memory+0x3a>
   81662:	2300      	movs	r3, #0
   81664:	e000      	b.n	81668 <dummy_write_memory+0x3c>
   81666:	4643      	mov	r3, r8
			memory[addr + j] = value[j];
			
		dprintf("addr=%d,len=%d,min=%d,i=%d\n", addr,len, min, j);
   81668:	9300      	str	r3, [sp, #0]
   8166a:	4809      	ldr	r0, [pc, #36]	; (81690 <dummy_write_memory+0x64>)
   8166c:	4661      	mov	r1, ip
   8166e:	4643      	mov	r3, r8
   81670:	4c08      	ldr	r4, [pc, #32]	; (81694 <dummy_write_memory+0x68>)
   81672:	47a0      	blx	r4
		print_bmem(" write-mem ", "%2d ", value, MIN(len, DUMMY_MEM_SIZE-addr), 40);		
   81674:	2328      	movs	r3, #40	; 0x28
   81676:	9300      	str	r3, [sp, #0]
   81678:	4807      	ldr	r0, [pc, #28]	; (81698 <dummy_write_memory+0x6c>)
   8167a:	4908      	ldr	r1, [pc, #32]	; (8169c <dummy_write_memory+0x70>)
   8167c:	4632      	mov	r2, r6
   8167e:	4643      	mov	r3, r8
   81680:	4c07      	ldr	r4, [pc, #28]	; (816a0 <dummy_write_memory+0x74>)
   81682:	47a0      	blx	r4
	}
	
	
}
   81684:	b002      	add	sp, #8
   81686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8168a:	bf00      	nop
   8168c:	20070030 	.word	0x20070030
   81690:	000b0784 	.word	0x000b0784
   81694:	0008c839 	.word	0x0008c839
   81698:	000b07a0 	.word	0x000b07a0
   8169c:	000b07ac 	.word	0x000b07ac
   816a0:	000815d1 	.word	0x000815d1

000816a4 <dummy_read_memory>:
void dummy_read_memory (address_t addr, base_t *value,  size_t len)
{
   816a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816a8:	b085      	sub	sp, #20
   816aa:	4680      	mov	r8, r0
   816ac:	460e      	mov	r6, r1
   816ae:	4692      	mov	sl, r2
	address_t mlen = ARR_LEN(memory);
	address_t end = addr + len;
   816b0:	eb00 0b02 	add.w	fp, r0, r2
	int j, min = MIN(len, mlen-addr);
   816b4:	f1c0 0980 	rsb	r9, r0, #128	; 0x80
   816b8:	4591      	cmp	r9, r2
   816ba:	bf28      	it	cs
   816bc:	4691      	movcs	r9, r2
	
	if(addr >= 0 && addr < mlen) {
   816be:	287f      	cmp	r0, #127	; 0x7f
   816c0:	d819      	bhi.n	816f6 <dummy_read_memory+0x52>

		for(j = 0; j < min; ++j ) 
   816c2:	f1b9 0f00 	cmp.w	r9, #0
   816c6:	dd0b      	ble.n	816e0 <dummy_read_memory+0x3c>
   816c8:	ea4f 0389 	mov.w	r3, r9, lsl #2
   816cc:	4f11      	ldr	r7, [pc, #68]	; (81714 <dummy_read_memory+0x70>)
   816ce:	eb07 0780 	add.w	r7, r7, r0, lsl #2
   816d2:	2400      	movs	r4, #0
			value[j] = memory[addr + j];		
   816d4:	593d      	ldr	r5, [r7, r4]
   816d6:	5135      	str	r5, [r6, r4]
   816d8:	3404      	adds	r4, #4
	address_t end = addr + len;
	int j, min = MIN(len, mlen-addr);
	
	if(addr >= 0 && addr < mlen) {

		for(j = 0; j < min; ++j ) 
   816da:	429c      	cmp	r4, r3
   816dc:	d1fa      	bne.n	816d4 <dummy_read_memory+0x30>
   816de:	e001      	b.n	816e4 <dummy_read_memory+0x40>
   816e0:	2400      	movs	r4, #0
   816e2:	e000      	b.n	816e6 <dummy_read_memory+0x42>
   816e4:	464c      	mov	r4, r9
			value[j] = memory[addr + j];		
		print_bmem(" read-mem ", "%2d ", value, min, 20);
   816e6:	2314      	movs	r3, #20
   816e8:	9300      	str	r3, [sp, #0]
   816ea:	480b      	ldr	r0, [pc, #44]	; (81718 <dummy_read_memory+0x74>)
   816ec:	490b      	ldr	r1, [pc, #44]	; (8171c <dummy_read_memory+0x78>)
   816ee:	4632      	mov	r2, r6
   816f0:	464b      	mov	r3, r9
   816f2:	4d0b      	ldr	r5, [pc, #44]	; (81720 <dummy_read_memory+0x7c>)
   816f4:	47a8      	blx	r5
	}
	dprintf("addr=%d,len=%d,min=%d,i=%d,mlen=%ld,end=%d \n", addr,len, min, j,(long) mlen,end);	
   816f6:	9400      	str	r4, [sp, #0]
   816f8:	2380      	movs	r3, #128	; 0x80
   816fa:	9301      	str	r3, [sp, #4]
   816fc:	f8cd b008 	str.w	fp, [sp, #8]
   81700:	4808      	ldr	r0, [pc, #32]	; (81724 <dummy_read_memory+0x80>)
   81702:	4641      	mov	r1, r8
   81704:	4652      	mov	r2, sl
   81706:	464b      	mov	r3, r9
   81708:	4c07      	ldr	r4, [pc, #28]	; (81728 <dummy_read_memory+0x84>)
   8170a:	47a0      	blx	r4
}
   8170c:	b005      	add	sp, #20
   8170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81712:	bf00      	nop
   81714:	20070030 	.word	0x20070030
   81718:	000b07b4 	.word	0x000b07b4
   8171c:	000b07ac 	.word	0x000b07ac
   81720:	000815d1 	.word	0x000815d1
   81724:	000b07c0 	.word	0x000b07c0
   81728:	0008c839 	.word	0x0008c839

0008172c <read_register>:
void fname d_args { \
	if(API && API -> stname ) API-> stname c_args ;\
}


__define_api_func( read_register, reg_read, (address_t addr, base_t *value), (addr, value) );
   8172c:	b508      	push	{r3, lr}
   8172e:	4b03      	ldr	r3, [pc, #12]	; (8173c <read_register+0x10>)
   81730:	681b      	ldr	r3, [r3, #0]
   81732:	b113      	cbz	r3, 8173a <read_register+0xe>
   81734:	695b      	ldr	r3, [r3, #20]
   81736:	b103      	cbz	r3, 8173a <read_register+0xe>
   81738:	4798      	blx	r3
   8173a:	bd08      	pop	{r3, pc}
   8173c:	20070240 	.word	0x20070240

00081740 <write_register>:
__define_api_func( write_register,reg_write, (address_t addr, base_t  value), (addr, value) );
   81740:	b508      	push	{r3, lr}
   81742:	4b03      	ldr	r3, [pc, #12]	; (81750 <write_register+0x10>)
   81744:	681b      	ldr	r3, [r3, #0]
   81746:	b113      	cbz	r3, 8174e <write_register+0xe>
   81748:	691b      	ldr	r3, [r3, #16]
   8174a:	b103      	cbz	r3, 8174e <write_register+0xe>
   8174c:	4798      	blx	r3
   8174e:	bd08      	pop	{r3, pc}
   81750:	20070240 	.word	0x20070240

00081754 <write_memory>:

__define_api_func( write_memory,mem_write, (address_t addr, base_t *value,  size_t len), (addr, value, len) );
   81754:	b508      	push	{r3, lr}
   81756:	4b03      	ldr	r3, [pc, #12]	; (81764 <write_memory+0x10>)
   81758:	681b      	ldr	r3, [r3, #0]
   8175a:	b113      	cbz	r3, 81762 <write_memory+0xe>
   8175c:	699b      	ldr	r3, [r3, #24]
   8175e:	b103      	cbz	r3, 81762 <write_memory+0xe>
   81760:	4798      	blx	r3
   81762:	bd08      	pop	{r3, pc}
   81764:	20070240 	.word	0x20070240

00081768 <read_memory>:
__define_api_func( read_memory, mem_read,  (address_t addr, base_t *value,  size_t len), (addr, value, len) );
   81768:	b508      	push	{r3, lr}
   8176a:	4b03      	ldr	r3, [pc, #12]	; (81778 <read_memory+0x10>)
   8176c:	681b      	ldr	r3, [r3, #0]
   8176e:	b113      	cbz	r3, 81776 <read_memory+0xe>
   81770:	69db      	ldr	r3, [r3, #28]
   81772:	b103      	cbz	r3, 81776 <read_memory+0xe>
   81774:	4798      	blx	r3
   81776:	bd08      	pop	{r3, pc}
   81778:	20070240 	.word	0x20070240

0008177c <release_api>:


__define_api_func( release_api,release, (void), () );
   8177c:	b508      	push	{r3, lr}
   8177e:	4b03      	ldr	r3, [pc, #12]	; (8178c <release_api+0x10>)
   81780:	681b      	ldr	r3, [r3, #0]
   81782:	b113      	cbz	r3, 8178a <release_api+0xe>
   81784:	685b      	ldr	r3, [r3, #4]
   81786:	b103      	cbz	r3, 8178a <release_api+0xe>
   81788:	4798      	blx	r3
   8178a:	bd08      	pop	{r3, pc}
   8178c:	20070240 	.word	0x20070240

00081790 <open_api>:
__define_api_func( close_api,close, (void), () );

int open_api(void) 
{
   81790:	b508      	push	{r3, lr}
	if(API && API->open ) return API->open();
   81792:	4b05      	ldr	r3, [pc, #20]	; (817a8 <open_api+0x18>)
   81794:	681b      	ldr	r3, [r3, #0]
   81796:	b11b      	cbz	r3, 817a0 <open_api+0x10>
   81798:	689b      	ldr	r3, [r3, #8]
   8179a:	b11b      	cbz	r3, 817a4 <open_api+0x14>
   8179c:	4798      	blx	r3
   8179e:	bd08      	pop	{r3, pc}
	return 0;
   817a0:	2000      	movs	r0, #0
   817a2:	bd08      	pop	{r3, pc}
   817a4:	2000      	movs	r0, #0
}
   817a6:	bd08      	pop	{r3, pc}
   817a8:	20070240 	.word	0x20070240

000817ac <take_api>:
int take_api(void) 
{
   817ac:	b508      	push	{r3, lr}
	if(API && API->take ) return API->take();
   817ae:	4b05      	ldr	r3, [pc, #20]	; (817c4 <take_api+0x18>)
   817b0:	681b      	ldr	r3, [r3, #0]
   817b2:	b11b      	cbz	r3, 817bc <take_api+0x10>
   817b4:	681b      	ldr	r3, [r3, #0]
   817b6:	b11b      	cbz	r3, 817c0 <take_api+0x14>
   817b8:	4798      	blx	r3
   817ba:	bd08      	pop	{r3, pc}
	return 0;
   817bc:	2000      	movs	r0, #0
   817be:	bd08      	pop	{r3, pc}
   817c0:	2000      	movs	r0, #0
}
   817c2:	bd08      	pop	{r3, pc}
   817c4:	20070240 	.word	0x20070240

000817c8 <cb_json_print_obj>:
#include "low-level-api.h"

#include "http-utils.h"

int cb_json_print_obj (xjson *b, offset oname, int nlen, offset oval, int vlen, void *varg)
{
   817c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   817cc:	b082      	sub	sp, #8
   817ce:	4604      	mov	r4, r0
   817d0:	460f      	mov	r7, r1
   817d2:	4692      	mov	sl, r2
   817d4:	461e      	mov	r6, r3
   817d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	struct parse_cb_arg *arg = (struct parse_cb_arg*) varg;
	int depth = ((int) arg->m->data);
   817d8:	682b      	ldr	r3, [r5, #0]
   817da:	f8d3 800c 	ldr.w	r8, [r3, #12]
	
	printf( "%*s", depth * 8, "");
   817de:	ea4f 09c8 	mov.w	r9, r8, lsl #3
   817e2:	481c      	ldr	r0, [pc, #112]	; (81854 <cb_json_print_obj+0x8c>)
   817e4:	4649      	mov	r1, r9
   817e6:	4a1c      	ldr	r2, [pc, #112]	; (81858 <cb_json_print_obj+0x90>)
   817e8:	4b1c      	ldr	r3, [pc, #112]	; (8185c <cb_json_print_obj+0x94>)
   817ea:	4798      	blx	r3
	print_xjson("name --> ", "\n", b, oname, nlen);
   817ec:	f8cd a000 	str.w	sl, [sp]
   817f0:	481b      	ldr	r0, [pc, #108]	; (81860 <cb_json_print_obj+0x98>)
   817f2:	491c      	ldr	r1, [pc, #112]	; (81864 <cb_json_print_obj+0x9c>)
   817f4:	4622      	mov	r2, r4
   817f6:	463b      	mov	r3, r7
   817f8:	4f1b      	ldr	r7, [pc, #108]	; (81868 <cb_json_print_obj+0xa0>)
   817fa:	47b8      	blx	r7
	
	if(at(b, oval) == '[' || at(b, oval) == '{' ) {
   817fc:	b2b7      	uxth	r7, r6
   817fe:	6820      	ldr	r0, [r4, #0]
   81800:	4639      	mov	r1, r7
   81802:	4b1a      	ldr	r3, [pc, #104]	; (8186c <cb_json_print_obj+0xa4>)
   81804:	4798      	blx	r3
   81806:	285b      	cmp	r0, #91	; 0x5b
   81808:	d005      	beq.n	81816 <cb_json_print_obj+0x4e>
   8180a:	6820      	ldr	r0, [r4, #0]
   8180c:	4639      	mov	r1, r7
   8180e:	4b17      	ldr	r3, [pc, #92]	; (8186c <cb_json_print_obj+0xa4>)
   81810:	4798      	blx	r3
   81812:	287b      	cmp	r0, #123	; 0x7b
   81814:	d10c      	bne.n	81830 <cb_json_print_obj+0x68>
		arg->m->data = (void *)(depth + 1);
   81816:	682b      	ldr	r3, [r5, #0]
   81818:	f108 0201 	add.w	r2, r8, #1
   8181c:	60da      	str	r2, [r3, #12]
		return JSON_decode(b, oval, arg->m->parse_array ,arg->m->parse_object, varg);
   8181e:	682b      	ldr	r3, [r5, #0]
   81820:	685a      	ldr	r2, [r3, #4]
   81822:	689b      	ldr	r3, [r3, #8]
   81824:	9500      	str	r5, [sp, #0]
   81826:	4620      	mov	r0, r4
   81828:	4631      	mov	r1, r6
   8182a:	4c11      	ldr	r4, [pc, #68]	; (81870 <cb_json_print_obj+0xa8>)
   8182c:	47a0      	blx	r4
   8182e:	e00d      	b.n	8184c <cb_json_print_obj+0x84>
	}
	
	printf( "%*s", depth * 8, "");
   81830:	4808      	ldr	r0, [pc, #32]	; (81854 <cb_json_print_obj+0x8c>)
   81832:	4649      	mov	r1, r9
   81834:	4a08      	ldr	r2, [pc, #32]	; (81858 <cb_json_print_obj+0x90>)
   81836:	4b09      	ldr	r3, [pc, #36]	; (8185c <cb_json_print_obj+0x94>)
   81838:	4798      	blx	r3
	print_xjson("value--> ", "\n\n", b, oval, vlen);
   8183a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8183c:	9300      	str	r3, [sp, #0]
   8183e:	480d      	ldr	r0, [pc, #52]	; (81874 <cb_json_print_obj+0xac>)
   81840:	490d      	ldr	r1, [pc, #52]	; (81878 <cb_json_print_obj+0xb0>)
   81842:	4622      	mov	r2, r4
   81844:	4633      	mov	r3, r6
   81846:	4c08      	ldr	r4, [pc, #32]	; (81868 <cb_json_print_obj+0xa0>)
   81848:	47a0      	blx	r4
	
	return 0;
   8184a:	2000      	movs	r0, #0
}
   8184c:	b002      	add	sp, #8
   8184e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81852:	bf00      	nop
   81854:	000b0874 	.word	0x000b0874
   81858:	000b04f0 	.word	0x000b04f0
   8185c:	0008c839 	.word	0x0008c839
   81860:	000b0878 	.word	0x000b0878
   81864:	000b1000 	.word	0x000b1000
   81868:	00080679 	.word	0x00080679
   8186c:	00088451 	.word	0x00088451
   81870:	00080939 	.word	0x00080939
   81874:	000b0884 	.word	0x000b0884
   81878:	000b0890 	.word	0x000b0890

0008187c <cb_json_print_arr>:
int cb_json_print_arr(xjson *b, int index, offset oval, int vlen,  void *varg)
{
   8187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81880:	b083      	sub	sp, #12
   81882:	4604      	mov	r4, r0
   81884:	468b      	mov	fp, r1
   81886:	4617      	mov	r7, r2
   81888:	469a      	mov	sl, r3
   8188a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	struct parse_cb_arg *arg = (struct parse_cb_arg*) varg;
	int depth = ((int) arg->m->data);
   8188c:	682b      	ldr	r3, [r5, #0]
   8188e:	f8d3 800c 	ldr.w	r8, [r3, #12]

	
	printf( "%*s", depth * 8, "");
   81892:	ea4f 09c8 	mov.w	r9, r8, lsl #3
   81896:	4819      	ldr	r0, [pc, #100]	; (818fc <cb_json_print_arr+0x80>)
   81898:	4649      	mov	r1, r9
   8189a:	4a19      	ldr	r2, [pc, #100]	; (81900 <cb_json_print_arr+0x84>)
   8189c:	4e19      	ldr	r6, [pc, #100]	; (81904 <cb_json_print_arr+0x88>)
   8189e:	47b0      	blx	r6

	printf( "index --> %d\n", index);
   818a0:	4819      	ldr	r0, [pc, #100]	; (81908 <cb_json_print_arr+0x8c>)
   818a2:	4659      	mov	r1, fp
   818a4:	47b0      	blx	r6

	if(at(b, oval) == '[' || at(b, oval) == '{' ) {
   818a6:	b2be      	uxth	r6, r7
   818a8:	6820      	ldr	r0, [r4, #0]
   818aa:	4631      	mov	r1, r6
   818ac:	4b17      	ldr	r3, [pc, #92]	; (8190c <cb_json_print_arr+0x90>)
   818ae:	4798      	blx	r3
   818b0:	285b      	cmp	r0, #91	; 0x5b
   818b2:	d005      	beq.n	818c0 <cb_json_print_arr+0x44>
   818b4:	6820      	ldr	r0, [r4, #0]
   818b6:	4631      	mov	r1, r6
   818b8:	4b14      	ldr	r3, [pc, #80]	; (8190c <cb_json_print_arr+0x90>)
   818ba:	4798      	blx	r3
   818bc:	287b      	cmp	r0, #123	; 0x7b
   818be:	d10c      	bne.n	818da <cb_json_print_arr+0x5e>
		arg->m->data = (void *)(depth + 1);
   818c0:	682b      	ldr	r3, [r5, #0]
   818c2:	f108 0201 	add.w	r2, r8, #1
   818c6:	60da      	str	r2, [r3, #12]
		return JSON_decode(b, oval,arg->m->parse_array ,arg->m->parse_object, varg);
   818c8:	682b      	ldr	r3, [r5, #0]
   818ca:	685a      	ldr	r2, [r3, #4]
   818cc:	689b      	ldr	r3, [r3, #8]
   818ce:	9500      	str	r5, [sp, #0]
   818d0:	4620      	mov	r0, r4
   818d2:	4639      	mov	r1, r7
   818d4:	4c0e      	ldr	r4, [pc, #56]	; (81910 <cb_json_print_arr+0x94>)
   818d6:	47a0      	blx	r4
   818d8:	e00d      	b.n	818f6 <cb_json_print_arr+0x7a>
	}
		
	printf( "%*s", depth * 8, "");
   818da:	4808      	ldr	r0, [pc, #32]	; (818fc <cb_json_print_arr+0x80>)
   818dc:	4649      	mov	r1, r9
   818de:	4a08      	ldr	r2, [pc, #32]	; (81900 <cb_json_print_arr+0x84>)
   818e0:	4b08      	ldr	r3, [pc, #32]	; (81904 <cb_json_print_arr+0x88>)
   818e2:	4798      	blx	r3
	print_xjson("value --> ", "\n\n", b, oval, vlen);
   818e4:	f8cd a000 	str.w	sl, [sp]
   818e8:	480a      	ldr	r0, [pc, #40]	; (81914 <cb_json_print_arr+0x98>)
   818ea:	490b      	ldr	r1, [pc, #44]	; (81918 <cb_json_print_arr+0x9c>)
   818ec:	4622      	mov	r2, r4
   818ee:	463b      	mov	r3, r7
   818f0:	4c0a      	ldr	r4, [pc, #40]	; (8191c <cb_json_print_arr+0xa0>)
   818f2:	47a0      	blx	r4
	return 0;
   818f4:	2000      	movs	r0, #0
}
   818f6:	b003      	add	sp, #12
   818f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818fc:	000b0874 	.word	0x000b0874
   81900:	000b04f0 	.word	0x000b04f0
   81904:	0008c839 	.word	0x0008c839
   81908:	000b0894 	.word	0x000b0894
   8190c:	00088451 	.word	0x00088451
   81910:	00080939 	.word	0x00080939
   81914:	000b08a4 	.word	0x000b08a4
   81918:	000b0890 	.word	0x000b0890
   8191c:	00080679 	.word	0x00080679

00081920 <cb_first_parse>:
	return 0;
}

/*-----------------------------------------------------------*/
int cb_first_parse (xjson *b, offset oname, int nlen, offset oval, int vlen, void *varg)
{	
   81920:	b510      	push	{r4, lr}
   81922:	b082      	sub	sp, #8
   81924:	9905      	ldr	r1, [sp, #20]
	struct parse_cb_arg *arg = (struct parse_cb_arg*) varg;
	// int rcmp = pbuf_memcmp((struct pbuf *)b, oname, "\"req\"", 5);  


   	if(JSON_decode(b, oval, arg->m->parse_array ,arg->m->parse_object, arg ) == -1) 
   81926:	680c      	ldr	r4, [r1, #0]
   81928:	6862      	ldr	r2, [r4, #4]
   8192a:	68a4      	ldr	r4, [r4, #8]
   8192c:	9100      	str	r1, [sp, #0]
   8192e:	4619      	mov	r1, r3
   81930:	4623      	mov	r3, r4
   81932:	4c05      	ldr	r4, [pc, #20]	; (81948 <cb_first_parse+0x28>)
   81934:	47a0      	blx	r4
		return -1;				
	return 0;
}
   81936:	f1b0 3fff 	cmp.w	r0, #4294967295
   8193a:	bf14      	ite	ne
   8193c:	2000      	movne	r0, #0
   8193e:	f06f 0000 	mvneq.w	r0, #0
   81942:	b002      	add	sp, #8
   81944:	bd10      	pop	{r4, pc}
   81946:	bf00      	nop
   81948:	00080939 	.word	0x00080939

0008194c <cb_read_mem>:
 */



int cb_read_mem(xjson *b, int index, offset oval, int vlen,  void *varg)
{
   8194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81950:	b08a      	sub	sp, #40	; 0x28
   81952:	4606      	mov	r6, r0
   81954:	4615      	mov	r5, r2
   81956:	9f10      	ldr	r7, [sp, #64]	; 0x40
	char saddr[MAX_STR_ADDR_T + 1];
	address_t addr;
	int i;	
	struct mem_s *mem = &memory_buf;

	switch(index) {
   81958:	b141      	cbz	r1, 8196c <cb_read_mem+0x20>
   8195a:	2901      	cmp	r1, #1
   8195c:	f040 809d 	bne.w	81a9a <cb_read_mem+0x14e>
			mem->addr = addr;

			return 0;
		case 1:

			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81960:	6800      	ldr	r0, [r0, #0]
   81962:	8903      	ldrh	r3, [r0, #8]
   81964:	429a      	cmp	r2, r3
   81966:	f0c0 80d0 	bcc.w	81b0a <cb_read_mem+0x1be>
   8196a:	e05a      	b.n	81a22 <cb_read_mem+0xd6>
	int i;	
	struct mem_s *mem = &memory_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   8196c:	6800      	ldr	r0, [r0, #0]
   8196e:	8903      	ldrh	r3, [r0, #8]
   81970:	429a      	cmp	r2, r3
   81972:	f0c0 80c1 	bcc.w	81af8 <cb_read_mem+0x1ac>
   81976:	e00c      	b.n	81992 <cb_read_mem+0x46>
   81978:	1961      	adds	r1, r4, r5
				saddr[i] = at(b, oval + i);		
   8197a:	b289      	uxth	r1, r1
   8197c:	47c0      	blx	r8
   8197e:	ab05      	add	r3, sp, #20
   81980:	5518      	strb	r0, [r3, r4]
	int i;	
	struct mem_s *mem = &memory_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81982:	3401      	adds	r4, #1
   81984:	2c10      	cmp	r4, #16
   81986:	d004      	beq.n	81992 <cb_read_mem+0x46>
   81988:	6830      	ldr	r0, [r6, #0]
   8198a:	8902      	ldrh	r2, [r0, #8]
   8198c:	1963      	adds	r3, r4, r5
   8198e:	429a      	cmp	r2, r3
   81990:	d8f2      	bhi.n	81978 <cb_read_mem+0x2c>
				saddr[i] = at(b, oval + i);		
			saddr[MAX_STR_ADDR_T] = '\0';
   81992:	2300      	movs	r3, #0
   81994:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	
			if( string_to_addr(saddr, &addr) == -1 ) {		
   81998:	a805      	add	r0, sp, #20
   8199a:	a904      	add	r1, sp, #16
   8199c:	4b61      	ldr	r3, [pc, #388]	; (81b24 <cb_read_mem+0x1d8>)
   8199e:	4798      	blx	r3
   819a0:	4604      	mov	r4, r0
   819a2:	f1b0 3fff 	cmp.w	r0, #4294967295
   819a6:	d12a      	bne.n	819fe <cb_read_mem+0xb2>
				req_err(arg->req,401,"Bad reg address request");
   819a8:	4b5f      	ldr	r3, [pc, #380]	; (81b28 <cb_read_mem+0x1dc>)
   819aa:	681b      	ldr	r3, [r3, #0]
   819ac:	68dd      	ldr	r5, [r3, #12]
   819ae:	4b5f      	ldr	r3, [pc, #380]	; (81b2c <cb_read_mem+0x1e0>)
   819b0:	4798      	blx	r3
   819b2:	6803      	ldr	r3, [r0, #0]
   819b4:	9300      	str	r3, [sp, #0]
   819b6:	f240 1391 	movw	r3, #401	; 0x191
   819ba:	9301      	str	r3, [sp, #4]
   819bc:	4b5c      	ldr	r3, [pc, #368]	; (81b30 <cb_read_mem+0x1e4>)
   819be:	9302      	str	r3, [sp, #8]
   819c0:	4628      	mov	r0, r5
   819c2:	495c      	ldr	r1, [pc, #368]	; (81b34 <cb_read_mem+0x1e8>)
   819c4:	4a5c      	ldr	r2, [pc, #368]	; (81b38 <cb_read_mem+0x1ec>)
   819c6:	23e9      	movs	r3, #233	; 0xe9
   819c8:	4d5c      	ldr	r5, [pc, #368]	; (81b3c <cb_read_mem+0x1f0>)
   819ca:	47a8      	blx	r5
   819cc:	687a      	ldr	r2, [r7, #4]
   819ce:	68d3      	ldr	r3, [r2, #12]
   819d0:	b113      	cbz	r3, 819d8 <cb_read_mem+0x8c>
   819d2:	2bc8      	cmp	r3, #200	; 0xc8
   819d4:	f040 80a2 	bne.w	81b1c <cb_read_mem+0x1d0>
   819d8:	f240 1391 	movw	r3, #401	; 0x191
   819dc:	60d3      	str	r3, [r2, #12]
   819de:	687b      	ldr	r3, [r7, #4]
   819e0:	4a53      	ldr	r2, [pc, #332]	; (81b30 <cb_read_mem+0x1e4>)
   819e2:	629a      	str	r2, [r3, #40]	; 0x28
   819e4:	687b      	ldr	r3, [r7, #4]
   819e6:	22ff      	movs	r2, #255	; 0xff
   819e8:	801a      	strh	r2, [r3, #0]
   819ea:	687b      	ldr	r3, [r7, #4]
   819ec:	4a54      	ldr	r2, [pc, #336]	; (81b40 <cb_read_mem+0x1f4>)
   819ee:	61da      	str	r2, [r3, #28]
   819f0:	687b      	ldr	r3, [r7, #4]
   819f2:	22e9      	movs	r2, #233	; 0xe9
   819f4:	625a      	str	r2, [r3, #36]	; 0x24
   819f6:	687b      	ldr	r3, [r7, #4]
   819f8:	4a4f      	ldr	r2, [pc, #316]	; (81b38 <cb_read_mem+0x1ec>)
   819fa:	621a      	str	r2, [r3, #32]
   819fc:	e08e      	b.n	81b1c <cb_read_mem+0x1d0>
				return -1;
			}
			mem->addr = addr;
   819fe:	9b04      	ldr	r3, [sp, #16]
   81a00:	4a50      	ldr	r2, [pc, #320]	; (81b44 <cb_read_mem+0x1f8>)
   81a02:	6013      	str	r3, [r2, #0]

			return 0;
   81a04:	2400      	movs	r4, #0
   81a06:	e089      	b.n	81b1c <cb_read_mem+0x1d0>
   81a08:	1961      	adds	r1, r4, r5
		case 1:

			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
				saddr[i] = at(b, oval + i);		
   81a0a:	b289      	uxth	r1, r1
   81a0c:	47c0      	blx	r8
   81a0e:	ab05      	add	r3, sp, #20
   81a10:	5518      	strb	r0, [r3, r4]
			mem->addr = addr;

			return 0;
		case 1:

			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81a12:	3401      	adds	r4, #1
   81a14:	2c10      	cmp	r4, #16
   81a16:	d004      	beq.n	81a22 <cb_read_mem+0xd6>
   81a18:	6830      	ldr	r0, [r6, #0]
   81a1a:	8902      	ldrh	r2, [r0, #8]
   81a1c:	1963      	adds	r3, r4, r5
   81a1e:	429a      	cmp	r2, r3
   81a20:	d8f2      	bhi.n	81a08 <cb_read_mem+0xbc>
				saddr[i] = at(b, oval + i);		
			saddr[MAX_STR_ADDR_T] = '\0';
   81a22:	2300      	movs	r3, #0
   81a24:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	
			if( string_to_addr(saddr, &addr) == -1 ) {		
   81a28:	a805      	add	r0, sp, #20
   81a2a:	a904      	add	r1, sp, #16
   81a2c:	4b3d      	ldr	r3, [pc, #244]	; (81b24 <cb_read_mem+0x1d8>)
   81a2e:	4798      	blx	r3
   81a30:	4604      	mov	r4, r0
   81a32:	f1b0 3fff 	cmp.w	r0, #4294967295
   81a36:	d129      	bne.n	81a8c <cb_read_mem+0x140>
				req_err(arg->req,401,"Bad reg address request");
   81a38:	4b3b      	ldr	r3, [pc, #236]	; (81b28 <cb_read_mem+0x1dc>)
   81a3a:	681b      	ldr	r3, [r3, #0]
   81a3c:	68dd      	ldr	r5, [r3, #12]
   81a3e:	4b3b      	ldr	r3, [pc, #236]	; (81b2c <cb_read_mem+0x1e0>)
   81a40:	4798      	blx	r3
   81a42:	6803      	ldr	r3, [r0, #0]
   81a44:	9300      	str	r3, [sp, #0]
   81a46:	f240 1391 	movw	r3, #401	; 0x191
   81a4a:	9301      	str	r3, [sp, #4]
   81a4c:	4b38      	ldr	r3, [pc, #224]	; (81b30 <cb_read_mem+0x1e4>)
   81a4e:	9302      	str	r3, [sp, #8]
   81a50:	4628      	mov	r0, r5
   81a52:	4938      	ldr	r1, [pc, #224]	; (81b34 <cb_read_mem+0x1e8>)
   81a54:	4a38      	ldr	r2, [pc, #224]	; (81b38 <cb_read_mem+0x1ec>)
   81a56:	23f6      	movs	r3, #246	; 0xf6
   81a58:	4d38      	ldr	r5, [pc, #224]	; (81b3c <cb_read_mem+0x1f0>)
   81a5a:	47a8      	blx	r5
   81a5c:	687a      	ldr	r2, [r7, #4]
   81a5e:	68d3      	ldr	r3, [r2, #12]
   81a60:	b10b      	cbz	r3, 81a66 <cb_read_mem+0x11a>
   81a62:	2bc8      	cmp	r3, #200	; 0xc8
   81a64:	d15a      	bne.n	81b1c <cb_read_mem+0x1d0>
   81a66:	f240 1391 	movw	r3, #401	; 0x191
   81a6a:	60d3      	str	r3, [r2, #12]
   81a6c:	687b      	ldr	r3, [r7, #4]
   81a6e:	4a30      	ldr	r2, [pc, #192]	; (81b30 <cb_read_mem+0x1e4>)
   81a70:	629a      	str	r2, [r3, #40]	; 0x28
   81a72:	687b      	ldr	r3, [r7, #4]
   81a74:	22ff      	movs	r2, #255	; 0xff
   81a76:	801a      	strh	r2, [r3, #0]
   81a78:	687b      	ldr	r3, [r7, #4]
   81a7a:	4a31      	ldr	r2, [pc, #196]	; (81b40 <cb_read_mem+0x1f4>)
   81a7c:	61da      	str	r2, [r3, #28]
   81a7e:	687b      	ldr	r3, [r7, #4]
   81a80:	22f6      	movs	r2, #246	; 0xf6
   81a82:	625a      	str	r2, [r3, #36]	; 0x24
   81a84:	687b      	ldr	r3, [r7, #4]
   81a86:	4a2c      	ldr	r2, [pc, #176]	; (81b38 <cb_read_mem+0x1ec>)
   81a88:	621a      	str	r2, [r3, #32]
   81a8a:	e047      	b.n	81b1c <cb_read_mem+0x1d0>
				return -1;
			}
			mem->length = addr;
   81a8c:	4b2d      	ldr	r3, [pc, #180]	; (81b44 <cb_read_mem+0x1f8>)
   81a8e:	9a04      	ldr	r2, [sp, #16]
   81a90:	605a      	str	r2, [r3, #4]
			mem->ok = 1;
   81a92:	2201      	movs	r2, #1
   81a94:	649a      	str	r2, [r3, #72]	; 0x48
			return 0;
   81a96:	2400      	movs	r4, #0
   81a98:	e040      	b.n	81b1c <cb_read_mem+0x1d0>

		default: /* Should not happen */
			req_err(arg->req,401,"Bad reg write request");
   81a9a:	4b23      	ldr	r3, [pc, #140]	; (81b28 <cb_read_mem+0x1dc>)
   81a9c:	681b      	ldr	r3, [r3, #0]
   81a9e:	68dc      	ldr	r4, [r3, #12]
   81aa0:	4b22      	ldr	r3, [pc, #136]	; (81b2c <cb_read_mem+0x1e0>)
   81aa2:	4798      	blx	r3
   81aa4:	6803      	ldr	r3, [r0, #0]
   81aa6:	9300      	str	r3, [sp, #0]
   81aa8:	f240 1391 	movw	r3, #401	; 0x191
   81aac:	9301      	str	r3, [sp, #4]
   81aae:	4b26      	ldr	r3, [pc, #152]	; (81b48 <cb_read_mem+0x1fc>)
   81ab0:	9302      	str	r3, [sp, #8]
   81ab2:	4620      	mov	r0, r4
   81ab4:	491f      	ldr	r1, [pc, #124]	; (81b34 <cb_read_mem+0x1e8>)
   81ab6:	4a20      	ldr	r2, [pc, #128]	; (81b38 <cb_read_mem+0x1ec>)
   81ab8:	23fe      	movs	r3, #254	; 0xfe
   81aba:	4c20      	ldr	r4, [pc, #128]	; (81b3c <cb_read_mem+0x1f0>)
   81abc:	47a0      	blx	r4
   81abe:	687a      	ldr	r2, [r7, #4]
   81ac0:	68d3      	ldr	r3, [r2, #12]
   81ac2:	b10b      	cbz	r3, 81ac8 <cb_read_mem+0x17c>
   81ac4:	2bc8      	cmp	r3, #200	; 0xc8
   81ac6:	d114      	bne.n	81af2 <cb_read_mem+0x1a6>
   81ac8:	f240 1391 	movw	r3, #401	; 0x191
   81acc:	60d3      	str	r3, [r2, #12]
   81ace:	687b      	ldr	r3, [r7, #4]
   81ad0:	4a1d      	ldr	r2, [pc, #116]	; (81b48 <cb_read_mem+0x1fc>)
   81ad2:	629a      	str	r2, [r3, #40]	; 0x28
   81ad4:	687b      	ldr	r3, [r7, #4]
   81ad6:	22ff      	movs	r2, #255	; 0xff
   81ad8:	801a      	strh	r2, [r3, #0]
   81ada:	687b      	ldr	r3, [r7, #4]
   81adc:	4a18      	ldr	r2, [pc, #96]	; (81b40 <cb_read_mem+0x1f4>)
   81ade:	61da      	str	r2, [r3, #28]
   81ae0:	687b      	ldr	r3, [r7, #4]
   81ae2:	22fe      	movs	r2, #254	; 0xfe
   81ae4:	625a      	str	r2, [r3, #36]	; 0x24
   81ae6:	687b      	ldr	r3, [r7, #4]
   81ae8:	4a13      	ldr	r2, [pc, #76]	; (81b38 <cb_read_mem+0x1ec>)
   81aea:	621a      	str	r2, [r3, #32]
			return -1;						
   81aec:	f04f 34ff 	mov.w	r4, #4294967295
   81af0:	e014      	b.n	81b1c <cb_read_mem+0x1d0>
   81af2:	f04f 34ff 	mov.w	r4, #4294967295
   81af6:	e011      	b.n	81b1c <cb_read_mem+0x1d0>
	struct mem_s *mem = &memory_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
				saddr[i] = at(b, oval + i);		
   81af8:	b291      	uxth	r1, r2
   81afa:	4b14      	ldr	r3, [pc, #80]	; (81b4c <cb_read_mem+0x200>)
   81afc:	4798      	blx	r3
   81afe:	f88d 0014 	strb.w	r0, [sp, #20]
	int i;	
	struct mem_s *mem = &memory_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81b02:	2401      	movs	r4, #1
				saddr[i] = at(b, oval + i);		
   81b04:	f8df 8044 	ldr.w	r8, [pc, #68]	; 81b4c <cb_read_mem+0x200>
   81b08:	e73e      	b.n	81988 <cb_read_mem+0x3c>

			return 0;
		case 1:

			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
				saddr[i] = at(b, oval + i);		
   81b0a:	b291      	uxth	r1, r2
   81b0c:	4b0f      	ldr	r3, [pc, #60]	; (81b4c <cb_read_mem+0x200>)
   81b0e:	4798      	blx	r3
   81b10:	f88d 0014 	strb.w	r0, [sp, #20]
			mem->addr = addr;

			return 0;
		case 1:

			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81b14:	2401      	movs	r4, #1
				saddr[i] = at(b, oval + i);		
   81b16:	f8df 8034 	ldr.w	r8, [pc, #52]	; 81b4c <cb_read_mem+0x200>
   81b1a:	e77d      	b.n	81a18 <cb_read_mem+0xcc>
			req_err(arg->req,401,"Bad reg write request");
			return -1;						
	}
	
	
}	
   81b1c:	4620      	mov	r0, r4
   81b1e:	b00a      	add	sp, #40	; 0x28
   81b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81b24:	000815b1 	.word	0x000815b1
   81b28:	200702c8 	.word	0x200702c8
   81b2c:	0008c775 	.word	0x0008c775
   81b30:	000b0928 	.word	0x000b0928
   81b34:	000b08b0 	.word	0x000b08b0
   81b38:	000b0ecc 	.word	0x000b0ecc
   81b3c:	0008c7c7 	.word	0x0008c7c7
   81b40:	000b0940 	.word	0x000b0940
   81b44:	20070ba4 	.word	0x20070ba4
   81b48:	000b099c 	.word	0x000b099c
   81b4c:	00088451 	.word	0x00088451

00081b50 <cb_read_reg>:
/**
 *    [ address ]
 */

int cb_read_reg(xjson *b, int index, offset oval, int vlen,  void *varg)
{
   81b50:	b5f0      	push	{r4, r5, r6, r7, lr}
   81b52:	b08b      	sub	sp, #44	; 0x2c
   81b54:	4606      	mov	r6, r0
   81b56:	4615      	mov	r5, r2
	char saddr[MAX_STR_ADDR_T + 1];
	address_t addr;
	int i;	
	struct reg_s *reg = &register_buf;

	switch(index) {
   81b58:	2900      	cmp	r1, #0
   81b5a:	d15b      	bne.n	81c14 <cb_read_reg+0xc4>
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81b5c:	6800      	ldr	r0, [r0, #0]
   81b5e:	8903      	ldrh	r3, [r0, #8]
   81b60:	429a      	cmp	r2, r3
   81b62:	f0c0 8090 	bcc.w	81c86 <cb_read_reg+0x136>
   81b66:	e00c      	b.n	81b82 <cb_read_reg+0x32>
   81b68:	1961      	adds	r1, r4, r5
				saddr[i] = at(b, oval + i);		
   81b6a:	b289      	uxth	r1, r1
   81b6c:	47b8      	blx	r7
   81b6e:	ab05      	add	r3, sp, #20
   81b70:	5518      	strb	r0, [r3, r4]
	int i;	
	struct reg_s *reg = &register_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81b72:	3401      	adds	r4, #1
   81b74:	2c10      	cmp	r4, #16
   81b76:	d004      	beq.n	81b82 <cb_read_reg+0x32>
   81b78:	6830      	ldr	r0, [r6, #0]
   81b7a:	8902      	ldrh	r2, [r0, #8]
   81b7c:	1963      	adds	r3, r4, r5
   81b7e:	429a      	cmp	r2, r3
   81b80:	d8f2      	bhi.n	81b68 <cb_read_reg+0x18>
				saddr[i] = at(b, oval + i);		
			saddr[MAX_STR_ADDR_T] = '\0';
   81b82:	2300      	movs	r3, #0
   81b84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	
			if( string_to_addr(saddr, &addr) == -1 ) {		
   81b88:	a805      	add	r0, sp, #20
   81b8a:	a904      	add	r1, sp, #16
   81b8c:	4b43      	ldr	r3, [pc, #268]	; (81c9c <cb_read_reg+0x14c>)
   81b8e:	4798      	blx	r3
   81b90:	4604      	mov	r4, r0
   81b92:	f1b0 3fff 	cmp.w	r0, #4294967295
   81b96:	d136      	bne.n	81c06 <cb_read_reg+0xb6>
				req_err(arg->req,401,"Bad reg address request");
   81b98:	4b41      	ldr	r3, [pc, #260]	; (81ca0 <cb_read_reg+0x150>)
   81b9a:	681b      	ldr	r3, [r3, #0]
   81b9c:	68dd      	ldr	r5, [r3, #12]
   81b9e:	4b41      	ldr	r3, [pc, #260]	; (81ca4 <cb_read_reg+0x154>)
   81ba0:	4798      	blx	r3
   81ba2:	6803      	ldr	r3, [r0, #0]
   81ba4:	9300      	str	r3, [sp, #0]
   81ba6:	f240 1391 	movw	r3, #401	; 0x191
   81baa:	9301      	str	r3, [sp, #4]
   81bac:	4b3e      	ldr	r3, [pc, #248]	; (81ca8 <cb_read_reg+0x158>)
   81bae:	9302      	str	r3, [sp, #8]
   81bb0:	4628      	mov	r0, r5
   81bb2:	493e      	ldr	r1, [pc, #248]	; (81cac <cb_read_reg+0x15c>)
   81bb4:	4a3e      	ldr	r2, [pc, #248]	; (81cb0 <cb_read_reg+0x160>)
   81bb6:	234e      	movs	r3, #78	; 0x4e
   81bb8:	4d3e      	ldr	r5, [pc, #248]	; (81cb4 <cb_read_reg+0x164>)
   81bba:	47a8      	blx	r5
   81bbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81bbe:	6853      	ldr	r3, [r2, #4]
   81bc0:	68da      	ldr	r2, [r3, #12]
   81bc2:	b10a      	cbz	r2, 81bc8 <cb_read_reg+0x78>
   81bc4:	2ac8      	cmp	r2, #200	; 0xc8
   81bc6:	d116      	bne.n	81bf6 <cb_read_reg+0xa6>
   81bc8:	f240 1291 	movw	r2, #401	; 0x191
   81bcc:	60da      	str	r2, [r3, #12]
   81bce:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81bd0:	6853      	ldr	r3, [r2, #4]
   81bd2:	4a35      	ldr	r2, [pc, #212]	; (81ca8 <cb_read_reg+0x158>)
   81bd4:	629a      	str	r2, [r3, #40]	; 0x28
   81bd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81bd8:	6853      	ldr	r3, [r2, #4]
   81bda:	22ff      	movs	r2, #255	; 0xff
   81bdc:	801a      	strh	r2, [r3, #0]
   81bde:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81be0:	6853      	ldr	r3, [r2, #4]
   81be2:	4a35      	ldr	r2, [pc, #212]	; (81cb8 <cb_read_reg+0x168>)
   81be4:	61da      	str	r2, [r3, #28]
   81be6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81be8:	6853      	ldr	r3, [r2, #4]
   81bea:	224e      	movs	r2, #78	; 0x4e
   81bec:	625a      	str	r2, [r3, #36]	; 0x24
   81bee:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81bf0:	6853      	ldr	r3, [r2, #4]
   81bf2:	4a2f      	ldr	r2, [pc, #188]	; (81cb0 <cb_read_reg+0x160>)
   81bf4:	621a      	str	r2, [r3, #32]
				memset(reg, 0, sizeof(struct reg_s));
   81bf6:	4931      	ldr	r1, [pc, #196]	; (81cbc <cb_read_reg+0x16c>)
   81bf8:	2200      	movs	r2, #0
   81bfa:	460b      	mov	r3, r1
   81bfc:	f843 2b04 	str.w	r2, [r3], #4
   81c00:	604a      	str	r2, [r1, #4]
   81c02:	605a      	str	r2, [r3, #4]
				return -1;
   81c04:	e047      	b.n	81c96 <cb_read_reg+0x146>
			}
			reg->addr = addr;
   81c06:	4b2d      	ldr	r3, [pc, #180]	; (81cbc <cb_read_reg+0x16c>)
   81c08:	9a04      	ldr	r2, [sp, #16]
   81c0a:	601a      	str	r2, [r3, #0]
			reg->ok = 1;
   81c0c:	2201      	movs	r2, #1
   81c0e:	609a      	str	r2, [r3, #8]
			return 0;	
   81c10:	2400      	movs	r4, #0
   81c12:	e040      	b.n	81c96 <cb_read_reg+0x146>
		default: /* Should not happen */
			req_err(arg->req,401,"Bad reg write request");
   81c14:	4b22      	ldr	r3, [pc, #136]	; (81ca0 <cb_read_reg+0x150>)
   81c16:	681b      	ldr	r3, [r3, #0]
   81c18:	68dc      	ldr	r4, [r3, #12]
   81c1a:	4b22      	ldr	r3, [pc, #136]	; (81ca4 <cb_read_reg+0x154>)
   81c1c:	4798      	blx	r3
   81c1e:	6803      	ldr	r3, [r0, #0]
   81c20:	9300      	str	r3, [sp, #0]
   81c22:	f240 1391 	movw	r3, #401	; 0x191
   81c26:	9301      	str	r3, [sp, #4]
   81c28:	4b25      	ldr	r3, [pc, #148]	; (81cc0 <cb_read_reg+0x170>)
   81c2a:	9302      	str	r3, [sp, #8]
   81c2c:	4620      	mov	r0, r4
   81c2e:	491f      	ldr	r1, [pc, #124]	; (81cac <cb_read_reg+0x15c>)
   81c30:	4a1f      	ldr	r2, [pc, #124]	; (81cb0 <cb_read_reg+0x160>)
   81c32:	2356      	movs	r3, #86	; 0x56
   81c34:	4c1f      	ldr	r4, [pc, #124]	; (81cb4 <cb_read_reg+0x164>)
   81c36:	47a0      	blx	r4
   81c38:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81c3a:	6853      	ldr	r3, [r2, #4]
   81c3c:	68da      	ldr	r2, [r3, #12]
   81c3e:	b10a      	cbz	r2, 81c44 <cb_read_reg+0xf4>
   81c40:	2ac8      	cmp	r2, #200	; 0xc8
   81c42:	d116      	bne.n	81c72 <cb_read_reg+0x122>
   81c44:	f240 1291 	movw	r2, #401	; 0x191
   81c48:	60da      	str	r2, [r3, #12]
   81c4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81c4c:	6853      	ldr	r3, [r2, #4]
   81c4e:	4a1c      	ldr	r2, [pc, #112]	; (81cc0 <cb_read_reg+0x170>)
   81c50:	629a      	str	r2, [r3, #40]	; 0x28
   81c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81c54:	6853      	ldr	r3, [r2, #4]
   81c56:	22ff      	movs	r2, #255	; 0xff
   81c58:	801a      	strh	r2, [r3, #0]
   81c5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81c5c:	6853      	ldr	r3, [r2, #4]
   81c5e:	4a16      	ldr	r2, [pc, #88]	; (81cb8 <cb_read_reg+0x168>)
   81c60:	61da      	str	r2, [r3, #28]
   81c62:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81c64:	6853      	ldr	r3, [r2, #4]
   81c66:	2256      	movs	r2, #86	; 0x56
   81c68:	625a      	str	r2, [r3, #36]	; 0x24
   81c6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   81c6c:	6853      	ldr	r3, [r2, #4]
   81c6e:	4a10      	ldr	r2, [pc, #64]	; (81cb0 <cb_read_reg+0x160>)
   81c70:	621a      	str	r2, [r3, #32]
			memset(reg, 0, sizeof(struct reg_s));
   81c72:	4912      	ldr	r1, [pc, #72]	; (81cbc <cb_read_reg+0x16c>)
   81c74:	2200      	movs	r2, #0
   81c76:	460b      	mov	r3, r1
   81c78:	f843 2b04 	str.w	r2, [r3], #4
   81c7c:	604a      	str	r2, [r1, #4]
   81c7e:	605a      	str	r2, [r3, #4]
			return -1;						
   81c80:	f04f 34ff 	mov.w	r4, #4294967295
   81c84:	e007      	b.n	81c96 <cb_read_reg+0x146>
	struct reg_s *reg = &register_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
				saddr[i] = at(b, oval + i);		
   81c86:	b291      	uxth	r1, r2
   81c88:	4b0e      	ldr	r3, [pc, #56]	; (81cc4 <cb_read_reg+0x174>)
   81c8a:	4798      	blx	r3
   81c8c:	f88d 0014 	strb.w	r0, [sp, #20]
	int i;	
	struct reg_s *reg = &register_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81c90:	2401      	movs	r4, #1
				saddr[i] = at(b, oval + i);		
   81c92:	4f0c      	ldr	r7, [pc, #48]	; (81cc4 <cb_read_reg+0x174>)
   81c94:	e770      	b.n	81b78 <cb_read_reg+0x28>
			memset(reg, 0, sizeof(struct reg_s));
			return -1;						
	}
	
	
}
   81c96:	4620      	mov	r0, r4
   81c98:	b00b      	add	sp, #44	; 0x2c
   81c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81c9c:	000815b1 	.word	0x000815b1
   81ca0:	200702c8 	.word	0x200702c8
   81ca4:	0008c775 	.word	0x0008c775
   81ca8:	000b0928 	.word	0x000b0928
   81cac:	000b08b0 	.word	0x000b08b0
   81cb0:	000b0ec0 	.word	0x000b0ec0
   81cb4:	0008c7c7 	.word	0x0008c7c7
   81cb8:	000b0940 	.word	0x000b0940
   81cbc:	20070bf0 	.word	0x20070bf0
   81cc0:	000b099c 	.word	0x000b099c
   81cc4:	00088451 	.word	0x00088451

00081cc8 <execute_read_reg>:
int execute_read_reg(struct post_method *self, struct http_request *req)
{
   81cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81ccc:	b08b      	sub	sp, #44	; 0x2c
   81cce:	460f      	mov	r7, r1
	char svalue[MAX_STR_BASE_T + 1];
	base_t value;
	struct reg_s *reg = &register_buf;
	ssize_t len;
	
	if(!reg->ok) {
   81cd0:	4b58      	ldr	r3, [pc, #352]	; (81e34 <execute_read_reg+0x16c>)
   81cd2:	689b      	ldr	r3, [r3, #8]
   81cd4:	2b00      	cmp	r3, #0
   81cd6:	d12c      	bne.n	81d32 <execute_read_reg+0x6a>
		req_err(req,401,"Bad reg write request");
   81cd8:	4b57      	ldr	r3, [pc, #348]	; (81e38 <execute_read_reg+0x170>)
   81cda:	681b      	ldr	r3, [r3, #0]
   81cdc:	68dc      	ldr	r4, [r3, #12]
   81cde:	4b57      	ldr	r3, [pc, #348]	; (81e3c <execute_read_reg+0x174>)
   81ce0:	4798      	blx	r3
   81ce2:	6803      	ldr	r3, [r0, #0]
   81ce4:	9300      	str	r3, [sp, #0]
   81ce6:	f240 1391 	movw	r3, #401	; 0x191
   81cea:	9301      	str	r3, [sp, #4]
   81cec:	4b54      	ldr	r3, [pc, #336]	; (81e40 <execute_read_reg+0x178>)
   81cee:	9302      	str	r3, [sp, #8]
   81cf0:	4620      	mov	r0, r4
   81cf2:	4954      	ldr	r1, [pc, #336]	; (81e44 <execute_read_reg+0x17c>)
   81cf4:	4a54      	ldr	r2, [pc, #336]	; (81e48 <execute_read_reg+0x180>)
   81cf6:	2365      	movs	r3, #101	; 0x65
   81cf8:	4c54      	ldr	r4, [pc, #336]	; (81e4c <execute_read_reg+0x184>)
   81cfa:	47a0      	blx	r4
   81cfc:	68fb      	ldr	r3, [r7, #12]
   81cfe:	b10b      	cbz	r3, 81d04 <execute_read_reg+0x3c>
   81d00:	2bc8      	cmp	r3, #200	; 0xc8
   81d02:	d10c      	bne.n	81d1e <execute_read_reg+0x56>
   81d04:	f240 1391 	movw	r3, #401	; 0x191
   81d08:	60fb      	str	r3, [r7, #12]
   81d0a:	4b4d      	ldr	r3, [pc, #308]	; (81e40 <execute_read_reg+0x178>)
   81d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   81d0e:	23ff      	movs	r3, #255	; 0xff
   81d10:	803b      	strh	r3, [r7, #0]
   81d12:	4b4f      	ldr	r3, [pc, #316]	; (81e50 <execute_read_reg+0x188>)
   81d14:	61fb      	str	r3, [r7, #28]
   81d16:	2365      	movs	r3, #101	; 0x65
   81d18:	627b      	str	r3, [r7, #36]	; 0x24
   81d1a:	4b4b      	ldr	r3, [pc, #300]	; (81e48 <execute_read_reg+0x180>)
   81d1c:	623b      	str	r3, [r7, #32]
		memset(reg, 0, sizeof(struct reg_s));
   81d1e:	4945      	ldr	r1, [pc, #276]	; (81e34 <execute_read_reg+0x16c>)
   81d20:	2200      	movs	r2, #0
   81d22:	460b      	mov	r3, r1
   81d24:	f843 2b04 	str.w	r2, [r3], #4
   81d28:	604a      	str	r2, [r1, #4]
   81d2a:	605a      	str	r2, [r3, #4]
		return -1;
   81d2c:	f04f 33ff 	mov.w	r3, #4294967295
   81d30:	e07c      	b.n	81e2c <execute_read_reg+0x164>
	}
	
	value = (base_t) 0;
   81d32:	2400      	movs	r4, #0
   81d34:	ae0a      	add	r6, sp, #40	; 0x28
   81d36:	f846 4d18 	str.w	r4, [r6, #-24]!
	dbg("here");
   81d3a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 81e48 <execute_read_reg+0x180>
   81d3e:	4845      	ldr	r0, [pc, #276]	; (81e54 <execute_read_reg+0x18c>)
   81d40:	4649      	mov	r1, r9
   81d42:	226b      	movs	r2, #107	; 0x6b
   81d44:	f8df 8128 	ldr.w	r8, [pc, #296]	; 81e70 <execute_read_reg+0x1a8>
   81d48:	47c0      	blx	r8
	read_register(reg->addr, &value);
   81d4a:	4d3a      	ldr	r5, [pc, #232]	; (81e34 <execute_read_reg+0x16c>)
   81d4c:	6828      	ldr	r0, [r5, #0]
   81d4e:	4631      	mov	r1, r6
   81d50:	4b41      	ldr	r3, [pc, #260]	; (81e58 <execute_read_reg+0x190>)
   81d52:	4798      	blx	r3
	dbg("here2");
   81d54:	4841      	ldr	r0, [pc, #260]	; (81e5c <execute_read_reg+0x194>)
   81d56:	4649      	mov	r1, r9
   81d58:	226d      	movs	r2, #109	; 0x6d
   81d5a:	47c0      	blx	r8
	memset(reg, 0, sizeof(struct reg_s));
   81d5c:	462b      	mov	r3, r5
   81d5e:	f843 4b04 	str.w	r4, [r3], #4
   81d62:	606c      	str	r4, [r5, #4]
   81d64:	605c      	str	r4, [r3, #4]
	
	len = base_to_string(value, svalue);
   81d66:	9804      	ldr	r0, [sp, #16]
   81d68:	a905      	add	r1, sp, #20
   81d6a:	4b3d      	ldr	r3, [pc, #244]	; (81e60 <execute_read_reg+0x198>)
   81d6c:	4798      	blx	r3
   81d6e:	4602      	mov	r2, r0
	if( len == -1 ) {		
   81d70:	f1b0 3fff 	cmp.w	r0, #4294967295
   81d74:	d125      	bne.n	81dc2 <execute_read_reg+0xfa>
		req_internal(req,"Bad reg address request");
   81d76:	4b30      	ldr	r3, [pc, #192]	; (81e38 <execute_read_reg+0x170>)
   81d78:	681b      	ldr	r3, [r3, #0]
   81d7a:	68dc      	ldr	r4, [r3, #12]
   81d7c:	4b2f      	ldr	r3, [pc, #188]	; (81e3c <execute_read_reg+0x174>)
   81d7e:	4798      	blx	r3
   81d80:	6803      	ldr	r3, [r0, #0]
   81d82:	9300      	str	r3, [sp, #0]
   81d84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   81d88:	9301      	str	r3, [sp, #4]
   81d8a:	4b36      	ldr	r3, [pc, #216]	; (81e64 <execute_read_reg+0x19c>)
   81d8c:	9302      	str	r3, [sp, #8]
   81d8e:	4620      	mov	r0, r4
   81d90:	492c      	ldr	r1, [pc, #176]	; (81e44 <execute_read_reg+0x17c>)
   81d92:	464a      	mov	r2, r9
   81d94:	2372      	movs	r3, #114	; 0x72
   81d96:	4c2d      	ldr	r4, [pc, #180]	; (81e4c <execute_read_reg+0x184>)
   81d98:	47a0      	blx	r4
   81d9a:	68fb      	ldr	r3, [r7, #12]
   81d9c:	b10b      	cbz	r3, 81da2 <execute_read_reg+0xda>
   81d9e:	2bc8      	cmp	r3, #200	; 0xc8
   81da0:	d13f      	bne.n	81e22 <execute_read_reg+0x15a>
   81da2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   81da6:	60fb      	str	r3, [r7, #12]
   81da8:	4b2e      	ldr	r3, [pc, #184]	; (81e64 <execute_read_reg+0x19c>)
   81daa:	62bb      	str	r3, [r7, #40]	; 0x28
   81dac:	23ff      	movs	r3, #255	; 0xff
   81dae:	803b      	strh	r3, [r7, #0]
   81db0:	4b27      	ldr	r3, [pc, #156]	; (81e50 <execute_read_reg+0x188>)
   81db2:	61fb      	str	r3, [r7, #28]
   81db4:	2372      	movs	r3, #114	; 0x72
   81db6:	627b      	str	r3, [r7, #36]	; 0x24
   81db8:	4b23      	ldr	r3, [pc, #140]	; (81e48 <execute_read_reg+0x180>)
   81dba:	623b      	str	r3, [r7, #32]
		return -1;
   81dbc:	f04f 33ff 	mov.w	r3, #4294967295
   81dc0:	e034      	b.n	81e2c <execute_read_reg+0x164>
	}
	svalue[MAX_STR_BASE_T] = '\0';
   81dc2:	2300      	movs	r3, #0
   81dc4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	

	if(reply_request(req, svalue, len)) {
   81dc8:	4638      	mov	r0, r7
   81dca:	a905      	add	r1, sp, #20
   81dcc:	4b26      	ldr	r3, [pc, #152]	; (81e68 <execute_read_reg+0x1a0>)
   81dce:	4798      	blx	r3
   81dd0:	4603      	mov	r3, r0
   81dd2:	2800      	cmp	r0, #0
   81dd4:	d02a      	beq.n	81e2c <execute_read_reg+0x164>
		req_internal(req,"read_request_body()");
   81dd6:	4b18      	ldr	r3, [pc, #96]	; (81e38 <execute_read_reg+0x170>)
   81dd8:	681b      	ldr	r3, [r3, #0]
   81dda:	68dc      	ldr	r4, [r3, #12]
   81ddc:	4b17      	ldr	r3, [pc, #92]	; (81e3c <execute_read_reg+0x174>)
   81dde:	4798      	blx	r3
   81de0:	6803      	ldr	r3, [r0, #0]
   81de2:	9300      	str	r3, [sp, #0]
   81de4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   81de8:	9301      	str	r3, [sp, #4]
   81dea:	4b20      	ldr	r3, [pc, #128]	; (81e6c <execute_read_reg+0x1a4>)
   81dec:	9302      	str	r3, [sp, #8]
   81dee:	4620      	mov	r0, r4
   81df0:	4914      	ldr	r1, [pc, #80]	; (81e44 <execute_read_reg+0x17c>)
   81df2:	4a15      	ldr	r2, [pc, #84]	; (81e48 <execute_read_reg+0x180>)
   81df4:	2379      	movs	r3, #121	; 0x79
   81df6:	4c15      	ldr	r4, [pc, #84]	; (81e4c <execute_read_reg+0x184>)
   81df8:	47a0      	blx	r4
   81dfa:	68fb      	ldr	r3, [r7, #12]
   81dfc:	b10b      	cbz	r3, 81e02 <execute_read_reg+0x13a>
   81dfe:	2bc8      	cmp	r3, #200	; 0xc8
   81e00:	d112      	bne.n	81e28 <execute_read_reg+0x160>
   81e02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   81e06:	60fb      	str	r3, [r7, #12]
   81e08:	4b18      	ldr	r3, [pc, #96]	; (81e6c <execute_read_reg+0x1a4>)
   81e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   81e0c:	23ff      	movs	r3, #255	; 0xff
   81e0e:	803b      	strh	r3, [r7, #0]
   81e10:	4b0f      	ldr	r3, [pc, #60]	; (81e50 <execute_read_reg+0x188>)
   81e12:	61fb      	str	r3, [r7, #28]
   81e14:	2379      	movs	r3, #121	; 0x79
   81e16:	627b      	str	r3, [r7, #36]	; 0x24
   81e18:	4b0b      	ldr	r3, [pc, #44]	; (81e48 <execute_read_reg+0x180>)
   81e1a:	623b      	str	r3, [r7, #32]
		return -1;		
   81e1c:	f04f 33ff 	mov.w	r3, #4294967295
   81e20:	e004      	b.n	81e2c <execute_read_reg+0x164>
	memset(reg, 0, sizeof(struct reg_s));
	
	len = base_to_string(value, svalue);
	if( len == -1 ) {		
		req_internal(req,"Bad reg address request");
		return -1;
   81e22:	f04f 33ff 	mov.w	r3, #4294967295
   81e26:	e001      	b.n	81e2c <execute_read_reg+0x164>
	svalue[MAX_STR_BASE_T] = '\0';
	

	if(reply_request(req, svalue, len)) {
		req_internal(req,"read_request_body()");
		return -1;		
   81e28:	f04f 33ff 	mov.w	r3, #4294967295
	}

	return 0;
}
   81e2c:	4618      	mov	r0, r3
   81e2e:	b00b      	add	sp, #44	; 0x2c
   81e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81e34:	20070bf0 	.word	0x20070bf0
   81e38:	200702c8 	.word	0x200702c8
   81e3c:	0008c775 	.word	0x0008c775
   81e40:	000b099c 	.word	0x000b099c
   81e44:	000b08b0 	.word	0x000b08b0
   81e48:	000b0810 	.word	0x000b0810
   81e4c:	0008c7c7 	.word	0x0008c7c7
   81e50:	000b0940 	.word	0x000b0940
   81e54:	000b09b4 	.word	0x000b09b4
   81e58:	0008172d 	.word	0x0008172d
   81e5c:	000b0a20 	.word	0x000b0a20
   81e60:	00081571 	.word	0x00081571
   81e64:	000b0928 	.word	0x000b0928
   81e68:	00080aa9 	.word	0x00080aa9
   81e6c:	000b062c 	.word	0x000b062c
   81e70:	0008c839 	.word	0x0008c839

00081e74 <cb_write_reg>:
 *    [ address, value ]
 */


int cb_write_reg(xjson *b, int index, offset oval, int vlen,  void *varg)
{
   81e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e78:	b090      	sub	sp, #64	; 0x40
   81e7a:	4606      	mov	r6, r0
   81e7c:	460c      	mov	r4, r1
   81e7e:	4615      	mov	r5, r2
   81e80:	9f16      	ldr	r7, [sp, #88]	; 0x58
	char saddr[MAX_STR_ADDR_T + 1], svalue[MAX_STR_BASE_T + 1];
	address_t addr;
	base_t value;
	int i;	
	struct reg_s *reg = &register_buf;
	dbg("Here;");
   81e82:	487e      	ldr	r0, [pc, #504]	; (8207c <cb_write_reg+0x208>)
   81e84:	497e      	ldr	r1, [pc, #504]	; (82080 <cb_write_reg+0x20c>)
   81e86:	228d      	movs	r2, #141	; 0x8d
   81e88:	4b7e      	ldr	r3, [pc, #504]	; (82084 <cb_write_reg+0x210>)
   81e8a:	4798      	blx	r3
	switch(index) {
   81e8c:	b144      	cbz	r4, 81ea0 <cb_write_reg+0x2c>
   81e8e:	2c01      	cmp	r4, #1
   81e90:	f040 80aa 	bne.w	81fe8 <cb_write_reg+0x174>
				return -1;
			}
			reg->addr = addr;
			return 0;
		case 1: /* Value */
			for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval); ++i)
   81e94:	6830      	ldr	r0, [r6, #0]
   81e96:	8903      	ldrh	r3, [r0, #8]
   81e98:	429d      	cmp	r5, r3
   81e9a:	f0c0 80e1 	bcc.w	82060 <cb_write_reg+0x1ec>
   81e9e:	e060      	b.n	81f62 <cb_write_reg+0xee>
	int i;	
	struct reg_s *reg = &register_buf;
	dbg("Here;");
	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81ea0:	6830      	ldr	r0, [r6, #0]
   81ea2:	8903      	ldrh	r3, [r0, #8]
   81ea4:	429d      	cmp	r5, r3
   81ea6:	f0c0 80d2 	bcc.w	8204e <cb_write_reg+0x1da>
   81eaa:	e00c      	b.n	81ec6 <cb_write_reg+0x52>
   81eac:	1961      	adds	r1, r4, r5
				saddr[i] = at(b, oval + i);		
   81eae:	b289      	uxth	r1, r1
   81eb0:	47c0      	blx	r8
   81eb2:	ab0b      	add	r3, sp, #44	; 0x2c
   81eb4:	5518      	strb	r0, [r3, r4]
	int i;	
	struct reg_s *reg = &register_buf;
	dbg("Here;");
	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   81eb6:	3401      	adds	r4, #1
   81eb8:	2c10      	cmp	r4, #16
   81eba:	d004      	beq.n	81ec6 <cb_write_reg+0x52>
   81ebc:	6830      	ldr	r0, [r6, #0]
   81ebe:	8902      	ldrh	r2, [r0, #8]
   81ec0:	1963      	adds	r3, r4, r5
   81ec2:	429a      	cmp	r2, r3
   81ec4:	d8f2      	bhi.n	81eac <cb_write_reg+0x38>
				saddr[i] = at(b, oval + i);		
			saddr[MAX_STR_ADDR_T] = '\0';
   81ec6:	2300      	movs	r3, #0
   81ec8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	
			if( string_to_addr(saddr, &addr) == -1 ) {		
   81ecc:	a80b      	add	r0, sp, #44	; 0x2c
   81ece:	a905      	add	r1, sp, #20
   81ed0:	4b6d      	ldr	r3, [pc, #436]	; (82088 <cb_write_reg+0x214>)
   81ed2:	4798      	blx	r3
   81ed4:	4604      	mov	r4, r0
   81ed6:	f1b0 3fff 	cmp.w	r0, #4294967295
   81eda:	d130      	bne.n	81f3e <cb_write_reg+0xca>
				req_err(arg->req,401,"Bad reg address request");
   81edc:	4b6b      	ldr	r3, [pc, #428]	; (8208c <cb_write_reg+0x218>)
   81ede:	681b      	ldr	r3, [r3, #0]
   81ee0:	68dd      	ldr	r5, [r3, #12]
   81ee2:	4b6b      	ldr	r3, [pc, #428]	; (82090 <cb_write_reg+0x21c>)
   81ee4:	4798      	blx	r3
   81ee6:	6803      	ldr	r3, [r0, #0]
   81ee8:	9300      	str	r3, [sp, #0]
   81eea:	f240 1391 	movw	r3, #401	; 0x191
   81eee:	9301      	str	r3, [sp, #4]
   81ef0:	4b68      	ldr	r3, [pc, #416]	; (82094 <cb_write_reg+0x220>)
   81ef2:	9302      	str	r3, [sp, #8]
   81ef4:	4628      	mov	r0, r5
   81ef6:	4968      	ldr	r1, [pc, #416]	; (82098 <cb_write_reg+0x224>)
   81ef8:	4a61      	ldr	r2, [pc, #388]	; (82080 <cb_write_reg+0x20c>)
   81efa:	2395      	movs	r3, #149	; 0x95
   81efc:	4d67      	ldr	r5, [pc, #412]	; (8209c <cb_write_reg+0x228>)
   81efe:	47a8      	blx	r5
   81f00:	687b      	ldr	r3, [r7, #4]
   81f02:	68da      	ldr	r2, [r3, #12]
   81f04:	b10a      	cbz	r2, 81f0a <cb_write_reg+0x96>
   81f06:	2ac8      	cmp	r2, #200	; 0xc8
   81f08:	d111      	bne.n	81f2e <cb_write_reg+0xba>
   81f0a:	f240 1291 	movw	r2, #401	; 0x191
   81f0e:	60da      	str	r2, [r3, #12]
   81f10:	687b      	ldr	r3, [r7, #4]
   81f12:	4a60      	ldr	r2, [pc, #384]	; (82094 <cb_write_reg+0x220>)
   81f14:	629a      	str	r2, [r3, #40]	; 0x28
   81f16:	687b      	ldr	r3, [r7, #4]
   81f18:	22ff      	movs	r2, #255	; 0xff
   81f1a:	801a      	strh	r2, [r3, #0]
   81f1c:	687b      	ldr	r3, [r7, #4]
   81f1e:	4a60      	ldr	r2, [pc, #384]	; (820a0 <cb_write_reg+0x22c>)
   81f20:	61da      	str	r2, [r3, #28]
   81f22:	687b      	ldr	r3, [r7, #4]
   81f24:	2295      	movs	r2, #149	; 0x95
   81f26:	625a      	str	r2, [r3, #36]	; 0x24
   81f28:	687b      	ldr	r3, [r7, #4]
   81f2a:	4a55      	ldr	r2, [pc, #340]	; (82080 <cb_write_reg+0x20c>)
   81f2c:	621a      	str	r2, [r3, #32]
				memset(reg, 0, sizeof(struct reg_s));
   81f2e:	495d      	ldr	r1, [pc, #372]	; (820a4 <cb_write_reg+0x230>)
   81f30:	2200      	movs	r2, #0
   81f32:	460b      	mov	r3, r1
   81f34:	f843 2b04 	str.w	r2, [r3], #4
   81f38:	604a      	str	r2, [r1, #4]
   81f3a:	605a      	str	r2, [r3, #4]
				return -1;
   81f3c:	e099      	b.n	82072 <cb_write_reg+0x1fe>
			}
			reg->addr = addr;
   81f3e:	9b05      	ldr	r3, [sp, #20]
   81f40:	4a58      	ldr	r2, [pc, #352]	; (820a4 <cb_write_reg+0x230>)
   81f42:	6013      	str	r3, [r2, #0]
			return 0;
   81f44:	2400      	movs	r4, #0
   81f46:	e094      	b.n	82072 <cb_write_reg+0x1fe>
   81f48:	1961      	adds	r1, r4, r5
		case 1: /* Value */
			for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval); ++i)
				svalue[i] = at(b, oval + i);		
   81f4a:	b289      	uxth	r1, r1
   81f4c:	47c0      	blx	r8
   81f4e:	ab06      	add	r3, sp, #24
   81f50:	5518      	strb	r0, [r3, r4]
				return -1;
			}
			reg->addr = addr;
			return 0;
		case 1: /* Value */
			for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval); ++i)
   81f52:	3401      	adds	r4, #1
   81f54:	2c10      	cmp	r4, #16
   81f56:	d004      	beq.n	81f62 <cb_write_reg+0xee>
   81f58:	6830      	ldr	r0, [r6, #0]
   81f5a:	8902      	ldrh	r2, [r0, #8]
   81f5c:	1963      	adds	r3, r4, r5
   81f5e:	429a      	cmp	r2, r3
   81f60:	d8f2      	bhi.n	81f48 <cb_write_reg+0xd4>
				svalue[i] = at(b, oval + i);		
			svalue[MAX_STR_BASE_T] = '\0';
   81f62:	2300      	movs	r3, #0
   81f64:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			if( string_to_base(svalue, &value) == -1 ) {		
   81f68:	a806      	add	r0, sp, #24
   81f6a:	a904      	add	r1, sp, #16
   81f6c:	4b4e      	ldr	r3, [pc, #312]	; (820a8 <cb_write_reg+0x234>)
   81f6e:	4798      	blx	r3
   81f70:	4604      	mov	r4, r0
   81f72:	f1b0 3fff 	cmp.w	r0, #4294967295
   81f76:	d130      	bne.n	81fda <cb_write_reg+0x166>
				req_err(arg->req,401,"Bad reg address request");
   81f78:	4b44      	ldr	r3, [pc, #272]	; (8208c <cb_write_reg+0x218>)
   81f7a:	681b      	ldr	r3, [r3, #0]
   81f7c:	68dd      	ldr	r5, [r3, #12]
   81f7e:	4b44      	ldr	r3, [pc, #272]	; (82090 <cb_write_reg+0x21c>)
   81f80:	4798      	blx	r3
   81f82:	6803      	ldr	r3, [r0, #0]
   81f84:	9300      	str	r3, [sp, #0]
   81f86:	f240 1391 	movw	r3, #401	; 0x191
   81f8a:	9301      	str	r3, [sp, #4]
   81f8c:	4b41      	ldr	r3, [pc, #260]	; (82094 <cb_write_reg+0x220>)
   81f8e:	9302      	str	r3, [sp, #8]
   81f90:	4628      	mov	r0, r5
   81f92:	4941      	ldr	r1, [pc, #260]	; (82098 <cb_write_reg+0x224>)
   81f94:	4a3a      	ldr	r2, [pc, #232]	; (82080 <cb_write_reg+0x20c>)
   81f96:	23a0      	movs	r3, #160	; 0xa0
   81f98:	4d40      	ldr	r5, [pc, #256]	; (8209c <cb_write_reg+0x228>)
   81f9a:	47a8      	blx	r5
   81f9c:	687b      	ldr	r3, [r7, #4]
   81f9e:	68da      	ldr	r2, [r3, #12]
   81fa0:	b10a      	cbz	r2, 81fa6 <cb_write_reg+0x132>
   81fa2:	2ac8      	cmp	r2, #200	; 0xc8
   81fa4:	d111      	bne.n	81fca <cb_write_reg+0x156>
   81fa6:	f240 1291 	movw	r2, #401	; 0x191
   81faa:	60da      	str	r2, [r3, #12]
   81fac:	687b      	ldr	r3, [r7, #4]
   81fae:	4a39      	ldr	r2, [pc, #228]	; (82094 <cb_write_reg+0x220>)
   81fb0:	629a      	str	r2, [r3, #40]	; 0x28
   81fb2:	687b      	ldr	r3, [r7, #4]
   81fb4:	22ff      	movs	r2, #255	; 0xff
   81fb6:	801a      	strh	r2, [r3, #0]
   81fb8:	687b      	ldr	r3, [r7, #4]
   81fba:	4a39      	ldr	r2, [pc, #228]	; (820a0 <cb_write_reg+0x22c>)
   81fbc:	61da      	str	r2, [r3, #28]
   81fbe:	687b      	ldr	r3, [r7, #4]
   81fc0:	22a0      	movs	r2, #160	; 0xa0
   81fc2:	625a      	str	r2, [r3, #36]	; 0x24
   81fc4:	687b      	ldr	r3, [r7, #4]
   81fc6:	4a2e      	ldr	r2, [pc, #184]	; (82080 <cb_write_reg+0x20c>)
   81fc8:	621a      	str	r2, [r3, #32]
				memset(reg, 0, sizeof(struct reg_s));
   81fca:	4936      	ldr	r1, [pc, #216]	; (820a4 <cb_write_reg+0x230>)
   81fcc:	2200      	movs	r2, #0
   81fce:	460b      	mov	r3, r1
   81fd0:	f843 2b04 	str.w	r2, [r3], #4
   81fd4:	604a      	str	r2, [r1, #4]
   81fd6:	605a      	str	r2, [r3, #4]
				return -1;
   81fd8:	e04b      	b.n	82072 <cb_write_reg+0x1fe>
			}	
			reg->value = value;
   81fda:	4b32      	ldr	r3, [pc, #200]	; (820a4 <cb_write_reg+0x230>)
   81fdc:	9a04      	ldr	r2, [sp, #16]
   81fde:	605a      	str	r2, [r3, #4]
			reg->ok = 1;
   81fe0:	2201      	movs	r2, #1
   81fe2:	609a      	str	r2, [r3, #8]
			return 0;
   81fe4:	2400      	movs	r4, #0
   81fe6:	e044      	b.n	82072 <cb_write_reg+0x1fe>
		default: /* Should not happen */
			req_err(arg->req,401,"Bad reg write request");
   81fe8:	4b28      	ldr	r3, [pc, #160]	; (8208c <cb_write_reg+0x218>)
   81fea:	681b      	ldr	r3, [r3, #0]
   81fec:	68dc      	ldr	r4, [r3, #12]
   81fee:	4b28      	ldr	r3, [pc, #160]	; (82090 <cb_write_reg+0x21c>)
   81ff0:	4798      	blx	r3
   81ff2:	6803      	ldr	r3, [r0, #0]
   81ff4:	9300      	str	r3, [sp, #0]
   81ff6:	f240 1391 	movw	r3, #401	; 0x191
   81ffa:	9301      	str	r3, [sp, #4]
   81ffc:	4b2b      	ldr	r3, [pc, #172]	; (820ac <cb_write_reg+0x238>)
   81ffe:	9302      	str	r3, [sp, #8]
   82000:	4620      	mov	r0, r4
   82002:	4925      	ldr	r1, [pc, #148]	; (82098 <cb_write_reg+0x224>)
   82004:	4a1e      	ldr	r2, [pc, #120]	; (82080 <cb_write_reg+0x20c>)
   82006:	23a8      	movs	r3, #168	; 0xa8
   82008:	4c24      	ldr	r4, [pc, #144]	; (8209c <cb_write_reg+0x228>)
   8200a:	47a0      	blx	r4
   8200c:	687b      	ldr	r3, [r7, #4]
   8200e:	68da      	ldr	r2, [r3, #12]
   82010:	b10a      	cbz	r2, 82016 <cb_write_reg+0x1a2>
   82012:	2ac8      	cmp	r2, #200	; 0xc8
   82014:	d111      	bne.n	8203a <cb_write_reg+0x1c6>
   82016:	f240 1291 	movw	r2, #401	; 0x191
   8201a:	60da      	str	r2, [r3, #12]
   8201c:	687b      	ldr	r3, [r7, #4]
   8201e:	4a23      	ldr	r2, [pc, #140]	; (820ac <cb_write_reg+0x238>)
   82020:	629a      	str	r2, [r3, #40]	; 0x28
   82022:	687b      	ldr	r3, [r7, #4]
   82024:	22ff      	movs	r2, #255	; 0xff
   82026:	801a      	strh	r2, [r3, #0]
   82028:	687b      	ldr	r3, [r7, #4]
   8202a:	4a1d      	ldr	r2, [pc, #116]	; (820a0 <cb_write_reg+0x22c>)
   8202c:	61da      	str	r2, [r3, #28]
   8202e:	687b      	ldr	r3, [r7, #4]
   82030:	22a8      	movs	r2, #168	; 0xa8
   82032:	625a      	str	r2, [r3, #36]	; 0x24
   82034:	687b      	ldr	r3, [r7, #4]
   82036:	4a12      	ldr	r2, [pc, #72]	; (82080 <cb_write_reg+0x20c>)
   82038:	621a      	str	r2, [r3, #32]
			memset(reg, 0, sizeof(struct reg_s));
   8203a:	491a      	ldr	r1, [pc, #104]	; (820a4 <cb_write_reg+0x230>)
   8203c:	2200      	movs	r2, #0
   8203e:	460b      	mov	r3, r1
   82040:	f843 2b04 	str.w	r2, [r3], #4
   82044:	604a      	str	r2, [r1, #4]
   82046:	605a      	str	r2, [r3, #4]
			return -1;						
   82048:	f04f 34ff 	mov.w	r4, #4294967295
   8204c:	e011      	b.n	82072 <cb_write_reg+0x1fe>
	struct reg_s *reg = &register_buf;
	dbg("Here;");
	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
				saddr[i] = at(b, oval + i);		
   8204e:	b2a9      	uxth	r1, r5
   82050:	4b17      	ldr	r3, [pc, #92]	; (820b0 <cb_write_reg+0x23c>)
   82052:	4798      	blx	r3
   82054:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
	int i;	
	struct reg_s *reg = &register_buf;
	dbg("Here;");
	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   82058:	2401      	movs	r4, #1
				saddr[i] = at(b, oval + i);		
   8205a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 820b0 <cb_write_reg+0x23c>
   8205e:	e72d      	b.n	81ebc <cb_write_reg+0x48>
			}
			reg->addr = addr;
			return 0;
		case 1: /* Value */
			for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval); ++i)
				svalue[i] = at(b, oval + i);		
   82060:	b2a9      	uxth	r1, r5
   82062:	4b13      	ldr	r3, [pc, #76]	; (820b0 <cb_write_reg+0x23c>)
   82064:	4798      	blx	r3
   82066:	f88d 0018 	strb.w	r0, [sp, #24]
				return -1;
			}
			reg->addr = addr;
			return 0;
		case 1: /* Value */
			for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval); ++i)
   8206a:	2401      	movs	r4, #1
				svalue[i] = at(b, oval + i);		
   8206c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 820b0 <cb_write_reg+0x23c>
   82070:	e772      	b.n	81f58 <cb_write_reg+0xe4>
			memset(reg, 0, sizeof(struct reg_s));
			return -1;						
	}
	
	return 0;
}
   82072:	4620      	mov	r0, r4
   82074:	b010      	add	sp, #64	; 0x40
   82076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8207a:	bf00      	nop
   8207c:	000b0a90 	.word	0x000b0a90
   82080:	000b0854 	.word	0x000b0854
   82084:	0008c839 	.word	0x0008c839
   82088:	000815b1 	.word	0x000815b1
   8208c:	200702c8 	.word	0x200702c8
   82090:	0008c775 	.word	0x0008c775
   82094:	000b0928 	.word	0x000b0928
   82098:	000b08b0 	.word	0x000b08b0
   8209c:	0008c7c7 	.word	0x0008c7c7
   820a0:	000b0940 	.word	0x000b0940
   820a4:	20070bf0 	.word	0x20070bf0
   820a8:	00081591 	.word	0x00081591
   820ac:	000b099c 	.word	0x000b099c
   820b0:	00088451 	.word	0x00088451

000820b4 <execute_write_reg>:
int execute_write_reg(struct post_method *self, struct http_request *req)
{
   820b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   820b8:	b084      	sub	sp, #16
   820ba:	460d      	mov	r5, r1
	struct reg_s *reg = &register_buf;
	
	if(!reg->ok) {
   820bc:	4b3d      	ldr	r3, [pc, #244]	; (821b4 <execute_write_reg+0x100>)
   820be:	689b      	ldr	r3, [r3, #8]
   820c0:	2b00      	cmp	r3, #0
   820c2:	d12c      	bne.n	8211e <execute_write_reg+0x6a>
		req_err(req,401,"Bad reg write request");
   820c4:	4b3c      	ldr	r3, [pc, #240]	; (821b8 <execute_write_reg+0x104>)
   820c6:	681b      	ldr	r3, [r3, #0]
   820c8:	68dc      	ldr	r4, [r3, #12]
   820ca:	4b3c      	ldr	r3, [pc, #240]	; (821bc <execute_write_reg+0x108>)
   820cc:	4798      	blx	r3
   820ce:	6803      	ldr	r3, [r0, #0]
   820d0:	9300      	str	r3, [sp, #0]
   820d2:	f240 1391 	movw	r3, #401	; 0x191
   820d6:	9301      	str	r3, [sp, #4]
   820d8:	4b39      	ldr	r3, [pc, #228]	; (821c0 <execute_write_reg+0x10c>)
   820da:	9302      	str	r3, [sp, #8]
   820dc:	4620      	mov	r0, r4
   820de:	4939      	ldr	r1, [pc, #228]	; (821c4 <execute_write_reg+0x110>)
   820e0:	4a39      	ldr	r2, [pc, #228]	; (821c8 <execute_write_reg+0x114>)
   820e2:	23b4      	movs	r3, #180	; 0xb4
   820e4:	4c39      	ldr	r4, [pc, #228]	; (821cc <execute_write_reg+0x118>)
   820e6:	47a0      	blx	r4
   820e8:	68eb      	ldr	r3, [r5, #12]
   820ea:	b10b      	cbz	r3, 820f0 <execute_write_reg+0x3c>
   820ec:	2bc8      	cmp	r3, #200	; 0xc8
   820ee:	d10c      	bne.n	8210a <execute_write_reg+0x56>
   820f0:	f240 1391 	movw	r3, #401	; 0x191
   820f4:	60eb      	str	r3, [r5, #12]
   820f6:	4b32      	ldr	r3, [pc, #200]	; (821c0 <execute_write_reg+0x10c>)
   820f8:	62ab      	str	r3, [r5, #40]	; 0x28
   820fa:	23ff      	movs	r3, #255	; 0xff
   820fc:	802b      	strh	r3, [r5, #0]
   820fe:	4b34      	ldr	r3, [pc, #208]	; (821d0 <execute_write_reg+0x11c>)
   82100:	61eb      	str	r3, [r5, #28]
   82102:	23b4      	movs	r3, #180	; 0xb4
   82104:	626b      	str	r3, [r5, #36]	; 0x24
   82106:	4b30      	ldr	r3, [pc, #192]	; (821c8 <execute_write_reg+0x114>)
   82108:	622b      	str	r3, [r5, #32]
		memset(reg, 0, sizeof(struct reg_s));
   8210a:	492a      	ldr	r1, [pc, #168]	; (821b4 <execute_write_reg+0x100>)
   8210c:	2200      	movs	r2, #0
   8210e:	460b      	mov	r3, r1
   82110:	f843 2b04 	str.w	r2, [r3], #4
   82114:	604a      	str	r2, [r1, #4]
   82116:	605a      	str	r2, [r3, #4]
		return -1;
   82118:	f04f 33ff 	mov.w	r3, #4294967295
   8211c:	e046      	b.n	821ac <execute_write_reg+0xf8>
	}
	
	dbg("Here;");
   8211e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 821e8 <execute_write_reg+0x134>
   82122:	4f29      	ldr	r7, [pc, #164]	; (821c8 <execute_write_reg+0x114>)
   82124:	4640      	mov	r0, r8
   82126:	4639      	mov	r1, r7
   82128:	22b9      	movs	r2, #185	; 0xb9
   8212a:	4e2a      	ldr	r6, [pc, #168]	; (821d4 <execute_write_reg+0x120>)
   8212c:	47b0      	blx	r6
	write_register(reg->addr, reg->value);
   8212e:	4c21      	ldr	r4, [pc, #132]	; (821b4 <execute_write_reg+0x100>)
   82130:	6820      	ldr	r0, [r4, #0]
   82132:	6861      	ldr	r1, [r4, #4]
   82134:	4b28      	ldr	r3, [pc, #160]	; (821d8 <execute_write_reg+0x124>)
   82136:	4798      	blx	r3
	dbg("Here;");
   82138:	4640      	mov	r0, r8
   8213a:	4639      	mov	r1, r7
   8213c:	22bb      	movs	r2, #187	; 0xbb
   8213e:	47b0      	blx	r6
	memset(reg, 0, sizeof(struct reg_s));
   82140:	2200      	movs	r2, #0
   82142:	4623      	mov	r3, r4
   82144:	f843 2b04 	str.w	r2, [r3], #4
   82148:	6062      	str	r2, [r4, #4]
   8214a:	605a      	str	r2, [r3, #4]
	
	if(reply_request(req, string_static("\"success\""))) {
   8214c:	4628      	mov	r0, r5
   8214e:	4923      	ldr	r1, [pc, #140]	; (821dc <execute_write_reg+0x128>)
   82150:	2209      	movs	r2, #9
   82152:	4b23      	ldr	r3, [pc, #140]	; (821e0 <execute_write_reg+0x12c>)
   82154:	4798      	blx	r3
   82156:	4603      	mov	r3, r0
   82158:	2800      	cmp	r0, #0
   8215a:	d027      	beq.n	821ac <execute_write_reg+0xf8>
		req_internal(req,"read_request_body()");
   8215c:	4b16      	ldr	r3, [pc, #88]	; (821b8 <execute_write_reg+0x104>)
   8215e:	681b      	ldr	r3, [r3, #0]
   82160:	68dc      	ldr	r4, [r3, #12]
   82162:	4b16      	ldr	r3, [pc, #88]	; (821bc <execute_write_reg+0x108>)
   82164:	4798      	blx	r3
   82166:	6803      	ldr	r3, [r0, #0]
   82168:	9300      	str	r3, [sp, #0]
   8216a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8216e:	9301      	str	r3, [sp, #4]
   82170:	4b1c      	ldr	r3, [pc, #112]	; (821e4 <execute_write_reg+0x130>)
   82172:	9302      	str	r3, [sp, #8]
   82174:	4620      	mov	r0, r4
   82176:	4913      	ldr	r1, [pc, #76]	; (821c4 <execute_write_reg+0x110>)
   82178:	463a      	mov	r2, r7
   8217a:	23bf      	movs	r3, #191	; 0xbf
   8217c:	4c13      	ldr	r4, [pc, #76]	; (821cc <execute_write_reg+0x118>)
   8217e:	47a0      	blx	r4
   82180:	68eb      	ldr	r3, [r5, #12]
   82182:	b10b      	cbz	r3, 82188 <execute_write_reg+0xd4>
   82184:	2bc8      	cmp	r3, #200	; 0xc8
   82186:	d10f      	bne.n	821a8 <execute_write_reg+0xf4>
   82188:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8218c:	60eb      	str	r3, [r5, #12]
   8218e:	4b15      	ldr	r3, [pc, #84]	; (821e4 <execute_write_reg+0x130>)
   82190:	62ab      	str	r3, [r5, #40]	; 0x28
   82192:	23ff      	movs	r3, #255	; 0xff
   82194:	802b      	strh	r3, [r5, #0]
   82196:	4b0e      	ldr	r3, [pc, #56]	; (821d0 <execute_write_reg+0x11c>)
   82198:	61eb      	str	r3, [r5, #28]
   8219a:	23bf      	movs	r3, #191	; 0xbf
   8219c:	626b      	str	r3, [r5, #36]	; 0x24
   8219e:	4b0a      	ldr	r3, [pc, #40]	; (821c8 <execute_write_reg+0x114>)
   821a0:	622b      	str	r3, [r5, #32]
		return -1;		
   821a2:	f04f 33ff 	mov.w	r3, #4294967295
   821a6:	e001      	b.n	821ac <execute_write_reg+0xf8>
   821a8:	f04f 33ff 	mov.w	r3, #4294967295
	}
	
	
	return 0;
}
   821ac:	4618      	mov	r0, r3
   821ae:	b004      	add	sp, #16
   821b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821b4:	20070bf0 	.word	0x20070bf0
   821b8:	200702c8 	.word	0x200702c8
   821bc:	0008c775 	.word	0x0008c775
   821c0:	000b099c 	.word	0x000b099c
   821c4:	000b08b0 	.word	0x000b08b0
   821c8:	000b0e78 	.word	0x000b0e78
   821cc:	0008c7c7 	.word	0x0008c7c7
   821d0:	000b0940 	.word	0x000b0940
   821d4:	0008c839 	.word	0x0008c839
   821d8:	00081741 	.word	0x00081741
   821dc:	000b0b00 	.word	0x000b0b00
   821e0:	00080aa9 	.word	0x00080aa9
   821e4:	000b062c 	.word	0x000b062c
   821e8:	000b0a90 	.word	0x000b0a90

000821ec <execute_write_mem>:
	return 0;
	
	
}
int execute_write_mem(struct post_method *self, struct http_request *req)
{
   821ec:	b530      	push	{r4, r5, lr}
   821ee:	b085      	sub	sp, #20
   821f0:	460c      	mov	r4, r1
	struct mem_s *buf = &memory_buf;
	
	if(!buf->ok) {
   821f2:	4b3b      	ldr	r3, [pc, #236]	; (822e0 <execute_write_mem+0xf4>)
   821f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   821f6:	2b00      	cmp	r3, #0
   821f8:	d12c      	bne.n	82254 <execute_write_mem+0x68>
		req_err(req,401,"Bad reg write request");
   821fa:	4b3a      	ldr	r3, [pc, #232]	; (822e4 <execute_write_mem+0xf8>)
   821fc:	681b      	ldr	r3, [r3, #0]
   821fe:	68dd      	ldr	r5, [r3, #12]
   82200:	4b39      	ldr	r3, [pc, #228]	; (822e8 <execute_write_mem+0xfc>)
   82202:	4798      	blx	r3
   82204:	6803      	ldr	r3, [r0, #0]
   82206:	9300      	str	r3, [sp, #0]
   82208:	f240 1391 	movw	r3, #401	; 0x191
   8220c:	9301      	str	r3, [sp, #4]
   8220e:	4b37      	ldr	r3, [pc, #220]	; (822ec <execute_write_mem+0x100>)
   82210:	9302      	str	r3, [sp, #8]
   82212:	4628      	mov	r0, r5
   82214:	4936      	ldr	r1, [pc, #216]	; (822f0 <execute_write_mem+0x104>)
   82216:	4a37      	ldr	r2, [pc, #220]	; (822f4 <execute_write_mem+0x108>)
   82218:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   8221c:	4d36      	ldr	r5, [pc, #216]	; (822f8 <execute_write_mem+0x10c>)
   8221e:	47a8      	blx	r5
   82220:	68e3      	ldr	r3, [r4, #12]
   82222:	b10b      	cbz	r3, 82228 <execute_write_mem+0x3c>
   82224:	2bc8      	cmp	r3, #200	; 0xc8
   82226:	d10d      	bne.n	82244 <execute_write_mem+0x58>
   82228:	f240 1391 	movw	r3, #401	; 0x191
   8222c:	60e3      	str	r3, [r4, #12]
   8222e:	4b2f      	ldr	r3, [pc, #188]	; (822ec <execute_write_mem+0x100>)
   82230:	62a3      	str	r3, [r4, #40]	; 0x28
   82232:	23ff      	movs	r3, #255	; 0xff
   82234:	8023      	strh	r3, [r4, #0]
   82236:	4b31      	ldr	r3, [pc, #196]	; (822fc <execute_write_mem+0x110>)
   82238:	61e3      	str	r3, [r4, #28]
   8223a:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   8223e:	6263      	str	r3, [r4, #36]	; 0x24
   82240:	4b2c      	ldr	r3, [pc, #176]	; (822f4 <execute_write_mem+0x108>)
   82242:	6223      	str	r3, [r4, #32]
		memset(buf, 0, sizeof(struct mem_s));	
   82244:	4826      	ldr	r0, [pc, #152]	; (822e0 <execute_write_mem+0xf4>)
   82246:	2100      	movs	r1, #0
   82248:	224c      	movs	r2, #76	; 0x4c
   8224a:	4b2d      	ldr	r3, [pc, #180]	; (82300 <execute_write_mem+0x114>)
   8224c:	4798      	blx	r3
		return -1;
   8224e:	f04f 33ff 	mov.w	r3, #4294967295
   82252:	e041      	b.n	822d8 <execute_write_mem+0xec>
	}
	
	if(buf->length) {
   82254:	4b22      	ldr	r3, [pc, #136]	; (822e0 <execute_write_mem+0xf4>)
   82256:	685a      	ldr	r2, [r3, #4]
   82258:	b152      	cbz	r2, 82270 <execute_write_mem+0x84>

		write_memory(buf->addr, buf->data, buf->length);
   8225a:	461d      	mov	r5, r3
   8225c:	4619      	mov	r1, r3
   8225e:	f851 0b08 	ldr.w	r0, [r1], #8
   82262:	4b28      	ldr	r3, [pc, #160]	; (82304 <execute_write_mem+0x118>)
   82264:	4798      	blx	r3

		memset(buf, 0, sizeof(struct mem_s));	
   82266:	4628      	mov	r0, r5
   82268:	2100      	movs	r1, #0
   8226a:	224c      	movs	r2, #76	; 0x4c
   8226c:	4b24      	ldr	r3, [pc, #144]	; (82300 <execute_write_mem+0x114>)
   8226e:	4798      	blx	r3
	}	

	if(reply_request(req, string_static("\"success\""))) {
   82270:	4620      	mov	r0, r4
   82272:	4925      	ldr	r1, [pc, #148]	; (82308 <execute_write_mem+0x11c>)
   82274:	2209      	movs	r2, #9
   82276:	4b25      	ldr	r3, [pc, #148]	; (8230c <execute_write_mem+0x120>)
   82278:	4798      	blx	r3
   8227a:	4603      	mov	r3, r0
   8227c:	2800      	cmp	r0, #0
   8227e:	d02b      	beq.n	822d8 <execute_write_mem+0xec>
		req_internal(req,"read_request_body()");
   82280:	4b18      	ldr	r3, [pc, #96]	; (822e4 <execute_write_mem+0xf8>)
   82282:	681b      	ldr	r3, [r3, #0]
   82284:	68dd      	ldr	r5, [r3, #12]
   82286:	4b18      	ldr	r3, [pc, #96]	; (822e8 <execute_write_mem+0xfc>)
   82288:	4798      	blx	r3
   8228a:	6803      	ldr	r3, [r0, #0]
   8228c:	9300      	str	r3, [sp, #0]
   8228e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82292:	9301      	str	r3, [sp, #4]
   82294:	4b1e      	ldr	r3, [pc, #120]	; (82310 <execute_write_mem+0x124>)
   82296:	9302      	str	r3, [sp, #8]
   82298:	4628      	mov	r0, r5
   8229a:	4915      	ldr	r1, [pc, #84]	; (822f0 <execute_write_mem+0x104>)
   8229c:	4a15      	ldr	r2, [pc, #84]	; (822f4 <execute_write_mem+0x108>)
   8229e:	f240 13c9 	movw	r3, #457	; 0x1c9
   822a2:	4d15      	ldr	r5, [pc, #84]	; (822f8 <execute_write_mem+0x10c>)
   822a4:	47a8      	blx	r5
   822a6:	68e3      	ldr	r3, [r4, #12]
   822a8:	b10b      	cbz	r3, 822ae <execute_write_mem+0xc2>
   822aa:	2bc8      	cmp	r3, #200	; 0xc8
   822ac:	d10d      	bne.n	822ca <execute_write_mem+0xde>
   822ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   822b2:	60e3      	str	r3, [r4, #12]
   822b4:	4b16      	ldr	r3, [pc, #88]	; (82310 <execute_write_mem+0x124>)
   822b6:	62a3      	str	r3, [r4, #40]	; 0x28
   822b8:	23ff      	movs	r3, #255	; 0xff
   822ba:	8023      	strh	r3, [r4, #0]
   822bc:	4b0f      	ldr	r3, [pc, #60]	; (822fc <execute_write_mem+0x110>)
   822be:	61e3      	str	r3, [r4, #28]
   822c0:	f240 13c9 	movw	r3, #457	; 0x1c9
   822c4:	6263      	str	r3, [r4, #36]	; 0x24
   822c6:	4b0b      	ldr	r3, [pc, #44]	; (822f4 <execute_write_mem+0x108>)
   822c8:	6223      	str	r3, [r4, #32]
		memset(buf, 0, sizeof(struct mem_s));	
   822ca:	4805      	ldr	r0, [pc, #20]	; (822e0 <execute_write_mem+0xf4>)
   822cc:	2100      	movs	r1, #0
   822ce:	224c      	movs	r2, #76	; 0x4c
   822d0:	4b0b      	ldr	r3, [pc, #44]	; (82300 <execute_write_mem+0x114>)
   822d2:	4798      	blx	r3
		return -1;		
   822d4:	f04f 33ff 	mov.w	r3, #4294967295
	}


	return 0;
}
   822d8:	4618      	mov	r0, r3
   822da:	b005      	add	sp, #20
   822dc:	bd30      	pop	{r4, r5, pc}
   822de:	bf00      	nop
   822e0:	20070ba4 	.word	0x20070ba4
   822e4:	200702c8 	.word	0x200702c8
   822e8:	0008c775 	.word	0x0008c775
   822ec:	000b099c 	.word	0x000b099c
   822f0:	000b08b0 	.word	0x000b08b0
   822f4:	000b07fc 	.word	0x000b07fc
   822f8:	0008c7c7 	.word	0x0008c7c7
   822fc:	000b0940 	.word	0x000b0940
   82300:	0008ccbb 	.word	0x0008ccbb
   82304:	00081755 	.word	0x00081755
   82308:	000b0b00 	.word	0x000b0b00
   8230c:	00080aa9 	.word	0x00080aa9
   82310:	000b062c 	.word	0x000b062c

00082314 <cb_write_mem>:
	mem->ok = 1;
	return 0;
}

int cb_write_mem(xjson *b, int index, offset oval, int vlen,  void *varg)
{
   82314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82318:	b08a      	sub	sp, #40	; 0x28
   8231a:	4606      	mov	r6, r0
   8231c:	4615      	mov	r5, r2
   8231e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	char saddr[MAX_STR_ADDR_T + 1];
	address_t addr;
	int i;	
	struct mem_s *mem = &memory_buf;

	switch(index) {
   82322:	b111      	cbz	r1, 8232a <cb_write_mem+0x16>
   82324:	2901      	cmp	r1, #1
   82326:	d05c      	beq.n	823e2 <cb_write_mem+0xce>
   82328:	e063      	b.n	823f2 <cb_write_mem+0xde>
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   8232a:	6800      	ldr	r0, [r0, #0]
   8232c:	8903      	ldrh	r3, [r0, #8]
   8232e:	429a      	cmp	r2, r3
   82330:	f0c0 8098 	bcc.w	82464 <cb_write_mem+0x150>
   82334:	e00c      	b.n	82350 <cb_write_mem+0x3c>
   82336:	1961      	adds	r1, r4, r5
				saddr[i] = at(b, oval + i);		
   82338:	b289      	uxth	r1, r1
   8233a:	47b8      	blx	r7
   8233c:	ab05      	add	r3, sp, #20
   8233e:	5518      	strb	r0, [r3, r4]
	int i;	
	struct mem_s *mem = &memory_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   82340:	3401      	adds	r4, #1
   82342:	2c10      	cmp	r4, #16
   82344:	d004      	beq.n	82350 <cb_write_mem+0x3c>
   82346:	6830      	ldr	r0, [r6, #0]
   82348:	8902      	ldrh	r2, [r0, #8]
   8234a:	1963      	adds	r3, r4, r5
   8234c:	429a      	cmp	r2, r3
   8234e:	d8f2      	bhi.n	82336 <cb_write_mem+0x22>
				saddr[i] = at(b, oval + i);		
			saddr[MAX_STR_ADDR_T] = '\0';
   82350:	2300      	movs	r3, #0
   82352:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	
			if( string_to_addr(saddr, &addr) == -1 ) {		
   82356:	a805      	add	r0, sp, #20
   82358:	a904      	add	r1, sp, #16
   8235a:	4b48      	ldr	r3, [pc, #288]	; (8247c <cb_write_mem+0x168>)
   8235c:	4798      	blx	r3
   8235e:	4604      	mov	r4, r0
   82360:	f1b0 3fff 	cmp.w	r0, #4294967295
   82364:	d136      	bne.n	823d4 <cb_write_mem+0xc0>
				req_err(arg->req,401,"Bad mem address request");
   82366:	4b46      	ldr	r3, [pc, #280]	; (82480 <cb_write_mem+0x16c>)
   82368:	681b      	ldr	r3, [r3, #0]
   8236a:	68dd      	ldr	r5, [r3, #12]
   8236c:	4b45      	ldr	r3, [pc, #276]	; (82484 <cb_write_mem+0x170>)
   8236e:	4798      	blx	r3
   82370:	6803      	ldr	r3, [r0, #0]
   82372:	9300      	str	r3, [sp, #0]
   82374:	f240 1391 	movw	r3, #401	; 0x191
   82378:	9301      	str	r3, [sp, #4]
   8237a:	4b43      	ldr	r3, [pc, #268]	; (82488 <cb_write_mem+0x174>)
   8237c:	9302      	str	r3, [sp, #8]
   8237e:	4628      	mov	r0, r5
   82380:	4942      	ldr	r1, [pc, #264]	; (8248c <cb_write_mem+0x178>)
   82382:	4a43      	ldr	r2, [pc, #268]	; (82490 <cb_write_mem+0x17c>)
   82384:	f240 13a1 	movw	r3, #417	; 0x1a1
   82388:	4d42      	ldr	r5, [pc, #264]	; (82494 <cb_write_mem+0x180>)
   8238a:	47a8      	blx	r5
   8238c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82390:	68da      	ldr	r2, [r3, #12]
   82392:	b10a      	cbz	r2, 82398 <cb_write_mem+0x84>
   82394:	2ac8      	cmp	r2, #200	; 0xc8
   82396:	d117      	bne.n	823c8 <cb_write_mem+0xb4>
   82398:	f240 1291 	movw	r2, #401	; 0x191
   8239c:	60da      	str	r2, [r3, #12]
   8239e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   823a2:	4a39      	ldr	r2, [pc, #228]	; (82488 <cb_write_mem+0x174>)
   823a4:	629a      	str	r2, [r3, #40]	; 0x28
   823a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   823aa:	22ff      	movs	r2, #255	; 0xff
   823ac:	801a      	strh	r2, [r3, #0]
   823ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
   823b2:	4a39      	ldr	r2, [pc, #228]	; (82498 <cb_write_mem+0x184>)
   823b4:	61da      	str	r2, [r3, #28]
   823b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   823ba:	f240 12a1 	movw	r2, #417	; 0x1a1
   823be:	625a      	str	r2, [r3, #36]	; 0x24
   823c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   823c4:	4a32      	ldr	r2, [pc, #200]	; (82490 <cb_write_mem+0x17c>)
   823c6:	621a      	str	r2, [r3, #32]
				memset(mem, 0, sizeof(struct mem_s));	
   823c8:	4834      	ldr	r0, [pc, #208]	; (8249c <cb_write_mem+0x188>)
   823ca:	2100      	movs	r1, #0
   823cc:	224c      	movs	r2, #76	; 0x4c
   823ce:	4b34      	ldr	r3, [pc, #208]	; (824a0 <cb_write_mem+0x18c>)
   823d0:	4798      	blx	r3
				return -1;
   823d2:	e04f      	b.n	82474 <cb_write_mem+0x160>
			}
			mem->addr = addr;
   823d4:	4b31      	ldr	r3, [pc, #196]	; (8249c <cb_write_mem+0x188>)
   823d6:	9a04      	ldr	r2, [sp, #16]
   823d8:	601a      	str	r2, [r3, #0]
			mem->ok = 1;
   823da:	2201      	movs	r2, #1
   823dc:	649a      	str	r2, [r3, #72]	; 0x48
			return 0;
   823de:	2400      	movs	r4, #0
   823e0:	e048      	b.n	82474 <cb_write_mem+0x160>
		case 1:
			if(JSON_decode_array( b, oval, __cb_wmem_data, (void *) mem ) == 0)
   823e2:	4611      	mov	r1, r2
   823e4:	4a2f      	ldr	r2, [pc, #188]	; (824a4 <cb_write_mem+0x190>)
   823e6:	4b2d      	ldr	r3, [pc, #180]	; (8249c <cb_write_mem+0x188>)
   823e8:	4c2f      	ldr	r4, [pc, #188]	; (824a8 <cb_write_mem+0x194>)
   823ea:	47a0      	blx	r4
   823ec:	4604      	mov	r4, r0
   823ee:	2800      	cmp	r0, #0
   823f0:	d040      	beq.n	82474 <cb_write_mem+0x160>
				break;
				
					 /*! Fall through if error !*/
			 
		default: /* Should not happen */
			req_err(arg->req,401,"Bad mem write request");
   823f2:	4b23      	ldr	r3, [pc, #140]	; (82480 <cb_write_mem+0x16c>)
   823f4:	681b      	ldr	r3, [r3, #0]
   823f6:	68dc      	ldr	r4, [r3, #12]
   823f8:	4b22      	ldr	r3, [pc, #136]	; (82484 <cb_write_mem+0x170>)
   823fa:	4798      	blx	r3
   823fc:	6803      	ldr	r3, [r0, #0]
   823fe:	9300      	str	r3, [sp, #0]
   82400:	f240 1391 	movw	r3, #401	; 0x191
   82404:	9301      	str	r3, [sp, #4]
   82406:	4b29      	ldr	r3, [pc, #164]	; (824ac <cb_write_mem+0x198>)
   82408:	9302      	str	r3, [sp, #8]
   8240a:	4620      	mov	r0, r4
   8240c:	491f      	ldr	r1, [pc, #124]	; (8248c <cb_write_mem+0x178>)
   8240e:	4a20      	ldr	r2, [pc, #128]	; (82490 <cb_write_mem+0x17c>)
   82410:	f240 13af 	movw	r3, #431	; 0x1af
   82414:	4c1f      	ldr	r4, [pc, #124]	; (82494 <cb_write_mem+0x180>)
   82416:	47a0      	blx	r4
   82418:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8241c:	68da      	ldr	r2, [r3, #12]
   8241e:	b10a      	cbz	r2, 82424 <cb_write_mem+0x110>
   82420:	2ac8      	cmp	r2, #200	; 0xc8
   82422:	d117      	bne.n	82454 <cb_write_mem+0x140>
   82424:	f240 1291 	movw	r2, #401	; 0x191
   82428:	60da      	str	r2, [r3, #12]
   8242a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8242e:	4a1f      	ldr	r2, [pc, #124]	; (824ac <cb_write_mem+0x198>)
   82430:	629a      	str	r2, [r3, #40]	; 0x28
   82432:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82436:	22ff      	movs	r2, #255	; 0xff
   82438:	801a      	strh	r2, [r3, #0]
   8243a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8243e:	4a16      	ldr	r2, [pc, #88]	; (82498 <cb_write_mem+0x184>)
   82440:	61da      	str	r2, [r3, #28]
   82442:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82446:	f240 12af 	movw	r2, #431	; 0x1af
   8244a:	625a      	str	r2, [r3, #36]	; 0x24
   8244c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82450:	4a0f      	ldr	r2, [pc, #60]	; (82490 <cb_write_mem+0x17c>)
   82452:	621a      	str	r2, [r3, #32]
			memset(mem, 0, sizeof(struct mem_s));	
   82454:	4811      	ldr	r0, [pc, #68]	; (8249c <cb_write_mem+0x188>)
   82456:	2100      	movs	r1, #0
   82458:	224c      	movs	r2, #76	; 0x4c
   8245a:	4b11      	ldr	r3, [pc, #68]	; (824a0 <cb_write_mem+0x18c>)
   8245c:	4798      	blx	r3
			return -1;						
   8245e:	f04f 34ff 	mov.w	r4, #4294967295
   82462:	e007      	b.n	82474 <cb_write_mem+0x160>
	struct mem_s *mem = &memory_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
				saddr[i] = at(b, oval + i);		
   82464:	b291      	uxth	r1, r2
   82466:	4b12      	ldr	r3, [pc, #72]	; (824b0 <cb_write_mem+0x19c>)
   82468:	4798      	blx	r3
   8246a:	f88d 0014 	strb.w	r0, [sp, #20]
	int i;	
	struct mem_s *mem = &memory_buf;

	switch(index) {
		case 0: /* Address */
			for(i=0; i < MAX_STR_ADDR_T && ok(b, i + oval); ++i)
   8246e:	2401      	movs	r4, #1
				saddr[i] = at(b, oval + i);		
   82470:	4f0f      	ldr	r7, [pc, #60]	; (824b0 <cb_write_mem+0x19c>)
   82472:	e768      	b.n	82346 <cb_write_mem+0x32>
			return -1;						
	}
	return 0;
	
	
}
   82474:	4620      	mov	r0, r4
   82476:	b00a      	add	sp, #40	; 0x28
   82478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8247c:	000815b1 	.word	0x000815b1
   82480:	200702c8 	.word	0x200702c8
   82484:	0008c775 	.word	0x0008c775
   82488:	000b0b0c 	.word	0x000b0b0c
   8248c:	000b08b0 	.word	0x000b08b0
   82490:	000b0864 	.word	0x000b0864
   82494:	0008c7c7 	.word	0x0008c7c7
   82498:	000b0940 	.word	0x000b0940
   8249c:	20070ba4 	.word	0x20070ba4
   824a0:	0008ccbb 	.word	0x0008ccbb
   824a4:	00082ab5 	.word	0x00082ab5
   824a8:	00080859 	.word	0x00080859
   824ac:	000b0b24 	.word	0x000b0b24
   824b0:	00088451 	.word	0x00088451

000824b4 <__send_data>:
	}
	
	
}	
int __send_data(struct http_request *req, base_t *buf, address_t len, int first)
{	
   824b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824b8:	b08b      	sub	sp, #44	; 0x2c
   824ba:	4605      	mov	r5, r0
   824bc:	4688      	mov	r8, r1
   824be:	4699      	mov	r9, r3
	int i;
	for(i = 0; i < len; i++ ) {
   824c0:	2a00      	cmp	r2, #0
   824c2:	f000 809a 	beq.w	825fa <__send_data+0x146>
   824c6:	4693      	mov	fp, r2
   824c8:	2300      	movs	r3, #0
   824ca:	461c      	mov	r4, r3
		char sbase[MAX_STR_BASE_T + 1];
		base_t num = buf[i];
		

		if(likely(!(first == 1 && i == 0 ))) {
			if(netconn_printf(req->netconn, ", ")) {
   824cc:	f8df a160 	ldr.w	sl, [pc, #352]	; 82630 <__send_data+0x17c>
   824d0:	4e4c      	ldr	r6, [pc, #304]	; (82604 <__send_data+0x150>)
int __send_data(struct http_request *req, base_t *buf, address_t len, int first)
{	
	int i;
	for(i = 0; i < len; i++ ) {
		char sbase[MAX_STR_BASE_T + 1];
		base_t num = buf[i];
   824d2:	f858 7023 	ldr.w	r7, [r8, r3, lsl #2]
		

		if(likely(!(first == 1 && i == 0 ))) {
   824d6:	f1b9 0f01 	cmp.w	r9, #1
   824da:	d101      	bne.n	824e0 <__send_data+0x2c>
   824dc:	2c00      	cmp	r4, #0
   824de:	d029      	beq.n	82534 <__send_data+0x80>
			if(netconn_printf(req->netconn, ", ")) {
   824e0:	6868      	ldr	r0, [r5, #4]
   824e2:	4651      	mov	r1, sl
   824e4:	47b0      	blx	r6
   824e6:	b328      	cbz	r0, 82534 <__send_data+0x80>
				req_internal(req, "netconn_printf(',')");
   824e8:	4b47      	ldr	r3, [pc, #284]	; (82608 <__send_data+0x154>)
   824ea:	681b      	ldr	r3, [r3, #0]
   824ec:	68dc      	ldr	r4, [r3, #12]
   824ee:	4b47      	ldr	r3, [pc, #284]	; (8260c <__send_data+0x158>)
   824f0:	4798      	blx	r3
   824f2:	6803      	ldr	r3, [r0, #0]
   824f4:	9300      	str	r3, [sp, #0]
   824f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   824fa:	9301      	str	r3, [sp, #4]
   824fc:	4b44      	ldr	r3, [pc, #272]	; (82610 <__send_data+0x15c>)
   824fe:	9302      	str	r3, [sp, #8]
   82500:	4620      	mov	r0, r4
   82502:	4944      	ldr	r1, [pc, #272]	; (82614 <__send_data+0x160>)
   82504:	4a44      	ldr	r2, [pc, #272]	; (82618 <__send_data+0x164>)
   82506:	f44f 7387 	mov.w	r3, #270	; 0x10e
   8250a:	4c44      	ldr	r4, [pc, #272]	; (8261c <__send_data+0x168>)
   8250c:	47a0      	blx	r4
   8250e:	68eb      	ldr	r3, [r5, #12]
   82510:	b10b      	cbz	r3, 82516 <__send_data+0x62>
   82512:	2bc8      	cmp	r3, #200	; 0xc8
   82514:	d16e      	bne.n	825f4 <__send_data+0x140>
   82516:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8251a:	60eb      	str	r3, [r5, #12]
   8251c:	4b3c      	ldr	r3, [pc, #240]	; (82610 <__send_data+0x15c>)
   8251e:	62ab      	str	r3, [r5, #40]	; 0x28
   82520:	23ff      	movs	r3, #255	; 0xff
   82522:	802b      	strh	r3, [r5, #0]
   82524:	4b3e      	ldr	r3, [pc, #248]	; (82620 <__send_data+0x16c>)
   82526:	61eb      	str	r3, [r5, #28]
   82528:	f44f 7387 	mov.w	r3, #270	; 0x10e
   8252c:	626b      	str	r3, [r5, #36]	; 0x24
   8252e:	4b3a      	ldr	r3, [pc, #232]	; (82618 <__send_data+0x164>)
   82530:	622b      	str	r3, [r5, #32]
   82532:	e05f      	b.n	825f4 <__send_data+0x140>
				return -1;
			}
		}
		ssize_t len = base_to_string(num, sbase);
   82534:	4638      	mov	r0, r7
   82536:	a905      	add	r1, sp, #20
   82538:	4b3a      	ldr	r3, [pc, #232]	; (82624 <__send_data+0x170>)
   8253a:	4798      	blx	r3
   8253c:	4602      	mov	r2, r0
		if( len == -1) {
   8253e:	f1b0 3fff 	cmp.w	r0, #4294967295
   82542:	d125      	bne.n	82590 <__send_data+0xdc>
			req_internal(req, "base_to_string()");
   82544:	4b30      	ldr	r3, [pc, #192]	; (82608 <__send_data+0x154>)
   82546:	681b      	ldr	r3, [r3, #0]
   82548:	68dc      	ldr	r4, [r3, #12]
   8254a:	4b30      	ldr	r3, [pc, #192]	; (8260c <__send_data+0x158>)
   8254c:	4798      	blx	r3
   8254e:	6803      	ldr	r3, [r0, #0]
   82550:	9300      	str	r3, [sp, #0]
   82552:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82556:	9301      	str	r3, [sp, #4]
   82558:	4b33      	ldr	r3, [pc, #204]	; (82628 <__send_data+0x174>)
   8255a:	9302      	str	r3, [sp, #8]
   8255c:	4620      	mov	r0, r4
   8255e:	492d      	ldr	r1, [pc, #180]	; (82614 <__send_data+0x160>)
   82560:	4a2d      	ldr	r2, [pc, #180]	; (82618 <__send_data+0x164>)
   82562:	f44f 738a 	mov.w	r3, #276	; 0x114
   82566:	4c2d      	ldr	r4, [pc, #180]	; (8261c <__send_data+0x168>)
   82568:	47a0      	blx	r4
   8256a:	68eb      	ldr	r3, [r5, #12]
   8256c:	b10b      	cbz	r3, 82572 <__send_data+0xbe>
   8256e:	2bc8      	cmp	r3, #200	; 0xc8
   82570:	d140      	bne.n	825f4 <__send_data+0x140>
   82572:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82576:	60eb      	str	r3, [r5, #12]
   82578:	4b2b      	ldr	r3, [pc, #172]	; (82628 <__send_data+0x174>)
   8257a:	62ab      	str	r3, [r5, #40]	; 0x28
   8257c:	23ff      	movs	r3, #255	; 0xff
   8257e:	802b      	strh	r3, [r5, #0]
   82580:	4b27      	ldr	r3, [pc, #156]	; (82620 <__send_data+0x16c>)
   82582:	61eb      	str	r3, [r5, #28]
   82584:	f44f 738a 	mov.w	r3, #276	; 0x114
   82588:	626b      	str	r3, [r5, #36]	; 0x24
   8258a:	4b23      	ldr	r3, [pc, #140]	; (82618 <__send_data+0x164>)
   8258c:	622b      	str	r3, [r5, #32]
   8258e:	e031      	b.n	825f4 <__send_data+0x140>
			return -1;
		}
		
		if(netconn_printf(req->netconn, "%.*s",len, sbase)) {
   82590:	6868      	ldr	r0, [r5, #4]
   82592:	4926      	ldr	r1, [pc, #152]	; (8262c <__send_data+0x178>)
   82594:	ab05      	add	r3, sp, #20
   82596:	47b0      	blx	r6
   82598:	4602      	mov	r2, r0
   8259a:	b328      	cbz	r0, 825e8 <__send_data+0x134>
			req_internal(req, "netconn_printf(',')");
   8259c:	4b1a      	ldr	r3, [pc, #104]	; (82608 <__send_data+0x154>)
   8259e:	681b      	ldr	r3, [r3, #0]
   825a0:	68dc      	ldr	r4, [r3, #12]
   825a2:	4b1a      	ldr	r3, [pc, #104]	; (8260c <__send_data+0x158>)
   825a4:	4798      	blx	r3
   825a6:	6803      	ldr	r3, [r0, #0]
   825a8:	9300      	str	r3, [sp, #0]
   825aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   825ae:	9301      	str	r3, [sp, #4]
   825b0:	4b17      	ldr	r3, [pc, #92]	; (82610 <__send_data+0x15c>)
   825b2:	9302      	str	r3, [sp, #8]
   825b4:	4620      	mov	r0, r4
   825b6:	4917      	ldr	r1, [pc, #92]	; (82614 <__send_data+0x160>)
   825b8:	4a17      	ldr	r2, [pc, #92]	; (82618 <__send_data+0x164>)
   825ba:	f240 1319 	movw	r3, #281	; 0x119
   825be:	4c17      	ldr	r4, [pc, #92]	; (8261c <__send_data+0x168>)
   825c0:	47a0      	blx	r4
   825c2:	68eb      	ldr	r3, [r5, #12]
   825c4:	b10b      	cbz	r3, 825ca <__send_data+0x116>
   825c6:	2bc8      	cmp	r3, #200	; 0xc8
   825c8:	d114      	bne.n	825f4 <__send_data+0x140>
   825ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   825ce:	60eb      	str	r3, [r5, #12]
   825d0:	4b0f      	ldr	r3, [pc, #60]	; (82610 <__send_data+0x15c>)
   825d2:	62ab      	str	r3, [r5, #40]	; 0x28
   825d4:	23ff      	movs	r3, #255	; 0xff
   825d6:	802b      	strh	r3, [r5, #0]
   825d8:	4b11      	ldr	r3, [pc, #68]	; (82620 <__send_data+0x16c>)
   825da:	61eb      	str	r3, [r5, #28]
   825dc:	f240 1319 	movw	r3, #281	; 0x119
   825e0:	626b      	str	r3, [r5, #36]	; 0x24
   825e2:	4b0d      	ldr	r3, [pc, #52]	; (82618 <__send_data+0x164>)
   825e4:	622b      	str	r3, [r5, #32]
   825e6:	e005      	b.n	825f4 <__send_data+0x140>
	
}	
int __send_data(struct http_request *req, base_t *buf, address_t len, int first)
{	
	int i;
	for(i = 0; i < len; i++ ) {
   825e8:	3401      	adds	r4, #1
   825ea:	4623      	mov	r3, r4
   825ec:	455c      	cmp	r4, fp
   825ee:	f47f af70 	bne.w	824d2 <__send_data+0x1e>
   825f2:	e003      	b.n	825fc <__send_data+0x148>
		

		if(likely(!(first == 1 && i == 0 ))) {
			if(netconn_printf(req->netconn, ", ")) {
				req_internal(req, "netconn_printf(',')");
				return -1;
   825f4:	f04f 32ff 	mov.w	r2, #4294967295
   825f8:	e000      	b.n	825fc <__send_data+0x148>
			req_internal(req, "netconn_printf(',')");
			return -1;
		}
		
	}
	return 0;
   825fa:	2200      	movs	r2, #0

}
   825fc:	4610      	mov	r0, r2
   825fe:	b00b      	add	sp, #44	; 0x2c
   82600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82604:	000809a1 	.word	0x000809a1
   82608:	200702c8 	.word	0x200702c8
   8260c:	0008c775 	.word	0x0008c775
   82610:	000b0b40 	.word	0x000b0b40
   82614:	000b08b0 	.word	0x000b08b0
   82618:	000b0848 	.word	0x000b0848
   8261c:	0008c7c7 	.word	0x0008c7c7
   82620:	000b0940 	.word	0x000b0940
   82624:	00081571 	.word	0x00081571
   82628:	000b0b54 	.word	0x000b0b54
   8262c:	000b0b68 	.word	0x000b0b68
   82630:	000b0b3c 	.word	0x000b0b3c

00082634 <_read_and_send_data>:
int _read_and_send_data(struct http_request *req, struct mem_s *mem)
{
   82634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82638:	b085      	sub	sp, #20
   8263a:	4680      	mov	r8, r0
   8263c:	468a      	mov	sl, r1
	address_t i, length;
	address_t start = mem->addr;
   8263e:	f8d1 9000 	ldr.w	r9, [r1]
	address_t end = mem->addr + mem->length;
   82642:	684e      	ldr	r6, [r1, #4]
	
	
	if(netconn_printf(req->netconn, "[ ")) {
   82644:	6840      	ldr	r0, [r0, #4]
   82646:	496a      	ldr	r1, [pc, #424]	; (827f0 <_read_and_send_data+0x1bc>)
   82648:	4b6a      	ldr	r3, [pc, #424]	; (827f4 <_read_and_send_data+0x1c0>)
   8264a:	4798      	blx	r3
   8264c:	b930      	cbnz	r0, 8265c <_read_and_send_data+0x28>
}
int _read_and_send_data(struct http_request *req, struct mem_s *mem)
{
	address_t i, length;
	address_t start = mem->addr;
	address_t end = mem->addr + mem->length;
   8264e:	eb06 0b09 	add.w	fp, r6, r9
	if(netconn_printf(req->netconn, "[ ")) {
		req_internal(req, "netconn_printf('[')");
		return -1;
	}
	
	for(i = start; i < end ; i += MAX_MEM_BUF_LEN ) {
   82652:	45d9      	cmp	r9, fp
   82654:	bf38      	it	cc
   82656:	464c      	movcc	r4, r9
   82658:	d330      	bcc.n	826bc <_read_and_send_data+0x88>
   8265a:	e085      	b.n	82768 <_read_and_send_data+0x134>
	address_t start = mem->addr;
	address_t end = mem->addr + mem->length;
	
	
	if(netconn_printf(req->netconn, "[ ")) {
		req_internal(req, "netconn_printf('[')");
   8265c:	4b66      	ldr	r3, [pc, #408]	; (827f8 <_read_and_send_data+0x1c4>)
   8265e:	681b      	ldr	r3, [r3, #0]
   82660:	68dc      	ldr	r4, [r3, #12]
   82662:	4b66      	ldr	r3, [pc, #408]	; (827fc <_read_and_send_data+0x1c8>)
   82664:	4798      	blx	r3
   82666:	6803      	ldr	r3, [r0, #0]
   82668:	9300      	str	r3, [sp, #0]
   8266a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8266e:	9301      	str	r3, [sp, #4]
   82670:	4b63      	ldr	r3, [pc, #396]	; (82800 <_read_and_send_data+0x1cc>)
   82672:	9302      	str	r3, [sp, #8]
   82674:	4620      	mov	r0, r4
   82676:	4963      	ldr	r1, [pc, #396]	; (82804 <_read_and_send_data+0x1d0>)
   82678:	4a63      	ldr	r2, [pc, #396]	; (82808 <_read_and_send_data+0x1d4>)
   8267a:	f240 1329 	movw	r3, #297	; 0x129
   8267e:	4c63      	ldr	r4, [pc, #396]	; (8280c <_read_and_send_data+0x1d8>)
   82680:	47a0      	blx	r4
   82682:	f8d8 300c 	ldr.w	r3, [r8, #12]
   82686:	b113      	cbz	r3, 8268e <_read_and_send_data+0x5a>
   82688:	2bc8      	cmp	r3, #200	; 0xc8
   8268a:	f040 80a4 	bne.w	827d6 <_read_and_send_data+0x1a2>
   8268e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82692:	f8c8 300c 	str.w	r3, [r8, #12]
   82696:	4b5a      	ldr	r3, [pc, #360]	; (82800 <_read_and_send_data+0x1cc>)
   82698:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
   8269c:	23ff      	movs	r3, #255	; 0xff
   8269e:	f8a8 3000 	strh.w	r3, [r8]
   826a2:	4b5b      	ldr	r3, [pc, #364]	; (82810 <_read_and_send_data+0x1dc>)
   826a4:	f8c8 301c 	str.w	r3, [r8, #28]
   826a8:	f240 1329 	movw	r3, #297	; 0x129
   826ac:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   826b0:	4b55      	ldr	r3, [pc, #340]	; (82808 <_read_and_send_data+0x1d4>)
   826b2:	f8c8 3020 	str.w	r3, [r8, #32]
		return -1;
   826b6:	f04f 33ff 	mov.w	r3, #4294967295
   826ba:	e094      	b.n	827e6 <_read_and_send_data+0x1b2>
	}
	
	for(i = start; i < end ; i += MAX_MEM_BUF_LEN ) {
		length = MIN(MAX_MEM_BUF_LEN, end-i);
   826bc:	2e10      	cmp	r6, #16
   826be:	bf34      	ite	cc
   826c0:	4635      	movcc	r5, r6
   826c2:	2510      	movcs	r5, #16
		read_memory(i, mem->data, length );
   826c4:	f10a 0708 	add.w	r7, sl, #8
   826c8:	4620      	mov	r0, r4
   826ca:	4639      	mov	r1, r7
   826cc:	462a      	mov	r2, r5
   826ce:	4b51      	ldr	r3, [pc, #324]	; (82814 <_read_and_send_data+0x1e0>)
   826d0:	4798      	blx	r3
		
		dprintf("length=%d, i=%d, MAX_MEM_BUF_LEN=%d, end-start=%d\n", length, i, MAX_MEM_BUF_LEN, end-i);
   826d2:	9600      	str	r6, [sp, #0]
   826d4:	4850      	ldr	r0, [pc, #320]	; (82818 <_read_and_send_data+0x1e4>)
   826d6:	4629      	mov	r1, r5
   826d8:	4622      	mov	r2, r4
   826da:	2310      	movs	r3, #16
   826dc:	f8df c150 	ldr.w	ip, [pc, #336]	; 82830 <_read_and_send_data+0x1fc>
   826e0:	47e0      	blx	ip
		
		if(__send_data(req, mem->data, length, i == start)) {
   826e2:	4640      	mov	r0, r8
   826e4:	4639      	mov	r1, r7
   826e6:	462a      	mov	r2, r5
   826e8:	454c      	cmp	r4, r9
   826ea:	bf14      	ite	ne
   826ec:	2300      	movne	r3, #0
   826ee:	2301      	moveq	r3, #1
   826f0:	4d4a      	ldr	r5, [pc, #296]	; (8281c <_read_and_send_data+0x1e8>)
   826f2:	47a8      	blx	r5
   826f4:	2800      	cmp	r0, #0
   826f6:	d02e      	beq.n	82756 <_read_and_send_data+0x122>
			req_internal(req, "__send_data()");
   826f8:	4b3f      	ldr	r3, [pc, #252]	; (827f8 <_read_and_send_data+0x1c4>)
   826fa:	681b      	ldr	r3, [r3, #0]
   826fc:	68dc      	ldr	r4, [r3, #12]
   826fe:	4b3f      	ldr	r3, [pc, #252]	; (827fc <_read_and_send_data+0x1c8>)
   82700:	4798      	blx	r3
   82702:	6803      	ldr	r3, [r0, #0]
   82704:	9300      	str	r3, [sp, #0]
   82706:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8270a:	9301      	str	r3, [sp, #4]
   8270c:	4b44      	ldr	r3, [pc, #272]	; (82820 <_read_and_send_data+0x1ec>)
   8270e:	9302      	str	r3, [sp, #8]
   82710:	4620      	mov	r0, r4
   82712:	493c      	ldr	r1, [pc, #240]	; (82804 <_read_and_send_data+0x1d0>)
   82714:	4a3c      	ldr	r2, [pc, #240]	; (82808 <_read_and_send_data+0x1d4>)
   82716:	f44f 739a 	mov.w	r3, #308	; 0x134
   8271a:	4c3c      	ldr	r4, [pc, #240]	; (8280c <_read_and_send_data+0x1d8>)
   8271c:	47a0      	blx	r4
   8271e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   82722:	b10b      	cbz	r3, 82728 <_read_and_send_data+0xf4>
   82724:	2bc8      	cmp	r3, #200	; 0xc8
   82726:	d159      	bne.n	827dc <_read_and_send_data+0x1a8>
   82728:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8272c:	f8c8 300c 	str.w	r3, [r8, #12]
   82730:	4b3b      	ldr	r3, [pc, #236]	; (82820 <_read_and_send_data+0x1ec>)
   82732:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
   82736:	23ff      	movs	r3, #255	; 0xff
   82738:	f8a8 3000 	strh.w	r3, [r8]
   8273c:	4b34      	ldr	r3, [pc, #208]	; (82810 <_read_and_send_data+0x1dc>)
   8273e:	f8c8 301c 	str.w	r3, [r8, #28]
   82742:	f44f 739a 	mov.w	r3, #308	; 0x134
   82746:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   8274a:	4b2f      	ldr	r3, [pc, #188]	; (82808 <_read_and_send_data+0x1d4>)
   8274c:	f8c8 3020 	str.w	r3, [r8, #32]
			return -1;		
   82750:	f04f 33ff 	mov.w	r3, #4294967295
   82754:	e047      	b.n	827e6 <_read_and_send_data+0x1b2>
		}
		memset(mem->data, 0, sizeof(base_t) * MAX_MEM_BUF_LEN);
   82756:	4638      	mov	r0, r7
   82758:	2100      	movs	r1, #0
   8275a:	2240      	movs	r2, #64	; 0x40
   8275c:	4b31      	ldr	r3, [pc, #196]	; (82824 <_read_and_send_data+0x1f0>)
   8275e:	4798      	blx	r3
	if(netconn_printf(req->netconn, "[ ")) {
		req_internal(req, "netconn_printf('[')");
		return -1;
	}
	
	for(i = start; i < end ; i += MAX_MEM_BUF_LEN ) {
   82760:	3410      	adds	r4, #16
   82762:	3e10      	subs	r6, #16
   82764:	45a3      	cmp	fp, r4
   82766:	d8a9      	bhi.n	826bc <_read_and_send_data+0x88>
			req_internal(req, "__send_data()");
			return -1;		
		}
		memset(mem->data, 0, sizeof(base_t) * MAX_MEM_BUF_LEN);
	}
	if(netconn_printf(req->netconn, " ]")) {
   82768:	f8d8 0004 	ldr.w	r0, [r8, #4]
   8276c:	492e      	ldr	r1, [pc, #184]	; (82828 <_read_and_send_data+0x1f4>)
   8276e:	4b21      	ldr	r3, [pc, #132]	; (827f4 <_read_and_send_data+0x1c0>)
   82770:	4798      	blx	r3
   82772:	4603      	mov	r3, r0
   82774:	2800      	cmp	r0, #0
   82776:	d036      	beq.n	827e6 <_read_and_send_data+0x1b2>
		req_internal(req, "netconn_printf(']')");
   82778:	4b1f      	ldr	r3, [pc, #124]	; (827f8 <_read_and_send_data+0x1c4>)
   8277a:	681b      	ldr	r3, [r3, #0]
   8277c:	68dc      	ldr	r4, [r3, #12]
   8277e:	4b1f      	ldr	r3, [pc, #124]	; (827fc <_read_and_send_data+0x1c8>)
   82780:	4798      	blx	r3
   82782:	6803      	ldr	r3, [r0, #0]
   82784:	9300      	str	r3, [sp, #0]
   82786:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8278a:	9301      	str	r3, [sp, #4]
   8278c:	4b27      	ldr	r3, [pc, #156]	; (8282c <_read_and_send_data+0x1f8>)
   8278e:	9302      	str	r3, [sp, #8]
   82790:	4620      	mov	r0, r4
   82792:	491c      	ldr	r1, [pc, #112]	; (82804 <_read_and_send_data+0x1d0>)
   82794:	4a1c      	ldr	r2, [pc, #112]	; (82808 <_read_and_send_data+0x1d4>)
   82796:	f44f 739d 	mov.w	r3, #314	; 0x13a
   8279a:	4c1c      	ldr	r4, [pc, #112]	; (8280c <_read_and_send_data+0x1d8>)
   8279c:	47a0      	blx	r4
   8279e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   827a2:	b10b      	cbz	r3, 827a8 <_read_and_send_data+0x174>
   827a4:	2bc8      	cmp	r3, #200	; 0xc8
   827a6:	d11c      	bne.n	827e2 <_read_and_send_data+0x1ae>
   827a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   827ac:	f8c8 300c 	str.w	r3, [r8, #12]
   827b0:	4b1e      	ldr	r3, [pc, #120]	; (8282c <_read_and_send_data+0x1f8>)
   827b2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
   827b6:	23ff      	movs	r3, #255	; 0xff
   827b8:	f8a8 3000 	strh.w	r3, [r8]
   827bc:	4b14      	ldr	r3, [pc, #80]	; (82810 <_read_and_send_data+0x1dc>)
   827be:	f8c8 301c 	str.w	r3, [r8, #28]
   827c2:	f44f 739d 	mov.w	r3, #314	; 0x13a
   827c6:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   827ca:	4b0f      	ldr	r3, [pc, #60]	; (82808 <_read_and_send_data+0x1d4>)
   827cc:	f8c8 3020 	str.w	r3, [r8, #32]
		return -1;
   827d0:	f04f 33ff 	mov.w	r3, #4294967295
   827d4:	e007      	b.n	827e6 <_read_and_send_data+0x1b2>
	address_t end = mem->addr + mem->length;
	
	
	if(netconn_printf(req->netconn, "[ ")) {
		req_internal(req, "netconn_printf('[')");
		return -1;
   827d6:	f04f 33ff 	mov.w	r3, #4294967295
   827da:	e004      	b.n	827e6 <_read_and_send_data+0x1b2>
		
		dprintf("length=%d, i=%d, MAX_MEM_BUF_LEN=%d, end-start=%d\n", length, i, MAX_MEM_BUF_LEN, end-i);
		
		if(__send_data(req, mem->data, length, i == start)) {
			req_internal(req, "__send_data()");
			return -1;		
   827dc:	f04f 33ff 	mov.w	r3, #4294967295
   827e0:	e001      	b.n	827e6 <_read_and_send_data+0x1b2>
		}
		memset(mem->data, 0, sizeof(base_t) * MAX_MEM_BUF_LEN);
	}
	if(netconn_printf(req->netconn, " ]")) {
		req_internal(req, "netconn_printf(']')");
		return -1;
   827e2:	f04f 33ff 	mov.w	r3, #4294967295
	}
	return 0;
}
   827e6:	4618      	mov	r0, r3
   827e8:	b005      	add	sp, #20
   827ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827ee:	bf00      	nop
   827f0:	000b0b70 	.word	0x000b0b70
   827f4:	000809a1 	.word	0x000809a1
   827f8:	200702c8 	.word	0x200702c8
   827fc:	0008c775 	.word	0x0008c775
   82800:	000b0b74 	.word	0x000b0b74
   82804:	000b08b0 	.word	0x000b08b0
   82808:	000b0834 	.word	0x000b0834
   8280c:	0008c7c7 	.word	0x0008c7c7
   82810:	000b0940 	.word	0x000b0940
   82814:	00081769 	.word	0x00081769
   82818:	000b0b88 	.word	0x000b0b88
   8281c:	000824b5 	.word	0x000824b5
   82820:	000b0bbc 	.word	0x000b0bbc
   82824:	0008ccbb 	.word	0x0008ccbb
   82828:	000b0bcc 	.word	0x000b0bcc
   8282c:	000b0bd0 	.word	0x000b0bd0
   82830:	0008c839 	.word	0x0008c839

00082834 <execute_read_mem>:
int execute_read_mem(struct post_method *self, struct http_request *req)
{
   82834:	b530      	push	{r4, r5, lr}
   82836:	b085      	sub	sp, #20
   82838:	460c      	mov	r4, r1
	struct mem_s *mem = &memory_buf;
	
	if(!mem->ok) {
   8283a:	4b74      	ldr	r3, [pc, #464]	; (82a0c <execute_read_mem+0x1d8>)
   8283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8283e:	bb33      	cbnz	r3, 8288e <execute_read_mem+0x5a>
		req_err(req,401,"Bad reg write request");
   82840:	4b73      	ldr	r3, [pc, #460]	; (82a10 <execute_read_mem+0x1dc>)
   82842:	681b      	ldr	r3, [r3, #0]
   82844:	68dd      	ldr	r5, [r3, #12]
   82846:	4b73      	ldr	r3, [pc, #460]	; (82a14 <execute_read_mem+0x1e0>)
   82848:	4798      	blx	r3
   8284a:	6803      	ldr	r3, [r0, #0]
   8284c:	9300      	str	r3, [sp, #0]
   8284e:	f240 1391 	movw	r3, #401	; 0x191
   82852:	9301      	str	r3, [sp, #4]
   82854:	4b70      	ldr	r3, [pc, #448]	; (82a18 <execute_read_mem+0x1e4>)
   82856:	9302      	str	r3, [sp, #8]
   82858:	4628      	mov	r0, r5
   8285a:	4970      	ldr	r1, [pc, #448]	; (82a1c <execute_read_mem+0x1e8>)
   8285c:	4a70      	ldr	r2, [pc, #448]	; (82a20 <execute_read_mem+0x1ec>)
   8285e:	f44f 73a2 	mov.w	r3, #324	; 0x144
   82862:	4d70      	ldr	r5, [pc, #448]	; (82a24 <execute_read_mem+0x1f0>)
   82864:	47a8      	blx	r5
   82866:	68e3      	ldr	r3, [r4, #12]
   82868:	b113      	cbz	r3, 82870 <execute_read_mem+0x3c>
   8286a:	2bc8      	cmp	r3, #200	; 0xc8
   8286c:	f040 80c4 	bne.w	829f8 <execute_read_mem+0x1c4>
   82870:	f240 1391 	movw	r3, #401	; 0x191
   82874:	60e3      	str	r3, [r4, #12]
   82876:	4b68      	ldr	r3, [pc, #416]	; (82a18 <execute_read_mem+0x1e4>)
   82878:	62a3      	str	r3, [r4, #40]	; 0x28
   8287a:	23ff      	movs	r3, #255	; 0xff
   8287c:	8023      	strh	r3, [r4, #0]
   8287e:	4b6a      	ldr	r3, [pc, #424]	; (82a28 <execute_read_mem+0x1f4>)
   82880:	61e3      	str	r3, [r4, #28]
   82882:	f44f 73a2 	mov.w	r3, #324	; 0x144
   82886:	6263      	str	r3, [r4, #36]	; 0x24
   82888:	4b65      	ldr	r3, [pc, #404]	; (82a20 <execute_read_mem+0x1ec>)
   8288a:	6223      	str	r3, [r4, #32]
   8288c:	e0b4      	b.n	829f8 <execute_read_mem+0x1c4>
		goto err_exit;
	}
	if(_reply_head(req) == -1) {
   8288e:	4608      	mov	r0, r1
   82890:	4b66      	ldr	r3, [pc, #408]	; (82a2c <execute_read_mem+0x1f8>)
   82892:	4798      	blx	r3
   82894:	f1b0 3fff 	cmp.w	r0, #4294967295
   82898:	d126      	bne.n	828e8 <execute_read_mem+0xb4>
		req_internal(req,"_reply_head()");
   8289a:	4b5d      	ldr	r3, [pc, #372]	; (82a10 <execute_read_mem+0x1dc>)
   8289c:	681b      	ldr	r3, [r3, #0]
   8289e:	68dd      	ldr	r5, [r3, #12]
   828a0:	4b5c      	ldr	r3, [pc, #368]	; (82a14 <execute_read_mem+0x1e0>)
   828a2:	4798      	blx	r3
   828a4:	6803      	ldr	r3, [r0, #0]
   828a6:	9300      	str	r3, [sp, #0]
   828a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   828ac:	9301      	str	r3, [sp, #4]
   828ae:	4b60      	ldr	r3, [pc, #384]	; (82a30 <execute_read_mem+0x1fc>)
   828b0:	9302      	str	r3, [sp, #8]
   828b2:	4628      	mov	r0, r5
   828b4:	4959      	ldr	r1, [pc, #356]	; (82a1c <execute_read_mem+0x1e8>)
   828b6:	4a5a      	ldr	r2, [pc, #360]	; (82a20 <execute_read_mem+0x1ec>)
   828b8:	f44f 73a4 	mov.w	r3, #328	; 0x148
   828bc:	4d59      	ldr	r5, [pc, #356]	; (82a24 <execute_read_mem+0x1f0>)
   828be:	47a8      	blx	r5
   828c0:	68e3      	ldr	r3, [r4, #12]
   828c2:	b113      	cbz	r3, 828ca <execute_read_mem+0x96>
   828c4:	2bc8      	cmp	r3, #200	; 0xc8
   828c6:	f040 8097 	bne.w	829f8 <execute_read_mem+0x1c4>
   828ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   828ce:	60e3      	str	r3, [r4, #12]
   828d0:	4b57      	ldr	r3, [pc, #348]	; (82a30 <execute_read_mem+0x1fc>)
   828d2:	62a3      	str	r3, [r4, #40]	; 0x28
   828d4:	23ff      	movs	r3, #255	; 0xff
   828d6:	8023      	strh	r3, [r4, #0]
   828d8:	4b53      	ldr	r3, [pc, #332]	; (82a28 <execute_read_mem+0x1f4>)
   828da:	61e3      	str	r3, [r4, #28]
   828dc:	f44f 73a4 	mov.w	r3, #328	; 0x148
   828e0:	6263      	str	r3, [r4, #36]	; 0x24
   828e2:	4b4f      	ldr	r3, [pc, #316]	; (82a20 <execute_read_mem+0x1ec>)
   828e4:	6223      	str	r3, [r4, #32]
   828e6:	e087      	b.n	829f8 <execute_read_mem+0x1c4>
		goto err_exit;
	}
	
	
	if(netconn_printf(req->netconn, "{\"result\":")) {
   828e8:	6860      	ldr	r0, [r4, #4]
   828ea:	4952      	ldr	r1, [pc, #328]	; (82a34 <execute_read_mem+0x200>)
   828ec:	4b52      	ldr	r3, [pc, #328]	; (82a38 <execute_read_mem+0x204>)
   828ee:	4798      	blx	r3
   828f0:	b328      	cbz	r0, 8293e <execute_read_mem+0x10a>
		req_internal(req, "netconn_printf({\"result\":)");
   828f2:	4b47      	ldr	r3, [pc, #284]	; (82a10 <execute_read_mem+0x1dc>)
   828f4:	681b      	ldr	r3, [r3, #0]
   828f6:	68dd      	ldr	r5, [r3, #12]
   828f8:	4b46      	ldr	r3, [pc, #280]	; (82a14 <execute_read_mem+0x1e0>)
   828fa:	4798      	blx	r3
   828fc:	6803      	ldr	r3, [r0, #0]
   828fe:	9300      	str	r3, [sp, #0]
   82900:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82904:	9301      	str	r3, [sp, #4]
   82906:	4b4d      	ldr	r3, [pc, #308]	; (82a3c <execute_read_mem+0x208>)
   82908:	9302      	str	r3, [sp, #8]
   8290a:	4628      	mov	r0, r5
   8290c:	4943      	ldr	r1, [pc, #268]	; (82a1c <execute_read_mem+0x1e8>)
   8290e:	4a44      	ldr	r2, [pc, #272]	; (82a20 <execute_read_mem+0x1ec>)
   82910:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   82914:	4d43      	ldr	r5, [pc, #268]	; (82a24 <execute_read_mem+0x1f0>)
   82916:	47a8      	blx	r5
   82918:	68e3      	ldr	r3, [r4, #12]
   8291a:	b10b      	cbz	r3, 82920 <execute_read_mem+0xec>
   8291c:	2bc8      	cmp	r3, #200	; 0xc8
   8291e:	d16b      	bne.n	829f8 <execute_read_mem+0x1c4>
   82920:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82924:	60e3      	str	r3, [r4, #12]
   82926:	4b45      	ldr	r3, [pc, #276]	; (82a3c <execute_read_mem+0x208>)
   82928:	62a3      	str	r3, [r4, #40]	; 0x28
   8292a:	23ff      	movs	r3, #255	; 0xff
   8292c:	8023      	strh	r3, [r4, #0]
   8292e:	4b3e      	ldr	r3, [pc, #248]	; (82a28 <execute_read_mem+0x1f4>)
   82930:	61e3      	str	r3, [r4, #28]
   82932:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   82936:	6263      	str	r3, [r4, #36]	; 0x24
   82938:	4b39      	ldr	r3, [pc, #228]	; (82a20 <execute_read_mem+0x1ec>)
   8293a:	6223      	str	r3, [r4, #32]
   8293c:	e05c      	b.n	829f8 <execute_read_mem+0x1c4>
		goto err_exit;
	}
	
	if(_read_and_send_data(req, mem)) {
   8293e:	4620      	mov	r0, r4
   82940:	4932      	ldr	r1, [pc, #200]	; (82a0c <execute_read_mem+0x1d8>)
   82942:	4b3f      	ldr	r3, [pc, #252]	; (82a40 <execute_read_mem+0x20c>)
   82944:	4798      	blx	r3
   82946:	b328      	cbz	r0, 82994 <execute_read_mem+0x160>
		req_internal(req,"_read_and_send_data()");
   82948:	4b31      	ldr	r3, [pc, #196]	; (82a10 <execute_read_mem+0x1dc>)
   8294a:	681b      	ldr	r3, [r3, #0]
   8294c:	68dd      	ldr	r5, [r3, #12]
   8294e:	4b31      	ldr	r3, [pc, #196]	; (82a14 <execute_read_mem+0x1e0>)
   82950:	4798      	blx	r3
   82952:	6803      	ldr	r3, [r0, #0]
   82954:	9300      	str	r3, [sp, #0]
   82956:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8295a:	9301      	str	r3, [sp, #4]
   8295c:	4b39      	ldr	r3, [pc, #228]	; (82a44 <execute_read_mem+0x210>)
   8295e:	9302      	str	r3, [sp, #8]
   82960:	4628      	mov	r0, r5
   82962:	492e      	ldr	r1, [pc, #184]	; (82a1c <execute_read_mem+0x1e8>)
   82964:	4a2e      	ldr	r2, [pc, #184]	; (82a20 <execute_read_mem+0x1ec>)
   82966:	f240 1353 	movw	r3, #339	; 0x153
   8296a:	4d2e      	ldr	r5, [pc, #184]	; (82a24 <execute_read_mem+0x1f0>)
   8296c:	47a8      	blx	r5
   8296e:	68e3      	ldr	r3, [r4, #12]
   82970:	b10b      	cbz	r3, 82976 <execute_read_mem+0x142>
   82972:	2bc8      	cmp	r3, #200	; 0xc8
   82974:	d140      	bne.n	829f8 <execute_read_mem+0x1c4>
   82976:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8297a:	60e3      	str	r3, [r4, #12]
   8297c:	4b31      	ldr	r3, [pc, #196]	; (82a44 <execute_read_mem+0x210>)
   8297e:	62a3      	str	r3, [r4, #40]	; 0x28
   82980:	23ff      	movs	r3, #255	; 0xff
   82982:	8023      	strh	r3, [r4, #0]
   82984:	4b28      	ldr	r3, [pc, #160]	; (82a28 <execute_read_mem+0x1f4>)
   82986:	61e3      	str	r3, [r4, #28]
   82988:	f240 1353 	movw	r3, #339	; 0x153
   8298c:	6263      	str	r3, [r4, #36]	; 0x24
   8298e:	4b24      	ldr	r3, [pc, #144]	; (82a20 <execute_read_mem+0x1ec>)
   82990:	6223      	str	r3, [r4, #32]
   82992:	e031      	b.n	829f8 <execute_read_mem+0x1c4>
		goto err_exit;
	}
	
	if(netconn_printf(req->netconn, "}")) {
   82994:	6860      	ldr	r0, [r4, #4]
   82996:	492c      	ldr	r1, [pc, #176]	; (82a48 <execute_read_mem+0x214>)
   82998:	4b27      	ldr	r3, [pc, #156]	; (82a38 <execute_read_mem+0x204>)
   8299a:	4798      	blx	r3
   8299c:	4605      	mov	r5, r0
   8299e:	b328      	cbz	r0, 829ec <execute_read_mem+0x1b8>
		req_internal(req, "netconn_printf(})");
   829a0:	4b1b      	ldr	r3, [pc, #108]	; (82a10 <execute_read_mem+0x1dc>)
   829a2:	681b      	ldr	r3, [r3, #0]
   829a4:	68dd      	ldr	r5, [r3, #12]
   829a6:	4b1b      	ldr	r3, [pc, #108]	; (82a14 <execute_read_mem+0x1e0>)
   829a8:	4798      	blx	r3
   829aa:	6803      	ldr	r3, [r0, #0]
   829ac:	9300      	str	r3, [sp, #0]
   829ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   829b2:	9301      	str	r3, [sp, #4]
   829b4:	4b25      	ldr	r3, [pc, #148]	; (82a4c <execute_read_mem+0x218>)
   829b6:	9302      	str	r3, [sp, #8]
   829b8:	4628      	mov	r0, r5
   829ba:	4918      	ldr	r1, [pc, #96]	; (82a1c <execute_read_mem+0x1e8>)
   829bc:	4a18      	ldr	r2, [pc, #96]	; (82a20 <execute_read_mem+0x1ec>)
   829be:	f44f 73ac 	mov.w	r3, #344	; 0x158
   829c2:	4d18      	ldr	r5, [pc, #96]	; (82a24 <execute_read_mem+0x1f0>)
   829c4:	47a8      	blx	r5
   829c6:	68e3      	ldr	r3, [r4, #12]
   829c8:	b10b      	cbz	r3, 829ce <execute_read_mem+0x19a>
   829ca:	2bc8      	cmp	r3, #200	; 0xc8
   829cc:	d114      	bne.n	829f8 <execute_read_mem+0x1c4>
   829ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   829d2:	60e3      	str	r3, [r4, #12]
   829d4:	4b1d      	ldr	r3, [pc, #116]	; (82a4c <execute_read_mem+0x218>)
   829d6:	62a3      	str	r3, [r4, #40]	; 0x28
   829d8:	23ff      	movs	r3, #255	; 0xff
   829da:	8023      	strh	r3, [r4, #0]
   829dc:	4b12      	ldr	r3, [pc, #72]	; (82a28 <execute_read_mem+0x1f4>)
   829de:	61e3      	str	r3, [r4, #28]
   829e0:	f44f 73ac 	mov.w	r3, #344	; 0x158
   829e4:	6263      	str	r3, [r4, #36]	; 0x24
   829e6:	4b0e      	ldr	r3, [pc, #56]	; (82a20 <execute_read_mem+0x1ec>)
   829e8:	6223      	str	r3, [r4, #32]
   829ea:	e005      	b.n	829f8 <execute_read_mem+0x1c4>
		goto err_exit;
	}
	memset(mem, 0, sizeof(struct mem_s));
   829ec:	4807      	ldr	r0, [pc, #28]	; (82a0c <execute_read_mem+0x1d8>)
   829ee:	2100      	movs	r1, #0
   829f0:	224c      	movs	r2, #76	; 0x4c
   829f2:	4b17      	ldr	r3, [pc, #92]	; (82a50 <execute_read_mem+0x21c>)
   829f4:	4798      	blx	r3
	return 0;
   829f6:	e006      	b.n	82a06 <execute_read_mem+0x1d2>
	
err_exit:	
	memset(mem, 0, sizeof(struct mem_s));
   829f8:	4804      	ldr	r0, [pc, #16]	; (82a0c <execute_read_mem+0x1d8>)
   829fa:	2100      	movs	r1, #0
   829fc:	224c      	movs	r2, #76	; 0x4c
   829fe:	4b14      	ldr	r3, [pc, #80]	; (82a50 <execute_read_mem+0x21c>)
   82a00:	4798      	blx	r3
	return -1;
   82a02:	f04f 35ff 	mov.w	r5, #4294967295
}
   82a06:	4628      	mov	r0, r5
   82a08:	b005      	add	sp, #20
   82a0a:	bd30      	pop	{r4, r5, pc}
   82a0c:	20070ba4 	.word	0x20070ba4
   82a10:	200702c8 	.word	0x200702c8
   82a14:	0008c775 	.word	0x0008c775
   82a18:	000b099c 	.word	0x000b099c
   82a1c:	000b08b0 	.word	0x000b08b0
   82a20:	000b0e8c 	.word	0x000b0e8c
   82a24:	0008c7c7 	.word	0x0008c7c7
   82a28:	000b0940 	.word	0x000b0940
   82a2c:	00080a19 	.word	0x00080a19
   82a30:	000b0be4 	.word	0x000b0be4
   82a34:	000b0bf4 	.word	0x000b0bf4
   82a38:	000809a1 	.word	0x000809a1
   82a3c:	000b0c00 	.word	0x000b0c00
   82a40:	00082635 	.word	0x00082635
   82a44:	000b0c1c 	.word	0x000b0c1c
   82a48:	000b0c34 	.word	0x000b0c34
   82a4c:	000b0c38 	.word	0x000b0c38
   82a50:	0008ccbb 	.word	0x0008ccbb

00082a54 <__push_data>:
 */
 


void __push_data(struct mem_s *buf, base_t data)
{
   82a54:	b570      	push	{r4, r5, r6, lr}
   82a56:	4604      	mov	r4, r0
   82a58:	460d      	mov	r5, r1
	if(buf->length < MAX_MEM_BUF_LEN) {
   82a5a:	6843      	ldr	r3, [r0, #4]
   82a5c:	2b0f      	cmp	r3, #15
   82a5e:	d805      	bhi.n	82a6c <__push_data+0x18>
		buf->data[buf->length++] = data;
   82a60:	1c5a      	adds	r2, r3, #1
   82a62:	6042      	str	r2, [r0, #4]
   82a64:	3302      	adds	r3, #2
   82a66:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		return;
   82a6a:	bd70      	pop	{r4, r5, r6, pc}
	}
	
	dbg("Write %d", buf->length);
   82a6c:	480c      	ldr	r0, [pc, #48]	; (82aa0 <__push_data+0x4c>)
   82a6e:	490d      	ldr	r1, [pc, #52]	; (82aa4 <__push_data+0x50>)
   82a70:	f240 1271 	movw	r2, #369	; 0x171
   82a74:	4e0c      	ldr	r6, [pc, #48]	; (82aa8 <__push_data+0x54>)
   82a76:	47b0      	blx	r6
	write_memory(buf->addr, buf->data, buf->length);
   82a78:	f104 0608 	add.w	r6, r4, #8
   82a7c:	6820      	ldr	r0, [r4, #0]
   82a7e:	4631      	mov	r1, r6
   82a80:	6862      	ldr	r2, [r4, #4]
   82a82:	4b0a      	ldr	r3, [pc, #40]	; (82aac <__push_data+0x58>)
   82a84:	4798      	blx	r3
	
	buf->addr += buf->length;
   82a86:	6822      	ldr	r2, [r4, #0]
   82a88:	6863      	ldr	r3, [r4, #4]
   82a8a:	4413      	add	r3, r2
   82a8c:	6023      	str	r3, [r4, #0]

	memset(buf->data, 0, sizeof(base_t) * MAX_MEM_BUF_LEN);
   82a8e:	4630      	mov	r0, r6
   82a90:	2100      	movs	r1, #0
   82a92:	2240      	movs	r2, #64	; 0x40
   82a94:	4b06      	ldr	r3, [pc, #24]	; (82ab0 <__push_data+0x5c>)
   82a96:	4798      	blx	r3
	
	buf->length = 1;
   82a98:	2301      	movs	r3, #1
   82a9a:	6063      	str	r3, [r4, #4]
	buf->data[0] = data;
   82a9c:	60a5      	str	r5, [r4, #8]
   82a9e:	bd70      	pop	{r4, r5, r6, pc}
   82aa0:	000b0c4c 	.word	0x000b0c4c
   82aa4:	000b0eb4 	.word	0x000b0eb4
   82aa8:	0008c839 	.word	0x0008c839
   82aac:	00081755 	.word	0x00081755
   82ab0:	0008ccbb 	.word	0x0008ccbb

00082ab4 <__cb_wmem_data>:
}
int __cb_wmem_data(xjson *b, int index, offset oval, int vlen,  void *varg)
{
   82ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82ab8:	b086      	sub	sp, #24
   82aba:	4607      	mov	r7, r0
   82abc:	460c      	mov	r4, r1
   82abe:	4615      	mov	r5, r2
   82ac0:	4698      	mov	r8, r3
   82ac2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
	struct mem_s *mem = (struct mem_s *) varg;
	char  svalue[MAX_STR_BASE_T + 1];
	base_t value;
	int i;
	
	dbg("Index %d", index);
   82ac6:	482a      	ldr	r0, [pc, #168]	; (82b70 <__cb_wmem_data+0xbc>)
   82ac8:	492a      	ldr	r1, [pc, #168]	; (82b74 <__cb_wmem_data+0xc0>)
   82aca:	f44f 72c1 	mov.w	r2, #386	; 0x182
   82ace:	4623      	mov	r3, r4
   82ad0:	4c29      	ldr	r4, [pc, #164]	; (82b78 <__cb_wmem_data+0xc4>)
   82ad2:	47a0      	blx	r4
	
	for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval) && i < vlen; ++i)
   82ad4:	6838      	ldr	r0, [r7, #0]
   82ad6:	8903      	ldrh	r3, [r0, #8]
   82ad8:	429d      	cmp	r5, r3
   82ada:	d216      	bcs.n	82b0a <__cb_wmem_data+0x56>
   82adc:	f1b8 0f00 	cmp.w	r8, #0
   82ae0:	bfd8      	it	le
   82ae2:	2400      	movle	r4, #0
   82ae4:	dd12      	ble.n	82b0c <__cb_wmem_data+0x58>
   82ae6:	e035      	b.n	82b54 <__cb_wmem_data+0xa0>
   82ae8:	1961      	adds	r1, r4, r5
		svalue[i] = at(b, oval + i);		
   82aea:	b289      	uxth	r1, r1
   82aec:	47c8      	blx	r9
   82aee:	ab01      	add	r3, sp, #4
   82af0:	5598      	strb	r0, [r3, r6]
	base_t value;
	int i;
	
	dbg("Index %d", index);
	
	for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval) && i < vlen; ++i)
   82af2:	3401      	adds	r4, #1
   82af4:	2c10      	cmp	r4, #16
   82af6:	d009      	beq.n	82b0c <__cb_wmem_data+0x58>
   82af8:	4626      	mov	r6, r4
   82afa:	6838      	ldr	r0, [r7, #0]
   82afc:	8902      	ldrh	r2, [r0, #8]
   82afe:	1963      	adds	r3, r4, r5
   82b00:	429a      	cmp	r2, r3
   82b02:	d903      	bls.n	82b0c <__cb_wmem_data+0x58>
   82b04:	4544      	cmp	r4, r8
   82b06:	d1ef      	bne.n	82ae8 <__cb_wmem_data+0x34>
   82b08:	e000      	b.n	82b0c <__cb_wmem_data+0x58>
   82b0a:	2400      	movs	r4, #0
		svalue[i] = at(b, oval + i);		
	svalue[i] = '\0';
   82b0c:	ab06      	add	r3, sp, #24
   82b0e:	441c      	add	r4, r3
   82b10:	2300      	movs	r3, #0
   82b12:	f804 3c14 	strb.w	r3, [r4, #-20]
	dbg("Value %s", svalue);
   82b16:	4819      	ldr	r0, [pc, #100]	; (82b7c <__cb_wmem_data+0xc8>)
   82b18:	4916      	ldr	r1, [pc, #88]	; (82b74 <__cb_wmem_data+0xc0>)
   82b1a:	f240 1287 	movw	r2, #391	; 0x187
   82b1e:	ab01      	add	r3, sp, #4
   82b20:	4c15      	ldr	r4, [pc, #84]	; (82b78 <__cb_wmem_data+0xc4>)
   82b22:	47a0      	blx	r4
	if( string_to_base(svalue, &value) == -1 ) {	
   82b24:	a801      	add	r0, sp, #4
   82b26:	4669      	mov	r1, sp
   82b28:	4b15      	ldr	r3, [pc, #84]	; (82b80 <__cb_wmem_data+0xcc>)
   82b2a:	4798      	blx	r3
   82b2c:	4604      	mov	r4, r0
   82b2e:	f1b0 3fff 	cmp.w	r0, #4294967295
   82b32:	d106      	bne.n	82b42 <__cb_wmem_data+0x8e>
		dbg("FAIL");
   82b34:	4813      	ldr	r0, [pc, #76]	; (82b84 <__cb_wmem_data+0xd0>)
   82b36:	490f      	ldr	r1, [pc, #60]	; (82b74 <__cb_wmem_data+0xc0>)
   82b38:	f240 1289 	movw	r2, #393	; 0x189
   82b3c:	4b0e      	ldr	r3, [pc, #56]	; (82b78 <__cb_wmem_data+0xc4>)
   82b3e:	4798      	blx	r3
		return -1;
   82b40:	e011      	b.n	82b66 <__cb_wmem_data+0xb2>
	}
	__push_data(mem, value);
   82b42:	4650      	mov	r0, sl
   82b44:	9900      	ldr	r1, [sp, #0]
   82b46:	4b10      	ldr	r3, [pc, #64]	; (82b88 <__cb_wmem_data+0xd4>)
   82b48:	4798      	blx	r3
	
	mem->ok = 1;
   82b4a:	2301      	movs	r3, #1
   82b4c:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
	return 0;
   82b50:	2400      	movs	r4, #0
   82b52:	e008      	b.n	82b66 <__cb_wmem_data+0xb2>
	int i;
	
	dbg("Index %d", index);
	
	for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval) && i < vlen; ++i)
		svalue[i] = at(b, oval + i);		
   82b54:	b2a9      	uxth	r1, r5
   82b56:	4b0d      	ldr	r3, [pc, #52]	; (82b8c <__cb_wmem_data+0xd8>)
   82b58:	4798      	blx	r3
   82b5a:	f88d 0004 	strb.w	r0, [sp, #4]
	base_t value;
	int i;
	
	dbg("Index %d", index);
	
	for(i=0; i < MAX_STR_BASE_T && ok(b, i + oval) && i < vlen; ++i)
   82b5e:	2401      	movs	r4, #1
		svalue[i] = at(b, oval + i);		
   82b60:	f8df 9028 	ldr.w	r9, [pc, #40]	; 82b8c <__cb_wmem_data+0xd8>
   82b64:	e7c8      	b.n	82af8 <__cb_wmem_data+0x44>
	}
	__push_data(mem, value);
	
	mem->ok = 1;
	return 0;
}
   82b66:	4620      	mov	r0, r4
   82b68:	b006      	add	sp, #24
   82b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82b6e:	bf00      	nop
   82b70:	000b0cbc 	.word	0x000b0cbc
   82b74:	000b0824 	.word	0x000b0824
   82b78:	0008c839 	.word	0x0008c839
   82b7c:	000b0d2c 	.word	0x000b0d2c
   82b80:	00081591 	.word	0x00081591
   82b84:	000b0d9c 	.word	0x000b0d9c
   82b88:	00082a55 	.word	0x00082a55
   82b8c:	00088451 	.word	0x00088451

00082b90 <execute_post_method>:
		.name = "mem.write",
	},
};

int execute_post_method(struct http_request *req, struct netbuf *body, int skip)
{
   82b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   82b92:	b087      	sub	sp, #28
   82b94:	4604      	mov	r4, r0
   82b96:	460f      	mov	r7, r1
   82b98:	4616      	mov	r6, r2
	struct post_method *m = req->method;
   82b9a:	6885      	ldr	r5, [r0, #8]
	struct parse_cb_arg arg = { .m = m, .req = req };
   82b9c:	9504      	str	r5, [sp, #16]
   82b9e:	9005      	str	r0, [sp, #20]
	int rv = 0;
	
	if(take_api()) {
   82ba0:	4b3a      	ldr	r3, [pc, #232]	; (82c8c <execute_post_method+0xfc>)
   82ba2:	4798      	blx	r3
   82ba4:	2800      	cmp	r0, #0
   82ba6:	d027      	beq.n	82bf8 <execute_post_method+0x68>
		req_err(req, 505, "failed to take_api()");
   82ba8:	4b39      	ldr	r3, [pc, #228]	; (82c90 <execute_post_method+0x100>)
   82baa:	681b      	ldr	r3, [r3, #0]
   82bac:	68dd      	ldr	r5, [r3, #12]
   82bae:	4b39      	ldr	r3, [pc, #228]	; (82c94 <execute_post_method+0x104>)
   82bb0:	4798      	blx	r3
   82bb2:	6803      	ldr	r3, [r0, #0]
   82bb4:	9300      	str	r3, [sp, #0]
   82bb6:	f240 13f9 	movw	r3, #505	; 0x1f9
   82bba:	9301      	str	r3, [sp, #4]
   82bbc:	4b36      	ldr	r3, [pc, #216]	; (82c98 <execute_post_method+0x108>)
   82bbe:	9302      	str	r3, [sp, #8]
   82bc0:	4628      	mov	r0, r5
   82bc2:	4936      	ldr	r1, [pc, #216]	; (82c9c <execute_post_method+0x10c>)
   82bc4:	4a36      	ldr	r2, [pc, #216]	; (82ca0 <execute_post_method+0x110>)
   82bc6:	f44f 7301 	mov.w	r3, #516	; 0x204
   82bca:	4d36      	ldr	r5, [pc, #216]	; (82ca4 <execute_post_method+0x114>)
   82bcc:	47a8      	blx	r5
   82bce:	68e3      	ldr	r3, [r4, #12]
   82bd0:	b10b      	cbz	r3, 82bd6 <execute_post_method+0x46>
   82bd2:	2bc8      	cmp	r3, #200	; 0xc8
   82bd4:	d155      	bne.n	82c82 <execute_post_method+0xf2>
   82bd6:	f240 13f9 	movw	r3, #505	; 0x1f9
   82bda:	60e3      	str	r3, [r4, #12]
   82bdc:	4b2e      	ldr	r3, [pc, #184]	; (82c98 <execute_post_method+0x108>)
   82bde:	62a3      	str	r3, [r4, #40]	; 0x28
   82be0:	23ff      	movs	r3, #255	; 0xff
   82be2:	8023      	strh	r3, [r4, #0]
   82be4:	4b30      	ldr	r3, [pc, #192]	; (82ca8 <execute_post_method+0x118>)
   82be6:	61e3      	str	r3, [r4, #28]
   82be8:	f44f 7301 	mov.w	r3, #516	; 0x204
   82bec:	6263      	str	r3, [r4, #36]	; 0x24
   82bee:	4b2c      	ldr	r3, [pc, #176]	; (82ca0 <execute_post_method+0x110>)
   82bf0:	6223      	str	r3, [r4, #32]
		return -1;
   82bf2:	f04f 30ff 	mov.w	r0, #4294967295
   82bf6:	e046      	b.n	82c86 <execute_post_method+0xf6>
	}
	
	if(m->parse_object || m->parse_array) {
   82bf8:	68ab      	ldr	r3, [r5, #8]
   82bfa:	b913      	cbnz	r3, 82c02 <execute_post_method+0x72>
   82bfc:	686b      	ldr	r3, [r5, #4]
   82bfe:	2b00      	cmp	r3, #0
   82c00:	d030      	beq.n	82c64 <execute_post_method+0xd4>
		if(JSON_decode_object( body, skip, cb_first_parse, (void *) &arg ) == -1) {
   82c02:	4638      	mov	r0, r7
   82c04:	4631      	mov	r1, r6
   82c06:	4a29      	ldr	r2, [pc, #164]	; (82cac <execute_post_method+0x11c>)
   82c08:	ab04      	add	r3, sp, #16
   82c0a:	4e29      	ldr	r6, [pc, #164]	; (82cb0 <execute_post_method+0x120>)
   82c0c:	47b0      	blx	r6
   82c0e:	f1b0 3fff 	cmp.w	r0, #4294967295
   82c12:	d127      	bne.n	82c64 <execute_post_method+0xd4>
			req_err(req, 401, "filed to parse json object");			
   82c14:	4b1e      	ldr	r3, [pc, #120]	; (82c90 <execute_post_method+0x100>)
   82c16:	681b      	ldr	r3, [r3, #0]
   82c18:	68dd      	ldr	r5, [r3, #12]
   82c1a:	4b1e      	ldr	r3, [pc, #120]	; (82c94 <execute_post_method+0x104>)
   82c1c:	4798      	blx	r3
   82c1e:	6803      	ldr	r3, [r0, #0]
   82c20:	9300      	str	r3, [sp, #0]
   82c22:	f240 1391 	movw	r3, #401	; 0x191
   82c26:	9301      	str	r3, [sp, #4]
   82c28:	4b22      	ldr	r3, [pc, #136]	; (82cb4 <execute_post_method+0x124>)
   82c2a:	9302      	str	r3, [sp, #8]
   82c2c:	4628      	mov	r0, r5
   82c2e:	491b      	ldr	r1, [pc, #108]	; (82c9c <execute_post_method+0x10c>)
   82c30:	4a1b      	ldr	r2, [pc, #108]	; (82ca0 <execute_post_method+0x110>)
   82c32:	f240 230a 	movw	r3, #522	; 0x20a
   82c36:	4d1b      	ldr	r5, [pc, #108]	; (82ca4 <execute_post_method+0x114>)
   82c38:	47a8      	blx	r5
   82c3a:	68e3      	ldr	r3, [r4, #12]
   82c3c:	b10b      	cbz	r3, 82c42 <execute_post_method+0xb2>
   82c3e:	2bc8      	cmp	r3, #200	; 0xc8
   82c40:	d117      	bne.n	82c72 <execute_post_method+0xe2>
   82c42:	f240 1391 	movw	r3, #401	; 0x191
   82c46:	60e3      	str	r3, [r4, #12]
   82c48:	4b1a      	ldr	r3, [pc, #104]	; (82cb4 <execute_post_method+0x124>)
   82c4a:	62a3      	str	r3, [r4, #40]	; 0x28
   82c4c:	23ff      	movs	r3, #255	; 0xff
   82c4e:	8023      	strh	r3, [r4, #0]
   82c50:	4b15      	ldr	r3, [pc, #84]	; (82ca8 <execute_post_method+0x118>)
   82c52:	61e3      	str	r3, [r4, #28]
   82c54:	f240 230a 	movw	r3, #522	; 0x20a
   82c58:	6263      	str	r3, [r4, #36]	; 0x24
   82c5a:	4b11      	ldr	r3, [pc, #68]	; (82ca0 <execute_post_method+0x110>)
   82c5c:	6223      	str	r3, [r4, #32]
			rv = -1;		
   82c5e:	f04f 34ff 	mov.w	r4, #4294967295
   82c62:	e00a      	b.n	82c7a <execute_post_method+0xea>
			goto ret;
		}
	}
	if(!m->execute) 
   82c64:	682b      	ldr	r3, [r5, #0]
   82c66:	b13b      	cbz	r3, 82c78 <execute_post_method+0xe8>
		goto ret;
			
	rv = m->execute(m, req);
   82c68:	4628      	mov	r0, r5
   82c6a:	4621      	mov	r1, r4
   82c6c:	4798      	blx	r3
   82c6e:	4604      	mov	r4, r0
   82c70:	e003      	b.n	82c7a <execute_post_method+0xea>
	}
	
	if(m->parse_object || m->parse_array) {
		if(JSON_decode_object( body, skip, cb_first_parse, (void *) &arg ) == -1) {
			req_err(req, 401, "filed to parse json object");			
			rv = -1;		
   82c72:	f04f 34ff 	mov.w	r4, #4294967295
   82c76:	e000      	b.n	82c7a <execute_post_method+0xea>

int execute_post_method(struct http_request *req, struct netbuf *body, int skip)
{
	struct post_method *m = req->method;
	struct parse_cb_arg arg = { .m = m, .req = req };
	int rv = 0;
   82c78:	2400      	movs	r4, #0
	if(!m->execute) 
		goto ret;
			
	rv = m->execute(m, req);
ret:
	release_api();
   82c7a:	4b0f      	ldr	r3, [pc, #60]	; (82cb8 <execute_post_method+0x128>)
   82c7c:	4798      	blx	r3
	return rv; 
   82c7e:	4620      	mov	r0, r4
   82c80:	e001      	b.n	82c86 <execute_post_method+0xf6>
	struct parse_cb_arg arg = { .m = m, .req = req };
	int rv = 0;
	
	if(take_api()) {
		req_err(req, 505, "failed to take_api()");
		return -1;
   82c82:	f04f 30ff 	mov.w	r0, #4294967295
			
	rv = m->execute(m, req);
ret:
	release_api();
	return rv; 
}
   82c86:	b007      	add	sp, #28
   82c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c8a:	bf00      	nop
   82c8c:	000817ad 	.word	0x000817ad
   82c90:	200702c8 	.word	0x200702c8
   82c94:	0008c775 	.word	0x0008c775
   82c98:	000b0e08 	.word	0x000b0e08
   82c9c:	000b08b0 	.word	0x000b08b0
   82ca0:	000b0ea0 	.word	0x000b0ea0
   82ca4:	0008c7c7 	.word	0x0008c7c7
   82ca8:	000b0940 	.word	0x000b0940
   82cac:	00081921 	.word	0x00081921
   82cb0:	00080715 	.word	0x00080715
   82cb4:	000b0e20 	.word	0x000b0e20
   82cb8:	0008177d 	.word	0x0008177d

00082cbc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82cbc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82cbe:	480d      	ldr	r0, [pc, #52]	; (82cf4 <sysclk_init+0x38>)
   82cc0:	4b0d      	ldr	r3, [pc, #52]	; (82cf8 <sysclk_init+0x3c>)
   82cc2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82cc4:	2000      	movs	r0, #0
   82cc6:	213e      	movs	r1, #62	; 0x3e
   82cc8:	4b0c      	ldr	r3, [pc, #48]	; (82cfc <sysclk_init+0x40>)
   82cca:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82ccc:	4c0c      	ldr	r4, [pc, #48]	; (82d00 <sysclk_init+0x44>)
   82cce:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82cd0:	2800      	cmp	r0, #0
   82cd2:	d0fc      	beq.n	82cce <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82cd4:	4b0b      	ldr	r3, [pc, #44]	; (82d04 <sysclk_init+0x48>)
   82cd6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82cd8:	4a0b      	ldr	r2, [pc, #44]	; (82d08 <sysclk_init+0x4c>)
   82cda:	4b0c      	ldr	r3, [pc, #48]	; (82d0c <sysclk_init+0x50>)
   82cdc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82cde:	4c0c      	ldr	r4, [pc, #48]	; (82d10 <sysclk_init+0x54>)
   82ce0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82ce2:	2800      	cmp	r0, #0
   82ce4:	d0fc      	beq.n	82ce0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82ce6:	2000      	movs	r0, #0
   82ce8:	4b0a      	ldr	r3, [pc, #40]	; (82d14 <sysclk_init+0x58>)
   82cea:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82cec:	4b0a      	ldr	r3, [pc, #40]	; (82d18 <sysclk_init+0x5c>)
   82cee:	4798      	blx	r3
   82cf0:	bd10      	pop	{r4, pc}
   82cf2:	bf00      	nop
   82cf4:	0501bd00 	.word	0x0501bd00
   82cf8:	00083de5 	.word	0x00083de5
   82cfc:	00083a7d 	.word	0x00083a7d
   82d00:	00083ad1 	.word	0x00083ad1
   82d04:	00083ae1 	.word	0x00083ae1
   82d08:	20063f01 	.word	0x20063f01
   82d0c:	400e0600 	.word	0x400e0600
   82d10:	00083af1 	.word	0x00083af1
   82d14:	00083a19 	.word	0x00083a19
   82d18:	00083cc9 	.word	0x00083cc9

00082d1c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   82d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d20:	460c      	mov	r4, r1
   82d22:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   82d24:	b960      	cbnz	r0, 82d40 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   82d26:	2a00      	cmp	r2, #0
   82d28:	dd0e      	ble.n	82d48 <_read+0x2c>
   82d2a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   82d2c:	4e09      	ldr	r6, [pc, #36]	; (82d54 <_read+0x38>)
   82d2e:	4d0a      	ldr	r5, [pc, #40]	; (82d58 <_read+0x3c>)
   82d30:	6830      	ldr	r0, [r6, #0]
   82d32:	4621      	mov	r1, r4
   82d34:	682b      	ldr	r3, [r5, #0]
   82d36:	4798      	blx	r3
		ptr++;
   82d38:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   82d3a:	42bc      	cmp	r4, r7
   82d3c:	d1f8      	bne.n	82d30 <_read+0x14>
   82d3e:	e006      	b.n	82d4e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   82d40:	f04f 30ff 	mov.w	r0, #4294967295
   82d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   82d48:	2000      	movs	r0, #0
   82d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   82d4e:	4640      	mov	r0, r8
	}
	return nChars;
}
   82d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d54:	20075b24 	.word	0x20075b24
   82d58:	20075b1c 	.word	0x20075b1c

00082d5c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   82d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d60:	460e      	mov	r6, r1
   82d62:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   82d64:	3801      	subs	r0, #1
   82d66:	2802      	cmp	r0, #2
   82d68:	d80f      	bhi.n	82d8a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   82d6a:	b192      	cbz	r2, 82d92 <_write+0x36>
   82d6c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   82d6e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 82dac <_write+0x50>
   82d72:	4f0d      	ldr	r7, [pc, #52]	; (82da8 <_write+0x4c>)
   82d74:	f8d8 0000 	ldr.w	r0, [r8]
   82d78:	5d31      	ldrb	r1, [r6, r4]
   82d7a:	683b      	ldr	r3, [r7, #0]
   82d7c:	4798      	blx	r3
   82d7e:	2800      	cmp	r0, #0
   82d80:	db0a      	blt.n	82d98 <_write+0x3c>
			return -1;
		}
		++nChars;
   82d82:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   82d84:	42a5      	cmp	r5, r4
   82d86:	d1f5      	bne.n	82d74 <_write+0x18>
   82d88:	e00a      	b.n	82da0 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   82d8a:	f04f 30ff 	mov.w	r0, #4294967295
   82d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   82d92:	2000      	movs	r0, #0
   82d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   82d98:	f04f 30ff 	mov.w	r0, #4294967295
   82d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   82da0:	4620      	mov	r0, r4
	}
	return nChars;
}
   82da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82da6:	bf00      	nop
   82da8:	20075b20 	.word	0x20075b20
   82dac:	20075b24 	.word	0x20075b24

00082db0 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   82db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82db4:	4606      	mov	r6, r0
   82db6:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82db8:	4d0a      	ldr	r5, [pc, #40]	; (82de4 <LED_Off+0x34>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   82dba:	4f0b      	ldr	r7, [pc, #44]	; (82de8 <LED_Off+0x38>)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   82dbc:	f8df 802c 	ldr.w	r8, [pc, #44]	; 82dec <LED_Off+0x3c>
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82dc0:	5963      	ldr	r3, [r4, r5]
   82dc2:	42b3      	cmp	r3, r6
   82dc4:	d108      	bne.n	82dd8 <LED_Off+0x28>
   82dc6:	192b      	adds	r3, r5, r4
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82dc8:	685b      	ldr	r3, [r3, #4]
   82dca:	2b01      	cmp	r3, #1
   82dcc:	d102      	bne.n	82dd4 <LED_Off+0x24>
				gpio_set_pin_low(led_gpio);
   82dce:	4630      	mov	r0, r6
   82dd0:	47c0      	blx	r8
   82dd2:	e001      	b.n	82dd8 <LED_Off+0x28>
			} else {
				gpio_set_pin_high(led_gpio);
   82dd4:	4630      	mov	r0, r6
   82dd6:	47b8      	blx	r7
   82dd8:	3408      	adds	r4, #8
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82dda:	2c20      	cmp	r4, #32
   82ddc:	d1f0      	bne.n	82dc0 <LED_Off+0x10>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   82dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82de2:	bf00      	nop
   82de4:	000b0ed8 	.word	0x000b0ed8
   82de8:	00083825 	.word	0x00083825
   82dec:	00083841 	.word	0x00083841

00082df0 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   82df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82df4:	4606      	mov	r6, r0
   82df6:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82df8:	4d0a      	ldr	r5, [pc, #40]	; (82e24 <LED_On+0x34>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   82dfa:	4f0b      	ldr	r7, [pc, #44]	; (82e28 <LED_On+0x38>)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   82dfc:	f8df 802c 	ldr.w	r8, [pc, #44]	; 82e2c <LED_On+0x3c>
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82e00:	5963      	ldr	r3, [r4, r5]
   82e02:	42b3      	cmp	r3, r6
   82e04:	d108      	bne.n	82e18 <LED_On+0x28>
   82e06:	192b      	adds	r3, r5, r4
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82e08:	685b      	ldr	r3, [r3, #4]
   82e0a:	2b01      	cmp	r3, #1
   82e0c:	d102      	bne.n	82e14 <LED_On+0x24>
				gpio_set_pin_high(led_gpio);
   82e0e:	4630      	mov	r0, r6
   82e10:	47c0      	blx	r8
   82e12:	e001      	b.n	82e18 <LED_On+0x28>
			} else {
				gpio_set_pin_low(led_gpio);
   82e14:	4630      	mov	r0, r6
   82e16:	47b8      	blx	r7
   82e18:	3408      	adds	r4, #8
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82e1a:	2c20      	cmp	r4, #32
   82e1c:	d1f0      	bne.n	82e00 <LED_On+0x10>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   82e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e22:	bf00      	nop
   82e24:	000b0ed8 	.word	0x000b0ed8
   82e28:	00083841 	.word	0x00083841
   82e2c:	00083825 	.word	0x00083825

00082e30 <ethernet_phy_set_link>:
 *
 * Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout. 
 */
uint8_t ethernet_phy_set_link(Emac *p_emac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
   82e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   82e32:	b083      	sub	sp, #12
   82e34:	4604      	mov	r4, r0
   82e36:	460f      	mov	r7, r1
   82e38:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable EMAC management, else to enable it.
 */
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
   82e3a:	6803      	ldr	r3, [r0, #0]
   82e3c:	f043 0310 	orr.w	r3, r3, #16
   82e40:	6003      	str	r3, [r0, #0]

	emac_enable_management(p_emac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = emac_phy_read(p_emac, uc_phy_address, MII_BMSR, &ul_stat1);
   82e42:	2201      	movs	r2, #1
   82e44:	ab01      	add	r3, sp, #4
   82e46:	4d30      	ldr	r5, [pc, #192]	; (82f08 <ethernet_phy_set_link+0xd8>)
   82e48:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   82e4a:	b120      	cbz	r0, 82e56 <ethernet_phy_set_link+0x26>
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   82e4c:	6822      	ldr	r2, [r4, #0]
   82e4e:	f022 0210 	bic.w	r2, r2, #16
   82e52:	6022      	str	r2, [r4, #0]
		/* Disable PHY management and start the EMAC transfer */
		emac_enable_management(p_emac, false);

		return uc_rc;
   82e54:	e056      	b.n	82f04 <ethernet_phy_set_link+0xd4>
	}

	if ((ul_stat1 & MII_LINK_STATUS) == 0) {
   82e56:	9b01      	ldr	r3, [sp, #4]
   82e58:	f013 0f04 	tst.w	r3, #4
   82e5c:	d105      	bne.n	82e6a <ethernet_phy_set_link+0x3a>
   82e5e:	6823      	ldr	r3, [r4, #0]
   82e60:	f023 0310 	bic.w	r3, r3, #16
   82e64:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the EMAC transfer */
		emac_enable_management(p_emac, false);

		return EMAC_INVALID;
   82e66:	20ff      	movs	r0, #255	; 0xff
   82e68:	e04c      	b.n	82f04 <ethernet_phy_set_link+0xd4>
	}

	if (uc_apply_setting_flag == 0) {
   82e6a:	b92e      	cbnz	r6, 82e78 <ethernet_phy_set_link+0x48>
   82e6c:	6823      	ldr	r3, [r4, #0]
   82e6e:	f023 0310 	bic.w	r3, r3, #16
   82e72:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the EMAC transfer */
		emac_enable_management(p_emac, false);

		return uc_rc;
   82e74:	2000      	movs	r0, #0
   82e76:	e045      	b.n	82f04 <ethernet_phy_set_link+0xd4>
	}

	/* Re-configure Link speed */
	uc_rc = emac_phy_read(p_emac, uc_phy_address, MII_DSCSR, &ul_stat2);
   82e78:	4620      	mov	r0, r4
   82e7a:	4639      	mov	r1, r7
   82e7c:	2211      	movs	r2, #17
   82e7e:	466b      	mov	r3, sp
   82e80:	4d21      	ldr	r5, [pc, #132]	; (82f08 <ethernet_phy_set_link+0xd8>)
   82e82:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   82e84:	b120      	cbz	r0, 82e90 <ethernet_phy_set_link+0x60>
   82e86:	6822      	ldr	r2, [r4, #0]
   82e88:	f022 0210 	bic.w	r2, r2, #16
   82e8c:	6022      	str	r2, [r4, #0]
		/* Disable PHY management and start the EMAC transfer */
		emac_enable_management(p_emac, false);

		return uc_rc;
   82e8e:	e039      	b.n	82f04 <ethernet_phy_set_link+0xd4>
	}

	if ((ul_stat1 & MII_100BASE_TX_FD) && (ul_stat2 & MII_100FDX)) {
   82e90:	9b01      	ldr	r3, [sp, #4]
		/* Set EMAC for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
	}

	if ((ul_stat1 & MII_10BASE_T_FD) && (ul_stat2 & MII_10FDX)) {
   82e92:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   82e96:	bf1d      	ittte	ne
   82e98:	9a00      	ldrne	r2, [sp, #0]
   82e9a:	f482 5200 	eorne.w	r2, r2, #8192	; 0x2000
   82e9e:	f3c2 3240 	ubfxne	r2, r2, #13, #1
   82ea2:	2201      	moveq	r2, #1
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
		uc_fd = true;
	}

	if ((ul_stat1 & MII_100BASE_T4_HD) && (ul_stat2 & MII_100HDX)) {
   82ea4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   82ea8:	d00a      	beq.n	82ec0 <ethernet_phy_set_link+0x90>
   82eaa:	9800      	ldr	r0, [sp, #0]
   82eac:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
   82eb0:	f1d0 0101 	rsbs	r1, r0, #1
   82eb4:	bf38      	it	cc
   82eb6:	2100      	movcc	r1, #0
   82eb8:	2800      	cmp	r0, #0
   82eba:	bf18      	it	ne
   82ebc:	2201      	movne	r2, #1
   82ebe:	e000      	b.n	82ec2 <ethernet_phy_set_link+0x92>
   82ec0:	2101      	movs	r1, #1
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
	}

	if ((ul_stat1 & MII_10BASE_T_HD) && (ul_stat2 & MII_10HDX)) {
   82ec2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   82ec6:	d003      	beq.n	82ed0 <ethernet_phy_set_link+0xa0>
   82ec8:	9b00      	ldr	r3, [sp, #0]
   82eca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   82ece:	d105      	bne.n	82edc <ethernet_phy_set_link+0xac>
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void emac_set_speed(Emac* p_emac, uint8_t uc_speed)
{
	if (uc_speed) {
   82ed0:	b12a      	cbz	r2, 82ede <ethernet_phy_set_link+0xae>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_SPD;
   82ed2:	6863      	ldr	r3, [r4, #4]
   82ed4:	f043 0301 	orr.w	r3, r3, #1
   82ed8:	6063      	str	r3, [r4, #4]
   82eda:	e004      	b.n	82ee6 <ethernet_phy_set_link+0xb6>
		/* Set MII for 10BaseT and Half Duplex */
		uc_speed = false;
		uc_fd = false;
   82edc:	2100      	movs	r1, #0
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_SPD;
   82ede:	6863      	ldr	r3, [r4, #4]
   82ee0:	f023 0301 	bic.w	r3, r3, #1
   82ee4:	6063      	str	r3, [r4, #4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void emac_enable_full_duplex(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
   82ee6:	b121      	cbz	r1, 82ef2 <ethernet_phy_set_link+0xc2>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_FD;
   82ee8:	6863      	ldr	r3, [r4, #4]
   82eea:	f043 0302 	orr.w	r3, r3, #2
   82eee:	6063      	str	r3, [r4, #4]
   82ef0:	e003      	b.n	82efa <ethernet_phy_set_link+0xca>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_FD;
   82ef2:	6863      	ldr	r3, [r4, #4]
   82ef4:	f023 0302 	bic.w	r3, r3, #2
   82ef8:	6063      	str	r3, [r4, #4]
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   82efa:	6823      	ldr	r3, [r4, #0]
   82efc:	f023 0310 	bic.w	r3, r3, #16
   82f00:	6023      	str	r3, [r4, #0]
	emac_set_speed(p_emac, uc_speed);
	emac_enable_full_duplex(p_emac, uc_fd);

	/* Start the EMAC transfers */
	emac_enable_management(p_emac, false);
	return uc_rc;
   82f02:	2000      	movs	r0, #0
}
   82f04:	b003      	add	sp, #12
   82f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82f08:	00083281 	.word	0x00083281

00082f0c <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout. 
 */
uint8_t ethernet_phy_auto_negotiate(Emac *p_emac, uint8_t uc_phy_addr)
{
   82f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82f10:	b082      	sub	sp, #8
   82f12:	4604      	mov	r4, r0
   82f14:	460e      	mov	r6, r1
 * \param uc_enable   0 to disable EMAC management, else to enable it.
 */
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
   82f16:	6803      	ldr	r3, [r0, #0]
   82f18:	f043 0310 	orr.w	r3, r3, #16
   82f1c:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc = EMAC_TIMEOUT;

	emac_enable_management(p_emac, true);

	/* Set up control register */
	uc_rc = emac_phy_read(p_emac, uc_phy_addr, MII_BMCR, &ul_value);
   82f1e:	2200      	movs	r2, #0
   82f20:	ab01      	add	r3, sp, #4
   82f22:	4d58      	ldr	r5, [pc, #352]	; (83084 <ethernet_phy_auto_negotiate+0x178>)
   82f24:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   82f26:	b120      	cbz	r0, 82f32 <ethernet_phy_auto_negotiate+0x26>
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   82f28:	6822      	ldr	r2, [r4, #0]
   82f2a:	f022 0210 	bic.w	r2, r2, #16
   82f2e:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   82f30:	e0a5      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>
	}

	ul_value &= ~MII_AUTONEG; /* Remove auto-negotiation enable */
	ul_value &= ~(MII_LOOPBACK | MII_POWER_DOWN);
   82f32:	9b01      	ldr	r3, [sp, #4]
   82f34:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= MII_ISOLATE; /* Electrically isolate PHY */
   82f38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   82f3c:	9301      	str	r3, [sp, #4]
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_BMCR, ul_value);
   82f3e:	4620      	mov	r0, r4
   82f40:	4631      	mov	r1, r6
   82f42:	2200      	movs	r2, #0
   82f44:	4d50      	ldr	r5, [pc, #320]	; (83088 <ethernet_phy_auto_negotiate+0x17c>)
   82f46:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   82f48:	b120      	cbz	r0, 82f54 <ethernet_phy_auto_negotiate+0x48>
   82f4a:	6822      	ldr	r2, [r4, #0]
   82f4c:	f022 0210 	bic.w	r2, r2, #16
   82f50:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   82f52:	e094      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>
	 * MII advertising for Next page.
	 * 100BaseTxFD and HD, 10BaseTFD and HD, IEEE 802.3.
	 */
	ul_phy_anar = MII_TX_FDX | MII_TX_HDX | MII_10_FDX | MII_10_HDX | 
			MII_AN_IEEE_802_3;
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_ANAR, ul_phy_anar);
   82f54:	4620      	mov	r0, r4
   82f56:	4631      	mov	r1, r6
   82f58:	2204      	movs	r2, #4
   82f5a:	f240 13e1 	movw	r3, #481	; 0x1e1
   82f5e:	4d4a      	ldr	r5, [pc, #296]	; (83088 <ethernet_phy_auto_negotiate+0x17c>)
   82f60:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   82f62:	b120      	cbz	r0, 82f6e <ethernet_phy_auto_negotiate+0x62>
   82f64:	6822      	ldr	r2, [r4, #0]
   82f66:	f022 0210 	bic.w	r2, r2, #16
   82f6a:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   82f6c:	e087      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>
	}

	/* Read & modify control register */
	uc_rc = emac_phy_read(p_emac, uc_phy_addr, MII_BMCR, &ul_value);
   82f6e:	4620      	mov	r0, r4
   82f70:	4631      	mov	r1, r6
   82f72:	2200      	movs	r2, #0
   82f74:	ab01      	add	r3, sp, #4
   82f76:	4d43      	ldr	r5, [pc, #268]	; (83084 <ethernet_phy_auto_negotiate+0x178>)
   82f78:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   82f7a:	b120      	cbz	r0, 82f86 <ethernet_phy_auto_negotiate+0x7a>
   82f7c:	6822      	ldr	r2, [r4, #0]
   82f7e:	f022 0210 	bic.w	r2, r2, #16
   82f82:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   82f84:	e07b      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>
	}

	ul_value |= MII_SPEED_SELECT | MII_AUTONEG | MII_DUPLEX_MODE;
   82f86:	9b01      	ldr	r3, [sp, #4]
   82f88:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
   82f8c:	9301      	str	r3, [sp, #4]
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_BMCR, ul_value);
   82f8e:	4620      	mov	r0, r4
   82f90:	4631      	mov	r1, r6
   82f92:	2200      	movs	r2, #0
   82f94:	4d3c      	ldr	r5, [pc, #240]	; (83088 <ethernet_phy_auto_negotiate+0x17c>)
   82f96:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   82f98:	b120      	cbz	r0, 82fa4 <ethernet_phy_auto_negotiate+0x98>
   82f9a:	6822      	ldr	r2, [r4, #0]
   82f9c:	f022 0210 	bic.w	r2, r2, #16
   82fa0:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   82fa2:	e06c      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>
	}

	/* Restart auto negotiation */
	ul_value |= MII_RESTART_AUTONEG;
	ul_value &= ~MII_ISOLATE;
   82fa4:	9b01      	ldr	r3, [sp, #4]
   82fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   82faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   82fae:	9301      	str	r3, [sp, #4]
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_BMCR, ul_value);
   82fb0:	4620      	mov	r0, r4
   82fb2:	4631      	mov	r1, r6
   82fb4:	2200      	movs	r2, #0
   82fb6:	4d34      	ldr	r5, [pc, #208]	; (83088 <ethernet_phy_auto_negotiate+0x17c>)
   82fb8:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   82fba:	b120      	cbz	r0, 82fc6 <ethernet_phy_auto_negotiate+0xba>
   82fbc:	6822      	ldr	r2, [r4, #0]
   82fbe:	f022 0210 	bic.w	r2, r2, #16
   82fc2:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   82fc4:	e05b      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>

	/* Restart auto negotiation */
	ul_value |= MII_RESTART_AUTONEG;
	ul_value &= ~MII_ISOLATE;
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_BMCR, ul_value);
	if (uc_rc != EMAC_OK) {
   82fc6:	4d31      	ldr	r5, [pc, #196]	; (8308c <ethernet_phy_auto_negotiate+0x180>)
		return uc_rc;
	}

	/* Check if auto negotiation is completed */
	while (1) {
		uc_rc = emac_phy_read(p_emac, uc_phy_addr, MII_BMSR, &ul_value);
   82fc8:	f04f 0801 	mov.w	r8, #1
   82fcc:	4f2d      	ldr	r7, [pc, #180]	; (83084 <ethernet_phy_auto_negotiate+0x178>)
   82fce:	4620      	mov	r0, r4
   82fd0:	4631      	mov	r1, r6
   82fd2:	4642      	mov	r2, r8
   82fd4:	ab01      	add	r3, sp, #4
   82fd6:	47b8      	blx	r7
		if (uc_rc != EMAC_OK) {
   82fd8:	b120      	cbz	r0, 82fe4 <ethernet_phy_auto_negotiate+0xd8>
   82fda:	6822      	ldr	r2, [r4, #0]
   82fdc:	f022 0210 	bic.w	r2, r2, #16
   82fe0:	6022      	str	r2, [r4, #0]
			emac_enable_management(p_emac, false);
			return uc_rc;
   82fe2:	e04c      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>
		}
		/* Done successfully */
		if (ul_value & MII_AUTONEG_COMP) {
   82fe4:	9b01      	ldr	r3, [sp, #4]
   82fe6:	f013 0f20 	tst.w	r3, #32
   82fea:	d107      	bne.n	82ffc <ethernet_phy_auto_negotiate+0xf0>
			break;
		}

		/* Timeout check */
		if (ul_retry_max) {
			if (++ul_retry_count >= ul_retry_max) {
   82fec:	3d01      	subs	r5, #1
   82fee:	d1ee      	bne.n	82fce <ethernet_phy_auto_negotiate+0xc2>
   82ff0:	6823      	ldr	r3, [r4, #0]
   82ff2:	f023 0310 	bic.w	r3, r3, #16
   82ff6:	6023      	str	r3, [r4, #0]
				emac_enable_management(p_emac, false);
				return EMAC_TIMEOUT;
   82ff8:	2001      	movs	r0, #1
   82ffa:	e040      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>
			}
		}
	}

	/* Get the auto negotiate link partner base page */
	uc_rc = emac_phy_read(p_emac, uc_phy_addr, MII_ANLPAR, &ul_phy_analpar);
   82ffc:	4620      	mov	r0, r4
   82ffe:	4631      	mov	r1, r6
   83000:	2205      	movs	r2, #5
   83002:	466b      	mov	r3, sp
   83004:	4d1f      	ldr	r5, [pc, #124]	; (83084 <ethernet_phy_auto_negotiate+0x178>)
   83006:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   83008:	b120      	cbz	r0, 83014 <ethernet_phy_auto_negotiate+0x108>
   8300a:	6822      	ldr	r2, [r4, #0]
   8300c:	f022 0210 	bic.w	r2, r2, #16
   83010:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   83012:	e034      	b.n	8307e <ethernet_phy_auto_negotiate+0x172>
	}

	/* Set up the EMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & MII_TX_FDX) {
   83014:	9b00      	ldr	r3, [sp, #0]
   83016:	f413 7f80 	tst.w	r3, #256	; 0x100
   8301a:	d109      	bne.n	83030 <ethernet_phy_auto_negotiate+0x124>
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
	} else if ((ul_phy_anar & ul_phy_analpar) & MII_10_FDX) {
   8301c:	f013 0f40 	tst.w	r3, #64	; 0x40
   83020:	d10c      	bne.n	8303c <ethernet_phy_auto_negotiate+0x130>
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void emac_set_speed(Emac* p_emac, uint8_t uc_speed)
{
	if (uc_speed) {
   83022:	f013 0f80 	tst.w	r3, #128	; 0x80
		uc_speed = false;
		uc_fd = true;
	} else if ((ul_phy_anar & ul_phy_analpar) & MII_TX_HDX) {
		/* Set MII for 100BaseTX and half Duplex */
		uc_speed = true;
		uc_fd = false;
   83026:	bf08      	it	eq
   83028:	2300      	moveq	r3, #0
   8302a:	d009      	beq.n	83040 <ethernet_phy_auto_negotiate+0x134>
   8302c:	2300      	movs	r3, #0
   8302e:	e000      	b.n	83032 <ethernet_phy_auto_negotiate+0x126>

	/* Set up the EMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & MII_TX_FDX) {
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
   83030:	2301      	movs	r3, #1
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_SPD;
   83032:	6862      	ldr	r2, [r4, #4]
   83034:	f042 0201 	orr.w	r2, r2, #1
   83038:	6062      	str	r2, [r4, #4]
   8303a:	e005      	b.n	83048 <ethernet_phy_auto_negotiate+0x13c>
	} else if ((ul_phy_anar & ul_phy_analpar) & MII_10_FDX) {
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
		uc_fd = true;
   8303c:	2301      	movs	r3, #1
   8303e:	e7ff      	b.n	83040 <ethernet_phy_auto_negotiate+0x134>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_SPD;
   83040:	6862      	ldr	r2, [r4, #4]
   83042:	f022 0201 	bic.w	r2, r2, #1
   83046:	6062      	str	r2, [r4, #4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void emac_enable_full_duplex(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
   83048:	b123      	cbz	r3, 83054 <ethernet_phy_auto_negotiate+0x148>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_FD;
   8304a:	6863      	ldr	r3, [r4, #4]
   8304c:	f043 0302 	orr.w	r3, r3, #2
   83050:	6063      	str	r3, [r4, #4]
   83052:	e003      	b.n	8305c <ethernet_phy_auto_negotiate+0x150>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_FD;
   83054:	6863      	ldr	r3, [r4, #4]
   83056:	f023 0302 	bic.w	r3, r3, #2
   8305a:	6063      	str	r3, [r4, #4]
 * \param uc_enable   0 to disable the RMII mode, else to enable it.
 */
static inline void emac_enable_rmii(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_USRIO |= EMAC_USRIO_RMII;
   8305c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   83060:	f043 0301 	orr.w	r3, r3, #1
   83064:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 */
static inline void emac_enable_transceiver_clock(Emac* p_emac,
		uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_USRIO |= EMAC_USRIO_CLKEN;
   83068:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   8306c:	f043 0302 	orr.w	r3, r3, #2
   83070:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   83074:	6823      	ldr	r3, [r4, #0]
   83076:	f023 0310 	bic.w	r3, r3, #16
   8307a:	6023      	str	r3, [r4, #0]

	emac_enable_rmii(p_emac, ETH_PHY_MODE);
	emac_enable_transceiver_clock(p_emac, true);

	emac_enable_management(p_emac, false);
	return uc_rc;
   8307c:	2000      	movs	r0, #0
}
   8307e:	b002      	add	sp, #8
   83080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83084:	00083281 	.word	0x00083281
   83088:	000832e1 	.word	0x000832e1
   8308c:	000f4240 	.word	0x000f4240

00083090 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Emac *p_emac, uint8_t uc_phy_addr)
{
   83090:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   83094:	b083      	sub	sp, #12
   83096:	4606      	mov	r6, r0
   83098:	468a      	mov	sl, r1
	uint32_t ul_bmcr = MII_RESET;
   8309a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8309e:	af02      	add	r7, sp, #8
   830a0:	f847 3d04 	str.w	r3, [r7, #-4]!
 * \param uc_enable   0 to disable EMAC management, else to enable it.
 */
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
   830a4:	6802      	ldr	r2, [r0, #0]
   830a6:	f042 0210 	orr.w	r2, r2, #16
   830aa:	6002      	str	r2, [r0, #0]
	uint8_t uc_rc = EMAC_TIMEOUT;

	emac_enable_management(p_emac, true);

	ul_bmcr = MII_RESET;
	emac_phy_write(p_emac, uc_phy_address, MII_BMCR, ul_bmcr);
   830ac:	2200      	movs	r2, #0
   830ae:	4c0e      	ldr	r4, [pc, #56]	; (830e8 <ethernet_phy_reset+0x58>)
   830b0:	47a0      	blx	r4
 */
uint8_t ethernet_phy_reset(Emac *p_emac, uint8_t uc_phy_addr)
{
	uint32_t ul_bmcr = MII_RESET;
	uint8_t uc_phy_address = uc_phy_addr;
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
   830b2:	240a      	movs	r4, #10

	ul_bmcr = MII_RESET;
	emac_phy_write(p_emac, uc_phy_address, MII_BMCR, ul_bmcr);

	do {
		emac_phy_read(p_emac, uc_phy_address, MII_BMCR, &ul_bmcr);
   830b4:	f04f 0900 	mov.w	r9, #0
   830b8:	4d0c      	ldr	r5, [pc, #48]	; (830ec <ethernet_phy_reset+0x5c>)
   830ba:	4630      	mov	r0, r6
   830bc:	4651      	mov	r1, sl
   830be:	464a      	mov	r2, r9
   830c0:	463b      	mov	r3, r7
   830c2:	47a8      	blx	r5
		ul_timeout--;
   830c4:	3c01      	subs	r4, #1
	} while ((ul_bmcr & MII_RESET) && ul_timeout);
   830c6:	9b01      	ldr	r3, [sp, #4]
   830c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   830cc:	d001      	beq.n	830d2 <ethernet_phy_reset+0x42>
   830ce:	2c00      	cmp	r4, #0
   830d0:	d1f3      	bne.n	830ba <ethernet_phy_reset+0x2a>
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   830d2:	6833      	ldr	r3, [r6, #0]
   830d4:	f023 0310 	bic.w	r3, r3, #16
   830d8:	6033      	str	r3, [r6, #0]
	if (!ul_timeout) {
		uc_rc = EMAC_OK;
	}

	return (uc_rc);
}
   830da:	1c20      	adds	r0, r4, #0
   830dc:	bf18      	it	ne
   830de:	2001      	movne	r0, #1
   830e0:	b003      	add	sp, #12
   830e2:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   830e6:	bf00      	nop
   830e8:	000832e1 	.word	0x000832e1
   830ec:	00083281 	.word	0x00083281

000830f0 <ethernet_phy_init>:
 * \param ul_mck EMAC MCK. 
 *
 * Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_init(Emac *p_emac, uint8_t uc_phy_addr, uint32_t mck)
{
   830f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   830f4:	b083      	sub	sp, #12
   830f6:	4605      	mov	r5, r0
   830f8:	4689      	mov	r9, r1
 */
static inline uint8_t emac_set_clock(Emac* p_emac, uint32_t ul_mck)
{
	uint32_t ul_clk;

	if (ul_mck > EMAC_CLOCK_SPEED_160MHZ) {
   830fa:	4b30      	ldr	r3, [pc, #192]	; (831bc <ethernet_phy_init+0xcc>)
   830fc:	429a      	cmp	r2, r3
   830fe:	d859      	bhi.n	831b4 <ethernet_phy_init+0xc4>
		return EMAC_INVALID;
	} else if (ul_mck > EMAC_CLOCK_SPEED_80MHZ) {
   83100:	4b2f      	ldr	r3, [pc, #188]	; (831c0 <ethernet_phy_init+0xd0>)
   83102:	429a      	cmp	r2, r3
   83104:	d809      	bhi.n	8311a <ethernet_phy_init+0x2a>
		ul_clk = EMAC_NCFGR_CLK_MCK_64;
	} else if (ul_mck > EMAC_CLOCK_SPEED_40MHZ) {
   83106:	4b2f      	ldr	r3, [pc, #188]	; (831c4 <ethernet_phy_init+0xd4>)
   83108:	429a      	cmp	r2, r3
   8310a:	d809      	bhi.n	83120 <ethernet_phy_init+0x30>
		ul_clk = EMAC_NCFGR_CLK_MCK_32;
	} else if (ul_mck > EMAC_CLOCK_SPEED_20MHZ) {
		ul_clk = EMAC_NCFGR_CLK_MCK_16;
   8310c:	4b2e      	ldr	r3, [pc, #184]	; (831c8 <ethernet_phy_init+0xd8>)
   8310e:	429a      	cmp	r2, r3
   83110:	bf8c      	ite	hi
   83112:	f44f 6280 	movhi.w	r2, #1024	; 0x400
   83116:	2200      	movls	r2, #0
   83118:	e004      	b.n	83124 <ethernet_phy_init+0x34>
	uint32_t ul_clk;

	if (ul_mck > EMAC_CLOCK_SPEED_160MHZ) {
		return EMAC_INVALID;
	} else if (ul_mck > EMAC_CLOCK_SPEED_80MHZ) {
		ul_clk = EMAC_NCFGR_CLK_MCK_64;
   8311a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   8311e:	e001      	b.n	83124 <ethernet_phy_init+0x34>
	} else if (ul_mck > EMAC_CLOCK_SPEED_40MHZ) {
		ul_clk = EMAC_NCFGR_CLK_MCK_32;
   83120:	f44f 6200 	mov.w	r2, #2048	; 0x800
		ul_clk = EMAC_NCFGR_CLK_MCK_16;
	} else {
		ul_clk = EMAC_NCFGR_CLK_MCK_8;
	}

	p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_CLK_Msk;
   83124:	686b      	ldr	r3, [r5, #4]
   83126:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   8312a:	606b      	str	r3, [r5, #4]
	p_emac->EMAC_NCFGR |= ul_clk;
   8312c:	686b      	ldr	r3, [r5, #4]
   8312e:	431a      	orrs	r2, r3
   83130:	606a      	str	r2, [r5, #4]
 * \return 0xFF when no valid PHY address is found. 
 */
static uint8_t ethernet_phy_find_valid(Emac *p_emac, uint8_t uc_phy_addr,
		uint8_t addrStart)
{
	uint32_t ul_value = 0;
   83132:	ab02      	add	r3, sp, #8
   83134:	2200      	movs	r2, #0
   83136:	f843 2d04 	str.w	r2, [r3, #-4]!
 * \param uc_enable   0 to disable EMAC management, else to enable it.
 */
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
   8313a:	682a      	ldr	r2, [r5, #0]
   8313c:	f042 0210 	orr.w	r2, r2, #16
   83140:	602a      	str	r2, [r5, #0]

	emac_enable_management(p_emac, true);

	/* Check the current PHY address */
	uc_rc = uc_phy_address;
	if (emac_phy_read(p_emac, uc_phy_addr, MII_PHYID1, &ul_value) != EMAC_OK) {
   83142:	4628      	mov	r0, r5
   83144:	4649      	mov	r1, r9
   83146:	2202      	movs	r2, #2
   83148:	4c20      	ldr	r4, [pc, #128]	; (831cc <ethernet_phy_init+0xdc>)
   8314a:	47a0      	blx	r4
	}

	/* Find another one */
	if (ul_value != MII_OUI_MSB) {
   8314c:	f240 1281 	movw	r2, #385	; 0x181
   83150:	9b01      	ldr	r3, [sp, #4]
   83152:	4293      	cmp	r3, r2
   83154:	d016      	beq.n	83184 <ethernet_phy_init+0x94>
   83156:	464c      	mov	r4, r9
   83158:	2620      	movs	r6, #32
		uc_rc = 0xFF;
		for (uc_cnt = addrStart; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
			emac_phy_read(p_emac, uc_phy_address, MII_PHYID1, &ul_value);
   8315a:	f04f 0802 	mov.w	r8, #2
   8315e:	4f1b      	ldr	r7, [pc, #108]	; (831cc <ethernet_phy_init+0xdc>)

	/* Find another one */
	if (ul_value != MII_OUI_MSB) {
		uc_rc = 0xFF;
		for (uc_cnt = addrStart; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
   83160:	3401      	adds	r4, #1
   83162:	f004 041f 	and.w	r4, r4, #31
			emac_phy_read(p_emac, uc_phy_address, MII_PHYID1, &ul_value);
   83166:	4628      	mov	r0, r5
   83168:	4621      	mov	r1, r4
   8316a:	4642      	mov	r2, r8
   8316c:	ab01      	add	r3, sp, #4
   8316e:	47b8      	blx	r7
			if (ul_value == MII_OUI_MSB) {
   83170:	f240 1281 	movw	r2, #385	; 0x181
   83174:	9b01      	ldr	r3, [sp, #4]
   83176:	4293      	cmp	r3, r2
   83178:	d005      	beq.n	83186 <ethernet_phy_init+0x96>
   8317a:	1e73      	subs	r3, r6, #1
	}

	/* Find another one */
	if (ul_value != MII_OUI_MSB) {
		uc_rc = 0xFF;
		for (uc_cnt = addrStart; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
   8317c:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
   83180:	d1ee      	bne.n	83160 <ethernet_phy_init+0x70>
   83182:	e013      	b.n	831ac <ethernet_phy_init+0xbc>
	uint8_t uc_phy_address = uc_phy_addr;

	emac_enable_management(p_emac, true);

	/* Check the current PHY address */
	uc_rc = uc_phy_address;
   83184:	464c      	mov	r4, r9
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   83186:	682b      	ldr	r3, [r5, #0]
   83188:	f023 0310 	bic.w	r3, r3, #16
   8318c:	602b      	str	r3, [r5, #0]
		}
	}

	emac_enable_management(p_emac, false);

	if (uc_rc != 0xFF) {
   8318e:	2cff      	cmp	r4, #255	; 0xff
   83190:	d010      	beq.n	831b4 <ethernet_phy_init+0xc4>
		emac_phy_read(p_emac, uc_phy_address, MII_DSCSR, &ul_value);
   83192:	4628      	mov	r0, r5
   83194:	4621      	mov	r1, r4
   83196:	2211      	movs	r2, #17
   83198:	ab01      	add	r3, sp, #4
   8319a:	4e0c      	ldr	r6, [pc, #48]	; (831cc <ethernet_phy_init+0xdc>)
   8319c:	47b0      	blx	r6
	/* Check PHY Address */
	uc_phy = ethernet_phy_find_valid(p_emac, uc_phy_addr, 0);
	if (uc_phy == 0xFF) {
		return 0;
	}
	if (uc_phy != uc_phy_addr) {
   8319e:	45a1      	cmp	r9, r4
   831a0:	d008      	beq.n	831b4 <ethernet_phy_init+0xc4>
		ethernet_phy_reset(p_emac, uc_phy_addr);
   831a2:	4628      	mov	r0, r5
   831a4:	4649      	mov	r1, r9
   831a6:	4b0a      	ldr	r3, [pc, #40]	; (831d0 <ethernet_phy_init+0xe0>)
   831a8:	4798      	blx	r3
   831aa:	e003      	b.n	831b4 <ethernet_phy_init+0xc4>
   831ac:	682b      	ldr	r3, [r5, #0]
   831ae:	f023 0310 	bic.w	r3, r3, #16
   831b2:	602b      	str	r3, [r5, #0]
	}

	return uc_rc;
}
   831b4:	2000      	movs	r0, #0
   831b6:	b003      	add	sp, #12
   831b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   831bc:	09896800 	.word	0x09896800
   831c0:	04c4b400 	.word	0x04c4b400
   831c4:	02625a00 	.word	0x02625a00
   831c8:	01312d00 	.word	0x01312d00
   831cc:	00083281 	.word	0x00083281
   831d0:	00083091 	.word	0x00083091

000831d4 <circ_inc>:
#define CIRC_CLEAR(head, tail)     (head = tail = 0)

/** Increment head or tail */
static void circ_inc(uint16_t *headortail, uint32_t size)
{
        (*headortail)++;
   831d4:	8803      	ldrh	r3, [r0, #0]
   831d6:	3301      	adds	r3, #1
   831d8:	b29b      	uxth	r3, r3
        if((*headortail) >= size) {
            (*headortail) = 0;
   831da:	428b      	cmp	r3, r1
   831dc:	bf28      	it	cs
   831de:	2300      	movcs	r3, #0
   831e0:	8003      	strh	r3, [r0, #0]
   831e2:	4770      	bx	lr

000831e4 <emac_reset_tx_mem>:
 *
 * \param p_dev Pointer to EMAC driver instance.
 *
 */
static void emac_reset_tx_mem(emac_device_t* p_dev)
{
   831e4:	b4f0      	push	{r4, r5, r6, r7}
	Emac *p_hw = p_dev->p_hw;
   831e6:	6807      	ldr	r7, [r0, #0]
	uint8_t *p_tx_buff = p_dev->p_tx_buffer;
   831e8:	6841      	ldr	r1, [r0, #4]
	emac_tx_descriptor_t *p_td = p_dev->p_tx_dscr;
   831ea:	6904      	ldr	r4, [r0, #16]
static inline void emac_enable_transmit(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_TE;
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_TE;
   831ec:	683b      	ldr	r3, [r7, #0]
   831ee:	f023 0308 	bic.w	r3, r3, #8
   831f2:	603b      	str	r3, [r7, #0]

	/* Disable TX */
	emac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->us_tx_head, p_dev->us_tx_tail);
   831f4:	2300      	movs	r3, #0
   831f6:	8503      	strh	r3, [r0, #40]	; 0x28
   831f8:	84c3      	strh	r3, [r0, #38]	; 0x26
	for (ul_index = 0; ul_index < p_dev->us_tx_list_size; ul_index++) {
   831fa:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   831fc:	b165      	cbz	r5, 83218 <emac_reset_tx_mem+0x34>
   831fe:	461a      	mov	r2, r3
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * EMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = EMAC_TXD_USED;
   83200:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->us_tx_head, p_dev->us_tx_tail);
	for (ul_index = 0; ul_index < p_dev->us_tx_list_size; ul_index++) {
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * EMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
   83204:	50e1      	str	r1, [r4, r3]
   83206:	18e5      	adds	r5, r4, r3
		p_td[ul_index].status.val = EMAC_TXD_USED;
   83208:	606e      	str	r6, [r5, #4]
	/* Disable TX */
	emac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->us_tx_head, p_dev->us_tx_tail);
	for (ul_index = 0; ul_index < p_dev->us_tx_list_size; ul_index++) {
   8320a:	3201      	adds	r2, #1
   8320c:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   8320e:	f201 51ee 	addw	r1, r1, #1518	; 0x5ee
   83212:	3308      	adds	r3, #8
   83214:	4295      	cmp	r5, r2
   83216:	d8f5      	bhi.n	83204 <emac_reset_tx_mem+0x20>
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * EMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = EMAC_TXD_USED;
	}
	p_td[p_dev->us_tx_list_size - 1].status.val =
   83218:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   8321c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   83220:	f845 3c04 	str.w	r3, [r5, #-4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_addr  Tx queue address.
 */
static inline void emac_set_tx_queue(Emac* p_emac, uint32_t ul_addr)
{
	p_emac->EMAC_TBQP = EMAC_TBQP_ADDR_Msk & ul_addr;
   83224:	f024 0403 	bic.w	r4, r4, #3
   83228:	61fc      	str	r4, [r7, #28]
			EMAC_TXD_USED | EMAC_TXD_WRAP;

	/* Set transmit buffer queue */
	emac_set_tx_queue(p_hw, (uint32_t) p_td);
}
   8322a:	bcf0      	pop	{r4, r5, r6, r7}
   8322c:	4770      	bx	lr
   8322e:	bf00      	nop

00083230 <emac_reset_rx_mem>:
 * \brief Disable receiver, reset registers and descriptor list.
 *
 * \param p_drv Pointer to EMAC Driver instance.
 */
static void emac_reset_rx_mem(emac_device_t* p_dev)
{
   83230:	b4f0      	push	{r4, r5, r6, r7}
	Emac *p_hw = p_dev->p_hw;
   83232:	6807      	ldr	r7, [r0, #0]
	uint8_t *p_rx_buff = p_dev->p_rx_buffer;
   83234:	6881      	ldr	r1, [r0, #8]
	emac_rx_descriptor_t *pRd = p_dev->p_rx_dscr;
   83236:	68c4      	ldr	r4, [r0, #12]
static inline void emac_enable_receive(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_RE;
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_RE;
   83238:	683b      	ldr	r3, [r7, #0]
   8323a:	f023 0304 	bic.w	r3, r3, #4
   8323e:	603b      	str	r3, [r7, #0]

	/* Disable RX */
	emac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->us_rx_idx = 0;
   83240:	2300      	movs	r3, #0
   83242:	8443      	strh	r3, [r0, #34]	; 0x22
	for (ul_index = 0; ul_index < p_dev->us_rx_list_size; ul_index++) {
   83244:	8c05      	ldrh	r5, [r0, #32]
   83246:	b165      	cbz	r5, 83262 <emac_reset_rx_mem+0x32>
   83248:	461a      	mov	r2, r3
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * EMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & EMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
   8324a:	461e      	mov	r6, r3

	/* Set up the RX descriptors */
	p_dev->us_rx_idx = 0;
	for (ul_index = 0; ul_index < p_dev->us_rx_list_size; ul_index++) {
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * EMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & EMAC_RXD_ADDR_MASK;
   8324c:	f021 0503 	bic.w	r5, r1, #3
   83250:	50e5      	str	r5, [r4, r3]
   83252:	18e5      	adds	r5, r4, r3
		pRd[ul_index].status.val = 0;
   83254:	606e      	str	r6, [r5, #4]
	/* Disable RX */
	emac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->us_rx_idx = 0;
	for (ul_index = 0; ul_index < p_dev->us_rx_list_size; ul_index++) {
   83256:	3201      	adds	r2, #1
   83258:	8c05      	ldrh	r5, [r0, #32]
   8325a:	3180      	adds	r1, #128	; 0x80
   8325c:	3308      	adds	r3, #8
   8325e:	4295      	cmp	r5, r2
   83260:	d8f4      	bhi.n	8324c <emac_reset_rx_mem+0x1c>
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * EMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & EMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
	}
	pRd[p_dev->us_rx_list_size - 1].addr.val |= EMAC_RXD_WRAP;
   83262:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
   83266:	3d01      	subs	r5, #1
   83268:	f854 3035 	ldr.w	r3, [r4, r5, lsl #3]
   8326c:	f043 0302 	orr.w	r3, r3, #2
   83270:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_addr   Rx queue address.
 */
static inline void emac_set_rx_queue(Emac* p_emac, uint32_t ul_addr)
{
	p_emac->EMAC_RBQP = EMAC_RBQP_ADDR_Msk & ul_addr;
   83274:	f024 0403 	bic.w	r4, r4, #3
   83278:	61bc      	str	r4, [r7, #24]

	/* Set receive buffer queue */
	emac_set_rx_queue(p_hw, (uint32_t) pRd);
}
   8327a:	bcf0      	pop	{r4, r5, r6, r7}
   8327c:	4770      	bx	lr
   8327e:	bf00      	nop

00083280 <emac_phy_read>:
 *
 * \Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout.
 */
uint8_t emac_phy_read(Emac* p_emac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
   83280:	b410      	push	{r4}
   83282:	b083      	sub	sp, #12
static inline void emac_maintain_phy(Emac* p_emac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
   83284:	6884      	ldr	r4, [r0, #8]
   83286:	f014 0f04 	tst.w	r4, #4
   8328a:	d0fb      	beq.n	83284 <emac_phy_read+0x4>
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
			| EMAC_MAN_SOF(EMAC_MAN_SOF_VALUE)
			| EMAC_MAN_PHYA(uc_phy_addr)
			| EMAC_MAN_REGA(uc_reg_addr)
   8328c:	0492      	lsls	r2, r2, #18
   8328e:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
   83292:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
   83296:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
			| EMAC_MAN_SOF(EMAC_MAN_SOF_VALUE)
			| EMAC_MAN_PHYA(uc_phy_addr)
   8329a:	05c9      	lsls	r1, r1, #23
   8329c:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| EMAC_MAN_REGA(uc_reg_addr)
			| EMAC_MAN_RW((uc_rw ? EMAC_MAN_RW_TYPE : EMAC_MAN_READ_ONLY))
			| EMAC_MAN_DATA(us_data);
   832a0:	430a      	orrs	r2, r1
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
   832a2:	6342      	str	r2, [r0, #52]	; 0x34
 *
 * Return EMAC_OK if the operation is completed successfully.
 */
static uint8_t emac_wait_phy(Emac* p_emac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;
   832a4:	2200      	movs	r2, #0
   832a6:	9201      	str	r2, [sp, #4]
			continue;
		}

		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
   832a8:	490c      	ldr	r1, [pc, #48]	; (832dc <emac_phy_read+0x5c>)
   832aa:	e005      	b.n	832b8 <emac_phy_read+0x38>
	while (!emac_is_phy_idle(p_emac)) {
		if (ul_retry == 0) {
			continue;
		}

		ul_retry_count++;
   832ac:	9a01      	ldr	r2, [sp, #4]
   832ae:	3201      	adds	r2, #1
   832b0:	9201      	str	r2, [sp, #4]

		if (ul_retry_count >= ul_retry) {
   832b2:	9a01      	ldr	r2, [sp, #4]
   832b4:	428a      	cmp	r2, r1
   832b6:	d80c      	bhi.n	832d2 <emac_phy_read+0x52>
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t emac_is_phy_idle(Emac* p_emac)
{
	return ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) > 0);
   832b8:	6882      	ldr	r2, [r0, #8]
 */
static uint8_t emac_wait_phy(Emac* p_emac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!emac_is_phy_idle(p_emac)) {
   832ba:	f012 0f04 	tst.w	r2, #4
   832be:	d0f5      	beq.n	832ac <emac_phy_read+0x2c>
 * \return Get PHY data.
 */
static inline uint16_t emac_get_phy_data(Emac* p_emac)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
   832c0:	6882      	ldr	r2, [r0, #8]
   832c2:	f012 0f04 	tst.w	r2, #4
   832c6:	d0fb      	beq.n	832c0 <emac_phy_read+0x40>
	/* Return data */
	return (uint16_t) (p_emac->EMAC_MAN & EMAC_MAN_DATA_Msk);
   832c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
	emac_maintain_phy(p_emac, uc_phy_address, uc_address, 1, 0);

	if (emac_wait_phy(p_emac, MAC_PHY_RETRY_MAX) == EMAC_TIMEOUT) {
		return EMAC_TIMEOUT;
	}
	*p_value = emac_get_phy_data(p_emac);
   832ca:	b292      	uxth	r2, r2
   832cc:	601a      	str	r2, [r3, #0]
	return EMAC_OK;
   832ce:	2000      	movs	r0, #0
   832d0:	e000      	b.n	832d4 <emac_phy_read+0x54>
		uint32_t* p_value)
{
	emac_maintain_phy(p_emac, uc_phy_address, uc_address, 1, 0);

	if (emac_wait_phy(p_emac, MAC_PHY_RETRY_MAX) == EMAC_TIMEOUT) {
		return EMAC_TIMEOUT;
   832d2:	2001      	movs	r0, #1
	}
	*p_value = emac_get_phy_data(p_emac);
	return EMAC_OK;
}
   832d4:	b003      	add	sp, #12
   832d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   832da:	4770      	bx	lr
   832dc:	000f423f 	.word	0x000f423f

000832e0 <emac_phy_write>:
 *
 * \Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout.
 */
uint8_t emac_phy_write(Emac* p_emac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
   832e0:	b410      	push	{r4}
   832e2:	b083      	sub	sp, #12
static inline void emac_maintain_phy(Emac* p_emac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
   832e4:	6884      	ldr	r4, [r0, #8]
   832e6:	f014 0f04 	tst.w	r4, #4
   832ea:	d0fb      	beq.n	832e4 <emac_phy_write+0x4>
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
			| EMAC_MAN_SOF(EMAC_MAN_SOF_VALUE)
			| EMAC_MAN_PHYA(uc_phy_addr)
			| EMAC_MAN_REGA(uc_reg_addr)
   832ec:	0492      	lsls	r2, r2, #18
   832ee:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
			| EMAC_MAN_RW((uc_rw ? EMAC_MAN_RW_TYPE : EMAC_MAN_READ_ONLY))
   832f2:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
   832f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
			| EMAC_MAN_SOF(EMAC_MAN_SOF_VALUE)
			| EMAC_MAN_PHYA(uc_phy_addr)
   832fa:	05c9      	lsls	r1, r1, #23
   832fc:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| EMAC_MAN_REGA(uc_reg_addr)
			| EMAC_MAN_RW((uc_rw ? EMAC_MAN_RW_TYPE : EMAC_MAN_READ_ONLY))
			| EMAC_MAN_DATA(us_data);
   83300:	430a      	orrs	r2, r1
   83302:	b29b      	uxth	r3, r3
   83304:	431a      	orrs	r2, r3
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
   83306:	6342      	str	r2, [r0, #52]	; 0x34
 *
 * Return EMAC_OK if the operation is completed successfully.
 */
static uint8_t emac_wait_phy(Emac* p_emac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;
   83308:	2300      	movs	r3, #0
   8330a:	9301      	str	r3, [sp, #4]
			continue;
		}

		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
   8330c:	4a09      	ldr	r2, [pc, #36]	; (83334 <emac_phy_write+0x54>)
   8330e:	e005      	b.n	8331c <emac_phy_write+0x3c>
	while (!emac_is_phy_idle(p_emac)) {
		if (ul_retry == 0) {
			continue;
		}

		ul_retry_count++;
   83310:	9b01      	ldr	r3, [sp, #4]
   83312:	3301      	adds	r3, #1
   83314:	9301      	str	r3, [sp, #4]

		if (ul_retry_count >= ul_retry) {
   83316:	9b01      	ldr	r3, [sp, #4]
   83318:	4293      	cmp	r3, r2
   8331a:	d805      	bhi.n	83328 <emac_phy_write+0x48>
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t emac_is_phy_idle(Emac* p_emac)
{
	return ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) > 0);
   8331c:	6883      	ldr	r3, [r0, #8]
 */
static uint8_t emac_wait_phy(Emac* p_emac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!emac_is_phy_idle(p_emac)) {
   8331e:	f013 0f04 	tst.w	r3, #4
   83322:	d0f5      	beq.n	83310 <emac_phy_write+0x30>

		if (ul_retry_count >= ul_retry) {
			return EMAC_TIMEOUT;
		}
	}
	return EMAC_OK;
   83324:	2000      	movs	r0, #0
   83326:	e000      	b.n	8332a <emac_phy_write+0x4a>
		}

		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
			return EMAC_TIMEOUT;
   83328:	2001      	movs	r0, #1

	if (emac_wait_phy(p_emac, MAC_PHY_RETRY_MAX) == EMAC_TIMEOUT) {
		return EMAC_TIMEOUT;
	}
	return EMAC_OK;
}
   8332a:	b003      	add	sp, #12
   8332c:	f85d 4b04 	ldr.w	r4, [sp], #4
   83330:	4770      	bx	lr
   83332:	bf00      	nop
   83334:	000f423f 	.word	0x000f423f

00083338 <emac_dev_init>:
 * \param p_emac_dev Pointer to the EMAC device instance. 
 * \param p_opt EMAC configure options.
 */
void emac_dev_init(Emac* p_emac, emac_device_t* p_emac_dev,
		emac_options_t* p_opt)
{
   83338:	b570      	push	{r4, r5, r6, lr}
   8333a:	4604      	mov	r4, r0
   8333c:	460d      	mov	r5, r1
   8333e:	4616      	mov	r6, r2
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_ncr   Network control value.
 */
static inline void emac_network_control(Emac* p_emac, uint32_t ul_ncr)
{
	p_emac->EMAC_NCR = ul_ncr;
   83340:	2300      	movs	r3, #0
   83342:	6003      	str	r3, [r0, #0]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_source   Interrupt source(s) to be disabled.
 */
static inline void emac_disable_interrupt(Emac* p_emac, uint32_t ul_source)
{
	p_emac->EMAC_IDR = ul_source;
   83344:	f04f 33ff 	mov.w	r3, #4294967295
   83348:	62c3      	str	r3, [r0, #44]	; 0x2c
 *
 * \param p_emac   Pointer to the EMAC instance.
 */
static inline void emac_clear_statistics(Emac* p_emac)
{
	p_emac->EMAC_NCR |= EMAC_NCR_CLRSTAT;
   8334a:	6803      	ldr	r3, [r0, #0]
   8334c:	f043 0320 	orr.w	r3, r3, #32
   83350:	6003      	str	r3, [r0, #0]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_status   Receive status.
 */
static inline void emac_clear_rx_status(Emac* p_emac, uint32_t ul_status)
{
	p_emac->EMAC_RSR = ul_status;
   83352:	2307      	movs	r3, #7
   83354:	6203      	str	r3, [r0, #32]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_status   Transmit status.
 */
static inline void emac_clear_tx_status(Emac* p_emac, uint32_t ul_status)
{
	p_emac->EMAC_TSR = ul_status;
   83356:	2377      	movs	r3, #119	; 0x77
   83358:	6143      	str	r3, [r0, #20]
 *
 * \return Interrupt status.
 */
static inline uint32_t emac_get_interrupt_status(Emac* p_emac)
{
	return p_emac->EMAC_ISR;
   8335a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * \return Network configuration.
 */
static inline uint32_t emac_get_configure(Emac* p_emac)
{
	return p_emac->EMAC_NCFGR;
   8335c:	6843      	ldr	r3, [r0, #4]
	/* Clear interrupts */
	emac_get_interrupt_status(p_emac);

	/* Enable the copy of data into the buffers
	   ignore broadcasts, and not copy FCS. */
	emac_set_configure(p_emac,
   8335e:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
 * \param p_emac   Pointer to the EMAC instance.
  * \param ul_cfg   Network configuration value.
 */
static inline void emac_set_configure(Emac* p_emac, uint32_t ul_cfg)
{
	p_emac->EMAC_NCFGR = ul_cfg;
   83362:	6043      	str	r3, [r0, #4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_enable   0 to disable copying all valid frames, else to enable it.
 */
static inline void emac_enable_copy_all(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
   83364:	7813      	ldrb	r3, [r2, #0]
   83366:	b123      	cbz	r3, 83372 <emac_dev_init+0x3a>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_CAF;
   83368:	6843      	ldr	r3, [r0, #4]
   8336a:	f043 0310 	orr.w	r3, r3, #16
   8336e:	6043      	str	r3, [r0, #4]
   83370:	e003      	b.n	8337a <emac_dev_init+0x42>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_CAF;
   83372:	6843      	ldr	r3, [r0, #4]
   83374:	f023 0310 	bic.w	r3, r3, #16
   83378:	6043      	str	r3, [r0, #4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_enable   1 to disable the broadcast, else to enable it.
 */
static inline void emac_disable_broadcast(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
   8337a:	7873      	ldrb	r3, [r6, #1]
   8337c:	b123      	cbz	r3, 83388 <emac_dev_init+0x50>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_NBC;
   8337e:	6863      	ldr	r3, [r4, #4]
   83380:	f043 0320 	orr.w	r3, r3, #32
   83384:	6063      	str	r3, [r4, #4]
   83386:	e003      	b.n	83390 <emac_dev_init+0x58>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_NBC;
   83388:	6863      	ldr	r3, [r4, #4]
   8338a:	f023 0320 	bic.w	r3, r3, #32
   8338e:	6063      	str	r3, [r4, #4]
	if (p_dev_mm->us_rx_size <= 1 || p_dev_mm->us_tx_size <= 1 || p_tx_cb == NULL) {
		return EMAC_PARAM;
	}

	/* Assign RX buffers */
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
   83390:	4b1e      	ldr	r3, [pc, #120]	; (8340c <emac_dev_init+0xd4>)
			|| ((uint32_t) p_dev_mm->p_rx_dscr & 0x7)) {
		p_dev_mm->us_rx_size--;
	}
	p_emac_dev->p_rx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
   83392:	f023 0307 	bic.w	r3, r3, #7
	/* Assign RX buffers */
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
			|| ((uint32_t) p_dev_mm->p_rx_dscr & 0x7)) {
		p_dev_mm->us_rx_size--;
	}
	p_emac_dev->p_rx_buffer =
   83396:	60ab      	str	r3, [r5, #8]
		return EMAC_PARAM;
	}

	/* Assign RX buffers */
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
			|| ((uint32_t) p_dev_mm->p_rx_dscr & 0x7)) {
   83398:	4b1d      	ldr	r3, [pc, #116]	; (83410 <emac_dev_init+0xd8>)
	}
	p_emac_dev->p_rx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
	p_emac_dev->p_rx_dscr =
			(emac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr 
			& 0xFFFFFFF8);
   8339a:	f023 0307 	bic.w	r3, r3, #7
			|| ((uint32_t) p_dev_mm->p_rx_dscr & 0x7)) {
		p_dev_mm->us_rx_size--;
	}
	p_emac_dev->p_rx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
	p_emac_dev->p_rx_dscr =
   8339e:	60eb      	str	r3, [r5, #12]
			(emac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr 
			& 0xFFFFFFF8);
	p_emac_dev->us_rx_list_size = p_dev_mm->us_rx_size;
   833a0:	2310      	movs	r3, #16
   833a2:	842b      	strh	r3, [r5, #32]

	/* Assign TX buffers */
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
   833a4:	4b1b      	ldr	r3, [pc, #108]	; (83414 <emac_dev_init+0xdc>)
			|| ((uint32_t) p_dev_mm->p_tx_dscr & 0x7)) {
		p_dev_mm->us_tx_size--;
	}
	p_emac_dev->p_tx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
   833a6:	f023 0307 	bic.w	r3, r3, #7
	/* Assign TX buffers */
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
			|| ((uint32_t) p_dev_mm->p_tx_dscr & 0x7)) {
		p_dev_mm->us_tx_size--;
	}
	p_emac_dev->p_tx_buffer =
   833aa:	606b      	str	r3, [r5, #4]
			& 0xFFFFFFF8);
	p_emac_dev->us_rx_list_size = p_dev_mm->us_rx_size;

	/* Assign TX buffers */
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
			|| ((uint32_t) p_dev_mm->p_tx_dscr & 0x7)) {
   833ac:	4b1a      	ldr	r3, [pc, #104]	; (83418 <emac_dev_init+0xe0>)
	}
	p_emac_dev->p_tx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
	p_emac_dev->p_tx_dscr =
			(emac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr 
			& 0xFFFFFFF8);
   833ae:	f023 0307 	bic.w	r3, r3, #7
			|| ((uint32_t) p_dev_mm->p_tx_dscr & 0x7)) {
		p_dev_mm->us_tx_size--;
	}
	p_emac_dev->p_tx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
	p_emac_dev->p_tx_dscr =
   833b2:	612b      	str	r3, [r5, #16]
			(emac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr 
			& 0xFFFFFFF8);
	p_emac_dev->us_tx_list_size = p_dev_mm->us_tx_size;
   833b4:	2308      	movs	r3, #8
   833b6:	84ab      	strh	r3, [r5, #36]	; 0x24
	p_emac_dev->func_tx_cb_list = p_tx_cb;
   833b8:	4b18      	ldr	r3, [pc, #96]	; (8341c <emac_dev_init+0xe4>)
   833ba:	61eb      	str	r3, [r5, #28]

	/* Reset TX & RX */
	emac_reset_rx_mem(p_emac_dev);
   833bc:	4628      	mov	r0, r5
   833be:	4b18      	ldr	r3, [pc, #96]	; (83420 <emac_dev_init+0xe8>)
   833c0:	4798      	blx	r3
	emac_reset_tx_mem(p_emac_dev);
   833c2:	4628      	mov	r0, r5
   833c4:	4b17      	ldr	r3, [pc, #92]	; (83424 <emac_dev_init+0xec>)
   833c6:	4798      	blx	r3
 * \param uc_enable   0 to disable EMAC transmit, else to enable it.
 */
static inline void emac_enable_transmit(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_TE;
   833c8:	6823      	ldr	r3, [r4, #0]
   833ca:	f043 0308 	orr.w	r3, r3, #8
   833ce:	6023      	str	r3, [r4, #0]
 * \param uc_enable   0 to disable EMAC receiver, else to enable it.
 */
static inline void emac_enable_receive(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_RE;
   833d0:	6823      	ldr	r3, [r4, #0]
   833d2:	f043 0304 	orr.w	r3, r3, #4
   833d6:	6023      	str	r3, [r4, #0]
 */
static inline void emac_enable_statistics_write(Emac* p_emac,
		uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_WESTAT;
   833d8:	6823      	ldr	r3, [r4, #0]
   833da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   833de:	6023      	str	r3, [r4, #0]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_source   Interrupt source(s) to be enabled.
 */
static inline void emac_enable_interrupt(Emac* p_emac, uint32_t ul_source)
{
	p_emac->EMAC_IER = ul_source;
   833e0:	f643 43f4 	movw	r3, #15604	; 0x3cf4
   833e4:	62a3      	str	r3, [r4, #40]	; 0x28
 * \param p_mac_addr  EMAC address.
 */
static inline void emac_set_address(Emac* p_emac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_emac->EMAC_SA[uc_index].EMAC_SAxB = (p_mac_addr[3] << 24)
   833e6:	7972      	ldrb	r2, [r6, #5]
			| (p_mac_addr[2] << 16)
   833e8:	7933      	ldrb	r3, [r6, #4]
   833ea:	041b      	lsls	r3, r3, #16
   833ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
   833f0:	78b2      	ldrb	r2, [r6, #2]
static inline void emac_set_address(Emac* p_emac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_emac->EMAC_SA[uc_index].EMAC_SAxB = (p_mac_addr[3] << 24)
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
   833f2:	4313      	orrs	r3, r2
   833f4:	78f2      	ldrb	r2, [r6, #3]
			| (p_mac_addr[0]);
   833f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 * \param p_mac_addr  EMAC address.
 */
static inline void emac_set_address(Emac* p_emac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_emac->EMAC_SA[uc_index].EMAC_SAxB = (p_mac_addr[3] << 24)
   833fa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
	p_emac->EMAC_SA[uc_index].EMAC_SAxT = (p_mac_addr[5] << 8)
   833fe:	79f2      	ldrb	r2, [r6, #7]
			| (p_mac_addr[4]);
   83400:	79b3      	ldrb	r3, [r6, #6]
   83402:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
{
	p_emac->EMAC_SA[uc_index].EMAC_SAxB = (p_mac_addr[3] << 24)
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
	p_emac->EMAC_SA[uc_index].EMAC_SAxT = (p_mac_addr[5] << 8)
   83406:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
   8340a:	bd70      	pop	{r4, r5, r6, pc}
   8340c:	20073bd0 	.word	0x20073bd0
   83410:	200743d0 	.word	0x200743d0
   83414:	20070c40 	.word	0x20070c40
   83418:	20070c00 	.word	0x20070c00
   8341c:	20073bb0 	.word	0x20073bb0
   83420:	00083231 	.word	0x00083231
   83424:	000831e5 	.word	0x000831e5

00083428 <emac_dev_read>:
 *
 * \return EMAC_OK if receiving frame successfully, otherwise failed.
 */
uint32_t emac_dev_read(emac_device_t* p_emac_dev, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
   83428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8342c:	b085      	sub	sp, #20
   8342e:	4604      	mov	r4, r0
   83430:	4693      	mov	fp, r2
   83432:	9301      	str	r3, [sp, #4]
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;
	uint16_t us_tmp_idx = p_emac_dev->us_rx_idx;
   83434:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   83436:	f8ad 300e 	strh.w	r3, [sp, #14]
	emac_rx_descriptor_t *p_rx_td =
			&p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
   8343a:	68c2      	ldr	r2, [r0, #12]
	int8_t c_is_frame = 0;

	if (p_frame == NULL)
   8343c:	9100      	str	r1, [sp, #0]
   8343e:	2900      	cmp	r1, #0
   83440:	f000 8099 	beq.w	83576 <emac_dev_read+0x14e>
{
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;
	uint16_t us_tmp_idx = p_emac_dev->us_rx_idx;
	emac_rx_descriptor_t *p_rx_td =
   83444:	eb02 05c3 	add.w	r5, r2, r3, lsl #3

	if (p_frame == NULL)
		return EMAC_PARAM;

	/* Set the default return value */
	*p_rcv_size = 0;
   83448:	2100      	movs	r1, #0
   8344a:	9801      	ldr	r0, [sp, #4]
   8344c:	6001      	str	r1, [r0, #0]

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
   8344e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   83452:	f013 0f01 	tst.w	r3, #1
   83456:	f000 8090 	beq.w	8357a <emac_dev_read+0x152>
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;
	uint16_t us_tmp_idx = p_emac_dev->us_rx_idx;
	emac_rx_descriptor_t *p_rx_td =
			&p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
	int8_t c_is_frame = 0;
   8345a:	468a      	mov	sl, r1
uint32_t emac_dev_read(emac_device_t* p_emac_dev, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;
   8345c:	4688      	mov	r8, r1
 */
uint32_t emac_dev_read(emac_device_t* p_emac_dev, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
   8345e:	460f      	mov	r7, r1
			/* Start to gather buffers in a frame */
			c_is_frame = 1;
		}

		/* Increment the pointer */
		circ_inc(&us_tmp_idx, p_emac_dev->us_rx_list_size);
   83460:	4e4f      	ldr	r6, [pc, #316]	; (835a0 <emac_dev_read+0x178>)
	*p_rcv_size = 0;

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
		/* A start of frame has been received, discard previous fragments */
		if ((p_rx_td->status.val & EMAC_RXD_SOF) == EMAC_RXD_SOF) {
   83462:	686b      	ldr	r3, [r5, #4]
   83464:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   83468:	d019      	beq.n	8349e <emac_dev_read+0x76>
			/* Skip previous fragment */
			while (us_tmp_idx != p_emac_dev->us_rx_idx) {
   8346a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   8346c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   83470:	429a      	cmp	r2, r3
   83472:	f000 8088 	beq.w	83586 <emac_dev_read+0x15e>
				p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
				p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);

				circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   83476:	f104 0722 	add.w	r7, r4, #34	; 0x22
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
		/* A start of frame has been received, discard previous fragments */
		if ((p_rx_td->status.val & EMAC_RXD_SOF) == EMAC_RXD_SOF) {
			/* Skip previous fragment */
			while (us_tmp_idx != p_emac_dev->us_rx_idx) {
				p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
   8347a:	68e2      	ldr	r2, [r4, #12]
   8347c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
				p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
   83480:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   83484:	f021 0101 	bic.w	r1, r1, #1
   83488:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   8348c:	4638      	mov	r0, r7
   8348e:	8c21      	ldrh	r1, [r4, #32]
   83490:	47b0      	blx	r6
	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
		/* A start of frame has been received, discard previous fragments */
		if ((p_rx_td->status.val & EMAC_RXD_SOF) == EMAC_RXD_SOF) {
			/* Skip previous fragment */
			while (us_tmp_idx != p_emac_dev->us_rx_idx) {
   83492:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   83494:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   83498:	429a      	cmp	r2, r3
   8349a:	d1ee      	bne.n	8347a <emac_dev_read+0x52>
   8349c:	e073      	b.n	83586 <emac_dev_read+0x15e>
			/* Start to gather buffers in a frame */
			c_is_frame = 1;
		}

		/* Increment the pointer */
		circ_inc(&us_tmp_idx, p_emac_dev->us_rx_list_size);
   8349e:	f10d 000e 	add.w	r0, sp, #14
   834a2:	8c21      	ldrh	r1, [r4, #32]
   834a4:	47b0      	blx	r6

		/* Copy data in the frame buffer */
		if (c_is_frame) {
   834a6:	f1ba 0f00 	cmp.w	sl, #0
   834aa:	d051      	beq.n	83550 <emac_dev_read+0x128>
			if (us_tmp_idx == p_emac_dev->us_rx_idx) {
   834ac:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   834ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   834b2:	429a      	cmp	r2, r3
   834b4:	d113      	bne.n	834de <emac_dev_read+0xb6>
				do {
					p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   834b6:	f104 0622 	add.w	r6, r4, #34	; 0x22
   834ba:	4d39      	ldr	r5, [pc, #228]	; (835a0 <emac_dev_read+0x178>)

		/* Copy data in the frame buffer */
		if (c_is_frame) {
			if (us_tmp_idx == p_emac_dev->us_rx_idx) {
				do {
					p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
   834bc:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   834be:	68e3      	ldr	r3, [r4, #12]
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
   834c0:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
   834c4:	f021 0101 	bic.w	r1, r1, #1
   834c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   834cc:	4630      	mov	r0, r6
   834ce:	8c21      	ldrh	r1, [r4, #32]
   834d0:	47a8      	blx	r5
							
				} while (us_tmp_idx != p_emac_dev->us_rx_idx);
   834d2:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   834d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   834d8:	429a      	cmp	r2, r3
   834da:	d1ef      	bne.n	834bc <emac_dev_read+0x94>
   834dc:	e04f      	b.n	8357e <emac_dev_read+0x156>

				return EMAC_RX_NULL;
			}
			/* Copy the buffer into the application frame */
			us_buffer_length = EMAC_RX_UNITSIZE;
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
   834de:	f107 0380 	add.w	r3, r7, #128	; 0x80
   834e2:	455b      	cmp	r3, fp
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
   834e4:	bf86      	itte	hi
   834e6:	ebc7 090b 	rsbhi	r9, r7, fp
   834ea:	fa1f f989 	uxthhi.w	r9, r9
				} while (us_tmp_idx != p_emac_dev->us_rx_idx);

				return EMAC_RX_NULL;
			}
			/* Copy the buffer into the application frame */
			us_buffer_length = EMAC_RX_UNITSIZE;
   834ee:	f04f 0980 	movls.w	r9, #128	; 0x80
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
			}

			memcpy(p_tmp_frame,
					(void *)(p_rx_td->addr.val & EMAC_RXD_ADDR_MASK),
   834f2:	6829      	ldr	r1, [r5, #0]
			us_buffer_length = EMAC_RX_UNITSIZE;
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
			}

			memcpy(p_tmp_frame,
   834f4:	4640      	mov	r0, r8
   834f6:	f021 0103 	bic.w	r1, r1, #3
   834fa:	464a      	mov	r2, r9
   834fc:	4b29      	ldr	r3, [pc, #164]	; (835a4 <emac_dev_read+0x17c>)
   834fe:	4798      	blx	r3
					(void *)(p_rx_td->addr.val & EMAC_RXD_ADDR_MASK),
					us_buffer_length);
			p_tmp_frame += us_buffer_length;
   83500:	44c8      	add	r8, r9
			tmp_ul_frame_size += us_buffer_length;
   83502:	444f      	add	r7, r9

			/* An end of frame has been received, return the data */
			if ((p_rx_td->status.val & EMAC_RXD_EOF) == EMAC_RXD_EOF) {
   83504:	686b      	ldr	r3, [r5, #4]
   83506:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   8350a:	d028      	beq.n	8355e <emac_dev_read+0x136>
				/* Frame size from the EMAC */
				*p_rcv_size = (p_rx_td->status.val & EMAC_RXD_LEN_MASK);
   8350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   83510:	9801      	ldr	r0, [sp, #4]
   83512:	6003      	str	r3, [r0, #0]

				/* All data have been copied in the application frame buffer => release TD */
				while (p_emac_dev->us_rx_idx != us_tmp_idx) {
   83514:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   83516:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   8351a:	429a      	cmp	r2, r3
   8351c:	d011      	beq.n	83542 <emac_dev_read+0x11a>
					p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   8351e:	f104 0622 	add.w	r6, r4, #34	; 0x22
   83522:	4d1f      	ldr	r5, [pc, #124]	; (835a0 <emac_dev_read+0x178>)
				/* Frame size from the EMAC */
				*p_rcv_size = (p_rx_td->status.val & EMAC_RXD_LEN_MASK);

				/* All data have been copied in the application frame buffer => release TD */
				while (p_emac_dev->us_rx_idx != us_tmp_idx) {
					p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
   83524:	68e2      	ldr	r2, [r4, #12]
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
   83526:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   8352a:	f021 0101 	bic.w	r1, r1, #1
   8352e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   83532:	4630      	mov	r0, r6
   83534:	8c21      	ldrh	r1, [r4, #32]
   83536:	47a8      	blx	r5
			if ((p_rx_td->status.val & EMAC_RXD_EOF) == EMAC_RXD_EOF) {
				/* Frame size from the EMAC */
				*p_rcv_size = (p_rx_td->status.val & EMAC_RXD_LEN_MASK);

				/* All data have been copied in the application frame buffer => release TD */
				while (p_emac_dev->us_rx_idx != us_tmp_idx) {
   83538:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   8353a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   8353e:	429a      	cmp	r2, r3
   83540:	d1f0      	bne.n	83524 <emac_dev_read+0xfc>
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
				}

				/* Application frame buffer is too small so that all data have not been copied */
				if (tmp_ul_frame_size < *p_rcv_size) {
   83542:	9a01      	ldr	r2, [sp, #4]
   83544:	6810      	ldr	r0, [r2, #0]
					return EMAC_SIZE_TOO_SMALL;
   83546:	4287      	cmp	r7, r0
   83548:	bf34      	ite	cc
   8354a:	2004      	movcc	r0, #4
   8354c:	2000      	movcs	r0, #0
   8354e:	e024      	b.n	8359a <emac_dev_read+0x172>
				return EMAC_OK;
			}
		}
		/* SOF has not been detected, skip the fragment */
		else {
			p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
   83550:	682b      	ldr	r3, [r5, #0]
   83552:	f023 0301 	bic.w	r3, r3, #1
   83556:	602b      	str	r3, [r5, #0]
			p_emac_dev->us_rx_idx = us_tmp_idx;
   83558:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   8355c:	8463      	strh	r3, [r4, #34]	; 0x22
		}

		/* Process the next buffer */
		p_rx_td = &p_emac_dev->p_rx_dscr[us_tmp_idx];
   8355e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   83562:	68e3      	ldr	r3, [r4, #12]
   83564:	eb03 05c2 	add.w	r5, r3, r2, lsl #3

	/* Set the default return value */
	*p_rcv_size = 0;

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
   83568:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   8356c:	f013 0f01 	tst.w	r3, #1
   83570:	f47f af77 	bne.w	83462 <emac_dev_read+0x3a>
   83574:	e005      	b.n	83582 <emac_dev_read+0x15a>
	emac_rx_descriptor_t *p_rx_td =
			&p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
	int8_t c_is_frame = 0;

	if (p_frame == NULL)
		return EMAC_PARAM;
   83576:	2005      	movs	r0, #5
   83578:	e00f      	b.n	8359a <emac_dev_read+0x172>

		/* Process the next buffer */
		p_rx_td = &p_emac_dev->p_rx_dscr[us_tmp_idx];
	}

	return EMAC_RX_NULL;
   8357a:	2003      	movs	r0, #3
   8357c:	e00d      	b.n	8359a <emac_dev_read+0x172>
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
							
				} while (us_tmp_idx != p_emac_dev->us_rx_idx);

				return EMAC_RX_NULL;
   8357e:	2003      	movs	r0, #3
   83580:	e00b      	b.n	8359a <emac_dev_read+0x172>

		/* Process the next buffer */
		p_rx_td = &p_emac_dev->p_rx_dscr[us_tmp_idx];
	}

	return EMAC_RX_NULL;
   83582:	2003      	movs	r0, #3
   83584:	e009      	b.n	8359a <emac_dev_read+0x172>
			/* Start to gather buffers in a frame */
			c_is_frame = 1;
		}

		/* Increment the pointer */
		circ_inc(&us_tmp_idx, p_emac_dev->us_rx_list_size);
   83586:	f10d 000e 	add.w	r0, sp, #14
   8358a:	8c21      	ldrh	r1, [r4, #32]
   8358c:	47b0      	blx	r6
   8358e:	f8dd 8000 	ldr.w	r8, [sp]
   83592:	f04f 0a01 	mov.w	sl, #1
   83596:	2700      	movs	r7, #0
   83598:	e788      	b.n	834ac <emac_dev_read+0x84>
		/* Process the next buffer */
		p_rx_td = &p_emac_dev->p_rx_dscr[us_tmp_idx];
	}

	return EMAC_RX_NULL;
}
   8359a:	b005      	add	sp, #20
   8359c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835a0:	000831d5 	.word	0x000831d5
   835a4:	0008cca9 	.word	0x0008cca9

000835a8 <emac_dev_write>:
 *
 * \return Length sent.
 */
uint32_t emac_dev_write(emac_device_t* p_emac_dev, void *p_buffer,
		uint32_t ul_size, emac_dev_tx_cb_t func_tx_cb)
{
   835a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   835ac:	4604      	mov	r4, r0
   835ae:	4615      	mov	r5, r2
   835b0:	461f      	mov	r7, r3

	volatile emac_tx_descriptor_t *p_tx_td;
	volatile emac_dev_tx_cb_t *p_func_tx_cb;

	Emac *p_hw = p_emac_dev->p_hw;
   835b2:	6806      	ldr	r6, [r0, #0]


	/* Check parameter */
	if (ul_size > EMAC_TX_UNITSIZE) {
   835b4:	f240 52ee 	movw	r2, #1518	; 0x5ee
   835b8:	4295      	cmp	r5, r2
   835ba:	d833      	bhi.n	83624 <emac_dev_write+0x7c>
		return EMAC_PARAM;
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_emac_dev->p_tx_dscr[p_emac_dev->us_tx_head];
   835bc:	f8d0 c010 	ldr.w	ip, [r0, #16]
   835c0:	f8b0 8026 	ldrh.w	r8, [r0, #38]	; 0x26

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
	if (CIRC_SPACE(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
   835c4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   835c6:	ea6f 0308 	mvn.w	r3, r8
   835ca:	441a      	add	r2, r3
   835cc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   835ce:	fb92 f0f3 	sdiv	r0, r2, r3
   835d2:	fb03 2310 	mls	r3, r3, r0, r2
   835d6:	b343      	cbz	r3, 8362a <emac_dev_write+0x82>
	if (ul_size > EMAC_TX_UNITSIZE) {
		return EMAC_PARAM;
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_emac_dev->p_tx_dscr[p_emac_dev->us_tx_head];
   835d8:	eb0c 09c8 	add.w	r9, ip, r8, lsl #3
					p_emac_dev->us_tx_list_size) == 0) {
		return EMAC_TX_BUSY;
	}

	/* Pointers to the current Tx callback */
	p_func_tx_cb = &p_emac_dev->func_tx_cb_list[p_emac_dev->us_tx_head];
   835dc:	f8d4 a01c 	ldr.w	sl, [r4, #28]

	/* Set up/copy data to transmission buffer */
	if (p_buffer && ul_size) {
   835e0:	b129      	cbz	r1, 835ee <emac_dev_write+0x46>
   835e2:	b125      	cbz	r5, 835ee <emac_dev_write+0x46>
		/* Driver manages the ring buffer */
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
   835e4:	f85c 0038 	ldr.w	r0, [ip, r8, lsl #3]
   835e8:	462a      	mov	r2, r5
   835ea:	4b11      	ldr	r3, [pc, #68]	; (83630 <emac_dev_write+0x88>)
   835ec:	4798      	blx	r3
	}

	/* Tx callback */
	*p_func_tx_cb = func_tx_cb;
   835ee:	f84a 7028 	str.w	r7, [sl, r8, lsl #2]

	/* Update transmit descriptor status */

	/* The buffer size defined is the length of ethernet frame,
	   so it's always the last buffer of the frame. */
	if (p_emac_dev->us_tx_head == p_emac_dev->us_tx_list_size - 1) {
   835f2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   835f4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   835f6:	3b01      	subs	r3, #1
   835f8:	429a      	cmp	r2, r3
		p_tx_td->status.val =
				(ul_size & EMAC_TXD_LEN_MASK) | EMAC_TXD_LAST
   835fa:	f3c5 050a 	ubfx	r5, r5, #0, #11
				| EMAC_TXD_WRAP;
   835fe:	bf08      	it	eq
   83600:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
	} else {
		p_tx_td->status.val =
				(ul_size & EMAC_TXD_LEN_MASK) | EMAC_TXD_LAST;
   83604:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
	if (p_emac_dev->us_tx_head == p_emac_dev->us_tx_list_size - 1) {
		p_tx_td->status.val =
				(ul_size & EMAC_TXD_LEN_MASK) | EMAC_TXD_LAST
				| EMAC_TXD_WRAP;
	} else {
		p_tx_td->status.val =
   83608:	f8c9 5004 	str.w	r5, [r9, #4]
				(ul_size & EMAC_TXD_LEN_MASK) | EMAC_TXD_LAST;
	}

	circ_inc(&p_emac_dev->us_tx_head, p_emac_dev->us_tx_list_size);
   8360c:	f104 0026 	add.w	r0, r4, #38	; 0x26
   83610:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   83612:	4b08      	ldr	r3, [pc, #32]	; (83634 <emac_dev_write+0x8c>)
   83614:	4798      	blx	r3
 *
 * \param p_emac   Pointer to the EMAC instance.
 */
static inline void emac_start_transmission(Emac* p_emac)
{
	p_emac->EMAC_NCR |= EMAC_NCR_TSTART;
   83616:	6833      	ldr	r3, [r6, #0]
   83618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8361c:	6033      	str	r3, [r6, #0]

	/* Now start to transmit if it is still not done */
	emac_start_transmission(p_hw);

	return EMAC_OK;
   8361e:	2000      	movs	r0, #0
   83620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Emac *p_hw = p_emac_dev->p_hw;


	/* Check parameter */
	if (ul_size > EMAC_TX_UNITSIZE) {
		return EMAC_PARAM;
   83624:	2005      	movs	r0, #5
   83626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	p_tx_td = &p_emac_dev->p_tx_dscr[p_emac_dev->us_tx_head];

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
	if (CIRC_SPACE(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
					p_emac_dev->us_tx_list_size) == 0) {
		return EMAC_TX_BUSY;
   8362a:	2002      	movs	r0, #2

	/* Now start to transmit if it is still not done */
	emac_start_transmission(p_hw);

	return EMAC_OK;
}
   8362c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83630:	0008cca9 	.word	0x0008cca9
   83634:	000831d5 	.word	0x000831d5

00083638 <emac_handler>:
 * \brief EMAC Interrupt handler.
 *
 * \param p_emac_dev   Pointer to EMAC device instance.
 */
void emac_handler(emac_device_t* p_emac_dev)
{
   83638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8363c:	b084      	sub	sp, #16
   8363e:	4604      	mov	r4, r0
	Emac *p_hw = p_emac_dev->p_hw;
   83640:	6807      	ldr	r7, [r0, #0]
 *
 * \return Interrupt status.
 */
static inline uint32_t emac_get_interrupt_status(Emac* p_emac)
{
	return p_emac->EMAC_ISR;
   83642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	volatile uint32_t ul_rsr;
	volatile uint32_t ul_tsr;
	uint32_t ul_rx_status_flag;
	uint32_t ul_tx_status_flag;

	ul_isr = emac_get_interrupt_status(p_hw);
   83644:	9303      	str	r3, [sp, #12]
 *
 * \param p_emac   Pointer to the EMAC instance.
 */
static inline uint32_t emac_get_rx_status(Emac* p_emac)
{
	return p_emac->EMAC_RSR;
   83646:	6a3b      	ldr	r3, [r7, #32]
	ul_rsr = emac_get_rx_status(p_hw);
   83648:	9302      	str	r3, [sp, #8]
 *
 * \return  Transmit status.
 */
static inline uint32_t emac_get_tx_status(Emac* p_emac)
{
	return p_emac->EMAC_TSR;
   8364a:	697b      	ldr	r3, [r7, #20]
	ul_tsr = emac_get_tx_status(p_hw);
   8364c:	9301      	str	r3, [sp, #4]
 *
 * \return Interrupt mask.
 */
static inline uint32_t emac_get_interrupt_mask(Emac* p_emac)
{
	return p_emac->EMAC_IMR;
   8364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

	ul_isr &= ~(emac_get_interrupt_mask(p_hw) | 0xFFC300);
   83650:	9a03      	ldr	r2, [sp, #12]
   83652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
   83656:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
   8365a:	ea22 0303 	bic.w	r3, r2, r3
   8365e:	9303      	str	r3, [sp, #12]

	/* RX packet */
	if ((ul_isr & EMAC_ISR_RCOMP) || (ul_rsr & EMAC_RSR_REC)) {
   83660:	9b03      	ldr	r3, [sp, #12]
   83662:	f013 0f02 	tst.w	r3, #2
   83666:	d103      	bne.n	83670 <emac_handler+0x38>
   83668:	9b02      	ldr	r3, [sp, #8]
   8366a:	f013 0f02 	tst.w	r3, #2
   8366e:	d010      	beq.n	83692 <emac_handler+0x5a>
		ul_rx_status_flag = EMAC_RSR_REC;

		/* Check OVR */
		if (ul_rsr & EMAC_RSR_OVR) {
   83670:	9b02      	ldr	r3, [sp, #8]
   83672:	f003 0304 	and.w	r3, r3, #4

	ul_isr &= ~(emac_get_interrupt_mask(p_hw) | 0xFFC300);

	/* RX packet */
	if ((ul_isr & EMAC_ISR_RCOMP) || (ul_rsr & EMAC_RSR_REC)) {
		ul_rx_status_flag = EMAC_RSR_REC;
   83676:	2b00      	cmp	r3, #0
   83678:	bf14      	ite	ne
   8367a:	2006      	movne	r0, #6
   8367c:	2002      	moveq	r0, #2
		/* Check OVR */
		if (ul_rsr & EMAC_RSR_OVR) {
			ul_rx_status_flag |= EMAC_RSR_OVR;
		}
		/* Check BNA */
		if (ul_rsr & EMAC_RSR_BNA) {
   8367e:	9b02      	ldr	r3, [sp, #8]
   83680:	f013 0f01 	tst.w	r3, #1
			ul_rx_status_flag |= EMAC_RSR_BNA;
   83684:	bf18      	it	ne
   83686:	f040 0001 	orrne.w	r0, r0, #1
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_status   Receive status.
 */
static inline void emac_clear_rx_status(Emac* p_emac, uint32_t ul_status)
{
	p_emac->EMAC_RSR = ul_status;
   8368a:	6238      	str	r0, [r7, #32]
		}
		/* Clear status */
		emac_clear_rx_status(p_hw, ul_rx_status_flag);

		/* Invoke callbacks */
		if (p_emac_dev->func_rx_cb) {
   8368c:	6963      	ldr	r3, [r4, #20]
   8368e:	b103      	cbz	r3, 83692 <emac_handler+0x5a>
			p_emac_dev->func_rx_cb(ul_rx_status_flag);
   83690:	4798      	blx	r3
		}
	}

	/* TX packet */
	if ((ul_isr & EMAC_ISR_TCOMP) || (ul_tsr & EMAC_TSR_COMP)) {
   83692:	9b03      	ldr	r3, [sp, #12]
   83694:	f013 0f80 	tst.w	r3, #128	; 0x80
   83698:	d103      	bne.n	836a2 <emac_handler+0x6a>
   8369a:	9b01      	ldr	r3, [sp, #4]
   8369c:	f013 0f20 	tst.w	r3, #32
   836a0:	d067      	beq.n	83772 <emac_handler+0x13a>
		ul_tx_status_flag = EMAC_TSR_COMP;

		/* A frame transmitted */

		/* Check RLE */
		if (ul_tsr & EMAC_TSR_RLES) {
   836a2:	9b01      	ldr	r3, [sp, #4]
   836a4:	f013 0f04 	tst.w	r3, #4
   836a8:	d014      	beq.n	836d4 <emac_handler+0x9c>
			/* Status RLE & Number of discarded buffers */
			ul_tx_status_flag = EMAC_TSR_RLES | CIRC_CNT(p_emac_dev->us_tx_head,
   836aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   836ac:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   836ae:	1ac9      	subs	r1, r1, r3
   836b0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   836b2:	fb91 f5f2 	sdiv	r5, r1, r2
   836b6:	fb02 1215 	mls	r2, r2, r5, r1
   836ba:	f042 0504 	orr.w	r5, r2, #4
					p_emac_dev->us_tx_tail, p_emac_dev->us_tx_list_size);
			p_tx_cb = &p_emac_dev->func_tx_cb_list[p_emac_dev->us_tx_tail];
   836be:	69e6      	ldr	r6, [r4, #28]
   836c0:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			emac_reset_tx_mem(p_emac_dev);
   836c4:	4620      	mov	r0, r4
   836c6:	4b2c      	ldr	r3, [pc, #176]	; (83778 <emac_handler+0x140>)
   836c8:	4798      	blx	r3
 * \param uc_enable   0 to disable EMAC transmit, else to enable it.
 */
static inline void emac_enable_transmit(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_TE;
   836ca:	683b      	ldr	r3, [r7, #0]
   836cc:	f043 0308 	orr.w	r3, r3, #8
   836d0:	603b      	str	r3, [r7, #0]
   836d2:	e000      	b.n	836d6 <emac_handler+0x9e>
	}

	/* TX packet */
	if ((ul_isr & EMAC_ISR_TCOMP) || (ul_tsr & EMAC_TSR_COMP)) {

		ul_tx_status_flag = EMAC_TSR_COMP;
   836d4:	2520      	movs	r5, #32
			p_tx_cb = &p_emac_dev->func_tx_cb_list[p_emac_dev->us_tx_tail];
			emac_reset_tx_mem(p_emac_dev);
			emac_enable_transmit(p_hw, 1);
		}
		/* Check COL */
		if (ul_tsr & EMAC_TSR_COL) {
   836d6:	9b01      	ldr	r3, [sp, #4]
   836d8:	f013 0f02 	tst.w	r3, #2
			ul_tx_status_flag |= EMAC_TSR_COL;
   836dc:	bf18      	it	ne
   836de:	f045 0502 	orrne.w	r5, r5, #2
		}
		/* Check BEX */
		if (ul_tsr & EMAC_TSR_BEX) {
   836e2:	9b01      	ldr	r3, [sp, #4]
   836e4:	f013 0f10 	tst.w	r3, #16
			ul_tx_status_flag |= EMAC_TSR_BEX;
   836e8:	bf18      	it	ne
   836ea:	f045 0510 	orrne.w	r5, r5, #16
		}
		/* Check UND */
		if (ul_tsr & EMAC_TSR_UND) {
   836ee:	9b01      	ldr	r3, [sp, #4]
   836f0:	f013 0f40 	tst.w	r3, #64	; 0x40
			ul_tx_status_flag |= EMAC_TSR_UND;
   836f4:	bf18      	it	ne
   836f6:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_status   Transmit status.
 */
static inline void emac_clear_tx_status(Emac* p_emac, uint32_t ul_status)
{
	p_emac->EMAC_TSR = ul_status;
   836fa:	617d      	str	r5, [r7, #20]
		}
		/* Clear status */
		emac_clear_tx_status(p_hw, ul_tx_status_flag);

		if (!CIRC_EMPTY(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail)) {
   836fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   836fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   83700:	429a      	cmp	r2, r3
   83702:	d01e      	beq.n	83742 <emac_handler+0x10a>
				/* Notify upper layer that a packet has been sent */
				if (*p_tx_cb) {
					(*p_tx_cb) (ul_tx_status_flag);
				}

				circ_inc(&p_emac_dev->us_tx_tail, p_emac_dev->us_tx_list_size);
   83704:	f104 0828 	add.w	r8, r4, #40	; 0x28
   83708:	4f1c      	ldr	r7, [pc, #112]	; (8377c <emac_handler+0x144>)
		emac_clear_tx_status(p_hw, ul_tx_status_flag);

		if (!CIRC_EMPTY(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail)) {
			/* Check the buffers */
			do {
				p_tx_td = &p_emac_dev->p_tx_dscr[p_emac_dev->us_tx_tail];
   8370a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				p_tx_cb = &p_emac_dev->func_tx_cb_list[p_emac_dev->us_tx_tail];
   8370c:	69e2      	ldr	r2, [r4, #28]
   8370e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
				/* Any error? Exit if buffer has not been sent yet */
				if ((p_tx_td->status.val & EMAC_TXD_USED) == 0) {
   83712:	6921      	ldr	r1, [r4, #16]
   83714:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   83718:	6849      	ldr	r1, [r1, #4]
   8371a:	2900      	cmp	r1, #0
   8371c:	da11      	bge.n	83742 <emac_handler+0x10a>
					break;
				}

				/* Notify upper layer that a packet has been sent */
				if (*p_tx_cb) {
   8371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83722:	b10b      	cbz	r3, 83728 <emac_handler+0xf0>
					(*p_tx_cb) (ul_tx_status_flag);
   83724:	4628      	mov	r0, r5
   83726:	4798      	blx	r3
				}

				circ_inc(&p_emac_dev->us_tx_tail, p_emac_dev->us_tx_list_size);
   83728:	4640      	mov	r0, r8
   8372a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   8372c:	47b8      	blx	r7
			} while (CIRC_CNT(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
   8372e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   83730:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   83732:	1ad2      	subs	r2, r2, r3
   83734:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   83736:	fb92 f1f3 	sdiv	r1, r2, r3
   8373a:	fb03 2311 	mls	r3, r3, r1, r2
   8373e:	2b00      	cmp	r3, #0
   83740:	d1e3      	bne.n	8370a <emac_handler+0xd2>
							p_emac_dev->us_tx_list_size));
		}

		if (ul_tsr & EMAC_TSR_RLES) {
   83742:	9b01      	ldr	r3, [sp, #4]
   83744:	f013 0f04 	tst.w	r3, #4
   83748:	d003      	beq.n	83752 <emac_handler+0x11a>
			/* Notify upper layer RLE */
			if (*p_tx_cb) {
   8374a:	6833      	ldr	r3, [r6, #0]
   8374c:	b10b      	cbz	r3, 83752 <emac_handler+0x11a>
				(*p_tx_cb) (ul_tx_status_flag);
   8374e:	4628      	mov	r0, r5
   83750:	4798      	blx	r3
			}
		}

		/* If a wakeup has been scheduled, notify upper layer that it can
		   send other packets, and the sending will be successful. */
		if ((CIRC_SPACE(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
   83752:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   83754:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   83756:	43d2      	mvns	r2, r2
   83758:	441a      	add	r2, r3
   8375a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   8375c:	fb92 f1f3 	sdiv	r1, r2, r3
   83760:	fb03 2311 	mls	r3, r3, r1, r2
				p_emac_dev->us_tx_list_size) >= p_emac_dev->uc_wakeup_threshold)
   83764:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
			}
		}

		/* If a wakeup has been scheduled, notify upper layer that it can
		   send other packets, and the sending will be successful. */
		if ((CIRC_SPACE(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
   83768:	428b      	cmp	r3, r1
   8376a:	db02      	blt.n	83772 <emac_handler+0x13a>
				p_emac_dev->us_tx_list_size) >= p_emac_dev->uc_wakeup_threshold)
				&& p_emac_dev->func_wakeup_cb) {
   8376c:	69a3      	ldr	r3, [r4, #24]
   8376e:	b103      	cbz	r3, 83772 <emac_handler+0x13a>
			p_emac_dev->func_wakeup_cb();
   83770:	4798      	blx	r3
		}
	}
}
   83772:	b004      	add	sp, #16
   83774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83778:	000831e5 	.word	0x000831e5
   8377c:	000831d5 	.word	0x000831d5

00083780 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83780:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83782:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   83786:	d016      	beq.n	837b6 <pio_set_peripheral+0x36>
   83788:	d804      	bhi.n	83794 <pio_set_peripheral+0x14>
   8378a:	b1c1      	cbz	r1, 837be <pio_set_peripheral+0x3e>
   8378c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   83790:	d00a      	beq.n	837a8 <pio_set_peripheral+0x28>
   83792:	e013      	b.n	837bc <pio_set_peripheral+0x3c>
   83794:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   83798:	d011      	beq.n	837be <pio_set_peripheral+0x3e>
   8379a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8379e:	d00e      	beq.n	837be <pio_set_peripheral+0x3e>
   837a0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   837a4:	d10a      	bne.n	837bc <pio_set_peripheral+0x3c>
   837a6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   837a8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   837aa:	6f01      	ldr	r1, [r0, #112]	; 0x70
   837ac:	400b      	ands	r3, r1
   837ae:	ea23 0302 	bic.w	r3, r3, r2
   837b2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   837b4:	e002      	b.n	837bc <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   837b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   837b8:	4313      	orrs	r3, r2
   837ba:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   837bc:	6042      	str	r2, [r0, #4]
   837be:	4770      	bx	lr

000837c0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   837c0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   837c2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   837c6:	bf14      	ite	ne
   837c8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   837ca:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   837cc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   837d0:	bf14      	ite	ne
   837d2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   837d4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   837d6:	f012 0f02 	tst.w	r2, #2
   837da:	d002      	beq.n	837e2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   837dc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   837e0:	e004      	b.n	837ec <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   837e2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_SCIFSR = ul_mask;
   837e6:	bf18      	it	ne
   837e8:	f8c0 1080 	strne.w	r1, [r0, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   837ec:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   837ee:	6001      	str	r1, [r0, #0]
   837f0:	4770      	bx	lr
   837f2:	bf00      	nop

000837f4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   837f4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   837f6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   837f8:	9c01      	ldr	r4, [sp, #4]
   837fa:	b10c      	cbz	r4, 83800 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   837fc:	6641      	str	r1, [r0, #100]	; 0x64
   837fe:	e000      	b.n	83802 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   83800:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   83802:	b10b      	cbz	r3, 83808 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   83804:	6501      	str	r1, [r0, #80]	; 0x50
   83806:	e000      	b.n	8380a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   83808:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8380a:	b10a      	cbz	r2, 83810 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8380c:	6301      	str	r1, [r0, #48]	; 0x30
   8380e:	e000      	b.n	83812 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   83810:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   83812:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   83814:	6001      	str	r1, [r0, #0]
}
   83816:	f85d 4b04 	ldr.w	r4, [sp], #4
   8381a:	4770      	bx	lr

0008381c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8381c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8381e:	4770      	bx	lr

00083820 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83820:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83822:	4770      	bx	lr

00083824 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83824:	0943      	lsrs	r3, r0, #5
   83826:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8382a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8382e:	025b      	lsls	r3, r3, #9
#endif
	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83830:	f000 001f 	and.w	r0, r0, #31
   83834:	2201      	movs	r2, #1
   83836:	fa02 f000 	lsl.w	r0, r2, r0
   8383a:	6318      	str	r0, [r3, #48]	; 0x30
   8383c:	4770      	bx	lr
   8383e:	bf00      	nop

00083840 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83840:	0943      	lsrs	r3, r0, #5
   83842:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83846:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8384a:	025b      	lsls	r3, r3, #9
#endif
	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8384c:	f000 001f 	and.w	r0, r0, #31
   83850:	2201      	movs	r2, #1
   83852:	fa02 f000 	lsl.w	r0, r2, r0
   83856:	6358      	str	r0, [r3, #52]	; 0x34
   83858:	4770      	bx	lr
   8385a:	bf00      	nop

0008385c <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8385c:	0943      	lsrs	r3, r0, #5
   8385e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83862:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83866:	025b      	lsls	r3, r3, #9
#endif
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   83868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8386a:	f000 001f 	and.w	r0, r0, #31
   8386e:	2101      	movs	r1, #1
   83870:	fa01 f000 	lsl.w	r0, r1, r0
   83874:	4210      	tst	r0, r2
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83876:	bf14      	ite	ne
   83878:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8387a:	6318      	streq	r0, [r3, #48]	; 0x30
   8387c:	4770      	bx	lr
   8387e:	bf00      	nop

00083880 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83880:	b570      	push	{r4, r5, r6, lr}
   83882:	b082      	sub	sp, #8
   83884:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83886:	0944      	lsrs	r4, r0, #5
   83888:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   8388c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   83890:	0266      	lsls	r6, r4, #9
#endif

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83892:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   83896:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8389a:	d030      	beq.n	838fe <pio_configure_pin+0x7e>
   8389c:	d806      	bhi.n	838ac <pio_configure_pin+0x2c>
   8389e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   838a2:	d00a      	beq.n	838ba <pio_configure_pin+0x3a>
   838a4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   838a8:	d018      	beq.n	838dc <pio_configure_pin+0x5c>
   838aa:	e049      	b.n	83940 <pio_configure_pin+0xc0>
   838ac:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   838b0:	d030      	beq.n	83914 <pio_configure_pin+0x94>
   838b2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   838b6:	d02d      	beq.n	83914 <pio_configure_pin+0x94>
   838b8:	e042      	b.n	83940 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   838ba:	f000 001f 	and.w	r0, r0, #31
   838be:	2401      	movs	r4, #1
   838c0:	4084      	lsls	r4, r0
   838c2:	4630      	mov	r0, r6
   838c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   838c8:	4622      	mov	r2, r4
   838ca:	4b1f      	ldr	r3, [pc, #124]	; (83948 <pio_configure_pin+0xc8>)
   838cc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   838ce:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   838d2:	bf14      	ite	ne
   838d4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   838d6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   838d8:	2001      	movs	r0, #1
   838da:	e032      	b.n	83942 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   838dc:	f000 001f 	and.w	r0, r0, #31
   838e0:	2401      	movs	r4, #1
   838e2:	4084      	lsls	r4, r0
   838e4:	4630      	mov	r0, r6
   838e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   838ea:	4622      	mov	r2, r4
   838ec:	4b16      	ldr	r3, [pc, #88]	; (83948 <pio_configure_pin+0xc8>)
   838ee:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   838f0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   838f4:	bf14      	ite	ne
   838f6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   838f8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   838fa:	2001      	movs	r0, #1
   838fc:	e021      	b.n	83942 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   838fe:	f000 011f 	and.w	r1, r0, #31
   83902:	2401      	movs	r4, #1
   83904:	4630      	mov	r0, r6
   83906:	fa04 f101 	lsl.w	r1, r4, r1
   8390a:	462a      	mov	r2, r5
   8390c:	4b0f      	ldr	r3, [pc, #60]	; (8394c <pio_configure_pin+0xcc>)
   8390e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83910:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   83912:	e016      	b.n	83942 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83914:	f000 011f 	and.w	r1, r0, #31
   83918:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8391a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8391e:	ea05 0304 	and.w	r3, r5, r4
   83922:	9300      	str	r3, [sp, #0]
   83924:	4630      	mov	r0, r6
   83926:	fa04 f101 	lsl.w	r1, r4, r1
   8392a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8392e:	bf14      	ite	ne
   83930:	2200      	movne	r2, #0
   83932:	2201      	moveq	r2, #1
   83934:	f3c5 0380 	ubfx	r3, r5, #2, #1
   83938:	4d05      	ldr	r5, [pc, #20]	; (83950 <pio_configure_pin+0xd0>)
   8393a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8393c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8393e:	e000      	b.n	83942 <pio_configure_pin+0xc2>

	default:
		return 0;
   83940:	2000      	movs	r0, #0
	}

	return 1;
}
   83942:	b002      	add	sp, #8
   83944:	bd70      	pop	{r4, r5, r6, pc}
   83946:	bf00      	nop
   83948:	00083781 	.word	0x00083781
   8394c:	000837c1 	.word	0x000837c1
   83950:	000837f5 	.word	0x000837f5

00083954 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83956:	4604      	mov	r4, r0
   83958:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8395a:	4b0e      	ldr	r3, [pc, #56]	; (83994 <pio_handler_process+0x40>)
   8395c:	4798      	blx	r3
   8395e:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83960:	4620      	mov	r0, r4
   83962:	4b0d      	ldr	r3, [pc, #52]	; (83998 <pio_handler_process+0x44>)
   83964:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   83966:	4005      	ands	r5, r0
   83968:	d012      	beq.n	83990 <pio_handler_process+0x3c>
   8396a:	4c0c      	ldr	r4, [pc, #48]	; (8399c <pio_handler_process+0x48>)
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8396c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   83970:	42b3      	cmp	r3, r6
   83972:	d10a      	bne.n	8398a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83974:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83978:	4229      	tst	r1, r5
   8397a:	d006      	beq.n	8398a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8397c:	6823      	ldr	r3, [r4, #0]
   8397e:	4630      	mov	r0, r6
   83980:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83982:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83986:	ea25 0503 	bic.w	r5, r5, r3
   8398a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8398c:	2d00      	cmp	r5, #0
   8398e:	d1ed      	bne.n	8396c <pio_handler_process+0x18>
   83990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83992:	bf00      	nop
   83994:	0008381d 	.word	0x0008381d
   83998:	00083821 	.word	0x00083821
   8399c:	2007445c 	.word	0x2007445c

000839a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   839a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   839a2:	4802      	ldr	r0, [pc, #8]	; (839ac <PIOA_Handler+0xc>)
   839a4:	210b      	movs	r1, #11
   839a6:	4b02      	ldr	r3, [pc, #8]	; (839b0 <PIOA_Handler+0x10>)
   839a8:	4798      	blx	r3
   839aa:	bd08      	pop	{r3, pc}
   839ac:	400e0e00 	.word	0x400e0e00
   839b0:	00083955 	.word	0x00083955

000839b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   839b4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   839b6:	4802      	ldr	r0, [pc, #8]	; (839c0 <PIOB_Handler+0xc>)
   839b8:	210c      	movs	r1, #12
   839ba:	4b02      	ldr	r3, [pc, #8]	; (839c4 <PIOB_Handler+0x10>)
   839bc:	4798      	blx	r3
   839be:	bd08      	pop	{r3, pc}
   839c0:	400e1000 	.word	0x400e1000
   839c4:	00083955 	.word	0x00083955

000839c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   839c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   839ca:	4802      	ldr	r0, [pc, #8]	; (839d4 <PIOC_Handler+0xc>)
   839cc:	210d      	movs	r1, #13
   839ce:	4b02      	ldr	r3, [pc, #8]	; (839d8 <PIOC_Handler+0x10>)
   839d0:	4798      	blx	r3
   839d2:	bd08      	pop	{r3, pc}
   839d4:	400e1200 	.word	0x400e1200
   839d8:	00083955 	.word	0x00083955

000839dc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   839dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   839de:	4802      	ldr	r0, [pc, #8]	; (839e8 <PIOD_Handler+0xc>)
   839e0:	210e      	movs	r1, #14
   839e2:	4b02      	ldr	r3, [pc, #8]	; (839ec <PIOD_Handler+0x10>)
   839e4:	4798      	blx	r3
   839e6:	bd08      	pop	{r3, pc}
   839e8:	400e1400 	.word	0x400e1400
   839ec:	00083955 	.word	0x00083955

000839f0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
   839f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
   839f2:	4802      	ldr	r0, [pc, #8]	; (839fc <PIOE_Handler+0xc>)
   839f4:	210f      	movs	r1, #15
   839f6:	4b02      	ldr	r3, [pc, #8]	; (83a00 <PIOE_Handler+0x10>)
   839f8:	4798      	blx	r3
   839fa:	bd08      	pop	{r3, pc}
   839fc:	400e1600 	.word	0x400e1600
   83a00:	00083955 	.word	0x00083955

00083a04 <PIOF_Handler>:
/**
 * \brief Parallel IO Controller F interrupt handler.
 * Redefined PIOF interrupt handler for NVIC interrupt table.
 */
void PIOF_Handler(void)
{
   83a04:	b508      	push	{r3, lr}
	pio_handler_process(PIOF, ID_PIOF);
   83a06:	4802      	ldr	r0, [pc, #8]	; (83a10 <PIOF_Handler+0xc>)
   83a08:	2110      	movs	r1, #16
   83a0a:	4b02      	ldr	r3, [pc, #8]	; (83a14 <PIOF_Handler+0x10>)
   83a0c:	4798      	blx	r3
   83a0e:	bd08      	pop	{r3, pc}
   83a10:	400e1800 	.word	0x400e1800
   83a14:	00083955 	.word	0x00083955

00083a18 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83a18:	4b17      	ldr	r3, [pc, #92]	; (83a78 <pmc_switch_mck_to_pllack+0x60>)
   83a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83a1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   83a20:	4310      	orrs	r0, r2
   83a22:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83a26:	f013 0f08 	tst.w	r3, #8
   83a2a:	d109      	bne.n	83a40 <pmc_switch_mck_to_pllack+0x28>
   83a2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83a30:	4911      	ldr	r1, [pc, #68]	; (83a78 <pmc_switch_mck_to_pllack+0x60>)
   83a32:	e001      	b.n	83a38 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83a34:	3b01      	subs	r3, #1
   83a36:	d019      	beq.n	83a6c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83a38:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83a3a:	f012 0f08 	tst.w	r2, #8
   83a3e:	d0f9      	beq.n	83a34 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83a40:	4b0d      	ldr	r3, [pc, #52]	; (83a78 <pmc_switch_mck_to_pllack+0x60>)
   83a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83a44:	f022 0203 	bic.w	r2, r2, #3
   83a48:	f042 0202 	orr.w	r2, r2, #2
   83a4c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83a4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   83a50:	f010 0008 	ands.w	r0, r0, #8
   83a54:	d10c      	bne.n	83a70 <pmc_switch_mck_to_pllack+0x58>
   83a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83a5a:	4907      	ldr	r1, [pc, #28]	; (83a78 <pmc_switch_mck_to_pllack+0x60>)
   83a5c:	e001      	b.n	83a62 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83a5e:	3b01      	subs	r3, #1
   83a60:	d008      	beq.n	83a74 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83a62:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83a64:	f012 0f08 	tst.w	r2, #8
   83a68:	d0f9      	beq.n	83a5e <pmc_switch_mck_to_pllack+0x46>
   83a6a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   83a6c:	2001      	movs	r0, #1
   83a6e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   83a70:	2000      	movs	r0, #0
   83a72:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   83a74:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83a76:	4770      	bx	lr
   83a78:	400e0600 	.word	0x400e0600

00083a7c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83a7c:	b138      	cbz	r0, 83a8e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83a7e:	4911      	ldr	r1, [pc, #68]	; (83ac4 <pmc_switch_mainck_to_xtal+0x48>)
   83a80:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83a82:	4a11      	ldr	r2, [pc, #68]	; (83ac8 <pmc_switch_mainck_to_xtal+0x4c>)
   83a84:	401a      	ands	r2, r3
   83a86:	4b11      	ldr	r3, [pc, #68]	; (83acc <pmc_switch_mainck_to_xtal+0x50>)
   83a88:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83a8a:	620b      	str	r3, [r1, #32]
   83a8c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83a8e:	4a0d      	ldr	r2, [pc, #52]	; (83ac4 <pmc_switch_mainck_to_xtal+0x48>)
   83a90:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83a92:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83a96:	f023 0303 	bic.w	r3, r3, #3
   83a9a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83a9e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83aa2:	0209      	lsls	r1, r1, #8
   83aa4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83aa6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83aa8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83aaa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83aac:	f013 0f01 	tst.w	r3, #1
   83ab0:	d0fb      	beq.n	83aaa <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83ab2:	4a04      	ldr	r2, [pc, #16]	; (83ac4 <pmc_switch_mainck_to_xtal+0x48>)
   83ab4:	6a13      	ldr	r3, [r2, #32]
   83ab6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83abe:	6213      	str	r3, [r2, #32]
   83ac0:	4770      	bx	lr
   83ac2:	bf00      	nop
   83ac4:	400e0600 	.word	0x400e0600
   83ac8:	fec8fffc 	.word	0xfec8fffc
   83acc:	01370002 	.word	0x01370002

00083ad0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83ad0:	4b02      	ldr	r3, [pc, #8]	; (83adc <pmc_osc_is_ready_mainck+0xc>)
   83ad2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83ad4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83ad8:	4770      	bx	lr
   83ada:	bf00      	nop
   83adc:	400e0600 	.word	0x400e0600

00083ae0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83ae0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83ae4:	4b01      	ldr	r3, [pc, #4]	; (83aec <pmc_disable_pllack+0xc>)
   83ae6:	629a      	str	r2, [r3, #40]	; 0x28
   83ae8:	4770      	bx	lr
   83aea:	bf00      	nop
   83aec:	400e0600 	.word	0x400e0600

00083af0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83af0:	4b02      	ldr	r3, [pc, #8]	; (83afc <pmc_is_locked_pllack+0xc>)
   83af2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83af4:	f000 0002 	and.w	r0, r0, #2
   83af8:	4770      	bx	lr
   83afa:	bf00      	nop
   83afc:	400e0600 	.word	0x400e0600

00083b00 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   83b00:	282c      	cmp	r0, #44	; 0x2c
   83b02:	d820      	bhi.n	83b46 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   83b04:	281f      	cmp	r0, #31
   83b06:	d80d      	bhi.n	83b24 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83b08:	4b12      	ldr	r3, [pc, #72]	; (83b54 <pmc_enable_periph_clk+0x54>)
   83b0a:	699a      	ldr	r2, [r3, #24]
   83b0c:	2301      	movs	r3, #1
   83b0e:	4083      	lsls	r3, r0
   83b10:	401a      	ands	r2, r3
   83b12:	4293      	cmp	r3, r2
   83b14:	d019      	beq.n	83b4a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   83b16:	2301      	movs	r3, #1
   83b18:	fa03 f000 	lsl.w	r0, r3, r0
   83b1c:	4b0d      	ldr	r3, [pc, #52]	; (83b54 <pmc_enable_periph_clk+0x54>)
   83b1e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83b20:	2000      	movs	r0, #0
   83b22:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83b24:	4b0b      	ldr	r3, [pc, #44]	; (83b54 <pmc_enable_periph_clk+0x54>)
   83b26:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   83b2a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83b2c:	2301      	movs	r3, #1
   83b2e:	4083      	lsls	r3, r0
   83b30:	401a      	ands	r2, r3
   83b32:	4293      	cmp	r3, r2
   83b34:	d00b      	beq.n	83b4e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   83b36:	2301      	movs	r3, #1
   83b38:	fa03 f000 	lsl.w	r0, r3, r0
   83b3c:	4b05      	ldr	r3, [pc, #20]	; (83b54 <pmc_enable_periph_clk+0x54>)
   83b3e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   83b42:	2000      	movs	r0, #0
   83b44:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   83b46:	2001      	movs	r0, #1
   83b48:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83b4a:	2000      	movs	r0, #0
   83b4c:	4770      	bx	lr
   83b4e:	2000      	movs	r0, #0
}
   83b50:	4770      	bx	lr
   83b52:	bf00      	nop
   83b54:	400e0600 	.word	0x400e0600

00083b58 <rstc_set_external_reset>:
 * \param p_rstc Pointer to an RSTC instance.
 * \param ul_length The length of external reset.
 */
void rstc_set_external_reset(Rstc *p_rstc, const uint32_t ul_length)
{
	uint32_t mode = p_rstc->RSTC_MR;
   83b58:	6883      	ldr	r3, [r0, #8]

	mode &= ~(RSTC_MR_ERSTL_Msk | RSTC_MR_KEY_Msk);
   83b5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   83b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	mode |= (RSTC_MR_ERSTL(ul_length) | RSTC_KEY);
   83b62:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83b66:	0209      	lsls	r1, r1, #8
   83b68:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   83b6c:	430b      	orrs	r3, r1

	p_rstc->RSTC_MR = mode;
   83b6e:	6083      	str	r3, [r0, #8]
   83b70:	4770      	bx	lr
   83b72:	bf00      	nop

00083b74 <rstc_reset_extern>:
 *
 * \param p_rstc   Pointer to an RSTC instance.
 */
void rstc_reset_extern(Rstc *p_rstc)
{
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_EXTRST;
   83b74:	4b01      	ldr	r3, [pc, #4]	; (83b7c <rstc_reset_extern+0x8>)
   83b76:	6003      	str	r3, [r0, #0]
   83b78:	4770      	bx	lr
   83b7a:	bf00      	nop
   83b7c:	a5000008 	.word	0xa5000008

00083b80 <rstc_get_status>:
 *
 * \return RSTC status.
 */
uint32_t rstc_get_status(Rstc *p_rstc)
{
	return p_rstc->RSTC_SR;
   83b80:	6840      	ldr	r0, [r0, #4]
}
   83b82:	4770      	bx	lr

00083b84 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   83b84:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   83b86:	23ac      	movs	r3, #172	; 0xac
   83b88:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   83b8a:	680a      	ldr	r2, [r1, #0]
   83b8c:	684b      	ldr	r3, [r1, #4]
   83b8e:	fbb2 f3f3 	udiv	r3, r2, r3
   83b92:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   83b94:	1e5c      	subs	r4, r3, #1
   83b96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   83b9a:	4294      	cmp	r4, r2
   83b9c:	d80a      	bhi.n	83bb4 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   83b9e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   83ba0:	688b      	ldr	r3, [r1, #8]
   83ba2:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   83ba4:	f240 2302 	movw	r3, #514	; 0x202
   83ba8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   83bac:	2350      	movs	r3, #80	; 0x50
   83bae:	6003      	str	r3, [r0, #0]

	return 0;
   83bb0:	2000      	movs	r0, #0
   83bb2:	e000      	b.n	83bb6 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   83bb4:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   83bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
   83bba:	4770      	bx	lr

00083bbc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   83bbc:	6943      	ldr	r3, [r0, #20]
   83bbe:	f013 0f02 	tst.w	r3, #2
   83bc2:	d002      	beq.n	83bca <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   83bc4:	61c1      	str	r1, [r0, #28]
	return 0;
   83bc6:	2000      	movs	r0, #0
   83bc8:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   83bca:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   83bcc:	4770      	bx	lr
   83bce:	bf00      	nop

00083bd0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   83bd0:	6943      	ldr	r3, [r0, #20]
   83bd2:	f013 0f01 	tst.w	r3, #1
   83bd6:	d003      	beq.n	83be0 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   83bd8:	6983      	ldr	r3, [r0, #24]
   83bda:	700b      	strb	r3, [r1, #0]
	return 0;
   83bdc:	2000      	movs	r0, #0
   83bde:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   83be0:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   83be2:	4770      	bx	lr

00083be4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   83be4:	6943      	ldr	r3, [r0, #20]
   83be6:	f013 0f02 	tst.w	r3, #2
   83bea:	d004      	beq.n	83bf6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   83bec:	f3c1 0108 	ubfx	r1, r1, #0, #9
   83bf0:	61c1      	str	r1, [r0, #28]
	return 0;
   83bf2:	2000      	movs	r0, #0
   83bf4:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   83bf6:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   83bf8:	4770      	bx	lr
   83bfa:	bf00      	nop

00083bfc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   83bfc:	6943      	ldr	r3, [r0, #20]
   83bfe:	f013 0f01 	tst.w	r3, #1
   83c02:	d005      	beq.n	83c10 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   83c04:	6983      	ldr	r3, [r0, #24]
   83c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
   83c0a:	600b      	str	r3, [r1, #0]

	return 0;
   83c0c:	2000      	movs	r0, #0
   83c0e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   83c10:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   83c12:	4770      	bx	lr

00083c14 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83c14:	e7fe      	b.n	83c14 <Dummy_Handler>
   83c16:	bf00      	nop

00083c18 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83c18:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   83c1a:	4b1e      	ldr	r3, [pc, #120]	; (83c94 <Reset_Handler+0x7c>)
   83c1c:	4a1e      	ldr	r2, [pc, #120]	; (83c98 <Reset_Handler+0x80>)
   83c1e:	429a      	cmp	r2, r3
   83c20:	d003      	beq.n	83c2a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   83c22:	4b1e      	ldr	r3, [pc, #120]	; (83c9c <Reset_Handler+0x84>)
   83c24:	4a1b      	ldr	r2, [pc, #108]	; (83c94 <Reset_Handler+0x7c>)
   83c26:	429a      	cmp	r2, r3
   83c28:	d304      	bcc.n	83c34 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83c2a:	4b1d      	ldr	r3, [pc, #116]	; (83ca0 <Reset_Handler+0x88>)
   83c2c:	4a1d      	ldr	r2, [pc, #116]	; (83ca4 <Reset_Handler+0x8c>)
   83c2e:	429a      	cmp	r2, r3
   83c30:	d30f      	bcc.n	83c52 <Reset_Handler+0x3a>
   83c32:	e01a      	b.n	83c6a <Reset_Handler+0x52>
   83c34:	4b1c      	ldr	r3, [pc, #112]	; (83ca8 <Reset_Handler+0x90>)
   83c36:	4c1d      	ldr	r4, [pc, #116]	; (83cac <Reset_Handler+0x94>)
   83c38:	1ae4      	subs	r4, r4, r3
   83c3a:	f024 0403 	bic.w	r4, r4, #3
   83c3e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83c40:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   83c42:	4814      	ldr	r0, [pc, #80]	; (83c94 <Reset_Handler+0x7c>)
   83c44:	4914      	ldr	r1, [pc, #80]	; (83c98 <Reset_Handler+0x80>)
   83c46:	585a      	ldr	r2, [r3, r1]
   83c48:	501a      	str	r2, [r3, r0]
   83c4a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83c4c:	42a3      	cmp	r3, r4
   83c4e:	d1fa      	bne.n	83c46 <Reset_Handler+0x2e>
   83c50:	e7eb      	b.n	83c2a <Reset_Handler+0x12>
   83c52:	4b17      	ldr	r3, [pc, #92]	; (83cb0 <Reset_Handler+0x98>)
   83c54:	4917      	ldr	r1, [pc, #92]	; (83cb4 <Reset_Handler+0x9c>)
   83c56:	1ac9      	subs	r1, r1, r3
   83c58:	f021 0103 	bic.w	r1, r1, #3
   83c5c:	1d1a      	adds	r2, r3, #4
   83c5e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   83c60:	2200      	movs	r2, #0
   83c62:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83c66:	428b      	cmp	r3, r1
   83c68:	d1fb      	bne.n	83c62 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83c6a:	4a13      	ldr	r2, [pc, #76]	; (83cb8 <Reset_Handler+0xa0>)
   83c6c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   83c70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83c74:	4911      	ldr	r1, [pc, #68]	; (83cbc <Reset_Handler+0xa4>)
   83c76:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83c78:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   83c7c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   83c80:	d203      	bcs.n	83c8a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83c82:	688a      	ldr	r2, [r1, #8]
   83c84:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   83c88:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83c8a:	4b0d      	ldr	r3, [pc, #52]	; (83cc0 <Reset_Handler+0xa8>)
   83c8c:	4798      	blx	r3

	/* Branch to main function */
	main();
   83c8e:	4b0d      	ldr	r3, [pc, #52]	; (83cc4 <Reset_Handler+0xac>)
   83c90:	4798      	blx	r3
   83c92:	e7fe      	b.n	83c92 <Reset_Handler+0x7a>
   83c94:	20070000 	.word	0x20070000
   83c98:	000b13bc 	.word	0x000b13bc
   83c9c:	20070b88 	.word	0x20070b88
   83ca0:	200768fc 	.word	0x200768fc
   83ca4:	20070b88 	.word	0x20070b88
   83ca8:	20070004 	.word	0x20070004
   83cac:	20070b8b 	.word	0x20070b8b
   83cb0:	20070b84 	.word	0x20070b84
   83cb4:	200768f7 	.word	0x200768f7
   83cb8:	00080000 	.word	0x00080000
   83cbc:	e000ed00 	.word	0xe000ed00
   83cc0:	0008c7ed 	.word	0x0008c7ed
   83cc4:	000840d5 	.word	0x000840d5

00083cc8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83cc8:	4b3e      	ldr	r3, [pc, #248]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83ccc:	f003 0303 	and.w	r3, r3, #3
   83cd0:	2b03      	cmp	r3, #3
   83cd2:	d85f      	bhi.n	83d94 <SystemCoreClockUpdate+0xcc>
   83cd4:	e8df f003 	tbb	[pc, r3]
   83cd8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83cdc:	4b3a      	ldr	r3, [pc, #232]	; (83dc8 <SystemCoreClockUpdate+0x100>)
   83cde:	695b      	ldr	r3, [r3, #20]
   83ce0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83ce4:	bf14      	ite	ne
   83ce6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83cea:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   83cee:	4b37      	ldr	r3, [pc, #220]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83cf0:	601a      	str	r2, [r3, #0]
   83cf2:	e04f      	b.n	83d94 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83cf4:	4b33      	ldr	r3, [pc, #204]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83cf6:	6a1b      	ldr	r3, [r3, #32]
   83cf8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   83cfc:	d003      	beq.n	83d06 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83cfe:	4a34      	ldr	r2, [pc, #208]	; (83dd0 <SystemCoreClockUpdate+0x108>)
   83d00:	4b32      	ldr	r3, [pc, #200]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d02:	601a      	str	r2, [r3, #0]
   83d04:	e046      	b.n	83d94 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83d06:	4a33      	ldr	r2, [pc, #204]	; (83dd4 <SystemCoreClockUpdate+0x10c>)
   83d08:	4b30      	ldr	r3, [pc, #192]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d0a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83d0c:	4b2d      	ldr	r3, [pc, #180]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83d0e:	6a1b      	ldr	r3, [r3, #32]
   83d10:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83d14:	2b10      	cmp	r3, #16
   83d16:	d002      	beq.n	83d1e <SystemCoreClockUpdate+0x56>
   83d18:	2b20      	cmp	r3, #32
   83d1a:	d004      	beq.n	83d26 <SystemCoreClockUpdate+0x5e>
   83d1c:	e03a      	b.n	83d94 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83d1e:	4a2e      	ldr	r2, [pc, #184]	; (83dd8 <SystemCoreClockUpdate+0x110>)
   83d20:	4b2a      	ldr	r3, [pc, #168]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d22:	601a      	str	r2, [r3, #0]
				break;
   83d24:	e036      	b.n	83d94 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83d26:	4a2a      	ldr	r2, [pc, #168]	; (83dd0 <SystemCoreClockUpdate+0x108>)
   83d28:	4b28      	ldr	r3, [pc, #160]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d2a:	601a      	str	r2, [r3, #0]
				break;
   83d2c:	e032      	b.n	83d94 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83d2e:	4b25      	ldr	r3, [pc, #148]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83d30:	6a1b      	ldr	r3, [r3, #32]
   83d32:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   83d36:	d003      	beq.n	83d40 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83d38:	4a25      	ldr	r2, [pc, #148]	; (83dd0 <SystemCoreClockUpdate+0x108>)
   83d3a:	4b24      	ldr	r3, [pc, #144]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d3c:	601a      	str	r2, [r3, #0]
   83d3e:	e012      	b.n	83d66 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83d40:	4a24      	ldr	r2, [pc, #144]	; (83dd4 <SystemCoreClockUpdate+0x10c>)
   83d42:	4b22      	ldr	r3, [pc, #136]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d44:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83d46:	4b1f      	ldr	r3, [pc, #124]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83d48:	6a1b      	ldr	r3, [r3, #32]
   83d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83d4e:	2b10      	cmp	r3, #16
   83d50:	d002      	beq.n	83d58 <SystemCoreClockUpdate+0x90>
   83d52:	2b20      	cmp	r3, #32
   83d54:	d004      	beq.n	83d60 <SystemCoreClockUpdate+0x98>
   83d56:	e006      	b.n	83d66 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83d58:	4a1f      	ldr	r2, [pc, #124]	; (83dd8 <SystemCoreClockUpdate+0x110>)
   83d5a:	4b1c      	ldr	r3, [pc, #112]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d5c:	601a      	str	r2, [r3, #0]
				break;
   83d5e:	e002      	b.n	83d66 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83d60:	4a1b      	ldr	r2, [pc, #108]	; (83dd0 <SystemCoreClockUpdate+0x108>)
   83d62:	4b1a      	ldr	r3, [pc, #104]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d64:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83d66:	4b17      	ldr	r3, [pc, #92]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83d6a:	f003 0303 	and.w	r3, r3, #3
   83d6e:	2b02      	cmp	r3, #2
   83d70:	d10d      	bne.n	83d8e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83d72:	4b14      	ldr	r3, [pc, #80]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83d74:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83d76:	6a99      	ldr	r1, [r3, #40]	; 0x28
   83d78:	4b14      	ldr	r3, [pc, #80]	; (83dcc <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83d7a:	f3c0 400a 	ubfx	r0, r0, #16, #11
   83d7e:	681a      	ldr	r2, [r3, #0]
   83d80:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83d84:	b2c9      	uxtb	r1, r1
   83d86:	fbb2 f2f1 	udiv	r2, r2, r1
   83d8a:	601a      	str	r2, [r3, #0]
   83d8c:	e002      	b.n	83d94 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83d8e:	4a13      	ldr	r2, [pc, #76]	; (83ddc <SystemCoreClockUpdate+0x114>)
   83d90:	4b0e      	ldr	r3, [pc, #56]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83d92:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83d94:	4b0b      	ldr	r3, [pc, #44]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83d9c:	2b70      	cmp	r3, #112	; 0x70
   83d9e:	d107      	bne.n	83db0 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   83da0:	4b0a      	ldr	r3, [pc, #40]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83da2:	681a      	ldr	r2, [r3, #0]
   83da4:	490e      	ldr	r1, [pc, #56]	; (83de0 <SystemCoreClockUpdate+0x118>)
   83da6:	fba1 0202 	umull	r0, r2, r1, r2
   83daa:	0852      	lsrs	r2, r2, #1
   83dac:	601a      	str	r2, [r3, #0]
   83dae:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83db0:	4b04      	ldr	r3, [pc, #16]	; (83dc4 <SystemCoreClockUpdate+0xfc>)
   83db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   83db4:	4b05      	ldr	r3, [pc, #20]	; (83dcc <SystemCoreClockUpdate+0x104>)
   83db6:	f3c1 1102 	ubfx	r1, r1, #4, #3
   83dba:	681a      	ldr	r2, [r3, #0]
   83dbc:	40ca      	lsrs	r2, r1
   83dbe:	601a      	str	r2, [r3, #0]
   83dc0:	4770      	bx	lr
   83dc2:	bf00      	nop
   83dc4:	400e0600 	.word	0x400e0600
   83dc8:	400e1a10 	.word	0x400e1a10
   83dcc:	200702a8 	.word	0x200702a8
   83dd0:	00b71b00 	.word	0x00b71b00
   83dd4:	003d0900 	.word	0x003d0900
   83dd8:	007a1200 	.word	0x007a1200
   83ddc:	0e4e1c00 	.word	0x0e4e1c00
   83de0:	aaaaaaab 	.word	0xaaaaaaab

00083de4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   83de4:	4b1b      	ldr	r3, [pc, #108]	; (83e54 <system_init_flash+0x70>)
   83de6:	4298      	cmp	r0, r3
   83de8:	d806      	bhi.n	83df8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   83dea:	2300      	movs	r3, #0
   83dec:	4a1a      	ldr	r2, [pc, #104]	; (83e58 <system_init_flash+0x74>)
   83dee:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   83df0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   83df4:	6013      	str	r3, [r2, #0]
   83df6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   83df8:	4b18      	ldr	r3, [pc, #96]	; (83e5c <system_init_flash+0x78>)
   83dfa:	4298      	cmp	r0, r3
   83dfc:	d807      	bhi.n	83e0e <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   83dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
   83e02:	4a15      	ldr	r2, [pc, #84]	; (83e58 <system_init_flash+0x74>)
   83e04:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   83e06:	f502 7200 	add.w	r2, r2, #512	; 0x200
   83e0a:	6013      	str	r3, [r2, #0]
   83e0c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   83e0e:	4b14      	ldr	r3, [pc, #80]	; (83e60 <system_init_flash+0x7c>)
   83e10:	4298      	cmp	r0, r3
   83e12:	d807      	bhi.n	83e24 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   83e14:	f44f 7300 	mov.w	r3, #512	; 0x200
   83e18:	4a0f      	ldr	r2, [pc, #60]	; (83e58 <system_init_flash+0x74>)
   83e1a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   83e1c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   83e20:	6013      	str	r3, [r2, #0]
   83e22:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   83e24:	4b0f      	ldr	r3, [pc, #60]	; (83e64 <system_init_flash+0x80>)
   83e26:	4298      	cmp	r0, r3
   83e28:	d807      	bhi.n	83e3a <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   83e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
   83e2e:	4a0a      	ldr	r2, [pc, #40]	; (83e58 <system_init_flash+0x74>)
   83e30:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   83e32:	f502 7200 	add.w	r2, r2, #512	; 0x200
   83e36:	6013      	str	r3, [r2, #0]
   83e38:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   83e3a:	4b0b      	ldr	r3, [pc, #44]	; (83e68 <system_init_flash+0x84>)
   83e3c:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   83e3e:	bf94      	ite	ls
   83e40:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   83e44:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   83e48:	4a03      	ldr	r2, [pc, #12]	; (83e58 <system_init_flash+0x74>)
   83e4a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   83e4c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   83e50:	6013      	str	r3, [r2, #0]
   83e52:	4770      	bx	lr
   83e54:	0121eabf 	.word	0x0121eabf
   83e58:	400e0a00 	.word	0x400e0a00
   83e5c:	02faf07f 	.word	0x02faf07f
   83e60:	03d08fff 	.word	0x03d08fff
   83e64:	04c4b3ff 	.word	0x04c4b3ff
   83e68:	055d4a7f 	.word	0x055d4a7f

00083e6c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83e6c:	4b09      	ldr	r3, [pc, #36]	; (83e94 <_sbrk+0x28>)
   83e6e:	681b      	ldr	r3, [r3, #0]
   83e70:	b913      	cbnz	r3, 83e78 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   83e72:	4a09      	ldr	r2, [pc, #36]	; (83e98 <_sbrk+0x2c>)
   83e74:	4b07      	ldr	r3, [pc, #28]	; (83e94 <_sbrk+0x28>)
   83e76:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   83e78:	4b06      	ldr	r3, [pc, #24]	; (83e94 <_sbrk+0x28>)
   83e7a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   83e7c:	181a      	adds	r2, r3, r0
   83e7e:	4907      	ldr	r1, [pc, #28]	; (83e9c <_sbrk+0x30>)
   83e80:	4291      	cmp	r1, r2
   83e82:	db04      	blt.n	83e8e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   83e84:	4610      	mov	r0, r2
   83e86:	4a03      	ldr	r2, [pc, #12]	; (83e94 <_sbrk+0x28>)
   83e88:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   83e8a:	4618      	mov	r0, r3
   83e8c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   83e8e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   83e92:	4770      	bx	lr
   83e94:	200744c0 	.word	0x200744c0
   83e98:	20078900 	.word	0x20078900
   83e9c:	20087ffc 	.word	0x20087ffc

00083ea0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   83ea0:	f04f 30ff 	mov.w	r0, #4294967295
   83ea4:	4770      	bx	lr
   83ea6:	bf00      	nop

00083ea8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   83ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   83eac:	604b      	str	r3, [r1, #4]

	return 0;
}
   83eae:	2000      	movs	r0, #0
   83eb0:	4770      	bx	lr
   83eb2:	bf00      	nop

00083eb4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   83eb4:	2001      	movs	r0, #1
   83eb6:	4770      	bx	lr

00083eb8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   83eb8:	2000      	movs	r0, #0
   83eba:	4770      	bx	lr

00083ebc <vBasicWEBServer>:
 */
#include "http_server.h"	

portTASK_FUNCTION( vBasicWEBServer, pvParameters );
portTASK_FUNCTION( vBasicWEBServer, pvParameters )
{
   83ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   83ebe:	b083      	sub	sp, #12
struct netconn *pxHTTPListener, *pxNewConnection;

	/* Create a new tcp connection handle */
	pxHTTPListener = netconn_new( NETCONN_TCP );
   83ec0:	2010      	movs	r0, #16
   83ec2:	2100      	movs	r1, #0
   83ec4:	460a      	mov	r2, r1
   83ec6:	4b1b      	ldr	r3, [pc, #108]	; (83f34 <vBasicWEBServer+0x78>)
   83ec8:	4798      	blx	r3
   83eca:	4604      	mov	r4, r0
	volatile err_t err;
	netconn_bind(pxHTTPListener, NULL, 80);
   83ecc:	2100      	movs	r1, #0
   83ece:	2250      	movs	r2, #80	; 0x50
   83ed0:	4b19      	ldr	r3, [pc, #100]	; (83f38 <vBasicWEBServer+0x7c>)
   83ed2:	4798      	blx	r3
	netconn_listen( pxHTTPListener );
   83ed4:	4620      	mov	r0, r4
   83ed6:	21ff      	movs	r1, #255	; 0xff
   83ed8:	4b18      	ldr	r3, [pc, #96]	; (83f3c <vBasicWEBServer+0x80>)
   83eda:	4798      	blx	r3
	if(server_start()) {
   83edc:	4b18      	ldr	r3, [pc, #96]	; (83f40 <vBasicWEBServer+0x84>)
   83ede:	4798      	blx	r3
   83ee0:	b918      	cbnz	r0, 83eea <vBasicWEBServer+0x2e>
	{
#if ( (LWIP_VERSION) == ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)) )
		/* Wait for a first connection. */
		pxNewConnection = netconn_accept(pxHTTPListener);
#else
        while(netconn_accept(pxHTTPListener, &pxNewConnection) != ERR_OK)
   83ee2:	4e18      	ldr	r6, [pc, #96]	; (83f44 <vBasicWEBServer+0x88>)
        {
            vTaskDelay( 500 );
		}
#endif
		vParTestSetLED(webCONN_LED, pdTRUE);
   83ee4:	4d18      	ldr	r5, [pc, #96]	; (83f48 <vBasicWEBServer+0x8c>)

		if(pxNewConnection != NULL)
		{
		
			//prvweb_ParseHTMLRequest(pxNewConnection);
			handle_request(pxNewConnection);
   83ee6:	4f19      	ldr	r7, [pc, #100]	; (83f4c <vBasicWEBServer+0x90>)
   83ee8:	e004      	b.n	83ef4 <vBasicWEBServer+0x38>
   83eea:	e7fe      	b.n	83eea <vBasicWEBServer+0x2e>
		/* Wait for a first connection. */
		pxNewConnection = netconn_accept(pxHTTPListener);
#else
        while(netconn_accept(pxHTTPListener, &pxNewConnection) != ERR_OK)
        {
            vTaskDelay( 500 );
   83eec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   83ef0:	4b17      	ldr	r3, [pc, #92]	; (83f50 <vBasicWEBServer+0x94>)
   83ef2:	4798      	blx	r3
	{
#if ( (LWIP_VERSION) == ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)) )
		/* Wait for a first connection. */
		pxNewConnection = netconn_accept(pxHTTPListener);
#else
        while(netconn_accept(pxHTTPListener, &pxNewConnection) != ERR_OK)
   83ef4:	4620      	mov	r0, r4
   83ef6:	a901      	add	r1, sp, #4
   83ef8:	47b0      	blx	r6
   83efa:	2800      	cmp	r0, #0
   83efc:	d1f6      	bne.n	83eec <vBasicWEBServer+0x30>
        {
            vTaskDelay( 500 );
		}
#endif
		vParTestSetLED(webCONN_LED, pdTRUE);
   83efe:	202d      	movs	r0, #45	; 0x2d
   83f00:	2101      	movs	r1, #1
   83f02:	47a8      	blx	r5

		if(pxNewConnection != NULL)
   83f04:	9801      	ldr	r0, [sp, #4]
   83f06:	b180      	cbz	r0, 83f2a <vBasicWEBServer+0x6e>
		{
		
			//prvweb_ParseHTMLRequest(pxNewConnection);
			handle_request(pxNewConnection);
   83f08:	47b8      	blx	r7
			
			err = netconn_close( pxNewConnection );
   83f0a:	9801      	ldr	r0, [sp, #4]
   83f0c:	4b11      	ldr	r3, [pc, #68]	; (83f54 <vBasicWEBServer+0x98>)
   83f0e:	4798      	blx	r3
   83f10:	f88d 0003 	strb.w	r0, [sp, #3]
			if(err) {
   83f14:	f89d 3003 	ldrb.w	r3, [sp, #3]
					
			}
			err = netconn_delete( pxNewConnection );
   83f18:	9801      	ldr	r0, [sp, #4]
   83f1a:	4b0f      	ldr	r3, [pc, #60]	; (83f58 <vBasicWEBServer+0x9c>)
   83f1c:	4798      	blx	r3
   83f1e:	f88d 0003 	strb.w	r0, [sp, #3]
			if(err) {
   83f22:	f89d 3003 	ldrb.w	r3, [sp, #3]
				
			}
			pxNewConnection = NULL;
   83f26:	2300      	movs	r3, #0
   83f28:	9301      	str	r3, [sp, #4]
		}/* end if new connection */

		vParTestSetLED(webCONN_LED, pdFALSE);
   83f2a:	202d      	movs	r0, #45	; 0x2d
   83f2c:	2100      	movs	r1, #0
   83f2e:	47a8      	blx	r5

	} /* end infinite loop */
   83f30:	e7e0      	b.n	83ef4 <vBasicWEBServer+0x38>
   83f32:	bf00      	nop
   83f34:	000853c5 	.word	0x000853c5
   83f38:	00085485 	.word	0x00085485
   83f3c:	000854cd 	.word	0x000854cd
   83f40:	000811cd 	.word	0x000811cd
   83f44:	00085511 	.word	0x00085511
   83f48:	0008438d 	.word	0x0008438d
   83f4c:	000811d9 	.word	0x000811d9
   83f50:	00084fbd 	.word	0x00084fbd
   83f54:	00085689 	.word	0x00085689
   83f58:	00085459 	.word	0x00085459

00083f5c <task_led>:
/**
 * \brief This task, when activated, send every ten seconds on debug UART the
 *whole report of free heap and total tasks status
 */
static void task_led(void *pvParameters)
{
   83f5c:	b508      	push	{r3, lr}
	for (;;) {
		LED_Toggle(LED0);
   83f5e:	260c      	movs	r6, #12
   83f60:	4d03      	ldr	r5, [pc, #12]	; (83f70 <task_led+0x14>)
		vTaskDelay(1000);
   83f62:	4c04      	ldr	r4, [pc, #16]	; (83f74 <task_led+0x18>)
 *whole report of free heap and total tasks status
 */
static void task_led(void *pvParameters)
{
	for (;;) {
		LED_Toggle(LED0);
   83f64:	4630      	mov	r0, r6
   83f66:	47a8      	blx	r5
		vTaskDelay(1000);
   83f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   83f6c:	47a0      	blx	r4
   83f6e:	e7f9      	b.n	83f64 <task_led+0x8>
   83f70:	0008385d 	.word	0x0008385d
   83f74:	00084fbd 	.word	0x00084fbd

00083f78 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   83f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   83f7a:	b083      	sub	sp, #12
   83f7c:	4604      	mov	r4, r0
   83f7e:	460d      	mov	r5, r1
	uint32_t val = 0;
   83f80:	2300      	movs	r3, #0
   83f82:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   83f84:	4b1f      	ldr	r3, [pc, #124]	; (84004 <usart_serial_getchar+0x8c>)
   83f86:	4298      	cmp	r0, r3
   83f88:	d107      	bne.n	83f9a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   83f8a:	461f      	mov	r7, r3
   83f8c:	4e1e      	ldr	r6, [pc, #120]	; (84008 <usart_serial_getchar+0x90>)
   83f8e:	4638      	mov	r0, r7
   83f90:	4629      	mov	r1, r5
   83f92:	47b0      	blx	r6
   83f94:	2800      	cmp	r0, #0
   83f96:	d1fa      	bne.n	83f8e <usart_serial_getchar+0x16>
   83f98:	e019      	b.n	83fce <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83f9a:	4b1c      	ldr	r3, [pc, #112]	; (8400c <usart_serial_getchar+0x94>)
   83f9c:	4298      	cmp	r0, r3
   83f9e:	d109      	bne.n	83fb4 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   83fa0:	461f      	mov	r7, r3
   83fa2:	4e1b      	ldr	r6, [pc, #108]	; (84010 <usart_serial_getchar+0x98>)
   83fa4:	4638      	mov	r0, r7
   83fa6:	a901      	add	r1, sp, #4
   83fa8:	47b0      	blx	r6
   83faa:	2800      	cmp	r0, #0
   83fac:	d1fa      	bne.n	83fa4 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   83fae:	9b01      	ldr	r3, [sp, #4]
   83fb0:	702b      	strb	r3, [r5, #0]
   83fb2:	e019      	b.n	83fe8 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83fb4:	4b17      	ldr	r3, [pc, #92]	; (84014 <usart_serial_getchar+0x9c>)
   83fb6:	4298      	cmp	r0, r3
   83fb8:	d109      	bne.n	83fce <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   83fba:	461e      	mov	r6, r3
   83fbc:	4c14      	ldr	r4, [pc, #80]	; (84010 <usart_serial_getchar+0x98>)
   83fbe:	4630      	mov	r0, r6
   83fc0:	a901      	add	r1, sp, #4
   83fc2:	47a0      	blx	r4
   83fc4:	2800      	cmp	r0, #0
   83fc6:	d1fa      	bne.n	83fbe <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   83fc8:	9b01      	ldr	r3, [sp, #4]
   83fca:	702b      	strb	r3, [r5, #0]
   83fcc:	e018      	b.n	84000 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   83fce:	4b12      	ldr	r3, [pc, #72]	; (84018 <usart_serial_getchar+0xa0>)
   83fd0:	429c      	cmp	r4, r3
   83fd2:	d109      	bne.n	83fe8 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   83fd4:	461e      	mov	r6, r3
   83fd6:	4c0e      	ldr	r4, [pc, #56]	; (84010 <usart_serial_getchar+0x98>)
   83fd8:	4630      	mov	r0, r6
   83fda:	a901      	add	r1, sp, #4
   83fdc:	47a0      	blx	r4
   83fde:	2800      	cmp	r0, #0
   83fe0:	d1fa      	bne.n	83fd8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   83fe2:	9b01      	ldr	r3, [sp, #4]
   83fe4:	702b      	strb	r3, [r5, #0]
   83fe6:	e00b      	b.n	84000 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83fe8:	4b0c      	ldr	r3, [pc, #48]	; (8401c <usart_serial_getchar+0xa4>)
   83fea:	429c      	cmp	r4, r3
   83fec:	d108      	bne.n	84000 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   83fee:	461e      	mov	r6, r3
   83ff0:	4c07      	ldr	r4, [pc, #28]	; (84010 <usart_serial_getchar+0x98>)
   83ff2:	4630      	mov	r0, r6
   83ff4:	a901      	add	r1, sp, #4
   83ff6:	47a0      	blx	r4
   83ff8:	2800      	cmp	r0, #0
   83ffa:	d1fa      	bne.n	83ff2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   83ffc:	9b01      	ldr	r3, [sp, #4]
   83ffe:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   84000:	b003      	add	sp, #12
   84002:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84004:	400e0800 	.word	0x400e0800
   84008:	00083bd1 	.word	0x00083bd1
   8400c:	40098000 	.word	0x40098000
   84010:	00083bfd 	.word	0x00083bfd
   84014:	4009c000 	.word	0x4009c000
   84018:	400a0000 	.word	0x400a0000
   8401c:	400a4000 	.word	0x400a4000

00084020 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   84020:	b570      	push	{r4, r5, r6, lr}
   84022:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   84024:	4b21      	ldr	r3, [pc, #132]	; (840ac <usart_serial_putchar+0x8c>)
   84026:	4298      	cmp	r0, r3
   84028:	d107      	bne.n	8403a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8402a:	461e      	mov	r6, r3
   8402c:	4d20      	ldr	r5, [pc, #128]	; (840b0 <usart_serial_putchar+0x90>)
   8402e:	4630      	mov	r0, r6
   84030:	4621      	mov	r1, r4
   84032:	47a8      	blx	r5
   84034:	2800      	cmp	r0, #0
   84036:	d1fa      	bne.n	8402e <usart_serial_putchar+0xe>
   84038:	e02b      	b.n	84092 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8403a:	4b1e      	ldr	r3, [pc, #120]	; (840b4 <usart_serial_putchar+0x94>)
   8403c:	4298      	cmp	r0, r3
   8403e:	d107      	bne.n	84050 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   84040:	461e      	mov	r6, r3
   84042:	4d1d      	ldr	r5, [pc, #116]	; (840b8 <usart_serial_putchar+0x98>)
   84044:	4630      	mov	r0, r6
   84046:	4621      	mov	r1, r4
   84048:	47a8      	blx	r5
   8404a:	2800      	cmp	r0, #0
   8404c:	d1fa      	bne.n	84044 <usart_serial_putchar+0x24>
   8404e:	e022      	b.n	84096 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   84050:	4b1a      	ldr	r3, [pc, #104]	; (840bc <usart_serial_putchar+0x9c>)
   84052:	4298      	cmp	r0, r3
   84054:	d107      	bne.n	84066 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   84056:	461e      	mov	r6, r3
   84058:	4d17      	ldr	r5, [pc, #92]	; (840b8 <usart_serial_putchar+0x98>)
   8405a:	4630      	mov	r0, r6
   8405c:	4621      	mov	r1, r4
   8405e:	47a8      	blx	r5
   84060:	2800      	cmp	r0, #0
   84062:	d1fa      	bne.n	8405a <usart_serial_putchar+0x3a>
   84064:	e019      	b.n	8409a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   84066:	4b16      	ldr	r3, [pc, #88]	; (840c0 <usart_serial_putchar+0xa0>)
   84068:	4298      	cmp	r0, r3
   8406a:	d107      	bne.n	8407c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   8406c:	461e      	mov	r6, r3
   8406e:	4d12      	ldr	r5, [pc, #72]	; (840b8 <usart_serial_putchar+0x98>)
   84070:	4630      	mov	r0, r6
   84072:	4621      	mov	r1, r4
   84074:	47a8      	blx	r5
   84076:	2800      	cmp	r0, #0
   84078:	d1fa      	bne.n	84070 <usart_serial_putchar+0x50>
   8407a:	e010      	b.n	8409e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8407c:	4b11      	ldr	r3, [pc, #68]	; (840c4 <usart_serial_putchar+0xa4>)
   8407e:	4298      	cmp	r0, r3
   84080:	d10f      	bne.n	840a2 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   84082:	461e      	mov	r6, r3
   84084:	4d0c      	ldr	r5, [pc, #48]	; (840b8 <usart_serial_putchar+0x98>)
   84086:	4630      	mov	r0, r6
   84088:	4621      	mov	r1, r4
   8408a:	47a8      	blx	r5
   8408c:	2800      	cmp	r0, #0
   8408e:	d1fa      	bne.n	84086 <usart_serial_putchar+0x66>
   84090:	e009      	b.n	840a6 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   84092:	2001      	movs	r0, #1
   84094:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   84096:	2001      	movs	r0, #1
   84098:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8409a:	2001      	movs	r0, #1
   8409c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8409e:	2001      	movs	r0, #1
   840a0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   840a2:	2000      	movs	r0, #0
   840a4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   840a6:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   840a8:	bd70      	pop	{r4, r5, r6, pc}
   840aa:	bf00      	nop
   840ac:	400e0800 	.word	0x400e0800
   840b0:	00083bbd 	.word	0x00083bbd
   840b4:	40098000 	.word	0x40098000
   840b8:	00083be5 	.word	0x00083be5
   840bc:	4009c000 	.word	0x4009c000
   840c0:	400a0000 	.word	0x400a0000
   840c4:	400a4000 	.word	0x400a4000

000840c8 <SysTick_Handler>:

/**
 * \brief Handler for Sytem Tick interrupt.
 */
void SysTick_Handler(void)
{
   840c8:	b508      	push	{r3, lr}
	xPortSysTickHandler();
   840ca:	4b01      	ldr	r3, [pc, #4]	; (840d0 <SysTick_Handler+0x8>)
   840cc:	4798      	blx	r3
   840ce:	bd08      	pop	{r3, pc}
   840d0:	0008459d 	.word	0x0008459d

000840d4 <main>:
 *  \brief getting-started Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   840d4:	b570      	push	{r4, r5, r6, lr}
   840d6:	b088      	sub	sp, #32
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   840d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   840dc:	4b35      	ldr	r3, [pc, #212]	; (841b4 <main+0xe0>)
   840de:	605a      	str	r2, [r3, #4]

	/* Initilize the SAM system */
	sysclk_init();
   840e0:	4b35      	ldr	r3, [pc, #212]	; (841b8 <main+0xe4>)
   840e2:	4798      	blx	r3
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   840e4:	4c35      	ldr	r4, [pc, #212]	; (841bc <main+0xe8>)
   840e6:	f44f 7340 	mov.w	r3, #768	; 0x300
   840ea:	6623      	str	r3, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   840ec:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   840ee:	6263      	str	r3, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   840f0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   840f4:	6f22      	ldr	r2, [r4, #112]	; 0x70
   840f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   840fa:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   840fc:	6063      	str	r3, [r4, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   840fe:	2008      	movs	r0, #8
   84100:	4e2f      	ldr	r6, [pc, #188]	; (841c0 <main+0xec>)
   84102:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   84104:	4d2f      	ldr	r5, [pc, #188]	; (841c4 <main+0xf0>)
   84106:	4b30      	ldr	r3, [pc, #192]	; (841c8 <main+0xf4>)
   84108:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8410a:	4a30      	ldr	r2, [pc, #192]	; (841cc <main+0xf8>)
   8410c:	4b30      	ldr	r3, [pc, #192]	; (841d0 <main+0xfc>)
   8410e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   84110:	4a30      	ldr	r2, [pc, #192]	; (841d4 <main+0x100>)
   84112:	4b31      	ldr	r3, [pc, #196]	; (841d8 <main+0x104>)
   84114:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   84116:	4b31      	ldr	r3, [pc, #196]	; (841dc <main+0x108>)
   84118:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   8411a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8411e:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   84120:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84124:	9307      	str	r3, [sp, #28]
   84126:	2008      	movs	r0, #8
   84128:	47b0      	blx	r6
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8412a:	4628      	mov	r0, r5
   8412c:	a905      	add	r1, sp, #20
   8412e:	4b2c      	ldr	r3, [pc, #176]	; (841e0 <main+0x10c>)
   84130:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   84132:	4e2c      	ldr	r6, [pc, #176]	; (841e4 <main+0x110>)
   84134:	6833      	ldr	r3, [r6, #0]
   84136:	6898      	ldr	r0, [r3, #8]
   84138:	2100      	movs	r1, #0
   8413a:	4d2b      	ldr	r5, [pc, #172]	; (841e8 <main+0x114>)
   8413c:	47a8      	blx	r5
	setbuf(stdin, NULL);
   8413e:	6833      	ldr	r3, [r6, #0]
   84140:	6858      	ldr	r0, [r3, #4]
   84142:	2100      	movs	r1, #0
   84144:	47a8      	blx	r5
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);

	/* Specify that stdout should not be buffered. */
#if defined(__GNUC__)
	setbuf(stdout, NULL);
   84146:	6833      	ldr	r3, [r6, #0]
   84148:	6898      	ldr	r0, [r3, #8]
   8414a:	2100      	movs	r1, #0
   8414c:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8414e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84152:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   84154:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   84158:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8415a:	4b24      	ldr	r3, [pc, #144]	; (841ec <main+0x118>)
   8415c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   84160:	6119      	str	r1, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   84162:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   84166:	6319      	str	r1, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   84168:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8416a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8416e:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(LED1_GPIO, LED1_INACTIVE_LEVEL);
	ioport_set_pin_dir(LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LED2_GPIO, LED2_INACTIVE_LEVEL);

	/* Output demo infomation. */
	printf("-- FreeRTOS with lwIP Example --\n\r");
   84170:	481f      	ldr	r0, [pc, #124]	; (841f0 <main+0x11c>)
   84172:	4c20      	ldr	r4, [pc, #128]	; (841f4 <main+0x120>)
   84174:	47a0      	blx	r4
	printf("-- %s\n\r", BOARD_NAME);
   84176:	4820      	ldr	r0, [pc, #128]	; (841f8 <main+0x124>)
   84178:	4920      	ldr	r1, [pc, #128]	; (841fc <main+0x128>)
   8417a:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
   8417c:	4820      	ldr	r0, [pc, #128]	; (84200 <main+0x12c>)
   8417e:	4921      	ldr	r1, [pc, #132]	; (84204 <main+0x130>)
   84180:	4a21      	ldr	r2, [pc, #132]	; (84208 <main+0x134>)
   84182:	47a0      	blx	r4

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
   84184:	2300      	movs	r3, #0
   84186:	9300      	str	r3, [sp, #0]
   84188:	9301      	str	r3, [sp, #4]
   8418a:	9302      	str	r3, [sp, #8]
   8418c:	9303      	str	r3, [sp, #12]
   8418e:	481f      	ldr	r0, [pc, #124]	; (8420c <main+0x138>)
   84190:	491f      	ldr	r1, [pc, #124]	; (84210 <main+0x13c>)
   84192:	2220      	movs	r2, #32
   84194:	4c1f      	ldr	r4, [pc, #124]	; (84214 <main+0x140>)
   84196:	47a0      	blx	r4
   84198:	2801      	cmp	r0, #1
   8419a:	d002      	beq.n	841a2 <main+0xce>
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
   8419c:	481e      	ldr	r0, [pc, #120]	; (84218 <main+0x144>)
   8419e:	4b15      	ldr	r3, [pc, #84]	; (841f4 <main+0x120>)
   841a0:	4798      	blx	r3
	}

	/* Start the ethernet tasks */
	vStartEthernetTaskLauncher( configMAX_PRIORITIES );
   841a2:	2008      	movs	r0, #8
   841a4:	4b1d      	ldr	r3, [pc, #116]	; (8421c <main+0x148>)
   841a6:	4798      	blx	r3

	/* Start FreeRTOS */
	vTaskStartScheduler();
   841a8:	4b1d      	ldr	r3, [pc, #116]	; (84220 <main+0x14c>)
   841aa:	4798      	blx	r3

	/* Will only reach here if there was insufficient memory to create the idle task */

	return 0;
}
   841ac:	2000      	movs	r0, #0
   841ae:	b008      	add	sp, #32
   841b0:	bd70      	pop	{r4, r5, r6, pc}
   841b2:	bf00      	nop
   841b4:	400e1a50 	.word	0x400e1a50
   841b8:	00082cbd 	.word	0x00082cbd
   841bc:	400e0e00 	.word	0x400e0e00
   841c0:	00083b01 	.word	0x00083b01
   841c4:	400e0800 	.word	0x400e0800
   841c8:	20075b24 	.word	0x20075b24
   841cc:	00084021 	.word	0x00084021
   841d0:	20075b20 	.word	0x20075b20
   841d4:	00083f79 	.word	0x00083f79
   841d8:	20075b1c 	.word	0x20075b1c
   841dc:	0501bd00 	.word	0x0501bd00
   841e0:	00083b85 	.word	0x00083b85
   841e4:	200702c8 	.word	0x200702c8
   841e8:	0008ccf1 	.word	0x0008ccf1
   841ec:	400e1000 	.word	0x400e1000
   841f0:	000b0f10 	.word	0x000b0f10
   841f4:	0008c839 	.word	0x0008c839
   841f8:	000b0f34 	.word	0x000b0f34
   841fc:	000b0f3c 	.word	0x000b0f3c
   84200:	000b0f48 	.word	0x000b0f48
   84204:	000b0f60 	.word	0x000b0f60
   84208:	000b0f6c 	.word	0x000b0f6c
   8420c:	00083f5d 	.word	0x00083f5d
   84210:	000b0f78 	.word	0x000b0f78
   84214:	00084a05 	.word	0x00084a05
   84218:	000b0f7c 	.word	0x000b0f7c
   8421c:	00084361 	.word	0x00084361
   84220:	00084d39 	.word	0x00084d39

00084224 <vStartEthernetTask>:
 *
 *  \param uxPriority   Input. priority for the task, it should be low
 *
 */
portTASK_FUNCTION(vStartEthernetTask, pvParameters)
{
   84224:	b510      	push	{r4, lr}
   84226:	b084      	sub	sp, #16
	tcpip_init(tcpip_init_done, &sem);
	sys_sem_wait(sem);      /* Block until the lwIP stack is initialized. */
	sys_sem_free(sem);      /* Free the semaphore. */
#else
	err_t err_sem;
	err_sem = sys_sem_new(&sem, 0); /* Create a new semaphore. */
   84228:	a803      	add	r0, sp, #12
   8422a:	2100      	movs	r1, #0
   8422c:	4b0d      	ldr	r3, [pc, #52]	; (84264 <vStartEthernetTask+0x40>)
   8422e:	4798      	blx	r3
	tcpip_init(tcpip_init_done, &sem);
   84230:	480d      	ldr	r0, [pc, #52]	; (84268 <vStartEthernetTask+0x44>)
   84232:	a903      	add	r1, sp, #12
   84234:	4b0d      	ldr	r3, [pc, #52]	; (8426c <vStartEthernetTask+0x48>)
   84236:	4798      	blx	r3
	sys_sem_wait(&sem);     /* Block until the lwIP stack is initialized. */
   84238:	a803      	add	r0, sp, #12
   8423a:	2100      	movs	r1, #0
   8423c:	4b0c      	ldr	r3, [pc, #48]	; (84270 <vStartEthernetTask+0x4c>)
   8423e:	4798      	blx	r3
	sys_sem_free(&sem);     /* Free the semaphore. */
   84240:	a803      	add	r0, sp, #12
   84242:	4b0c      	ldr	r3, [pc, #48]	; (84274 <vStartEthernetTask+0x50>)
   84244:	4798      	blx	r3
	/* Setup lwIP. */
	prvlwIPInit();

#if (HTTP_USED == 1)
	/* Create the WEB server task.  This uses the lwIP RTOS abstraction layer. */
	sys_thread_new("WEB", vBasicWEBServer, (void *)NULL,
   84246:	2302      	movs	r3, #2
   84248:	9300      	str	r3, [sp, #0]
   8424a:	480b      	ldr	r0, [pc, #44]	; (84278 <vStartEthernetTask+0x54>)
   8424c:	490b      	ldr	r1, [pc, #44]	; (8427c <vStartEthernetTask+0x58>)
   8424e:	2200      	movs	r2, #0
   84250:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   84254:	4c0a      	ldr	r4, [pc, #40]	; (84280 <vStartEthernetTask+0x5c>)
   84256:	47a0      	blx	r4
	sys_thread_new("SMTP", vBasicSMTPClient, (void *)NULL,
			lwipBASIC_SMTP_CLIENT_STACK_SIZE,
			lwipBASIC_SMTP_CLIENT_PRIORITY);
#endif
	/* Kill this task. */
	vTaskDelete(NULL);
   84258:	2000      	movs	r0, #0
   8425a:	4b0a      	ldr	r3, [pc, #40]	; (84284 <vStartEthernetTask+0x60>)
   8425c:	4798      	blx	r3
}
   8425e:	b004      	add	sp, #16
   84260:	bd10      	pop	{r4, pc}
   84262:	bf00      	nop
   84264:	0008c441 	.word	0x0008c441
   84268:	00084289 	.word	0x00084289
   8426c:	00086479 	.word	0x00086479
   84270:	0008c501 	.word	0x0008c501
   84274:	0008c4c5 	.word	0x0008c4c5
   84278:	000b0fa0 	.word	0x000b0fa0
   8427c:	00083ebd 	.word	0x00083ebd
   84280:	0008c6ed 	.word	0x0008c6ed
   84284:	00084be1 	.word	0x00084be1

00084288 <tcpip_init_done>:

/**
 *  \brief Callback executed when the TCP/IP init is done.
 */
static void tcpip_init_done(void *arg)
{
   84288:	b570      	push	{r4, r5, r6, lr}
   8428a:	b088      	sub	sp, #32
   8428c:	4605      	mov	r5, r0
#if defined(DHCP_USED)
	x_ip_addr.addr = 0;
	x_net_mask.addr = 0;
#else
	/* Default ip addr */
	IP4_ADDR(&x_ip_addr, ETHERNET_CONF_IPADDR0, ETHERNET_CONF_IPADDR1,
   8428e:	4b13      	ldr	r3, [pc, #76]	; (842dc <tcpip_init_done+0x54>)
   84290:	9305      	str	r3, [sp, #20]
			ETHERNET_CONF_IPADDR2, ETHERNET_CONF_IPADDR3);

	/* Default subnet mask */
	IP4_ADDR(&x_net_mask, ETHERNET_CONF_NET_MASK0, ETHERNET_CONF_NET_MASK1,
   84292:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   84296:	9306      	str	r3, [sp, #24]
			ETHERNET_CONF_NET_MASK2, ETHERNET_CONF_NET_MASK3);

	/* Default gateway addr */
	IP4_ADDR(&x_gateway, ETHERNET_CONF_GATEWAY_ADDR0,
   84298:	4b11      	ldr	r3, [pc, #68]	; (842e0 <tcpip_init_done+0x58>)
   8429a:	9307      	str	r3, [sp, #28]
			ETHERNET_CONF_GATEWAY_ADDR2,
			ETHERNET_CONF_GATEWAY_ADDR3);
#endif

	/* Add data to netif */
	netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
   8429c:	4c11      	ldr	r4, [pc, #68]	; (842e4 <tcpip_init_done+0x5c>)
   8429e:	2300      	movs	r3, #0
   842a0:	9300      	str	r3, [sp, #0]
   842a2:	4b11      	ldr	r3, [pc, #68]	; (842e8 <tcpip_init_done+0x60>)
   842a4:	9301      	str	r3, [sp, #4]
   842a6:	4b11      	ldr	r3, [pc, #68]	; (842ec <tcpip_init_done+0x64>)
   842a8:	9302      	str	r3, [sp, #8]
   842aa:	4620      	mov	r0, r4
   842ac:	a905      	add	r1, sp, #20
   842ae:	aa06      	add	r2, sp, #24
   842b0:	ab07      	add	r3, sp, #28
   842b2:	4e0f      	ldr	r6, [pc, #60]	; (842f0 <tcpip_init_done+0x68>)
   842b4:	47b0      	blx	r6
			ethernetif_init, ethernet_input);

	/* Make it the default interface */
	netif_set_default(&gs_net_if);
   842b6:	4620      	mov	r0, r4
   842b8:	4b0e      	ldr	r3, [pc, #56]	; (842f4 <tcpip_init_done+0x6c>)
   842ba:	4798      	blx	r3

	/* Setup callback function for netif status change */
	netif_set_status_callback(&gs_net_if, status_callback);
   842bc:	4620      	mov	r0, r4
   842be:	490e      	ldr	r1, [pc, #56]	; (842f8 <tcpip_init_done+0x70>)
   842c0:	4b0e      	ldr	r3, [pc, #56]	; (842fc <tcpip_init_done+0x74>)
   842c2:	4798      	blx	r3
	/* Bring it up */
#if defined(DHCP_USED)
	printf("LwIP: DHCP Started");
	dhcp_start(&gs_net_if);
#else
	printf("LwIP: Static IP Address Assigned");
   842c4:	480e      	ldr	r0, [pc, #56]	; (84300 <tcpip_init_done+0x78>)
   842c6:	4b0f      	ldr	r3, [pc, #60]	; (84304 <tcpip_init_done+0x7c>)
   842c8:	4798      	blx	r3
	netif_set_up(&gs_net_if);
   842ca:	4620      	mov	r0, r4
   842cc:	4b0e      	ldr	r3, [pc, #56]	; (84308 <tcpip_init_done+0x80>)
   842ce:	4798      	blx	r3
	/* Set hw and IP parameters, initialize MAC too */
	ethernet_configure_interface();
#if ( (LWIP_VERSION) == ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)) )
  sys_sem_signal (*sem);    /* Signal the waiting thread that the TCP/IP init is done. */
#else
  sys_sem_signal (sem);    /* Signal the waiting thread that the TCP/IP init is done. */
   842d0:	4628      	mov	r0, r5
   842d2:	4b0e      	ldr	r3, [pc, #56]	; (8430c <tcpip_init_done+0x84>)
   842d4:	4798      	blx	r3
#endif
}
   842d6:	b008      	add	sp, #32
   842d8:	bd70      	pop	{r4, r5, r6, pc}
   842da:	bf00      	nop
   842dc:	2424fea9 	.word	0x2424fea9
   842e0:	fa02d90a 	.word	0xfa02d90a
   842e4:	20075b28 	.word	0x20075b28
   842e8:	0008c25d 	.word	0x0008c25d
   842ec:	0008beed 	.word	0x0008beed
   842f0:	00087e41 	.word	0x00087e41
   842f4:	00087e95 	.word	0x00087e95
   842f8:	00084311 	.word	0x00084311
   842fc:	00087ed9 	.word	0x00087ed9
   84300:	000b0fa4 	.word	0x000b0fa4
   84304:	0008c839 	.word	0x0008c839
   84308:	00087ea1 	.word	0x00087ea1
   8430c:	0008c4e9 	.word	0x0008c4e9

00084310 <status_callback>:
 *  \brief Status callback used to print address given by DHCP.
 *
 * \param netif Instance to network interface.
 */
void status_callback(struct netif *netif)
{
   84310:	b530      	push	{r4, r5, lr}
   84312:	b089      	sub	sp, #36	; 0x24
   84314:	4604      	mov	r4, r0
	int8_t c_mess[25];
	if (netif_is_up(netif)) {
   84316:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   8431a:	f013 0f01 	tst.w	r3, #1
   8431e:	d00e      	beq.n	8433e <status_callback+0x2e>
		printf("Network up");
   84320:	4809      	ldr	r0, [pc, #36]	; (84348 <status_callback+0x38>)
   84322:	4d0a      	ldr	r5, [pc, #40]	; (8434c <status_callback+0x3c>)
   84324:	47a8      	blx	r5
		strcpy((char *)c_mess, "IP=");
   84326:	4b0a      	ldr	r3, [pc, #40]	; (84350 <status_callback+0x40>)
   84328:	9301      	str	r3, [sp, #4]
		strcat((char *)c_mess,
				inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
   8432a:	1d20      	adds	r0, r4, #4
   8432c:	4b09      	ldr	r3, [pc, #36]	; (84354 <status_callback+0x44>)
   8432e:	4798      	blx	r3
   84330:	4601      	mov	r1, r0
{
	int8_t c_mess[25];
	if (netif_is_up(netif)) {
		printf("Network up");
		strcpy((char *)c_mess, "IP=");
		strcat((char *)c_mess,
   84332:	a801      	add	r0, sp, #4
   84334:	4b08      	ldr	r3, [pc, #32]	; (84358 <status_callback+0x48>)
   84336:	4798      	blx	r3
				inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
		printf((char const *)c_mess);
   84338:	a801      	add	r0, sp, #4
   8433a:	47a8      	blx	r5
   8433c:	e002      	b.n	84344 <status_callback+0x34>
	} else {
		printf("Network down");
   8433e:	4807      	ldr	r0, [pc, #28]	; (8435c <status_callback+0x4c>)
   84340:	4b02      	ldr	r3, [pc, #8]	; (8434c <status_callback+0x3c>)
   84342:	4798      	blx	r3
	}
}
   84344:	b009      	add	sp, #36	; 0x24
   84346:	bd30      	pop	{r4, r5, pc}
   84348:	000b0fc8 	.word	0x000b0fc8
   8434c:	0008c839 	.word	0x0008c839
   84350:	003d5049 	.word	0x003d5049
   84354:	00086e95 	.word	0x00086e95
   84358:	0008cea9 	.word	0x0008cea9
   8435c:	000b0fd4 	.word	0x000b0fd4

00084360 <vStartEthernetTaskLauncher>:
	sys_sem_free(&sem);     /* Free the semaphore. */
#endif
}

void vStartEthernetTaskLauncher( unsigned portBASE_TYPE uxPriority )
{
   84360:	b510      	push	{r4, lr}
   84362:	b084      	sub	sp, #16
	/* Spawn the Sentinel task. */
	xTaskCreate( vStartEthernetTask, (const signed portCHAR *)"ETHLAUNCH",
   84364:	9000      	str	r0, [sp, #0]
   84366:	2300      	movs	r3, #0
   84368:	9301      	str	r3, [sp, #4]
   8436a:	9302      	str	r3, [sp, #8]
   8436c:	9303      	str	r3, [sp, #12]
   8436e:	4804      	ldr	r0, [pc, #16]	; (84380 <vStartEthernetTaskLauncher+0x20>)
   84370:	4904      	ldr	r1, [pc, #16]	; (84384 <vStartEthernetTaskLauncher+0x24>)
   84372:	f44f 7280 	mov.w	r2, #256	; 0x100
   84376:	4c04      	ldr	r4, [pc, #16]	; (84388 <vStartEthernetTaskLauncher+0x28>)
   84378:	47a0      	blx	r4
			configMINIMAL_STACK_SIZE, NULL, uxPriority,
			(xTaskHandle *)NULL );
}
   8437a:	b004      	add	sp, #16
   8437c:	bd10      	pop	{r4, pc}
   8437e:	bf00      	nop
   84380:	00084225 	.word	0x00084225
   84384:	000b0fe4 	.word	0x000b0fe4
   84388:	00084a05 	.word	0x00084a05

0008438c <vParTestSetLED>:
	LED_Off(LED1);
	LED_Off(LED2);
}

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   8438c:	b538      	push	{r3, r4, r5, lr}
   8438e:	4604      	mov	r4, r0
   84390:	460d      	mov	r5, r1
	vTaskSuspendAll();
   84392:	4b15      	ldr	r3, [pc, #84]	; (843e8 <vParTestSetLED+0x5c>)
   84394:	4798      	blx	r3

	if (xValue == pdTRUE) {
   84396:	2d01      	cmp	r5, #1
   84398:	d111      	bne.n	843be <vParTestSetLED+0x32>
	switch (uxLED) {
   8439a:	2c01      	cmp	r4, #1
   8439c:	d007      	beq.n	843ae <vParTestSetLED+0x22>
   8439e:	b114      	cbz	r4, 843a6 <vParTestSetLED+0x1a>
   843a0:	2c02      	cmp	r4, #2
   843a2:	d008      	beq.n	843b6 <vParTestSetLED+0x2a>
   843a4:	e01c      	b.n	843e0 <vParTestSetLED+0x54>
		case 0:
			LED_On(LED0);
   843a6:	200c      	movs	r0, #12
   843a8:	4b10      	ldr	r3, [pc, #64]	; (843ec <vParTestSetLED+0x60>)
   843aa:	4798      	blx	r3
		break;
   843ac:	e018      	b.n	843e0 <vParTestSetLED+0x54>

		case 1:
			LED_On(LED1);
   843ae:	202d      	movs	r0, #45	; 0x2d
   843b0:	4b0e      	ldr	r3, [pc, #56]	; (843ec <vParTestSetLED+0x60>)
   843b2:	4798      	blx	r3
		break;
   843b4:	e014      	b.n	843e0 <vParTestSetLED+0x54>

		case 2:
			LED_On(LED2);
   843b6:	202c      	movs	r0, #44	; 0x2c
   843b8:	4b0c      	ldr	r3, [pc, #48]	; (843ec <vParTestSetLED+0x60>)
   843ba:	4798      	blx	r3
		break;
   843bc:	e010      	b.n	843e0 <vParTestSetLED+0x54>

		default :
		break;
	}
	} else {
	switch (uxLED) {
   843be:	2c01      	cmp	r4, #1
   843c0:	d007      	beq.n	843d2 <vParTestSetLED+0x46>
   843c2:	b114      	cbz	r4, 843ca <vParTestSetLED+0x3e>
   843c4:	2c02      	cmp	r4, #2
   843c6:	d008      	beq.n	843da <vParTestSetLED+0x4e>
   843c8:	e00a      	b.n	843e0 <vParTestSetLED+0x54>
		case 0:
			LED_Off(LED0);
   843ca:	200c      	movs	r0, #12
   843cc:	4b08      	ldr	r3, [pc, #32]	; (843f0 <vParTestSetLED+0x64>)
   843ce:	4798      	blx	r3
		break;
   843d0:	e006      	b.n	843e0 <vParTestSetLED+0x54>

		case 1:
			LED_Off(LED1);
   843d2:	202d      	movs	r0, #45	; 0x2d
   843d4:	4b06      	ldr	r3, [pc, #24]	; (843f0 <vParTestSetLED+0x64>)
   843d6:	4798      	blx	r3
		break;
   843d8:	e002      	b.n	843e0 <vParTestSetLED+0x54>

		case 2:
			LED_Off(LED2);
   843da:	202c      	movs	r0, #44	; 0x2c
   843dc:	4b04      	ldr	r3, [pc, #16]	; (843f0 <vParTestSetLED+0x64>)
   843de:	4798      	blx	r3
		default :
		break;
	}
	}

	xTaskResumeAll();
   843e0:	4b04      	ldr	r3, [pc, #16]	; (843f4 <vParTestSetLED+0x68>)
   843e2:	4798      	blx	r3
   843e4:	bd38      	pop	{r3, r4, r5, pc}
   843e6:	bf00      	nop
   843e8:	00084d8d 	.word	0x00084d8d
   843ec:	00082df1 	.word	0x00082df1
   843f0:	00082db1 	.word	0x00082db1
   843f4:	00084ec9 	.word	0x00084ec9

000843f8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   843f8:	f100 0308 	add.w	r3, r0, #8
   843fc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   843fe:	f04f 32ff 	mov.w	r2, #4294967295
   84402:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   84404:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   84406:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   84408:	2300      	movs	r3, #0
   8440a:	6003      	str	r3, [r0, #0]
   8440c:	4770      	bx	lr
   8440e:	bf00      	nop

00084410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   84410:	2300      	movs	r3, #0
   84412:	6103      	str	r3, [r0, #16]
   84414:	4770      	bx	lr
   84416:	bf00      	nop

00084418 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   84418:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8441a:	685a      	ldr	r2, [r3, #4]
   8441c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8441e:	6842      	ldr	r2, [r0, #4]
   84420:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   84422:	685a      	ldr	r2, [r3, #4]
   84424:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   84426:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   84428:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8442a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8442c:	6803      	ldr	r3, [r0, #0]
   8442e:	3301      	adds	r3, #1
   84430:	6003      	str	r3, [r0, #0]
   84432:	4770      	bx	lr

00084434 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   84434:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   84436:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   84438:	f1b4 3fff 	cmp.w	r4, #4294967295
   8443c:	d101      	bne.n	84442 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   8443e:	6903      	ldr	r3, [r0, #16]
   84440:	e00a      	b.n	84458 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   84442:	f100 0308 	add.w	r3, r0, #8
   84446:	68c2      	ldr	r2, [r0, #12]
   84448:	6812      	ldr	r2, [r2, #0]
   8444a:	4294      	cmp	r4, r2
   8444c:	d304      	bcc.n	84458 <vListInsert+0x24>
   8444e:	685b      	ldr	r3, [r3, #4]
   84450:	685a      	ldr	r2, [r3, #4]
   84452:	6812      	ldr	r2, [r2, #0]
   84454:	4294      	cmp	r4, r2
   84456:	d2fa      	bcs.n	8444e <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   84458:	685a      	ldr	r2, [r3, #4]
   8445a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8445c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8445e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   84460:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   84462:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   84464:	6803      	ldr	r3, [r0, #0]
   84466:	3301      	adds	r3, #1
   84468:	6003      	str	r3, [r0, #0]
}
   8446a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8446e:	4770      	bx	lr

00084470 <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   84470:	6843      	ldr	r3, [r0, #4]
   84472:	6882      	ldr	r2, [r0, #8]
   84474:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   84476:	6883      	ldr	r3, [r0, #8]
   84478:	6842      	ldr	r2, [r0, #4]
   8447a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8447c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8447e:	685a      	ldr	r2, [r3, #4]
   84480:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   84482:	bf04      	itt	eq
   84484:	6882      	ldreq	r2, [r0, #8]
   84486:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   84488:	2200      	movs	r2, #0
   8448a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8448c:	681a      	ldr	r2, [r3, #0]
   8448e:	3a01      	subs	r2, #1
   84490:	601a      	str	r2, [r3, #0]
   84492:	4770      	bx	lr

00084494 <pxPortInitialiseStack>:
		pdTASK_CODE pxCode, void *pvParameters)
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--;  /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;  /* xPSR */
   84494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   84498:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = (portSTACK_TYPE) pxCode;  /* PC */
   8449c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;  /* LR */
   844a0:	2300      	movs	r3, #0
   844a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;  /* R12, R3, R2 and R1. */
	*pxTopOfStack = (portSTACK_TYPE) pvParameters;  /* R0 */
   844a6:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;  /* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   844aa:	3840      	subs	r0, #64	; 0x40
   844ac:	4770      	bx	lr
   844ae:	bf00      	nop

000844b0 <SVC_Handler>:
/**
 * \brief Handler for Sytem supervisor call.
 */
void vPortSVCHandler(void)
{
	__asm volatile (" ldr r3, pxCurrentTCBConst2  \n"  /* Restore the context. */
   844b0:	4b06      	ldr	r3, [pc, #24]	; (844cc <pxCurrentTCBConst2>)
   844b2:	6819      	ldr	r1, [r3, #0]
   844b4:	6808      	ldr	r0, [r1, #0]
   844b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   844ba:	f380 8809 	msr	PSP, r0
   844be:	f04f 0000 	mov.w	r0, #0
   844c2:	f380 8811 	msr	BASEPRI, r0
   844c6:	f04e 0e0d 	orr.w	lr, lr, #13
   844ca:	4770      	bx	lr

000844cc <pxCurrentTCBConst2>:
   844cc:	200745b8 	.word	0x200745b8

000844d0 <vPortStartFirstTask>:
/**
 * \brief Start schedule first task.
 */
void vPortStartFirstTask(void)
{
	__asm volatile (" ldr r0, =0xE000ED08   \n"  /* Use the NVIC offset register to locate the stack. */
   844d0:	4802      	ldr	r0, [pc, #8]	; (844dc <vPortStartFirstTask+0xc>)
   844d2:	6800      	ldr	r0, [r0, #0]
   844d4:	6800      	ldr	r0, [r0, #0]
   844d6:	f380 8808 	msr	MSP, r0
   844da:	df00      	svc	0
   844dc:	e000ed08 	.word	0xe000ed08

000844e0 <xPortStartScheduler>:

/**
 * \brief See header file for description.
 */
portBASE_TYPE xPortStartScheduler(void)
{
   844e0:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   844e2:	4b0b      	ldr	r3, [pc, #44]	; (84510 <xPortStartScheduler+0x30>)
   844e4:	681a      	ldr	r2, [r3, #0]
   844e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   844ea:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   844ec:	681a      	ldr	r2, [r3, #0]
   844ee:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   844f2:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) =
   844f4:	4a07      	ldr	r2, [pc, #28]	; (84514 <xPortStartScheduler+0x34>)
   844f6:	f6a3 530c 	subw	r3, r3, #3340	; 0xd0c
   844fa:	601a      	str	r2, [r3, #0]
			(configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
	*(portNVIC_SYSTICK_CTRL) =
   844fc:	2207      	movs	r2, #7
   844fe:	3b04      	subs	r3, #4
   84500:	601a      	str	r2, [r3, #0]
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   84502:	2400      	movs	r4, #0
   84504:	4b04      	ldr	r3, [pc, #16]	; (84518 <xPortStartScheduler+0x38>)
   84506:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   84508:	4b04      	ldr	r3, [pc, #16]	; (8451c <xPortStartScheduler+0x3c>)
   8450a:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   8450c:	4620      	mov	r0, r4
   8450e:	bd10      	pop	{r4, pc}
   84510:	e000ed20 	.word	0xe000ed20
   84514:	0001481f 	.word	0x0001481f
   84518:	200702ac 	.word	0x200702ac
   8451c:	000844d1 	.word	0x000844d1

00084520 <vPortYieldFromISR>:
 * \brief Yield PendSV to request a context switch.
 */
void vPortYieldFromISR(void)
{
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   84520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   84524:	4b01      	ldr	r3, [pc, #4]	; (8452c <vPortYieldFromISR+0xc>)
   84526:	601a      	str	r2, [r3, #0]
   84528:	4770      	bx	lr
   8452a:	bf00      	nop
   8452c:	e000ed04 	.word	0xe000ed04

00084530 <vPortEnterCritical>:
/**
 * \brief Enter Critical code.
 */
void vPortEnterCritical(void)
{
	portDISABLE_INTERRUPTS();
   84530:	f04f 0050 	mov.w	r0, #80	; 0x50
   84534:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
   84538:	4b02      	ldr	r3, [pc, #8]	; (84544 <vPortEnterCritical+0x14>)
   8453a:	681a      	ldr	r2, [r3, #0]
   8453c:	3201      	adds	r2, #1
   8453e:	601a      	str	r2, [r3, #0]
   84540:	4770      	bx	lr
   84542:	bf00      	nop
   84544:	200702ac 	.word	0x200702ac

00084548 <vPortExitCritical>:
/**
 * \brief Exit Critical code.
 */
void vPortExitCritical(void)
{
	uxCriticalNesting--;
   84548:	4a04      	ldr	r2, [pc, #16]	; (8455c <vPortExitCritical+0x14>)
   8454a:	6813      	ldr	r3, [r2, #0]
   8454c:	3b01      	subs	r3, #1
   8454e:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
   84550:	b91b      	cbnz	r3, 8455a <vPortExitCritical+0x12>
		portENABLE_INTERRUPTS();
   84552:	f04f 0000 	mov.w	r0, #0
   84556:	f380 8811 	msr	BASEPRI, r0
   8455a:	4770      	bx	lr
   8455c:	200702ac 	.word	0x200702ac

00084560 <PendSV_Handler>:
 * \brief Handler for Sytem interrupt-driven request.
 */
void xPortPendSVHandler(void)
{
	/* This is a naked function. */
	__asm volatile (" mrs r0, psp      \n"
   84560:	f3ef 8009 	mrs	r0, PSP
   84564:	4b0c      	ldr	r3, [pc, #48]	; (84598 <pxCurrentTCBConst>)
   84566:	681a      	ldr	r2, [r3, #0]
   84568:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8456c:	6010      	str	r0, [r2, #0]
   8456e:	e92d 4008 	stmdb	sp!, {r3, lr}
   84572:	f04f 0050 	mov.w	r0, #80	; 0x50
   84576:	f380 8811 	msr	BASEPRI, r0
   8457a:	f000 fd83 	bl	85084 <vTaskSwitchContext>
   8457e:	f04f 0000 	mov.w	r0, #0
   84582:	f380 8811 	msr	BASEPRI, r0
   84586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8458a:	6819      	ldr	r1, [r3, #0]
   8458c:	6808      	ldr	r0, [r1, #0]
   8458e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84592:	f380 8809 	msr	PSP, r0
   84596:	4770      	bx	lr

00084598 <pxCurrentTCBConst>:
   84598:	200745b8 	.word	0x200745b8

0008459c <xPortSysTickHandler>:

/**
 * \brief Handler for Sytem Tick interrupt.
 */
void xPortSysTickHandler(void)
{
   8459c:	b508      	push	{r3, lr}
	unsigned portLONG ulDummy;

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   8459e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   845a2:	4b06      	ldr	r3, [pc, #24]	; (845bc <xPortSysTickHandler+0x20>)
   845a4:	601a      	str	r2, [r3, #0]
#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
   845a6:	f04f 0050 	mov.w	r0, #80	; 0x50
   845aa:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
   845ae:	4b04      	ldr	r3, [pc, #16]	; (845c0 <xPortSysTickHandler+0x24>)
   845b0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulDummy);
   845b2:	f04f 0000 	mov.w	r0, #0
   845b6:	f380 8811 	msr	BASEPRI, r0
   845ba:	bd08      	pop	{r3, pc}
   845bc:	e000ed04 	.word	0xe000ed04
   845c0:	00084dbd 	.word	0x00084dbd

000845c4 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   845c4:	b510      	push	{r4, lr}
   845c6:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
   845c8:	4b04      	ldr	r3, [pc, #16]	; (845dc <pvPortMalloc+0x18>)
   845ca:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   845cc:	4620      	mov	r0, r4
   845ce:	4b04      	ldr	r3, [pc, #16]	; (845e0 <pvPortMalloc+0x1c>)
   845d0:	4798      	blx	r3
   845d2:	4604      	mov	r4, r0
	}
	xTaskResumeAll();
   845d4:	4b03      	ldr	r3, [pc, #12]	; (845e4 <pvPortMalloc+0x20>)
   845d6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   845d8:	4620      	mov	r0, r4
   845da:	bd10      	pop	{r4, pc}
   845dc:	00084d8d 	.word	0x00084d8d
   845e0:	0008c879 	.word	0x0008c879
   845e4:	00084ec9 	.word	0x00084ec9

000845e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   845e8:	b510      	push	{r4, lr}
	if( pv )
   845ea:	4604      	mov	r4, r0
   845ec:	b130      	cbz	r0, 845fc <vPortFree+0x14>
	{
		vTaskSuspendAll();
   845ee:	4b04      	ldr	r3, [pc, #16]	; (84600 <vPortFree+0x18>)
   845f0:	4798      	blx	r3
		{
			free( pv );
   845f2:	4620      	mov	r0, r4
   845f4:	4b03      	ldr	r3, [pc, #12]	; (84604 <vPortFree+0x1c>)
   845f6:	4798      	blx	r3
		}
		xTaskResumeAll();
   845f8:	4b03      	ldr	r3, [pc, #12]	; (84608 <vPortFree+0x20>)
   845fa:	4798      	blx	r3
   845fc:	bd10      	pop	{r4, pc}
   845fe:	bf00      	nop
   84600:	00084d8d 	.word	0x00084d8d
   84604:	0008c889 	.word	0x0008c889
   84608:	00084ec9 	.word	0x00084ec9

0008460c <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8460c:	b510      	push	{r4, lr}
   8460e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   84610:	6c03      	ldr	r3, [r0, #64]	; 0x40
   84612:	b1eb      	cbz	r3, 84650 <prvCopyDataToQueue+0x44>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   84614:	b96a      	cbnz	r2, 84632 <prvCopyDataToQueue+0x26>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   84616:	6880      	ldr	r0, [r0, #8]
   84618:	461a      	mov	r2, r3
   8461a:	4b0f      	ldr	r3, [pc, #60]	; (84658 <prvCopyDataToQueue+0x4c>)
   8461c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8461e:	68a2      	ldr	r2, [r4, #8]
   84620:	6c23      	ldr	r3, [r4, #64]	; 0x40
   84622:	4413      	add	r3, r2
   84624:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   84626:	6862      	ldr	r2, [r4, #4]
   84628:	4293      	cmp	r3, r2
   8462a:	d311      	bcc.n	84650 <prvCopyDataToQueue+0x44>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8462c:	6823      	ldr	r3, [r4, #0]
   8462e:	60a3      	str	r3, [r4, #8]
   84630:	e00e      	b.n	84650 <prvCopyDataToQueue+0x44>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   84632:	68c0      	ldr	r0, [r0, #12]
   84634:	461a      	mov	r2, r3
   84636:	4b08      	ldr	r3, [pc, #32]	; (84658 <prvCopyDataToQueue+0x4c>)
   84638:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8463a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8463c:	4252      	negs	r2, r2
   8463e:	68e3      	ldr	r3, [r4, #12]
   84640:	4413      	add	r3, r2
   84642:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   84644:	6821      	ldr	r1, [r4, #0]
   84646:	428b      	cmp	r3, r1
   84648:	d202      	bcs.n	84650 <prvCopyDataToQueue+0x44>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8464a:	6863      	ldr	r3, [r4, #4]
   8464c:	441a      	add	r2, r3
   8464e:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   84650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   84652:	3301      	adds	r3, #1
   84654:	63a3      	str	r3, [r4, #56]	; 0x38
   84656:	bd10      	pop	{r4, pc}
   84658:	0008cca9 	.word	0x0008cca9

0008465c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   8465c:	b538      	push	{r3, r4, r5, lr}
   8465e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   84660:	6805      	ldr	r5, [r0, #0]
   84662:	b15d      	cbz	r5, 8467c <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   84664:	6c02      	ldr	r2, [r0, #64]	; 0x40
   84666:	68c4      	ldr	r4, [r0, #12]
   84668:	4414      	add	r4, r2
   8466a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   8466c:	6840      	ldr	r0, [r0, #4]
   8466e:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   84670:	bf28      	it	cs
   84672:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   84674:	4608      	mov	r0, r1
   84676:	68d9      	ldr	r1, [r3, #12]
   84678:	4b01      	ldr	r3, [pc, #4]	; (84680 <prvCopyDataFromQueue+0x24>)
   8467a:	4798      	blx	r3
   8467c:	bd38      	pop	{r3, r4, r5, pc}
   8467e:	bf00      	nop
   84680:	0008cca9 	.word	0x0008cca9

00084684 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   84684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84686:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   84688:	4b1c      	ldr	r3, [pc, #112]	; (846fc <prvUnlockQueue+0x78>)
   8468a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8468c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8468e:	2b00      	cmp	r3, #0
   84690:	dd11      	ble.n	846b6 <prvUnlockQueue+0x32>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   84692:	6a63      	ldr	r3, [r4, #36]	; 0x24
   84694:	b17b      	cbz	r3, 846b6 <prvUnlockQueue+0x32>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   84696:	f104 0624 	add.w	r6, r4, #36	; 0x24
   8469a:	4d19      	ldr	r5, [pc, #100]	; (84700 <prvUnlockQueue+0x7c>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8469c:	4f19      	ldr	r7, [pc, #100]	; (84704 <prvUnlockQueue+0x80>)
   8469e:	e001      	b.n	846a4 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   846a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   846a2:	b143      	cbz	r3, 846b6 <prvUnlockQueue+0x32>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   846a4:	4630      	mov	r0, r6
   846a6:	47a8      	blx	r5
   846a8:	b100      	cbz	r0, 846ac <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   846aa:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   846ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   846ae:	3b01      	subs	r3, #1
   846b0:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   846b2:	2b00      	cmp	r3, #0
   846b4:	dcf4      	bgt.n	846a0 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   846b6:	f04f 33ff 	mov.w	r3, #4294967295
   846ba:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   846bc:	4b12      	ldr	r3, [pc, #72]	; (84708 <prvUnlockQueue+0x84>)
   846be:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   846c0:	4b0e      	ldr	r3, [pc, #56]	; (846fc <prvUnlockQueue+0x78>)
   846c2:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   846c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   846c6:	2b00      	cmp	r3, #0
   846c8:	dd11      	ble.n	846ee <prvUnlockQueue+0x6a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   846ca:	6923      	ldr	r3, [r4, #16]
   846cc:	b17b      	cbz	r3, 846ee <prvUnlockQueue+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   846ce:	f104 0610 	add.w	r6, r4, #16
   846d2:	4d0b      	ldr	r5, [pc, #44]	; (84700 <prvUnlockQueue+0x7c>)
				{
					vTaskMissedYield();
   846d4:	4f0b      	ldr	r7, [pc, #44]	; (84704 <prvUnlockQueue+0x80>)
   846d6:	e001      	b.n	846dc <prvUnlockQueue+0x58>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   846d8:	6923      	ldr	r3, [r4, #16]
   846da:	b143      	cbz	r3, 846ee <prvUnlockQueue+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   846dc:	4630      	mov	r0, r6
   846de:	47a8      	blx	r5
   846e0:	b100      	cbz	r0, 846e4 <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
   846e2:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   846e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   846e6:	3b01      	subs	r3, #1
   846e8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   846ea:	2b00      	cmp	r3, #0
   846ec:	dcf4      	bgt.n	846d8 <prvUnlockQueue+0x54>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   846ee:	f04f 33ff 	mov.w	r3, #4294967295
   846f2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   846f4:	4b04      	ldr	r3, [pc, #16]	; (84708 <prvUnlockQueue+0x84>)
   846f6:	4798      	blx	r3
   846f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   846fa:	bf00      	nop
   846fc:	00084531 	.word	0x00084531
   84700:	000851ad 	.word	0x000851ad
   84704:	000852a5 	.word	0x000852a5
   84708:	00084549 	.word	0x00084549

0008470c <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
   8470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8470e:	460d      	mov	r5, r1
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   84710:	4607      	mov	r7, r0
   84712:	b330      	cbz	r0, 84762 <xQueueCreate+0x56>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   84714:	204c      	movs	r0, #76	; 0x4c
   84716:	4b14      	ldr	r3, [pc, #80]	; (84768 <xQueueCreate+0x5c>)
   84718:	4798      	blx	r3
		if( pxNewQueue != NULL )
   8471a:	4604      	mov	r4, r0
   8471c:	b310      	cbz	r0, 84764 <xQueueCreate+0x58>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   8471e:	fb05 f607 	mul.w	r6, r5, r7

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   84722:	1c70      	adds	r0, r6, #1
   84724:	4b10      	ldr	r3, [pc, #64]	; (84768 <xQueueCreate+0x5c>)
   84726:	4798      	blx	r3
   84728:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   8472a:	b1a8      	cbz	r0, 84758 <xQueueCreate+0x4c>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
   8472c:	1983      	adds	r3, r0, r6
   8472e:	6063      	str	r3, [r4, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   84730:	2300      	movs	r3, #0
   84732:	63a3      	str	r3, [r4, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
   84734:	60a0      	str	r0, [r4, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
   84736:	1b76      	subs	r6, r6, r5
   84738:	4430      	add	r0, r6
   8473a:	60e0      	str	r0, [r4, #12]
				pxNewQueue->uxLength = uxQueueLength;
   8473c:	63e7      	str	r7, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8473e:	6425      	str	r5, [r4, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
   84740:	f04f 33ff 	mov.w	r3, #4294967295
   84744:	6463      	str	r3, [r4, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
   84746:	64a3      	str	r3, [r4, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
   84748:	f104 0010 	add.w	r0, r4, #16
   8474c:	4d07      	ldr	r5, [pc, #28]	; (8476c <xQueueCreate+0x60>)
   8474e:	47a8      	blx	r5
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
   84750:	f104 0024 	add.w	r0, r4, #36	; 0x24
   84754:	47a8      	blx	r5
   84756:	e005      	b.n	84764 <xQueueCreate+0x58>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
   84758:	4620      	mov	r0, r4
   8475a:	4b05      	ldr	r3, [pc, #20]	; (84770 <xQueueCreate+0x64>)
   8475c:	4798      	blx	r3

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   8475e:	2400      	movs	r4, #0
   84760:	e000      	b.n	84764 <xQueueCreate+0x58>
   84762:	2400      	movs	r4, #0
	}

	configASSERT( xReturn );

	return xReturn;
}
   84764:	4620      	mov	r0, r4
   84766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84768:	000845c5 	.word	0x000845c5
   8476c:	000843f9 	.word	0x000843f9
   84770:	000845e9 	.word	0x000845e9

00084774 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   84774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84778:	b085      	sub	sp, #20
   8477a:	4604      	mov	r4, r0
   8477c:	468b      	mov	fp, r1
   8477e:	9201      	str	r2, [sp, #4]
   84780:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   84782:	f04f 0900 	mov.w	r9, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   84786:	4d32      	ldr	r5, [pc, #200]	; (84850 <xQueueGenericSend+0xdc>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   84788:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 84878 <xQueueGenericSend+0x104>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8478c:	4e31      	ldr	r6, [pc, #196]	; (84854 <xQueueGenericSend+0xe0>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8478e:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   84790:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   84792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   84794:	429a      	cmp	r2, r3
   84796:	d212      	bcs.n	847be <xQueueGenericSend+0x4a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   84798:	4620      	mov	r0, r4
   8479a:	4659      	mov	r1, fp
   8479c:	9a00      	ldr	r2, [sp, #0]
   8479e:	4b2e      	ldr	r3, [pc, #184]	; (84858 <xQueueGenericSend+0xe4>)
   847a0:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   847a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   847a4:	b13b      	cbz	r3, 847b6 <xQueueGenericSend+0x42>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   847a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   847aa:	4b2c      	ldr	r3, [pc, #176]	; (8485c <xQueueGenericSend+0xe8>)
   847ac:	4798      	blx	r3
   847ae:	2801      	cmp	r0, #1
   847b0:	d101      	bne.n	847b6 <xQueueGenericSend+0x42>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   847b2:	4b2b      	ldr	r3, [pc, #172]	; (84860 <xQueueGenericSend+0xec>)
   847b4:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   847b6:	4b27      	ldr	r3, [pc, #156]	; (84854 <xQueueGenericSend+0xe0>)
   847b8:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   847ba:	2001      	movs	r0, #1
   847bc:	e044      	b.n	84848 <xQueueGenericSend+0xd4>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   847be:	9b01      	ldr	r3, [sp, #4]
   847c0:	b91b      	cbnz	r3, 847ca <xQueueGenericSend+0x56>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   847c2:	4b24      	ldr	r3, [pc, #144]	; (84854 <xQueueGenericSend+0xe0>)
   847c4:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   847c6:	2000      	movs	r0, #0
   847c8:	e03e      	b.n	84848 <xQueueGenericSend+0xd4>
				}
				else if( xEntryTimeSet == pdFALSE )
   847ca:	f1b9 0f00 	cmp.w	r9, #0
   847ce:	d103      	bne.n	847d8 <xQueueGenericSend+0x64>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   847d0:	a802      	add	r0, sp, #8
   847d2:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
   847d4:	f04f 0901 	mov.w	r9, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   847d8:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   847da:	4b22      	ldr	r3, [pc, #136]	; (84864 <xQueueGenericSend+0xf0>)
   847dc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   847de:	47a8      	blx	r5
   847e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   847e2:	f1b3 3fff 	cmp.w	r3, #4294967295
   847e6:	bf04      	itt	eq
   847e8:	2300      	moveq	r3, #0
   847ea:	6463      	streq	r3, [r4, #68]	; 0x44
   847ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   847ee:	f1b3 3fff 	cmp.w	r3, #4294967295
   847f2:	bf04      	itt	eq
   847f4:	2300      	moveq	r3, #0
   847f6:	64a3      	streq	r3, [r4, #72]	; 0x48
   847f8:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   847fa:	a802      	add	r0, sp, #8
   847fc:	a901      	add	r1, sp, #4
   847fe:	4b1a      	ldr	r3, [pc, #104]	; (84868 <xQueueGenericSend+0xf4>)
   84800:	4798      	blx	r3
   84802:	b9d8      	cbnz	r0, 8483c <xQueueGenericSend+0xc8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   84804:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   84806:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   8480a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   8480c:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
   8480e:	45b8      	cmp	r8, r7
   84810:	d10e      	bne.n	84830 <xQueueGenericSend+0xbc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   84812:	f104 0010 	add.w	r0, r4, #16
   84816:	9901      	ldr	r1, [sp, #4]
   84818:	4b14      	ldr	r3, [pc, #80]	; (8486c <xQueueGenericSend+0xf8>)
   8481a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8481c:	4620      	mov	r0, r4
   8481e:	4b14      	ldr	r3, [pc, #80]	; (84870 <xQueueGenericSend+0xfc>)
   84820:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
   84822:	4b14      	ldr	r3, [pc, #80]	; (84874 <xQueueGenericSend+0x100>)
   84824:	4798      	blx	r3
   84826:	2800      	cmp	r0, #0
   84828:	d1b1      	bne.n	8478e <xQueueGenericSend+0x1a>
				{
					portYIELD_WITHIN_API();
   8482a:	4b0d      	ldr	r3, [pc, #52]	; (84860 <xQueueGenericSend+0xec>)
   8482c:	4798      	blx	r3
   8482e:	e7ae      	b.n	8478e <xQueueGenericSend+0x1a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   84830:	4620      	mov	r0, r4
   84832:	4b0f      	ldr	r3, [pc, #60]	; (84870 <xQueueGenericSend+0xfc>)
   84834:	4798      	blx	r3
				( void ) xTaskResumeAll();
   84836:	4b0f      	ldr	r3, [pc, #60]	; (84874 <xQueueGenericSend+0x100>)
   84838:	4798      	blx	r3
   8483a:	e7a8      	b.n	8478e <xQueueGenericSend+0x1a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8483c:	4620      	mov	r0, r4
   8483e:	4b0c      	ldr	r3, [pc, #48]	; (84870 <xQueueGenericSend+0xfc>)
   84840:	4798      	blx	r3
			( void ) xTaskResumeAll();
   84842:	4b0c      	ldr	r3, [pc, #48]	; (84874 <xQueueGenericSend+0x100>)
   84844:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   84846:	2000      	movs	r0, #0
		}
	}
}
   84848:	b005      	add	sp, #20
   8484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8484e:	bf00      	nop
   84850:	00084531 	.word	0x00084531
   84854:	00084549 	.word	0x00084549
   84858:	0008460d 	.word	0x0008460d
   8485c:	000851ad 	.word	0x000851ad
   84860:	00084521 	.word	0x00084521
   84864:	00084d8d 	.word	0x00084d8d
   84868:	00085239 	.word	0x00085239
   8486c:	0008515d 	.word	0x0008515d
   84870:	00084685 	.word	0x00084685
   84874:	00084ec9 	.word	0x00084ec9
   84878:	00085221 	.word	0x00085221

0008487c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84880:	b085      	sub	sp, #20
   84882:	4604      	mov	r4, r0
   84884:	468a      	mov	sl, r1
   84886:	9201      	str	r2, [sp, #4]
   84888:	4699      	mov	r9, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   8488a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8488c:	4d37      	ldr	r5, [pc, #220]	; (8496c <xQueueGenericReceive+0xf0>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8488e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 84994 <xQueueGenericReceive+0x118>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   84892:	4e37      	ldr	r6, [pc, #220]	; (84970 <xQueueGenericReceive+0xf4>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   84894:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   84896:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   84898:	b31a      	cbz	r2, 848e2 <xQueueGenericReceive+0x66>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   8489a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8489c:	4620      	mov	r0, r4
   8489e:	4651      	mov	r1, sl
   848a0:	4b34      	ldr	r3, [pc, #208]	; (84974 <xQueueGenericReceive+0xf8>)
   848a2:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   848a4:	f1b9 0f00 	cmp.w	r9, #0
   848a8:	d10d      	bne.n	848c6 <xQueueGenericReceive+0x4a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   848aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   848ac:	3b01      	subs	r3, #1
   848ae:	63a3      	str	r3, [r4, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   848b0:	6923      	ldr	r3, [r4, #16]
   848b2:	b193      	cbz	r3, 848da <xQueueGenericReceive+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   848b4:	f104 0010 	add.w	r0, r4, #16
   848b8:	4b2f      	ldr	r3, [pc, #188]	; (84978 <xQueueGenericReceive+0xfc>)
   848ba:	4798      	blx	r3
   848bc:	2801      	cmp	r0, #1
   848be:	d10c      	bne.n	848da <xQueueGenericReceive+0x5e>
						{
							portYIELD_WITHIN_API();
   848c0:	4b2e      	ldr	r3, [pc, #184]	; (8497c <xQueueGenericReceive+0x100>)
   848c2:	4798      	blx	r3
   848c4:	e009      	b.n	848da <xQueueGenericReceive+0x5e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   848c6:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   848c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   848ca:	b133      	cbz	r3, 848da <xQueueGenericReceive+0x5e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   848cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   848d0:	4b29      	ldr	r3, [pc, #164]	; (84978 <xQueueGenericReceive+0xfc>)
   848d2:	4798      	blx	r3
   848d4:	b108      	cbz	r0, 848da <xQueueGenericReceive+0x5e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   848d6:	4b29      	ldr	r3, [pc, #164]	; (8497c <xQueueGenericReceive+0x100>)
   848d8:	4798      	blx	r3
						}
					}

				}

				taskEXIT_CRITICAL();
   848da:	4b25      	ldr	r3, [pc, #148]	; (84970 <xQueueGenericReceive+0xf4>)
   848dc:	4798      	blx	r3
				return pdPASS;
   848de:	2001      	movs	r0, #1
   848e0:	e041      	b.n	84966 <xQueueGenericReceive+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   848e2:	9b01      	ldr	r3, [sp, #4]
   848e4:	b91b      	cbnz	r3, 848ee <xQueueGenericReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   848e6:	4b22      	ldr	r3, [pc, #136]	; (84970 <xQueueGenericReceive+0xf4>)
   848e8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   848ea:	2000      	movs	r0, #0
   848ec:	e03b      	b.n	84966 <xQueueGenericReceive+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
   848ee:	b917      	cbnz	r7, 848f6 <xQueueGenericReceive+0x7a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   848f0:	a802      	add	r0, sp, #8
   848f2:	47c0      	blx	r8
					xEntryTimeSet = pdTRUE;
   848f4:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   848f6:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   848f8:	4b21      	ldr	r3, [pc, #132]	; (84980 <xQueueGenericReceive+0x104>)
   848fa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   848fc:	47a8      	blx	r5
   848fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   84900:	f1b3 3fff 	cmp.w	r3, #4294967295
   84904:	bf04      	itt	eq
   84906:	2300      	moveq	r3, #0
   84908:	6463      	streq	r3, [r4, #68]	; 0x44
   8490a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8490c:	f1b3 3fff 	cmp.w	r3, #4294967295
   84910:	bf04      	itt	eq
   84912:	2300      	moveq	r3, #0
   84914:	64a3      	streq	r3, [r4, #72]	; 0x48
   84916:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   84918:	a802      	add	r0, sp, #8
   8491a:	a901      	add	r1, sp, #4
   8491c:	4b19      	ldr	r3, [pc, #100]	; (84984 <xQueueGenericReceive+0x108>)
   8491e:	4798      	blx	r3
   84920:	b9d8      	cbnz	r0, 8495a <xQueueGenericReceive+0xde>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   84922:	47a8      	blx	r5
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   84924:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   84928:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
   8492a:	f1bb 0f00 	cmp.w	fp, #0
   8492e:	d10e      	bne.n	8494e <xQueueGenericReceive+0xd2>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   84930:	f104 0024 	add.w	r0, r4, #36	; 0x24
   84934:	9901      	ldr	r1, [sp, #4]
   84936:	4b14      	ldr	r3, [pc, #80]	; (84988 <xQueueGenericReceive+0x10c>)
   84938:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8493a:	4620      	mov	r0, r4
   8493c:	4b13      	ldr	r3, [pc, #76]	; (8498c <xQueueGenericReceive+0x110>)
   8493e:	4798      	blx	r3
				if( !xTaskResumeAll() )
   84940:	4b13      	ldr	r3, [pc, #76]	; (84990 <xQueueGenericReceive+0x114>)
   84942:	4798      	blx	r3
   84944:	2800      	cmp	r0, #0
   84946:	d1a5      	bne.n	84894 <xQueueGenericReceive+0x18>
				{
					portYIELD_WITHIN_API();
   84948:	4b0c      	ldr	r3, [pc, #48]	; (8497c <xQueueGenericReceive+0x100>)
   8494a:	4798      	blx	r3
   8494c:	e7a2      	b.n	84894 <xQueueGenericReceive+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8494e:	4620      	mov	r0, r4
   84950:	4b0e      	ldr	r3, [pc, #56]	; (8498c <xQueueGenericReceive+0x110>)
   84952:	4798      	blx	r3
				( void ) xTaskResumeAll();
   84954:	4b0e      	ldr	r3, [pc, #56]	; (84990 <xQueueGenericReceive+0x114>)
   84956:	4798      	blx	r3
   84958:	e79c      	b.n	84894 <xQueueGenericReceive+0x18>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8495a:	4620      	mov	r0, r4
   8495c:	4b0b      	ldr	r3, [pc, #44]	; (8498c <xQueueGenericReceive+0x110>)
   8495e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   84960:	4b0b      	ldr	r3, [pc, #44]	; (84990 <xQueueGenericReceive+0x114>)
   84962:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   84964:	2000      	movs	r0, #0
		}
	}
}
   84966:	b005      	add	sp, #20
   84968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8496c:	00084531 	.word	0x00084531
   84970:	00084549 	.word	0x00084549
   84974:	0008465d 	.word	0x0008465d
   84978:	000851ad 	.word	0x000851ad
   8497c:	00084521 	.word	0x00084521
   84980:	00084d8d 	.word	0x00084d8d
   84984:	00085239 	.word	0x00085239
   84988:	0008515d 	.word	0x0008515d
   8498c:	00084685 	.word	0x00084685
   84990:	00084ec9 	.word	0x00084ec9
   84994:	00085221 	.word	0x00085221

00084998 <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   84998:	b538      	push	{r3, r4, r5, lr}
   8499a:	4605      	mov	r5, r0
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   8499c:	6800      	ldr	r0, [r0, #0]
   8499e:	4c02      	ldr	r4, [pc, #8]	; (849a8 <vQueueDelete+0x10>)
   849a0:	47a0      	blx	r4
	vPortFree( pxQueue );
   849a2:	4628      	mov	r0, r5
   849a4:	47a0      	blx	r4
   849a6:	bd38      	pop	{r3, r4, r5, pc}
   849a8:	000845e9 	.word	0x000845e9

000849ac <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   849ac:	b510      	push	{r4, lr}
   849ae:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   849b0:	4b0e      	ldr	r3, [pc, #56]	; (849ec <prvAddCurrentTaskToDelayedList+0x40>)
   849b2:	681b      	ldr	r3, [r3, #0]
   849b4:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   849b6:	4b0e      	ldr	r3, [pc, #56]	; (849f0 <prvAddCurrentTaskToDelayedList+0x44>)
   849b8:	681b      	ldr	r3, [r3, #0]
   849ba:	4298      	cmp	r0, r3
   849bc:	d207      	bcs.n	849ce <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   849be:	4b0d      	ldr	r3, [pc, #52]	; (849f4 <prvAddCurrentTaskToDelayedList+0x48>)
   849c0:	6818      	ldr	r0, [r3, #0]
   849c2:	4b0a      	ldr	r3, [pc, #40]	; (849ec <prvAddCurrentTaskToDelayedList+0x40>)
   849c4:	6819      	ldr	r1, [r3, #0]
   849c6:	3104      	adds	r1, #4
   849c8:	4b0b      	ldr	r3, [pc, #44]	; (849f8 <prvAddCurrentTaskToDelayedList+0x4c>)
   849ca:	4798      	blx	r3
   849cc:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   849ce:	4b0b      	ldr	r3, [pc, #44]	; (849fc <prvAddCurrentTaskToDelayedList+0x50>)
   849d0:	6818      	ldr	r0, [r3, #0]
   849d2:	4b06      	ldr	r3, [pc, #24]	; (849ec <prvAddCurrentTaskToDelayedList+0x40>)
   849d4:	6819      	ldr	r1, [r3, #0]
   849d6:	3104      	adds	r1, #4
   849d8:	4b07      	ldr	r3, [pc, #28]	; (849f8 <prvAddCurrentTaskToDelayedList+0x4c>)
   849da:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   849dc:	4b08      	ldr	r3, [pc, #32]	; (84a00 <prvAddCurrentTaskToDelayedList+0x54>)
   849de:	681b      	ldr	r3, [r3, #0]
   849e0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   849e2:	bf3c      	itt	cc
   849e4:	4b06      	ldrcc	r3, [pc, #24]	; (84a00 <prvAddCurrentTaskToDelayedList+0x54>)
   849e6:	601c      	strcc	r4, [r3, #0]
   849e8:	bd10      	pop	{r4, pc}
   849ea:	bf00      	nop
   849ec:	200745b8 	.word	0x200745b8
   849f0:	200744cc 	.word	0x200744cc
   849f4:	20074570 	.word	0x20074570
   849f8:	00084435 	.word	0x00084435
   849fc:	2007458c 	.word	0x2007458c
   84a00:	200702b4 	.word	0x200702b4

00084a04 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   84a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a08:	4681      	mov	r9, r0
   84a0a:	460f      	mov	r7, r1
   84a0c:	4693      	mov	fp, r2
   84a0e:	469a      	mov	sl, r3
   84a10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   84a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   84a14:	204c      	movs	r0, #76	; 0x4c
   84a16:	4b59      	ldr	r3, [pc, #356]	; (84b7c <xTaskGenericCreate+0x178>)
   84a18:	4798      	blx	r3

	if( pxNewTCB != NULL )
   84a1a:	4604      	mov	r4, r0
   84a1c:	2800      	cmp	r0, #0
   84a1e:	f000 80a8 	beq.w	84b72 <xTaskGenericCreate+0x16e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   84a22:	2d00      	cmp	r5, #0
   84a24:	f040 80a2 	bne.w	84b6c <xTaskGenericCreate+0x168>
   84a28:	ea4f 008b 	mov.w	r0, fp, lsl #2
   84a2c:	4b53      	ldr	r3, [pc, #332]	; (84b7c <xTaskGenericCreate+0x178>)
   84a2e:	4798      	blx	r3
   84a30:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   84a32:	b918      	cbnz	r0, 84a3c <xTaskGenericCreate+0x38>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   84a34:	4620      	mov	r0, r4
   84a36:	4b52      	ldr	r3, [pc, #328]	; (84b80 <xTaskGenericCreate+0x17c>)
   84a38:	4798      	blx	r3
   84a3a:	e09a      	b.n	84b72 <xTaskGenericCreate+0x16e>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
   84a3c:	21a5      	movs	r1, #165	; 0xa5
   84a3e:	ea4f 028b 	mov.w	r2, fp, lsl #2
   84a42:	4b50      	ldr	r3, [pc, #320]	; (84b84 <xTaskGenericCreate+0x180>)
   84a44:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   84a46:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   84a4a:	f10b 3bff 	add.w	fp, fp, #4294967295
   84a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   84a50:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
   84a54:	f02b 0b07 	bic.w	fp, fp, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   84a58:	f104 0034 	add.w	r0, r4, #52	; 0x34
   84a5c:	4639      	mov	r1, r7
   84a5e:	2214      	movs	r2, #20
   84a60:	4b49      	ldr	r3, [pc, #292]	; (84b88 <xTaskGenericCreate+0x184>)
   84a62:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   84a64:	2300      	movs	r3, #0
   84a66:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
   84a6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   84a6c:	2f07      	cmp	r7, #7
   84a6e:	bf28      	it	cs
   84a70:	2707      	movcs	r7, #7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   84a72:	62e7      	str	r7, [r4, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   84a74:	1d25      	adds	r5, r4, #4
   84a76:	4628      	mov	r0, r5
   84a78:	f8df 815c 	ldr.w	r8, [pc, #348]	; 84bd8 <xTaskGenericCreate+0x1d4>
   84a7c:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   84a7e:	f104 0018 	add.w	r0, r4, #24
   84a82:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   84a84:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   84a86:	f1c7 0708 	rsb	r7, r7, #8
   84a8a:	61a7      	str	r7, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   84a8c:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   84a8e:	4658      	mov	r0, fp
   84a90:	4649      	mov	r1, r9
   84a92:	4652      	mov	r2, sl
   84a94:	4b3d      	ldr	r3, [pc, #244]	; (84b8c <xTaskGenericCreate+0x188>)
   84a96:	4798      	blx	r3
   84a98:	6020      	str	r0, [r4, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   84a9a:	b106      	cbz	r6, 84a9e <xTaskGenericCreate+0x9a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   84a9c:	6034      	str	r4, [r6, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   84a9e:	4b3c      	ldr	r3, [pc, #240]	; (84b90 <xTaskGenericCreate+0x18c>)
   84aa0:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   84aa2:	4b3c      	ldr	r3, [pc, #240]	; (84b94 <xTaskGenericCreate+0x190>)
   84aa4:	681a      	ldr	r2, [r3, #0]
   84aa6:	3201      	adds	r2, #1
   84aa8:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   84aaa:	4b3b      	ldr	r3, [pc, #236]	; (84b98 <xTaskGenericCreate+0x194>)
   84aac:	681b      	ldr	r3, [r3, #0]
   84aae:	bb13      	cbnz	r3, 84af6 <xTaskGenericCreate+0xf2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   84ab0:	4b39      	ldr	r3, [pc, #228]	; (84b98 <xTaskGenericCreate+0x194>)
   84ab2:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   84ab4:	4b37      	ldr	r3, [pc, #220]	; (84b94 <xTaskGenericCreate+0x190>)
   84ab6:	681b      	ldr	r3, [r3, #0]
   84ab8:	2b01      	cmp	r3, #1
   84aba:	d127      	bne.n	84b0c <xTaskGenericCreate+0x108>
   84abc:	4e37      	ldr	r6, [pc, #220]	; (84b9c <xTaskGenericCreate+0x198>)
   84abe:	f106 08a0 	add.w	r8, r6, #160	; 0xa0
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   84ac2:	4f37      	ldr	r7, [pc, #220]	; (84ba0 <xTaskGenericCreate+0x19c>)
   84ac4:	4630      	mov	r0, r6
   84ac6:	47b8      	blx	r7
   84ac8:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   84aca:	4546      	cmp	r6, r8
   84acc:	d1fa      	bne.n	84ac4 <xTaskGenericCreate+0xc0>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   84ace:	f8df 810c 	ldr.w	r8, [pc, #268]	; 84bdc <xTaskGenericCreate+0x1d8>
   84ad2:	4640      	mov	r0, r8
   84ad4:	4e32      	ldr	r6, [pc, #200]	; (84ba0 <xTaskGenericCreate+0x19c>)
   84ad6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   84ad8:	4f32      	ldr	r7, [pc, #200]	; (84ba4 <xTaskGenericCreate+0x1a0>)
   84ada:	4638      	mov	r0, r7
   84adc:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   84ade:	4832      	ldr	r0, [pc, #200]	; (84ba8 <xTaskGenericCreate+0x1a4>)
   84ae0:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   84ae2:	4832      	ldr	r0, [pc, #200]	; (84bac <xTaskGenericCreate+0x1a8>)
   84ae4:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   84ae6:	4832      	ldr	r0, [pc, #200]	; (84bb0 <xTaskGenericCreate+0x1ac>)
   84ae8:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   84aea:	4b32      	ldr	r3, [pc, #200]	; (84bb4 <xTaskGenericCreate+0x1b0>)
   84aec:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   84af0:	4b31      	ldr	r3, [pc, #196]	; (84bb8 <xTaskGenericCreate+0x1b4>)
   84af2:	601f      	str	r7, [r3, #0]
   84af4:	e00a      	b.n	84b0c <xTaskGenericCreate+0x108>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   84af6:	4b31      	ldr	r3, [pc, #196]	; (84bbc <xTaskGenericCreate+0x1b8>)
   84af8:	681b      	ldr	r3, [r3, #0]
   84afa:	b93b      	cbnz	r3, 84b0c <xTaskGenericCreate+0x108>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   84afc:	4b26      	ldr	r3, [pc, #152]	; (84b98 <xTaskGenericCreate+0x194>)
   84afe:	681b      	ldr	r3, [r3, #0]
   84b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84b04:	429a      	cmp	r2, r3
					{
						pxCurrentTCB = pxNewTCB;
   84b06:	bf24      	itt	cs
   84b08:	4b23      	ldrcs	r3, [pc, #140]	; (84b98 <xTaskGenericCreate+0x194>)
   84b0a:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   84b0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   84b0e:	4b2c      	ldr	r3, [pc, #176]	; (84bc0 <xTaskGenericCreate+0x1bc>)
   84b10:	681b      	ldr	r3, [r3, #0]
   84b12:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   84b14:	bf84      	itt	hi
   84b16:	4b2a      	ldrhi	r3, [pc, #168]	; (84bc0 <xTaskGenericCreate+0x1bc>)
   84b18:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   84b1a:	4b2a      	ldr	r3, [pc, #168]	; (84bc4 <xTaskGenericCreate+0x1c0>)
   84b1c:	681a      	ldr	r2, [r3, #0]
   84b1e:	64a2      	str	r2, [r4, #72]	; 0x48
			}
			#endif
			uxTaskNumber++;
   84b20:	3201      	adds	r2, #1
   84b22:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   84b24:	4b28      	ldr	r3, [pc, #160]	; (84bc8 <xTaskGenericCreate+0x1c4>)
   84b26:	681b      	ldr	r3, [r3, #0]
   84b28:	4298      	cmp	r0, r3
   84b2a:	bf84      	itt	hi
   84b2c:	4b26      	ldrhi	r3, [pc, #152]	; (84bc8 <xTaskGenericCreate+0x1c4>)
   84b2e:	6018      	strhi	r0, [r3, #0]
   84b30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   84b34:	4b19      	ldr	r3, [pc, #100]	; (84b9c <xTaskGenericCreate+0x198>)
   84b36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   84b3a:	4629      	mov	r1, r5
   84b3c:	4b23      	ldr	r3, [pc, #140]	; (84bcc <xTaskGenericCreate+0x1c8>)
   84b3e:	4798      	blx	r3

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   84b40:	4b23      	ldr	r3, [pc, #140]	; (84bd0 <xTaskGenericCreate+0x1cc>)
   84b42:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   84b44:	4b1d      	ldr	r3, [pc, #116]	; (84bbc <xTaskGenericCreate+0x1b8>)
   84b46:	681b      	ldr	r3, [r3, #0]
   84b48:	b153      	cbz	r3, 84b60 <xTaskGenericCreate+0x15c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   84b4a:	4b13      	ldr	r3, [pc, #76]	; (84b98 <xTaskGenericCreate+0x194>)
   84b4c:	681b      	ldr	r3, [r3, #0]
   84b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84b52:	429a      	cmp	r2, r3
   84b54:	d907      	bls.n	84b66 <xTaskGenericCreate+0x162>
			{
				portYIELD_WITHIN_API();
   84b56:	4b1f      	ldr	r3, [pc, #124]	; (84bd4 <xTaskGenericCreate+0x1d0>)
   84b58:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   84b5a:	2001      	movs	r0, #1
   84b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b60:	2001      	movs	r0, #1
   84b62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b66:	2001      	movs	r0, #1
   84b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   84b6c:	6305      	str	r5, [r0, #48]	; 0x30
   84b6e:	4628      	mov	r0, r5
   84b70:	e764      	b.n	84a3c <xTaskGenericCreate+0x38>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   84b72:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   84b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b7a:	bf00      	nop
   84b7c:	000845c5 	.word	0x000845c5
   84b80:	000845e9 	.word	0x000845e9
   84b84:	0008ccbb 	.word	0x0008ccbb
   84b88:	0008ceff 	.word	0x0008ceff
   84b8c:	00084495 	.word	0x00084495
   84b90:	00084531 	.word	0x00084531
   84b94:	20074590 	.word	0x20074590
   84b98:	200745b8 	.word	0x200745b8
   84b9c:	200744d0 	.word	0x200744d0
   84ba0:	000843f9 	.word	0x000843f9
   84ba4:	200745e4 	.word	0x200745e4
   84ba8:	20074594 	.word	0x20074594
   84bac:	20074574 	.word	0x20074574
   84bb0:	200745bc 	.word	0x200745bc
   84bb4:	2007458c 	.word	0x2007458c
   84bb8:	20074570 	.word	0x20074570
   84bbc:	200745a8 	.word	0x200745a8
   84bc0:	20074608 	.word	0x20074608
   84bc4:	200745b0 	.word	0x200745b0
   84bc8:	200744c4 	.word	0x200744c4
   84bcc:	00084419 	.word	0x00084419
   84bd0:	00084549 	.word	0x00084549
   84bd4:	00084521 	.word	0x00084521
   84bd8:	00084411 	.word	0x00084411
   84bdc:	200745d0 	.word	0x200745d0

00084be0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   84be0:	b570      	push	{r4, r5, r6, lr}
   84be2:	4604      	mov	r4, r0
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   84be4:	4b16      	ldr	r3, [pc, #88]	; (84c40 <vTaskDelete+0x60>)
   84be6:	4798      	blx	r3
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   84be8:	4b16      	ldr	r3, [pc, #88]	; (84c44 <vTaskDelete+0x64>)
   84bea:	681b      	ldr	r3, [r3, #0]
   84bec:	429c      	cmp	r4, r3
   84bee:	d003      	beq.n	84bf8 <vTaskDelete+0x18>
   84bf0:	4626      	mov	r6, r4
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   84bf2:	b92c      	cbnz	r4, 84c00 <vTaskDelete+0x20>
   84bf4:	4626      	mov	r6, r4
   84bf6:	e000      	b.n	84bfa <vTaskDelete+0x1a>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
			{
				pxTaskToDelete = NULL;
   84bf8:	2600      	movs	r6, #0
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   84bfa:	4b12      	ldr	r3, [pc, #72]	; (84c44 <vTaskDelete+0x64>)
   84bfc:	681c      	ldr	r4, [r3, #0]
   84bfe:	e7ff      	b.n	84c00 <vTaskDelete+0x20>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   84c00:	1d25      	adds	r5, r4, #4
   84c02:	4628      	mov	r0, r5
   84c04:	4b10      	ldr	r3, [pc, #64]	; (84c48 <vTaskDelete+0x68>)
   84c06:	4798      	blx	r3

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
   84c08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84c0a:	b11b      	cbz	r3, 84c14 <vTaskDelete+0x34>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   84c0c:	f104 0018 	add.w	r0, r4, #24
   84c10:	4b0d      	ldr	r3, [pc, #52]	; (84c48 <vTaskDelete+0x68>)
   84c12:	4798      	blx	r3
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   84c14:	480d      	ldr	r0, [pc, #52]	; (84c4c <vTaskDelete+0x6c>)
   84c16:	4629      	mov	r1, r5
   84c18:	4b0d      	ldr	r3, [pc, #52]	; (84c50 <vTaskDelete+0x70>)
   84c1a:	4798      	blx	r3

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   84c1c:	4b0d      	ldr	r3, [pc, #52]	; (84c54 <vTaskDelete+0x74>)
   84c1e:	681a      	ldr	r2, [r3, #0]
   84c20:	3201      	adds	r2, #1
   84c22:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   84c24:	4b0c      	ldr	r3, [pc, #48]	; (84c58 <vTaskDelete+0x78>)
   84c26:	681a      	ldr	r2, [r3, #0]
   84c28:	3201      	adds	r2, #1
   84c2a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   84c2c:	4b0b      	ldr	r3, [pc, #44]	; (84c5c <vTaskDelete+0x7c>)
   84c2e:	4798      	blx	r3

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   84c30:	4b0b      	ldr	r3, [pc, #44]	; (84c60 <vTaskDelete+0x80>)
   84c32:	681b      	ldr	r3, [r3, #0]
   84c34:	b113      	cbz	r3, 84c3c <vTaskDelete+0x5c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   84c36:	b90e      	cbnz	r6, 84c3c <vTaskDelete+0x5c>
			{
				portYIELD_WITHIN_API();
   84c38:	4b0a      	ldr	r3, [pc, #40]	; (84c64 <vTaskDelete+0x84>)
   84c3a:	4798      	blx	r3
   84c3c:	bd70      	pop	{r4, r5, r6, pc}
   84c3e:	bf00      	nop
   84c40:	00084531 	.word	0x00084531
   84c44:	200745b8 	.word	0x200745b8
   84c48:	00084471 	.word	0x00084471
   84c4c:	20074574 	.word	0x20074574
   84c50:	00084419 	.word	0x00084419
   84c54:	200744c8 	.word	0x200744c8
   84c58:	200745b0 	.word	0x200745b0
   84c5c:	00084549 	.word	0x00084549
   84c60:	200745a8 	.word	0x200745a8
   84c64:	00084521 	.word	0x00084521

00084c68 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   84c68:	b510      	push	{r4, lr}
   84c6a:	4604      	mov	r4, r0
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   84c6c:	4b04      	ldr	r3, [pc, #16]	; (84c80 <uxTaskPriorityGet+0x18>)
   84c6e:	4798      	blx	r3
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   84c70:	b90c      	cbnz	r4, 84c76 <uxTaskPriorityGet+0xe>
   84c72:	4b04      	ldr	r3, [pc, #16]	; (84c84 <uxTaskPriorityGet+0x1c>)
   84c74:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
   84c76:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		taskEXIT_CRITICAL();
   84c78:	4b03      	ldr	r3, [pc, #12]	; (84c88 <uxTaskPriorityGet+0x20>)
   84c7a:	4798      	blx	r3

		return uxReturn;
	}
   84c7c:	4620      	mov	r0, r4
   84c7e:	bd10      	pop	{r4, pc}
   84c80:	00084531 	.word	0x00084531
   84c84:	200745b8 	.word	0x200745b8
   84c88:	00084549 	.word	0x00084549

00084c8c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   84c8c:	b570      	push	{r4, r5, r6, lr}
   84c8e:	4604      	mov	r4, r0
   84c90:	2907      	cmp	r1, #7
   84c92:	bf34      	ite	cc
   84c94:	460d      	movcc	r5, r1
   84c96:	2507      	movcs	r5, #7
		if( uxNewPriority >= configMAX_PRIORITIES )
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
		}

		taskENTER_CRITICAL();
   84c98:	4b1f      	ldr	r3, [pc, #124]	; (84d18 <vTaskPrioritySet+0x8c>)
   84c9a:	4798      	blx	r3
		{
			if( pxTask == pxCurrentTCB )
   84c9c:	4b1f      	ldr	r3, [pc, #124]	; (84d1c <vTaskPrioritySet+0x90>)
   84c9e:	681b      	ldr	r3, [r3, #0]
   84ca0:	429c      	cmp	r4, r3
   84ca2:	d003      	beq.n	84cac <vTaskPrioritySet+0x20>
   84ca4:	4622      	mov	r2, r4
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   84ca6:	b92c      	cbnz	r4, 84cb4 <vTaskPrioritySet+0x28>
   84ca8:	4622      	mov	r2, r4
   84caa:	e000      	b.n	84cae <vTaskPrioritySet+0x22>

		taskENTER_CRITICAL();
		{
			if( pxTask == pxCurrentTCB )
			{
				pxTask = NULL;
   84cac:	2200      	movs	r2, #0
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   84cae:	4b1b      	ldr	r3, [pc, #108]	; (84d1c <vTaskPrioritySet+0x90>)
   84cb0:	681c      	ldr	r4, [r3, #0]
   84cb2:	e7ff      	b.n	84cb4 <vTaskPrioritySet+0x28>
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   84cb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   84cb6:	42ab      	cmp	r3, r5
   84cb8:	d02a      	beq.n	84d10 <vTaskPrioritySet+0x84>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   84cba:	d203      	bcs.n	84cc4 <vTaskPrioritySet+0x38>
				{
					if( pxTask != NULL )
   84cbc:	1c16      	adds	r6, r2, #0
   84cbe:	bf18      	it	ne
   84cc0:	2601      	movne	r6, #1
   84cc2:	e003      	b.n	84ccc <vTaskPrioritySet+0x40>
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
					}
				}
				else if( pxTask == NULL )
   84cc4:	f1d2 0601 	rsbs	r6, r2, #1
   84cc8:	bf38      	it	cc
   84cca:	2600      	movcc	r6, #0
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   84ccc:	62e5      	str	r5, [r4, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   84cce:	f1c5 0508 	rsb	r5, r5, #8
   84cd2:	61a5      	str	r5, [r4, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   84cd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   84cd8:	4a11      	ldr	r2, [pc, #68]	; (84d20 <vTaskPrioritySet+0x94>)
   84cda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   84cde:	6962      	ldr	r2, [r4, #20]
   84ce0:	429a      	cmp	r2, r3
   84ce2:	d112      	bne.n	84d0a <vTaskPrioritySet+0x7e>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   84ce4:	1d25      	adds	r5, r4, #4
   84ce6:	4628      	mov	r0, r5
   84ce8:	4b0e      	ldr	r3, [pc, #56]	; (84d24 <vTaskPrioritySet+0x98>)
   84cea:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
   84cec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84cee:	4a0e      	ldr	r2, [pc, #56]	; (84d28 <vTaskPrioritySet+0x9c>)
   84cf0:	6812      	ldr	r2, [r2, #0]
   84cf2:	4293      	cmp	r3, r2
   84cf4:	bf84      	itt	hi
   84cf6:	4a0c      	ldrhi	r2, [pc, #48]	; (84d28 <vTaskPrioritySet+0x9c>)
   84cf8:	6013      	strhi	r3, [r2, #0]
   84cfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   84cfe:	4808      	ldr	r0, [pc, #32]	; (84d20 <vTaskPrioritySet+0x94>)
   84d00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   84d04:	4629      	mov	r1, r5
   84d06:	4b09      	ldr	r3, [pc, #36]	; (84d2c <vTaskPrioritySet+0xa0>)
   84d08:	4798      	blx	r3
				}

				if( xYieldRequired == pdTRUE )
   84d0a:	b10e      	cbz	r6, 84d10 <vTaskPrioritySet+0x84>
				{
					portYIELD_WITHIN_API();
   84d0c:	4b08      	ldr	r3, [pc, #32]	; (84d30 <vTaskPrioritySet+0xa4>)
   84d0e:	4798      	blx	r3
				}
			}
		}
		taskEXIT_CRITICAL();
   84d10:	4b08      	ldr	r3, [pc, #32]	; (84d34 <vTaskPrioritySet+0xa8>)
   84d12:	4798      	blx	r3
   84d14:	bd70      	pop	{r4, r5, r6, pc}
   84d16:	bf00      	nop
   84d18:	00084531 	.word	0x00084531
   84d1c:	200745b8 	.word	0x200745b8
   84d20:	200744d0 	.word	0x200744d0
   84d24:	00084471 	.word	0x00084471
   84d28:	200744c4 	.word	0x200744c4
   84d2c:	00084419 	.word	0x00084419
   84d30:	00084521 	.word	0x00084521
   84d34:	00084549 	.word	0x00084549

00084d38 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   84d38:	b510      	push	{r4, lr}
   84d3a:	b084      	sub	sp, #16
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
   84d3c:	2300      	movs	r3, #0
   84d3e:	9300      	str	r3, [sp, #0]
   84d40:	9301      	str	r3, [sp, #4]
   84d42:	9302      	str	r3, [sp, #8]
   84d44:	9303      	str	r3, [sp, #12]
   84d46:	480b      	ldr	r0, [pc, #44]	; (84d74 <vTaskStartScheduler+0x3c>)
   84d48:	490b      	ldr	r1, [pc, #44]	; (84d78 <vTaskStartScheduler+0x40>)
   84d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
   84d4e:	4c0b      	ldr	r4, [pc, #44]	; (84d7c <vTaskStartScheduler+0x44>)
   84d50:	47a0      	blx	r4
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   84d52:	2801      	cmp	r0, #1
   84d54:	d10b      	bne.n	84d6e <vTaskStartScheduler+0x36>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   84d56:	f04f 0050 	mov.w	r0, #80	; 0x50
   84d5a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
   84d5e:	2201      	movs	r2, #1
   84d60:	4b07      	ldr	r3, [pc, #28]	; (84d80 <vTaskStartScheduler+0x48>)
   84d62:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0;
   84d64:	2200      	movs	r2, #0
   84d66:	4b07      	ldr	r3, [pc, #28]	; (84d84 <vTaskStartScheduler+0x4c>)
   84d68:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
   84d6a:	4b07      	ldr	r3, [pc, #28]	; (84d88 <vTaskStartScheduler+0x50>)
   84d6c:	4798      	blx	r3
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   84d6e:	b004      	add	sp, #16
   84d70:	bd10      	pop	{r4, pc}
   84d72:	bf00      	nop
   84d74:	00085005 	.word	0x00085005
   84d78:	000b1004 	.word	0x000b1004
   84d7c:	00084a05 	.word	0x00084a05
   84d80:	200745a8 	.word	0x200745a8
   84d84:	200744cc 	.word	0x200744cc
   84d88:	000844e1 	.word	0x000844e1

00084d8c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   84d8c:	4b02      	ldr	r3, [pc, #8]	; (84d98 <vTaskSuspendAll+0xc>)
   84d8e:	681a      	ldr	r2, [r3, #0]
   84d90:	3201      	adds	r2, #1
   84d92:	601a      	str	r2, [r3, #0]
   84d94:	4770      	bx	lr
   84d96:	bf00      	nop
   84d98:	200745f8 	.word	0x200745f8

00084d9c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   84d9c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   84d9e:	4b04      	ldr	r3, [pc, #16]	; (84db0 <xTaskGetTickCount+0x14>)
   84da0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   84da2:	4b04      	ldr	r3, [pc, #16]	; (84db4 <xTaskGetTickCount+0x18>)
   84da4:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   84da6:	4b04      	ldr	r3, [pc, #16]	; (84db8 <xTaskGetTickCount+0x1c>)
   84da8:	4798      	blx	r3

	return xTicks;
}
   84daa:	4620      	mov	r0, r4
   84dac:	bd10      	pop	{r4, pc}
   84dae:	bf00      	nop
   84db0:	00084531 	.word	0x00084531
   84db4:	200744cc 	.word	0x200744cc
   84db8:	00084549 	.word	0x00084549

00084dbc <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
   84dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   84dc0:	4b36      	ldr	r3, [pc, #216]	; (84e9c <vTaskIncrementTick+0xe0>)
   84dc2:	681b      	ldr	r3, [r3, #0]
   84dc4:	2b00      	cmp	r3, #0
   84dc6:	d163      	bne.n	84e90 <vTaskIncrementTick+0xd4>
	{
		++xTickCount;
   84dc8:	4b35      	ldr	r3, [pc, #212]	; (84ea0 <vTaskIncrementTick+0xe4>)
   84dca:	681a      	ldr	r2, [r3, #0]
   84dcc:	3201      	adds	r2, #1
   84dce:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0 )
   84dd0:	681b      	ldr	r3, [r3, #0]
   84dd2:	b9c3      	cbnz	r3, 84e06 <vTaskIncrementTick+0x4a>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   84dd4:	4b33      	ldr	r3, [pc, #204]	; (84ea4 <vTaskIncrementTick+0xe8>)
   84dd6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   84dd8:	4a33      	ldr	r2, [pc, #204]	; (84ea8 <vTaskIncrementTick+0xec>)
   84dda:	6810      	ldr	r0, [r2, #0]
   84ddc:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   84dde:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   84de0:	4a32      	ldr	r2, [pc, #200]	; (84eac <vTaskIncrementTick+0xf0>)
   84de2:	6811      	ldr	r1, [r2, #0]
   84de4:	3101      	adds	r1, #1
   84de6:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84de8:	681b      	ldr	r3, [r3, #0]
   84dea:	681b      	ldr	r3, [r3, #0]
   84dec:	b923      	cbnz	r3, 84df8 <vTaskIncrementTick+0x3c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   84dee:	f04f 32ff 	mov.w	r2, #4294967295
   84df2:	4b2f      	ldr	r3, [pc, #188]	; (84eb0 <vTaskIncrementTick+0xf4>)
   84df4:	601a      	str	r2, [r3, #0]
   84df6:	e006      	b.n	84e06 <vTaskIncrementTick+0x4a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84df8:	4b2a      	ldr	r3, [pc, #168]	; (84ea4 <vTaskIncrementTick+0xe8>)
   84dfa:	681b      	ldr	r3, [r3, #0]
   84dfc:	68db      	ldr	r3, [r3, #12]
   84dfe:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   84e00:	685a      	ldr	r2, [r3, #4]
   84e02:	4b2b      	ldr	r3, [pc, #172]	; (84eb0 <vTaskIncrementTick+0xf4>)
   84e04:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   84e06:	4b26      	ldr	r3, [pc, #152]	; (84ea0 <vTaskIncrementTick+0xe4>)
   84e08:	681a      	ldr	r2, [r3, #0]
   84e0a:	4b29      	ldr	r3, [pc, #164]	; (84eb0 <vTaskIncrementTick+0xf4>)
   84e0c:	681b      	ldr	r3, [r3, #0]
   84e0e:	429a      	cmp	r2, r3
   84e10:	d342      	bcc.n	84e98 <vTaskIncrementTick+0xdc>
   84e12:	4b24      	ldr	r3, [pc, #144]	; (84ea4 <vTaskIncrementTick+0xe8>)
   84e14:	681b      	ldr	r3, [r3, #0]
   84e16:	681b      	ldr	r3, [r3, #0]
   84e18:	b14b      	cbz	r3, 84e2e <vTaskIncrementTick+0x72>
   84e1a:	4b22      	ldr	r3, [pc, #136]	; (84ea4 <vTaskIncrementTick+0xe8>)
   84e1c:	681b      	ldr	r3, [r3, #0]
   84e1e:	68db      	ldr	r3, [r3, #12]
   84e20:	68dc      	ldr	r4, [r3, #12]
   84e22:	6863      	ldr	r3, [r4, #4]
   84e24:	4a1e      	ldr	r2, [pc, #120]	; (84ea0 <vTaskIncrementTick+0xe4>)
   84e26:	6812      	ldr	r2, [r2, #0]
   84e28:	4293      	cmp	r3, r2
   84e2a:	d913      	bls.n	84e54 <vTaskIncrementTick+0x98>
   84e2c:	e00e      	b.n	84e4c <vTaskIncrementTick+0x90>
   84e2e:	f04f 32ff 	mov.w	r2, #4294967295
   84e32:	4b1f      	ldr	r3, [pc, #124]	; (84eb0 <vTaskIncrementTick+0xf4>)
   84e34:	601a      	str	r2, [r3, #0]
   84e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e3a:	4b1a      	ldr	r3, [pc, #104]	; (84ea4 <vTaskIncrementTick+0xe8>)
   84e3c:	681b      	ldr	r3, [r3, #0]
   84e3e:	68db      	ldr	r3, [r3, #12]
   84e40:	68dc      	ldr	r4, [r3, #12]
   84e42:	6863      	ldr	r3, [r4, #4]
   84e44:	4a16      	ldr	r2, [pc, #88]	; (84ea0 <vTaskIncrementTick+0xe4>)
   84e46:	6812      	ldr	r2, [r2, #0]
   84e48:	4293      	cmp	r3, r2
   84e4a:	d907      	bls.n	84e5c <vTaskIncrementTick+0xa0>
   84e4c:	4a18      	ldr	r2, [pc, #96]	; (84eb0 <vTaskIncrementTick+0xf4>)
   84e4e:	6013      	str	r3, [r2, #0]
   84e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e54:	4e17      	ldr	r6, [pc, #92]	; (84eb4 <vTaskIncrementTick+0xf8>)
   84e56:	4f18      	ldr	r7, [pc, #96]	; (84eb8 <vTaskIncrementTick+0xfc>)
   84e58:	f8df 8068 	ldr.w	r8, [pc, #104]	; 84ec4 <vTaskIncrementTick+0x108>
   84e5c:	1d25      	adds	r5, r4, #4
   84e5e:	4628      	mov	r0, r5
   84e60:	47b0      	blx	r6
   84e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84e64:	b113      	cbz	r3, 84e6c <vTaskIncrementTick+0xb0>
   84e66:	f104 0018 	add.w	r0, r4, #24
   84e6a:	47b0      	blx	r6
   84e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84e6e:	683a      	ldr	r2, [r7, #0]
   84e70:	4293      	cmp	r3, r2
   84e72:	bf88      	it	hi
   84e74:	603b      	strhi	r3, [r7, #0]
   84e76:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   84e7a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   84e7e:	4629      	mov	r1, r5
   84e80:	4b0e      	ldr	r3, [pc, #56]	; (84ebc <vTaskIncrementTick+0x100>)
   84e82:	4798      	blx	r3
   84e84:	4b07      	ldr	r3, [pc, #28]	; (84ea4 <vTaskIncrementTick+0xe8>)
   84e86:	681b      	ldr	r3, [r3, #0]
   84e88:	681b      	ldr	r3, [r3, #0]
   84e8a:	2b00      	cmp	r3, #0
   84e8c:	d1d5      	bne.n	84e3a <vTaskIncrementTick+0x7e>
   84e8e:	e7ce      	b.n	84e2e <vTaskIncrementTick+0x72>
	}
	else
	{
		++uxMissedTicks;
   84e90:	4b0b      	ldr	r3, [pc, #44]	; (84ec0 <vTaskIncrementTick+0x104>)
   84e92:	681a      	ldr	r2, [r3, #0]
   84e94:	3201      	adds	r2, #1
   84e96:	601a      	str	r2, [r3, #0]
   84e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e9c:	200745f8 	.word	0x200745f8
   84ea0:	200744cc 	.word	0x200744cc
   84ea4:	2007458c 	.word	0x2007458c
   84ea8:	20074570 	.word	0x20074570
   84eac:	20074604 	.word	0x20074604
   84eb0:	200702b4 	.word	0x200702b4
   84eb4:	00084471 	.word	0x00084471
   84eb8:	200744c4 	.word	0x200744c4
   84ebc:	00084419 	.word	0x00084419
   84ec0:	200745fc 	.word	0x200745fc
   84ec4:	200744d0 	.word	0x200744d0

00084ec8 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   84ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   84ecc:	4b2d      	ldr	r3, [pc, #180]	; (84f84 <xTaskResumeAll+0xbc>)
   84ece:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   84ed0:	4b2d      	ldr	r3, [pc, #180]	; (84f88 <xTaskResumeAll+0xc0>)
   84ed2:	681a      	ldr	r2, [r3, #0]
   84ed4:	3a01      	subs	r2, #1
   84ed6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   84ed8:	681b      	ldr	r3, [r3, #0]
   84eda:	2b00      	cmp	r3, #0
   84edc:	d148      	bne.n	84f70 <xTaskResumeAll+0xa8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
   84ede:	4b2b      	ldr	r3, [pc, #172]	; (84f8c <xTaskResumeAll+0xc4>)
   84ee0:	681b      	ldr	r3, [r3, #0]
   84ee2:	2b00      	cmp	r3, #0
   84ee4:	d046      	beq.n	84f74 <xTaskResumeAll+0xac>
   84ee6:	2700      	movs	r7, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   84ee8:	4e29      	ldr	r6, [pc, #164]	; (84f90 <xTaskResumeAll+0xc8>)
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
   84eea:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 84fb4 <xTaskResumeAll+0xec>
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   84eee:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 84fb8 <xTaskResumeAll+0xf0>
   84ef2:	e01d      	b.n	84f30 <xTaskResumeAll+0x68>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   84ef4:	68f3      	ldr	r3, [r6, #12]
   84ef6:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   84ef8:	f104 0018 	add.w	r0, r4, #24
   84efc:	47c0      	blx	r8
					vListRemove( &( pxTCB->xGenericListItem ) );
   84efe:	1d25      	adds	r5, r4, #4
   84f00:	4628      	mov	r0, r5
   84f02:	47c0      	blx	r8
					prvAddTaskToReadyQueue( pxTCB );
   84f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84f06:	f8d9 2000 	ldr.w	r2, [r9]
   84f0a:	4293      	cmp	r3, r2
   84f0c:	bf88      	it	hi
   84f0e:	f8c9 3000 	strhi.w	r3, [r9]
   84f12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   84f16:	481f      	ldr	r0, [pc, #124]	; (84f94 <xTaskResumeAll+0xcc>)
   84f18:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   84f1c:	4629      	mov	r1, r5
   84f1e:	4b1e      	ldr	r3, [pc, #120]	; (84f98 <xTaskResumeAll+0xd0>)
   84f20:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84f22:	4b1e      	ldr	r3, [pc, #120]	; (84f9c <xTaskResumeAll+0xd4>)
   84f24:	681b      	ldr	r3, [r3, #0]
   84f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   84f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   84f2a:	429a      	cmp	r2, r3
   84f2c:	bf28      	it	cs
   84f2e:	2701      	movcs	r7, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   84f30:	6833      	ldr	r3, [r6, #0]
   84f32:	2b00      	cmp	r3, #0
   84f34:	d1de      	bne.n	84ef4 <xTaskResumeAll+0x2c>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
   84f36:	4b1a      	ldr	r3, [pc, #104]	; (84fa0 <xTaskResumeAll+0xd8>)
   84f38:	681b      	ldr	r3, [r3, #0]
   84f3a:	b163      	cbz	r3, 84f56 <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
   84f3c:	4b18      	ldr	r3, [pc, #96]	; (84fa0 <xTaskResumeAll+0xd8>)
   84f3e:	681b      	ldr	r3, [r3, #0]
   84f40:	b17b      	cbz	r3, 84f62 <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
   84f42:	4d18      	ldr	r5, [pc, #96]	; (84fa4 <xTaskResumeAll+0xdc>)
						--uxMissedTicks;
   84f44:	4c16      	ldr	r4, [pc, #88]	; (84fa0 <xTaskResumeAll+0xd8>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
   84f46:	47a8      	blx	r5
						--uxMissedTicks;
   84f48:	6823      	ldr	r3, [r4, #0]
   84f4a:	3b01      	subs	r3, #1
   84f4c:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
   84f4e:	6823      	ldr	r3, [r4, #0]
   84f50:	2b00      	cmp	r3, #0
   84f52:	d1f8      	bne.n	84f46 <xTaskResumeAll+0x7e>
   84f54:	e005      	b.n	84f62 <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   84f56:	2f01      	cmp	r7, #1
   84f58:	d003      	beq.n	84f62 <xTaskResumeAll+0x9a>
   84f5a:	4b13      	ldr	r3, [pc, #76]	; (84fa8 <xTaskResumeAll+0xe0>)
   84f5c:	681b      	ldr	r3, [r3, #0]
   84f5e:	2b01      	cmp	r3, #1
   84f60:	d10a      	bne.n	84f78 <xTaskResumeAll+0xb0>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   84f62:	2200      	movs	r2, #0
   84f64:	4b10      	ldr	r3, [pc, #64]	; (84fa8 <xTaskResumeAll+0xe0>)
   84f66:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   84f68:	4b10      	ldr	r3, [pc, #64]	; (84fac <xTaskResumeAll+0xe4>)
   84f6a:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   84f6c:	2401      	movs	r4, #1
   84f6e:	e004      	b.n	84f7a <xTaskResumeAll+0xb2>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   84f70:	2400      	movs	r4, #0
   84f72:	e002      	b.n	84f7a <xTaskResumeAll+0xb2>
   84f74:	2400      	movs	r4, #0
   84f76:	e000      	b.n	84f7a <xTaskResumeAll+0xb2>
   84f78:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   84f7a:	4b0d      	ldr	r3, [pc, #52]	; (84fb0 <xTaskResumeAll+0xe8>)
   84f7c:	4798      	blx	r3

	return xAlreadyYielded;
}
   84f7e:	4620      	mov	r0, r4
   84f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84f84:	00084531 	.word	0x00084531
   84f88:	200745f8 	.word	0x200745f8
   84f8c:	20074590 	.word	0x20074590
   84f90:	20074594 	.word	0x20074594
   84f94:	200744d0 	.word	0x200744d0
   84f98:	00084419 	.word	0x00084419
   84f9c:	200745b8 	.word	0x200745b8
   84fa0:	200745fc 	.word	0x200745fc
   84fa4:	00084dbd 	.word	0x00084dbd
   84fa8:	200745ac 	.word	0x200745ac
   84fac:	00084521 	.word	0x00084521
   84fb0:	00084549 	.word	0x00084549
   84fb4:	00084471 	.word	0x00084471
   84fb8:	200744c4 	.word	0x200744c4

00084fbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   84fbc:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
   84fbe:	4604      	mov	r4, r0
   84fc0:	b178      	cbz	r0, 84fe2 <vTaskDelay+0x26>
		{
			vTaskSuspendAll();
   84fc2:	4b09      	ldr	r3, [pc, #36]	; (84fe8 <vTaskDelay+0x2c>)
   84fc4:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   84fc6:	4b09      	ldr	r3, [pc, #36]	; (84fec <vTaskDelay+0x30>)
   84fc8:	681b      	ldr	r3, [r3, #0]
   84fca:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   84fcc:	4b08      	ldr	r3, [pc, #32]	; (84ff0 <vTaskDelay+0x34>)
   84fce:	6818      	ldr	r0, [r3, #0]
   84fd0:	3004      	adds	r0, #4
   84fd2:	4b08      	ldr	r3, [pc, #32]	; (84ff4 <vTaskDelay+0x38>)
   84fd4:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   84fd6:	4620      	mov	r0, r4
   84fd8:	4b07      	ldr	r3, [pc, #28]	; (84ff8 <vTaskDelay+0x3c>)
   84fda:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   84fdc:	4b07      	ldr	r3, [pc, #28]	; (84ffc <vTaskDelay+0x40>)
   84fde:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
   84fe0:	b908      	cbnz	r0, 84fe6 <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
   84fe2:	4b07      	ldr	r3, [pc, #28]	; (85000 <vTaskDelay+0x44>)
   84fe4:	4798      	blx	r3
   84fe6:	bd10      	pop	{r4, pc}
   84fe8:	00084d8d 	.word	0x00084d8d
   84fec:	200744cc 	.word	0x200744cc
   84ff0:	200745b8 	.word	0x200745b8
   84ff4:	00084471 	.word	0x00084471
   84ff8:	000849ad 	.word	0x000849ad
   84ffc:	00084ec9 	.word	0x00084ec9
   85000:	00084521 	.word	0x00084521

00085004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   85004:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
   85006:	4c14      	ldr	r4, [pc, #80]	; (85058 <prvIdleTask+0x54>)
		{
			vTaskSuspendAll();
   85008:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8507c <prvIdleTask+0x78>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   8500c:	4e13      	ldr	r6, [pc, #76]	; (8505c <prvIdleTask+0x58>)
			xTaskResumeAll();
   8500e:	4f14      	ldr	r7, [pc, #80]	; (85060 <prvIdleTask+0x5c>)
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
   85010:	6823      	ldr	r3, [r4, #0]
   85012:	b1cb      	cbz	r3, 85048 <prvIdleTask+0x44>
		{
			vTaskSuspendAll();
   85014:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   85016:	6835      	ldr	r5, [r6, #0]
			xTaskResumeAll();
   85018:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   8501a:	b1ad      	cbz	r5, 85048 <prvIdleTask+0x44>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8501c:	4b11      	ldr	r3, [pc, #68]	; (85064 <prvIdleTask+0x60>)
   8501e:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   85020:	68f3      	ldr	r3, [r6, #12]
   85022:	68dd      	ldr	r5, [r3, #12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   85024:	1d28      	adds	r0, r5, #4
   85026:	4b10      	ldr	r3, [pc, #64]	; (85068 <prvIdleTask+0x64>)
   85028:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8502a:	4b10      	ldr	r3, [pc, #64]	; (8506c <prvIdleTask+0x68>)
   8502c:	681a      	ldr	r2, [r3, #0]
   8502e:	3a01      	subs	r2, #1
   85030:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   85032:	6823      	ldr	r3, [r4, #0]
   85034:	3b01      	subs	r3, #1
   85036:	6023      	str	r3, [r4, #0]
				}
				taskEXIT_CRITICAL();
   85038:	4b0d      	ldr	r3, [pc, #52]	; (85070 <prvIdleTask+0x6c>)
   8503a:	4798      	blx	r3

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   8503c:	6b28      	ldr	r0, [r5, #48]	; 0x30
   8503e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 85080 <prvIdleTask+0x7c>
   85042:	47c8      	blx	r9
		vPortFree( pxTCB );
   85044:	4628      	mov	r0, r5
   85046:	47c8      	blx	r9

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   85048:	4b0a      	ldr	r3, [pc, #40]	; (85074 <prvIdleTask+0x70>)
   8504a:	681b      	ldr	r3, [r3, #0]
   8504c:	2b01      	cmp	r3, #1
   8504e:	d9df      	bls.n	85010 <prvIdleTask+0xc>
			{
				taskYIELD();
   85050:	4b09      	ldr	r3, [pc, #36]	; (85078 <prvIdleTask+0x74>)
   85052:	4798      	blx	r3
   85054:	e7dc      	b.n	85010 <prvIdleTask+0xc>
   85056:	bf00      	nop
   85058:	200744c8 	.word	0x200744c8
   8505c:	20074574 	.word	0x20074574
   85060:	00084ec9 	.word	0x00084ec9
   85064:	00084531 	.word	0x00084531
   85068:	00084471 	.word	0x00084471
   8506c:	20074590 	.word	0x20074590
   85070:	00084549 	.word	0x00084549
   85074:	200744d0 	.word	0x200744d0
   85078:	00084521 	.word	0x00084521
   8507c:	00084d8d 	.word	0x00084d8d
   85080:	000845e9 	.word	0x000845e9

00085084 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   85084:	4b2b      	ldr	r3, [pc, #172]	; (85134 <vTaskSwitchContext+0xb0>)
   85086:	681b      	ldr	r3, [r3, #0]
   85088:	b943      	cbnz	r3, 8509c <vTaskSwitchContext+0x18>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   8508a:	4b2b      	ldr	r3, [pc, #172]	; (85138 <vTaskSwitchContext+0xb4>)
   8508c:	681b      	ldr	r3, [r3, #0]
   8508e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   85092:	009b      	lsls	r3, r3, #2
   85094:	4a29      	ldr	r2, [pc, #164]	; (8513c <vTaskSwitchContext+0xb8>)
   85096:	58d3      	ldr	r3, [r2, r3]
   85098:	b123      	cbz	r3, 850a4 <vTaskSwitchContext+0x20>
   8509a:	e00f      	b.n	850bc <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   8509c:	2201      	movs	r2, #1
   8509e:	4b28      	ldr	r3, [pc, #160]	; (85140 <vTaskSwitchContext+0xbc>)
   850a0:	601a      	str	r2, [r3, #0]
   850a2:	4770      	bx	lr

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
   850a4:	4b24      	ldr	r3, [pc, #144]	; (85138 <vTaskSwitchContext+0xb4>)

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   850a6:	4925      	ldr	r1, [pc, #148]	; (8513c <vTaskSwitchContext+0xb8>)
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
   850a8:	681a      	ldr	r2, [r3, #0]
   850aa:	3a01      	subs	r2, #1
   850ac:	601a      	str	r2, [r3, #0]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   850ae:	681a      	ldr	r2, [r3, #0]
   850b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   850b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   850b8:	2a00      	cmp	r2, #0
   850ba:	d0f5      	beq.n	850a8 <vTaskSwitchContext+0x24>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   850bc:	4b1e      	ldr	r3, [pc, #120]	; (85138 <vTaskSwitchContext+0xb4>)
   850be:	681b      	ldr	r3, [r3, #0]
   850c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   850c4:	4a1d      	ldr	r2, [pc, #116]	; (8513c <vTaskSwitchContext+0xb8>)
   850c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   850ca:	685a      	ldr	r2, [r3, #4]
   850cc:	6852      	ldr	r2, [r2, #4]
   850ce:	605a      	str	r2, [r3, #4]
   850d0:	f103 0108 	add.w	r1, r3, #8
   850d4:	428a      	cmp	r2, r1
   850d6:	bf04      	itt	eq
   850d8:	6852      	ldreq	r2, [r2, #4]
   850da:	605a      	streq	r2, [r3, #4]
   850dc:	685b      	ldr	r3, [r3, #4]
   850de:	68da      	ldr	r2, [r3, #12]
   850e0:	4b18      	ldr	r3, [pc, #96]	; (85144 <vTaskSwitchContext+0xc0>)
   850e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
   850e4:	4b18      	ldr	r3, [pc, #96]	; (85148 <vTaskSwitchContext+0xc4>)
   850e6:	681b      	ldr	r3, [r3, #0]
   850e8:	b31b      	cbz	r3, 85132 <vTaskSwitchContext+0xae>
   850ea:	4b16      	ldr	r3, [pc, #88]	; (85144 <vTaskSwitchContext+0xc0>)
   850ec:	681b      	ldr	r3, [r3, #0]
   850ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   850f0:	4b16      	ldr	r3, [pc, #88]	; (8514c <vTaskSwitchContext+0xc8>)
   850f2:	681b      	ldr	r3, [r3, #0]
   850f4:	429a      	cmp	r2, r3
   850f6:	d01c      	beq.n	85132 <vTaskSwitchContext+0xae>
   850f8:	4b15      	ldr	r3, [pc, #84]	; (85150 <vTaskSwitchContext+0xcc>)
   850fa:	681b      	ldr	r3, [r3, #0]
   850fc:	3308      	adds	r3, #8
   850fe:	4a15      	ldr	r2, [pc, #84]	; (85154 <vTaskSwitchContext+0xd0>)
   85100:	6812      	ldr	r2, [r2, #0]
   85102:	429a      	cmp	r2, r3
   85104:	d912      	bls.n	8512c <vTaskSwitchContext+0xa8>
   85106:	4b0f      	ldr	r3, [pc, #60]	; (85144 <vTaskSwitchContext+0xc0>)
   85108:	681b      	ldr	r3, [r3, #0]
   8510a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   8510c:	4b0f      	ldr	r3, [pc, #60]	; (8514c <vTaskSwitchContext+0xc8>)
   8510e:	601a      	str	r2, [r3, #0]
   85110:	4b0f      	ldr	r3, [pc, #60]	; (85150 <vTaskSwitchContext+0xcc>)
   85112:	6818      	ldr	r0, [r3, #0]
   85114:	4910      	ldr	r1, [pc, #64]	; (85158 <vTaskSwitchContext+0xd4>)
   85116:	6809      	ldr	r1, [r1, #0]
   85118:	6001      	str	r1, [r0, #0]
   8511a:	6819      	ldr	r1, [r3, #0]
   8511c:	3104      	adds	r1, #4
   8511e:	6019      	str	r1, [r3, #0]
   85120:	6819      	ldr	r1, [r3, #0]
   85122:	600a      	str	r2, [r1, #0]
   85124:	681a      	ldr	r2, [r3, #0]
   85126:	3204      	adds	r2, #4
   85128:	601a      	str	r2, [r3, #0]
   8512a:	4770      	bx	lr
   8512c:	2200      	movs	r2, #0
   8512e:	4b06      	ldr	r3, [pc, #24]	; (85148 <vTaskSwitchContext+0xc4>)
   85130:	601a      	str	r2, [r3, #0]
   85132:	4770      	bx	lr
   85134:	200745f8 	.word	0x200745f8
   85138:	200744c4 	.word	0x200744c4
   8513c:	200744d0 	.word	0x200744d0
   85140:	200745ac 	.word	0x200745ac
   85144:	200745b8 	.word	0x200745b8
   85148:	20074588 	.word	0x20074588
   8514c:	200702b0 	.word	0x200702b0
   85150:	200745b4 	.word	0x200745b4
   85154:	20074600 	.word	0x20074600
   85158:	200744cc 	.word	0x200744cc

0008515c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   8515c:	b538      	push	{r3, r4, r5, lr}
   8515e:	460d      	mov	r5, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   85160:	4c0b      	ldr	r4, [pc, #44]	; (85190 <vTaskPlaceOnEventList+0x34>)
   85162:	6821      	ldr	r1, [r4, #0]
   85164:	3118      	adds	r1, #24
   85166:	4b0b      	ldr	r3, [pc, #44]	; (85194 <vTaskPlaceOnEventList+0x38>)
   85168:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8516a:	6820      	ldr	r0, [r4, #0]
   8516c:	3004      	adds	r0, #4
   8516e:	4b0a      	ldr	r3, [pc, #40]	; (85198 <vTaskPlaceOnEventList+0x3c>)
   85170:	4798      	blx	r3


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   85172:	f1b5 3fff 	cmp.w	r5, #4294967295
   85176:	d105      	bne.n	85184 <vTaskPlaceOnEventList+0x28>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   85178:	6821      	ldr	r1, [r4, #0]
   8517a:	4808      	ldr	r0, [pc, #32]	; (8519c <vTaskPlaceOnEventList+0x40>)
   8517c:	3104      	adds	r1, #4
   8517e:	4b08      	ldr	r3, [pc, #32]	; (851a0 <vTaskPlaceOnEventList+0x44>)
   85180:	4798      	blx	r3
   85182:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   85184:	4b07      	ldr	r3, [pc, #28]	; (851a4 <vTaskPlaceOnEventList+0x48>)
   85186:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   85188:	4428      	add	r0, r5
   8518a:	4b07      	ldr	r3, [pc, #28]	; (851a8 <vTaskPlaceOnEventList+0x4c>)
   8518c:	4798      	blx	r3
   8518e:	bd38      	pop	{r3, r4, r5, pc}
   85190:	200745b8 	.word	0x200745b8
   85194:	00084435 	.word	0x00084435
   85198:	00084471 	.word	0x00084471
   8519c:	200745bc 	.word	0x200745bc
   851a0:	00084419 	.word	0x00084419
   851a4:	200744cc 	.word	0x200744cc
   851a8:	000849ad 	.word	0x000849ad

000851ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   851ac:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   851ae:	68c3      	ldr	r3, [r0, #12]
   851b0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   851b2:	f104 0518 	add.w	r5, r4, #24
   851b6:	4628      	mov	r0, r5
   851b8:	4b12      	ldr	r3, [pc, #72]	; (85204 <xTaskRemoveFromEventList+0x58>)
   851ba:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   851bc:	4b12      	ldr	r3, [pc, #72]	; (85208 <xTaskRemoveFromEventList+0x5c>)
   851be:	681b      	ldr	r3, [r3, #0]
   851c0:	b99b      	cbnz	r3, 851ea <xTaskRemoveFromEventList+0x3e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   851c2:	1d25      	adds	r5, r4, #4
   851c4:	4628      	mov	r0, r5
   851c6:	4b0f      	ldr	r3, [pc, #60]	; (85204 <xTaskRemoveFromEventList+0x58>)
   851c8:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   851ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   851cc:	4a0f      	ldr	r2, [pc, #60]	; (8520c <xTaskRemoveFromEventList+0x60>)
   851ce:	6812      	ldr	r2, [r2, #0]
   851d0:	4293      	cmp	r3, r2
   851d2:	bf84      	itt	hi
   851d4:	4a0d      	ldrhi	r2, [pc, #52]	; (8520c <xTaskRemoveFromEventList+0x60>)
   851d6:	6013      	strhi	r3, [r2, #0]
   851d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   851dc:	480c      	ldr	r0, [pc, #48]	; (85210 <xTaskRemoveFromEventList+0x64>)
   851de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   851e2:	4629      	mov	r1, r5
   851e4:	4b0b      	ldr	r3, [pc, #44]	; (85214 <xTaskRemoveFromEventList+0x68>)
   851e6:	4798      	blx	r3
   851e8:	e003      	b.n	851f2 <xTaskRemoveFromEventList+0x46>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   851ea:	480b      	ldr	r0, [pc, #44]	; (85218 <xTaskRemoveFromEventList+0x6c>)
   851ec:	4629      	mov	r1, r5
   851ee:	4b09      	ldr	r3, [pc, #36]	; (85214 <xTaskRemoveFromEventList+0x68>)
   851f0:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   851f2:	4b0a      	ldr	r3, [pc, #40]	; (8521c <xTaskRemoveFromEventList+0x70>)
   851f4:	681b      	ldr	r3, [r3, #0]
   851f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   851f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   851fa:	4298      	cmp	r0, r3
   851fc:	bf34      	ite	cc
   851fe:	2000      	movcc	r0, #0
   85200:	2001      	movcs	r0, #1
   85202:	bd38      	pop	{r3, r4, r5, pc}
   85204:	00084471 	.word	0x00084471
   85208:	200745f8 	.word	0x200745f8
   8520c:	200744c4 	.word	0x200744c4
   85210:	200744d0 	.word	0x200744d0
   85214:	00084419 	.word	0x00084419
   85218:	20074594 	.word	0x20074594
   8521c:	200745b8 	.word	0x200745b8

00085220 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   85220:	4b03      	ldr	r3, [pc, #12]	; (85230 <vTaskSetTimeOutState+0x10>)
   85222:	681b      	ldr	r3, [r3, #0]
   85224:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   85226:	4b03      	ldr	r3, [pc, #12]	; (85234 <vTaskSetTimeOutState+0x14>)
   85228:	681b      	ldr	r3, [r3, #0]
   8522a:	6043      	str	r3, [r0, #4]
   8522c:	4770      	bx	lr
   8522e:	bf00      	nop
   85230:	20074604 	.word	0x20074604
   85234:	200744cc 	.word	0x200744cc

00085238 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   85238:	b538      	push	{r3, r4, r5, lr}
   8523a:	4604      	mov	r4, r0
   8523c:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   8523e:	4b14      	ldr	r3, [pc, #80]	; (85290 <xTaskCheckForTimeOut+0x58>)
   85240:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   85242:	682b      	ldr	r3, [r5, #0]
   85244:	f1b3 3fff 	cmp.w	r3, #4294967295
   85248:	d019      	beq.n	8527e <xTaskCheckForTimeOut+0x46>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8524a:	4a12      	ldr	r2, [pc, #72]	; (85294 <xTaskCheckForTimeOut+0x5c>)
   8524c:	6811      	ldr	r1, [r2, #0]
   8524e:	6822      	ldr	r2, [r4, #0]
   85250:	428a      	cmp	r2, r1
   85252:	d004      	beq.n	8525e <xTaskCheckForTimeOut+0x26>
   85254:	4a10      	ldr	r2, [pc, #64]	; (85298 <xTaskCheckForTimeOut+0x60>)
   85256:	6811      	ldr	r1, [r2, #0]
   85258:	6862      	ldr	r2, [r4, #4]
   8525a:	428a      	cmp	r2, r1
   8525c:	d911      	bls.n	85282 <xTaskCheckForTimeOut+0x4a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8525e:	4a0e      	ldr	r2, [pc, #56]	; (85298 <xTaskCheckForTimeOut+0x60>)
   85260:	6811      	ldr	r1, [r2, #0]
   85262:	6862      	ldr	r2, [r4, #4]
   85264:	1a89      	subs	r1, r1, r2
   85266:	428b      	cmp	r3, r1
   85268:	d90d      	bls.n	85286 <xTaskCheckForTimeOut+0x4e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8526a:	490b      	ldr	r1, [pc, #44]	; (85298 <xTaskCheckForTimeOut+0x60>)
   8526c:	6809      	ldr	r1, [r1, #0]
   8526e:	1a52      	subs	r2, r2, r1
   85270:	4413      	add	r3, r2
   85272:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   85274:	4620      	mov	r0, r4
   85276:	4b09      	ldr	r3, [pc, #36]	; (8529c <xTaskCheckForTimeOut+0x64>)
   85278:	4798      	blx	r3
			xReturn = pdFALSE;
   8527a:	2400      	movs	r4, #0
   8527c:	e004      	b.n	85288 <xTaskCheckForTimeOut+0x50>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   8527e:	2400      	movs	r4, #0
   85280:	e002      	b.n	85288 <xTaskCheckForTimeOut+0x50>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   85282:	2401      	movs	r4, #1
   85284:	e000      	b.n	85288 <xTaskCheckForTimeOut+0x50>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   85286:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   85288:	4b05      	ldr	r3, [pc, #20]	; (852a0 <xTaskCheckForTimeOut+0x68>)
   8528a:	4798      	blx	r3

	return xReturn;
}
   8528c:	4620      	mov	r0, r4
   8528e:	bd38      	pop	{r3, r4, r5, pc}
   85290:	00084531 	.word	0x00084531
   85294:	20074604 	.word	0x20074604
   85298:	200744cc 	.word	0x200744cc
   8529c:	00085221 	.word	0x00085221
   852a0:	00084549 	.word	0x00084549

000852a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   852a4:	2201      	movs	r2, #1
   852a6:	4b01      	ldr	r3, [pc, #4]	; (852ac <vTaskMissedYield+0x8>)
   852a8:	601a      	str	r2, [r3, #0]
   852aa:	4770      	bx	lr
   852ac:	200745ac 	.word	0x200745ac

000852b0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
   852b0:	b530      	push	{r4, r5, lr}
   852b2:	b087      	sub	sp, #28
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
   852b4:	4604      	mov	r4, r0
   852b6:	b900      	cbnz	r0, 852ba <netconn_close_shutdown+0xa>
   852b8:	e7fe      	b.n	852b8 <netconn_close_shutdown+0x8>

  msg.function = do_close;
   852ba:	4b0b      	ldr	r3, [pc, #44]	; (852e8 <netconn_close_shutdown+0x38>)
   852bc:	9300      	str	r3, [sp, #0]
  msg.msg.conn = conn;
   852be:	9001      	str	r0, [sp, #4]
  /* shutting down both ends is the same as closing */
  msg.msg.msg.sd.shut = how;
   852c0:	f88d 100c 	strb.w	r1, [sp, #12]
  /* because of the LWIP_TCPIP_CORE_LOCKING implementation of do_close,
     don't use TCPIP_APIMSG here */
  err = tcpip_apimsg(&msg);
   852c4:	4668      	mov	r0, sp
   852c6:	4b09      	ldr	r3, [pc, #36]	; (852ec <netconn_close_shutdown+0x3c>)
   852c8:	4798      	blx	r3
   852ca:	4605      	mov	r5, r0

  NETCONN_SET_SAFE_ERR(conn, err);
   852cc:	4b08      	ldr	r3, [pc, #32]	; (852f0 <netconn_close_shutdown+0x40>)
   852ce:	4798      	blx	r3
   852d0:	f994 3008 	ldrsb.w	r3, [r4, #8]
   852d4:	f113 0f09 	cmn.w	r3, #9
   852d8:	bfa8      	it	ge
   852da:	7225      	strbge	r5, [r4, #8]
   852dc:	4b05      	ldr	r3, [pc, #20]	; (852f4 <netconn_close_shutdown+0x44>)
   852de:	4798      	blx	r3
  return err;
}
   852e0:	4628      	mov	r0, r5
   852e2:	b007      	add	sp, #28
   852e4:	bd30      	pop	{r4, r5, pc}
   852e6:	bf00      	nop
   852e8:	00086245 	.word	0x00086245
   852ec:	00086435 	.word	0x00086435
   852f0:	0008c74d 	.word	0x0008c74d
   852f4:	0008c75d 	.word	0x0008c75d

000852f8 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
   852f8:	b570      	push	{r4, r5, r6, lr}
   852fa:	b088      	sub	sp, #32
   852fc:	4604      	mov	r4, r0
  void *buf = NULL;
   852fe:	2300      	movs	r3, #0
   85300:	9307      	str	r3, [sp, #28]
  err_t err;
#if LWIP_TCP
  struct api_msg msg;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
   85302:	460d      	mov	r5, r1
   85304:	b901      	cbnz	r1, 85308 <netconn_recv_data+0x10>
   85306:	e7fe      	b.n	85306 <netconn_recv_data+0xe>
  *new_buf = NULL;
   85308:	2300      	movs	r3, #0
   8530a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
   8530c:	b900      	cbnz	r0, 85310 <netconn_recv_data+0x18>
   8530e:	e7fe      	b.n	8530e <netconn_recv_data+0x16>
  LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
   85310:	f100 0610 	add.w	r6, r0, #16
   85314:	4630      	mov	r0, r6
   85316:	4b25      	ldr	r3, [pc, #148]	; (853ac <netconn_recv_data+0xb4>)
   85318:	4798      	blx	r3
   8531a:	b900      	cbnz	r0, 8531e <netconn_recv_data+0x26>
   8531c:	e7fe      	b.n	8531c <netconn_recv_data+0x24>

  err = conn->last_err;
   8531e:	7a20      	ldrb	r0, [r4, #8]
  if (ERR_IS_FATAL(err)) {
   85320:	b243      	sxtb	r3, r0
   85322:	f113 0f09 	cmn.w	r3, #9
   85326:	db3e      	blt.n	853a6 <netconn_recv_data+0xae>
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
    NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
   85328:	4630      	mov	r0, r6
   8532a:	a907      	add	r1, sp, #28
   8532c:	2200      	movs	r2, #0
   8532e:	4b20      	ldr	r3, [pc, #128]	; (853b0 <netconn_recv_data+0xb8>)
   85330:	4798      	blx	r3
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
  if (conn->type == NETCONN_TCP) {
   85332:	7823      	ldrb	r3, [r4, #0]
   85334:	2b10      	cmp	r3, #16
   85336:	d129      	bne.n	8538c <netconn_recv_data+0x94>
    if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
   85338:	7f23      	ldrb	r3, [r4, #28]
   8533a:	f013 0f08 	tst.w	r3, #8
   8533e:	d001      	beq.n	85344 <netconn_recv_data+0x4c>
   85340:	9b07      	ldr	r3, [sp, #28]
   85342:	bb0b      	cbnz	r3, 85388 <netconn_recv_data+0x90>
      /* Let the stack know that we have taken the data. */
      /* TODO: Speedup: Don't block and wait for the answer here
         (to prevent multiple thread-switches). */
      msg.function = do_recv;
   85344:	4b1b      	ldr	r3, [pc, #108]	; (853b4 <netconn_recv_data+0xbc>)
   85346:	9301      	str	r3, [sp, #4]
      msg.msg.conn = conn;
   85348:	9402      	str	r4, [sp, #8]
      if (buf != NULL) {
   8534a:	9b07      	ldr	r3, [sp, #28]
   8534c:	b113      	cbz	r3, 85354 <netconn_recv_data+0x5c>
        msg.msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
   8534e:	891b      	ldrh	r3, [r3, #8]
   85350:	9304      	str	r3, [sp, #16]
   85352:	e001      	b.n	85358 <netconn_recv_data+0x60>
      } else {
        msg.msg.msg.r.len = 1;
   85354:	2301      	movs	r3, #1
   85356:	9304      	str	r3, [sp, #16]
      }
      /* don't care for the return value of do_recv */
      TCPIP_APIMSG(&msg);
   85358:	a801      	add	r0, sp, #4
   8535a:	4b17      	ldr	r3, [pc, #92]	; (853b8 <netconn_recv_data+0xc0>)
   8535c:	4798      	blx	r3
    }

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
   8535e:	9b07      	ldr	r3, [sp, #28]
   85360:	b993      	cbnz	r3, 85388 <netconn_recv_data+0x90>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
   85362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85364:	b11b      	cbz	r3, 8536e <netconn_recv_data+0x76>
   85366:	4620      	mov	r0, r4
   85368:	2101      	movs	r1, #1
   8536a:	2200      	movs	r2, #0
   8536c:	4798      	blx	r3
      /* Avoid to lose any previous error code */
      NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
   8536e:	4b13      	ldr	r3, [pc, #76]	; (853bc <netconn_recv_data+0xc4>)
   85370:	4798      	blx	r3
   85372:	f994 3008 	ldrsb.w	r3, [r4, #8]
   85376:	f113 0f09 	cmn.w	r3, #9
   8537a:	bfa4      	itt	ge
   8537c:	23f4      	movge	r3, #244	; 0xf4
   8537e:	7223      	strbge	r3, [r4, #8]
   85380:	4b0f      	ldr	r3, [pc, #60]	; (853c0 <netconn_recv_data+0xc8>)
   85382:	4798      	blx	r3
      return ERR_CLSD;
   85384:	20f4      	movs	r0, #244	; 0xf4
   85386:	e00e      	b.n	853a6 <netconn_recv_data+0xae>
    }
    len = ((struct pbuf *)buf)->tot_len;
   85388:	891a      	ldrh	r2, [r3, #8]
   8538a:	e004      	b.n	85396 <netconn_recv_data+0x9e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
   8538c:	9b07      	ldr	r3, [sp, #28]
   8538e:	b903      	cbnz	r3, 85392 <netconn_recv_data+0x9a>
   85390:	e7fe      	b.n	85390 <netconn_recv_data+0x98>
    len = netbuf_len((struct netbuf *)buf);
   85392:	681b      	ldr	r3, [r3, #0]
   85394:	891a      	ldrh	r2, [r3, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
   85396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85398:	b113      	cbz	r3, 853a0 <netconn_recv_data+0xa8>
   8539a:	4620      	mov	r0, r4
   8539c:	2101      	movs	r1, #1
   8539e:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
   853a0:	9b07      	ldr	r3, [sp, #28]
   853a2:	602b      	str	r3, [r5, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
   853a4:	2000      	movs	r0, #0
}
   853a6:	b240      	sxtb	r0, r0
   853a8:	b008      	add	sp, #32
   853aa:	bd70      	pop	{r4, r5, r6, pc}
   853ac:	0008c6e1 	.word	0x0008c6e1
   853b0:	0008c639 	.word	0x0008c639
   853b4:	0008618d 	.word	0x0008618d
   853b8:	00086435 	.word	0x00086435
   853bc:	0008c74d 	.word	0x0008c74d
   853c0:	0008c75d 	.word	0x0008c75d

000853c4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
   853c4:	b570      	push	{r4, r5, r6, lr}
   853c6:	b086      	sub	sp, #24
   853c8:	460d      	mov	r5, r1
  struct netconn *conn;
  struct api_msg msg;

  conn = netconn_alloc(t, callback);
   853ca:	4611      	mov	r1, r2
   853cc:	4b1a      	ldr	r3, [pc, #104]	; (85438 <netconn_new_with_proto_and_callback+0x74>)
   853ce:	4798      	blx	r3
  if (conn != NULL) {
   853d0:	4604      	mov	r4, r0
   853d2:	2800      	cmp	r0, #0
   853d4:	d02b      	beq.n	8542e <netconn_new_with_proto_and_callback+0x6a>
    msg.function = do_newconn;
   853d6:	4b19      	ldr	r3, [pc, #100]	; (8543c <netconn_new_with_proto_and_callback+0x78>)
   853d8:	9300      	str	r3, [sp, #0]
    msg.msg.msg.n.proto = proto;
   853da:	f88d 500c 	strb.w	r5, [sp, #12]
    msg.msg.conn = conn;
   853de:	9001      	str	r0, [sp, #4]
    if (TCPIP_APIMSG(&msg) != ERR_OK) {
   853e0:	4668      	mov	r0, sp
   853e2:	4b17      	ldr	r3, [pc, #92]	; (85440 <netconn_new_with_proto_and_callback+0x7c>)
   853e4:	4798      	blx	r3
   853e6:	b318      	cbz	r0, 85430 <netconn_new_with_proto_and_callback+0x6c>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
   853e8:	6863      	ldr	r3, [r4, #4]
   853ea:	b103      	cbz	r3, 853ee <netconn_new_with_proto_and_callback+0x2a>
   853ec:	e7fe      	b.n	853ec <netconn_new_with_proto_and_callback+0x28>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
   853ee:	f104 060c 	add.w	r6, r4, #12
   853f2:	4630      	mov	r0, r6
   853f4:	4b13      	ldr	r3, [pc, #76]	; (85444 <netconn_new_with_proto_and_callback+0x80>)
   853f6:	4798      	blx	r3
   853f8:	b900      	cbnz	r0, 853fc <netconn_new_with_proto_and_callback+0x38>
   853fa:	e7fe      	b.n	853fa <netconn_new_with_proto_and_callback+0x36>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
   853fc:	f104 0510 	add.w	r5, r4, #16
   85400:	4628      	mov	r0, r5
   85402:	4b11      	ldr	r3, [pc, #68]	; (85448 <netconn_new_with_proto_and_callback+0x84>)
   85404:	4798      	blx	r3
   85406:	b900      	cbnz	r0, 8540a <netconn_new_with_proto_and_callback+0x46>
   85408:	e7fe      	b.n	85408 <netconn_new_with_proto_and_callback+0x44>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
   8540a:	f104 0014 	add.w	r0, r4, #20
   8540e:	4b0e      	ldr	r3, [pc, #56]	; (85448 <netconn_new_with_proto_and_callback+0x84>)
   85410:	4798      	blx	r3
   85412:	b100      	cbz	r0, 85416 <netconn_new_with_proto_and_callback+0x52>
   85414:	e7fe      	b.n	85414 <netconn_new_with_proto_and_callback+0x50>
#endif /* LWIP_TCP */
      sys_sem_free(&conn->op_completed);
   85416:	4630      	mov	r0, r6
   85418:	4b0c      	ldr	r3, [pc, #48]	; (8544c <netconn_new_with_proto_and_callback+0x88>)
   8541a:	4798      	blx	r3
      sys_mbox_free(&conn->recvmbox);
   8541c:	4628      	mov	r0, r5
   8541e:	4b0c      	ldr	r3, [pc, #48]	; (85450 <netconn_new_with_proto_and_callback+0x8c>)
   85420:	4798      	blx	r3
      memp_free(MEMP_NETCONN, conn);
   85422:	2008      	movs	r0, #8
   85424:	4621      	mov	r1, r4
   85426:	4b0b      	ldr	r3, [pc, #44]	; (85454 <netconn_new_with_proto_and_callback+0x90>)
   85428:	4798      	blx	r3
      return NULL;
   8542a:	2000      	movs	r0, #0
   8542c:	e001      	b.n	85432 <netconn_new_with_proto_and_callback+0x6e>
   8542e:	e000      	b.n	85432 <netconn_new_with_proto_and_callback+0x6e>
    }
  }
  return conn;
   85430:	4620      	mov	r0, r4
}
   85432:	b006      	add	sp, #24
   85434:	bd70      	pop	{r4, r5, r6, pc}
   85436:	bf00      	nop
   85438:	00085d49 	.word	0x00085d49
   8543c:	00085c95 	.word	0x00085c95
   85440:	00086435 	.word	0x00086435
   85444:	0008c56d 	.word	0x0008c56d
   85448:	0008c6e1 	.word	0x0008c6e1
   8544c:	0008c4c5 	.word	0x0008c4c5
   85450:	0008c5c1 	.word	0x0008c5c1
   85454:	00087d61 	.word	0x00087d61

00085458 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
   85458:	b510      	push	{r4, lr}
   8545a:	b086      	sub	sp, #24
  struct api_msg msg;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
   8545c:	4604      	mov	r4, r0
   8545e:	b140      	cbz	r0, 85472 <netconn_delete+0x1a>
    return ERR_OK;
  }

  msg.function = do_delconn;
   85460:	4b05      	ldr	r3, [pc, #20]	; (85478 <netconn_delete+0x20>)
   85462:	9300      	str	r3, [sp, #0]
  msg.msg.conn = conn;
   85464:	9001      	str	r0, [sp, #4]
  tcpip_apimsg(&msg);
   85466:	4668      	mov	r0, sp
   85468:	4b04      	ldr	r3, [pc, #16]	; (8547c <netconn_delete+0x24>)
   8546a:	4798      	blx	r3

  netconn_free(conn);
   8546c:	4620      	mov	r0, r4
   8546e:	4b04      	ldr	r3, [pc, #16]	; (85480 <netconn_delete+0x28>)
   85470:	4798      	blx	r3

  /* don't care for return value of do_delconn since it only calls void functions */

  return ERR_OK;
}
   85472:	2000      	movs	r0, #0
   85474:	b006      	add	sp, #24
   85476:	bd10      	pop	{r4, pc}
   85478:	00085f85 	.word	0x00085f85
   8547c:	00086435 	.word	0x00086435
   85480:	00085dd5 	.word	0x00085dd5

00085484 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, ip_addr_t *addr, u16_t port)
{
   85484:	b530      	push	{r4, r5, lr}
   85486:	b087      	sub	sp, #28
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
   85488:	4604      	mov	r4, r0
   8548a:	b900      	cbnz	r0, 8548e <netconn_bind+0xa>
   8548c:	e7fe      	b.n	8548c <netconn_bind+0x8>

  msg.function = do_bind;
   8548e:	4b0b      	ldr	r3, [pc, #44]	; (854bc <netconn_bind+0x38>)
   85490:	9300      	str	r3, [sp, #0]
  msg.msg.conn = conn;
   85492:	9001      	str	r0, [sp, #4]
  msg.msg.msg.bc.ipaddr = addr;
   85494:	9103      	str	r1, [sp, #12]
  msg.msg.msg.bc.port = port;
   85496:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = TCPIP_APIMSG(&msg);
   8549a:	4668      	mov	r0, sp
   8549c:	4b08      	ldr	r3, [pc, #32]	; (854c0 <netconn_bind+0x3c>)
   8549e:	4798      	blx	r3
   854a0:	4605      	mov	r5, r0

  NETCONN_SET_SAFE_ERR(conn, err);
   854a2:	4b08      	ldr	r3, [pc, #32]	; (854c4 <netconn_bind+0x40>)
   854a4:	4798      	blx	r3
   854a6:	f994 3008 	ldrsb.w	r3, [r4, #8]
   854aa:	f113 0f09 	cmn.w	r3, #9
   854ae:	bfa8      	it	ge
   854b0:	7225      	strbge	r5, [r4, #8]
   854b2:	4b05      	ldr	r3, [pc, #20]	; (854c8 <netconn_bind+0x44>)
   854b4:	4798      	blx	r3
  return err;
}
   854b6:	4628      	mov	r0, r5
   854b8:	b007      	add	sp, #28
   854ba:	bd30      	pop	{r4, r5, pc}
   854bc:	00086051 	.word	0x00086051
   854c0:	00086435 	.word	0x00086435
   854c4:	0008c74d 	.word	0x0008c74d
   854c8:	0008c75d 	.word	0x0008c75d

000854cc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
   854cc:	b530      	push	{r4, r5, lr}
   854ce:	b087      	sub	sp, #28
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
   854d0:	4604      	mov	r4, r0
   854d2:	b900      	cbnz	r0, 854d6 <netconn_listen_with_backlog+0xa>
   854d4:	e7fe      	b.n	854d4 <netconn_listen_with_backlog+0x8>

  msg.function = do_listen;
   854d6:	4b0a      	ldr	r3, [pc, #40]	; (85500 <netconn_listen_with_backlog+0x34>)
   854d8:	9300      	str	r3, [sp, #0]
  msg.msg.conn = conn;
   854da:	9001      	str	r0, [sp, #4]
#if TCP_LISTEN_BACKLOG
  msg.msg.msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = TCPIP_APIMSG(&msg);
   854dc:	4668      	mov	r0, sp
   854de:	4b09      	ldr	r3, [pc, #36]	; (85504 <netconn_listen_with_backlog+0x38>)
   854e0:	4798      	blx	r3
   854e2:	4605      	mov	r5, r0

  NETCONN_SET_SAFE_ERR(conn, err);
   854e4:	4b08      	ldr	r3, [pc, #32]	; (85508 <netconn_listen_with_backlog+0x3c>)
   854e6:	4798      	blx	r3
   854e8:	f994 3008 	ldrsb.w	r3, [r4, #8]
   854ec:	f113 0f09 	cmn.w	r3, #9
   854f0:	bfa8      	it	ge
   854f2:	7225      	strbge	r5, [r4, #8]
   854f4:	4b05      	ldr	r3, [pc, #20]	; (8550c <netconn_listen_with_backlog+0x40>)
   854f6:	4798      	blx	r3
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
   854f8:	4628      	mov	r0, r5
   854fa:	b007      	add	sp, #28
   854fc:	bd30      	pop	{r4, r5, pc}
   854fe:	bf00      	nop
   85500:	000860bd 	.word	0x000860bd
   85504:	00086435 	.word	0x00086435
   85508:	0008c74d 	.word	0x0008c74d
   8550c:	0008c75d 	.word	0x0008c75d

00085510 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
   85510:	b570      	push	{r4, r5, r6, lr}
   85512:	b082      	sub	sp, #8
   85514:	4604      	mov	r4, r0
  err_t err;
#if TCP_LISTEN_BACKLOG
  struct api_msg msg;
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
   85516:	460d      	mov	r5, r1
   85518:	b901      	cbnz	r1, 8551c <netconn_accept+0xc>
   8551a:	e7fe      	b.n	8551a <netconn_accept+0xa>
  *new_conn = NULL;
   8551c:	2300      	movs	r3, #0
   8551e:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
   85520:	b900      	cbnz	r0, 85524 <netconn_accept+0x14>
   85522:	e7fe      	b.n	85522 <netconn_accept+0x12>
  LWIP_ERROR("netconn_accept: invalid acceptmbox", sys_mbox_valid(&conn->acceptmbox),   return ERR_ARG;);
   85524:	f100 0614 	add.w	r6, r0, #20
   85528:	4630      	mov	r0, r6
   8552a:	4b14      	ldr	r3, [pc, #80]	; (8557c <netconn_accept+0x6c>)
   8552c:	4798      	blx	r3
   8552e:	b900      	cbnz	r0, 85532 <netconn_accept+0x22>
   85530:	e7fe      	b.n	85530 <netconn_accept+0x20>

  err = conn->last_err;
   85532:	7a20      	ldrb	r0, [r4, #8]
  if (ERR_IS_FATAL(err)) {
   85534:	b243      	sxtb	r3, r0
   85536:	f113 0f09 	cmn.w	r3, #9
   8553a:	db1b      	blt.n	85574 <netconn_accept+0x64>
  if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
    NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, 0);
   8553c:	4630      	mov	r0, r6
   8553e:	a901      	add	r1, sp, #4
   85540:	2200      	movs	r2, #0
   85542:	4b0f      	ldr	r3, [pc, #60]	; (85580 <netconn_accept+0x70>)
   85544:	4798      	blx	r3
#endif /* LWIP_SO_RCVTIMEO*/
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
   85546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85548:	b11b      	cbz	r3, 85552 <netconn_accept+0x42>
   8554a:	4620      	mov	r0, r4
   8554c:	2101      	movs	r1, #1
   8554e:	2200      	movs	r2, #0
   85550:	4798      	blx	r3

  if (newconn == NULL) {
   85552:	9b01      	ldr	r3, [sp, #4]
   85554:	b963      	cbnz	r3, 85570 <netconn_accept+0x60>
    /* connection has been aborted */
    NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
   85556:	4b0b      	ldr	r3, [pc, #44]	; (85584 <netconn_accept+0x74>)
   85558:	4798      	blx	r3
   8555a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   8555e:	f113 0f09 	cmn.w	r3, #9
   85562:	bfa4      	itt	ge
   85564:	23f6      	movge	r3, #246	; 0xf6
   85566:	7223      	strbge	r3, [r4, #8]
   85568:	4b07      	ldr	r3, [pc, #28]	; (85588 <netconn_accept+0x78>)
   8556a:	4798      	blx	r3
    return ERR_ABRT;
   8556c:	20f6      	movs	r0, #246	; 0xf6
   8556e:	e001      	b.n	85574 <netconn_accept+0x64>
  msg.msg.conn = conn;
  /* don't care for the return value of do_recv */
  TCPIP_APIMSG(&msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
   85570:	602b      	str	r3, [r5, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
   85572:	2000      	movs	r0, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
   85574:	b240      	sxtb	r0, r0
   85576:	b002      	add	sp, #8
   85578:	bd70      	pop	{r4, r5, r6, pc}
   8557a:	bf00      	nop
   8557c:	0008c6e1 	.word	0x0008c6e1
   85580:	0008c639 	.word	0x0008c639
   85584:	0008c74d 	.word	0x0008c74d
   85588:	0008c75d 	.word	0x0008c75d

0008558c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
   8558c:	b570      	push	{r4, r5, r6, lr}
   8558e:	b082      	sub	sp, #8
   85590:	4604      	mov	r4, r0
#if LWIP_TCP
  struct netbuf *buf = NULL;
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
   85592:	460e      	mov	r6, r1
   85594:	b901      	cbnz	r1, 85598 <netconn_recv+0xc>
   85596:	e7fe      	b.n	85596 <netconn_recv+0xa>
  *new_buf = NULL;
   85598:	2300      	movs	r3, #0
   8559a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
   8559c:	b900      	cbnz	r0, 855a0 <netconn_recv+0x14>
   8559e:	e7fe      	b.n	8559e <netconn_recv+0x12>
  LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
   855a0:	3010      	adds	r0, #16
   855a2:	4b1c      	ldr	r3, [pc, #112]	; (85614 <netconn_recv+0x88>)
   855a4:	4798      	blx	r3
   855a6:	b900      	cbnz	r0, 855aa <netconn_recv+0x1e>
   855a8:	e7fe      	b.n	855a8 <netconn_recv+0x1c>

#if LWIP_TCP
  if (conn->type == NETCONN_TCP) {
   855aa:	7823      	ldrb	r3, [r4, #0]
   855ac:	2b10      	cmp	r3, #16
   855ae:	d12a      	bne.n	85606 <netconn_recv+0x7a>
    struct pbuf *p = NULL;
   855b0:	2300      	movs	r3, #0
   855b2:	9301      	str	r3, [sp, #4]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
   855b4:	2007      	movs	r0, #7
   855b6:	4b18      	ldr	r3, [pc, #96]	; (85618 <netconn_recv+0x8c>)
   855b8:	4798      	blx	r3
    if (buf == NULL) {
   855ba:	4605      	mov	r5, r0
   855bc:	b960      	cbnz	r0, 855d8 <netconn_recv+0x4c>
      NETCONN_SET_SAFE_ERR(conn, ERR_MEM);
   855be:	4b17      	ldr	r3, [pc, #92]	; (8561c <netconn_recv+0x90>)
   855c0:	4798      	blx	r3
   855c2:	f994 3008 	ldrsb.w	r3, [r4, #8]
   855c6:	f113 0f09 	cmn.w	r3, #9
   855ca:	bfa4      	itt	ge
   855cc:	23ff      	movge	r3, #255	; 0xff
   855ce:	7223      	strbge	r3, [r4, #8]
   855d0:	4b13      	ldr	r3, [pc, #76]	; (85620 <netconn_recv+0x94>)
   855d2:	4798      	blx	r3
      return ERR_MEM;
   855d4:	20ff      	movs	r0, #255	; 0xff
   855d6:	e01a      	b.n	8560e <netconn_recv+0x82>
    }

    err = netconn_recv_data(conn, (void **)&p);
   855d8:	4620      	mov	r0, r4
   855da:	a901      	add	r1, sp, #4
   855dc:	4b11      	ldr	r3, [pc, #68]	; (85624 <netconn_recv+0x98>)
   855de:	4798      	blx	r3
    if (err != ERR_OK) {
   855e0:	4604      	mov	r4, r0
   855e2:	b128      	cbz	r0, 855f0 <netconn_recv+0x64>
      memp_free(MEMP_NETBUF, buf);
   855e4:	2007      	movs	r0, #7
   855e6:	4629      	mov	r1, r5
   855e8:	4b0f      	ldr	r3, [pc, #60]	; (85628 <netconn_recv+0x9c>)
   855ea:	4798      	blx	r3
      return err;
   855ec:	4620      	mov	r0, r4
   855ee:	e00e      	b.n	8560e <netconn_recv+0x82>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
   855f0:	9b01      	ldr	r3, [sp, #4]
   855f2:	b903      	cbnz	r3, 855f6 <netconn_recv+0x6a>
   855f4:	e7fe      	b.n	855f4 <netconn_recv+0x68>

    buf->p = p;
   855f6:	602b      	str	r3, [r5, #0]
    buf->ptr = p;
   855f8:	9b01      	ldr	r3, [sp, #4]
   855fa:	606b      	str	r3, [r5, #4]
    buf->port = 0;
   855fc:	2000      	movs	r0, #0
   855fe:	81a8      	strh	r0, [r5, #12]
    ip_addr_set_any(&buf->addr);
   85600:	60a8      	str	r0, [r5, #8]
    *new_buf = buf;
   85602:	6035      	str	r5, [r6, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
   85604:	e003      	b.n	8560e <netconn_recv+0x82>
  } else
#endif /* LWIP_TCP */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
   85606:	4620      	mov	r0, r4
   85608:	4631      	mov	r1, r6
   8560a:	4b06      	ldr	r3, [pc, #24]	; (85624 <netconn_recv+0x98>)
   8560c:	4798      	blx	r3
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
   8560e:	b240      	sxtb	r0, r0
   85610:	b002      	add	sp, #8
   85612:	bd70      	pop	{r4, r5, r6, pc}
   85614:	0008c6e1 	.word	0x0008c6e1
   85618:	00087ce1 	.word	0x00087ce1
   8561c:	0008c74d 	.word	0x0008c74d
   85620:	0008c75d 	.word	0x0008c75d
   85624:	000852f9 	.word	0x000852f9
   85628:	00087d61 	.word	0x00087d61

0008562c <netconn_write>:
 * - NETCONN_DONTBLOCK: only write the data if all dat can be written at once
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write(struct netconn *conn, const void *dataptr, size_t size, u8_t apiflags)
{
   8562c:	b530      	push	{r4, r5, lr}
   8562e:	b087      	sub	sp, #28
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
   85630:	4604      	mov	r4, r0
   85632:	b900      	cbnz	r0, 85636 <netconn_write+0xa>
   85634:	e7fe      	b.n	85634 <netconn_write+0x8>
  LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);
   85636:	7800      	ldrb	r0, [r0, #0]
   85638:	2810      	cmp	r0, #16
   8563a:	d000      	beq.n	8563e <netconn_write+0x12>
   8563c:	e7fe      	b.n	8563c <netconn_write+0x10>
  if (size == 0) {
   8563e:	b1b2      	cbz	r2, 8566e <netconn_write+0x42>
    return ERR_OK;
  }

  /* @todo: for non-blocking write, check if 'size' would ever fit into
            snd_queue or snd_buf */
  msg.function = do_write;
   85640:	480d      	ldr	r0, [pc, #52]	; (85678 <netconn_write+0x4c>)
   85642:	9000      	str	r0, [sp, #0]
  msg.msg.conn = conn;
   85644:	9401      	str	r4, [sp, #4]
  msg.msg.msg.w.dataptr = dataptr;
   85646:	9103      	str	r1, [sp, #12]
  msg.msg.msg.w.apiflags = apiflags;
   85648:	f88d 3014 	strb.w	r3, [sp, #20]
  msg.msg.msg.w.len = size;
   8564c:	9204      	str	r2, [sp, #16]
  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = TCPIP_APIMSG(&msg);
   8564e:	4668      	mov	r0, sp
   85650:	4b0a      	ldr	r3, [pc, #40]	; (8567c <netconn_write+0x50>)
   85652:	4798      	blx	r3
   85654:	4605      	mov	r5, r0

  NETCONN_SET_SAFE_ERR(conn, err);
   85656:	4b0a      	ldr	r3, [pc, #40]	; (85680 <netconn_write+0x54>)
   85658:	4798      	blx	r3
   8565a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   8565e:	f113 0f09 	cmn.w	r3, #9
   85662:	bfa8      	it	ge
   85664:	7225      	strbge	r5, [r4, #8]
   85666:	4b07      	ldr	r3, [pc, #28]	; (85684 <netconn_write+0x58>)
   85668:	4798      	blx	r3
  return err;
   8566a:	4628      	mov	r0, r5
   8566c:	e000      	b.n	85670 <netconn_write+0x44>
  err_t err;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);
  if (size == 0) {
    return ERR_OK;
   8566e:	2000      	movs	r0, #0
     non-blocking version here. */
  err = TCPIP_APIMSG(&msg);

  NETCONN_SET_SAFE_ERR(conn, err);
  return err;
}
   85670:	b240      	sxtb	r0, r0
   85672:	b007      	add	sp, #28
   85674:	bd30      	pop	{r4, r5, pc}
   85676:	bf00      	nop
   85678:	000861d5 	.word	0x000861d5
   8567c:	00086435 	.word	0x00086435
   85680:	0008c74d 	.word	0x0008c74d
   85684:	0008c75d 	.word	0x0008c75d

00085688 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
   85688:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
   8568a:	2103      	movs	r1, #3
   8568c:	4b01      	ldr	r3, [pc, #4]	; (85694 <netconn_close+0xc>)
   8568e:	4798      	blx	r3
}
   85690:	bd08      	pop	{r3, pc}
   85692:	bf00      	nop
   85694:	000852b1 	.word	0x000852b1

00085698 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   ip_addr_t *addr, u16_t port)
{
   85698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8569c:	4605      	mov	r5, r0
   8569e:	4616      	mov	r6, r2
   856a0:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
   856a2:	b901      	cbnz	r1, 856a6 <recv_udp+0xe>
   856a4:	e7fe      	b.n	856a4 <recv_udp+0xc>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
   856a6:	b900      	cbnz	r0, 856aa <recv_udp+0x12>
   856a8:	e7fe      	b.n	856a8 <recv_udp+0x10>
  conn = (struct netconn *)arg;
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
   856aa:	6843      	ldr	r3, [r0, #4]
   856ac:	428b      	cmp	r3, r1
   856ae:	d000      	beq.n	856b2 <recv_udp+0x1a>
   856b0:	e7fe      	b.n	856b0 <recv_udp+0x18>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
   856b2:	f100 0710 	add.w	r7, r0, #16
   856b6:	4638      	mov	r0, r7
   856b8:	4b18      	ldr	r3, [pc, #96]	; (8571c <recv_udp+0x84>)
   856ba:	4798      	blx	r3
   856bc:	b920      	cbnz	r0, 856c8 <recv_udp+0x30>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
   856be:	4630      	mov	r0, r6
   856c0:	4b17      	ldr	r3, [pc, #92]	; (85720 <recv_udp+0x88>)
   856c2:	4798      	blx	r3
    return;
   856c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
   856c8:	2007      	movs	r0, #7
   856ca:	4b16      	ldr	r3, [pc, #88]	; (85724 <recv_udp+0x8c>)
   856cc:	4798      	blx	r3
  if (buf == NULL) {
   856ce:	4604      	mov	r4, r0
   856d0:	b920      	cbnz	r0, 856dc <recv_udp+0x44>
    pbuf_free(p);
   856d2:	4630      	mov	r0, r6
   856d4:	4b12      	ldr	r3, [pc, #72]	; (85720 <recv_udp+0x88>)
   856d6:	4798      	blx	r3
    return;
   856d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    buf->p = p;
   856dc:	6006      	str	r6, [r0, #0]
    buf->ptr = p;
   856de:	6046      	str	r6, [r0, #4]
    ip_addr_set(&buf->addr, addr);
   856e0:	f1b8 0f00 	cmp.w	r8, #0
   856e4:	d002      	beq.n	856ec <recv_udp+0x54>
   856e6:	f8d8 3000 	ldr.w	r3, [r8]
   856ea:	e000      	b.n	856ee <recv_udp+0x56>
   856ec:	2300      	movs	r3, #0
   856ee:	60a3      	str	r3, [r4, #8]
    buf->port = port;
   856f0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   856f4:	81a3      	strh	r3, [r4, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
   856f6:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
   856f8:	4638      	mov	r0, r7
   856fa:	4621      	mov	r1, r4
   856fc:	4b0a      	ldr	r3, [pc, #40]	; (85728 <recv_udp+0x90>)
   856fe:	4798      	blx	r3
   85700:	b120      	cbz	r0, 8570c <recv_udp+0x74>
    netbuf_delete(buf);
   85702:	4620      	mov	r0, r4
   85704:	4b09      	ldr	r3, [pc, #36]	; (8572c <recv_udp+0x94>)
   85706:	4798      	blx	r3
    return;
   85708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
   8570c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   8570e:	b11b      	cbz	r3, 85718 <recv_udp+0x80>
   85710:	4628      	mov	r0, r5
   85712:	2100      	movs	r1, #0
   85714:	4632      	mov	r2, r6
   85716:	4798      	blx	r3
   85718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8571c:	0008c6e1 	.word	0x0008c6e1
   85720:	00088045 	.word	0x00088045
   85724:	00087ce1 	.word	0x00087ce1
   85728:	0008c60d 	.word	0x0008c60d
   8572c:	000862c1 	.word	0x000862c1

00085730 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    ip_addr_t *addr)
{
   85730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85734:	4688      	mov	r8, r1
   85736:	4616      	mov	r6, r2
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
   85738:	4604      	mov	r4, r0
   8573a:	2800      	cmp	r0, #0
   8573c:	d03a      	beq.n	857b4 <recv_raw+0x84>
   8573e:	f100 0510 	add.w	r5, r0, #16
   85742:	4628      	mov	r0, r5
   85744:	4b1d      	ldr	r3, [pc, #116]	; (857bc <recv_raw+0x8c>)
   85746:	4798      	blx	r3
   85748:	2800      	cmp	r0, #0
   8574a:	d033      	beq.n	857b4 <recv_raw+0x84>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
      return 0;
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
   8574c:	2003      	movs	r0, #3
   8574e:	8931      	ldrh	r1, [r6, #8]
   85750:	2200      	movs	r2, #0
   85752:	4b1b      	ldr	r3, [pc, #108]	; (857c0 <recv_raw+0x90>)
   85754:	4798      	blx	r3
    if(q != NULL) {
   85756:	4607      	mov	r7, r0
   85758:	2800      	cmp	r0, #0
   8575a:	d02b      	beq.n	857b4 <recv_raw+0x84>
      if (pbuf_copy(q, p) != ERR_OK) {
   8575c:	4631      	mov	r1, r6
   8575e:	4b19      	ldr	r3, [pc, #100]	; (857c4 <recv_raw+0x94>)
   85760:	4798      	blx	r3
   85762:	b300      	cbz	r0, 857a6 <recv_raw+0x76>
        pbuf_free(q);
   85764:	4638      	mov	r0, r7
   85766:	4b18      	ldr	r3, [pc, #96]	; (857c8 <recv_raw+0x98>)
   85768:	4798      	blx	r3
   8576a:	e023      	b.n	857b4 <recv_raw+0x84>

    if (q != NULL) {
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
      if (buf == NULL) {
        pbuf_free(q);
   8576c:	4638      	mov	r0, r7
   8576e:	4b16      	ldr	r3, [pc, #88]	; (857c8 <recv_raw+0x98>)
   85770:	4798      	blx	r3
        return 0;
   85772:	e01f      	b.n	857b4 <recv_raw+0x84>
      }

      buf->p = q;
   85774:	6037      	str	r7, [r6, #0]
      buf->ptr = q;
   85776:	6077      	str	r7, [r6, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
   85778:	4b14      	ldr	r3, [pc, #80]	; (857cc <recv_raw+0x9c>)
   8577a:	681b      	ldr	r3, [r3, #0]
   8577c:	60b3      	str	r3, [r6, #8]
      buf->port = pcb->protocol;
   8577e:	f898 3010 	ldrb.w	r3, [r8, #16]
   85782:	81b3      	strh	r3, [r6, #12]

      len = q->tot_len;
   85784:	893f      	ldrh	r7, [r7, #8]
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
   85786:	4628      	mov	r0, r5
   85788:	4631      	mov	r1, r6
   8578a:	4b11      	ldr	r3, [pc, #68]	; (857d0 <recv_raw+0xa0>)
   8578c:	4798      	blx	r3
   8578e:	b118      	cbz	r0, 85798 <recv_raw+0x68>
        netbuf_delete(buf);
   85790:	4630      	mov	r0, r6
   85792:	4b10      	ldr	r3, [pc, #64]	; (857d4 <recv_raw+0xa4>)
   85794:	4798      	blx	r3
        return 0;
   85796:	e00d      	b.n	857b4 <recv_raw+0x84>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
   85798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8579a:	b15b      	cbz	r3, 857b4 <recv_raw+0x84>
   8579c:	4620      	mov	r0, r4
   8579e:	2100      	movs	r1, #0
   857a0:	463a      	mov	r2, r7
   857a2:	4798      	blx	r3
   857a4:	e006      	b.n	857b4 <recv_raw+0x84>
      }
    }

    if (q != NULL) {
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
   857a6:	2007      	movs	r0, #7
   857a8:	4b0b      	ldr	r3, [pc, #44]	; (857d8 <recv_raw+0xa8>)
   857aa:	4798      	blx	r3
      if (buf == NULL) {
   857ac:	4606      	mov	r6, r0
   857ae:	2800      	cmp	r0, #0
   857b0:	d1e0      	bne.n	85774 <recv_raw+0x44>
   857b2:	e7db      	b.n	8576c <recv_raw+0x3c>
      }
    }
  }

  return 0; /* do not eat the packet */
}
   857b4:	2000      	movs	r0, #0
   857b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   857ba:	bf00      	nop
   857bc:	0008c6e1 	.word	0x0008c6e1
   857c0:	000880d1 	.word	0x000880d1
   857c4:	00088339 	.word	0x00088339
   857c8:	00088045 	.word	0x00088045
   857cc:	20075b5c 	.word	0x20075b5c
   857d0:	0008c60d 	.word	0x0008c60d
   857d4:	000862c1 	.word	0x000862c1
   857d8:	00087ce1 	.word	0x00087ce1

000857dc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
   857dc:	b510      	push	{r4, lr}
   857de:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
   857e0:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
   857e2:	4620      	mov	r0, r4
   857e4:	4b09      	ldr	r3, [pc, #36]	; (8580c <setup_tcp+0x30>)
   857e6:	4798      	blx	r3
  tcp_recv(pcb, recv_tcp);
   857e8:	4620      	mov	r0, r4
   857ea:	4909      	ldr	r1, [pc, #36]	; (85810 <setup_tcp+0x34>)
   857ec:	4b09      	ldr	r3, [pc, #36]	; (85814 <setup_tcp+0x38>)
   857ee:	4798      	blx	r3
  tcp_sent(pcb, sent_tcp);
   857f0:	4620      	mov	r0, r4
   857f2:	4909      	ldr	r1, [pc, #36]	; (85818 <setup_tcp+0x3c>)
   857f4:	4b09      	ldr	r3, [pc, #36]	; (8581c <setup_tcp+0x40>)
   857f6:	4798      	blx	r3
  tcp_poll(pcb, poll_tcp, 4);
   857f8:	4620      	mov	r0, r4
   857fa:	4909      	ldr	r1, [pc, #36]	; (85820 <setup_tcp+0x44>)
   857fc:	2204      	movs	r2, #4
   857fe:	4b09      	ldr	r3, [pc, #36]	; (85824 <setup_tcp+0x48>)
   85800:	4798      	blx	r3
  tcp_err(pcb, err_tcp);
   85802:	4620      	mov	r0, r4
   85804:	4908      	ldr	r1, [pc, #32]	; (85828 <setup_tcp+0x4c>)
   85806:	4b09      	ldr	r3, [pc, #36]	; (8582c <setup_tcp+0x50>)
   85808:	4798      	blx	r3
   8580a:	bd10      	pop	{r4, pc}
   8580c:	0008893d 	.word	0x0008893d
   85810:	00085bfd 	.word	0x00085bfd
   85814:	00088941 	.word	0x00088941
   85818:	00085ba1 	.word	0x00085ba1
   8581c:	00088949 	.word	0x00088949
   85820:	00085b45 	.word	0x00085b45
   85824:	0008895d 	.word	0x0008895d
   85828:	00085831 	.word	0x00085831
   8582c:	00088951 	.word	0x00088951

00085830 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
   85830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85832:	460d      	mov	r5, r1
  struct netconn *conn;
  enum netconn_state old_state;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
  LWIP_ASSERT("conn != NULL", (conn != NULL));
   85834:	4604      	mov	r4, r0
   85836:	b900      	cbnz	r0, 8583a <err_tcp+0xa>
   85838:	e7fe      	b.n	85838 <err_tcp+0x8>

  conn->pcb.tcp = NULL;
   8583a:	2700      	movs	r7, #0
   8583c:	6047      	str	r7, [r0, #4]

  /* no check since this is always fatal! */
  SYS_ARCH_PROTECT(lev);
   8583e:	4b24      	ldr	r3, [pc, #144]	; (858d0 <err_tcp+0xa0>)
   85840:	4798      	blx	r3
  conn->last_err = err;
   85842:	7225      	strb	r5, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
   85844:	4b23      	ldr	r3, [pc, #140]	; (858d4 <err_tcp+0xa4>)
   85846:	4798      	blx	r3

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
   85848:	7866      	ldrb	r6, [r4, #1]
  conn->state = NETCONN_NONE;
   8584a:	7067      	strb	r7, [r4, #1]

  /* Notify the user layer about a connection error. Used to signal
     select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
   8584c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8584e:	b17b      	cbz	r3, 85870 <err_tcp+0x40>
   85850:	4620      	mov	r0, r4
   85852:	2104      	movs	r1, #4
   85854:	463a      	mov	r2, r7
   85856:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
   85858:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8585a:	b14b      	cbz	r3, 85870 <err_tcp+0x40>
   8585c:	4620      	mov	r0, r4
   8585e:	4639      	mov	r1, r7
   85860:	463a      	mov	r2, r7
   85862:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
   85864:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85866:	b11b      	cbz	r3, 85870 <err_tcp+0x40>
   85868:	4620      	mov	r0, r4
   8586a:	2102      	movs	r1, #2
   8586c:	463a      	mov	r2, r7
   8586e:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
   85870:	f104 0710 	add.w	r7, r4, #16
   85874:	4638      	mov	r0, r7
   85876:	4b18      	ldr	r3, [pc, #96]	; (858d8 <err_tcp+0xa8>)
   85878:	4798      	blx	r3
   8587a:	b118      	cbz	r0, 85884 <err_tcp+0x54>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
   8587c:	4638      	mov	r0, r7
   8587e:	2100      	movs	r1, #0
   85880:	4b16      	ldr	r3, [pc, #88]	; (858dc <err_tcp+0xac>)
   85882:	4798      	blx	r3
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
   85884:	f104 0714 	add.w	r7, r4, #20
   85888:	4638      	mov	r0, r7
   8588a:	4b13      	ldr	r3, [pc, #76]	; (858d8 <err_tcp+0xa8>)
   8588c:	4798      	blx	r3
   8588e:	b118      	cbz	r0, 85898 <err_tcp+0x68>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
   85890:	4638      	mov	r0, r7
   85892:	2100      	movs	r1, #0
   85894:	4b11      	ldr	r3, [pc, #68]	; (858dc <err_tcp+0xac>)
   85896:	4798      	blx	r3
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
   85898:	2e01      	cmp	r6, #1
   8589a:	d003      	beq.n	858a4 <err_tcp+0x74>
   8589c:	1ef3      	subs	r3, r6, #3
   8589e:	b2db      	uxtb	r3, r3
   858a0:	2b01      	cmp	r3, #1
   858a2:	d811      	bhi.n	858c8 <err_tcp+0x98>
      (old_state == NETCONN_CONNECT)) {
    /* calling do_writemore/do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
   858a4:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
   858a6:	f023 0204 	bic.w	r2, r3, #4
   858aa:	7722      	strb	r2, [r4, #28]

    if (!was_nonblocking_connect) {
   858ac:	f013 0f04 	tst.w	r3, #4
   858b0:	d10d      	bne.n	858ce <err_tcp+0x9e>
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
   858b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   858b4:	b903      	cbnz	r3, 858b8 <err_tcp+0x88>
   858b6:	e7fe      	b.n	858b6 <err_tcp+0x86>
      conn->current_msg->err = err;
   858b8:	711d      	strb	r5, [r3, #4]
      conn->current_msg = NULL;
   858ba:	2300      	movs	r3, #0
   858bc:	6263      	str	r3, [r4, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(&conn->op_completed);
   858be:	f104 000c 	add.w	r0, r4, #12
   858c2:	4b07      	ldr	r3, [pc, #28]	; (858e0 <err_tcp+0xb0>)
   858c4:	4798      	blx	r3
   858c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
   858c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   858ca:	b103      	cbz	r3, 858ce <err_tcp+0x9e>
   858cc:	e7fe      	b.n	858cc <err_tcp+0x9c>
   858ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   858d0:	0008c74d 	.word	0x0008c74d
   858d4:	0008c75d 	.word	0x0008c75d
   858d8:	0008c6e1 	.word	0x0008c6e1
   858dc:	0008c60d 	.word	0x0008c60d
   858e0:	0008c4e9 	.word	0x0008c4e9

000858e4 <do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
do_writemore(struct netconn *conn)
{
   858e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   858e8:	4604      	mov	r4, r0
  err_t err = ERR_OK;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock = netconn_is_nonblocking(conn) ||
   858ea:	7f03      	ldrb	r3, [r0, #28]
   858ec:	f013 0f02 	tst.w	r3, #2
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
   858f0:	bf03      	ittte	eq
   858f2:	6a43      	ldreq	r3, [r0, #36]	; 0x24
  err_t err = ERR_OK;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock = netconn_is_nonblocking(conn) ||
   858f4:	7c1d      	ldrbeq	r5, [r3, #16]
   858f6:	f3c5 0580 	ubfxeq	r5, r5, #2, #1
   858fa:	2501      	movne	r5, #1
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
  u8_t apiflags = conn->current_msg->msg.w.apiflags;
   858fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
   858fe:	7c0b      	ldrb	r3, [r1, #16]

  LWIP_ASSERT("conn != NULL", conn != NULL);
   85900:	b900      	cbnz	r0, 85904 <do_writemore+0x20>
   85902:	e7fe      	b.n	85902 <do_writemore+0x1e>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
   85904:	7842      	ldrb	r2, [r0, #1]
   85906:	2a01      	cmp	r2, #1
   85908:	d000      	beq.n	8590c <do_writemore+0x28>
   8590a:	e7fe      	b.n	8590a <do_writemore+0x26>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
   8590c:	b901      	cbnz	r1, 85910 <do_writemore+0x2c>
   8590e:	e7fe      	b.n	8590e <do_writemore+0x2a>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
   85910:	6840      	ldr	r0, [r0, #4]
   85912:	b900      	cbnz	r0, 85916 <do_writemore+0x32>
   85914:	e7fe      	b.n	85914 <do_writemore+0x30>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
   85916:	6a27      	ldr	r7, [r4, #32]
   85918:	68ca      	ldr	r2, [r1, #12]
   8591a:	4297      	cmp	r7, r2
   8591c:	d300      	bcc.n	85920 <do_writemore+0x3c>
   8591e:	e7fe      	b.n	8591e <do_writemore+0x3a>
    conn->write_offset < conn->current_msg->msg.w.len);

  dataptr = (u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
   85920:	6889      	ldr	r1, [r1, #8]
   85922:	4439      	add	r1, r7
  diff = conn->current_msg->msg.w.len - conn->write_offset;
   85924:	1bd6      	subs	r6, r2, r7
  if (diff > 0xffffUL) { /* max_u16_t */
   85926:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
    len = 0xffff;
#if LWIP_TCPIP_CORE_LOCKING
    conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
    apiflags |= TCP_WRITE_FLAG_MORE;
   8592a:	bf26      	itte	cs
   8592c:	f043 0302 	orrcs.w	r3, r3, #2
    conn->write_offset < conn->current_msg->msg.w.len);

  dataptr = (u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  diff = conn->current_msg->msg.w.len - conn->write_offset;
  if (diff > 0xffffUL) { /* max_u16_t */
    len = 0xffff;
   85930:	f64f 76ff 	movwcs	r6, #65535	; 0xffff
#if LWIP_TCPIP_CORE_LOCKING
    conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
    apiflags |= TCP_WRITE_FLAG_MORE;
  } else {
    len = (u16_t)diff;
   85934:	b2b6      	uxthcc	r6, r6
  }
  available = tcp_sndbuf(conn->pcb.tcp);
   85936:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
  if (available < len) {
   8593a:	4576      	cmp	r6, lr
    /* don't try to write more than sendbuf */
    len = available;
#if LWIP_TCPIP_CORE_LOCKING
    conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
    apiflags |= TCP_WRITE_FLAG_MORE;
   8593c:	bf84      	itt	hi
   8593e:	f043 0302 	orrhi.w	r3, r3, #2
    len = (u16_t)diff;
  }
  available = tcp_sndbuf(conn->pcb.tcp);
  if (available < len) {
    /* don't try to write more than sendbuf */
    len = available;
   85942:	4676      	movhi	r6, lr
#if LWIP_TCPIP_CORE_LOCKING
    conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
    apiflags |= TCP_WRITE_FLAG_MORE;
  }
  if (dontblock && (len < conn->current_msg->msg.w.len)) {
   85944:	f005 08ff 	and.w	r8, r5, #255	; 0xff
   85948:	b125      	cbz	r5, 85954 <do_writemore+0x70>
   8594a:	42b2      	cmp	r2, r6
   8594c:	bf8c      	ite	hi
   8594e:	25ff      	movhi	r5, #255	; 0xff
   85950:	2500      	movls	r5, #0
    /* failed to send all data at once -> nonblocking write not possible */
    err = ERR_MEM;
  }
  if (err == ERR_OK) {
   85952:	b955      	cbnz	r5, 8596a <do_writemore+0x86>
    LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
   85954:	4437      	add	r7, r6
   85956:	42ba      	cmp	r2, r7
   85958:	d200      	bcs.n	8595c <do_writemore+0x78>
   8595a:	e7fe      	b.n	8595a <do_writemore+0x76>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
   8595c:	4632      	mov	r2, r6
   8595e:	4d2a      	ldr	r5, [pc, #168]	; (85a08 <do_writemore+0x124>)
   85960:	47a8      	blx	r5
   85962:	4605      	mov	r5, r0
  }
  if (dontblock && (err == ERR_MEM)) {
   85964:	f1b8 0f00 	cmp.w	r8, #0
   85968:	d010      	beq.n	8598c <do_writemore+0xa8>
   8596a:	b26b      	sxtb	r3, r5
   8596c:	f1b3 3fff 	cmp.w	r3, #4294967295
   85970:	d10c      	bne.n	8598c <do_writemore+0xa8>
    /* nonblocking write failed */
    write_finished = 1;
    err = ERR_WOULDBLOCK;
    /* let poll_tcp check writable space to mark the pcb
       writable again */
    conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
   85972:	7f23      	ldrb	r3, [r4, #28]
   85974:	f043 0310 	orr.w	r3, r3, #16
   85978:	7723      	strb	r3, [r4, #28]
    /* let select mark this pcb as non-writable. */
    API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
   8597a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8597c:	2b00      	cmp	r3, #0
   8597e:	d03a      	beq.n	859f6 <do_writemore+0x112>
   85980:	4620      	mov	r0, r4
   85982:	2103      	movs	r1, #3
   85984:	4632      	mov	r2, r6
   85986:	4798      	blx	r3
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  }
  if (dontblock && (err == ERR_MEM)) {
    /* nonblocking write failed */
    write_finished = 1;
    err = ERR_WOULDBLOCK;
   85988:	25f9      	movs	r5, #249	; 0xf9
   8598a:	e02a      	b.n	859e2 <do_writemore+0xfe>
    conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
    /* let select mark this pcb as non-writable. */
    API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  } else {
    /* if OK or memory error, check available space */
    if (((err == ERR_OK) || (err == ERR_MEM)) &&
   8598c:	1c6b      	adds	r3, r5, #1
   8598e:	b2db      	uxtb	r3, r3
   85990:	2b01      	cmp	r3, #1
   85992:	d810      	bhi.n	859b6 <do_writemore+0xd2>
        ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
   85994:	6863      	ldr	r3, [r4, #4]
    conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
    /* let select mark this pcb as non-writable. */
    API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  } else {
    /* if OK or memory error, check available space */
    if (((err == ERR_OK) || (err == ERR_MEM)) &&
   85996:	f8b3 106e 	ldrh.w	r1, [r3, #110]	; 0x6e
   8599a:	f240 4233 	movw	r2, #1075	; 0x433
   8599e:	4291      	cmp	r1, r2
   859a0:	d903      	bls.n	859aa <do_writemore+0xc6>
        ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
   859a2:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
   859a6:	2b03      	cmp	r3, #3
   859a8:	d905      	bls.n	859b6 <do_writemore+0xd2>
         (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT))) {
      /* The queued byte- or pbuf-count exceeds the configured low-water limit,
         let select mark this pcb as non-writable. */
      API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
   859aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   859ac:	b11b      	cbz	r3, 859b6 <do_writemore+0xd2>
   859ae:	4620      	mov	r0, r4
   859b0:	2103      	movs	r1, #3
   859b2:	4632      	mov	r2, r6
   859b4:	4798      	blx	r3
    }

    if (err == ERR_OK) {
   859b6:	b965      	cbnz	r5, 859d2 <do_writemore+0xee>
      conn->write_offset += len;
   859b8:	6a23      	ldr	r3, [r4, #32]
   859ba:	441e      	add	r6, r3
   859bc:	6226      	str	r6, [r4, #32]
      if (conn->write_offset == conn->current_msg->msg.w.len) {
   859be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   859c0:	68db      	ldr	r3, [r3, #12]
   859c2:	429e      	cmp	r6, r3
   859c4:	d119      	bne.n	859fa <do_writemore+0x116>
        /* everything was written */
        write_finished = 1;
        conn->write_offset = 0;
   859c6:	2300      	movs	r3, #0
   859c8:	6223      	str	r3, [r4, #32]
      }
      tcp_output(conn->pcb.tcp);
   859ca:	6860      	ldr	r0, [r4, #4]
   859cc:	4b0f      	ldr	r3, [pc, #60]	; (85a0c <do_writemore+0x128>)
   859ce:	4798      	blx	r3
   859d0:	e007      	b.n	859e2 <do_writemore+0xfe>
    } else if (err == ERR_MEM) {
   859d2:	b26b      	sxtb	r3, r5
   859d4:	f1b3 3fff 	cmp.w	r3, #4294967295
   859d8:	d103      	bne.n	859e2 <do_writemore+0xfe>
      /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
         we do NOT return to the application thread, since ERR_MEM is
         only a temporary error! */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      tcp_output(conn->pcb.tcp);
   859da:	6860      	ldr	r0, [r4, #4]
   859dc:	4b0b      	ldr	r3, [pc, #44]	; (85a0c <do_writemore+0x128>)
   859de:	4798      	blx	r3
   859e0:	e00e      	b.n	85a00 <do_writemore+0x11c>
  }

  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    conn->current_msg->err = err;
   859e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   859e4:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
   859e6:	2300      	movs	r3, #0
   859e8:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
   859ea:	7063      	strb	r3, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if ((conn->flags & NETCONN_FLAG_WRITE_DELAYED) != 0)
#endif
    {
      sys_sem_signal(&conn->op_completed);
   859ec:	f104 000c 	add.w	r0, r4, #12
   859f0:	4b07      	ldr	r3, [pc, #28]	; (85a10 <do_writemore+0x12c>)
   859f2:	4798      	blx	r3
   859f4:	e004      	b.n	85a00 <do_writemore+0x11c>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  }
  if (dontblock && (err == ERR_MEM)) {
    /* nonblocking write failed */
    write_finished = 1;
    err = ERR_WOULDBLOCK;
   859f6:	25f9      	movs	r5, #249	; 0xf9
   859f8:	e7f3      	b.n	859e2 <do_writemore+0xfe>
      if (conn->write_offset == conn->current_msg->msg.w.len) {
        /* everything was written */
        write_finished = 1;
        conn->write_offset = 0;
      }
      tcp_output(conn->pcb.tcp);
   859fa:	6860      	ldr	r0, [r4, #4]
   859fc:	4b03      	ldr	r3, [pc, #12]	; (85a0c <do_writemore+0x128>)
   859fe:	4798      	blx	r3
#if LWIP_TCPIP_CORE_LOCKING
  else
    return ERR_MEM;
#endif
  return ERR_OK;
}
   85a00:	2000      	movs	r0, #0
   85a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85a06:	bf00      	nop
   85a08:	0008aa85 	.word	0x0008aa85
   85a0c:	0008b091 	.word	0x0008b091
   85a10:	0008c4e9 	.word	0x0008c4e9

00085a14 <do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static void
do_close_internal(struct netconn *conn)
{
   85a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;

  LWIP_ASSERT("invalid conn", (conn != NULL));
   85a16:	4604      	mov	r4, r0
   85a18:	b900      	cbnz	r0, 85a1c <do_close_internal+0x8>
   85a1a:	e7fe      	b.n	85a1a <do_close_internal+0x6>
  LWIP_ASSERT("this is for tcp netconns only", (conn->type == NETCONN_TCP));
   85a1c:	7803      	ldrb	r3, [r0, #0]
   85a1e:	2b10      	cmp	r3, #16
   85a20:	d000      	beq.n	85a24 <do_close_internal+0x10>
   85a22:	e7fe      	b.n	85a22 <do_close_internal+0xe>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
   85a24:	7843      	ldrb	r3, [r0, #1]
   85a26:	2b04      	cmp	r3, #4
   85a28:	d000      	beq.n	85a2c <do_close_internal+0x18>
   85a2a:	e7fe      	b.n	85a2a <do_close_internal+0x16>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
   85a2c:	6840      	ldr	r0, [r0, #4]
   85a2e:	b900      	cbnz	r0, 85a32 <do_close_internal+0x1e>
   85a30:	e7fe      	b.n	85a30 <do_close_internal+0x1c>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
   85a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   85a34:	b903      	cbnz	r3, 85a38 <do_close_internal+0x24>
   85a36:	e7fe      	b.n	85a36 <do_close_internal+0x22>

  shut = conn->current_msg->msg.sd.shut;
   85a38:	7a1d      	ldrb	r5, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
   85a3a:	f005 0701 	and.w	r7, r5, #1
  shut_tx = shut & NETCONN_SHUT_WR;
   85a3e:	f005 0602 	and.w	r6, r5, #2
   85a42:	b2f6      	uxtb	r6, r6
  /* shutting down both ends is the same as closing */
  close = shut == NETCONN_SHUT_RDWR;
   85a44:	2d03      	cmp	r5, #3
   85a46:	bf14      	ite	ne
   85a48:	2500      	movne	r5, #0
   85a4a:	2501      	moveq	r5, #1

  /* Set back some callback pointers */
  if (close) {
   85a4c:	b115      	cbz	r5, 85a54 <do_close_internal+0x40>
    tcp_arg(conn->pcb.tcp, NULL);
   85a4e:	2100      	movs	r1, #0
   85a50:	4b30      	ldr	r3, [pc, #192]	; (85b14 <do_close_internal+0x100>)
   85a52:	4798      	blx	r3
  }
  if (conn->pcb.tcp->state == LISTEN) {
   85a54:	6860      	ldr	r0, [r4, #4]
   85a56:	7c03      	ldrb	r3, [r0, #16]
   85a58:	2b01      	cmp	r3, #1
   85a5a:	d103      	bne.n	85a64 <do_close_internal+0x50>
    tcp_accept(conn->pcb.tcp, NULL);
   85a5c:	2100      	movs	r1, #0
   85a5e:	4b2e      	ldr	r3, [pc, #184]	; (85b18 <do_close_internal+0x104>)
   85a60:	4798      	blx	r3
   85a62:	e016      	b.n	85a92 <do_close_internal+0x7e>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
   85a64:	b137      	cbz	r7, 85a74 <do_close_internal+0x60>
      tcp_recv(conn->pcb.tcp, NULL);
   85a66:	2100      	movs	r1, #0
   85a68:	4b2c      	ldr	r3, [pc, #176]	; (85b1c <do_close_internal+0x108>)
   85a6a:	4798      	blx	r3
      tcp_accept(conn->pcb.tcp, NULL);
   85a6c:	6860      	ldr	r0, [r4, #4]
   85a6e:	2100      	movs	r1, #0
   85a70:	4b29      	ldr	r3, [pc, #164]	; (85b18 <do_close_internal+0x104>)
   85a72:	4798      	blx	r3
    }
    if (shut_tx) {
   85a74:	b11e      	cbz	r6, 85a7e <do_close_internal+0x6a>
      tcp_sent(conn->pcb.tcp, NULL);
   85a76:	6860      	ldr	r0, [r4, #4]
   85a78:	2100      	movs	r1, #0
   85a7a:	4b29      	ldr	r3, [pc, #164]	; (85b20 <do_close_internal+0x10c>)
   85a7c:	4798      	blx	r3
    }
    if (close) {
   85a7e:	b145      	cbz	r5, 85a92 <do_close_internal+0x7e>
      tcp_poll(conn->pcb.tcp, NULL, 4);
   85a80:	6860      	ldr	r0, [r4, #4]
   85a82:	2100      	movs	r1, #0
   85a84:	2204      	movs	r2, #4
   85a86:	4b27      	ldr	r3, [pc, #156]	; (85b24 <do_close_internal+0x110>)
   85a88:	4798      	blx	r3
      tcp_err(conn->pcb.tcp, NULL);
   85a8a:	6860      	ldr	r0, [r4, #4]
   85a8c:	2100      	movs	r1, #0
   85a8e:	4b26      	ldr	r3, [pc, #152]	; (85b28 <do_close_internal+0x114>)
   85a90:	4798      	blx	r3
    }
  }
  /* Try to close the connection */
  if (shut == NETCONN_SHUT_RDWR) {
   85a92:	b11d      	cbz	r5, 85a9c <do_close_internal+0x88>
    err = tcp_close(conn->pcb.tcp);
   85a94:	6860      	ldr	r0, [r4, #4]
   85a96:	4b25      	ldr	r3, [pc, #148]	; (85b2c <do_close_internal+0x118>)
   85a98:	4798      	blx	r3
   85a9a:	e004      	b.n	85aa6 <do_close_internal+0x92>
  } else {
    err = tcp_shutdown(conn->pcb.tcp, shut & NETCONN_SHUT_RD, shut & NETCONN_SHUT_WR);
   85a9c:	6860      	ldr	r0, [r4, #4]
   85a9e:	4639      	mov	r1, r7
   85aa0:	4632      	mov	r2, r6
   85aa2:	4b23      	ldr	r3, [pc, #140]	; (85b30 <do_close_internal+0x11c>)
   85aa4:	4798      	blx	r3
  }
  if (err == ERR_OK) {
   85aa6:	b9f8      	cbnz	r0, 85ae8 <do_close_internal+0xd4>
    /* Closing succeeded */
    conn->current_msg->err = ERR_OK;
   85aa8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   85aaa:	2300      	movs	r3, #0
   85aac:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
   85aae:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
   85ab0:	7063      	strb	r3, [r4, #1]
    /* Set back some callback pointers as conn is going away */
    conn->pcb.tcp = NULL;
   85ab2:	6063      	str	r3, [r4, #4]
    /* Trigger select() in socket layer. Make sure everybody notices activity
       on the connection, error first! */
    if (close) {
   85ab4:	b12d      	cbz	r5, 85ac2 <do_close_internal+0xae>
      API_EVENT(conn, NETCONN_EVT_ERROR, 0);
   85ab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85ab8:	b11b      	cbz	r3, 85ac2 <do_close_internal+0xae>
   85aba:	4620      	mov	r0, r4
   85abc:	2104      	movs	r1, #4
   85abe:	2200      	movs	r2, #0
   85ac0:	4798      	blx	r3
    }
    if (shut_rx) {
   85ac2:	b12f      	cbz	r7, 85ad0 <do_close_internal+0xbc>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
   85ac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85ac6:	b11b      	cbz	r3, 85ad0 <do_close_internal+0xbc>
   85ac8:	4620      	mov	r0, r4
   85aca:	2100      	movs	r1, #0
   85acc:	460a      	mov	r2, r1
   85ace:	4798      	blx	r3
    }
    if (shut_tx) {
   85ad0:	b12e      	cbz	r6, 85ade <do_close_internal+0xca>
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
   85ad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85ad4:	b11b      	cbz	r3, 85ade <do_close_internal+0xca>
   85ad6:	4620      	mov	r0, r4
   85ad8:	2102      	movs	r1, #2
   85ada:	2200      	movs	r2, #0
   85adc:	4798      	blx	r3
    }
    /* wake up the application task */
    sys_sem_signal(&conn->op_completed);
   85ade:	f104 000c 	add.w	r0, r4, #12
   85ae2:	4b14      	ldr	r3, [pc, #80]	; (85b34 <do_close_internal+0x120>)
   85ae4:	4798      	blx	r3
   85ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else {
    /* Closing failed, restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (conn->pcb.tcp->state != LISTEN));
   85ae8:	6860      	ldr	r0, [r4, #4]
   85aea:	7c03      	ldrb	r3, [r0, #16]
   85aec:	2b01      	cmp	r3, #1
   85aee:	d100      	bne.n	85af2 <do_close_internal+0xde>
   85af0:	e7fe      	b.n	85af0 <do_close_internal+0xdc>
    tcp_sent(conn->pcb.tcp, sent_tcp);
   85af2:	4911      	ldr	r1, [pc, #68]	; (85b38 <do_close_internal+0x124>)
   85af4:	4b0a      	ldr	r3, [pc, #40]	; (85b20 <do_close_internal+0x10c>)
   85af6:	4798      	blx	r3
    tcp_poll(conn->pcb.tcp, poll_tcp, 4);
   85af8:	6860      	ldr	r0, [r4, #4]
   85afa:	4910      	ldr	r1, [pc, #64]	; (85b3c <do_close_internal+0x128>)
   85afc:	2204      	movs	r2, #4
   85afe:	4b09      	ldr	r3, [pc, #36]	; (85b24 <do_close_internal+0x110>)
   85b00:	4798      	blx	r3
    tcp_err(conn->pcb.tcp, err_tcp);
   85b02:	6860      	ldr	r0, [r4, #4]
   85b04:	490e      	ldr	r1, [pc, #56]	; (85b40 <do_close_internal+0x12c>)
   85b06:	4b08      	ldr	r3, [pc, #32]	; (85b28 <do_close_internal+0x114>)
   85b08:	4798      	blx	r3
    tcp_arg(conn->pcb.tcp, conn);
   85b0a:	6860      	ldr	r0, [r4, #4]
   85b0c:	4621      	mov	r1, r4
   85b0e:	4b01      	ldr	r3, [pc, #4]	; (85b14 <do_close_internal+0x100>)
   85b10:	4798      	blx	r3
   85b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85b14:	0008893d 	.word	0x0008893d
   85b18:	00088959 	.word	0x00088959
   85b1c:	00088941 	.word	0x00088941
   85b20:	00088949 	.word	0x00088949
   85b24:	0008895d 	.word	0x0008895d
   85b28:	00088951 	.word	0x00088951
   85b2c:	00088fd5 	.word	0x00088fd5
   85b30:	000890d1 	.word	0x000890d1
   85b34:	0008c4e9 	.word	0x0008c4e9
   85b38:	00085ba1 	.word	0x00085ba1
   85b3c:	00085b45 	.word	0x00085b45
   85b40:	00085831 	.word	0x00085831

00085b44 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
   85b44:	b510      	push	{r4, lr}
  struct netconn *conn = (struct netconn *)arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
   85b46:	4604      	mov	r4, r0
   85b48:	b900      	cbnz	r0, 85b4c <poll_tcp+0x8>
   85b4a:	e7fe      	b.n	85b4a <poll_tcp+0x6>

  if (conn->state == NETCONN_WRITE) {
   85b4c:	7843      	ldrb	r3, [r0, #1]
   85b4e:	2b01      	cmp	r3, #1
   85b50:	d102      	bne.n	85b58 <poll_tcp+0x14>
    do_writemore(conn);
   85b52:	4b11      	ldr	r3, [pc, #68]	; (85b98 <poll_tcp+0x54>)
   85b54:	4798      	blx	r3
   85b56:	e003      	b.n	85b60 <poll_tcp+0x1c>
  } else if (conn->state == NETCONN_CLOSE) {
   85b58:	2b04      	cmp	r3, #4
   85b5a:	d101      	bne.n	85b60 <poll_tcp+0x1c>
    do_close_internal(conn);
   85b5c:	4b0f      	ldr	r3, [pc, #60]	; (85b9c <poll_tcp+0x58>)
   85b5e:	4798      	blx	r3
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
   85b60:	7f22      	ldrb	r2, [r4, #28]
   85b62:	f012 0f10 	tst.w	r2, #16
   85b66:	d014      	beq.n	85b92 <poll_tcp+0x4e>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
   85b68:	6863      	ldr	r3, [r4, #4]
   85b6a:	b193      	cbz	r3, 85b92 <poll_tcp+0x4e>
   85b6c:	f8b3 006e 	ldrh.w	r0, [r3, #110]	; 0x6e
   85b70:	f240 4133 	movw	r1, #1075	; 0x433
   85b74:	4288      	cmp	r0, r1
   85b76:	d90c      	bls.n	85b92 <poll_tcp+0x4e>
   85b78:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
   85b7c:	2b03      	cmp	r3, #3
   85b7e:	d808      	bhi.n	85b92 <poll_tcp+0x4e>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
   85b80:	f022 0210 	bic.w	r2, r2, #16
   85b84:	7722      	strb	r2, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
   85b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85b88:	b11b      	cbz	r3, 85b92 <poll_tcp+0x4e>
   85b8a:	4620      	mov	r0, r4
   85b8c:	2102      	movs	r1, #2
   85b8e:	2200      	movs	r2, #0
   85b90:	4798      	blx	r3
    }
  }

  return ERR_OK;
}
   85b92:	2000      	movs	r0, #0
   85b94:	bd10      	pop	{r4, pc}
   85b96:	bf00      	nop
   85b98:	000858e5 	.word	0x000858e5
   85b9c:	00085a15 	.word	0x00085a15

00085ba0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
   85ba0:	b538      	push	{r3, r4, r5, lr}
   85ba2:	4615      	mov	r5, r2
  struct netconn *conn = (struct netconn *)arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
   85ba4:	4604      	mov	r4, r0
   85ba6:	b900      	cbnz	r0, 85baa <sent_tcp+0xa>
   85ba8:	e7fe      	b.n	85ba8 <sent_tcp+0x8>

  if (conn->state == NETCONN_WRITE) {
   85baa:	7843      	ldrb	r3, [r0, #1]
   85bac:	2b01      	cmp	r3, #1
   85bae:	d102      	bne.n	85bb6 <sent_tcp+0x16>
    do_writemore(conn);
   85bb0:	4b10      	ldr	r3, [pc, #64]	; (85bf4 <sent_tcp+0x54>)
   85bb2:	4798      	blx	r3
   85bb4:	e019      	b.n	85bea <sent_tcp+0x4a>
  } else if (conn->state == NETCONN_CLOSE) {
   85bb6:	2b04      	cmp	r3, #4
   85bb8:	d117      	bne.n	85bea <sent_tcp+0x4a>
    do_close_internal(conn);
   85bba:	4b0f      	ldr	r3, [pc, #60]	; (85bf8 <sent_tcp+0x58>)
   85bbc:	4798      	blx	r3
   85bbe:	e014      	b.n	85bea <sent_tcp+0x4a>
  }

  if (conn) {
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
   85bc0:	f8b3 106e 	ldrh.w	r1, [r3, #110]	; 0x6e
   85bc4:	f240 4233 	movw	r2, #1075	; 0x433
   85bc8:	4291      	cmp	r1, r2
   85bca:	d911      	bls.n	85bf0 <sent_tcp+0x50>
   85bcc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
   85bd0:	2b03      	cmp	r3, #3
   85bd2:	d80d      	bhi.n	85bf0 <sent_tcp+0x50>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
   85bd4:	7f23      	ldrb	r3, [r4, #28]
   85bd6:	f023 0310 	bic.w	r3, r3, #16
   85bda:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
   85bdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85bde:	b13b      	cbz	r3, 85bf0 <sent_tcp+0x50>
   85be0:	4620      	mov	r0, r4
   85be2:	2102      	movs	r1, #2
   85be4:	462a      	mov	r2, r5
   85be6:	4798      	blx	r3
   85be8:	e002      	b.n	85bf0 <sent_tcp+0x50>
  }

  if (conn) {
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
   85bea:	6863      	ldr	r3, [r4, #4]
   85bec:	2b00      	cmp	r3, #0
   85bee:	d1e7      	bne.n	85bc0 <sent_tcp+0x20>
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
    }
  }
  
  return ERR_OK;
}
   85bf0:	2000      	movs	r0, #0
   85bf2:	bd38      	pop	{r3, r4, r5, pc}
   85bf4:	000858e5 	.word	0x000858e5
   85bf8:	00085a15 	.word	0x00085a15

00085bfc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
   85bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85c00:	4604      	mov	r4, r0
   85c02:	4615      	mov	r5, r2
   85c04:	4698      	mov	r8, r3
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
   85c06:	b901      	cbnz	r1, 85c0a <recv_tcp+0xe>
   85c08:	e7fe      	b.n	85c08 <recv_tcp+0xc>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
   85c0a:	b900      	cbnz	r0, 85c0e <recv_tcp+0x12>
   85c0c:	e7fe      	b.n	85c0c <recv_tcp+0x10>
  conn = (struct netconn *)arg;
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
   85c0e:	6846      	ldr	r6, [r0, #4]
   85c10:	428e      	cmp	r6, r1
   85c12:	d000      	beq.n	85c16 <recv_tcp+0x1a>
   85c14:	e7fe      	b.n	85c14 <recv_tcp+0x18>

  if (conn == NULL) {
    return ERR_VAL;
  }
  if (!sys_mbox_valid(&conn->recvmbox)) {
   85c16:	f100 0710 	add.w	r7, r0, #16
   85c1a:	4638      	mov	r0, r7
   85c1c:	4b17      	ldr	r3, [pc, #92]	; (85c7c <recv_tcp+0x80>)
   85c1e:	4798      	blx	r3
   85c20:	b948      	cbnz	r0, 85c36 <recv_tcp+0x3a>
    /* recvmbox already deleted */
    if (p != NULL) {
   85c22:	b325      	cbz	r5, 85c6e <recv_tcp+0x72>
      tcp_recved(pcb, p->tot_len);
   85c24:	4630      	mov	r0, r6
   85c26:	8929      	ldrh	r1, [r5, #8]
   85c28:	4b15      	ldr	r3, [pc, #84]	; (85c80 <recv_tcp+0x84>)
   85c2a:	4798      	blx	r3
      pbuf_free(p);
   85c2c:	4628      	mov	r0, r5
   85c2e:	4b15      	ldr	r3, [pc, #84]	; (85c84 <recv_tcp+0x88>)
   85c30:	4798      	blx	r3
    }
    return ERR_OK;
   85c32:	2500      	movs	r5, #0
   85c34:	e01e      	b.n	85c74 <recv_tcp+0x78>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  NETCONN_SET_SAFE_ERR(conn, err);
   85c36:	4b14      	ldr	r3, [pc, #80]	; (85c88 <recv_tcp+0x8c>)
   85c38:	4798      	blx	r3
   85c3a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   85c3e:	f113 0f09 	cmn.w	r3, #9
   85c42:	bfa8      	it	ge
   85c44:	f884 8008 	strbge.w	r8, [r4, #8]
   85c48:	4b10      	ldr	r3, [pc, #64]	; (85c8c <recv_tcp+0x90>)
   85c4a:	4798      	blx	r3

  if (p != NULL) {
   85c4c:	b10d      	cbz	r5, 85c52 <recv_tcp+0x56>
    len = p->tot_len;
   85c4e:	892e      	ldrh	r6, [r5, #8]
   85c50:	e000      	b.n	85c54 <recv_tcp+0x58>
  } else {
    len = 0;
   85c52:	2600      	movs	r6, #0
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
   85c54:	4638      	mov	r0, r7
   85c56:	4629      	mov	r1, r5
   85c58:	4b0d      	ldr	r3, [pc, #52]	; (85c90 <recv_tcp+0x94>)
   85c5a:	4798      	blx	r3
   85c5c:	4605      	mov	r5, r0
   85c5e:	b940      	cbnz	r0, 85c72 <recv_tcp+0x76>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
   85c60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85c62:	b13b      	cbz	r3, 85c74 <recv_tcp+0x78>
   85c64:	4620      	mov	r0, r4
   85c66:	2100      	movs	r1, #0
   85c68:	4632      	mov	r2, r6
   85c6a:	4798      	blx	r3
   85c6c:	e002      	b.n	85c74 <recv_tcp+0x78>
    /* recvmbox already deleted */
    if (p != NULL) {
      tcp_recved(pcb, p->tot_len);
      pbuf_free(p);
    }
    return ERR_OK;
   85c6e:	2500      	movs	r5, #0
   85c70:	e000      	b.n	85c74 <recv_tcp+0x78>
    len = 0;
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
   85c72:	25ff      	movs	r5, #255	; 0xff
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }

  return ERR_OK;
}
   85c74:	b268      	sxtb	r0, r5
   85c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c7a:	bf00      	nop
   85c7c:	0008c6e1 	.word	0x0008c6e1
   85c80:	00088881 	.word	0x00088881
   85c84:	00088045 	.word	0x00088045
   85c88:	0008c74d 	.word	0x0008c74d
   85c8c:	0008c75d 	.word	0x0008c75d
   85c90:	0008c60d 	.word	0x0008c60d

00085c94 <do_newconn>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
do_newconn(struct api_msg_msg *msg)
{
   85c94:	b538      	push	{r3, r4, r5, lr}
   85c96:	4604      	mov	r4, r0
  msg->err = ERR_OK;
   85c98:	2300      	movs	r3, #0
   85c9a:	7103      	strb	r3, [r0, #4]
  if(msg->conn->pcb.tcp == NULL) {
   85c9c:	6805      	ldr	r5, [r0, #0]
   85c9e:	686b      	ldr	r3, [r5, #4]
   85ca0:	2b00      	cmp	r3, #0
   85ca2:	d139      	bne.n	85d18 <do_newconn+0x84>
pcb_new(struct api_msg_msg *msg)
{
  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
   85ca4:	782b      	ldrb	r3, [r5, #0]
   85ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   85caa:	2b20      	cmp	r3, #32
   85cac:	d012      	beq.n	85cd4 <do_newconn+0x40>
   85cae:	2b40      	cmp	r3, #64	; 0x40
   85cb0:	d002      	beq.n	85cb8 <do_newconn+0x24>
   85cb2:	2b10      	cmp	r3, #16
   85cb4:	d12e      	bne.n	85d14 <do_newconn+0x80>
   85cb6:	e021      	b.n	85cfc <do_newconn+0x68>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new(msg->msg.n.proto);
   85cb8:	7a00      	ldrb	r0, [r0, #8]
   85cba:	4b1a      	ldr	r3, [pc, #104]	; (85d24 <do_newconn+0x90>)
   85cbc:	4798      	blx	r3
   85cbe:	6068      	str	r0, [r5, #4]
    if(msg->conn->pcb.raw == NULL) {
   85cc0:	6822      	ldr	r2, [r4, #0]
   85cc2:	6850      	ldr	r0, [r2, #4]
   85cc4:	b910      	cbnz	r0, 85ccc <do_newconn+0x38>
      msg->err = ERR_MEM;
   85cc6:	23ff      	movs	r3, #255	; 0xff
   85cc8:	7123      	strb	r3, [r4, #4]
   85cca:	e025      	b.n	85d18 <do_newconn+0x84>
      break;
    }
    raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
   85ccc:	4916      	ldr	r1, [pc, #88]	; (85d28 <do_newconn+0x94>)
   85cce:	4b17      	ldr	r3, [pc, #92]	; (85d2c <do_newconn+0x98>)
   85cd0:	4798      	blx	r3
   85cd2:	e021      	b.n	85d18 <do_newconn+0x84>
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new();
   85cd4:	4b16      	ldr	r3, [pc, #88]	; (85d30 <do_newconn+0x9c>)
   85cd6:	4798      	blx	r3
   85cd8:	6068      	str	r0, [r5, #4]
    if(msg->conn->pcb.udp == NULL) {
   85cda:	6822      	ldr	r2, [r4, #0]
   85cdc:	6853      	ldr	r3, [r2, #4]
   85cde:	b913      	cbnz	r3, 85ce6 <do_newconn+0x52>
      msg->err = ERR_MEM;
   85ce0:	23ff      	movs	r3, #255	; 0xff
   85ce2:	7123      	strb	r3, [r4, #4]
   85ce4:	e018      	b.n	85d18 <do_newconn+0x84>
#if LWIP_UDPLITE
    if (msg->conn->type==NETCONN_UDPLITE) {
      udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
    }
#endif /* LWIP_UDPLITE */
    if (msg->conn->type==NETCONN_UDPNOCHKSUM) {
   85ce6:	7812      	ldrb	r2, [r2, #0]
   85ce8:	2a22      	cmp	r2, #34	; 0x22
      udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
   85cea:	bf04      	itt	eq
   85cec:	2201      	moveq	r2, #1
   85cee:	741a      	strbeq	r2, [r3, #16]
    }
    udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
   85cf0:	6822      	ldr	r2, [r4, #0]
   85cf2:	6850      	ldr	r0, [r2, #4]
   85cf4:	490f      	ldr	r1, [pc, #60]	; (85d34 <do_newconn+0xa0>)
   85cf6:	4b10      	ldr	r3, [pc, #64]	; (85d38 <do_newconn+0xa4>)
   85cf8:	4798      	blx	r3
   85cfa:	e00d      	b.n	85d18 <do_newconn+0x84>
    break;
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new();
   85cfc:	4b0f      	ldr	r3, [pc, #60]	; (85d3c <do_newconn+0xa8>)
   85cfe:	4798      	blx	r3
   85d00:	6068      	str	r0, [r5, #4]
    if(msg->conn->pcb.tcp == NULL) {
   85d02:	6820      	ldr	r0, [r4, #0]
   85d04:	6843      	ldr	r3, [r0, #4]
   85d06:	b913      	cbnz	r3, 85d0e <do_newconn+0x7a>
      msg->err = ERR_MEM;
   85d08:	23ff      	movs	r3, #255	; 0xff
   85d0a:	7123      	strb	r3, [r4, #4]
   85d0c:	e004      	b.n	85d18 <do_newconn+0x84>
      break;
    }
    setup_tcp(msg->conn);
   85d0e:	4b0c      	ldr	r3, [pc, #48]	; (85d40 <do_newconn+0xac>)
   85d10:	4798      	blx	r3
   85d12:	e001      	b.n	85d18 <do_newconn+0x84>
    break;
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
   85d14:	23fa      	movs	r3, #250	; 0xfa
   85d16:	7103      	strb	r3, [r0, #4]
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
   85d18:	6820      	ldr	r0, [r4, #0]
   85d1a:	300c      	adds	r0, #12
   85d1c:	4b09      	ldr	r3, [pc, #36]	; (85d44 <do_newconn+0xb0>)
   85d1e:	4798      	blx	r3
   85d20:	bd38      	pop	{r3, r4, r5, pc}
   85d22:	bf00      	nop
   85d24:	00088675 	.word	0x00088675
   85d28:	00085731 	.word	0x00085731
   85d2c:	00088631 	.word	0x00088631
   85d30:	0008b99d 	.word	0x0008b99d
   85d34:	00085699 	.word	0x00085699
   85d38:	0008b959 	.word	0x0008b959
   85d3c:	0008931d 	.word	0x0008931d
   85d40:	000857dd 	.word	0x000857dd
   85d44:	0008c4e9 	.word	0x0008c4e9

00085d48 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
   85d48:	b570      	push	{r4, r5, r6, lr}
   85d4a:	4605      	mov	r5, r0
   85d4c:	460e      	mov	r6, r1
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
   85d4e:	2008      	movs	r0, #8
   85d50:	4b1a      	ldr	r3, [pc, #104]	; (85dbc <netconn_alloc+0x74>)
   85d52:	4798      	blx	r3
  if (conn == NULL) {
   85d54:	4604      	mov	r4, r0
   85d56:	2800      	cmp	r0, #0
   85d58:	d02d      	beq.n	85db6 <netconn_alloc+0x6e>
    return NULL;
  }

  conn->last_err = ERR_OK;
   85d5a:	2100      	movs	r1, #0
   85d5c:	7201      	strb	r1, [r0, #8]
  conn->type = t;
   85d5e:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
   85d60:	6041      	str	r1, [r0, #4]
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    break;
  }
#endif

  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
   85d62:	f100 050c 	add.w	r5, r0, #12
   85d66:	4628      	mov	r0, r5
   85d68:	4b15      	ldr	r3, [pc, #84]	; (85dc0 <netconn_alloc+0x78>)
   85d6a:	4798      	blx	r3
   85d6c:	b128      	cbz	r0, 85d7a <netconn_alloc+0x32>
    memp_free(MEMP_NETCONN, conn);
   85d6e:	2008      	movs	r0, #8
   85d70:	4621      	mov	r1, r4
   85d72:	4b14      	ldr	r3, [pc, #80]	; (85dc4 <netconn_alloc+0x7c>)
   85d74:	4798      	blx	r3
    return NULL;
   85d76:	2000      	movs	r0, #0
   85d78:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
   85d7a:	f104 0010 	add.w	r0, r4, #16
   85d7e:	2106      	movs	r1, #6
   85d80:	4b11      	ldr	r3, [pc, #68]	; (85dc8 <netconn_alloc+0x80>)
   85d82:	4798      	blx	r3
   85d84:	b140      	cbz	r0, 85d98 <netconn_alloc+0x50>
    sys_sem_free(&conn->op_completed);
   85d86:	4628      	mov	r0, r5
   85d88:	4b10      	ldr	r3, [pc, #64]	; (85dcc <netconn_alloc+0x84>)
   85d8a:	4798      	blx	r3
    memp_free(MEMP_NETCONN, conn);
   85d8c:	2008      	movs	r0, #8
   85d8e:	4621      	mov	r1, r4
   85d90:	4b0c      	ldr	r3, [pc, #48]	; (85dc4 <netconn_alloc+0x7c>)
   85d92:	4798      	blx	r3
    return NULL;
   85d94:	2000      	movs	r0, #0
   85d96:	bd70      	pop	{r4, r5, r6, pc}
  }

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
   85d98:	f104 0014 	add.w	r0, r4, #20
   85d9c:	4b0c      	ldr	r3, [pc, #48]	; (85dd0 <netconn_alloc+0x88>)
   85d9e:	4798      	blx	r3
#endif
  conn->state        = NETCONN_NONE;
   85da0:	2300      	movs	r3, #0
   85da2:	7063      	strb	r3, [r4, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
   85da4:	f04f 32ff 	mov.w	r2, #4294967295
   85da8:	61a2      	str	r2, [r4, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
   85daa:	62a6      	str	r6, [r4, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
   85dac:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
   85dae:	6223      	str	r3, [r4, #32]
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
  conn->flags = 0;
   85db0:	7723      	strb	r3, [r4, #28]
  return conn;
   85db2:	4620      	mov	r0, r4
   85db4:	bd70      	pop	{r4, r5, r6, pc}
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  if (conn == NULL) {
    return NULL;
   85db6:	2000      	movs	r0, #0
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
  conn->flags = 0;
  return conn;
}
   85db8:	bd70      	pop	{r4, r5, r6, pc}
   85dba:	bf00      	nop
   85dbc:	00087ce1 	.word	0x00087ce1
   85dc0:	0008c441 	.word	0x0008c441
   85dc4:	00087d61 	.word	0x00087d61
   85dc8:	0008c579 	.word	0x0008c579
   85dcc:	0008c4c5 	.word	0x0008c4c5
   85dd0:	0008c6e5 	.word	0x0008c6e5

00085dd4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
   85dd4:	b538      	push	{r3, r4, r5, lr}
   85dd6:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
   85dd8:	6843      	ldr	r3, [r0, #4]
   85dda:	b103      	cbz	r3, 85dde <netconn_free+0xa>
   85ddc:	e7fe      	b.n	85ddc <netconn_free+0x8>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
   85dde:	3010      	adds	r0, #16
   85de0:	4b0b      	ldr	r3, [pc, #44]	; (85e10 <netconn_free+0x3c>)
   85de2:	4798      	blx	r3
   85de4:	b100      	cbz	r0, 85de8 <netconn_free+0x14>
   85de6:	e7fe      	b.n	85de6 <netconn_free+0x12>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
   85de8:	f104 0014 	add.w	r0, r4, #20
   85dec:	4b08      	ldr	r3, [pc, #32]	; (85e10 <netconn_free+0x3c>)
   85dee:	4798      	blx	r3
   85df0:	b100      	cbz	r0, 85df4 <netconn_free+0x20>
   85df2:	e7fe      	b.n	85df2 <netconn_free+0x1e>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

  sys_sem_free(&conn->op_completed);
   85df4:	f104 050c 	add.w	r5, r4, #12
   85df8:	4628      	mov	r0, r5
   85dfa:	4b06      	ldr	r3, [pc, #24]	; (85e14 <netconn_free+0x40>)
   85dfc:	4798      	blx	r3
  sys_sem_set_invalid(&conn->op_completed);
   85dfe:	4628      	mov	r0, r5
   85e00:	4b05      	ldr	r3, [pc, #20]	; (85e18 <netconn_free+0x44>)
   85e02:	4798      	blx	r3

  memp_free(MEMP_NETCONN, conn);
   85e04:	2008      	movs	r0, #8
   85e06:	4621      	mov	r1, r4
   85e08:	4b04      	ldr	r3, [pc, #16]	; (85e1c <netconn_free+0x48>)
   85e0a:	4798      	blx	r3
   85e0c:	bd38      	pop	{r3, r4, r5, pc}
   85e0e:	bf00      	nop
   85e10:	0008c6e1 	.word	0x0008c6e1
   85e14:	0008c4c5 	.word	0x0008c4c5
   85e18:	0008c571 	.word	0x0008c571
   85e1c:	00087d61 	.word	0x00087d61

00085e20 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
   85e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85e24:	b083      	sub	sp, #12
   85e26:	4605      	mov	r5, r0
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
   85e28:	f100 0410 	add.w	r4, r0, #16
   85e2c:	4620      	mov	r0, r4
   85e2e:	4b28      	ldr	r3, [pc, #160]	; (85ed0 <netconn_drain+0xb0>)
   85e30:	4798      	blx	r3
   85e32:	b300      	cbz	r0, 85e76 <netconn_drain+0x56>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
   85e34:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 85ee8 <netconn_drain+0xc8>
          pbuf_free(p);
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
   85e38:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 85eec <netconn_drain+0xcc>
          p = (struct pbuf*)mem;
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
            tcp_recved(conn->pcb.tcp, p->tot_len);
          }
          pbuf_free(p);
   85e3c:	4f25      	ldr	r7, [pc, #148]	; (85ed4 <netconn_drain+0xb4>)
   85e3e:	e00e      	b.n	85e5e <netconn_drain+0x3e>

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
#if LWIP_TCP
      if (conn->type == NETCONN_TCP) {
   85e40:	782b      	ldrb	r3, [r5, #0]
   85e42:	2b10      	cmp	r3, #16
   85e44:	d109      	bne.n	85e5a <netconn_drain+0x3a>
        if(mem != NULL) {
   85e46:	9e01      	ldr	r6, [sp, #4]
   85e48:	b14e      	cbz	r6, 85e5e <netconn_drain+0x3e>
          p = (struct pbuf*)mem;
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
   85e4a:	6868      	ldr	r0, [r5, #4]
   85e4c:	b110      	cbz	r0, 85e54 <netconn_drain+0x34>
            tcp_recved(conn->pcb.tcp, p->tot_len);
   85e4e:	8931      	ldrh	r1, [r6, #8]
   85e50:	4b21      	ldr	r3, [pc, #132]	; (85ed8 <netconn_drain+0xb8>)
   85e52:	4798      	blx	r3
          }
          pbuf_free(p);
   85e54:	4630      	mov	r0, r6
   85e56:	47b8      	blx	r7
   85e58:	e001      	b.n	85e5e <netconn_drain+0x3e>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
   85e5a:	9801      	ldr	r0, [sp, #4]
   85e5c:	47c0      	blx	r8

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
   85e5e:	4620      	mov	r0, r4
   85e60:	a901      	add	r1, sp, #4
   85e62:	47c8      	blx	r9
   85e64:	f1b0 3fff 	cmp.w	r0, #4294967295
   85e68:	d1ea      	bne.n	85e40 <netconn_drain+0x20>
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
      }
    }
    sys_mbox_free(&conn->recvmbox);
   85e6a:	4620      	mov	r0, r4
   85e6c:	4b1b      	ldr	r3, [pc, #108]	; (85edc <netconn_drain+0xbc>)
   85e6e:	4798      	blx	r3
    sys_mbox_set_invalid(&conn->recvmbox);
   85e70:	4620      	mov	r0, r4
   85e72:	4b1b      	ldr	r3, [pc, #108]	; (85ee0 <netconn_drain+0xc0>)
   85e74:	4798      	blx	r3
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
   85e76:	f105 0614 	add.w	r6, r5, #20
   85e7a:	4630      	mov	r0, r6
   85e7c:	4b14      	ldr	r3, [pc, #80]	; (85ed0 <netconn_drain+0xb0>)
   85e7e:	4798      	blx	r3
   85e80:	b310      	cbz	r0, 85ec8 <netconn_drain+0xa8>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
   85e82:	f8df 8064 	ldr.w	r8, [pc, #100]	; 85ee8 <netconn_drain+0xc8>
        tcp_accepted(conn->pcb.tcp);
      }
      /* drain recvmbox */
      netconn_drain(newconn);
      if (newconn->pcb.tcp != NULL) {
        tcp_abort(newconn->pcb.tcp);
   85e86:	f8df 9068 	ldr.w	r9, [pc, #104]	; 85ef0 <netconn_drain+0xd0>
        newconn->pcb.tcp = NULL;
      }
      netconn_free(newconn);
   85e8a:	4f16      	ldr	r7, [pc, #88]	; (85ee4 <netconn_drain+0xc4>)
   85e8c:	e010      	b.n	85eb0 <netconn_drain+0x90>

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
      struct netconn *newconn = (struct netconn *)mem;
   85e8e:	9c01      	ldr	r4, [sp, #4]
      /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
      /* pcb might be set to NULL already by err_tcp() */
      if (conn->pcb.tcp != NULL) {
   85e90:	686b      	ldr	r3, [r5, #4]
   85e92:	b11b      	cbz	r3, 85e9c <netconn_drain+0x7c>
        tcp_accepted(conn->pcb.tcp);
   85e94:	7c1b      	ldrb	r3, [r3, #16]
   85e96:	2b01      	cmp	r3, #1
   85e98:	d000      	beq.n	85e9c <netconn_drain+0x7c>
   85e9a:	e7fe      	b.n	85e9a <netconn_drain+0x7a>
      }
      /* drain recvmbox */
      netconn_drain(newconn);
   85e9c:	4620      	mov	r0, r4
   85e9e:	f7ff ffbf 	bl	85e20 <netconn_drain>
      if (newconn->pcb.tcp != NULL) {
   85ea2:	6860      	ldr	r0, [r4, #4]
   85ea4:	b110      	cbz	r0, 85eac <netconn_drain+0x8c>
        tcp_abort(newconn->pcb.tcp);
   85ea6:	47c8      	blx	r9
        newconn->pcb.tcp = NULL;
   85ea8:	2300      	movs	r3, #0
   85eaa:	6063      	str	r3, [r4, #4]
      }
      netconn_free(newconn);
   85eac:	4620      	mov	r0, r4
   85eae:	47b8      	blx	r7
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
   85eb0:	4630      	mov	r0, r6
   85eb2:	a901      	add	r1, sp, #4
   85eb4:	47c0      	blx	r8
   85eb6:	f1b0 3fff 	cmp.w	r0, #4294967295
   85eba:	d1e8      	bne.n	85e8e <netconn_drain+0x6e>
        tcp_abort(newconn->pcb.tcp);
        newconn->pcb.tcp = NULL;
      }
      netconn_free(newconn);
    }
    sys_mbox_free(&conn->acceptmbox);
   85ebc:	4630      	mov	r0, r6
   85ebe:	4b07      	ldr	r3, [pc, #28]	; (85edc <netconn_drain+0xbc>)
   85ec0:	4798      	blx	r3
    sys_mbox_set_invalid(&conn->acceptmbox);
   85ec2:	4630      	mov	r0, r6
   85ec4:	4b06      	ldr	r3, [pc, #24]	; (85ee0 <netconn_drain+0xc0>)
   85ec6:	4798      	blx	r3
  }
#endif /* LWIP_TCP */
}
   85ec8:	b003      	add	sp, #12
   85eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85ece:	bf00      	nop
   85ed0:	0008c6e1 	.word	0x0008c6e1
   85ed4:	00088045 	.word	0x00088045
   85ed8:	00088881 	.word	0x00088881
   85edc:	0008c5c1 	.word	0x0008c5c1
   85ee0:	0008c6e5 	.word	0x0008c6e5
   85ee4:	00085dd5 	.word	0x00085dd5
   85ee8:	0008c6b1 	.word	0x0008c6b1
   85eec:	000862c1 	.word	0x000862c1
   85ef0:	000891dd 	.word	0x000891dd

00085ef4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
   85ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85ef8:	4604      	mov	r4, r0
   85efa:	4688      	mov	r8, r1
   85efc:	4617      	mov	r7, r2
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
   85efe:	f100 0614 	add.w	r6, r0, #20
   85f02:	4630      	mov	r0, r6
   85f04:	4b18      	ldr	r3, [pc, #96]	; (85f68 <accept_function+0x74>)
   85f06:	4798      	blx	r3
   85f08:	2800      	cmp	r0, #0
   85f0a:	d026      	beq.n	85f5a <accept_function+0x66>
    return ERR_VAL;
  }

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
   85f0c:	7820      	ldrb	r0, [r4, #0]
   85f0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   85f10:	4b16      	ldr	r3, [pc, #88]	; (85f6c <accept_function+0x78>)
   85f12:	4798      	blx	r3
  if (newconn == NULL) {
   85f14:	4605      	mov	r5, r0
   85f16:	b310      	cbz	r0, 85f5e <accept_function+0x6a>
    return ERR_MEM;
  }
  newconn->pcb.tcp = newpcb;
   85f18:	f8c0 8004 	str.w	r8, [r0, #4]
  setup_tcp(newconn);
   85f1c:	4b14      	ldr	r3, [pc, #80]	; (85f70 <accept_function+0x7c>)
   85f1e:	4798      	blx	r3
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
   85f20:	722f      	strb	r7, [r5, #8]

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
   85f22:	4630      	mov	r0, r6
   85f24:	4629      	mov	r1, r5
   85f26:	4b13      	ldr	r3, [pc, #76]	; (85f74 <accept_function+0x80>)
   85f28:	4798      	blx	r3
   85f2a:	4606      	mov	r6, r0
   85f2c:	b170      	cbz	r0, 85f4c <accept_function+0x58>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    newconn->pcb.tcp = NULL;
   85f2e:	2300      	movs	r3, #0
   85f30:	606b      	str	r3, [r5, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
   85f32:	f105 0410 	add.w	r4, r5, #16
   85f36:	4620      	mov	r0, r4
   85f38:	4b0f      	ldr	r3, [pc, #60]	; (85f78 <accept_function+0x84>)
   85f3a:	4798      	blx	r3
    sys_mbox_set_invalid(&newconn->recvmbox);
   85f3c:	4620      	mov	r0, r4
   85f3e:	4b0f      	ldr	r3, [pc, #60]	; (85f7c <accept_function+0x88>)
   85f40:	4798      	blx	r3
    netconn_free(newconn);
   85f42:	4628      	mov	r0, r5
   85f44:	4b0e      	ldr	r3, [pc, #56]	; (85f80 <accept_function+0x8c>)
   85f46:	4798      	blx	r3
    return ERR_MEM;
   85f48:	26ff      	movs	r6, #255	; 0xff
   85f4a:	e009      	b.n	85f60 <accept_function+0x6c>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
   85f4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85f4e:	b13b      	cbz	r3, 85f60 <accept_function+0x6c>
   85f50:	4620      	mov	r0, r4
   85f52:	2100      	movs	r1, #0
   85f54:	460a      	mov	r2, r1
   85f56:	4798      	blx	r3
   85f58:	e002      	b.n	85f60 <accept_function+0x6c>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
   85f5a:	26fa      	movs	r6, #250	; 0xfa
   85f5c:	e000      	b.n	85f60 <accept_function+0x6c>

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  if (newconn == NULL) {
    return ERR_MEM;
   85f5e:	26ff      	movs	r6, #255	; 0xff
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  }

  return ERR_OK;
}
   85f60:	b270      	sxtb	r0, r6
   85f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85f66:	bf00      	nop
   85f68:	0008c6e1 	.word	0x0008c6e1
   85f6c:	00085d49 	.word	0x00085d49
   85f70:	000857dd 	.word	0x000857dd
   85f74:	0008c60d 	.word	0x0008c60d
   85f78:	0008c5c1 	.word	0x0008c5c1
   85f7c:	0008c6e5 	.word	0x0008c6e5
   85f80:	00085dd5 	.word	0x00085dd5

00085f84 <do_delconn>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_delconn(struct api_msg_msg *msg)
{
   85f84:	b510      	push	{r4, lr}
   85f86:	4604      	mov	r4, r0
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
   85f88:	6800      	ldr	r0, [r0, #0]
   85f8a:	7843      	ldrb	r3, [r0, #1]
   85f8c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   85f90:	d00d      	beq.n	85fae <do_delconn+0x2a>
     (msg->conn->state != NETCONN_LISTEN) &&
   85f92:	2b03      	cmp	r3, #3
   85f94:	d006      	beq.n	85fa4 <do_delconn+0x20>
     (msg->conn->state != NETCONN_CONNECT)) {
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
   85f96:	7803      	ldrb	r3, [r0, #0]
   85f98:	2b10      	cmp	r3, #16
   85f9a:	d000      	beq.n	85f9e <do_delconn+0x1a>
   85f9c:	e7fe      	b.n	85f9c <do_delconn+0x18>
    msg->err = ERR_INPROGRESS;
   85f9e:	23fb      	movs	r3, #251	; 0xfb
   85fa0:	7123      	strb	r3, [r4, #4]
   85fa2:	e03e      	b.n	86022 <do_delconn+0x9e>
  } else {
    LWIP_ASSERT("blocking connect in progress",
   85fa4:	7f03      	ldrb	r3, [r0, #28]
   85fa6:	f013 0f04 	tst.w	r3, #4
   85faa:	d100      	bne.n	85fae <do_delconn+0x2a>
   85fac:	e7fe      	b.n	85fac <do_delconn+0x28>
      (msg->conn->state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
   85fae:	4b22      	ldr	r3, [pc, #136]	; (86038 <do_delconn+0xb4>)
   85fb0:	4798      	blx	r3

    if (msg->conn->pcb.tcp != NULL) {
   85fb2:	6823      	ldr	r3, [r4, #0]
   85fb4:	6858      	ldr	r0, [r3, #4]
   85fb6:	b340      	cbz	r0, 8600a <do_delconn+0x86>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
   85fb8:	781a      	ldrb	r2, [r3, #0]
   85fba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   85fbe:	2a20      	cmp	r2, #32
   85fc0:	d007      	beq.n	85fd2 <do_delconn+0x4e>
   85fc2:	2a40      	cmp	r2, #64	; 0x40
   85fc4:	d002      	beq.n	85fcc <do_delconn+0x48>
   85fc6:	2a10      	cmp	r2, #16
   85fc8:	d11c      	bne.n	86004 <do_delconn+0x80>
   85fca:	e009      	b.n	85fe0 <do_delconn+0x5c>
#if LWIP_RAW
      case NETCONN_RAW:
        raw_remove(msg->conn->pcb.raw);
   85fcc:	4b1b      	ldr	r3, [pc, #108]	; (8603c <do_delconn+0xb8>)
   85fce:	4798      	blx	r3
        break;
   85fd0:	e018      	b.n	86004 <do_delconn+0x80>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
   85fd2:	2300      	movs	r3, #0
   85fd4:	61c3      	str	r3, [r0, #28]
        udp_remove(msg->conn->pcb.udp);
   85fd6:	6823      	ldr	r3, [r4, #0]
   85fd8:	6858      	ldr	r0, [r3, #4]
   85fda:	4b19      	ldr	r3, [pc, #100]	; (86040 <do_delconn+0xbc>)
   85fdc:	4798      	blx	r3
        break;
   85fde:	e011      	b.n	86004 <do_delconn+0x80>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
   85fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   85fe2:	b102      	cbz	r2, 85fe6 <do_delconn+0x62>
   85fe4:	e003      	b.n	85fee <do_delconn+0x6a>
   85fe6:	6a1a      	ldr	r2, [r3, #32]
   85fe8:	2a00      	cmp	r2, #0
   85fea:	d1fb      	bne.n	85fe4 <do_delconn+0x60>
   85fec:	e000      	b.n	85ff0 <do_delconn+0x6c>
   85fee:	e7fe      	b.n	85fee <do_delconn+0x6a>
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
   85ff0:	2204      	movs	r2, #4
   85ff2:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
   85ff4:	2303      	movs	r3, #3
   85ff6:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
   85ff8:	6823      	ldr	r3, [r4, #0]
   85ffa:	625c      	str	r4, [r3, #36]	; 0x24
        do_close_internal(msg->conn);
   85ffc:	6820      	ldr	r0, [r4, #0]
   85ffe:	4b11      	ldr	r3, [pc, #68]	; (86044 <do_delconn+0xc0>)
   86000:	4798      	blx	r3
        /* API_EVENT is called inside do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
   86002:	bd10      	pop	{r4, pc}
#endif /* LWIP_TCP */
      default:
        break;
      }
      msg->conn->pcb.tcp = NULL;
   86004:	6823      	ldr	r3, [r4, #0]
   86006:	2200      	movs	r2, #0
   86008:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
   8600a:	6820      	ldr	r0, [r4, #0]
   8600c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   8600e:	b143      	cbz	r3, 86022 <do_delconn+0x9e>
   86010:	2100      	movs	r1, #0
   86012:	460a      	mov	r2, r1
   86014:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
   86016:	6820      	ldr	r0, [r4, #0]
   86018:	6a83      	ldr	r3, [r0, #40]	; 0x28
   8601a:	b113      	cbz	r3, 86022 <do_delconn+0x9e>
   8601c:	2102      	movs	r1, #2
   8601e:	2200      	movs	r2, #0
   86020:	4798      	blx	r3
  }
  if (sys_sem_valid(&msg->conn->op_completed)) {
   86022:	6820      	ldr	r0, [r4, #0]
   86024:	300c      	adds	r0, #12
   86026:	4b08      	ldr	r3, [pc, #32]	; (86048 <do_delconn+0xc4>)
   86028:	4798      	blx	r3
   8602a:	b118      	cbz	r0, 86034 <do_delconn+0xb0>
    sys_sem_signal(&msg->conn->op_completed);
   8602c:	6820      	ldr	r0, [r4, #0]
   8602e:	300c      	adds	r0, #12
   86030:	4b06      	ldr	r3, [pc, #24]	; (8604c <do_delconn+0xc8>)
   86032:	4798      	blx	r3
   86034:	bd10      	pop	{r4, pc}
   86036:	bf00      	nop
   86038:	00085e21 	.word	0x00085e21
   8603c:	00088639 	.word	0x00088639
   86040:	0008b961 	.word	0x0008b961
   86044:	00085a15 	.word	0x00085a15
   86048:	0008c56d 	.word	0x0008c56d
   8604c:	0008c4e9 	.word	0x0008c4e9

00086050 <do_bind>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
do_bind(struct api_msg_msg *msg)
{
   86050:	b510      	push	{r4, lr}
   86052:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
   86054:	6803      	ldr	r3, [r0, #0]
   86056:	7a1a      	ldrb	r2, [r3, #8]
   86058:	b251      	sxtb	r1, r2
   8605a:	f111 0f09 	cmn.w	r1, #9
   8605e:	da01      	bge.n	86064 <do_bind+0x14>
    msg->err = msg->conn->last_err;
   86060:	7102      	strb	r2, [r0, #4]
   86062:	e01d      	b.n	860a0 <do_bind+0x50>
  } else {
    msg->err = ERR_VAL;
   86064:	22fa      	movs	r2, #250	; 0xfa
   86066:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
   86068:	6858      	ldr	r0, [r3, #4]
   8606a:	b1c8      	cbz	r0, 860a0 <do_bind+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
   8606c:	781b      	ldrb	r3, [r3, #0]
   8606e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   86072:	2b20      	cmp	r3, #32
   86074:	d009      	beq.n	8608a <do_bind+0x3a>
   86076:	2b40      	cmp	r3, #64	; 0x40
   86078:	d002      	beq.n	86080 <do_bind+0x30>
   8607a:	2b10      	cmp	r3, #16
   8607c:	d110      	bne.n	860a0 <do_bind+0x50>
   8607e:	e00a      	b.n	86096 <do_bind+0x46>
#if LWIP_RAW
      case NETCONN_RAW:
        msg->err = raw_bind(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
   86080:	68a1      	ldr	r1, [r4, #8]
   86082:	4b0a      	ldr	r3, [pc, #40]	; (860ac <do_bind+0x5c>)
   86084:	4798      	blx	r3
   86086:	7120      	strb	r0, [r4, #4]
        break;
   86088:	e00a      	b.n	860a0 <do_bind+0x50>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
   8608a:	68a1      	ldr	r1, [r4, #8]
   8608c:	89a2      	ldrh	r2, [r4, #12]
   8608e:	4b08      	ldr	r3, [pc, #32]	; (860b0 <do_bind+0x60>)
   86090:	4798      	blx	r3
   86092:	7120      	strb	r0, [r4, #4]
        break;
   86094:	e004      	b.n	860a0 <do_bind+0x50>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
   86096:	68a1      	ldr	r1, [r4, #8]
   86098:	89a2      	ldrh	r2, [r4, #12]
   8609a:	4b06      	ldr	r3, [pc, #24]	; (860b4 <do_bind+0x64>)
   8609c:	4798      	blx	r3
   8609e:	7120      	strb	r0, [r4, #4]
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
   860a0:	6820      	ldr	r0, [r4, #0]
   860a2:	300c      	adds	r0, #12
   860a4:	4b04      	ldr	r3, [pc, #16]	; (860b8 <do_bind+0x68>)
   860a6:	4798      	blx	r3
   860a8:	bd10      	pop	{r4, pc}
   860aa:	bf00      	nop
   860ac:	00088621 	.word	0x00088621
   860b0:	0008b8a5 	.word	0x0008b8a5
   860b4:	000886fd 	.word	0x000886fd
   860b8:	0008c4e9 	.word	0x0008c4e9

000860bc <do_listen>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_listen(struct api_msg_msg *msg)
{
   860bc:	b538      	push	{r3, r4, r5, lr}
   860be:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
   860c0:	6803      	ldr	r3, [r0, #0]
   860c2:	7a1a      	ldrb	r2, [r3, #8]
   860c4:	b251      	sxtb	r1, r2
   860c6:	f111 0f09 	cmn.w	r1, #9
   860ca:	da01      	bge.n	860d0 <do_listen+0x14>
    msg->err = msg->conn->last_err;
   860cc:	7102      	strb	r2, [r0, #4]
   860ce:	e044      	b.n	8615a <do_listen+0x9e>
  } else {
    msg->err = ERR_CONN;
   860d0:	22f3      	movs	r2, #243	; 0xf3
   860d2:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
   860d4:	6858      	ldr	r0, [r3, #4]
   860d6:	2800      	cmp	r0, #0
   860d8:	d03f      	beq.n	8615a <do_listen+0x9e>
      if (msg->conn->type == NETCONN_TCP) {
   860da:	781a      	ldrb	r2, [r3, #0]
   860dc:	2a10      	cmp	r2, #16
   860de:	d13c      	bne.n	8615a <do_listen+0x9e>
        if (msg->conn->state == NETCONN_NONE) {
   860e0:	785b      	ldrb	r3, [r3, #1]
   860e2:	2b00      	cmp	r3, #0
   860e4:	d139      	bne.n	8615a <do_listen+0x9e>
#if TCP_LISTEN_BACKLOG
          struct tcp_pcb* lpcb = tcp_listen_with_backlog(msg->conn->pcb.tcp, msg->msg.lb.backlog);
#else  /* TCP_LISTEN_BACKLOG */
          struct tcp_pcb* lpcb = tcp_listen(msg->conn->pcb.tcp);
   860e6:	21ff      	movs	r1, #255	; 0xff
   860e8:	4b1e      	ldr	r3, [pc, #120]	; (86164 <do_listen+0xa8>)
   860ea:	4798      	blx	r3
#endif /* TCP_LISTEN_BACKLOG */
          if (lpcb == NULL) {
   860ec:	4605      	mov	r5, r0
   860ee:	b910      	cbnz	r0, 860f6 <do_listen+0x3a>
            /* in this case, the old pcb is still allocated */
            msg->err = ERR_MEM;
   860f0:	23ff      	movs	r3, #255	; 0xff
   860f2:	7123      	strb	r3, [r4, #4]
   860f4:	e031      	b.n	8615a <do_listen+0x9e>
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
   860f6:	6820      	ldr	r0, [r4, #0]
   860f8:	3010      	adds	r0, #16
   860fa:	4b1b      	ldr	r3, [pc, #108]	; (86168 <do_listen+0xac>)
   860fc:	4798      	blx	r3
   860fe:	b138      	cbz	r0, 86110 <do_listen+0x54>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
   86100:	6820      	ldr	r0, [r4, #0]
   86102:	3010      	adds	r0, #16
   86104:	4b19      	ldr	r3, [pc, #100]	; (8616c <do_listen+0xb0>)
   86106:	4798      	blx	r3
              sys_mbox_set_invalid(&msg->conn->recvmbox);
   86108:	6820      	ldr	r0, [r4, #0]
   8610a:	3010      	adds	r0, #16
   8610c:	4b18      	ldr	r3, [pc, #96]	; (86170 <do_listen+0xb4>)
   8610e:	4798      	blx	r3
            }
            msg->err = ERR_OK;
   86110:	2300      	movs	r3, #0
   86112:	7123      	strb	r3, [r4, #4]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
   86114:	6820      	ldr	r0, [r4, #0]
   86116:	3014      	adds	r0, #20
   86118:	4b13      	ldr	r3, [pc, #76]	; (86168 <do_listen+0xac>)
   8611a:	4798      	blx	r3
   8611c:	b928      	cbnz	r0, 8612a <do_listen+0x6e>
              msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
   8611e:	6820      	ldr	r0, [r4, #0]
   86120:	3014      	adds	r0, #20
   86122:	2106      	movs	r1, #6
   86124:	4b13      	ldr	r3, [pc, #76]	; (86174 <do_listen+0xb8>)
   86126:	4798      	blx	r3
   86128:	7120      	strb	r0, [r4, #4]
            }
            if (msg->err == ERR_OK) {
   8612a:	f994 3004 	ldrsb.w	r3, [r4, #4]
   8612e:	b973      	cbnz	r3, 8614e <do_listen+0x92>
              msg->conn->state = NETCONN_LISTEN;
   86130:	6823      	ldr	r3, [r4, #0]
   86132:	2202      	movs	r2, #2
   86134:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
   86136:	6823      	ldr	r3, [r4, #0]
   86138:	605d      	str	r5, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
   8613a:	6821      	ldr	r1, [r4, #0]
   8613c:	6848      	ldr	r0, [r1, #4]
   8613e:	4b0e      	ldr	r3, [pc, #56]	; (86178 <do_listen+0xbc>)
   86140:	4798      	blx	r3
              tcp_accept(msg->conn->pcb.tcp, accept_function);
   86142:	6823      	ldr	r3, [r4, #0]
   86144:	6858      	ldr	r0, [r3, #4]
   86146:	490d      	ldr	r1, [pc, #52]	; (8617c <do_listen+0xc0>)
   86148:	4b0d      	ldr	r3, [pc, #52]	; (86180 <do_listen+0xc4>)
   8614a:	4798      	blx	r3
   8614c:	e005      	b.n	8615a <do_listen+0x9e>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
   8614e:	4628      	mov	r0, r5
   86150:	4b0c      	ldr	r3, [pc, #48]	; (86184 <do_listen+0xc8>)
   86152:	4798      	blx	r3
              msg->conn->pcb.tcp = NULL;
   86154:	6823      	ldr	r3, [r4, #0]
   86156:	2200      	movs	r2, #0
   86158:	605a      	str	r2, [r3, #4]
          }
        }
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
   8615a:	6820      	ldr	r0, [r4, #0]
   8615c:	300c      	adds	r0, #12
   8615e:	4b0a      	ldr	r3, [pc, #40]	; (86188 <do_listen+0xcc>)
   86160:	4798      	blx	r3
   86162:	bd38      	pop	{r3, r4, r5, pc}
   86164:	00088781 	.word	0x00088781
   86168:	0008c6e1 	.word	0x0008c6e1
   8616c:	0008c5c1 	.word	0x0008c5c1
   86170:	0008c6e5 	.word	0x0008c6e5
   86174:	0008c579 	.word	0x0008c579
   86178:	0008893d 	.word	0x0008893d
   8617c:	00085ef5 	.word	0x00085ef5
   86180:	00088959 	.word	0x00088959
   86184:	00088fd5 	.word	0x00088fd5
   86188:	0008c4e9 	.word	0x0008c4e9

0008618c <do_recv>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_recv(struct api_msg_msg *msg)
{
   8618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86190:	4606      	mov	r6, r0
  msg->err = ERR_OK;
   86192:	2300      	movs	r3, #0
   86194:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
   86196:	6803      	ldr	r3, [r0, #0]
   86198:	685a      	ldr	r2, [r3, #4]
   8619a:	b18a      	cbz	r2, 861c0 <do_recv+0x34>
    if (msg->conn->type == NETCONN_TCP) {
   8619c:	781b      	ldrb	r3, [r3, #0]
   8619e:	2b10      	cmp	r3, #16
   861a0:	d10e      	bne.n	861c0 <do_recv+0x34>
      if (msg->conn->pcb.tcp->state == LISTEN) {
        tcp_accepted(msg->conn->pcb.tcp);
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
   861a2:	6884      	ldr	r4, [r0, #8]
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
   861a4:	f64f 78ff 	movw	r8, #65535	; 0xffff
          tcp_recved(msg->conn->pcb.tcp, recved);
   861a8:	4f08      	ldr	r7, [pc, #32]	; (861cc <do_recv+0x40>)
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
   861aa:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   861ae:	bf34      	ite	cc
   861b0:	b2a5      	uxthcc	r5, r4
   861b2:	4645      	movcs	r5, r8
          tcp_recved(msg->conn->pcb.tcp, recved);
   861b4:	6833      	ldr	r3, [r6, #0]
   861b6:	6858      	ldr	r0, [r3, #4]
   861b8:	4629      	mov	r1, r5
   861ba:	47b8      	blx	r7
          remaining -= recved;
        }while(remaining != 0);
   861bc:	1b64      	subs	r4, r4, r5
   861be:	d1f4      	bne.n	861aa <do_recv+0x1e>
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
   861c0:	6830      	ldr	r0, [r6, #0]
   861c2:	300c      	adds	r0, #12
   861c4:	4b02      	ldr	r3, [pc, #8]	; (861d0 <do_recv+0x44>)
   861c6:	4798      	blx	r3
   861c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   861cc:	00088881 	.word	0x00088881
   861d0:	0008c4e9 	.word	0x0008c4e9

000861d4 <do_write>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_write(struct api_msg_msg *msg)
{
   861d4:	b508      	push	{r3, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
   861d6:	6803      	ldr	r3, [r0, #0]
   861d8:	7a1a      	ldrb	r2, [r3, #8]
   861da:	b251      	sxtb	r1, r2
   861dc:	f111 0f09 	cmn.w	r1, #9
   861e0:	da01      	bge.n	861e6 <do_write+0x12>
    msg->err = msg->conn->last_err;
   861e2:	7102      	strb	r2, [r0, #4]
   861e4:	e024      	b.n	86230 <do_write+0x5c>
  } else {
    if (msg->conn->type == NETCONN_TCP) {
   861e6:	781a      	ldrb	r2, [r3, #0]
   861e8:	2a10      	cmp	r2, #16
   861ea:	d11f      	bne.n	8622c <do_write+0x58>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
   861ec:	785a      	ldrb	r2, [r3, #1]
   861ee:	b112      	cbz	r2, 861f6 <do_write+0x22>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
   861f0:	22fb      	movs	r2, #251	; 0xfb
   861f2:	7102      	strb	r2, [r0, #4]
   861f4:	e01c      	b.n	86230 <do_write+0x5c>
      } else if (msg->conn->pcb.tcp != NULL) {
   861f6:	685a      	ldr	r2, [r3, #4]
   861f8:	b1aa      	cbz	r2, 86226 <do_write+0x52>
        msg->conn->state = NETCONN_WRITE;
   861fa:	2201      	movs	r2, #1
   861fc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
   861fe:	6803      	ldr	r3, [r0, #0]
   86200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   86202:	b102      	cbz	r2, 86206 <do_write+0x32>
   86204:	e003      	b.n	8620e <do_write+0x3a>
   86206:	6a1a      	ldr	r2, [r3, #32]
   86208:	2a00      	cmp	r2, #0
   8620a:	d1fb      	bne.n	86204 <do_write+0x30>
   8620c:	e000      	b.n	86210 <do_write+0x3c>
   8620e:	e7fe      	b.n	8620e <do_write+0x3a>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
   86210:	68c2      	ldr	r2, [r0, #12]
   86212:	b902      	cbnz	r2, 86216 <do_write+0x42>
   86214:	e7fe      	b.n	86214 <do_write+0x40>
        msg->conn->current_msg = msg;
   86216:	6258      	str	r0, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
   86218:	6803      	ldr	r3, [r0, #0]
   8621a:	2200      	movs	r2, #0
   8621c:	621a      	str	r2, [r3, #32]
          sys_arch_sem_wait(&msg->conn->op_completed, 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        do_writemore(msg->conn);
   8621e:	6800      	ldr	r0, [r0, #0]
   86220:	4b06      	ldr	r3, [pc, #24]	; (8623c <do_write+0x68>)
   86222:	4798      	blx	r3
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if do_writemore was called, don't ACK the APIMSG
           since do_writemore ACKs it! */
        return;
   86224:	bd08      	pop	{r3, pc}
      } else {
        msg->err = ERR_CONN;
   86226:	22f3      	movs	r2, #243	; 0xf3
   86228:	7102      	strb	r2, [r0, #4]
   8622a:	e001      	b.n	86230 <do_write+0x5c>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
   8622c:	22fa      	movs	r2, #250	; 0xfa
   8622e:	7102      	strb	r2, [r0, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
   86230:	f103 000c 	add.w	r0, r3, #12
   86234:	4b02      	ldr	r3, [pc, #8]	; (86240 <do_write+0x6c>)
   86236:	4798      	blx	r3
   86238:	bd08      	pop	{r3, pc}
   8623a:	bf00      	nop
   8623c:	000858e5 	.word	0x000858e5
   86240:	0008c4e9 	.word	0x0008c4e9

00086244 <do_close>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_close(struct api_msg_msg *msg)
{
   86244:	b510      	push	{r4, lr}
   86246:	4604      	mov	r4, r0
#if LWIP_TCP
  /* @todo: abort running write/connect? */
  if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)) {
   86248:	6800      	ldr	r0, [r0, #0]
   8624a:	7842      	ldrb	r2, [r0, #1]
   8624c:	f012 0ffd 	tst.w	r2, #253	; 0xfd
   86250:	d006      	beq.n	86260 <do_close+0x1c>
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
   86252:	7803      	ldrb	r3, [r0, #0]
   86254:	2b10      	cmp	r3, #16
   86256:	d000      	beq.n	8625a <do_close+0x16>
   86258:	e7fe      	b.n	86258 <do_close+0x14>
    msg->err = ERR_INPROGRESS;
   8625a:	23fb      	movs	r3, #251	; 0xfb
   8625c:	7123      	strb	r3, [r4, #4]
   8625e:	e024      	b.n	862aa <do_close+0x66>
  } else if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
   86260:	6843      	ldr	r3, [r0, #4]
   86262:	b303      	cbz	r3, 862a6 <do_close+0x62>
   86264:	7803      	ldrb	r3, [r0, #0]
   86266:	2b10      	cmp	r3, #16
   86268:	d11d      	bne.n	862a6 <do_close+0x62>
    if ((msg->msg.sd.shut != NETCONN_SHUT_RDWR) && (msg->conn->state == NETCONN_LISTEN)) {
   8626a:	7a23      	ldrb	r3, [r4, #8]
   8626c:	2b03      	cmp	r3, #3
   8626e:	d007      	beq.n	86280 <do_close+0x3c>
   86270:	2a02      	cmp	r2, #2
   86272:	d102      	bne.n	8627a <do_close+0x36>
      /* LISTEN doesn't support half shutdown */
      msg->err = ERR_CONN;
   86274:	23f3      	movs	r3, #243	; 0xf3
   86276:	7123      	strb	r3, [r4, #4]
  if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)) {
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
  } else if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
    if ((msg->msg.sd.shut != NETCONN_SHUT_RDWR) && (msg->conn->state == NETCONN_LISTEN)) {
   86278:	e017      	b.n	862aa <do_close+0x66>
      /* LISTEN doesn't support half shutdown */
      msg->err = ERR_CONN;
    } else {
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
   8627a:	f013 0f01 	tst.w	r3, #1
   8627e:	d001      	beq.n	86284 <do_close+0x40>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
   86280:	4b0c      	ldr	r3, [pc, #48]	; (862b4 <do_close+0x70>)
   86282:	4798      	blx	r3
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
   86284:	6823      	ldr	r3, [r4, #0]
   86286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   86288:	b102      	cbz	r2, 8628c <do_close+0x48>
   8628a:	e003      	b.n	86294 <do_close+0x50>
   8628c:	6a1a      	ldr	r2, [r3, #32]
   8628e:	2a00      	cmp	r2, #0
   86290:	d1fb      	bne.n	8628a <do_close+0x46>
   86292:	e000      	b.n	86296 <do_close+0x52>
   86294:	e7fe      	b.n	86294 <do_close+0x50>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
   86296:	2204      	movs	r2, #4
   86298:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
   8629a:	6823      	ldr	r3, [r4, #0]
   8629c:	625c      	str	r4, [r3, #36]	; 0x24
      do_close_internal(msg->conn);
   8629e:	6820      	ldr	r0, [r4, #0]
   862a0:	4b05      	ldr	r3, [pc, #20]	; (862b8 <do_close+0x74>)
   862a2:	4798      	blx	r3
      /* for tcp netconns, do_close_internal ACKs the message */
      return;
   862a4:	bd10      	pop	{r4, pc}
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_VAL;
   862a6:	23fa      	movs	r3, #250	; 0xfa
   862a8:	7123      	strb	r3, [r4, #4]
  }
  sys_sem_signal(&msg->conn->op_completed);
   862aa:	300c      	adds	r0, #12
   862ac:	4b03      	ldr	r3, [pc, #12]	; (862bc <do_close+0x78>)
   862ae:	4798      	blx	r3
   862b0:	bd10      	pop	{r4, pc}
   862b2:	bf00      	nop
   862b4:	00085e21 	.word	0x00085e21
   862b8:	00085a15 	.word	0x00085a15
   862bc:	0008c4e9 	.word	0x0008c4e9

000862c0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
   862c0:	b510      	push	{r4, lr}
  if (buf != NULL) {
   862c2:	4604      	mov	r4, r0
   862c4:	b150      	cbz	r0, 862dc <netbuf_delete+0x1c>
    if (buf->p != NULL) {
   862c6:	6800      	ldr	r0, [r0, #0]
   862c8:	b120      	cbz	r0, 862d4 <netbuf_delete+0x14>
      pbuf_free(buf->p);
   862ca:	4b05      	ldr	r3, [pc, #20]	; (862e0 <netbuf_delete+0x20>)
   862cc:	4798      	blx	r3
      buf->p = buf->ptr = NULL;
   862ce:	2300      	movs	r3, #0
   862d0:	6063      	str	r3, [r4, #4]
   862d2:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
   862d4:	2007      	movs	r0, #7
   862d6:	4621      	mov	r1, r4
   862d8:	4b02      	ldr	r3, [pc, #8]	; (862e4 <netbuf_delete+0x24>)
   862da:	4798      	blx	r3
   862dc:	bd10      	pop	{r4, pc}
   862de:	bf00      	nop
   862e0:	00088045 	.word	0x00088045
   862e4:	00087d61 	.word	0x00087d61

000862e8 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
   862e8:	b538      	push	{r3, r4, r5, lr}
   862ea:	460c      	mov	r4, r1
  LWIP_ERROR("netbuf_ref: invalid head", (head != NULL), return;);
   862ec:	4605      	mov	r5, r0
   862ee:	b900      	cbnz	r0, 862f2 <netbuf_chain+0xa>
   862f0:	e7fe      	b.n	862f0 <netbuf_chain+0x8>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
   862f2:	b901      	cbnz	r1, 862f6 <netbuf_chain+0xe>
   862f4:	e7fe      	b.n	862f4 <netbuf_chain+0xc>
  pbuf_cat(head->p, tail->p);
   862f6:	6800      	ldr	r0, [r0, #0]
   862f8:	6809      	ldr	r1, [r1, #0]
   862fa:	4b04      	ldr	r3, [pc, #16]	; (8630c <netbuf_chain+0x24>)
   862fc:	4798      	blx	r3
  head->ptr = head->p;
   862fe:	682b      	ldr	r3, [r5, #0]
   86300:	606b      	str	r3, [r5, #4]
  memp_free(MEMP_NETBUF, tail);
   86302:	2007      	movs	r0, #7
   86304:	4621      	mov	r1, r4
   86306:	4b02      	ldr	r3, [pc, #8]	; (86310 <netbuf_chain+0x28>)
   86308:	4798      	blx	r3
   8630a:	bd38      	pop	{r3, r4, r5, pc}
   8630c:	000882f5 	.word	0x000882f5
   86310:	00087d61 	.word	0x00087d61

00086314 <lwip_socket_init>:
 * Initialize this module. This function has to be called before any other
 * functions in this module!
 */
void
lwip_socket_init(void)
{
   86314:	4770      	bx	lr
   86316:	bf00      	nop

00086318 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
   86318:	b570      	push	{r4, r5, r6, lr}
   8631a:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
   8631c:	4b21      	ldr	r3, [pc, #132]	; (863a4 <tcpip_thread+0x8c>)
   8631e:	681b      	ldr	r3, [r3, #0]
   86320:	b113      	cbz	r3, 86328 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
   86322:	4a21      	ldr	r2, [pc, #132]	; (863a8 <tcpip_thread+0x90>)
   86324:	6810      	ldr	r0, [r2, #0]
   86326:	4798      	blx	r3
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
   86328:	4e20      	ldr	r6, [pc, #128]	; (863ac <tcpip_thread+0x94>)
   8632a:	4d21      	ldr	r5, [pc, #132]	; (863b0 <tcpip_thread+0x98>)
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
      memp_free(MEMP_TCPIP_MSG_API, msg);
      break;
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
   8632c:	4c21      	ldr	r4, [pc, #132]	; (863b4 <tcpip_thread+0x9c>)
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
   8632e:	4630      	mov	r0, r6
   86330:	a901      	add	r1, sp, #4
   86332:	47a8      	blx	r5
    LOCK_TCPIP_CORE();
    switch (msg->type) {
   86334:	9b01      	ldr	r3, [sp, #4]
   86336:	781a      	ldrb	r2, [r3, #0]
   86338:	2a04      	cmp	r2, #4
   8633a:	d832      	bhi.n	863a2 <tcpip_thread+0x8a>
   8633c:	e8df f002 	tbb	[pc, r2]
   86340:	291f0803 	.word	0x291f0803
   86344:	17          	.byte	0x17
   86345:	00          	.byte	0x00
#if LWIP_NETCONN
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
   86346:	6898      	ldr	r0, [r3, #8]
   86348:	6802      	ldr	r2, [r0, #0]
   8634a:	3004      	adds	r0, #4
   8634c:	4790      	blx	r2
      break;
   8634e:	e7ee      	b.n	8632e <tcpip_thread+0x16>

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
   86350:	68d9      	ldr	r1, [r3, #12]
   86352:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   86356:	f012 0f60 	tst.w	r2, #96	; 0x60
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
   8635a:	6898      	ldr	r0, [r3, #8]
   8635c:	bf14      	ite	ne
   8635e:	4b16      	ldrne	r3, [pc, #88]	; (863b8 <tcpip_thread+0xa0>)
      } else
#endif /* LWIP_ETHERNET */
      {
        ip_input(msg->msg.inp.p, msg->msg.inp.netif);
   86360:	4b16      	ldreq	r3, [pc, #88]	; (863bc <tcpip_thread+0xa4>)
   86362:	4798      	blx	r3
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
   86364:	200a      	movs	r0, #10
   86366:	9901      	ldr	r1, [sp, #4]
   86368:	4b15      	ldr	r3, [pc, #84]	; (863c0 <tcpip_thread+0xa8>)
   8636a:	4798      	blx	r3
      break;
   8636c:	e7df      	b.n	8632e <tcpip_thread+0x16>
      break;
#endif /* LWIP_NETIF_API */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
   8636e:	689a      	ldr	r2, [r3, #8]
   86370:	68d8      	ldr	r0, [r3, #12]
   86372:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
   86374:	2009      	movs	r0, #9
   86376:	9901      	ldr	r1, [sp, #4]
   86378:	4b11      	ldr	r3, [pc, #68]	; (863c0 <tcpip_thread+0xa8>)
   8637a:	4798      	blx	r3
      break;
   8637c:	e7d7      	b.n	8632e <tcpip_thread+0x16>

#if LWIP_TCPIP_TIMEOUT
    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
   8637e:	6898      	ldr	r0, [r3, #8]
   86380:	68d9      	ldr	r1, [r3, #12]
   86382:	691a      	ldr	r2, [r3, #16]
   86384:	4b0f      	ldr	r3, [pc, #60]	; (863c4 <tcpip_thread+0xac>)
   86386:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
   86388:	2009      	movs	r0, #9
   8638a:	9901      	ldr	r1, [sp, #4]
   8638c:	4b0c      	ldr	r3, [pc, #48]	; (863c0 <tcpip_thread+0xa8>)
   8638e:	4798      	blx	r3
      break;
   86390:	e7cd      	b.n	8632e <tcpip_thread+0x16>
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
   86392:	68d8      	ldr	r0, [r3, #12]
   86394:	6919      	ldr	r1, [r3, #16]
   86396:	47a0      	blx	r4
      memp_free(MEMP_TCPIP_MSG_API, msg);
   86398:	2009      	movs	r0, #9
   8639a:	9901      	ldr	r1, [sp, #4]
   8639c:	4b08      	ldr	r3, [pc, #32]	; (863c0 <tcpip_thread+0xa8>)
   8639e:	4798      	blx	r3
      break;
   863a0:	e7c5      	b.n	8632e <tcpip_thread+0x16>
   863a2:	e7fe      	b.n	863a2 <tcpip_thread+0x8a>
   863a4:	20074614 	.word	0x20074614
   863a8:	20074610 	.word	0x20074610
   863ac:	2007460c 	.word	0x2007460c
   863b0:	000877fd 	.word	0x000877fd
   863b4:	000877ad 	.word	0x000877ad
   863b8:	0008beed 	.word	0x0008beed
   863bc:	000869dd 	.word	0x000869dd
   863c0:	00087d61 	.word	0x00087d61
   863c4:	00087649 	.word	0x00087649

000863c8 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
   863c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   863ca:	4607      	mov	r7, r0
   863cc:	460e      	mov	r6, r1
   863ce:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
   863d0:	4812      	ldr	r0, [pc, #72]	; (8641c <tcpip_callback_with_block+0x54>)
   863d2:	4b13      	ldr	r3, [pc, #76]	; (86420 <tcpip_callback_with_block+0x58>)
   863d4:	4798      	blx	r3
   863d6:	b1d8      	cbz	r0, 86410 <tcpip_callback_with_block+0x48>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
   863d8:	2009      	movs	r0, #9
   863da:	4b12      	ldr	r3, [pc, #72]	; (86424 <tcpip_callback_with_block+0x5c>)
   863dc:	4798      	blx	r3
    if (msg == NULL) {
   863de:	4604      	mov	r4, r0
   863e0:	b1c0      	cbz	r0, 86414 <tcpip_callback_with_block+0x4c>
      return ERR_MEM;
    }

    msg->type = TCPIP_MSG_CALLBACK;
   863e2:	2304      	movs	r3, #4
   863e4:	7003      	strb	r3, [r0, #0]
    msg->msg.cb.function = function;
   863e6:	6087      	str	r7, [r0, #8]
    msg->msg.cb.ctx = ctx;
   863e8:	60c6      	str	r6, [r0, #12]
    if (block) {
   863ea:	b12d      	cbz	r5, 863f8 <tcpip_callback_with_block+0x30>
      sys_mbox_post(&mbox, msg);
   863ec:	480b      	ldr	r0, [pc, #44]	; (8641c <tcpip_callback_with_block+0x54>)
   863ee:	4621      	mov	r1, r4
   863f0:	4b0d      	ldr	r3, [pc, #52]	; (86428 <tcpip_callback_with_block+0x60>)
   863f2:	4798      	blx	r3
      if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
        memp_free(MEMP_TCPIP_MSG_API, msg);
        return ERR_MEM;
      }
    }
    return ERR_OK;
   863f4:	2300      	movs	r3, #0
   863f6:	e00e      	b.n	86416 <tcpip_callback_with_block+0x4e>
    msg->msg.cb.function = function;
    msg->msg.cb.ctx = ctx;
    if (block) {
      sys_mbox_post(&mbox, msg);
    } else {
      if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
   863f8:	4808      	ldr	r0, [pc, #32]	; (8641c <tcpip_callback_with_block+0x54>)
   863fa:	4621      	mov	r1, r4
   863fc:	4b0b      	ldr	r3, [pc, #44]	; (8642c <tcpip_callback_with_block+0x64>)
   863fe:	4798      	blx	r3
   86400:	4603      	mov	r3, r0
   86402:	b140      	cbz	r0, 86416 <tcpip_callback_with_block+0x4e>
        memp_free(MEMP_TCPIP_MSG_API, msg);
   86404:	2009      	movs	r0, #9
   86406:	4621      	mov	r1, r4
   86408:	4b09      	ldr	r3, [pc, #36]	; (86430 <tcpip_callback_with_block+0x68>)
   8640a:	4798      	blx	r3
        return ERR_MEM;
   8640c:	23ff      	movs	r3, #255	; 0xff
   8640e:	e002      	b.n	86416 <tcpip_callback_with_block+0x4e>
      }
    }
    return ERR_OK;
  }
  return ERR_VAL;
   86410:	23fa      	movs	r3, #250	; 0xfa
   86412:	e000      	b.n	86416 <tcpip_callback_with_block+0x4e>
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
    if (msg == NULL) {
      return ERR_MEM;
   86414:	23ff      	movs	r3, #255	; 0xff
      }
    }
    return ERR_OK;
  }
  return ERR_VAL;
}
   86416:	b258      	sxtb	r0, r3
   86418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8641a:	bf00      	nop
   8641c:	2007460c 	.word	0x2007460c
   86420:	0008c6e1 	.word	0x0008c6e1
   86424:	00087ce1 	.word	0x00087ce1
   86428:	0008c5e5 	.word	0x0008c5e5
   8642c:	0008c60d 	.word	0x0008c60d
   86430:	00087d61 	.word	0x00087d61

00086434 <tcpip_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_apimsg(struct api_msg *apimsg)
{
   86434:	b530      	push	{r4, r5, lr}
   86436:	b087      	sub	sp, #28
   86438:	4604      	mov	r4, r0
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
#endif
  
  if (sys_mbox_valid(&mbox)) {
   8643a:	480b      	ldr	r0, [pc, #44]	; (86468 <tcpip_apimsg+0x34>)
   8643c:	4b0b      	ldr	r3, [pc, #44]	; (8646c <tcpip_apimsg+0x38>)
   8643e:	4798      	blx	r3
   86440:	b170      	cbz	r0, 86460 <tcpip_apimsg+0x2c>
    msg.type = TCPIP_MSG_API;
   86442:	2500      	movs	r5, #0
   86444:	f88d 5004 	strb.w	r5, [sp, #4]
    msg.msg.apimsg = apimsg;
   86448:	9403      	str	r4, [sp, #12]
    sys_mbox_post(&mbox, &msg);
   8644a:	4807      	ldr	r0, [pc, #28]	; (86468 <tcpip_apimsg+0x34>)
   8644c:	a901      	add	r1, sp, #4
   8644e:	4b08      	ldr	r3, [pc, #32]	; (86470 <tcpip_apimsg+0x3c>)
   86450:	4798      	blx	r3
    sys_arch_sem_wait(&apimsg->msg.conn->op_completed, 0);
   86452:	6860      	ldr	r0, [r4, #4]
   86454:	300c      	adds	r0, #12
   86456:	4629      	mov	r1, r5
   86458:	4b06      	ldr	r3, [pc, #24]	; (86474 <tcpip_apimsg+0x40>)
   8645a:	4798      	blx	r3
    return apimsg->msg.err;
   8645c:	7a20      	ldrb	r0, [r4, #8]
   8645e:	e000      	b.n	86462 <tcpip_apimsg+0x2e>
  }
  return ERR_VAL;
   86460:	20fa      	movs	r0, #250	; 0xfa
}
   86462:	b240      	sxtb	r0, r0
   86464:	b007      	add	sp, #28
   86466:	bd30      	pop	{r4, r5, pc}
   86468:	2007460c 	.word	0x2007460c
   8646c:	0008c6e1 	.word	0x0008c6e1
   86470:	0008c5e5 	.word	0x0008c5e5
   86474:	0008c501 	.word	0x0008c501

00086478 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
   86478:	b530      	push	{r4, r5, lr}
   8647a:	b083      	sub	sp, #12
   8647c:	4605      	mov	r5, r0
   8647e:	460c      	mov	r4, r1
  lwip_init();
   86480:	4b0b      	ldr	r3, [pc, #44]	; (864b0 <tcpip_init+0x38>)
   86482:	4798      	blx	r3

  tcpip_init_done = initfunc;
   86484:	4b0b      	ldr	r3, [pc, #44]	; (864b4 <tcpip_init+0x3c>)
   86486:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
   86488:	4b0b      	ldr	r3, [pc, #44]	; (864b8 <tcpip_init+0x40>)
   8648a:	601c      	str	r4, [r3, #0]
  if(sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
   8648c:	480b      	ldr	r0, [pc, #44]	; (864bc <tcpip_init+0x44>)
   8648e:	2106      	movs	r1, #6
   86490:	4b0b      	ldr	r3, [pc, #44]	; (864c0 <tcpip_init+0x48>)
   86492:	4798      	blx	r3
   86494:	b100      	cbz	r0, 86498 <tcpip_init+0x20>
   86496:	e7fe      	b.n	86496 <tcpip_init+0x1e>
  if(sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
   86498:	2307      	movs	r3, #7
   8649a:	9300      	str	r3, [sp, #0]
   8649c:	4809      	ldr	r0, [pc, #36]	; (864c4 <tcpip_init+0x4c>)
   8649e:	490a      	ldr	r1, [pc, #40]	; (864c8 <tcpip_init+0x50>)
   864a0:	2200      	movs	r2, #0
   864a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   864a6:	4c09      	ldr	r4, [pc, #36]	; (864cc <tcpip_init+0x54>)
   864a8:	47a0      	blx	r4
}
   864aa:	b003      	add	sp, #12
   864ac:	bd30      	pop	{r4, r5, pc}
   864ae:	bf00      	nop
   864b0:	0008650d 	.word	0x0008650d
   864b4:	20074614 	.word	0x20074614
   864b8:	20074610 	.word	0x20074610
   864bc:	2007460c 	.word	0x2007460c
   864c0:	0008c579 	.word	0x0008c579
   864c4:	000b100c 	.word	0x000b100c
   864c8:	00086319 	.word	0x00086319
   864cc:	0008c6ed 	.word	0x0008c6ed

000864d0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
   864d0:	0a03      	lsrs	r3, r0, #8
   864d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
   864d6:	b280      	uxth	r0, r0
   864d8:	4770      	bx	lr
   864da:	bf00      	nop

000864dc <lwip_ntohs>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
   864dc:	0a03      	lsrs	r3, r0, #8
   864de:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
}
   864e2:	b280      	uxth	r0, r0
   864e4:	4770      	bx	lr
   864e6:	bf00      	nop

000864e8 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
   864e8:	0603      	lsls	r3, r0, #24
   864ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
    ((n & 0xff00) << 8) |
   864ee:	f400 427f 	and.w	r2, r0, #65280	; 0xff00
   864f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ((n & 0xff0000UL) >> 8) |
   864f6:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
    ((n & 0xff000000UL) >> 24);
}
   864fa:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
   864fe:	4770      	bx	lr

00086500 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
   86500:	b508      	push	{r3, lr}
  return lwip_htonl(n);
   86502:	4b01      	ldr	r3, [pc, #4]	; (86508 <lwip_ntohl+0x8>)
   86504:	4798      	blx	r3
}
   86506:	bd08      	pop	{r3, pc}
   86508:	000864e9 	.word	0x000864e9

0008650c <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
   8650c:	b508      	push	{r3, lr}
  /* Sanity check user-configurable values */
  lwip_sanity_check();

  /* Modules initialization */
  stats_init();
   8650e:	4b07      	ldr	r3, [pc, #28]	; (8652c <lwip_init+0x20>)
   86510:	4798      	blx	r3
#if !NO_SYS
  sys_init();
   86512:	4b07      	ldr	r3, [pc, #28]	; (86530 <lwip_init+0x24>)
   86514:	4798      	blx	r3
#endif /* !NO_SYS */
  mem_init();
   86516:	4b07      	ldr	r3, [pc, #28]	; (86534 <lwip_init+0x28>)
   86518:	4798      	blx	r3
  memp_init();
   8651a:	4b07      	ldr	r3, [pc, #28]	; (86538 <lwip_init+0x2c>)
   8651c:	4798      	blx	r3
  pbuf_init();
  netif_init();
   8651e:	4b07      	ldr	r3, [pc, #28]	; (8653c <lwip_init+0x30>)
   86520:	4798      	blx	r3
#if LWIP_SOCKET
  lwip_socket_init();
   86522:	4b07      	ldr	r3, [pc, #28]	; (86540 <lwip_init+0x34>)
   86524:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
   86526:	4b07      	ldr	r3, [pc, #28]	; (86544 <lwip_init+0x38>)
   86528:	4798      	blx	r3
   8652a:	bd08      	pop	{r3, pc}
   8652c:	000886a9 	.word	0x000886a9
   86530:	0008c421 	.word	0x0008c421
   86534:	0008786d 	.word	0x0008786d
   86538:	00087c49 	.word	0x00087c49
   8653c:	00087dad 	.word	0x00087dad
   86540:	00086315 	.word	0x00086315
   86544:	00087745 	.word	0x00087745

00086548 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
   86548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8654c:	b085      	sub	sp, #20
   8654e:	4680      	mov	r8, r0
   86550:	4689      	mov	r9, r1
   86552:	4615      	mov	r5, r2
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
   86554:	2001      	movs	r0, #1
   86556:	2124      	movs	r1, #36	; 0x24
   86558:	2200      	movs	r2, #0
   8655a:	4b27      	ldr	r3, [pc, #156]	; (865f8 <icmp_send_response+0xb0>)
   8655c:	4798      	blx	r3
                 PBUF_RAM);
  if (q == NULL) {
   8655e:	4606      	mov	r6, r0
   86560:	2800      	cmp	r0, #0
   86562:	d046      	beq.n	865f2 <icmp_send_response+0xaa>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
   86564:	8943      	ldrh	r3, [r0, #10]
   86566:	2b23      	cmp	r3, #35	; 0x23
   86568:	d800      	bhi.n	8656c <icmp_send_response+0x24>
   8656a:	e7fe      	b.n	8656a <icmp_send_response+0x22>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
   8656c:	f8d8 7004 	ldr.w	r7, [r8, #4]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
   86570:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
   86572:	f884 9000 	strb.w	r9, [r4]
  icmphdr->code = code;
   86576:	7065      	strb	r5, [r4, #1]
  icmphdr->id = 0;
   86578:	2500      	movs	r5, #0
   8657a:	7125      	strb	r5, [r4, #4]
   8657c:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
   8657e:	71a5      	strb	r5, [r4, #6]
   86580:	71e5      	strb	r5, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
   86582:	f8d0 c004 	ldr.w	ip, [r0, #4]
   86586:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8658a:	f8d3 e000 	ldr.w	lr, [r3]
   8658e:	6858      	ldr	r0, [r3, #4]
   86590:	6899      	ldr	r1, [r3, #8]
   86592:	f8d3 800c 	ldr.w	r8, [r3, #12]
   86596:	f8cc e008 	str.w	lr, [ip, #8]
   8659a:	f8cc 000c 	str.w	r0, [ip, #12]
   8659e:	f8cc 1010 	str.w	r1, [ip, #16]
   865a2:	f8cc 8014 	str.w	r8, [ip, #20]
   865a6:	f8d3 e010 	ldr.w	lr, [r3, #16]
   865aa:	6958      	ldr	r0, [r3, #20]
   865ac:	6999      	ldr	r1, [r3, #24]
   865ae:	f8cc e018 	str.w	lr, [ip, #24]
   865b2:	f8cc 001c 	str.w	r0, [ip, #28]
   865b6:	f8cc 1020 	str.w	r1, [ip, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
   865ba:	70a5      	strb	r5, [r4, #2]
   865bc:	70e5      	strb	r5, [r4, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
   865be:	4620      	mov	r0, r4
   865c0:	8971      	ldrh	r1, [r6, #10]
   865c2:	4b0e      	ldr	r3, [pc, #56]	; (865fc <icmp_send_response+0xb4>)
   865c4:	4798      	blx	r3
   865c6:	8060      	strh	r0, [r4, #2]
  ICMP_STATS_INC(icmp.xmit);
   865c8:	4b0d      	ldr	r3, [pc, #52]	; (86600 <icmp_send_response+0xb8>)
   865ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
   865ce:	3201      	adds	r2, #1
   865d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
   865d4:	68fb      	ldr	r3, [r7, #12]
   865d6:	aa04      	add	r2, sp, #16
   865d8:	f842 3d04 	str.w	r3, [r2, #-4]!
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
   865dc:	9500      	str	r5, [sp, #0]
   865de:	2301      	movs	r3, #1
   865e0:	9301      	str	r3, [sp, #4]
   865e2:	4630      	mov	r0, r6
   865e4:	4629      	mov	r1, r5
   865e6:	23ff      	movs	r3, #255	; 0xff
   865e8:	4c06      	ldr	r4, [pc, #24]	; (86604 <icmp_send_response+0xbc>)
   865ea:	47a0      	blx	r4
  pbuf_free(q);
   865ec:	4630      	mov	r0, r6
   865ee:	4b06      	ldr	r3, [pc, #24]	; (86608 <icmp_send_response+0xc0>)
   865f0:	4798      	blx	r3
}
   865f2:	b005      	add	sp, #20
   865f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   865f8:	000880d1 	.word	0x000880d1
   865fc:	00086921 	.word	0x00086921
   86600:	20076788 	.word	0x20076788
   86604:	00086d41 	.word	0x00086d41
   86608:	00088045 	.word	0x00088045

0008660c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
   8660c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86610:	b085      	sub	sp, #20
   86612:	4604      	mov	r4, r0
   86614:	4688      	mov	r8, r1
#endif /* LWIP_DEBUG */
  struct icmp_echo_hdr *iecho;
  struct ip_hdr *iphdr;
  s16_t hlen;

  ICMP_STATS_INC(icmp.recv);
   86616:	4b6b      	ldr	r3, [pc, #428]	; (867c4 <icmp_input+0x1b8>)
   86618:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
   8661c:	3201      	adds	r2, #1
   8661e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
   86622:	6845      	ldr	r5, [r0, #4]
  hlen = IPH_HL(iphdr) * 4;
   86624:	8828      	ldrh	r0, [r5, #0]
   86626:	4b68      	ldr	r3, [pc, #416]	; (867c8 <icmp_input+0x1bc>)
   86628:	4798      	blx	r3
   8662a:	f3c0 2003 	ubfx	r0, r0, #8, #4
   8662e:	0087      	lsls	r7, r0, #2
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
   86630:	427e      	negs	r6, r7
   86632:	b2b6      	uxth	r6, r6
   86634:	4620      	mov	r0, r4
   86636:	b231      	sxth	r1, r6
   86638:	4b64      	ldr	r3, [pc, #400]	; (867cc <icmp_input+0x1c0>)
   8663a:	4798      	blx	r3
   8663c:	2800      	cmp	r0, #0
   8663e:	f040 80aa 	bne.w	86796 <icmp_input+0x18a>
   86642:	8923      	ldrh	r3, [r4, #8]
   86644:	2b03      	cmp	r3, #3
   86646:	f240 80a6 	bls.w	86796 <icmp_input+0x18a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
   8664a:	6863      	ldr	r3, [r4, #4]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
   8664c:	781b      	ldrb	r3, [r3, #0]
   8664e:	2b00      	cmp	r3, #0
   86650:	f000 809d 	beq.w	8678e <icmp_input+0x182>
   86654:	2b08      	cmp	r3, #8
   86656:	f040 808f 	bne.w	86778 <icmp_input+0x16c>
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
   8665a:	4b5d      	ldr	r3, [pc, #372]	; (867d0 <icmp_input+0x1c4>)
   8665c:	f8d3 9000 	ldr.w	r9, [r3]
        accepted = 0;
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
   86660:	4648      	mov	r0, r9
   86662:	4641      	mov	r1, r8
   86664:	4b5b      	ldr	r3, [pc, #364]	; (867d4 <icmp_input+0x1c8>)
   86666:	4798      	blx	r3
   86668:	b920      	cbnz	r0, 86674 <icmp_input+0x68>
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
   8666a:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
        accepted = 0;
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
   8666e:	f1b9 0fe0 	cmp.w	r9, #224	; 0xe0
   86672:	d109      	bne.n	86688 <icmp_input+0x7c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
   86674:	4b53      	ldr	r3, [pc, #332]	; (867c4 <icmp_input+0x1b8>)
   86676:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
   8667a:	3201      	adds	r2, #1
   8667c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        pbuf_free(p);
   86680:	4620      	mov	r0, r4
   86682:	4b55      	ldr	r3, [pc, #340]	; (867d8 <icmp_input+0x1cc>)
   86684:	4798      	blx	r3
        return;
   86686:	e099      	b.n	867bc <icmp_input+0x1b0>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
   86688:	8923      	ldrh	r3, [r4, #8]
   8668a:	2b07      	cmp	r3, #7
   8668c:	f240 8083 	bls.w	86796 <icmp_input+0x18a>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
   86690:	4620      	mov	r0, r4
   86692:	4b52      	ldr	r3, [pc, #328]	; (867dc <icmp_input+0x1d0>)
   86694:	4798      	blx	r3
   86696:	b148      	cbz	r0, 866ac <icmp_input+0xa0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
   86698:	4620      	mov	r0, r4
   8669a:	4b4f      	ldr	r3, [pc, #316]	; (867d8 <icmp_input+0x1cc>)
   8669c:	4798      	blx	r3
      ICMP_STATS_INC(icmp.chkerr);
   8669e:	4b49      	ldr	r3, [pc, #292]	; (867c4 <icmp_input+0x1b8>)
   866a0:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
   866a4:	3201      	adds	r2, #1
   866a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      snmp_inc_icmpinerrors();
      return;
   866aa:	e087      	b.n	867bc <icmp_input+0x1b0>
  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  hlen = IPH_HL(iphdr) * 4;
   866ac:	b2bf      	uxth	r7, r7
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
   866ae:	4620      	mov	r0, r4
   866b0:	2124      	movs	r1, #36	; 0x24
   866b2:	4b46      	ldr	r3, [pc, #280]	; (867cc <icmp_input+0x1c0>)
   866b4:	4798      	blx	r3
   866b6:	b328      	cbz	r0, 86704 <icmp_input+0xf8>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
   866b8:	4620      	mov	r0, r4
   866ba:	4639      	mov	r1, r7
   866bc:	4b43      	ldr	r3, [pc, #268]	; (867cc <icmp_input+0x1c0>)
   866be:	4798      	blx	r3
   866c0:	b100      	cbz	r0, 866c4 <icmp_input+0xb8>
   866c2:	e7fe      	b.n	866c2 <icmp_input+0xb6>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
   866c4:	2002      	movs	r0, #2
   866c6:	8921      	ldrh	r1, [r4, #8]
   866c8:	2200      	movs	r2, #0
   866ca:	4b45      	ldr	r3, [pc, #276]	; (867e0 <icmp_input+0x1d4>)
   866cc:	4798      	blx	r3
      if (r == NULL) {
   866ce:	4681      	mov	r9, r0
   866d0:	2800      	cmp	r0, #0
   866d2:	d06a      	beq.n	867aa <icmp_input+0x19e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
   866d4:	8942      	ldrh	r2, [r0, #10]
   866d6:	f107 0308 	add.w	r3, r7, #8
   866da:	429a      	cmp	r2, r3
   866dc:	d200      	bcs.n	866e0 <icmp_input+0xd4>
   866de:	e7fe      	b.n	866de <icmp_input+0xd2>
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
   866e0:	4621      	mov	r1, r4
   866e2:	4b40      	ldr	r3, [pc, #256]	; (867e4 <icmp_input+0x1d8>)
   866e4:	4798      	blx	r3
   866e6:	b100      	cbz	r0, 866ea <icmp_input+0xde>
   866e8:	e7fe      	b.n	866e8 <icmp_input+0xdc>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
   866ea:	f8d9 5004 	ldr.w	r5, [r9, #4]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
   866ee:	4648      	mov	r0, r9
   866f0:	b231      	sxth	r1, r6
   866f2:	4b36      	ldr	r3, [pc, #216]	; (867cc <icmp_input+0x1c0>)
   866f4:	4798      	blx	r3
   866f6:	b100      	cbz	r0, 866fa <icmp_input+0xee>
   866f8:	e7fe      	b.n	866f8 <icmp_input+0xec>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
   866fa:	4620      	mov	r0, r4
   866fc:	4b36      	ldr	r3, [pc, #216]	; (867d8 <icmp_input+0x1cc>)
   866fe:	4798      	blx	r3
      /* we now have an identical copy of p that has room for link headers */
      p = r;
   86700:	464c      	mov	r4, r9
   86702:	e006      	b.n	86712 <icmp_input+0x106>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
   86704:	4620      	mov	r0, r4
   86706:	f06f 0123 	mvn.w	r1, #35	; 0x23
   8670a:	4b30      	ldr	r3, [pc, #192]	; (867cc <icmp_input+0x1c0>)
   8670c:	4798      	blx	r3
   8670e:	b100      	cbz	r0, 86712 <icmp_input+0x106>
   86710:	e7fe      	b.n	86710 <icmp_input+0x104>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
   86712:	6863      	ldr	r3, [r4, #4]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
   86714:	4a2e      	ldr	r2, [pc, #184]	; (867d0 <icmp_input+0x1c4>)
   86716:	6812      	ldr	r2, [r2, #0]
   86718:	60ea      	str	r2, [r5, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
   8671a:	4a33      	ldr	r2, [pc, #204]	; (867e8 <icmp_input+0x1dc>)
   8671c:	6812      	ldr	r2, [r2, #0]
   8671e:	612a      	str	r2, [r5, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
   86720:	2200      	movs	r2, #0
   86722:	701a      	strb	r2, [r3, #0]
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
   86724:	885a      	ldrh	r2, [r3, #2]
   86726:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   8672a:	428a      	cmp	r2, r1
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
   8672c:	bf8c      	ite	hi
   8672e:	3209      	addhi	r2, #9
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
   86730:	3208      	addls	r2, #8
   86732:	805a      	strh	r2, [r3, #2]
    }

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
   86734:	23ff      	movs	r3, #255	; 0xff
   86736:	722b      	strb	r3, [r5, #8]
    IPH_CHKSUM_SET(iphdr, 0);
   86738:	2300      	movs	r3, #0
   8673a:	72ab      	strb	r3, [r5, #10]
   8673c:	72eb      	strb	r3, [r5, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
   8673e:	4628      	mov	r0, r5
   86740:	2114      	movs	r1, #20
   86742:	4b2a      	ldr	r3, [pc, #168]	; (867ec <icmp_input+0x1e0>)
   86744:	4798      	blx	r3
   86746:	8168      	strh	r0, [r5, #10]
#endif /* CHECKSUM_GEN_IP */

    ICMP_STATS_INC(icmp.xmit);
   86748:	4b1e      	ldr	r3, [pc, #120]	; (867c4 <icmp_input+0x1b8>)
   8674a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
   8674e:	3201      	adds	r2, #1
   86750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
   86754:	4620      	mov	r0, r4
   86756:	4639      	mov	r1, r7
   86758:	4b1c      	ldr	r3, [pc, #112]	; (867cc <icmp_input+0x1c0>)
   8675a:	4798      	blx	r3
   8675c:	b100      	cbz	r0, 86760 <icmp_input+0x154>
   8675e:	e7fe      	b.n	8675e <icmp_input+0x152>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
   86760:	2200      	movs	r2, #0
   86762:	9200      	str	r2, [sp, #0]
   86764:	2301      	movs	r3, #1
   86766:	9301      	str	r3, [sp, #4]
   86768:	f8cd 8008 	str.w	r8, [sp, #8]
   8676c:	4620      	mov	r0, r4
   8676e:	4918      	ldr	r1, [pc, #96]	; (867d0 <icmp_input+0x1c4>)
   86770:	23ff      	movs	r3, #255	; 0xff
   86772:	4d1f      	ldr	r5, [pc, #124]	; (867f0 <icmp_input+0x1e4>)
   86774:	47a8      	blx	r5
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
   86776:	e00a      	b.n	8678e <icmp_input+0x182>
  default:
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
   86778:	4b12      	ldr	r3, [pc, #72]	; (867c4 <icmp_input+0x1b8>)
   8677a:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
   8677e:	3201      	adds	r2, #1
   86780:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
   86784:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
   86788:	3201      	adds	r2, #1
   8678a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  }
  pbuf_free(p);
   8678e:	4620      	mov	r0, r4
   86790:	4b11      	ldr	r3, [pc, #68]	; (867d8 <icmp_input+0x1cc>)
   86792:	4798      	blx	r3
  return;
   86794:	e012      	b.n	867bc <icmp_input+0x1b0>
lenerr:
  pbuf_free(p);
   86796:	4620      	mov	r0, r4
   86798:	4b0f      	ldr	r3, [pc, #60]	; (867d8 <icmp_input+0x1cc>)
   8679a:	4798      	blx	r3
  ICMP_STATS_INC(icmp.lenerr);
   8679c:	4b09      	ldr	r3, [pc, #36]	; (867c4 <icmp_input+0x1b8>)
   8679e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
   867a2:	3201      	adds	r2, #1
   867a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  snmp_inc_icmpinerrors();
  return;
   867a8:	e008      	b.n	867bc <icmp_input+0x1b0>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
   867aa:	4620      	mov	r0, r4
   867ac:	4b0a      	ldr	r3, [pc, #40]	; (867d8 <icmp_input+0x1cc>)
   867ae:	4798      	blx	r3
  ICMP_STATS_INC(icmp.err);
   867b0:	4b04      	ldr	r3, [pc, #16]	; (867c4 <icmp_input+0x1b8>)
   867b2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
   867b6:	3201      	adds	r2, #1
   867b8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  snmp_inc_icmpinerrors();
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
   867bc:	b005      	add	sp, #20
   867be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   867c2:	bf00      	nop
   867c4:	20076788 	.word	0x20076788
   867c8:	000864dd 	.word	0x000864dd
   867cc:	00087fd1 	.word	0x00087fd1
   867d0:	20075b64 	.word	0x20075b64
   867d4:	00086d99 	.word	0x00086d99
   867d8:	00088045 	.word	0x00088045
   867dc:	00086931 	.word	0x00086931
   867e0:	000880d1 	.word	0x000880d1
   867e4:	00088339 	.word	0x00088339
   867e8:	20075b5c 	.word	0x20075b5c
   867ec:	00086921 	.word	0x00086921
   867f0:	00086c21 	.word	0x00086c21

000867f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
   867f4:	b508      	push	{r3, lr}
   867f6:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
   867f8:	2103      	movs	r1, #3
   867fa:	4b01      	ldr	r3, [pc, #4]	; (86800 <icmp_dest_unreach+0xc>)
   867fc:	4798      	blx	r3
   867fe:	bd08      	pop	{r3, pc}
   86800:	00086549 	.word	0x00086549

00086804 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
   86804:	b508      	push	{r3, lr}
   86806:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
   86808:	210b      	movs	r1, #11
   8680a:	4b01      	ldr	r3, [pc, #4]	; (86810 <icmp_time_exceeded+0xc>)
   8680c:	4798      	blx	r3
   8680e:	bd08      	pop	{r3, pc}
   86810:	00086549 	.word	0x00086549

00086814 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
   86814:	b470      	push	{r4, r5, r6}
   86816:	b083      	sub	sp, #12
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
   86818:	2300      	movs	r3, #0
   8681a:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
   8681e:	f010 0601 	ands.w	r6, r0, #1
   86822:	d006      	beq.n	86832 <lwip_standard_chksum+0x1e>
   86824:	4299      	cmp	r1, r3
   86826:	dd04      	ble.n	86832 <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
   86828:	7803      	ldrb	r3, [r0, #0]
   8682a:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
   8682e:	3901      	subs	r1, #1
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
   86830:	3001      	adds	r0, #1
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
   86832:	2901      	cmp	r1, #1
   86834:	dd10      	ble.n	86858 <lwip_standard_chksum+0x44>
    ((u8_t *)&t)[1] = *pb++;
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
   86836:	4604      	mov	r4, r0
  while (len > 1) {
   86838:	460b      	mov	r3, r1
static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  u32_t sum = 0;
   8683a:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
    sum += *ps++;
   8683c:	f834 5b02 	ldrh.w	r5, [r4], #2
   86840:	442a      	add	r2, r5
    len -= 2;
   86842:	3b02      	subs	r3, #2
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
   86844:	2b01      	cmp	r3, #1
   86846:	dcf9      	bgt.n	8683c <lwip_standard_chksum+0x28>
   86848:	3902      	subs	r1, #2
   8684a:	084b      	lsrs	r3, r1, #1
   8684c:	1c5c      	adds	r4, r3, #1
   8684e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
   86852:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
   86856:	e000      	b.n	8685a <lwip_standard_chksum+0x46>
static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  u32_t sum = 0;
   86858:	2200      	movs	r2, #0
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
   8685a:	2900      	cmp	r1, #0
    ((u8_t *)&t)[0] = *(u8_t *)ps;
   8685c:	bfc4      	itt	gt
   8685e:	7803      	ldrbgt	r3, [r0, #0]
   86860:	f88d 3006 	strbgt.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
   86864:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   86868:	4402      	add	r2, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
   8686a:	b290      	uxth	r0, r2
   8686c:	eb00 4212 	add.w	r2, r0, r2, lsr #16
  sum = FOLD_U32T(sum);
   86870:	b290      	uxth	r0, r2
   86872:	eb00 4012 	add.w	r0, r0, r2, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
   86876:	b126      	cbz	r6, 86882 <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
   86878:	0203      	lsls	r3, r0, #8
   8687a:	b29b      	uxth	r3, r3
   8687c:	f3c0 2007 	ubfx	r0, r0, #8, #8
   86880:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
   86882:	b280      	uxth	r0, r0
   86884:	b003      	add	sp, #12
   86886:	bc70      	pop	{r4, r5, r6}
   86888:	4770      	bx	lr
   8688a:	bf00      	nop

0008688c <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
   8688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86890:	468a      	mov	sl, r1
   86892:	4691      	mov	r9, r2
   86894:	4698      	mov	r8, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
   86896:	4604      	mov	r4, r0
   86898:	b1f8      	cbz	r0, 868da <inet_chksum_pseudo+0x4e>
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
   8689a:	2600      	movs	r6, #0
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
   8689c:	4635      	mov	r5, r6
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
   8689e:	4f1e      	ldr	r7, [pc, #120]	; (86918 <inet_chksum_pseudo+0x8c>)
   868a0:	6860      	ldr	r0, [r4, #4]
   868a2:	8961      	ldrh	r1, [r4, #10]
   868a4:	47b8      	blx	r7
   868a6:	4428      	add	r0, r5
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
   868a8:	b283      	uxth	r3, r0
   868aa:	eb03 4510 	add.w	r5, r3, r0, lsr #16
    if (q->len % 2 != 0) {
   868ae:	8963      	ldrh	r3, [r4, #10]
   868b0:	f013 0f01 	tst.w	r3, #1
   868b4:	d007      	beq.n	868c6 <inet_chksum_pseudo+0x3a>
      swapped = 1 - swapped;
   868b6:	f1c6 0601 	rsb	r6, r6, #1
   868ba:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
   868bc:	022b      	lsls	r3, r5, #8
   868be:	b29b      	uxth	r3, r3
   868c0:	f3c5 2507 	ubfx	r5, r5, #8, #8
   868c4:	431d      	orrs	r5, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
   868c6:	6824      	ldr	r4, [r4, #0]
   868c8:	2c00      	cmp	r4, #0
   868ca:	d1e9      	bne.n	868a0 <inet_chksum_pseudo+0x14>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
   868cc:	b136      	cbz	r6, 868dc <inet_chksum_pseudo+0x50>
    acc = SWAP_BYTES_IN_WORD(acc);
   868ce:	022b      	lsls	r3, r5, #8
   868d0:	b29b      	uxth	r3, r3
   868d2:	f3c5 2507 	ubfx	r5, r5, #8, #8
   868d6:	431d      	orrs	r5, r3
   868d8:	e000      	b.n	868dc <inet_chksum_pseudo+0x50>
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
   868da:	2500      	movs	r5, #0
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  addr = ip4_addr_get_u32(src);
   868dc:	f8da 2000 	ldr.w	r2, [sl]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
   868e0:	f8d9 3000 	ldr.w	r3, [r9]

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  addr = ip4_addr_get_u32(src);
  acc += (addr & 0xffffUL);
   868e4:	b291      	uxth	r1, r2
   868e6:	eb01 4212 	add.w	r2, r1, r2, lsr #16
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
  acc += (addr & 0xffffUL);
   868ea:	b299      	uxth	r1, r3
  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  addr = ip4_addr_get_u32(src);
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
   868ec:	440a      	add	r2, r1
  addr = ip4_addr_get_u32(dest);
  acc += (addr & 0xffffUL);
   868ee:	eb02 4313 	add.w	r3, r2, r3, lsr #16
  acc += ((addr >> 16) & 0xffffUL);
   868f2:	441d      	add	r5, r3
  acc += (u32_t)htons((u16_t)proto);
   868f4:	4640      	mov	r0, r8
   868f6:	4c09      	ldr	r4, [pc, #36]	; (8691c <inet_chksum_pseudo+0x90>)
   868f8:	47a0      	blx	r4
   868fa:	4405      	add	r5, r0
  acc += (u32_t)htons(proto_len);
   868fc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   86900:	47a0      	blx	r4
   86902:	4428      	add	r0, r5

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
   86904:	b283      	uxth	r3, r0
   86906:	eb03 4310 	add.w	r3, r3, r0, lsr #16
  acc = FOLD_U32T(acc);
   8690a:	b298      	uxth	r0, r3
   8690c:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
   86910:	43d8      	mvns	r0, r3
}
   86912:	b280      	uxth	r0, r0
   86914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86918:	00086815 	.word	0x00086815
   8691c:	000864d1 	.word	0x000864d1

00086920 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
   86920:	b508      	push	{r3, lr}
  return ~LWIP_CHKSUM(dataptr, len);
   86922:	4b02      	ldr	r3, [pc, #8]	; (8692c <inet_chksum+0xc>)
   86924:	4798      	blx	r3
   86926:	43c0      	mvns	r0, r0
}
   86928:	b280      	uxth	r0, r0
   8692a:	bd08      	pop	{r3, pc}
   8692c:	00086815 	.word	0x00086815

00086930 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
   86930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
   86932:	4604      	mov	r4, r0
   86934:	b1f8      	cbz	r0, 86976 <inet_chksum_pbuf+0x46>
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
   86936:	2600      	movs	r6, #0
{
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
   86938:	4635      	mov	r5, r6
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
   8693a:	4f11      	ldr	r7, [pc, #68]	; (86980 <inet_chksum_pbuf+0x50>)
   8693c:	6860      	ldr	r0, [r4, #4]
   8693e:	8961      	ldrh	r1, [r4, #10]
   86940:	47b8      	blx	r7
   86942:	4428      	add	r0, r5
    acc = FOLD_U32T(acc);
   86944:	b285      	uxth	r5, r0
   86946:	eb05 4510 	add.w	r5, r5, r0, lsr #16
    if (q->len % 2 != 0) {
   8694a:	8963      	ldrh	r3, [r4, #10]
   8694c:	f013 0f01 	tst.w	r3, #1
   86950:	d007      	beq.n	86962 <inet_chksum_pbuf+0x32>
      swapped = 1 - swapped;
   86952:	f1c6 0601 	rsb	r6, r6, #1
   86956:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
   86958:	022b      	lsls	r3, r5, #8
   8695a:	b29b      	uxth	r3, r3
   8695c:	f3c5 2507 	ubfx	r5, r5, #8, #8
   86960:	431d      	orrs	r5, r3
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
   86962:	6824      	ldr	r4, [r4, #0]
   86964:	2c00      	cmp	r4, #0
   86966:	d1e9      	bne.n	8693c <inet_chksum_pbuf+0xc>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
   86968:	b136      	cbz	r6, 86978 <inet_chksum_pbuf+0x48>
    acc = SWAP_BYTES_IN_WORD(acc);
   8696a:	022b      	lsls	r3, r5, #8
   8696c:	b29b      	uxth	r3, r3
   8696e:	f3c5 2507 	ubfx	r5, r5, #8, #8
   86972:	431d      	orrs	r5, r3
   86974:	e000      	b.n	86978 <inet_chksum_pbuf+0x48>
{
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
   86976:	2500      	movs	r5, #0
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  return (u16_t)~(acc & 0xffffUL);
   86978:	43e8      	mvns	r0, r5
}
   8697a:	b280      	uxth	r0, r0
   8697c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8697e:	bf00      	nop
   86980:	00086815 	.word	0x00086815

00086984 <ip_route>:
ip_route(ip_addr_t *dest)
{
  struct netif *netif;

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
   86984:	4b12      	ldr	r3, [pc, #72]	; (869d0 <ip_route+0x4c>)
   86986:	681b      	ldr	r3, [r3, #0]
   86988:	b16b      	cbz	r3, 869a6 <ip_route+0x22>
    /* network mask matches? */
    if (netif_is_up(netif)) {
   8698a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   8698e:	f012 0f01 	tst.w	r2, #1
   86992:	d005      	beq.n	869a0 <ip_route+0x1c>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
   86994:	6859      	ldr	r1, [r3, #4]
   86996:	6802      	ldr	r2, [r0, #0]
   86998:	4051      	eors	r1, r2
   8699a:	689a      	ldr	r2, [r3, #8]
   8699c:	4211      	tst	r1, r2
   8699e:	d012      	beq.n	869c6 <ip_route+0x42>
ip_route(ip_addr_t *dest)
{
  struct netif *netif;

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
   869a0:	681b      	ldr	r3, [r3, #0]
   869a2:	2b00      	cmp	r3, #0
   869a4:	d1f1      	bne.n	8698a <ip_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
   869a6:	4b0b      	ldr	r3, [pc, #44]	; (869d4 <ip_route+0x50>)
   869a8:	681b      	ldr	r3, [r3, #0]
   869aa:	b123      	cbz	r3, 869b6 <ip_route+0x32>
   869ac:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   869b0:	f012 0f01 	tst.w	r2, #1
   869b4:	d109      	bne.n	869ca <ip_route+0x46>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
   869b6:	4b08      	ldr	r3, [pc, #32]	; (869d8 <ip_route+0x54>)
   869b8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   869bc:	3201      	adds	r2, #1
   869be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    snmp_inc_ipoutnoroutes();
    return NULL;
   869c2:	2000      	movs	r0, #0
   869c4:	4770      	bx	lr
   869c6:	4618      	mov	r0, r3
   869c8:	4770      	bx	lr
  }
  /* no matching netif found, use default netif */
  return netif_default;
   869ca:	4618      	mov	r0, r3
}
   869cc:	4770      	bx	lr
   869ce:	bf00      	nop
   869d0:	20076780 	.word	0x20076780
   869d4:	20076784 	.word	0x20076784
   869d8:	20076788 	.word	0x20076788

000869dc <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
   869dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   869e0:	4605      	mov	r5, r0
   869e2:	460f      	mov	r7, r1
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
   869e4:	4b7d      	ldr	r3, [pc, #500]	; (86bdc <ip_input+0x200>)
   869e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
   869ea:	3201      	adds	r2, #1
   869ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
   869f0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
   869f4:	f8b8 0000 	ldrh.w	r0, [r8]
   869f8:	4b79      	ldr	r3, [pc, #484]	; (86be0 <ip_input+0x204>)
   869fa:	4798      	blx	r3
   869fc:	f3c0 300f 	ubfx	r0, r0, #12, #16
   86a00:	2804      	cmp	r0, #4
   86a02:	d00e      	beq.n	86a22 <ip_input+0x46>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
   86a04:	4628      	mov	r0, r5
   86a06:	4b77      	ldr	r3, [pc, #476]	; (86be4 <ip_input+0x208>)
   86a08:	4798      	blx	r3
    IP_STATS_INC(ip.err);
   86a0a:	4b74      	ldr	r3, [pc, #464]	; (86bdc <ip_input+0x200>)
   86a0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
   86a10:	3201      	adds	r2, #1
   86a12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
   86a16:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
   86a1a:	3201      	adds	r2, #1
   86a1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
   86a20:	e0d8      	b.n	86bd4 <ip_input+0x1f8>
  }

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
   86a22:	f8b8 0000 	ldrh.w	r0, [r8]
   86a26:	4c6e      	ldr	r4, [pc, #440]	; (86be0 <ip_input+0x204>)
   86a28:	47a0      	blx	r4
   86a2a:	f3c0 2003 	ubfx	r0, r0, #8, #4
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
   86a2e:	0086      	lsls	r6, r0, #2
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
   86a30:	f8b8 0002 	ldrh.w	r0, [r8, #2]
   86a34:	47a0      	blx	r4
   86a36:	4604      	mov	r4, r0

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
   86a38:	896b      	ldrh	r3, [r5, #10]
   86a3a:	42b3      	cmp	r3, r6
   86a3c:	d302      	bcc.n	86a44 <ip_input+0x68>
   86a3e:	892b      	ldrh	r3, [r5, #8]
   86a40:	4283      	cmp	r3, r0
   86a42:	d20e      	bcs.n	86a62 <ip_input+0x86>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
   86a44:	4628      	mov	r0, r5
   86a46:	4b67      	ldr	r3, [pc, #412]	; (86be4 <ip_input+0x208>)
   86a48:	4798      	blx	r3
    IP_STATS_INC(ip.lenerr);
   86a4a:	4b64      	ldr	r3, [pc, #400]	; (86bdc <ip_input+0x200>)
   86a4c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
   86a50:	3201      	adds	r2, #1
   86a52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
   86a56:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
   86a5a:	3201      	adds	r2, #1
   86a5c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    snmp_inc_ipindiscards();
    return ERR_OK;
   86a60:	e0b8      	b.n	86bd4 <ip_input+0x1f8>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
   86a62:	4640      	mov	r0, r8
   86a64:	4631      	mov	r1, r6
   86a66:	4b60      	ldr	r3, [pc, #384]	; (86be8 <ip_input+0x20c>)
   86a68:	4798      	blx	r3
   86a6a:	b170      	cbz	r0, 86a8a <ip_input+0xae>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
   86a6c:	4628      	mov	r0, r5
   86a6e:	4b5d      	ldr	r3, [pc, #372]	; (86be4 <ip_input+0x208>)
   86a70:	4798      	blx	r3
    IP_STATS_INC(ip.chkerr);
   86a72:	4b5a      	ldr	r3, [pc, #360]	; (86bdc <ip_input+0x200>)
   86a74:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
   86a78:	3201      	adds	r2, #1
   86a7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    IP_STATS_INC(ip.drop);
   86a7e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
   86a82:	3201      	adds	r2, #1
   86a84:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
   86a88:	e0a4      	b.n	86bd4 <ip_input+0x1f8>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
   86a8a:	4628      	mov	r0, r5
   86a8c:	4621      	mov	r1, r4
   86a8e:	4b57      	ldr	r3, [pc, #348]	; (86bec <ip_input+0x210>)
   86a90:	4798      	blx	r3

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
   86a92:	f8d8 2010 	ldr.w	r2, [r8, #16]
   86a96:	4b56      	ldr	r3, [pc, #344]	; (86bf0 <ip_input+0x214>)
   86a98:	601a      	str	r2, [r3, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
   86a9a:	f8d8 200c 	ldr.w	r2, [r8, #12]
   86a9e:	4b55      	ldr	r3, [pc, #340]	; (86bf4 <ip_input+0x218>)
   86aa0:	601a      	str	r2, [r3, #0]
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
    netif = inp;
   86aa2:	463c      	mov	r4, r7
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
   86aa4:	2601      	movs	r6, #1
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
   86aa6:	f8df a148 	ldr.w	sl, [pc, #328]	; 86bf0 <ip_input+0x214>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
   86aaa:	f8df b14c 	ldr.w	fp, [pc, #332]	; 86bf8 <ip_input+0x21c>
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
        first = 0;
        netif = netif_list;
   86aae:	f8df 916c 	ldr.w	r9, [pc, #364]	; 86c1c <ip_input+0x240>
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
   86ab2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   86ab6:	f013 0f01 	tst.w	r3, #1
   86aba:	d00b      	beq.n	86ad4 <ip_input+0xf8>
   86abc:	f114 0f04 	cmn.w	r4, #4
   86ac0:	d008      	beq.n	86ad4 <ip_input+0xf8>
   86ac2:	6863      	ldr	r3, [r4, #4]
   86ac4:	b133      	cbz	r3, 86ad4 <ip_input+0xf8>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
   86ac6:	f8da 0000 	ldr.w	r0, [sl]
   86aca:	4283      	cmp	r3, r0
   86acc:	d00d      	beq.n	86aea <ip_input+0x10e>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
   86ace:	4621      	mov	r1, r4
   86ad0:	47d8      	blx	fp
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
   86ad2:	b950      	cbnz	r0, 86aea <ip_input+0x10e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
   86ad4:	b116      	cbz	r6, 86adc <ip_input+0x100>
        first = 0;
        netif = netif_list;
   86ad6:	f8d9 4000 	ldr.w	r4, [r9]
   86ada:	e000      	b.n	86ade <ip_input+0x102>
      } else {
        netif = netif->next;
   86adc:	6824      	ldr	r4, [r4, #0]
      }
      if (netif == inp) {
   86ade:	42bc      	cmp	r4, r7
        netif = netif->next;
   86ae0:	bf08      	it	eq
   86ae2:	683c      	ldreq	r4, [r7, #0]
      }
    } while(netif != NULL);
   86ae4:	b10c      	cbz	r4, 86aea <ip_input+0x10e>
   86ae6:	2600      	movs	r6, #0
   86ae8:	e7e3      	b.n	86ab2 <ip_input+0xd6>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
   86aea:	4b42      	ldr	r3, [pc, #264]	; (86bf4 <ip_input+0x218>)
   86aec:	6818      	ldr	r0, [r3, #0]
   86aee:	4639      	mov	r1, r7
   86af0:	4b41      	ldr	r3, [pc, #260]	; (86bf8 <ip_input+0x21c>)
   86af2:	4798      	blx	r3
   86af4:	b928      	cbnz	r0, 86b02 <ip_input+0x126>
         (ip_addr_ismulticast(&current_iphdr_src))) {
   86af6:	4b3f      	ldr	r3, [pc, #252]	; (86bf4 <ip_input+0x218>)
   86af8:	681b      	ldr	r3, [r3, #0]
   86afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
   86afe:	2be0      	cmp	r3, #224	; 0xe0
   86b00:	d109      	bne.n	86b16 <ip_input+0x13a>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
   86b02:	4628      	mov	r0, r5
   86b04:	4b37      	ldr	r3, [pc, #220]	; (86be4 <ip_input+0x208>)
   86b06:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
   86b08:	4b34      	ldr	r3, [pc, #208]	; (86bdc <ip_input+0x200>)
   86b0a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
   86b0e:	3201      	adds	r2, #1
   86b10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
   86b14:	e05e      	b.n	86bd4 <ip_input+0x1f8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
   86b16:	b91c      	cbnz	r4, 86b20 <ip_input+0x144>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
   86b18:	4628      	mov	r0, r5
   86b1a:	4b32      	ldr	r3, [pc, #200]	; (86be4 <ip_input+0x208>)
   86b1c:	4798      	blx	r3
    return ERR_OK;
   86b1e:	e059      	b.n	86bd4 <ip_input+0x1f8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
   86b20:	f8b8 3006 	ldrh.w	r3, [r8, #6]
   86b24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   86b28:	b29b      	uxth	r3, r3
   86b2a:	b13b      	cbz	r3, 86b3c <ip_input+0x160>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
   86b2c:	4628      	mov	r0, r5
   86b2e:	4b33      	ldr	r3, [pc, #204]	; (86bfc <ip_input+0x220>)
   86b30:	4798      	blx	r3
    /* packet not fully reassembled yet? */
    if (p == NULL) {
   86b32:	4605      	mov	r5, r0
   86b34:	2800      	cmp	r0, #0
   86b36:	d04d      	beq.n	86bd4 <ip_input+0x1f8>
      return ERR_OK;
    }
    iphdr = (struct ip_hdr *)p->payload;
   86b38:	f8d0 8004 	ldr.w	r8, [r0, #4]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
   86b3c:	4b30      	ldr	r3, [pc, #192]	; (86c00 <ip_input+0x224>)
   86b3e:	601f      	str	r7, [r3, #0]
  current_header = iphdr;
   86b40:	4b30      	ldr	r3, [pc, #192]	; (86c04 <ip_input+0x228>)
   86b42:	f8c3 8000 	str.w	r8, [r3]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
   86b46:	4628      	mov	r0, r5
   86b48:	4639      	mov	r1, r7
   86b4a:	4b2f      	ldr	r3, [pc, #188]	; (86c08 <ip_input+0x22c>)
   86b4c:	4798      	blx	r3
   86b4e:	2800      	cmp	r0, #0
   86b50:	d137      	bne.n	86bc2 <ip_input+0x1e6>
#endif /* LWIP_RAW */
  {

    switch (IPH_PROTO(iphdr)) {
   86b52:	f898 3009 	ldrb.w	r3, [r8, #9]
   86b56:	2b06      	cmp	r3, #6
   86b58:	d009      	beq.n	86b6e <ip_input+0x192>
   86b5a:	2b11      	cmp	r3, #17
   86b5c:	d002      	beq.n	86b64 <ip_input+0x188>
   86b5e:	2b01      	cmp	r3, #1
   86b60:	d10f      	bne.n	86b82 <ip_input+0x1a6>
   86b62:	e009      	b.n	86b78 <ip_input+0x19c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
   86b64:	4628      	mov	r0, r5
   86b66:	4639      	mov	r1, r7
   86b68:	4b28      	ldr	r3, [pc, #160]	; (86c0c <ip_input+0x230>)
   86b6a:	4798      	blx	r3
      break;
   86b6c:	e029      	b.n	86bc2 <ip_input+0x1e6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
   86b6e:	4628      	mov	r0, r5
   86b70:	4639      	mov	r1, r7
   86b72:	4b27      	ldr	r3, [pc, #156]	; (86c10 <ip_input+0x234>)
   86b74:	4798      	blx	r3
      break;
   86b76:	e024      	b.n	86bc2 <ip_input+0x1e6>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
   86b78:	4628      	mov	r0, r5
   86b7a:	4639      	mov	r1, r7
   86b7c:	4b25      	ldr	r3, [pc, #148]	; (86c14 <ip_input+0x238>)
   86b7e:	4798      	blx	r3
      break;
   86b80:	e01f      	b.n	86bc2 <ip_input+0x1e6>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
   86b82:	4b1b      	ldr	r3, [pc, #108]	; (86bf0 <ip_input+0x214>)
   86b84:	6818      	ldr	r0, [r3, #0]
   86b86:	4639      	mov	r1, r7
   86b88:	4b1b      	ldr	r3, [pc, #108]	; (86bf8 <ip_input+0x21c>)
   86b8a:	4798      	blx	r3
   86b8c:	b958      	cbnz	r0, 86ba6 <ip_input+0x1ca>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
   86b8e:	4b18      	ldr	r3, [pc, #96]	; (86bf0 <ip_input+0x214>)
   86b90:	681b      	ldr	r3, [r3, #0]
   86b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
   86b96:	2be0      	cmp	r3, #224	; 0xe0
   86b98:	d005      	beq.n	86ba6 <ip_input+0x1ca>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
   86b9a:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
   86b9e:	4628      	mov	r0, r5
   86ba0:	2102      	movs	r1, #2
   86ba2:	4b1d      	ldr	r3, [pc, #116]	; (86c18 <ip_input+0x23c>)
   86ba4:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
   86ba6:	4628      	mov	r0, r5
   86ba8:	4b0e      	ldr	r3, [pc, #56]	; (86be4 <ip_input+0x208>)
   86baa:	4798      	blx	r3

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
   86bac:	4b0b      	ldr	r3, [pc, #44]	; (86bdc <ip_input+0x200>)
   86bae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
   86bb2:	3201      	adds	r2, #1
   86bb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
   86bb8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
   86bbc:	3201      	adds	r2, #1
   86bbe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
   86bc2:	2300      	movs	r3, #0
   86bc4:	4a0e      	ldr	r2, [pc, #56]	; (86c00 <ip_input+0x224>)
   86bc6:	6013      	str	r3, [r2, #0]
  current_header = NULL;
   86bc8:	4a0e      	ldr	r2, [pc, #56]	; (86c04 <ip_input+0x228>)
   86bca:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_src);
   86bcc:	4a09      	ldr	r2, [pc, #36]	; (86bf4 <ip_input+0x218>)
   86bce:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_dest);
   86bd0:	4a07      	ldr	r2, [pc, #28]	; (86bf0 <ip_input+0x214>)
   86bd2:	6013      	str	r3, [r2, #0]

  return ERR_OK;
}
   86bd4:	2000      	movs	r0, #0
   86bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86bda:	bf00      	nop
   86bdc:	20076788 	.word	0x20076788
   86be0:	000864dd 	.word	0x000864dd
   86be4:	00088045 	.word	0x00088045
   86be8:	00086921 	.word	0x00086921
   86bec:	00088249 	.word	0x00088249
   86bf0:	20075b64 	.word	0x20075b64
   86bf4:	20075b5c 	.word	0x20075b5c
   86bf8:	00086d99 	.word	0x00086d99
   86bfc:	0008706d 	.word	0x0008706d
   86c00:	20075b60 	.word	0x20075b60
   86c04:	20075b68 	.word	0x20075b68
   86c08:	000885a5 	.word	0x000885a5
   86c0c:	0008b68d 	.word	0x0008b68d
   86c10:	00089d79 	.word	0x00089d79
   86c14:	0008660d 	.word	0x0008660d
   86c18:	000867f5 	.word	0x000867f5
   86c1c:	20076780 	.word	0x20076780

00086c20 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
   86c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86c24:	b087      	sub	sp, #28
   86c26:	4605      	mov	r5, r0
   86c28:	9100      	str	r1, [sp, #0]
   86c2a:	4616      	mov	r6, r2
   86c2c:	4698      	mov	r8, r3
   86c2e:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
   86c32:	9f12      	ldr	r7, [sp, #72]	; 0x48
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);
   86c34:	89c3      	ldrh	r3, [r0, #14]
   86c36:	2b01      	cmp	r3, #1
   86c38:	d000      	beq.n	86c3c <ip_output_if+0x1c>
   86c3a:	e7fe      	b.n	86c3a <ip_output_if+0x1a>

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
   86c3c:	2a00      	cmp	r2, #0
   86c3e:	d056      	beq.n	86cee <ip_output_if+0xce>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
   86c40:	2114      	movs	r1, #20
   86c42:	4b3a      	ldr	r3, [pc, #232]	; (86d2c <ip_output_if+0x10c>)
   86c44:	4798      	blx	r3
   86c46:	b138      	cbz	r0, 86c58 <ip_output_if+0x38>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
   86c48:	4b39      	ldr	r3, [pc, #228]	; (86d30 <ip_output_if+0x110>)
   86c4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
   86c4e:	3201      	adds	r2, #1
   86c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
   86c54:	20fe      	movs	r0, #254	; 0xfe
   86c56:	e065      	b.n	86d24 <ip_output_if+0x104>
    }

    iphdr = (struct ip_hdr *)p->payload;
   86c58:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
   86c5a:	896b      	ldrh	r3, [r5, #10]
   86c5c:	2b13      	cmp	r3, #19
   86c5e:	d800      	bhi.n	86c62 <ip_output_if+0x42>
   86c60:	e7fe      	b.n	86c60 <ip_output_if+0x40>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
   86c62:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
   86c66:	f884 9009 	strb.w	r9, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
   86c6a:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
   86c6e:	f8cd 9004 	str.w	r9, [sp, #4]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
   86c72:	6833      	ldr	r3, [r6, #0]
   86c74:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
   86c76:	b29a      	uxth	r2, r3
   86c78:	9202      	str	r2, [sp, #8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
   86c7a:	0c1b      	lsrs	r3, r3, #16
   86c7c:	9303      	str	r3, [sp, #12]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHLTOS_SET(iphdr, 4, ip_hlen / 4, tos);
   86c7e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   86c82:	f440 408a 	orr.w	r0, r0, #17664	; 0x4500
   86c86:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 86d38 <ip_output_if+0x118>
   86c8a:	47c8      	blx	r9
   86c8c:	4682      	mov	sl, r0
   86c8e:	8020      	strh	r0, [r4, #0]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_v_hl_tos;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
   86c90:	8928      	ldrh	r0, [r5, #8]
   86c92:	47c8      	blx	r9
   86c94:	4683      	mov	fp, r0
   86c96:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
   86c98:	2300      	movs	r3, #0
   86c9a:	71a3      	strb	r3, [r4, #6]
   86c9c:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
   86c9e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 86d3c <ip_output_if+0x11c>
   86ca2:	f8b8 0000 	ldrh.w	r0, [r8]
   86ca6:	47c8      	blx	r9
   86ca8:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
   86caa:	f8b8 3000 	ldrh.w	r3, [r8]
   86cae:	3301      	adds	r3, #1
   86cb0:	f8a8 3000 	strh.w	r3, [r8]

    if (ip_addr_isany(src)) {
   86cb4:	9b00      	ldr	r3, [sp, #0]
   86cb6:	b10b      	cbz	r3, 86cbc <ip_output_if+0x9c>
   86cb8:	681b      	ldr	r3, [r3, #0]
   86cba:	b913      	cbnz	r3, 86cc2 <ip_output_if+0xa2>
      ip_addr_copy(iphdr->src, netif->ip_addr);
   86cbc:	687b      	ldr	r3, [r7, #4]
   86cbe:	60e3      	str	r3, [r4, #12]
   86cc0:	e000      	b.n	86cc4 <ip_output_if+0xa4>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
   86cc2:	60e3      	str	r3, [r4, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
   86cc4:	68e3      	ldr	r3, [r4, #12]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
   86cc6:	9903      	ldr	r1, [sp, #12]
   86cc8:	9a02      	ldr	r2, [sp, #8]
   86cca:	4411      	add	r1, r2
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
   86ccc:	b29a      	uxth	r2, r3

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
   86cce:	440a      	add	r2, r1
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHLTOS_SET(iphdr, 4, ip_hlen / 4, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_v_hl_tos;
   86cd0:	eb02 4313 	add.w	r3, r2, r3, lsr #16
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
   86cd4:	9a01      	ldr	r2, [sp, #4]
   86cd6:	4413      	add	r3, r2
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, htons(ip_id));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
   86cd8:	4453      	add	r3, sl
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
   86cda:	445b      	add	r3, fp
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
   86cdc:	4403      	add	r3, r0
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
   86cde:	b29a      	uxth	r2, r3
   86ce0:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
   86ce4:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
   86ce8:	43db      	mvns	r3, r3
   86cea:	8163      	strh	r3, [r4, #10]
   86cec:	e004      	b.n	86cf8 <ip_output_if+0xd8>
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    ip_addr_copy(dest_addr, iphdr->dest);
   86cee:	6843      	ldr	r3, [r0, #4]
   86cf0:	691b      	ldr	r3, [r3, #16]
   86cf2:	ae06      	add	r6, sp, #24
   86cf4:	f846 3d04 	str.w	r3, [r6, #-4]!
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
   86cf8:	4b0d      	ldr	r3, [pc, #52]	; (86d30 <ip_output_if+0x110>)
   86cfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
   86cfe:	3201      	adds	r2, #1
   86d00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
   86d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   86d06:	b143      	cbz	r3, 86d1a <ip_output_if+0xfa>
   86d08:	892a      	ldrh	r2, [r5, #8]
   86d0a:	429a      	cmp	r2, r3
   86d0c:	d905      	bls.n	86d1a <ip_output_if+0xfa>
    return ip_frag(p, netif, dest);
   86d0e:	4628      	mov	r0, r5
   86d10:	4639      	mov	r1, r7
   86d12:	4632      	mov	r2, r6
   86d14:	4b07      	ldr	r3, [pc, #28]	; (86d34 <ip_output_if+0x114>)
   86d16:	4798      	blx	r3
   86d18:	e004      	b.n	86d24 <ip_output_if+0x104>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
   86d1a:	697b      	ldr	r3, [r7, #20]
   86d1c:	4638      	mov	r0, r7
   86d1e:	4629      	mov	r1, r5
   86d20:	4632      	mov	r2, r6
   86d22:	4798      	blx	r3
}
   86d24:	b240      	sxtb	r0, r0
   86d26:	b007      	add	sp, #28
   86d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d2c:	00087fd1 	.word	0x00087fd1
   86d30:	20076788 	.word	0x20076788
   86d34:	00087455 	.word	0x00087455
   86d38:	000864d1 	.word	0x000864d1
   86d3c:	20074618 	.word	0x20074618

00086d40 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
   86d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   86d42:	b085      	sub	sp, #20
   86d44:	4605      	mov	r5, r0
   86d46:	460f      	mov	r7, r1
   86d48:	4614      	mov	r4, r2
   86d4a:	461e      	mov	r6, r3
  struct netif *netif;

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);
   86d4c:	89c3      	ldrh	r3, [r0, #14]
   86d4e:	2b01      	cmp	r3, #1
   86d50:	d000      	beq.n	86d54 <ip_output+0x14>
   86d52:	e7fe      	b.n	86d52 <ip_output+0x12>

  if ((netif = ip_route(dest)) == NULL) {
   86d54:	4610      	mov	r0, r2
   86d56:	4b0d      	ldr	r3, [pc, #52]	; (86d8c <ip_output+0x4c>)
   86d58:	4798      	blx	r3
   86d5a:	b938      	cbnz	r0, 86d6c <ip_output+0x2c>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
   86d5c:	4b0c      	ldr	r3, [pc, #48]	; (86d90 <ip_output+0x50>)
   86d5e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   86d62:	3201      	adds	r2, #1
   86d64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    return ERR_RTE;
   86d68:	20fc      	movs	r0, #252	; 0xfc
   86d6a:	e00c      	b.n	86d86 <ip_output+0x46>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
   86d6c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   86d70:	9200      	str	r2, [sp, #0]
   86d72:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   86d76:	9201      	str	r2, [sp, #4]
   86d78:	9002      	str	r0, [sp, #8]
   86d7a:	4628      	mov	r0, r5
   86d7c:	4639      	mov	r1, r7
   86d7e:	4622      	mov	r2, r4
   86d80:	4633      	mov	r3, r6
   86d82:	4c04      	ldr	r4, [pc, #16]	; (86d94 <ip_output+0x54>)
   86d84:	47a0      	blx	r4
}
   86d86:	b240      	sxtb	r0, r0
   86d88:	b005      	add	sp, #20
   86d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86d8c:	00086985 	.word	0x00086985
   86d90:	20076788 	.word	0x20076788
   86d94:	00086c21 	.word	0x00086c21

00086d98 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
   86d98:	4603      	mov	r3, r0
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
   86d9a:	1e42      	subs	r2, r0, #1
   86d9c:	f112 0f03 	cmn.w	r2, #3
   86da0:	d814      	bhi.n	86dcc <ip4_addr_isbroadcast+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
   86da2:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   86da6:	f002 0202 	and.w	r2, r2, #2
   86daa:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   86dae:	b192      	cbz	r2, 86dd6 <ip4_addr_isbroadcast+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
   86db0:	684a      	ldr	r2, [r1, #4]
   86db2:	429a      	cmp	r2, r3
   86db4:	d00c      	beq.n	86dd0 <ip4_addr_isbroadcast+0x38>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
   86db6:	6888      	ldr	r0, [r1, #8]
   86db8:	405a      	eors	r2, r3
   86dba:	4202      	tst	r2, r0
   86dbc:	d10a      	bne.n	86dd4 <ip4_addr_isbroadcast+0x3c>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
   86dbe:	43c0      	mvns	r0, r0
   86dc0:	4003      	ands	r3, r0
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
      (addr == IPADDR_ANY)) {
    return 1;
   86dc2:	4298      	cmp	r0, r3
   86dc4:	bf14      	ite	ne
   86dc6:	2000      	movne	r0, #0
   86dc8:	2001      	moveq	r0, #1
   86dca:	4770      	bx	lr
   86dcc:	2001      	movs	r0, #1
   86dce:	4770      	bx	lr
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
   86dd0:	2000      	movs	r0, #0
   86dd2:	4770      	bx	lr
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
   86dd4:	2000      	movs	r0, #0
  }
}
   86dd6:	4770      	bx	lr

00086dd8 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
   86dd8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86ddc:	b082      	sub	sp, #8
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
   86dde:	6803      	ldr	r3, [r0, #0]
   86de0:	9301      	str	r3, [sp, #4]
   86de2:	f10d 0c03 	add.w	ip, sp, #3
   86de6:	f10d 0b07 	add.w	fp, sp, #7

  rp = buf;
   86dea:	4689      	mov	r9, r1
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
   86dec:	f04f 0800 	mov.w	r8, #0
   86df0:	46c2      	mov	sl, r8
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
   86df2:	4827      	ldr	r0, [pc, #156]	; (86e90 <ipaddr_ntoa_r+0xb8>)
   86df4:	f89c 5001 	ldrb.w	r5, [ip, #1]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
   86df8:	4654      	mov	r4, sl
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
   86dfa:	fba0 6305 	umull	r6, r3, r0, r5
   86dfe:	08db      	lsrs	r3, r3, #3
      inv[i++] = '0' + rem;
   86e00:	1c66      	adds	r6, r4, #1
   86e02:	b2f6      	uxtb	r6, r6
  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
   86e04:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   86e08:	eba5 0547 	sub.w	r5, r5, r7, lsl #1
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
   86e0c:	3530      	adds	r5, #48	; 0x30
   86e0e:	af02      	add	r7, sp, #8
   86e10:	4427      	add	r7, r4
   86e12:	f807 5c08 	strb.w	r5, [r7, #-8]
    } while(*ap);
   86e16:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   86e1a:	b10b      	cbz	r3, 86e20 <ipaddr_ntoa_r+0x48>
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
   86e1c:	4634      	mov	r4, r6
   86e1e:	e7ec      	b.n	86dfa <ipaddr_ntoa_r+0x22>
   86e20:	f80c 5f01 	strb.w	r5, [ip, #1]!
    } while(*ap);
    while(i--) {
   86e24:	b1ce      	cbz	r6, 86e5a <ipaddr_ntoa_r+0x82>
      if (len++ >= buflen) {
   86e26:	4542      	cmp	r2, r8
   86e28:	dd28      	ble.n	86e7c <ipaddr_ntoa_r+0xa4>
   86e2a:	464b      	mov	r3, r9
   86e2c:	f108 0701 	add.w	r7, r8, #1
   86e30:	ebc9 0707 	rsb	r7, r9, r7
   86e34:	ebc9 0808 	rsb	r8, r9, r8
   86e38:	e005      	b.n	86e46 <ipaddr_ntoa_r+0x6e>
   86e3a:	3c01      	subs	r4, #1
   86e3c:	b2e4      	uxtb	r4, r4
   86e3e:	eb03 0508 	add.w	r5, r3, r8
   86e42:	4295      	cmp	r5, r2
   86e44:	da1c      	bge.n	86e80 <ipaddr_ntoa_r+0xa8>
   86e46:	19de      	adds	r6, r3, r7
        return NULL;
      }
      *rp++ = inv[i];
   86e48:	ad02      	add	r5, sp, #8
   86e4a:	4425      	add	r5, r4
   86e4c:	f815 5c08 	ldrb.w	r5, [r5, #-8]
   86e50:	f803 5b01 	strb.w	r5, [r3], #1
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
   86e54:	2c00      	cmp	r4, #0
   86e56:	d1f0      	bne.n	86e3a <ipaddr_ntoa_r+0x62>
   86e58:	e001      	b.n	86e5e <ipaddr_ntoa_r+0x86>
   86e5a:	4646      	mov	r6, r8
   86e5c:	464b      	mov	r3, r9
      if (len++ >= buflen) {
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
   86e5e:	f106 0801 	add.w	r8, r6, #1
   86e62:	42b2      	cmp	r2, r6
   86e64:	dd0e      	ble.n	86e84 <ipaddr_ntoa_r+0xac>
      return NULL;
    }
    *rp++ = '.';
   86e66:	f103 0901 	add.w	r9, r3, #1
   86e6a:	f04f 042e 	mov.w	r4, #46	; 0x2e
   86e6e:	701c      	strb	r4, [r3, #0]

  s_addr = ip4_addr_get_u32(addr);

  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
   86e70:	45dc      	cmp	ip, fp
   86e72:	d1bf      	bne.n	86df4 <ipaddr_ntoa_r+0x1c>
      return NULL;
    }
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
   86e74:	2200      	movs	r2, #0
   86e76:	701a      	strb	r2, [r3, #0]
  return buf;
   86e78:	4608      	mov	r0, r1
   86e7a:	e004      	b.n	86e86 <ipaddr_ntoa_r+0xae>
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
      if (len++ >= buflen) {
        return NULL;
   86e7c:	2000      	movs	r0, #0
   86e7e:	e002      	b.n	86e86 <ipaddr_ntoa_r+0xae>
   86e80:	2000      	movs	r0, #0
   86e82:	e000      	b.n	86e86 <ipaddr_ntoa_r+0xae>
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
   86e84:	2000      	movs	r0, #0
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  return buf;
}
   86e86:	b002      	add	sp, #8
   86e88:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86e8c:	4770      	bx	lr
   86e8e:	bf00      	nop
   86e90:	cccccccd 	.word	0xcccccccd

00086e94 <ipaddr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
ipaddr_ntoa(const ip_addr_t *addr)
{
   86e94:	b508      	push	{r3, lr}
  static char str[16];
  return ipaddr_ntoa_r(addr, str, 16);
   86e96:	4902      	ldr	r1, [pc, #8]	; (86ea0 <ipaddr_ntoa+0xc>)
   86e98:	2210      	movs	r2, #16
   86e9a:	4b02      	ldr	r3, [pc, #8]	; (86ea4 <ipaddr_ntoa+0x10>)
   86e9c:	4798      	blx	r3
}
   86e9e:	bd08      	pop	{r3, pc}
   86ea0:	2007461c 	.word	0x2007461c
   86ea4:	00086dd9 	.word	0x00086dd9

00086ea8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
   86ea8:	b508      	push	{r3, lr}
   86eaa:	4603      	mov	r3, r0
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
   86eac:	4a08      	ldr	r2, [pc, #32]	; (86ed0 <ip_reass_dequeue_datagram+0x28>)
   86eae:	6812      	ldr	r2, [r2, #0]
   86eb0:	4282      	cmp	r2, r0
   86eb2:	d103      	bne.n	86ebc <ip_reass_dequeue_datagram+0x14>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
   86eb4:	6811      	ldr	r1, [r2, #0]
   86eb6:	4a06      	ldr	r2, [pc, #24]	; (86ed0 <ip_reass_dequeue_datagram+0x28>)
   86eb8:	6011      	str	r1, [r2, #0]
   86eba:	e003      	b.n	86ec4 <ip_reass_dequeue_datagram+0x1c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
   86ebc:	b901      	cbnz	r1, 86ec0 <ip_reass_dequeue_datagram+0x18>
   86ebe:	e7fe      	b.n	86ebe <ip_reass_dequeue_datagram+0x16>
    prev->next = ipr->next;
   86ec0:	6802      	ldr	r2, [r0, #0]
   86ec2:	600a      	str	r2, [r1, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
   86ec4:	2005      	movs	r0, #5
   86ec6:	4619      	mov	r1, r3
   86ec8:	4b02      	ldr	r3, [pc, #8]	; (86ed4 <ip_reass_dequeue_datagram+0x2c>)
   86eca:	4798      	blx	r3
   86ecc:	bd08      	pop	{r3, pc}
   86ece:	bf00      	nop
   86ed0:	2007462c 	.word	0x2007462c
   86ed4:	00087d61 	.word	0x00087d61

00086ed8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
   86ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86edc:	4605      	mov	r5, r0
   86ede:	460f      	mov	r7, r1
  u16_t pbufs_freed = 0;
  u8_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
   86ee0:	4281      	cmp	r1, r0
   86ee2:	d100      	bne.n	86ee6 <ip_reass_free_complete_datagram+0xe>
   86ee4:	e7fe      	b.n	86ee4 <ip_reass_free_complete_datagram+0xc>
  if (prev != NULL) {
   86ee6:	b119      	cbz	r1, 86ef0 <ip_reass_free_complete_datagram+0x18>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
   86ee8:	680b      	ldr	r3, [r1, #0]
   86eea:	4283      	cmp	r3, r0
   86eec:	d000      	beq.n	86ef0 <ip_reass_free_complete_datagram+0x18>
   86eee:	e7fe      	b.n	86eee <ip_reass_free_complete_datagram+0x16>
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
   86ef0:	686e      	ldr	r6, [r5, #4]
   86ef2:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
   86ef4:	889a      	ldrh	r2, [r3, #4]
   86ef6:	bb02      	cbnz	r2, 86f3a <ip_reass_free_complete_datagram+0x62>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
    ipr->p = iprh->next_pbuf;
   86ef8:	681b      	ldr	r3, [r3, #0]
   86efa:	606b      	str	r3, [r5, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
   86efc:	6872      	ldr	r2, [r6, #4]
   86efe:	462b      	mov	r3, r5
   86f00:	f853 1f08 	ldr.w	r1, [r3, #8]!
   86f04:	f8d3 e004 	ldr.w	lr, [r3, #4]
   86f08:	689c      	ldr	r4, [r3, #8]
   86f0a:	68d8      	ldr	r0, [r3, #12]
   86f0c:	6011      	str	r1, [r2, #0]
   86f0e:	f8c2 e004 	str.w	lr, [r2, #4]
   86f12:	6094      	str	r4, [r2, #8]
   86f14:	60d0      	str	r0, [r2, #12]
   86f16:	6919      	ldr	r1, [r3, #16]
   86f18:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
   86f1a:	4630      	mov	r0, r6
   86f1c:	2101      	movs	r1, #1
   86f1e:	4b1b      	ldr	r3, [pc, #108]	; (86f8c <ip_reass_free_complete_datagram+0xb4>)
   86f20:	4798      	blx	r3
    clen = pbuf_clen(p);
   86f22:	4630      	mov	r0, r6
   86f24:	4b1a      	ldr	r3, [pc, #104]	; (86f90 <ip_reass_free_complete_datagram+0xb8>)
   86f26:	4798      	blx	r3
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
   86f28:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   86f2c:	db00      	blt.n	86f30 <ip_reass_free_complete_datagram+0x58>
   86f2e:	e7fe      	b.n	86f2e <ip_reass_free_complete_datagram+0x56>
    pbufs_freed += clen;
   86f30:	4604      	mov	r4, r0
    pbuf_free(p);
   86f32:	4630      	mov	r0, r6
   86f34:	4b17      	ldr	r3, [pc, #92]	; (86f94 <ip_reass_free_complete_datagram+0xbc>)
   86f36:	4798      	blx	r3
   86f38:	e000      	b.n	86f3c <ip_reass_free_complete_datagram+0x64>
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  u16_t pbufs_freed = 0;
   86f3a:	2400      	movs	r4, #0
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
   86f3c:	686e      	ldr	r6, [r5, #4]
  while (p != NULL) {
   86f3e:	b1b6      	cbz	r6, 86f6e <ip_reass_free_complete_datagram+0x96>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
   86f40:	f8df a04c 	ldr.w	sl, [pc, #76]	; 86f90 <ip_reass_free_complete_datagram+0xb8>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
   86f44:	f8df 904c 	ldr.w	r9, [pc, #76]	; 86f94 <ip_reass_free_complete_datagram+0xbc>
  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
   86f48:	6873      	ldr	r3, [r6, #4]
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
   86f4a:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
   86f4e:	4630      	mov	r0, r6
   86f50:	47d0      	blx	sl
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
   86f52:	1823      	adds	r3, r4, r0
   86f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86f58:	db00      	blt.n	86f5c <ip_reass_free_complete_datagram+0x84>
   86f5a:	e7fe      	b.n	86f5a <ip_reass_free_complete_datagram+0x82>
    pbufs_freed += clen;
   86f5c:	4404      	add	r4, r0
   86f5e:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
   86f60:	4630      	mov	r0, r6
   86f62:	47c8      	blx	r9
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
   86f64:	f1b8 0f00 	cmp.w	r8, #0
   86f68:	d001      	beq.n	86f6e <ip_reass_free_complete_datagram+0x96>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
   86f6a:	4646      	mov	r6, r8
   86f6c:	e7ec      	b.n	86f48 <ip_reass_free_complete_datagram+0x70>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
   86f6e:	4628      	mov	r0, r5
   86f70:	4639      	mov	r1, r7
   86f72:	4b09      	ldr	r3, [pc, #36]	; (86f98 <ip_reass_free_complete_datagram+0xc0>)
   86f74:	4798      	blx	r3
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
   86f76:	4b09      	ldr	r3, [pc, #36]	; (86f9c <ip_reass_free_complete_datagram+0xc4>)
   86f78:	881b      	ldrh	r3, [r3, #0]
   86f7a:	42a3      	cmp	r3, r4
   86f7c:	d200      	bcs.n	86f80 <ip_reass_free_complete_datagram+0xa8>
   86f7e:	e7fe      	b.n	86f7e <ip_reass_free_complete_datagram+0xa6>
  ip_reass_pbufcount -= pbufs_freed;
   86f80:	1b1b      	subs	r3, r3, r4
   86f82:	4a06      	ldr	r2, [pc, #24]	; (86f9c <ip_reass_free_complete_datagram+0xc4>)
   86f84:	8013      	strh	r3, [r2, #0]

  return pbufs_freed;
}
   86f86:	4620      	mov	r0, r4
   86f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86f8c:	00086805 	.word	0x00086805
   86f90:	000882bd 	.word	0x000882bd
   86f94:	00088045 	.word	0x00088045
   86f98:	00086ea9 	.word	0x00086ea9
   86f9c:	20074630 	.word	0x20074630

00086fa0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
   86fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86fa4:	4605      	mov	r5, r0
   86fa6:	4689      	mov	r9, r1
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
   86fa8:	2600      	movs	r6, #0
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
   86faa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 87014 <ip_reass_remove_oldest_datagram+0x74>
  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
   86fae:	46b2      	mov	sl, r6

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
   86fb0:	4637      	mov	r7, r6
    other_datagrams = 0;
    r = reassdatagrams;
   86fb2:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
   86fb6:	b343      	cbz	r3, 8700a <ip_reass_remove_oldest_datagram+0x6a>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
   86fb8:	f8d5 c00c 	ldr.w	ip, [r5, #12]
  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
   86fbc:	4654      	mov	r4, sl

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
   86fbe:	4639      	mov	r1, r7
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
   86fc0:	4638      	mov	r0, r7
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
   86fc2:	695a      	ldr	r2, [r3, #20]
   86fc4:	4562      	cmp	r2, ip
   86fc6:	d109      	bne.n	86fdc <ip_reass_remove_oldest_datagram+0x3c>
   86fc8:	f8d5 b010 	ldr.w	fp, [r5, #16]
   86fcc:	699a      	ldr	r2, [r3, #24]
   86fce:	455a      	cmp	r2, fp
   86fd0:	d104      	bne.n	86fdc <ip_reass_remove_oldest_datagram+0x3c>
   86fd2:	f8b3 b00c 	ldrh.w	fp, [r3, #12]
   86fd6:	88aa      	ldrh	r2, [r5, #4]
   86fd8:	4593      	cmp	fp, r2
   86fda:	d009      	beq.n	86ff0 <ip_reass_remove_oldest_datagram+0x50>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
   86fdc:	3401      	adds	r4, #1
        if (oldest == NULL) {
   86fde:	b130      	cbz	r0, 86fee <ip_reass_remove_oldest_datagram+0x4e>
          oldest = r;
        } else if (r->timer <= oldest->timer) {
   86fe0:	f893 b01f 	ldrb.w	fp, [r3, #31]
   86fe4:	7fc2      	ldrb	r2, [r0, #31]
   86fe6:	4593      	cmp	fp, r2
   86fe8:	bf98      	it	ls
   86fea:	4618      	movls	r0, r3
   86fec:	e000      	b.n	86ff0 <ip_reass_remove_oldest_datagram+0x50>
   86fee:	4618      	mov	r0, r3
          /* older than the previous oldest */
          oldest = r;
        }
      }
      if (r->next != NULL) {
   86ff0:	681a      	ldr	r2, [r3, #0]
   86ff2:	b112      	cbz	r2, 86ffa <ip_reass_remove_oldest_datagram+0x5a>
   86ff4:	4619      	mov	r1, r3
   86ff6:	4613      	mov	r3, r2
   86ff8:	e7e3      	b.n	86fc2 <ip_reass_remove_oldest_datagram+0x22>
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
   86ffa:	b110      	cbz	r0, 87002 <ip_reass_remove_oldest_datagram+0x62>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
   86ffc:	4b04      	ldr	r3, [pc, #16]	; (87010 <ip_reass_remove_oldest_datagram+0x70>)
   86ffe:	4798      	blx	r3
      pbufs_freed += pbufs_freed_current;
   87000:	4406      	add	r6, r0
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
   87002:	454e      	cmp	r6, r9
   87004:	da01      	bge.n	8700a <ip_reass_remove_oldest_datagram+0x6a>
   87006:	2c01      	cmp	r4, #1
   87008:	dcd3      	bgt.n	86fb2 <ip_reass_remove_oldest_datagram+0x12>
  return pbufs_freed;
}
   8700a:	4630      	mov	r0, r6
   8700c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87010:	00086ed9 	.word	0x00086ed9
   87014:	2007462c 	.word	0x2007462c

00087018 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
   87018:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
   8701a:	4604      	mov	r4, r0
   8701c:	b900      	cbnz	r0, 87020 <ipfrag_free_pbuf_custom+0x8>
   8701e:	e7fe      	b.n	8701e <ipfrag_free_pbuf_custom+0x6>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
   87020:	6940      	ldr	r0, [r0, #20]
   87022:	b108      	cbz	r0, 87028 <ipfrag_free_pbuf_custom+0x10>
    pbuf_free(pcr->original);
   87024:	4b03      	ldr	r3, [pc, #12]	; (87034 <ipfrag_free_pbuf_custom+0x1c>)
   87026:	4798      	blx	r3
/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
   87028:	2006      	movs	r0, #6
   8702a:	4621      	mov	r1, r4
   8702c:	4b02      	ldr	r3, [pc, #8]	; (87038 <ipfrag_free_pbuf_custom+0x20>)
   8702e:	4798      	blx	r3
   87030:	bd10      	pop	{r4, pc}
   87032:	bf00      	nop
   87034:	00088045 	.word	0x00088045
   87038:	00087d61 	.word	0x00087d61

0008703c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
   8703c:	b570      	push	{r4, r5, r6, lr}
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
   8703e:	4b09      	ldr	r3, [pc, #36]	; (87064 <ip_reass_tmr+0x28>)
   87040:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
   87042:	b170      	cbz	r0, 87062 <ip_reass_tmr+0x26>
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;
   87044:	2400      	movs	r4, #0
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
   87046:	4e08      	ldr	r6, [pc, #32]	; (87068 <ip_reass_tmr+0x2c>)

  r = reassdatagrams;
  while (r != NULL) {
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
   87048:	7fc3      	ldrb	r3, [r0, #31]
   8704a:	b123      	cbz	r3, 87056 <ip_reass_tmr+0x1a>
      r->timer--;
   8704c:	3b01      	subs	r3, #1
   8704e:	77c3      	strb	r3, [r0, #31]
   87050:	4604      	mov	r4, r0
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
      r = r->next;
   87052:	6800      	ldr	r0, [r0, #0]
   87054:	e003      	b.n	8705e <ip_reass_tmr+0x22>
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
   87056:	6805      	ldr	r5, [r0, #0]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
   87058:	4621      	mov	r1, r4
   8705a:	47b0      	blx	r6
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
   8705c:	4628      	mov	r0, r5
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
   8705e:	2800      	cmp	r0, #0
   87060:	d1f2      	bne.n	87048 <ip_reass_tmr+0xc>
   87062:	bd70      	pop	{r4, r5, r6, pc}
   87064:	2007462c 	.word	0x2007462c
   87068:	00086ed9 	.word	0x00086ed9

0008706c <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
   8706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87070:	b083      	sub	sp, #12
   87072:	4607      	mov	r7, r0
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;

  IPFRAG_STATS_INC(ip_frag.recv);
   87074:	4ba4      	ldr	r3, [pc, #656]	; (87308 <ip_reass+0x29c>)
   87076:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   87078:	3201      	adds	r2, #1
   8707a:	865a      	strh	r2, [r3, #50]	; 0x32
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
   8707c:	6846      	ldr	r6, [r0, #4]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
   8707e:	8830      	ldrh	r0, [r6, #0]
   87080:	4ba2      	ldr	r3, [pc, #648]	; (8730c <ip_reass+0x2a0>)
   87082:	4798      	blx	r3
   87084:	f3c0 2003 	ubfx	r0, r0, #8, #4
   87088:	2805      	cmp	r0, #5
   8708a:	d006      	beq.n	8709a <ip_reass+0x2e>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
   8708c:	4b9e      	ldr	r3, [pc, #632]	; (87308 <ip_reass+0x29c>)
   8708e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   87092:	3201      	adds	r2, #1
   87094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
   87098:	e15d      	b.n	87356 <ip_reass+0x2ea>
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
   8709a:	88f0      	ldrh	r0, [r6, #6]
   8709c:	4c9b      	ldr	r4, [pc, #620]	; (8730c <ip_reass+0x2a0>)
   8709e:	47a0      	blx	r4
   870a0:	9001      	str	r0, [sp, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
   870a2:	8870      	ldrh	r0, [r6, #2]
   870a4:	47a0      	blx	r4
   870a6:	4682      	mov	sl, r0
   870a8:	8830      	ldrh	r0, [r6, #0]
   870aa:	47a0      	blx	r4
   870ac:	4683      	mov	fp, r0

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
   870ae:	4638      	mov	r0, r7
   870b0:	4b97      	ldr	r3, [pc, #604]	; (87310 <ip_reass+0x2a4>)
   870b2:	4798      	blx	r3
   870b4:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
   870b6:	4b97      	ldr	r3, [pc, #604]	; (87314 <ip_reass+0x2a8>)
   870b8:	881b      	ldrh	r3, [r3, #0]
   870ba:	4403      	add	r3, r0
   870bc:	2b0a      	cmp	r3, #10
   870be:	dd0e      	ble.n	870de <ip_reass+0x72>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
   870c0:	4630      	mov	r0, r6
   870c2:	4641      	mov	r1, r8
   870c4:	4b94      	ldr	r3, [pc, #592]	; (87318 <ip_reass+0x2ac>)
   870c6:	4798      	blx	r3
   870c8:	b120      	cbz	r0, 870d4 <ip_reass+0x68>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
   870ca:	4b92      	ldr	r3, [pc, #584]	; (87314 <ip_reass+0x2a8>)
   870cc:	881b      	ldrh	r3, [r3, #0]
   870ce:	4443      	add	r3, r8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
   870d0:	2b0a      	cmp	r3, #10
   870d2:	dd04      	ble.n	870de <ip_reass+0x72>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
   870d4:	4b8c      	ldr	r3, [pc, #560]	; (87308 <ip_reass+0x29c>)
   870d6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   870d8:	3201      	adds	r2, #1
   870da:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
   870dc:	e13b      	b.n	87356 <ip_reass+0x2ea>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
   870de:	4b8f      	ldr	r3, [pc, #572]	; (8731c <ip_reass+0x2b0>)
   870e0:	681c      	ldr	r4, [r3, #0]
   870e2:	b1d4      	cbz	r4, 8711a <ip_reass+0xae>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
   870e4:	68f2      	ldr	r2, [r6, #12]
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
   870e6:	2500      	movs	r5, #0
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
   870e8:	6963      	ldr	r3, [r4, #20]
   870ea:	4293      	cmp	r3, r2
   870ec:	d10f      	bne.n	8710e <ip_reass+0xa2>
   870ee:	6931      	ldr	r1, [r6, #16]
   870f0:	69a3      	ldr	r3, [r4, #24]
   870f2:	428b      	cmp	r3, r1
   870f4:	d10b      	bne.n	8710e <ip_reass+0xa2>
   870f6:	89a1      	ldrh	r1, [r4, #12]
   870f8:	88b3      	ldrh	r3, [r6, #4]
   870fa:	4299      	cmp	r1, r3
   870fc:	d107      	bne.n	8710e <ip_reass+0xa2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
   870fe:	4b82      	ldr	r3, [pc, #520]	; (87308 <ip_reass+0x29c>)
   87100:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
   87104:	3201      	adds	r2, #1
   87106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
   8710a:	b9fc      	cbnz	r4, 8714c <ip_reass+0xe0>
   8710c:	e004      	b.n	87118 <ip_reass+0xac>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
   8710e:	6823      	ldr	r3, [r4, #0]
   87110:	b11b      	cbz	r3, 8711a <ip_reass+0xae>
   87112:	4625      	mov	r5, r4
   87114:	461c      	mov	r4, r3
   87116:	e7e7      	b.n	870e8 <ip_reass+0x7c>
   87118:	462c      	mov	r4, r5
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
   8711a:	2005      	movs	r0, #5
   8711c:	4b80      	ldr	r3, [pc, #512]	; (87320 <ip_reass+0x2b4>)
   8711e:	4798      	blx	r3
  if (ipr == NULL) {
   87120:	4681      	mov	r9, r0
   87122:	2800      	cmp	r0, #0
   87124:	f040 8156 	bne.w	873d4 <ip_reass+0x368>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
   87128:	4630      	mov	r0, r6
   8712a:	4641      	mov	r1, r8
   8712c:	4b7a      	ldr	r3, [pc, #488]	; (87318 <ip_reass+0x2ac>)
   8712e:	4798      	blx	r3
   87130:	4580      	cmp	r8, r0
   87132:	dc06      	bgt.n	87142 <ip_reass+0xd6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
   87134:	2005      	movs	r0, #5
   87136:	4b7a      	ldr	r3, [pc, #488]	; (87320 <ip_reass+0x2b4>)
   87138:	4798      	blx	r3
    }
    if (ipr == NULL)
   8713a:	4681      	mov	r9, r0
   8713c:	2800      	cmp	r0, #0
   8713e:	f040 8149 	bne.w	873d4 <ip_reass+0x368>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
   87142:	4b71      	ldr	r3, [pc, #452]	; (87308 <ip_reass+0x29c>)
   87144:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   87146:	3201      	adds	r2, #1
   87148:	879a      	strh	r2, [r3, #60]	; 0x3c
   8714a:	e104      	b.n	87356 <ip_reass+0x2ea>
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
   8714c:	88f0      	ldrh	r0, [r6, #6]
   8714e:	4b6f      	ldr	r3, [pc, #444]	; (8730c <ip_reass+0x2a0>)
   87150:	4798      	blx	r3
   87152:	f3c0 000c 	ubfx	r0, r0, #0, #13
   87156:	b988      	cbnz	r0, 8717c <ip_reass+0x110>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
   87158:	89e0      	ldrh	r0, [r4, #14]
   8715a:	4b6c      	ldr	r3, [pc, #432]	; (8730c <ip_reass+0x2a0>)
   8715c:	4798      	blx	r3
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
   8715e:	f3c0 000c 	ubfx	r0, r0, #0, #13
   87162:	b158      	cbz	r0, 8717c <ip_reass+0x110>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
   87164:	6832      	ldr	r2, [r6, #0]
   87166:	f8d6 e004 	ldr.w	lr, [r6, #4]
   8716a:	68b0      	ldr	r0, [r6, #8]
   8716c:	68f1      	ldr	r1, [r6, #12]
   8716e:	60a2      	str	r2, [r4, #8]
   87170:	f8c4 e00c 	str.w	lr, [r4, #12]
   87174:	6120      	str	r0, [r4, #16]
   87176:	6161      	str	r1, [r4, #20]
   87178:	6932      	ldr	r2, [r6, #16]
   8717a:	61a2      	str	r2, [r4, #24]
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
   8717c:	4b65      	ldr	r3, [pc, #404]	; (87314 <ip_reass+0x2a8>)
   8717e:	881a      	ldrh	r2, [r3, #0]
   87180:	4490      	add	r8, r2
   87182:	f8a3 8000 	strh.w	r8, [r3]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
   87186:	88f3      	ldrh	r3, [r6, #6]
   87188:	f003 0320 	and.w	r3, r3, #32
   8718c:	b29b      	uxth	r3, r3
   8718e:	b97b      	cbnz	r3, 871b0 <ip_reass+0x144>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
   87190:	7fa3      	ldrb	r3, [r4, #30]
   87192:	f043 0301 	orr.w	r3, r3, #1
   87196:	77a3      	strb	r3, [r4, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
   87198:	9a01      	ldr	r2, [sp, #4]
   8719a:	f3c2 030c 	ubfx	r3, r2, #0, #13
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
   8719e:	eb0a 0ac3 	add.w	sl, sl, r3, lsl #3
   871a2:	f3cb 2b03 	ubfx	fp, fp, #8, #4
   871a6:	ebcb 3b8b 	rsb	fp, fp, fp, lsl #14
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
    ipr->datagram_len = offset + len;
   871aa:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
   871ae:	83a3      	strh	r3, [r4, #28]
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
   871b0:	f8d7 8004 	ldr.w	r8, [r7, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
   871b4:	f8b8 0002 	ldrh.w	r0, [r8, #2]
   871b8:	4e54      	ldr	r6, [pc, #336]	; (8730c <ip_reass+0x2a0>)
   871ba:	47b0      	blx	r6
   871bc:	4682      	mov	sl, r0
   871be:	f8b8 0000 	ldrh.w	r0, [r8]
   871c2:	47b0      	blx	r6
   871c4:	4681      	mov	r9, r0
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
   871c6:	f8b8 0006 	ldrh.w	r0, [r8, #6]
   871ca:	47b0      	blx	r6
   871cc:	f3c0 000c 	ubfx	r0, r0, #0, #13
   871d0:	00c6      	lsls	r6, r0, #3
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
   871d2:	f8d7 8004 	ldr.w	r8, [r7, #4]
  iprh->next_pbuf = NULL;
   871d6:	2300      	movs	r3, #0
   871d8:	f888 3000 	strb.w	r3, [r8]
   871dc:	f888 3001 	strb.w	r3, [r8, #1]
   871e0:	f888 3002 	strb.w	r3, [r8, #2]
   871e4:	f888 3003 	strb.w	r3, [r8, #3]
  iprh->start = offset;
   871e8:	f8a8 6004 	strh.w	r6, [r8, #4]
  struct ip_hdr *fraghdr;
  int valid = 1;

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
   871ec:	44b2      	add	sl, r6
   871ee:	f3c9 2903 	ubfx	r9, r9, #8, #4
   871f2:	ebc9 3989 	rsb	r9, r9, r9, lsl #14
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  iprh->next_pbuf = NULL;
  iprh->start = offset;
  iprh->end = offset + len;
   871f6:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
   871fa:	fa1f f989 	uxth.w	r9, r9
   871fe:	f8a8 9006 	strh.w	r9, [r8, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
   87202:	6862      	ldr	r2, [r4, #4]
   87204:	2a00      	cmp	r2, #0
   87206:	f000 8108 	beq.w	8741a <ip_reass+0x3ae>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
   8720a:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
   8720c:	8899      	ldrh	r1, [r3, #4]
   8720e:	428e      	cmp	r6, r1
   87210:	f0c0 80aa 	bcc.w	87368 <ip_reass+0x2fc>
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
   87214:	d06c      	beq.n	872f0 <ip_reass+0x284>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
   87216:	88da      	ldrh	r2, [r3, #6]
   87218:	42b2      	cmp	r2, r6
   8721a:	d869      	bhi.n	872f0 <ip_reass+0x284>
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
   8721c:	f04f 0c01 	mov.w	ip, #1
   87220:	e01e      	b.n	87260 <ip_reass+0x1f4>
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
   87222:	6842      	ldr	r2, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
   87224:	8891      	ldrh	r1, [r2, #4]
   87226:	428e      	cmp	r6, r1
   87228:	d20e      	bcs.n	87248 <ip_reass+0x1dc>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
   8722a:	f8c8 0000 	str.w	r0, [r8]
      if (iprh_prev != NULL) {
   8722e:	2b00      	cmp	r3, #0
   87230:	f000 80f0 	beq.w	87414 <ip_reass+0x3a8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
   87234:	f8b3 a006 	ldrh.w	sl, [r3, #6]
   87238:	45b2      	cmp	sl, r6
   8723a:	d859      	bhi.n	872f0 <ip_reass+0x284>
   8723c:	8892      	ldrh	r2, [r2, #4]
   8723e:	454a      	cmp	r2, r9
   87240:	d356      	bcc.n	872f0 <ip_reass+0x284>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
   87242:	601f      	str	r7, [r3, #0]
    q = iprh_tmp->next_pbuf;
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
   87244:	bb00      	cbnz	r0, 87288 <ip_reass+0x21c>
   87246:	e011      	b.n	8726c <ip_reass+0x200>
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
   87248:	428e      	cmp	r6, r1
   8724a:	d051      	beq.n	872f0 <ip_reass+0x284>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
   8724c:	88d0      	ldrh	r0, [r2, #6]
   8724e:	42b0      	cmp	r0, r6
   87250:	d84e      	bhi.n	872f0 <ip_reass+0x284>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
   87252:	b123      	cbz	r3, 8725e <ip_reass+0x1f2>
        if (iprh_prev->end != iprh_tmp->start) {
   87254:	88db      	ldrh	r3, [r3, #6]
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
   87256:	428b      	cmp	r3, r1
   87258:	bf18      	it	ne
   8725a:	f04f 0c00 	movne.w	ip, #0
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
   8725e:	4613      	mov	r3, r2
           * and the previous fragment */
          valid = 0;
        }
      }
    }
    q = iprh_tmp->next_pbuf;
   87260:	6818      	ldr	r0, [r3, #0]
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
   87262:	2800      	cmp	r0, #0
   87264:	d1dd      	bne.n	87222 <ip_reass+0x1b6>
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
    if (iprh_prev != NULL) {
   87266:	2b00      	cmp	r3, #0
   87268:	f000 80d6 	beq.w	87418 <ip_reass+0x3ac>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
   8726c:	88da      	ldrh	r2, [r3, #6]
   8726e:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   87272:	4291      	cmp	r1, r2
   87274:	d200      	bcs.n	87278 <ip_reass+0x20c>
   87276:	e7fe      	b.n	87276 <ip_reass+0x20a>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
   87278:	601f      	str	r7, [r3, #0]
      if (iprh_prev->end != iprh->start) {
   8727a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   8727e:	4293      	cmp	r3, r2
   87280:	f040 80a6 	bne.w	873d0 <ip_reass+0x364>
   87284:	e000      	b.n	87288 <ip_reass+0x21c>
   87286:	e7fe      	b.n	87286 <ip_reass+0x21a>
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
   87288:	7fa3      	ldrb	r3, [r4, #30]
   8728a:	f013 0f01 	tst.w	r3, #1
   8728e:	f000 809f 	beq.w	873d0 <ip_reass+0x364>
    /* and had no wholes so far */
    if (valid) {
   87292:	f1bc 0f00 	cmp.w	ip, #0
   87296:	f000 809b 	beq.w	873d0 <ip_reass+0x364>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
   8729a:	6860      	ldr	r0, [r4, #4]
   8729c:	6846      	ldr	r6, [r0, #4]
   8729e:	88b3      	ldrh	r3, [r6, #4]
   872a0:	2b00      	cmp	r3, #0
   872a2:	f040 8095 	bne.w	873d0 <ip_reass+0x364>
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
   872a6:	f8d8 3000 	ldr.w	r3, [r8]
        while (q != NULL) {
   872aa:	2b00      	cmp	r3, #0
   872ac:	d061      	beq.n	87372 <ip_reass+0x306>
          iprh = (struct ip_reass_helper*)q->payload;
   872ae:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
   872b0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
   872b4:	889a      	ldrh	r2, [r3, #4]
   872b6:	4291      	cmp	r1, r2
   872b8:	d007      	beq.n	872ca <ip_reass+0x25e>
   872ba:	e089      	b.n	873d0 <ip_reass+0x364>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
          iprh = (struct ip_reass_helper*)q->payload;
   872bc:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
   872be:	88d9      	ldrh	r1, [r3, #6]
   872c0:	8893      	ldrh	r3, [r2, #4]
   872c2:	4299      	cmp	r1, r3
   872c4:	f040 8084 	bne.w	873d0 <ip_reass+0x364>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
          iprh = (struct ip_reass_helper*)q->payload;
   872c8:	4613      	mov	r3, r2
          if (iprh_prev->end != iprh->start) {
            valid = 0;
            break;
          }
          iprh_prev = iprh;
          q = iprh->next_pbuf;
   872ca:	681a      	ldr	r2, [r3, #0]
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
   872cc:	2a00      	cmp	r2, #0
   872ce:	d1f5      	bne.n	872bc <ip_reass+0x250>
   872d0:	4698      	mov	r8, r3
   872d2:	e04e      	b.n	87372 <ip_reass+0x306>
   872d4:	e7fe      	b.n	872d4 <ip_reass+0x268>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
          LWIP_ASSERT("sanity check", ipr->p != NULL);
          LWIP_ASSERT("sanity check",
   872d6:	4546      	cmp	r6, r8
   872d8:	d100      	bne.n	872dc <ip_reass+0x270>
   872da:	e7fe      	b.n	872da <ip_reass+0x26e>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
   872dc:	f8d8 3000 	ldr.w	r3, [r8]
   872e0:	b103      	cbz	r3, 872e4 <ip_reass+0x278>
   872e2:	e7fe      	b.n	872e2 <ip_reass+0x276>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
   872e4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
   872e8:	8ba2      	ldrh	r2, [r4, #28]
   872ea:	429a      	cmp	r2, r3
   872ec:	d044      	beq.n	87378 <ip_reass+0x30c>
   872ee:	e7fe      	b.n	872ee <ip_reass+0x282>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
   872f0:	4c08      	ldr	r4, [pc, #32]	; (87314 <ip_reass+0x2a8>)
   872f2:	8825      	ldrh	r5, [r4, #0]
   872f4:	4638      	mov	r0, r7
   872f6:	4b06      	ldr	r3, [pc, #24]	; (87310 <ip_reass+0x2a4>)
   872f8:	4798      	blx	r3
   872fa:	1a28      	subs	r0, r5, r0
   872fc:	8020      	strh	r0, [r4, #0]
  pbuf_free(new_p);
   872fe:	4638      	mov	r0, r7
   87300:	4b08      	ldr	r3, [pc, #32]	; (87324 <ip_reass+0x2b8>)
   87302:	4798      	blx	r3
   87304:	e064      	b.n	873d0 <ip_reass+0x364>
   87306:	bf00      	nop
   87308:	20076788 	.word	0x20076788
   8730c:	000864dd 	.word	0x000864dd
   87310:	000882bd 	.word	0x000882bd
   87314:	20074630 	.word	0x20074630
   87318:	00086fa1 	.word	0x00086fa1
   8731c:	2007462c 	.word	0x2007462c
   87320:	00087ce1 	.word	0x00087ce1
   87324:	00088045 	.word	0x00088045

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
      iprh = (struct ip_reass_helper*)r->payload;
   87328:	6877      	ldr	r7, [r6, #4]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
   8732a:	4630      	mov	r0, r6
   8732c:	4659      	mov	r1, fp
   8732e:	47d0      	blx	sl
      pbuf_cat(p, r);
   87330:	4640      	mov	r0, r8
   87332:	4631      	mov	r1, r6
   87334:	47c8      	blx	r9
      r = iprh->next_pbuf;
   87336:	683e      	ldr	r6, [r7, #0]
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
   87338:	2e00      	cmp	r6, #0
   8733a:	d1f5      	bne.n	87328 <ip_reass+0x2bc>
      pbuf_header(r, -IP_HLEN);
      pbuf_cat(p, r);
      r = iprh->next_pbuf;
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
   8733c:	4620      	mov	r0, r4
   8733e:	4629      	mov	r1, r5
   87340:	4b39      	ldr	r3, [pc, #228]	; (87428 <ip_reass+0x3bc>)
   87342:	4798      	blx	r3

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
   87344:	4c39      	ldr	r4, [pc, #228]	; (8742c <ip_reass+0x3c0>)
   87346:	8825      	ldrh	r5, [r4, #0]
   87348:	4640      	mov	r0, r8
   8734a:	4b39      	ldr	r3, [pc, #228]	; (87430 <ip_reass+0x3c4>)
   8734c:	4798      	blx	r3
   8734e:	1a28      	subs	r0, r5, r0
   87350:	8020      	strh	r0, [r4, #0]

    /* Return the pbuf chain */
    return p;
   87352:	4640      	mov	r0, r8
   87354:	e065      	b.n	87422 <ip_reass+0x3b6>
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
   87356:	4b37      	ldr	r3, [pc, #220]	; (87434 <ip_reass+0x3c8>)
   87358:	8eda      	ldrh	r2, [r3, #54]	; 0x36
   8735a:	3201      	adds	r2, #1
   8735c:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
   8735e:	4638      	mov	r0, r7
   87360:	4b35      	ldr	r3, [pc, #212]	; (87438 <ip_reass+0x3cc>)
   87362:	4798      	blx	r3
  return NULL;
   87364:	2000      	movs	r0, #0
   87366:	e05c      	b.n	87422 <ip_reass+0x3b6>
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
    if (iprh->start < iprh_tmp->start) {
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
   87368:	f8c8 2000 	str.w	r2, [r8]
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
   8736c:	f04f 0c01 	mov.w	ip, #1
   87370:	e050      	b.n	87414 <ip_reass+0x3a8>
          q = iprh->next_pbuf;
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
          LWIP_ASSERT("sanity check", ipr->p != NULL);
   87372:	2800      	cmp	r0, #0
   87374:	d1af      	bne.n	872d6 <ip_reass+0x26a>
   87376:	e7ad      	b.n	872d4 <ip_reass+0x268>
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
   87378:	3314      	adds	r3, #20
   8737a:	83a3      	strh	r3, [r4, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
   8737c:	6863      	ldr	r3, [r4, #4]
   8737e:	685f      	ldr	r7, [r3, #4]
   87380:	683e      	ldr	r6, [r7, #0]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
   87382:	4623      	mov	r3, r4
   87384:	f853 2f08 	ldr.w	r2, [r3, #8]!
   87388:	f8d3 e004 	ldr.w	lr, [r3, #4]
   8738c:	6898      	ldr	r0, [r3, #8]
   8738e:	68d9      	ldr	r1, [r3, #12]
   87390:	603a      	str	r2, [r7, #0]
   87392:	f8c7 e004 	str.w	lr, [r7, #4]
   87396:	60b8      	str	r0, [r7, #8]
   87398:	60f9      	str	r1, [r7, #12]
   8739a:	691a      	ldr	r2, [r3, #16]
   8739c:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
   8739e:	8ba0      	ldrh	r0, [r4, #28]
   873a0:	4b26      	ldr	r3, [pc, #152]	; (8743c <ip_reass+0x3d0>)
   873a2:	4798      	blx	r3
   873a4:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
   873a6:	2300      	movs	r3, #0
   873a8:	71bb      	strb	r3, [r7, #6]
   873aa:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
   873ac:	72bb      	strb	r3, [r7, #10]
   873ae:	72fb      	strb	r3, [r7, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
   873b0:	4638      	mov	r0, r7
   873b2:	2114      	movs	r1, #20
   873b4:	4b22      	ldr	r3, [pc, #136]	; (87440 <ip_reass+0x3d4>)
   873b6:	4798      	blx	r3
   873b8:	8178      	strh	r0, [r7, #10]

    p = ipr->p;
   873ba:	f8d4 8004 	ldr.w	r8, [r4, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
   873be:	2e00      	cmp	r6, #0
   873c0:	d0bc      	beq.n	8733c <ip_reass+0x2d0>
      iprh = (struct ip_reass_helper*)r->payload;

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
   873c2:	f06f 0b13 	mvn.w	fp, #19
   873c6:	f8df a084 	ldr.w	sl, [pc, #132]	; 8744c <ip_reass+0x3e0>
      pbuf_cat(p, r);
   873ca:	f8df 9084 	ldr.w	r9, [pc, #132]	; 87450 <ip_reass+0x3e4>
   873ce:	e7ab      	b.n	87328 <ip_reass+0x2bc>
    /* Return the pbuf chain */
    return p;
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
   873d0:	2000      	movs	r0, #0
   873d2:	e026      	b.n	87422 <ip_reass+0x3b6>
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
   873d4:	4648      	mov	r0, r9
   873d6:	2100      	movs	r1, #0
   873d8:	2220      	movs	r2, #32
   873da:	4b1a      	ldr	r3, [pc, #104]	; (87444 <ip_reass+0x3d8>)
   873dc:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
   873de:	2303      	movs	r3, #3
   873e0:	f889 301f 	strb.w	r3, [r9, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
   873e4:	4b18      	ldr	r3, [pc, #96]	; (87448 <ip_reass+0x3dc>)
   873e6:	681a      	ldr	r2, [r3, #0]
   873e8:	f8c9 2000 	str.w	r2, [r9]
  reassdatagrams = ipr;
   873ec:	f8c3 9000 	str.w	r9, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
   873f0:	6832      	ldr	r2, [r6, #0]
   873f2:	6875      	ldr	r5, [r6, #4]
   873f4:	68b0      	ldr	r0, [r6, #8]
   873f6:	68f1      	ldr	r1, [r6, #12]
   873f8:	f8c9 2008 	str.w	r2, [r9, #8]
   873fc:	f8c9 500c 	str.w	r5, [r9, #12]
   87400:	f8c9 0010 	str.w	r0, [r9, #16]
   87404:	f8c9 1014 	str.w	r1, [r9, #20]
   87408:	6932      	ldr	r2, [r6, #16]
   8740a:	f8c9 2018 	str.w	r2, [r9, #24]
   8740e:	4625      	mov	r5, r4
   87410:	464c      	mov	r4, r9
   87412:	e6b3      	b.n	8717c <ip_reass+0x110>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
   87414:	6067      	str	r7, [r4, #4]
   87416:	e737      	b.n	87288 <ip_reass+0x21c>
   87418:	e735      	b.n	87286 <ip_reass+0x21a>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
   8741a:	6067      	str	r7, [r4, #4]
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
   8741c:	f04f 0c01 	mov.w	ip, #1
   87420:	e732      	b.n	87288 <ip_reass+0x21c>
nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  return NULL;
}
   87422:	b003      	add	sp, #12
   87424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87428:	00086ea9 	.word	0x00086ea9
   8742c:	20074630 	.word	0x20074630
   87430:	000882bd 	.word	0x000882bd
   87434:	20076788 	.word	0x20076788
   87438:	00088045 	.word	0x00088045
   8743c:	000864d1 	.word	0x000864d1
   87440:	00086921 	.word	0x00086921
   87444:	0008ccbb 	.word	0x0008ccbb
   87448:	2007462c 	.word	0x2007462c
   8744c:	00087fd1 	.word	0x00087fd1
   87450:	000882f5 	.word	0x000882f5

00087454 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
   87454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87458:	b08f      	sub	sp, #60	; 0x3c
   8745a:	4604      	mov	r4, r0
   8745c:	9109      	str	r1, [sp, #36]	; 0x24
   8745e:	920d      	str	r2, [sp, #52]	; 0x34
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
   87460:	8c8d      	ldrh	r5, [r1, #36]	; 0x24

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
   87462:	6841      	ldr	r1, [r0, #4]
   87464:	9103      	str	r1, [sp, #12]
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
   87466:	88c8      	ldrh	r0, [r1, #6]
   87468:	4b6b      	ldr	r3, [pc, #428]	; (87618 <ip_frag+0x1c4>)
   8746a:	4798      	blx	r3
  ofo = tmp & IP_OFFMASK;
   8746c:	f3c0 020c 	ubfx	r2, r0, #0, #13
   87470:	9208      	str	r2, [sp, #32]
  omf = tmp & IP_MF;
   87472:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
   87476:	b280      	uxth	r0, r0
   87478:	900b      	str	r0, [sp, #44]	; 0x2c

  left = p->tot_len - IP_HLEN;
   8747a:	8923      	ldrh	r3, [r4, #8]
   8747c:	3b14      	subs	r3, #20
   8747e:	b29b      	uxth	r3, r3
   87480:	9304      	str	r3, [sp, #16]

  nfb = (mtu - IP_HLEN) / 8;
   87482:	3d14      	subs	r5, #20
   87484:	9506      	str	r5, [sp, #24]
   87486:	462b      	mov	r3, r5
   87488:	2d00      	cmp	r5, #0
   8748a:	bfb8      	it	lt
   8748c:	1deb      	addlt	r3, r5, #7
   8748e:	f3c3 03cf 	ubfx	r3, r3, #3, #16
   87492:	930a      	str	r3, [sp, #40]	; 0x28

  while (left) {
   87494:	9b04      	ldr	r3, [sp, #16]
   87496:	2b00      	cmp	r3, #0
   87498:	f000 80b5 	beq.w	87606 <ip_frag+0x1b2>
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
   8749c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   874a0:	ea4f 03cc 	mov.w	r3, ip, lsl #3
   874a4:	b29b      	uxth	r3, r3
   874a6:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
   874a8:	2500      	movs	r5, #0
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
   874aa:	2614      	movs	r6, #20
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        return ERR_MEM;
      }
      pbuf_ref(p);
   874ac:	f8df 9190 	ldr.w	r9, [pc, #400]	; 87640 <ip_frag+0x1ec>

  while (left) {
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
   874b0:	f8dd e020 	ldr.w	lr, [sp, #32]
   874b4:	f3ce 030c 	ubfx	r3, lr, #0, #13
   874b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   874ba:	430b      	orrs	r3, r1
   874bc:	9307      	str	r3, [sp, #28]
    if (!last) {
   874be:	9b06      	ldr	r3, [sp, #24]
   874c0:	9a04      	ldr	r2, [sp, #16]
   874c2:	4293      	cmp	r3, r2
   874c4:	da08      	bge.n	874d8 <ip_frag+0x84>
      tmp = tmp | IP_MF;
   874c6:	f8dd c01c 	ldr.w	ip, [sp, #28]
   874ca:	f44c 5c00 	orr.w	ip, ip, #8192	; 0x2000
   874ce:	f8cd c01c 	str.w	ip, [sp, #28]
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
   874d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   874d4:	9105      	str	r1, [sp, #20]
   874d6:	e001      	b.n	874dc <ip_frag+0x88>
   874d8:	9a04      	ldr	r2, [sp, #16]
   874da:	9205      	str	r2, [sp, #20]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
   874dc:	2002      	movs	r0, #2
   874de:	2114      	movs	r1, #20
   874e0:	2200      	movs	r2, #0
   874e2:	4b4e      	ldr	r3, [pc, #312]	; (8761c <ip_frag+0x1c8>)
   874e4:	4798      	blx	r3
    if (rambuf == NULL) {
   874e6:	4683      	mov	fp, r0
   874e8:	2800      	cmp	r0, #0
   874ea:	f000 808e 	beq.w	8760a <ip_frag+0x1b6>
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
   874ee:	8963      	ldrh	r3, [r4, #10]
   874f0:	2b13      	cmp	r3, #19
   874f2:	d800      	bhi.n	874f6 <ip_frag+0xa2>
   874f4:	e7fe      	b.n	874f4 <ip_frag+0xa0>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
   874f6:	6843      	ldr	r3, [r0, #4]
   874f8:	f8dd c00c 	ldr.w	ip, [sp, #12]
   874fc:	f8dc 2000 	ldr.w	r2, [ip]
   87500:	f8dc 7004 	ldr.w	r7, [ip, #4]
   87504:	f8dc 0008 	ldr.w	r0, [ip, #8]
   87508:	f8dc 100c 	ldr.w	r1, [ip, #12]
   8750c:	601a      	str	r2, [r3, #0]
   8750e:	605f      	str	r7, [r3, #4]
   87510:	6098      	str	r0, [r3, #8]
   87512:	60d9      	str	r1, [r3, #12]
   87514:	f8dc 2010 	ldr.w	r2, [ip, #16]
   87518:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
   8751a:	f8db a004 	ldr.w	sl, [fp, #4]

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
   8751e:	6863      	ldr	r3, [r4, #4]
   87520:	4433      	add	r3, r6
   87522:	6063      	str	r3, [r4, #4]
    p->len -= poff;
   87524:	8963      	ldrh	r3, [r4, #10]
   87526:	1b9e      	subs	r6, r3, r6
   87528:	8166      	strh	r6, [r4, #10]

    left_to_copy = cop;
    while (left_to_copy) {
   8752a:	9905      	ldr	r1, [sp, #20]
   8752c:	2900      	cmp	r1, #0
   8752e:	d037      	beq.n	875a0 <ip_frag+0x14c>

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
    p->len -= poff;

    left_to_copy = cop;
   87530:	460e      	mov	r6, r1
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
   87532:	8965      	ldrh	r5, [r4, #10]
   87534:	42ae      	cmp	r6, r5
   87536:	bf38      	it	cc
   87538:	4635      	movcc	r5, r6
   8753a:	b2ad      	uxth	r5, r5
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
   8753c:	b91d      	cbnz	r5, 87546 <ip_frag+0xf2>
        p = p->next;
   8753e:	6824      	ldr	r4, [r4, #0]
    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
    p->len -= poff;

    left_to_copy = cop;
    while (left_to_copy) {
   87540:	2e00      	cmp	r6, #0
   87542:	d1f6      	bne.n	87532 <ip_frag+0xde>
   87544:	e02c      	b.n	875a0 <ip_frag+0x14c>
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
   87546:	2006      	movs	r0, #6
   87548:	4a35      	ldr	r2, [pc, #212]	; (87620 <ip_frag+0x1cc>)
   8754a:	4790      	blx	r2
      if (!newpbuflen) {
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
   8754c:	4607      	mov	r7, r0
   8754e:	b920      	cbnz	r0, 8755a <ip_frag+0x106>
        pbuf_free(rambuf);
   87550:	4658      	mov	r0, fp
   87552:	4b34      	ldr	r3, [pc, #208]	; (87624 <ip_frag+0x1d0>)
   87554:	4798      	blx	r3
        return ERR_MEM;
   87556:	20ff      	movs	r0, #255	; 0xff
   87558:	e05a      	b.n	87610 <ip_frag+0x1bc>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
   8755a:	6863      	ldr	r3, [r4, #4]
   8755c:	9300      	str	r3, [sp, #0]
   8755e:	9501      	str	r5, [sp, #4]
   87560:	2003      	movs	r0, #3
   87562:	4629      	mov	r1, r5
   87564:	2202      	movs	r2, #2
   87566:	463b      	mov	r3, r7
   87568:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 87644 <ip_frag+0x1f0>
   8756c:	47e0      	blx	ip
      if (newpbuf == NULL) {
   8756e:	4680      	mov	r8, r0
   87570:	b940      	cbnz	r0, 87584 <ip_frag+0x130>
/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
   87572:	2006      	movs	r0, #6
   87574:	4639      	mov	r1, r7
   87576:	4b2c      	ldr	r3, [pc, #176]	; (87628 <ip_frag+0x1d4>)
   87578:	4798      	blx	r3
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
   8757a:	4658      	mov	r0, fp
   8757c:	4b29      	ldr	r3, [pc, #164]	; (87624 <ip_frag+0x1d0>)
   8757e:	4798      	blx	r3
        return ERR_MEM;
   87580:	20ff      	movs	r0, #255	; 0xff
   87582:	e045      	b.n	87610 <ip_frag+0x1bc>
      }
      pbuf_ref(p);
   87584:	4620      	mov	r0, r4
   87586:	47c8      	blx	r9
      pcr->original = p;
   87588:	617c      	str	r4, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
   8758a:	4b28      	ldr	r3, [pc, #160]	; (8762c <ip_frag+0x1d8>)
   8758c:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
   8758e:	4658      	mov	r0, fp
   87590:	4641      	mov	r1, r8
   87592:	4b27      	ldr	r3, [pc, #156]	; (87630 <ip_frag+0x1dc>)
   87594:	4798      	blx	r3
      left_to_copy -= newpbuflen;
   87596:	1b76      	subs	r6, r6, r5
   87598:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
   8759a:	b10e      	cbz	r6, 875a0 <ip_frag+0x14c>
        p = p->next;
   8759c:	6824      	ldr	r4, [r4, #0]
   8759e:	e7c8      	b.n	87532 <ip_frag+0xde>
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
   875a0:	9807      	ldr	r0, [sp, #28]
   875a2:	4e24      	ldr	r6, [pc, #144]	; (87634 <ip_frag+0x1e0>)
   875a4:	47b0      	blx	r6
   875a6:	f8aa 0006 	strh.w	r0, [sl, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
   875aa:	9905      	ldr	r1, [sp, #20]
   875ac:	f101 0014 	add.w	r0, r1, #20
   875b0:	b280      	uxth	r0, r0
   875b2:	47b0      	blx	r6
   875b4:	f8aa 0002 	strh.w	r0, [sl, #2]
    IPH_CHKSUM_SET(iphdr, 0);
   875b8:	2300      	movs	r3, #0
   875ba:	f88a 300a 	strb.w	r3, [sl, #10]
   875be:	f88a 300b 	strb.w	r3, [sl, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
   875c2:	4650      	mov	r0, sl
   875c4:	2114      	movs	r1, #20
   875c6:	4b1c      	ldr	r3, [pc, #112]	; (87638 <ip_frag+0x1e4>)
   875c8:	4798      	blx	r3
   875ca:	f8aa 000a 	strh.w	r0, [sl, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
   875ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   875d0:	6953      	ldr	r3, [r2, #20]
   875d2:	4610      	mov	r0, r2
   875d4:	4659      	mov	r1, fp
   875d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   875d8:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
   875da:	4b18      	ldr	r3, [pc, #96]	; (8763c <ip_frag+0x1e8>)
   875dc:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   875de:	3201      	adds	r2, #1
   875e0:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
   875e2:	4658      	mov	r0, fp
   875e4:	4b0f      	ldr	r3, [pc, #60]	; (87624 <ip_frag+0x1d0>)
   875e6:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
   875e8:	9904      	ldr	r1, [sp, #16]
   875ea:	9a05      	ldr	r2, [sp, #20]
   875ec:	1a8b      	subs	r3, r1, r2
   875ee:	b29b      	uxth	r3, r3
   875f0:	9304      	str	r3, [sp, #16]
    ofo += nfb;
   875f2:	9b08      	ldr	r3, [sp, #32]
   875f4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   875f8:	4463      	add	r3, ip
   875fa:	b29b      	uxth	r3, r3
   875fc:	9308      	str	r3, [sp, #32]

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
   875fe:	9904      	ldr	r1, [sp, #16]
   87600:	b129      	cbz	r1, 8760e <ip_frag+0x1ba>
   87602:	462e      	mov	r6, r5
   87604:	e754      	b.n	874b0 <ip_frag+0x5c>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
   87606:	2000      	movs	r0, #0
   87608:	e002      	b.n	87610 <ip_frag+0x1bc>
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      return ERR_MEM;
   8760a:	20ff      	movs	r0, #255	; 0xff
   8760c:	e000      	b.n	87610 <ip_frag+0x1bc>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
   8760e:	2000      	movs	r0, #0
}
   87610:	b240      	sxtb	r0, r0
   87612:	b00f      	add	sp, #60	; 0x3c
   87614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87618:	000864dd 	.word	0x000864dd
   8761c:	000880d1 	.word	0x000880d1
   87620:	00087ce1 	.word	0x00087ce1
   87624:	00088045 	.word	0x00088045
   87628:	00087d61 	.word	0x00087d61
   8762c:	00087019 	.word	0x00087019
   87630:	000882f5 	.word	0x000882f5
   87634:	000864d1 	.word	0x000864d1
   87638:	00086921 	.word	0x00086921
   8763c:	20076788 	.word	0x20076788
   87640:	000882d5 	.word	0x000882d5
   87644:	00087f6d 	.word	0x00087f6d

00087648 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
   87648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8764a:	4606      	mov	r6, r0
   8764c:	460f      	mov	r7, r1
   8764e:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
   87650:	200b      	movs	r0, #11
   87652:	4b1b      	ldr	r3, [pc, #108]	; (876c0 <sys_timeout+0x78>)
   87654:	4798      	blx	r3
  if (timeout == NULL) {
   87656:	4604      	mov	r4, r0
   87658:	b900      	cbnz	r0, 8765c <sys_timeout+0x14>
   8765a:	e7fe      	b.n	8765a <sys_timeout+0x12>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
   8765c:	2300      	movs	r3, #0
   8765e:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
   87660:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
   87662:	60c5      	str	r5, [r0, #12]
  timeout->time = msecs;
   87664:	6046      	str	r6, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
   87666:	4b17      	ldr	r3, [pc, #92]	; (876c4 <sys_timeout+0x7c>)
   87668:	681d      	ldr	r5, [r3, #0]
   8766a:	b90d      	cbnz	r5, 87670 <sys_timeout+0x28>
    next_timeout = timeout;
   8766c:	6018      	str	r0, [r3, #0]
    return;
   8766e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if (next_timeout->time > msecs) {
   87670:	6869      	ldr	r1, [r5, #4]
   87672:	428e      	cmp	r6, r1
   87674:	d214      	bcs.n	876a0 <sys_timeout+0x58>
    next_timeout->time -= msecs;
   87676:	1b89      	subs	r1, r1, r6
   87678:	6069      	str	r1, [r5, #4]
    timeout->next = next_timeout;
   8767a:	6005      	str	r5, [r0, #0]
    next_timeout = timeout;
   8767c:	4b11      	ldr	r3, [pc, #68]	; (876c4 <sys_timeout+0x7c>)
   8767e:	6018      	str	r0, [r3, #0]
   87680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
   87682:	461a      	mov	r2, r3
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
   87684:	6861      	ldr	r1, [r4, #4]
   87686:	6853      	ldr	r3, [r2, #4]
   87688:	1ac9      	subs	r1, r1, r3
   8768a:	6061      	str	r1, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
   8768c:	6813      	ldr	r3, [r2, #0]
   8768e:	b11b      	cbz	r3, 87698 <sys_timeout+0x50>
   87690:	6858      	ldr	r0, [r3, #4]
   87692:	4281      	cmp	r1, r0
   87694:	d2f5      	bcs.n	87682 <sys_timeout+0x3a>
   87696:	e00f      	b.n	876b8 <sys_timeout+0x70>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        }
        timeout->next = t->next;
   87698:	6813      	ldr	r3, [r2, #0]
   8769a:	6023      	str	r3, [r4, #0]
        t->next = timeout;
   8769c:	6014      	str	r4, [r2, #0]
        break;
   8769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
   876a0:	1a71      	subs	r1, r6, r1
   876a2:	6041      	str	r1, [r0, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
   876a4:	682a      	ldr	r2, [r5, #0]
   876a6:	b11a      	cbz	r2, 876b0 <sys_timeout+0x68>
   876a8:	6853      	ldr	r3, [r2, #4]
   876aa:	4299      	cmp	r1, r3
   876ac:	d2ea      	bcs.n	87684 <sys_timeout+0x3c>
   876ae:	e001      	b.n	876b4 <sys_timeout+0x6c>
   876b0:	462a      	mov	r2, r5
   876b2:	e7f1      	b.n	87698 <sys_timeout+0x50>
   876b4:	4613      	mov	r3, r2
   876b6:	462a      	mov	r2, r5
        if (t->next != NULL) {
          t->next->time -= timeout->time;
   876b8:	6858      	ldr	r0, [r3, #4]
   876ba:	1a41      	subs	r1, r0, r1
   876bc:	6059      	str	r1, [r3, #4]
   876be:	e7eb      	b.n	87698 <sys_timeout+0x50>
   876c0:	00087ce1 	.word	0x00087ce1
   876c4:	20074638 	.word	0x20074638

000876c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
   876c8:	b508      	push	{r3, lr}
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
   876ca:	4b09      	ldr	r3, [pc, #36]	; (876f0 <tcp_timer_needed+0x28>)
   876cc:	681b      	ldr	r3, [r3, #0]
   876ce:	b96b      	cbnz	r3, 876ec <tcp_timer_needed+0x24>
   876d0:	4b08      	ldr	r3, [pc, #32]	; (876f4 <tcp_timer_needed+0x2c>)
   876d2:	681b      	ldr	r3, [r3, #0]
   876d4:	b913      	cbnz	r3, 876dc <tcp_timer_needed+0x14>
   876d6:	4b08      	ldr	r3, [pc, #32]	; (876f8 <tcp_timer_needed+0x30>)
   876d8:	681b      	ldr	r3, [r3, #0]
   876da:	b13b      	cbz	r3, 876ec <tcp_timer_needed+0x24>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
   876dc:	2201      	movs	r2, #1
   876de:	4b04      	ldr	r3, [pc, #16]	; (876f0 <tcp_timer_needed+0x28>)
   876e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
   876e2:	20fa      	movs	r0, #250	; 0xfa
   876e4:	4905      	ldr	r1, [pc, #20]	; (876fc <tcp_timer_needed+0x34>)
   876e6:	2200      	movs	r2, #0
   876e8:	4b05      	ldr	r3, [pc, #20]	; (87700 <tcp_timer_needed+0x38>)
   876ea:	4798      	blx	r3
   876ec:	bd08      	pop	{r3, pc}
   876ee:	bf00      	nop
   876f0:	20074634 	.word	0x20074634
   876f4:	200768d8 	.word	0x200768d8
   876f8:	200768ec 	.word	0x200768ec
   876fc:	00087705 	.word	0x00087705
   87700:	00087649 	.word	0x00087649

00087704 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
   87704:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
   87706:	4b09      	ldr	r3, [pc, #36]	; (8772c <tcpip_tcp_timer+0x28>)
   87708:	4798      	blx	r3
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
   8770a:	4b09      	ldr	r3, [pc, #36]	; (87730 <tcpip_tcp_timer+0x2c>)
   8770c:	681b      	ldr	r3, [r3, #0]
   8770e:	b913      	cbnz	r3, 87716 <tcpip_tcp_timer+0x12>
   87710:	4b08      	ldr	r3, [pc, #32]	; (87734 <tcpip_tcp_timer+0x30>)
   87712:	681b      	ldr	r3, [r3, #0]
   87714:	b12b      	cbz	r3, 87722 <tcpip_tcp_timer+0x1e>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
   87716:	20fa      	movs	r0, #250	; 0xfa
   87718:	4907      	ldr	r1, [pc, #28]	; (87738 <tcpip_tcp_timer+0x34>)
   8771a:	2200      	movs	r2, #0
   8771c:	4b07      	ldr	r3, [pc, #28]	; (8773c <tcpip_tcp_timer+0x38>)
   8771e:	4798      	blx	r3
   87720:	bd08      	pop	{r3, pc}
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
   87722:	2200      	movs	r2, #0
   87724:	4b06      	ldr	r3, [pc, #24]	; (87740 <tcpip_tcp_timer+0x3c>)
   87726:	601a      	str	r2, [r3, #0]
   87728:	bd08      	pop	{r3, pc}
   8772a:	bf00      	nop
   8772c:	000890a9 	.word	0x000890a9
   87730:	200768d8 	.word	0x200768d8
   87734:	200768ec 	.word	0x200768ec
   87738:	00087705 	.word	0x00087705
   8773c:	00087649 	.word	0x00087649
   87740:	20074634 	.word	0x20074634

00087744 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
   87744:	b510      	push	{r4, lr}
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
   87746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8774a:	4905      	ldr	r1, [pc, #20]	; (87760 <sys_timeouts_init+0x1c>)
   8774c:	2200      	movs	r2, #0
   8774e:	4c05      	ldr	r4, [pc, #20]	; (87764 <sys_timeouts_init+0x20>)
   87750:	47a0      	blx	r4
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
   87752:	f241 3088 	movw	r0, #5000	; 0x1388
   87756:	4904      	ldr	r1, [pc, #16]	; (87768 <sys_timeouts_init+0x24>)
   87758:	2200      	movs	r2, #0
   8775a:	47a0      	blx	r4
   8775c:	bd10      	pop	{r4, pc}
   8775e:	bf00      	nop
   87760:	0008778d 	.word	0x0008778d
   87764:	00087649 	.word	0x00087649
   87768:	0008776d 	.word	0x0008776d

0008776c <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
   8776c:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
   8776e:	4b04      	ldr	r3, [pc, #16]	; (87780 <arp_timer+0x14>)
   87770:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
   87772:	f241 3088 	movw	r0, #5000	; 0x1388
   87776:	4903      	ldr	r1, [pc, #12]	; (87784 <arp_timer+0x18>)
   87778:	2200      	movs	r2, #0
   8777a:	4b03      	ldr	r3, [pc, #12]	; (87788 <arp_timer+0x1c>)
   8777c:	4798      	blx	r3
   8777e:	bd08      	pop	{r3, pc}
   87780:	0008bb51 	.word	0x0008bb51
   87784:	0008776d 	.word	0x0008776d
   87788:	00087649 	.word	0x00087649

0008778c <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
   8778c:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
   8778e:	4b04      	ldr	r3, [pc, #16]	; (877a0 <ip_reass_timer+0x14>)
   87790:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
   87792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   87796:	4903      	ldr	r1, [pc, #12]	; (877a4 <ip_reass_timer+0x18>)
   87798:	2200      	movs	r2, #0
   8779a:	4b03      	ldr	r3, [pc, #12]	; (877a8 <ip_reass_timer+0x1c>)
   8779c:	4798      	blx	r3
   8779e:	bd08      	pop	{r3, pc}
   877a0:	0008703d 	.word	0x0008703d
   877a4:	0008778d 	.word	0x0008778d
   877a8:	00087649 	.word	0x00087649

000877ac <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
   877ac:	b510      	push	{r4, lr}
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
   877ae:	4b11      	ldr	r3, [pc, #68]	; (877f4 <sys_untimeout+0x48>)
   877b0:	681b      	ldr	r3, [r3, #0]
   877b2:	b1eb      	cbz	r3, 877f0 <sys_untimeout+0x44>
   877b4:	2400      	movs	r4, #0
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
    if ((t->h == handler) && (t->arg == arg)) {
   877b6:	689a      	ldr	r2, [r3, #8]
   877b8:	4282      	cmp	r2, r0
   877ba:	d114      	bne.n	877e6 <sys_untimeout+0x3a>
   877bc:	68da      	ldr	r2, [r3, #12]
   877be:	428a      	cmp	r2, r1
   877c0:	d111      	bne.n	877e6 <sys_untimeout+0x3a>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
   877c2:	b91c      	cbnz	r4, 877cc <sys_untimeout+0x20>
        next_timeout = t->next;
   877c4:	681a      	ldr	r2, [r3, #0]
   877c6:	490b      	ldr	r1, [pc, #44]	; (877f4 <sys_untimeout+0x48>)
   877c8:	600a      	str	r2, [r1, #0]
   877ca:	e001      	b.n	877d0 <sys_untimeout+0x24>
      } else {
        prev_t->next = t->next;
   877cc:	681a      	ldr	r2, [r3, #0]
   877ce:	6022      	str	r2, [r4, #0]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
   877d0:	681a      	ldr	r2, [r3, #0]
   877d2:	b11a      	cbz	r2, 877dc <sys_untimeout+0x30>
        t->next->time += t->time;
   877d4:	6850      	ldr	r0, [r2, #4]
   877d6:	6859      	ldr	r1, [r3, #4]
   877d8:	4401      	add	r1, r0
   877da:	6051      	str	r1, [r2, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
   877dc:	200b      	movs	r0, #11
   877de:	4619      	mov	r1, r3
   877e0:	4b05      	ldr	r3, [pc, #20]	; (877f8 <sys_untimeout+0x4c>)
   877e2:	4798      	blx	r3
      return;
   877e4:	bd10      	pop	{r4, pc}

  if (next_timeout == NULL) {
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
   877e6:	681a      	ldr	r2, [r3, #0]
   877e8:	b112      	cbz	r2, 877f0 <sys_untimeout+0x44>
   877ea:	461c      	mov	r4, r3
   877ec:	4613      	mov	r3, r2
   877ee:	e7e2      	b.n	877b6 <sys_untimeout+0xa>
   877f0:	bd10      	pop	{r4, pc}
   877f2:	bf00      	nop
   877f4:	20074638 	.word	0x20074638
   877f8:	00087d61 	.word	0x00087d61

000877fc <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
   877fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87800:	4607      	mov	r7, r0
   87802:	4689      	mov	r9, r1
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
   87804:	4c16      	ldr	r4, [pc, #88]	; (87860 <sys_timeouts_mbox_fetch+0x64>)
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
  } else {
    if (next_timeout->time > 0) {
      time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
   87806:	f8df 8060 	ldr.w	r8, [pc, #96]	; 87868 <sys_timeouts_mbox_fetch+0x6c>
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
   8780a:	4d16      	ldr	r5, [pc, #88]	; (87864 <sys_timeouts_mbox_fetch+0x68>)
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
   8780c:	6823      	ldr	r3, [r4, #0]
   8780e:	b933      	cbnz	r3, 8781e <sys_timeouts_mbox_fetch+0x22>
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
   87810:	4638      	mov	r0, r7
   87812:	4649      	mov	r1, r9
   87814:	2200      	movs	r2, #0
   87816:	4b14      	ldr	r3, [pc, #80]	; (87868 <sys_timeouts_mbox_fetch+0x6c>)
   87818:	4798      	blx	r3
   8781a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else {
    if (next_timeout->time > 0) {
   8781e:	685a      	ldr	r2, [r3, #4]
   87820:	b12a      	cbz	r2, 8782e <sys_timeouts_mbox_fetch+0x32>
      time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
   87822:	4638      	mov	r0, r7
   87824:	4649      	mov	r1, r9
   87826:	47c0      	blx	r8
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
   87828:	f1b0 3fff 	cmp.w	r0, #4294967295
   8782c:	d10c      	bne.n	87848 <sys_timeouts_mbox_fetch+0x4c>
      /* If time == SYS_ARCH_TIMEOUT, a timeout occured before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
   8782e:	6821      	ldr	r1, [r4, #0]
      next_timeout = tmptimeout->next;
   87830:	680b      	ldr	r3, [r1, #0]
   87832:	6023      	str	r3, [r4, #0]
      handler = tmptimeout->h;
   87834:	688e      	ldr	r6, [r1, #8]
      arg = tmptimeout->arg;
   87836:	f8d1 a00c 	ldr.w	sl, [r1, #12]
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
   8783a:	200b      	movs	r0, #11
   8783c:	47a8      	blx	r5
      if (handler != NULL) {
   8783e:	2e00      	cmp	r6, #0
   87840:	d0e4      	beq.n	8780c <sys_timeouts_mbox_fetch+0x10>
        /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
           timeout handler function. */
        LOCK_TCPIP_CORE();
        handler(arg);
   87842:	4650      	mov	r0, sl
   87844:	47b0      	blx	r6
   87846:	e7e1      	b.n	8780c <sys_timeouts_mbox_fetch+0x10>
      goto again;
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
   87848:	4b05      	ldr	r3, [pc, #20]	; (87860 <sys_timeouts_mbox_fetch+0x64>)
   8784a:	681b      	ldr	r3, [r3, #0]
   8784c:	685a      	ldr	r2, [r3, #4]
   8784e:	4290      	cmp	r0, r2
        next_timeout->time -= time_needed;
   87850:	bf34      	ite	cc
   87852:	ebc0 0202 	rsbcc	r2, r0, r2
      } else {
        next_timeout->time = 0;
   87856:	2200      	movcs	r2, #0
   87858:	605a      	str	r2, [r3, #4]
   8785a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8785e:	bf00      	nop
   87860:	20074638 	.word	0x20074638
   87864:	00087d61 	.word	0x00087d61
   87868:	0008c639 	.word	0x0008c639

0008786c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
   8786c:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
   8786e:	4b10      	ldr	r3, [pc, #64]	; (878b0 <mem_init+0x44>)
   87870:	f023 0303 	bic.w	r3, r3, #3
   87874:	4a0f      	ldr	r2, [pc, #60]	; (878b4 <mem_init+0x48>)
   87876:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
   87878:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   8787c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
   8787e:	2100      	movs	r1, #0
   87880:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
   87882:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
   87884:	1898      	adds	r0, r3, r2
   87886:	490c      	ldr	r1, [pc, #48]	; (878b8 <mem_init+0x4c>)
   87888:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
   8788a:	2101      	movs	r1, #1
   8788c:	f883 1c04 	strb.w	r1, [r3, #3076]	; 0xc04
  ram_end->next = MEM_SIZE_ALIGNED;
   87890:	f8a3 2c00 	strh.w	r2, [r3, #3072]	; 0xc00
  ram_end->prev = MEM_SIZE_ALIGNED;
   87894:	f8a3 2c02 	strh.w	r2, [r3, #3074]	; 0xc02

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
   87898:	4808      	ldr	r0, [pc, #32]	; (878bc <mem_init+0x50>)
   8789a:	6003      	str	r3, [r0, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
   8789c:	4b08      	ldr	r3, [pc, #32]	; (878c0 <mem_init+0x54>)
   8789e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
   878a2:	4808      	ldr	r0, [pc, #32]	; (878c4 <mem_init+0x58>)
   878a4:	4b08      	ldr	r3, [pc, #32]	; (878c8 <mem_init+0x5c>)
   878a6:	4798      	blx	r3
   878a8:	b100      	cbz	r0, 878ac <mem_init+0x40>
   878aa:	e7fe      	b.n	878aa <mem_init+0x3e>
   878ac:	bd08      	pop	{r3, pc}
   878ae:	bf00      	nop
   878b0:	20075b6f 	.word	0x20075b6f
   878b4:	20074648 	.word	0x20074648
   878b8:	20074640 	.word	0x20074640
   878bc:	2007463c 	.word	0x2007463c
   878c0:	20076788 	.word	0x20076788
   878c4:	20074644 	.word	0x20074644
   878c8:	0008c441 	.word	0x0008c441

000878cc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
   878cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
   878ce:	4604      	mov	r4, r0
   878d0:	2800      	cmp	r0, #0
   878d2:	d06a      	beq.n	879aa <mem_free+0xde>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
   878d4:	f010 0f03 	tst.w	r0, #3
   878d8:	d000      	beq.n	878dc <mem_free+0x10>
   878da:	e7fe      	b.n	878da <mem_free+0xe>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   878dc:	4b33      	ldr	r3, [pc, #204]	; (879ac <mem_free+0xe0>)
   878de:	681b      	ldr	r3, [r3, #0]
   878e0:	4298      	cmp	r0, r3
   878e2:	d200      	bcs.n	878e6 <mem_free+0x1a>
   878e4:	e004      	b.n	878f0 <mem_free+0x24>
   878e6:	4b32      	ldr	r3, [pc, #200]	; (879b0 <mem_free+0xe4>)
   878e8:	681b      	ldr	r3, [r3, #0]
   878ea:	4298      	cmp	r0, r3
   878ec:	d2fa      	bcs.n	878e4 <mem_free+0x18>
   878ee:	e000      	b.n	878f2 <mem_free+0x26>
   878f0:	e7fe      	b.n	878f0 <mem_free+0x24>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
   878f2:	4830      	ldr	r0, [pc, #192]	; (879b4 <mem_free+0xe8>)
   878f4:	2100      	movs	r1, #0
   878f6:	4b30      	ldr	r3, [pc, #192]	; (879b8 <mem_free+0xec>)
   878f8:	4798      	blx	r3
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
   878fa:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
   878fe:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   87902:	b903      	cbnz	r3, 87906 <mem_free+0x3a>
   87904:	e7fe      	b.n	87904 <mem_free+0x38>
  /* ... and is now unused. */
  mem->used = 0;
   87906:	2300      	movs	r3, #0
   87908:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
   8790c:	4b2b      	ldr	r3, [pc, #172]	; (879bc <mem_free+0xf0>)
   8790e:	681b      	ldr	r3, [r3, #0]
   87910:	429a      	cmp	r2, r3
    /* the newly freed struct is now the lowest */
    lfree = mem;
   87912:	bf3c      	itt	cc
   87914:	4b29      	ldrcc	r3, [pc, #164]	; (879bc <mem_free+0xf0>)
   87916:	601a      	strcc	r2, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
   87918:	4b24      	ldr	r3, [pc, #144]	; (879ac <mem_free+0xe0>)
   8791a:	681b      	ldr	r3, [r3, #0]
   8791c:	1ad5      	subs	r5, r2, r3
   8791e:	4928      	ldr	r1, [pc, #160]	; (879c0 <mem_free+0xf4>)
   87920:	f8b1 60aa 	ldrh.w	r6, [r1, #170]	; 0xaa
   87924:	f834 0c08 	ldrh.w	r0, [r4, #-8]
   87928:	1a30      	subs	r0, r6, r0
   8792a:	4428      	add	r0, r5
   8792c:	f8a1 00aa 	strh.w	r0, [r1, #170]	; 0xaa
plug_holes(struct mem *mem)
{
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
   87930:	429a      	cmp	r2, r3
   87932:	d200      	bcs.n	87936 <mem_free+0x6a>
   87934:	e7fe      	b.n	87934 <mem_free+0x68>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
   87936:	491e      	ldr	r1, [pc, #120]	; (879b0 <mem_free+0xe4>)
   87938:	680e      	ldr	r6, [r1, #0]
   8793a:	42b2      	cmp	r2, r6
   8793c:	d300      	bcc.n	87940 <mem_free+0x74>
   8793e:	e7fe      	b.n	8793e <mem_free+0x72>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
   87940:	f814 1c04 	ldrb.w	r1, [r4, #-4]
   87944:	b101      	cbz	r1, 87948 <mem_free+0x7c>
   87946:	e7fe      	b.n	87946 <mem_free+0x7a>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
   87948:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   8794c:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
   87950:	d900      	bls.n	87954 <mem_free+0x88>
   87952:	e7fe      	b.n	87952 <mem_free+0x86>

  nmem = (struct mem *)(void *)&ram[mem->next];
   87954:	1858      	adds	r0, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
   87956:	4282      	cmp	r2, r0
   87958:	d00f      	beq.n	8797a <mem_free+0xae>
   8795a:	7907      	ldrb	r7, [r0, #4]
   8795c:	b96f      	cbnz	r7, 8797a <mem_free+0xae>
   8795e:	4286      	cmp	r6, r0
   87960:	d00b      	beq.n	8797a <mem_free+0xae>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
   87962:	4e16      	ldr	r6, [pc, #88]	; (879bc <mem_free+0xf0>)
   87964:	6836      	ldr	r6, [r6, #0]
   87966:	42b0      	cmp	r0, r6
      lfree = mem;
   87968:	bf04      	itt	eq
   8796a:	4814      	ldreq	r0, [pc, #80]	; (879bc <mem_free+0xf0>)
   8796c:	6002      	streq	r2, [r0, #0]
    }
    mem->next = nmem->next;
   8796e:	5a58      	ldrh	r0, [r3, r1]
   87970:	f824 0c08 	strh.w	r0, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
   87974:	5a59      	ldrh	r1, [r3, r1]
   87976:	4419      	add	r1, r3
   87978:	804d      	strh	r5, [r1, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
   8797a:	f834 0c06 	ldrh.w	r0, [r4, #-6]
   8797e:	1819      	adds	r1, r3, r0
  if (pmem != mem && pmem->used == 0) {
   87980:	428a      	cmp	r2, r1
   87982:	d00f      	beq.n	879a4 <mem_free+0xd8>
   87984:	790d      	ldrb	r5, [r1, #4]
   87986:	b96d      	cbnz	r5, 879a4 <mem_free+0xd8>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
   87988:	4d0c      	ldr	r5, [pc, #48]	; (879bc <mem_free+0xf0>)
   8798a:	682d      	ldr	r5, [r5, #0]
   8798c:	42aa      	cmp	r2, r5
      lfree = pmem;
   8798e:	bf04      	itt	eq
   87990:	4a0a      	ldreq	r2, [pc, #40]	; (879bc <mem_free+0xf0>)
   87992:	6011      	streq	r1, [r2, #0]
    }
    pmem->next = mem->next;
   87994:	f834 2c08 	ldrh.w	r2, [r4, #-8]
   87998:	521a      	strh	r2, [r3, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
   8799a:	f834 2c08 	ldrh.w	r2, [r4, #-8]
   8799e:	441a      	add	r2, r3
   879a0:	1acb      	subs	r3, r1, r3
   879a2:	8053      	strh	r3, [r2, #2]
  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
   879a4:	4803      	ldr	r0, [pc, #12]	; (879b4 <mem_free+0xe8>)
   879a6:	4b07      	ldr	r3, [pc, #28]	; (879c4 <mem_free+0xf8>)
   879a8:	4798      	blx	r3
   879aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   879ac:	20074648 	.word	0x20074648
   879b0:	20074640 	.word	0x20074640
   879b4:	20074644 	.word	0x20074644
   879b8:	0008c501 	.word	0x0008c501
   879bc:	2007463c 	.word	0x2007463c
   879c0:	20076788 	.word	0x20076788
   879c4:	0008c4e9 	.word	0x0008c4e9

000879c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
   879c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   879ca:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
   879cc:	3103      	adds	r1, #3
   879ce:	f64f 74fc 	movw	r4, #65532	; 0xfffc
   879d2:	400c      	ands	r4, r1

  if(newsize < MIN_SIZE_ALIGNED) {
   879d4:	2c0b      	cmp	r4, #11
   879d6:	d903      	bls.n	879e0 <mem_trim+0x18>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
   879d8:	f5b4 6f40 	cmp.w	r4, #3072	; 0xc00
   879dc:	d875      	bhi.n	87aca <mem_trim+0x102>
   879de:	e000      	b.n	879e2 <mem_trim+0x1a>
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);

  if(newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
   879e0:	240c      	movs	r4, #12

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   879e2:	4b3c      	ldr	r3, [pc, #240]	; (87ad4 <mem_trim+0x10c>)
   879e4:	681b      	ldr	r3, [r3, #0]
   879e6:	42ab      	cmp	r3, r5
   879e8:	d900      	bls.n	879ec <mem_trim+0x24>
   879ea:	e004      	b.n	879f6 <mem_trim+0x2e>
   879ec:	4a3a      	ldr	r2, [pc, #232]	; (87ad8 <mem_trim+0x110>)
   879ee:	6812      	ldr	r2, [r2, #0]
   879f0:	4295      	cmp	r5, r2
   879f2:	d2fa      	bcs.n	879ea <mem_trim+0x22>
   879f4:	e000      	b.n	879f8 <mem_trim+0x30>
   879f6:	e7fe      	b.n	879f6 <mem_trim+0x2e>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
   879f8:	f1a5 0208 	sub.w	r2, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
   879fc:	1ad3      	subs	r3, r2, r3
   879fe:	b29f      	uxth	r7, r3

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
   87a00:	f835 6c08 	ldrh.w	r6, [r5, #-8]
   87a04:	3e08      	subs	r6, #8
   87a06:	1bf6      	subs	r6, r6, r7
   87a08:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
   87a0a:	42a6      	cmp	r6, r4
   87a0c:	d200      	bcs.n	87a10 <mem_trim+0x48>
   87a0e:	e7fe      	b.n	87a0e <mem_trim+0x46>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
   87a10:	42b4      	cmp	r4, r6
   87a12:	d05c      	beq.n	87ace <mem_trim+0x106>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
   87a14:	4831      	ldr	r0, [pc, #196]	; (87adc <mem_trim+0x114>)
   87a16:	2100      	movs	r1, #0
   87a18:	4b31      	ldr	r3, [pc, #196]	; (87ae0 <mem_trim+0x118>)
   87a1a:	4798      	blx	r3

  mem2 = (struct mem *)(void *)&ram[mem->next];
   87a1c:	4b2d      	ldr	r3, [pc, #180]	; (87ad4 <mem_trim+0x10c>)
   87a1e:	681b      	ldr	r3, [r3, #0]
   87a20:	f835 2c08 	ldrh.w	r2, [r5, #-8]
   87a24:	1899      	adds	r1, r3, r2
  if(mem2->used == 0) {
   87a26:	7908      	ldrb	r0, [r1, #4]
   87a28:	bb30      	cbnz	r0, 87a78 <mem_trim+0xb0>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
   87a2a:	5a98      	ldrh	r0, [r3, r2]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
   87a2c:	f107 0208 	add.w	r2, r7, #8
   87a30:	4422      	add	r2, r4
   87a32:	b292      	uxth	r2, r2
    if (lfree == mem2) {
   87a34:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 87ae4 <mem_trim+0x11c>
   87a38:	f8de e000 	ldr.w	lr, [lr]
   87a3c:	458e      	cmp	lr, r1
   87a3e:	d104      	bne.n	87a4a <mem_trim+0x82>
      lfree = (struct mem *)(void *)&ram[ptr2];
   87a40:	eb03 0e02 	add.w	lr, r3, r2
   87a44:	4927      	ldr	r1, [pc, #156]	; (87ae4 <mem_trim+0x11c>)
   87a46:	f8c1 e000 	str.w	lr, [r1]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
   87a4a:	1899      	adds	r1, r3, r2
    mem2->used = 0;
   87a4c:	f04f 0e00 	mov.w	lr, #0
   87a50:	f881 e004 	strb.w	lr, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
   87a54:	5298      	strh	r0, [r3, r2]
    /* link it back to mem */
    mem2->prev = ptr;
   87a56:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
   87a58:	f825 2c08 	strh.w	r2, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
   87a5c:	5a99      	ldrh	r1, [r3, r2]
   87a5e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
   87a62:	bf1c      	itt	ne
   87a64:	185b      	addne	r3, r3, r1
   87a66:	805a      	strhne	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
   87a68:	4b1f      	ldr	r3, [pc, #124]	; (87ae8 <mem_trim+0x120>)
   87a6a:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
   87a6e:	1b96      	subs	r6, r2, r6
   87a70:	4434      	add	r4, r6
   87a72:	f8a3 40aa 	strh.w	r4, [r3, #170]	; 0xaa
   87a76:	e023      	b.n	87ac0 <mem_trim+0xf8>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
   87a78:	f104 0214 	add.w	r2, r4, #20
   87a7c:	42b2      	cmp	r2, r6
   87a7e:	d81f      	bhi.n	87ac0 <mem_trim+0xf8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
   87a80:	f107 0208 	add.w	r2, r7, #8
   87a84:	4422      	add	r2, r4
   87a86:	b292      	uxth	r2, r2
    mem2 = (struct mem *)(void *)&ram[ptr2];
   87a88:	1899      	adds	r1, r3, r2
    if (mem2 < lfree) {
   87a8a:	4816      	ldr	r0, [pc, #88]	; (87ae4 <mem_trim+0x11c>)
   87a8c:	6800      	ldr	r0, [r0, #0]
   87a8e:	4281      	cmp	r1, r0
      lfree = mem2;
   87a90:	bf3c      	itt	cc
   87a92:	4814      	ldrcc	r0, [pc, #80]	; (87ae4 <mem_trim+0x11c>)
   87a94:	6001      	strcc	r1, [r0, #0]
    }
    mem2->used = 0;
   87a96:	2000      	movs	r0, #0
   87a98:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
   87a9a:	f835 0c08 	ldrh.w	r0, [r5, #-8]
   87a9e:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
   87aa0:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
   87aa2:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
   87aa6:	5a99      	ldrh	r1, [r3, r2]
   87aa8:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
   87aac:	bf1c      	itt	ne
   87aae:	185b      	addne	r3, r3, r1
   87ab0:	805a      	strhne	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
   87ab2:	4b0d      	ldr	r3, [pc, #52]	; (87ae8 <mem_trim+0x120>)
   87ab4:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
   87ab8:	1b96      	subs	r6, r2, r6
   87aba:	4434      	add	r4, r6
   87abc:	f8a3 40aa 	strh.w	r4, [r3, #170]	; 0xaa
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
   87ac0:	4806      	ldr	r0, [pc, #24]	; (87adc <mem_trim+0x114>)
   87ac2:	4b0a      	ldr	r3, [pc, #40]	; (87aec <mem_trim+0x124>)
   87ac4:	4798      	blx	r3
  return rmem;
   87ac6:	4628      	mov	r0, r5
   87ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
   87aca:	2000      	movs	r0, #0
   87acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
    /* No change in size, simply return */
    return rmem;
   87ace:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
   87ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87ad2:	bf00      	nop
   87ad4:	20074648 	.word	0x20074648
   87ad8:	20074640 	.word	0x20074640
   87adc:	20074644 	.word	0x20074644
   87ae0:	0008c501 	.word	0x0008c501
   87ae4:	2007463c 	.word	0x2007463c
   87ae8:	20076788 	.word	0x20076788
   87aec:	0008c4e9 	.word	0x0008c4e9

00087af0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
   87af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
   87af2:	2800      	cmp	r0, #0
   87af4:	f000 8096 	beq.w	87c24 <mem_malloc+0x134>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
   87af8:	1cc3      	adds	r3, r0, #3
   87afa:	f64f 75fc 	movw	r5, #65532	; 0xfffc
   87afe:	401d      	ands	r5, r3

  if(size < MIN_SIZE_ALIGNED) {
   87b00:	2d0b      	cmp	r5, #11
   87b02:	d903      	bls.n	87b0c <mem_malloc+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
   87b04:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
   87b08:	d901      	bls.n	87b0e <mem_malloc+0x1e>
   87b0a:	e08d      	b.n	87c28 <mem_malloc+0x138>
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);

  if(size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
   87b0c:	250c      	movs	r5, #12
  if (size > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
   87b0e:	4847      	ldr	r0, [pc, #284]	; (87c2c <mem_malloc+0x13c>)
   87b10:	2100      	movs	r1, #0
   87b12:	4b47      	ldr	r3, [pc, #284]	; (87c30 <mem_malloc+0x140>)
   87b14:	4798      	blx	r3
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
   87b16:	4b47      	ldr	r3, [pc, #284]	; (87c34 <mem_malloc+0x144>)
   87b18:	681a      	ldr	r2, [r3, #0]
   87b1a:	4b47      	ldr	r3, [pc, #284]	; (87c38 <mem_malloc+0x148>)
   87b1c:	681b      	ldr	r3, [r3, #0]
   87b1e:	1a9b      	subs	r3, r3, r2
   87b20:	b29b      	uxth	r3, r3
   87b22:	f5c5 6040 	rsb	r0, r5, #3072	; 0xc00
   87b26:	4283      	cmp	r3, r0
   87b28:	da71      	bge.n	87c0e <mem_malloc+0x11e>
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
   87b2a:	46ae      	mov	lr, r5
    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
   87b2c:	18d4      	adds	r4, r2, r3
        local_mem_free_count = mem_free_count;
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
   87b2e:	7921      	ldrb	r1, [r4, #4]
   87b30:	2900      	cmp	r1, #0
   87b32:	d169      	bne.n	87c08 <mem_malloc+0x118>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
   87b34:	5ad1      	ldrh	r1, [r2, r3]
   87b36:	f1a1 0608 	sub.w	r6, r1, #8
   87b3a:	1af6      	subs	r6, r6, r3
   87b3c:	4677      	mov	r7, lr
        local_mem_free_count = mem_free_count;
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
   87b3e:	42ae      	cmp	r6, r5
   87b40:	d362      	bcc.n	87c08 <mem_malloc+0x118>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
   87b42:	f10e 0014 	add.w	r0, lr, #20
   87b46:	4286      	cmp	r6, r0
   87b48:	d322      	bcc.n	87b90 <mem_malloc+0xa0>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
   87b4a:	f105 0108 	add.w	r1, r5, #8
   87b4e:	4419      	add	r1, r3
   87b50:	b289      	uxth	r1, r1
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
   87b52:	1850      	adds	r0, r2, r1
          mem2->used = 0;
   87b54:	2600      	movs	r6, #0
   87b56:	7106      	strb	r6, [r0, #4]
          mem2->next = mem->next;
   87b58:	8826      	ldrh	r6, [r4, #0]
   87b5a:	5256      	strh	r6, [r2, r1]
          mem2->prev = ptr;
   87b5c:	8043      	strh	r3, [r0, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
   87b5e:	8021      	strh	r1, [r4, #0]
          mem->used = 1;
   87b60:	2301      	movs	r3, #1
   87b62:	7123      	strb	r3, [r4, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
   87b64:	5a53      	ldrh	r3, [r2, r1]
   87b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
   87b6a:	bf1c      	itt	ne
   87b6c:	189b      	addne	r3, r3, r2
   87b6e:	8059      	strhne	r1, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
   87b70:	4a32      	ldr	r2, [pc, #200]	; (87c3c <mem_malloc+0x14c>)
   87b72:	f8b2 30aa 	ldrh.w	r3, [r2, #170]	; 0xaa
   87b76:	3308      	adds	r3, #8
   87b78:	442b      	add	r3, r5
   87b7a:	b29b      	uxth	r3, r3
   87b7c:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
   87b80:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
   87b84:	429a      	cmp	r2, r3
   87b86:	d215      	bcs.n	87bb4 <mem_malloc+0xc4>
   87b88:	4a2c      	ldr	r2, [pc, #176]	; (87c3c <mem_malloc+0x14c>)
   87b8a:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
   87b8e:	e011      	b.n	87bb4 <mem_malloc+0xc4>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
   87b90:	2301      	movs	r3, #1
   87b92:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
   87b94:	4829      	ldr	r0, [pc, #164]	; (87c3c <mem_malloc+0x14c>)
   87b96:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
   87b9a:	440b      	add	r3, r1
   87b9c:	1aa2      	subs	r2, r4, r2
   87b9e:	1a9b      	subs	r3, r3, r2
   87ba0:	b29b      	uxth	r3, r3
   87ba2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
   87ba6:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
   87baa:	429a      	cmp	r2, r3
   87bac:	bf3c      	itt	cc
   87bae:	4602      	movcc	r2, r0
   87bb0:	f8a2 30ac 	strhcc.w	r3, [r2, #172]	; 0xac
        }

        if (mem == lfree) {
   87bb4:	4b20      	ldr	r3, [pc, #128]	; (87c38 <mem_malloc+0x148>)
   87bb6:	681b      	ldr	r3, [r3, #0]
   87bb8:	429c      	cmp	r4, r3
   87bba:	d113      	bne.n	87be4 <mem_malloc+0xf4>
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
   87bbc:	7923      	ldrb	r3, [r4, #4]
   87bbe:	b18b      	cbz	r3, 87be4 <mem_malloc+0xf4>
   87bc0:	4b1f      	ldr	r3, [pc, #124]	; (87c40 <mem_malloc+0x150>)
   87bc2:	681a      	ldr	r2, [r3, #0]
   87bc4:	4294      	cmp	r4, r2
   87bc6:	d00d      	beq.n	87be4 <mem_malloc+0xf4>
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            lfree = (struct mem *)(void *)&ram[lfree->next];
   87bc8:	4b1a      	ldr	r3, [pc, #104]	; (87c34 <mem_malloc+0x144>)
   87bca:	6819      	ldr	r1, [r3, #0]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }

        if (mem == lfree) {
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
   87bcc:	4623      	mov	r3, r4
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            lfree = (struct mem *)(void *)&ram[lfree->next];
   87bce:	881b      	ldrh	r3, [r3, #0]
   87bd0:	440b      	add	r3, r1
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }

        if (mem == lfree) {
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
   87bd2:	7918      	ldrb	r0, [r3, #4]
   87bd4:	b910      	cbnz	r0, 87bdc <mem_malloc+0xec>
   87bd6:	4a18      	ldr	r2, [pc, #96]	; (87c38 <mem_malloc+0x148>)
   87bd8:	6013      	str	r3, [r2, #0]
   87bda:	e003      	b.n	87be4 <mem_malloc+0xf4>
   87bdc:	4293      	cmp	r3, r2
   87bde:	d1f6      	bne.n	87bce <mem_malloc+0xde>
   87be0:	4a15      	ldr	r2, [pc, #84]	; (87c38 <mem_malloc+0x148>)
   87be2:	6013      	str	r3, [r2, #0]
            lfree = (struct mem *)(void *)&ram[lfree->next];
          }
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
   87be4:	4811      	ldr	r0, [pc, #68]	; (87c2c <mem_malloc+0x13c>)
   87be6:	4b17      	ldr	r3, [pc, #92]	; (87c44 <mem_malloc+0x154>)
   87be8:	4798      	blx	r3
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
   87bea:	f107 0308 	add.w	r3, r7, #8
   87bee:	4423      	add	r3, r4
   87bf0:	4a13      	ldr	r2, [pc, #76]	; (87c40 <mem_malloc+0x150>)
   87bf2:	6812      	ldr	r2, [r2, #0]
   87bf4:	429a      	cmp	r2, r3
   87bf6:	d200      	bcs.n	87bfa <mem_malloc+0x10a>
   87bf8:	e7fe      	b.n	87bf8 <mem_malloc+0x108>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
   87bfa:	f014 0f03 	tst.w	r4, #3
   87bfe:	d000      	beq.n	87c02 <mem_malloc+0x112>
   87c00:	e7fe      	b.n	87c00 <mem_malloc+0x110>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
   87c02:	f104 0008 	add.w	r0, r4, #8
   87c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
   87c08:	8823      	ldrh	r3, [r4, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
   87c0a:	4283      	cmp	r3, r0
   87c0c:	db8e      	blt.n	87b2c <mem_malloc+0x3c>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
   87c0e:	4b0b      	ldr	r3, [pc, #44]	; (87c3c <mem_malloc+0x14c>)
   87c10:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
   87c14:	3201      	adds	r2, #1
   87c16:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
   87c1a:	4804      	ldr	r0, [pc, #16]	; (87c2c <mem_malloc+0x13c>)
   87c1c:	4b09      	ldr	r3, [pc, #36]	; (87c44 <mem_malloc+0x154>)
   87c1e:	4798      	blx	r3
  return NULL;
   87c20:	2000      	movs	r0, #0
   87c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    return NULL;
   87c24:	2000      	movs	r0, #0
   87c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
    return NULL;
   87c28:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
   87c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87c2c:	20074644 	.word	0x20074644
   87c30:	0008c501 	.word	0x0008c501
   87c34:	20074648 	.word	0x20074648
   87c38:	2007463c 	.word	0x2007463c
   87c3c:	20076788 	.word	0x20076788
   87c40:	20074640 	.word	0x20074640
   87c44:	0008c4e9 	.word	0x0008c4e9

00087c48 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
   87c48:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   87c4c:	4b1e      	ldr	r3, [pc, #120]	; (87cc8 <memp_init+0x80>)
   87c4e:	491f      	ldr	r1, [pc, #124]	; (87ccc <memp_init+0x84>)
   87c50:	f103 048c 	add.w	r4, r3, #140	; 0x8c
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
    MEMP_STATS_AVAIL(used, i, 0);
   87c54:	2200      	movs	r2, #0
   87c56:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    MEMP_STATS_AVAIL(max, i, 0);
   87c5a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    MEMP_STATS_AVAIL(err, i, 0);
   87c5e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
   87c62:	f831 0f02 	ldrh.w	r0, [r1, #2]!
   87c66:	f8a3 00b2 	strh.w	r0, [r3, #178]	; 0xb2
   87c6a:	330a      	adds	r3, #10
memp_init(void)
{
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
   87c6c:	42a3      	cmp	r3, r4
   87c6e:	d1f2      	bne.n	87c56 <memp_init+0xe>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
   87c70:	4917      	ldr	r1, [pc, #92]	; (87cd0 <memp_init+0x88>)
   87c72:	f021 0103 	bic.w	r1, r1, #3
   87c76:	4e17      	ldr	r6, [pc, #92]	; (87cd4 <memp_init+0x8c>)
   87c78:	f8df c05c 	ldr.w	ip, [pc, #92]	; 87cd8 <memp_init+0x90>
   87c7c:	f106 0a38 	add.w	sl, r6, #56	; 0x38
   87c80:	2700      	movs	r7, #0
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
   87c82:	46b8      	mov	r8, r7
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
   87c84:	f8df b054 	ldr.w	fp, [pc, #84]	; 87cdc <memp_init+0x94>
#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
   87c88:	f846 8b04 	str.w	r8, [r6], #4
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
   87c8c:	f83c 3b02 	ldrh.w	r3, [ip], #2
   87c90:	b19b      	cbz	r3, 87cba <memp_init+0x72>
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
   87c92:	f837 500b 	ldrh.w	r5, [r7, fp]
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
   87c96:	f83c 4c02 	ldrh.w	r4, [ip, #-2]
   87c9a:	46b1      	mov	r9, r6
   87c9c:	f856 0c04 	ldr.w	r0, [r6, #-4]
   87ca0:	460b      	mov	r3, r1
   87ca2:	4642      	mov	r2, r8
      memp->next = memp_tab[i];
   87ca4:	6018      	str	r0, [r3, #0]
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
   87ca6:	1959      	adds	r1, r3, r5
   87ca8:	3201      	adds	r2, #1
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
   87caa:	b290      	uxth	r0, r2
   87cac:	4284      	cmp	r4, r0
   87cae:	d902      	bls.n	87cb6 <memp_init+0x6e>
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
   87cb0:	4618      	mov	r0, r3
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
   87cb2:	460b      	mov	r3, r1
   87cb4:	e7f6      	b.n	87ca4 <memp_init+0x5c>
   87cb6:	f849 3c04 	str.w	r3, [r9, #-4]
   87cba:	3702      	adds	r7, #2

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
   87cbc:	4556      	cmp	r6, sl
   87cbe:	d1e3      	bne.n	87c88 <memp_init+0x40>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
   87cc0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   87cc4:	4770      	bx	lr
   87cc6:	bf00      	nop
   87cc8:	20076788 	.word	0x20076788
   87ccc:	000b1012 	.word	0x000b1012
   87cd0:	2007464f 	.word	0x2007464f
   87cd4:	20075984 	.word	0x20075984
   87cd8:	000b1014 	.word	0x000b1014
   87cdc:	000b1030 	.word	0x000b1030

00087ce0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
   87ce0:	b538      	push	{r3, r4, r5, lr}
   87ce2:	4604      	mov	r4, r0
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
   87ce4:	280d      	cmp	r0, #13
   87ce6:	d900      	bls.n	87cea <memp_malloc+0xa>
   87ce8:	e7fe      	b.n	87ce8 <memp_malloc+0x8>

  SYS_ARCH_PROTECT(old_level);
   87cea:	4b19      	ldr	r3, [pc, #100]	; (87d50 <memp_malloc+0x70>)
   87cec:	4798      	blx	r3
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
   87cee:	4b19      	ldr	r3, [pc, #100]	; (87d54 <memp_malloc+0x74>)
   87cf0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  
  if (memp != NULL) {
   87cf4:	b1ed      	cbz	r5, 87d32 <memp_malloc+0x52>
    memp_tab[type] = memp->next;
   87cf6:	682b      	ldr	r3, [r5, #0]
   87cf8:	4a16      	ldr	r2, [pc, #88]	; (87d54 <memp_malloc+0x74>)
   87cfa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
   87cfe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   87d02:	4b15      	ldr	r3, [pc, #84]	; (87d58 <memp_malloc+0x78>)
   87d04:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87d08:	f8b2 30b4 	ldrh.w	r3, [r2, #180]	; 0xb4
   87d0c:	3301      	adds	r3, #1
   87d0e:	b29b      	uxth	r3, r3
   87d10:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
   87d14:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
   87d18:	429a      	cmp	r2, r3
   87d1a:	d206      	bcs.n	87d2a <memp_malloc+0x4a>
   87d1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   87d20:	4a0d      	ldr	r2, [pc, #52]	; (87d58 <memp_malloc+0x78>)
   87d22:	eb02 0244 	add.w	r2, r2, r4, lsl #1
   87d26:	f8a2 30b6 	strh.w	r3, [r2, #182]	; 0xb6
    LWIP_ASSERT("memp_malloc: memp properly aligned",
   87d2a:	f015 0f03 	tst.w	r5, #3
   87d2e:	d00a      	beq.n	87d46 <memp_malloc+0x66>
   87d30:	e7fe      	b.n	87d30 <memp_malloc+0x50>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
    MEMP_STATS_INC(err, type);
   87d32:	4b09      	ldr	r3, [pc, #36]	; (87d58 <memp_malloc+0x78>)
   87d34:	00a2      	lsls	r2, r4, #2
   87d36:	1911      	adds	r1, r2, r4
   87d38:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   87d3c:	f8b1 30b8 	ldrh.w	r3, [r1, #184]	; 0xb8
   87d40:	3301      	adds	r3, #1
   87d42:	f8a1 30b8 	strh.w	r3, [r1, #184]	; 0xb8
  }

  SYS_ARCH_UNPROTECT(old_level);
   87d46:	4b05      	ldr	r3, [pc, #20]	; (87d5c <memp_malloc+0x7c>)
   87d48:	4798      	blx	r3

  return memp;
}
   87d4a:	4628      	mov	r0, r5
   87d4c:	bd38      	pop	{r3, r4, r5, pc}
   87d4e:	bf00      	nop
   87d50:	0008c74d 	.word	0x0008c74d
   87d54:	20075984 	.word	0x20075984
   87d58:	20076788 	.word	0x20076788
   87d5c:	0008c75d 	.word	0x0008c75d

00087d60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
   87d60:	b538      	push	{r3, r4, r5, lr}
   87d62:	4604      	mov	r4, r0
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
   87d64:	460d      	mov	r5, r1
   87d66:	b1b9      	cbz	r1, 87d98 <memp_free+0x38>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
   87d68:	f011 0f03 	tst.w	r1, #3
   87d6c:	d000      	beq.n	87d70 <memp_free+0x10>
   87d6e:	e7fe      	b.n	87d6e <memp_free+0xe>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
   87d70:	4b0a      	ldr	r3, [pc, #40]	; (87d9c <memp_free+0x3c>)
   87d72:	4798      	blx	r3
  memp_overflow_check_element_overflow(memp, type);
  memp_overflow_check_element_underflow(memp, type);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
   87d74:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   87d78:	4b09      	ldr	r3, [pc, #36]	; (87da0 <memp_free+0x40>)
   87d7a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   87d7e:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
   87d82:	3a01      	subs	r2, #1
   87d84:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  
  memp->next = memp_tab[type]; 
   87d88:	4b06      	ldr	r3, [pc, #24]	; (87da4 <memp_free+0x44>)
   87d8a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   87d8e:	602a      	str	r2, [r5, #0]
  memp_tab[type] = memp;
   87d90:	f843 5024 	str.w	r5, [r3, r4, lsl #2]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
   87d94:	4b04      	ldr	r3, [pc, #16]	; (87da8 <memp_free+0x48>)
   87d96:	4798      	blx	r3
   87d98:	bd38      	pop	{r3, r4, r5, pc}
   87d9a:	bf00      	nop
   87d9c:	0008c74d 	.word	0x0008c74d
   87da0:	20076788 	.word	0x20076788
   87da4:	20075984 	.word	0x20075984
   87da8:	0008c75d 	.word	0x0008c75d

00087dac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
   87dac:	4770      	bx	lr
   87dae:	bf00      	nop

00087db0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
   87db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87db2:	4605      	mov	r5, r0
   87db4:	460e      	mov	r6, r1
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if ((ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
   87db6:	680a      	ldr	r2, [r1, #0]
   87db8:	6843      	ldr	r3, [r0, #4]
   87dba:	429a      	cmp	r2, r3
   87dbc:	d020      	beq.n	87e00 <netif_set_ipaddr+0x50>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
   87dbe:	4b13      	ldr	r3, [pc, #76]	; (87e0c <netif_set_ipaddr+0x5c>)
   87dc0:	6818      	ldr	r0, [r3, #0]
    while (pcb != NULL) {
   87dc2:	b158      	cbz	r0, 87ddc <netif_set_ipaddr+0x2c>
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
   87dc4:	4f12      	ldr	r7, [pc, #72]	; (87e10 <netif_set_ipaddr+0x60>)
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
   87dc6:	6804      	ldr	r4, [r0, #0]
   87dc8:	686a      	ldr	r2, [r5, #4]
   87dca:	4294      	cmp	r4, r2
   87dcc:	d103      	bne.n	87dd6 <netif_set_ipaddr+0x26>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
   87dce:	68c4      	ldr	r4, [r0, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
   87dd0:	47b8      	blx	r7
        pcb = next;
   87dd2:	4620      	mov	r0, r4
   87dd4:	e000      	b.n	87dd8 <netif_set_ipaddr+0x28>
      } else {
        pcb = pcb->next;
   87dd6:	68c0      	ldr	r0, [r0, #12]
  /* address is actually being changed? */
  if ((ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
   87dd8:	2800      	cmp	r0, #0
   87dda:	d1f4      	bne.n	87dc6 <netif_set_ipaddr+0x16>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   87ddc:	4b0d      	ldr	r3, [pc, #52]	; (87e14 <netif_set_ipaddr+0x64>)
   87dde:	681b      	ldr	r3, [r3, #0]
   87de0:	b173      	cbz	r3, 87e00 <netif_set_ipaddr+0x50>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
   87de2:	2100      	movs	r1, #0
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
   87de4:	b14b      	cbz	r3, 87dfa <netif_set_ipaddr+0x4a>
   87de6:	681a      	ldr	r2, [r3, #0]
   87de8:	b13a      	cbz	r2, 87dfa <netif_set_ipaddr+0x4a>
   87dea:	6868      	ldr	r0, [r5, #4]
   87dec:	4282      	cmp	r2, r0
   87dee:	d104      	bne.n	87dfa <netif_set_ipaddr+0x4a>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
   87df0:	b10e      	cbz	r6, 87df6 <netif_set_ipaddr+0x46>
   87df2:	6832      	ldr	r2, [r6, #0]
   87df4:	e000      	b.n	87df8 <netif_set_ipaddr+0x48>
   87df6:	460a      	mov	r2, r1
   87df8:	601a      	str	r2, [r3, #0]
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   87dfa:	68db      	ldr	r3, [r3, #12]
   87dfc:	2b00      	cmp	r3, #0
   87dfe:	d1f1      	bne.n	87de4 <netif_set_ipaddr+0x34>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
   87e00:	b10e      	cbz	r6, 87e06 <netif_set_ipaddr+0x56>
   87e02:	6833      	ldr	r3, [r6, #0]
   87e04:	e000      	b.n	87e08 <netif_set_ipaddr+0x58>
   87e06:	2300      	movs	r3, #0
   87e08:	606b      	str	r3, [r5, #4]
   87e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87e0c:	200768d8 	.word	0x200768d8
   87e10:	000891dd 	.word	0x000891dd
   87e14:	200768e0 	.word	0x200768e0

00087e18 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
   87e18:	b570      	push	{r4, r5, r6, lr}
   87e1a:	4604      	mov	r4, r0
   87e1c:	4616      	mov	r6, r2
   87e1e:	461d      	mov	r5, r3
  netif_set_ipaddr(netif, ipaddr);
   87e20:	4b06      	ldr	r3, [pc, #24]	; (87e3c <netif_set_addr+0x24>)
   87e22:	4798      	blx	r3
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
   87e24:	b10e      	cbz	r6, 87e2a <netif_set_addr+0x12>
   87e26:	6833      	ldr	r3, [r6, #0]
   87e28:	e000      	b.n	87e2c <netif_set_addr+0x14>
   87e2a:	2300      	movs	r3, #0
   87e2c:	60a3      	str	r3, [r4, #8]
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
  ip_addr_set(&(netif->gw), gw);
   87e2e:	b10d      	cbz	r5, 87e34 <netif_set_addr+0x1c>
   87e30:	682b      	ldr	r3, [r5, #0]
   87e32:	e000      	b.n	87e36 <netif_set_addr+0x1e>
   87e34:	2300      	movs	r3, #0
   87e36:	60e3      	str	r3, [r4, #12]
   87e38:	bd70      	pop	{r4, r5, r6, pc}
   87e3a:	bf00      	nop
   87e3c:	00087db1 	.word	0x00087db1

00087e40 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
   87e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87e42:	4604      	mov	r4, r0
   87e44:	9d07      	ldr	r5, [sp, #28]
  static u8_t netifnum = 0;

  LWIP_ASSERT("No init function given", init != NULL);
   87e46:	b905      	cbnz	r5, 87e4a <netif_add+0xa>
   87e48:	e7fe      	b.n	87e48 <netif_add+0x8>

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
   87e4a:	2000      	movs	r0, #0
   87e4c:	6060      	str	r0, [r4, #4]
  ip_addr_set_zero(&netif->netmask);
   87e4e:	60a0      	str	r0, [r4, #8]
  ip_addr_set_zero(&netif->gw);
   87e50:	60e0      	str	r0, [r4, #12]
  netif->flags = 0;
   87e52:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
#if LWIP_AUTOIP
  /* netif not under AutoIP control by default */
  netif->autoip = NULL;
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
   87e56:	61e0      	str	r0, [r4, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
   87e58:	9806      	ldr	r0, [sp, #24]
   87e5a:	6220      	str	r0, [r4, #32]
  netif->num = netifnum++;
   87e5c:	4e0a      	ldr	r6, [pc, #40]	; (87e88 <netif_add+0x48>)
   87e5e:	7830      	ldrb	r0, [r6, #0]
   87e60:	1c47      	adds	r7, r0, #1
   87e62:	7037      	strb	r7, [r6, #0]
   87e64:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->input = input;
   87e68:	9808      	ldr	r0, [sp, #32]
   87e6a:	6120      	str	r0, [r4, #16]
#endif /* LWIP_NETIF_HWADDRHINT*/
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
   87e6c:	4620      	mov	r0, r4
   87e6e:	4e07      	ldr	r6, [pc, #28]	; (87e8c <netif_add+0x4c>)
   87e70:	47b0      	blx	r6

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
   87e72:	4620      	mov	r0, r4
   87e74:	47a8      	blx	r5
   87e76:	b928      	cbnz	r0, 87e84 <netif_add+0x44>
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
   87e78:	4b05      	ldr	r3, [pc, #20]	; (87e90 <netif_add+0x50>)
   87e7a:	681a      	ldr	r2, [r3, #0]
   87e7c:	6022      	str	r2, [r4, #0]
  netif_list = netif;
   87e7e:	601c      	str	r4, [r3, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
   87e80:	4620      	mov	r0, r4
   87e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  netif_set_addr(netif, ipaddr, netmask, gw);

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    return NULL;
   87e84:	2000      	movs	r0, #0
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
}
   87e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87e88:	200759bc 	.word	0x200759bc
   87e8c:	00087e19 	.word	0x00087e19
   87e90:	20076780 	.word	0x20076780

00087e94 <netif_set_default>:
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
   87e94:	4b01      	ldr	r3, [pc, #4]	; (87e9c <netif_set_default+0x8>)
   87e96:	6018      	str	r0, [r3, #0]
   87e98:	4770      	bx	lr
   87e9a:	bf00      	nop
   87e9c:	20076784 	.word	0x20076784

00087ea0 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
   87ea0:	b510      	push	{r4, lr}
   87ea2:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
   87ea4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   87ea8:	f013 0f01 	tst.w	r3, #1
   87eac:	d110      	bne.n	87ed0 <netif_set_up+0x30>
    netif->flags |= NETIF_FLAG_UP;
   87eae:	f043 0301 	orr.w	r3, r3, #1
   87eb2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
   87eb6:	69c3      	ldr	r3, [r0, #28]
   87eb8:	b103      	cbz	r3, 87ebc <netif_set_up+0x1c>
   87eba:	4798      	blx	r3
   87ebc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d

    if (netif->flags & NETIF_FLAG_LINK_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
   87ec0:	f003 0330 	and.w	r3, r3, #48	; 0x30
   87ec4:	2b30      	cmp	r3, #48	; 0x30
   87ec6:	d103      	bne.n	87ed0 <netif_set_up+0x30>
        etharp_gratuitous(netif);
   87ec8:	4620      	mov	r0, r4
   87eca:	1d21      	adds	r1, r4, #4
   87ecc:	4b01      	ldr	r3, [pc, #4]	; (87ed4 <netif_set_up+0x34>)
   87ece:	4798      	blx	r3
   87ed0:	bd10      	pop	{r4, pc}
   87ed2:	bf00      	nop
   87ed4:	0008bba9 	.word	0x0008bba9

00087ed8 <netif_set_status_callback>:
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
   87ed8:	b100      	cbz	r0, 87edc <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
   87eda:	61c1      	str	r1, [r0, #28]
   87edc:	4770      	bx	lr
   87ede:	bf00      	nop

00087ee0 <pbuf_pool_is_empty>:
}

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
   87ee0:	b510      	push	{r4, lr}
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);

  SYS_ARCH_PROTECT(old_level);
   87ee2:	4b0b      	ldr	r3, [pc, #44]	; (87f10 <pbuf_pool_is_empty+0x30>)
   87ee4:	4798      	blx	r3
  queued = pbuf_free_ooseq_queued;
   87ee6:	4b0b      	ldr	r3, [pc, #44]	; (87f14 <pbuf_pool_is_empty+0x34>)
   87ee8:	781c      	ldrb	r4, [r3, #0]
  pbuf_free_ooseq_queued = 1;
   87eea:	2201      	movs	r2, #1
   87eec:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
   87eee:	4b0a      	ldr	r3, [pc, #40]	; (87f18 <pbuf_pool_is_empty+0x38>)
   87ef0:	4798      	blx	r3

  if(!queued) {
   87ef2:	b964      	cbnz	r4, 87f0e <pbuf_pool_is_empty+0x2e>
    /* queue a call to pbuf_free_ooseq if not already queued */
    if(tcpip_callback_with_block(pbuf_free_ooseq, NULL, 0) != ERR_OK) {
   87ef4:	4809      	ldr	r0, [pc, #36]	; (87f1c <pbuf_pool_is_empty+0x3c>)
   87ef6:	2100      	movs	r1, #0
   87ef8:	460a      	mov	r2, r1
   87efa:	4b09      	ldr	r3, [pc, #36]	; (87f20 <pbuf_pool_is_empty+0x40>)
   87efc:	4798      	blx	r3
   87efe:	b130      	cbz	r0, 87f0e <pbuf_pool_is_empty+0x2e>
      SYS_ARCH_PROTECT(old_level);
   87f00:	4b03      	ldr	r3, [pc, #12]	; (87f10 <pbuf_pool_is_empty+0x30>)
   87f02:	4798      	blx	r3
      pbuf_free_ooseq_queued = 0;
   87f04:	2200      	movs	r2, #0
   87f06:	4b03      	ldr	r3, [pc, #12]	; (87f14 <pbuf_pool_is_empty+0x34>)
   87f08:	701a      	strb	r2, [r3, #0]
      SYS_ARCH_UNPROTECT(old_level);
   87f0a:	4b03      	ldr	r3, [pc, #12]	; (87f18 <pbuf_pool_is_empty+0x38>)
   87f0c:	4798      	blx	r3
   87f0e:	bd10      	pop	{r4, pc}
   87f10:	0008c74d 	.word	0x0008c74d
   87f14:	200759bd 	.word	0x200759bd
   87f18:	0008c75d 	.word	0x0008c75d
   87f1c:	00087f25 	.word	0x00087f25
   87f20:	000863c9 	.word	0x000863c9

00087f24 <pbuf_free_ooseq>:
 * This must be done in the correct thread context therefore this function
 * can only be used with NO_SYS=0 and through tcpip_callback.
 */
static void
pbuf_free_ooseq(void* arg)
{
   87f24:	b510      	push	{r4, lr}
  struct tcp_pcb* pcb;
  SYS_ARCH_DECL_PROTECT(old_level);
  LWIP_UNUSED_ARG(arg);

  SYS_ARCH_PROTECT(old_level);
   87f26:	4b0c      	ldr	r3, [pc, #48]	; (87f58 <pbuf_free_ooseq+0x34>)
   87f28:	4798      	blx	r3
  pbuf_free_ooseq_queued = 0;
   87f2a:	2200      	movs	r2, #0
   87f2c:	4b0b      	ldr	r3, [pc, #44]	; (87f5c <pbuf_free_ooseq+0x38>)
   87f2e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
   87f30:	4b0b      	ldr	r3, [pc, #44]	; (87f60 <pbuf_free_ooseq+0x3c>)
   87f32:	4798      	blx	r3

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
   87f34:	4b0b      	ldr	r3, [pc, #44]	; (87f64 <pbuf_free_ooseq+0x40>)
   87f36:	681c      	ldr	r4, [r3, #0]
   87f38:	b164      	cbz	r4, 87f54 <pbuf_free_ooseq+0x30>
    if (NULL != pcb->ooseq) {
   87f3a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   87f3c:	b138      	cbz	r0, 87f4e <pbuf_free_ooseq+0x2a>
   87f3e:	e001      	b.n	87f44 <pbuf_free_ooseq+0x20>
   87f40:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   87f42:	b120      	cbz	r0, 87f4e <pbuf_free_ooseq+0x2a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
   87f44:	4b08      	ldr	r3, [pc, #32]	; (87f68 <pbuf_free_ooseq+0x44>)
   87f46:	4798      	blx	r3
      pcb->ooseq = NULL;
   87f48:	2300      	movs	r3, #0
   87f4a:	67e3      	str	r3, [r4, #124]	; 0x7c
      return;
   87f4c:	bd10      	pop	{r4, pc}

  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_queued = 0;
  SYS_ARCH_UNPROTECT(old_level);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
   87f4e:	68e4      	ldr	r4, [r4, #12]
   87f50:	2c00      	cmp	r4, #0
   87f52:	d1f5      	bne.n	87f40 <pbuf_free_ooseq+0x1c>
   87f54:	bd10      	pop	{r4, pc}
   87f56:	bf00      	nop
   87f58:	0008c74d 	.word	0x0008c74d
   87f5c:	200759bd 	.word	0x200759bd
   87f60:	0008c75d 	.word	0x0008c75d
   87f64:	200768d8 	.word	0x200768d8
   87f68:	000888f1 	.word	0x000888f1

00087f6c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
   87f6c:	b470      	push	{r4, r5, r6}
   87f6e:	9c03      	ldr	r4, [sp, #12]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
  switch (l) {
   87f70:	2803      	cmp	r0, #3
   87f72:	d80c      	bhi.n	87f8e <pbuf_alloced_custom+0x22>
   87f74:	e8df f000 	tbb	[pc, r0]
   87f78:	0c070204 	.word	0x0c070204
{
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
   87f7c:	2000      	movs	r0, #0
   87f7e:	e000      	b.n	87f82 <pbuf_alloced_custom+0x16>
  switch (l) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset += PBUF_TRANSPORT_HLEN;
   87f80:	2014      	movs	r0, #20
    /* FALLTHROUGH */
  case PBUF_IP:
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
   87f82:	3014      	adds	r0, #20
   87f84:	e000      	b.n	87f88 <pbuf_alloced_custom+0x1c>
{
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
   87f86:	2000      	movs	r0, #0
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
    /* FALLTHROUGH */
  case PBUF_LINK:
    /* add room for link layer header */
    offset += PBUF_LINK_HLEN;
   87f88:	3010      	adds	r0, #16
   87f8a:	b280      	uxth	r0, r0
    break;
   87f8c:	e001      	b.n	87f92 <pbuf_alloced_custom+0x26>
   87f8e:	e7fe      	b.n	87f8e <pbuf_alloced_custom+0x22>
{
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
   87f90:	2000      	movs	r0, #0
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length < payload_mem_len) {
   87f92:	1cc6      	adds	r6, r0, #3
   87f94:	f026 0603 	bic.w	r6, r6, #3
   87f98:	440e      	add	r6, r1
   87f9a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
   87f9e:	42ae      	cmp	r6, r5
   87fa0:	db13      	blt.n	87fca <pbuf_alloced_custom+0x5e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  p->pbuf.next = NULL;
   87fa2:	2500      	movs	r5, #0
   87fa4:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
   87fa6:	b12c      	cbz	r4, 87fb4 <pbuf_alloced_custom+0x48>
    p->pbuf.payload = LWIP_MEM_ALIGN((void *)((u8_t *)payload_mem + offset));
   87fa8:	4420      	add	r0, r4
   87faa:	3003      	adds	r0, #3
   87fac:	f020 0003 	bic.w	r0, r0, #3
   87fb0:	6058      	str	r0, [r3, #4]
   87fb2:	e001      	b.n	87fb8 <pbuf_alloced_custom+0x4c>
  } else {
    p->pbuf.payload = NULL;
   87fb4:	2000      	movs	r0, #0
   87fb6:	6058      	str	r0, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
   87fb8:	2002      	movs	r0, #2
   87fba:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
   87fbc:	8119      	strh	r1, [r3, #8]
   87fbe:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
   87fc0:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
   87fc2:	2201      	movs	r2, #1
   87fc4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
   87fc6:	4618      	mov	r0, r3
   87fc8:	e000      	b.n	87fcc <pbuf_alloced_custom+0x60>
    return NULL;
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length < payload_mem_len) {
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
   87fca:	2000      	movs	r0, #0
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  p->pbuf.len = p->pbuf.tot_len = length;
  p->pbuf.type = type;
  p->pbuf.ref = 1;
  return &p->pbuf;
}
   87fcc:	bc70      	pop	{r4, r5, r6}
   87fce:	4770      	bx	lr

00087fd0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   87fd0:	b410      	push	{r4}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
   87fd2:	4603      	mov	r3, r0
   87fd4:	b900      	cbnz	r0, 87fd8 <pbuf_header+0x8>
   87fd6:	e7fe      	b.n	87fd6 <pbuf_header+0x6>
  if ((header_size_increment == 0) || (p == NULL)) {
   87fd8:	b351      	cbz	r1, 88030 <pbuf_header+0x60>
    return 0;
  }
 
  if (header_size_increment < 0){
   87fda:	2900      	cmp	r1, #0
   87fdc:	da05      	bge.n	87fea <pbuf_header+0x1a>
    increment_magnitude = -header_size_increment;
   87fde:	424a      	negs	r2, r1
   87fe0:	b292      	uxth	r2, r2
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
   87fe2:	8940      	ldrh	r0, [r0, #10]
   87fe4:	4290      	cmp	r0, r2
   87fe6:	d201      	bcs.n	87fec <pbuf_header+0x1c>
   87fe8:	e7fe      	b.n	87fe8 <pbuf_header+0x18>
  } else {
    increment_magnitude = header_size_increment;
   87fea:	b28a      	uxth	r2, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
   87fec:	7b18      	ldrb	r0, [r3, #12]
  /* remember current payload pointer */
  payload = p->payload;
   87fee:	685c      	ldr	r4, [r3, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
   87ff0:	b108      	cbz	r0, 87ff6 <pbuf_header+0x26>
   87ff2:	2803      	cmp	r0, #3
   87ff4:	d105      	bne.n	88002 <pbuf_header+0x32>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
   87ff6:	1a62      	subs	r2, r4, r1
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
   87ff8:	f103 0010 	add.w	r0, r3, #16
   87ffc:	4282      	cmp	r2, r0
   87ffe:	d20d      	bcs.n	8801c <pbuf_header+0x4c>
   88000:	e018      	b.n	88034 <pbuf_header+0x64>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
   88002:	3801      	subs	r0, #1
   88004:	b280      	uxth	r0, r0
   88006:	2801      	cmp	r0, #1
   88008:	d807      	bhi.n	8801a <pbuf_header+0x4a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
   8800a:	2900      	cmp	r1, #0
   8800c:	da14      	bge.n	88038 <pbuf_header+0x68>
   8800e:	8958      	ldrh	r0, [r3, #10]
   88010:	4290      	cmp	r0, r2
   88012:	d313      	bcc.n	8803c <pbuf_header+0x6c>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
   88014:	1a64      	subs	r4, r4, r1
   88016:	605c      	str	r4, [r3, #4]
   88018:	e001      	b.n	8801e <pbuf_header+0x4e>
   8801a:	e7fe      	b.n	8801a <pbuf_header+0x4a>
  payload = p->payload;

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
   8801c:	605a      	str	r2, [r3, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
   8801e:	b289      	uxth	r1, r1
   88020:	895a      	ldrh	r2, [r3, #10]
   88022:	440a      	add	r2, r1
   88024:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
   88026:	891a      	ldrh	r2, [r3, #8]
   88028:	4411      	add	r1, r2
   8802a:	8119      	strh	r1, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
   8802c:	2000      	movs	r0, #0
   8802e:	e006      	b.n	8803e <pbuf_header+0x6e>
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
   88030:	2000      	movs	r0, #0
   88032:	e004      	b.n	8803e <pbuf_header+0x6e>
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
   88034:	2001      	movs	r0, #1
   88036:	e002      	b.n	8803e <pbuf_header+0x6e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
   88038:	2001      	movs	r0, #1
   8803a:	e000      	b.n	8803e <pbuf_header+0x6e>
   8803c:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
   8803e:	f85d 4b04 	ldr.w	r4, [sp], #4
   88042:	4770      	bx	lr

00088044 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
   88044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
   88048:	4604      	mov	r4, r0
   8804a:	b900      	cbnz	r0, 8804e <pbuf_free+0xa>
   8804c:	e7fe      	b.n	8804c <pbuf_free+0x8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
   8804e:	7b03      	ldrb	r3, [r0, #12]
   88050:	2b03      	cmp	r3, #3
   88052:	d900      	bls.n	88056 <pbuf_free+0x12>
   88054:	e7fe      	b.n	88054 <pbuf_free+0x10>
   88056:	2500      	movs	r5, #0
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
   88058:	f8df 906c 	ldr.w	r9, [pc, #108]	; 880c8 <pbuf_free+0x84>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
    SYS_ARCH_UNPROTECT(old_level);
   8805c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 880cc <pbuf_free+0x88>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
   88060:	4f17      	ldr	r7, [pc, #92]	; (880c0 <pbuf_free+0x7c>)
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
   88062:	47c8      	blx	r9
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
   88064:	89e3      	ldrh	r3, [r4, #14]
   88066:	b903      	cbnz	r3, 8806a <pbuf_free+0x26>
   88068:	e7fe      	b.n	88068 <pbuf_free+0x24>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
   8806a:	3b01      	subs	r3, #1
   8806c:	b29e      	uxth	r6, r3
   8806e:	81e6      	strh	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
   88070:	47c0      	blx	r8
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
   88072:	bb16      	cbnz	r6, 880ba <pbuf_free+0x76>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
   88074:	6826      	ldr	r6, [r4, #0]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
   88076:	7b23      	ldrb	r3, [r4, #12]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   88078:	7b62      	ldrb	r2, [r4, #13]
   8807a:	f012 0f02 	tst.w	r2, #2
   8807e:	d005      	beq.n	8808c <pbuf_free+0x48>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
   88080:	6923      	ldr	r3, [r4, #16]
   88082:	b903      	cbnz	r3, 88086 <pbuf_free+0x42>
   88084:	e7fe      	b.n	88084 <pbuf_free+0x40>
        pc->custom_free_function(p);
   88086:	4620      	mov	r0, r4
   88088:	4798      	blx	r3
   8808a:	e011      	b.n	880b0 <pbuf_free+0x6c>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
   8808c:	2b03      	cmp	r3, #3
   8808e:	d104      	bne.n	8809a <pbuf_free+0x56>
          memp_free(MEMP_PBUF_POOL, p);
   88090:	200d      	movs	r0, #13
   88092:	4621      	mov	r1, r4
   88094:	4b0b      	ldr	r3, [pc, #44]	; (880c4 <pbuf_free+0x80>)
   88096:	4798      	blx	r3
   88098:	e00a      	b.n	880b0 <pbuf_free+0x6c>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
   8809a:	3b01      	subs	r3, #1
   8809c:	b29b      	uxth	r3, r3
   8809e:	2b01      	cmp	r3, #1
   880a0:	d804      	bhi.n	880ac <pbuf_free+0x68>
          memp_free(MEMP_PBUF, p);
   880a2:	200c      	movs	r0, #12
   880a4:	4621      	mov	r1, r4
   880a6:	4b07      	ldr	r3, [pc, #28]	; (880c4 <pbuf_free+0x80>)
   880a8:	4798      	blx	r3
   880aa:	e001      	b.n	880b0 <pbuf_free+0x6c>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
   880ac:	4620      	mov	r0, r4
   880ae:	47b8      	blx	r7
        }
      }
      count++;
   880b0:	3501      	adds	r5, #1
   880b2:	b2ed      	uxtb	r5, r5
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
   880b4:	b10e      	cbz	r6, 880ba <pbuf_free+0x76>
          mem_free(p);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
   880b6:	4634      	mov	r4, r6
   880b8:	e7d3      	b.n	88062 <pbuf_free+0x1e>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
   880ba:	4628      	mov	r0, r5
   880bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   880c0:	000878cd 	.word	0x000878cd
   880c4:	00087d61 	.word	0x00087d61
   880c8:	0008c74d 	.word	0x0008c74d
   880cc:	0008c75d 	.word	0x0008c75d

000880d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
   880d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   880d4:	460d      	mov	r5, r1
   880d6:	4617      	mov	r7, r2
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
  switch (layer) {
   880d8:	2803      	cmp	r0, #3
   880da:	d80c      	bhi.n	880f6 <pbuf_alloc+0x26>
   880dc:	e8df f000 	tbb	[pc, r0]
   880e0:	0c070204 	.word	0x0c070204
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
   880e4:	2300      	movs	r3, #0
   880e6:	e000      	b.n	880ea <pbuf_alloc+0x1a>
  switch (layer) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset += PBUF_TRANSPORT_HLEN;
   880e8:	2314      	movs	r3, #20
    /* FALLTHROUGH */
  case PBUF_IP:
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
   880ea:	3314      	adds	r3, #20
   880ec:	e000      	b.n	880f0 <pbuf_alloc+0x20>
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
   880ee:	2300      	movs	r3, #0
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
    /* FALLTHROUGH */
  case PBUF_LINK:
    /* add room for link layer header */
    offset += PBUF_LINK_HLEN;
   880f0:	3310      	adds	r3, #16
   880f2:	b29e      	uxth	r6, r3
    break;
   880f4:	e001      	b.n	880fa <pbuf_alloc+0x2a>
   880f6:	e7fe      	b.n	880f6 <pbuf_alloc+0x26>
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
   880f8:	2600      	movs	r6, #0
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  }

  switch (type) {
   880fa:	2f03      	cmp	r7, #3
   880fc:	f200 808e 	bhi.w	8821c <pbuf_alloc+0x14c>
   88100:	e8df f007 	tbb	[pc, r7]
   88104:	02808068 	.word	0x02808068
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
   88108:	200d      	movs	r0, #13
   8810a:	4b4b      	ldr	r3, [pc, #300]	; (88238 <pbuf_alloc+0x168>)
   8810c:	4798      	blx	r3
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
   8810e:	4604      	mov	r4, r0
   88110:	b920      	cbnz	r0, 8811c <pbuf_alloc+0x4c>
      PBUF_POOL_IS_EMPTY();
   88112:	4b4a      	ldr	r3, [pc, #296]	; (8823c <pbuf_alloc+0x16c>)
   88114:	4798      	blx	r3
      return NULL;
   88116:	2000      	movs	r0, #0
   88118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    p->type = type;
   8811c:	2303      	movs	r3, #3
   8811e:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
   88120:	2300      	movs	r3, #0
   88122:	6003      	str	r3, [r0, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
   88124:	1981      	adds	r1, r0, r6
   88126:	3113      	adds	r1, #19
   88128:	f021 0103 	bic.w	r1, r1, #3
   8812c:	6041      	str	r1, [r0, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
   8812e:	8105      	strh	r5, [r0, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
   88130:	1cf2      	adds	r2, r6, #3
   88132:	f022 0203 	bic.w	r2, r2, #3
   88136:	f5c2 72fa 	rsb	r2, r2, #500	; 0x1f4
   8813a:	42aa      	cmp	r2, r5
   8813c:	bfb4      	ite	lt
   8813e:	4613      	movlt	r3, r2
   88140:	462b      	movge	r3, r5
   88142:	8143      	strh	r3, [r0, #10]
   88144:	b29b      	uxth	r3, r3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
   88146:	f500 7601 	add.w	r6, r0, #516	; 0x204
   8814a:	4419      	add	r1, r3
   8814c:	428e      	cmp	r6, r1
   8814e:	d200      	bcs.n	88152 <pbuf_alloc+0x82>
   88150:	e7fe      	b.n	88150 <pbuf_alloc+0x80>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
   88152:	2a00      	cmp	r2, #0
   88154:	dc00      	bgt.n	88158 <pbuf_alloc+0x88>
   88156:	e7fe      	b.n	88156 <pbuf_alloc+0x86>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
   88158:	2201      	movs	r2, #1
   8815a:	81c2      	strh	r2, [r0, #14]
    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
   8815c:	1aed      	subs	r5, r5, r3
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
   8815e:	2d00      	cmp	r5, #0
   88160:	dd5d      	ble.n	8821e <pbuf_alloc+0x14e>
    p->ref = 1;

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
   88162:	4682      	mov	sl, r0
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
   88164:	f04f 090d 	mov.w	r9, #13
   88168:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 88238 <pbuf_alloc+0x168>
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccesfully */
        return NULL;
      }
      q->type = type;
   8816c:	2703      	movs	r7, #3
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
   8816e:	4648      	mov	r0, r9
   88170:	47c0      	blx	r8
      if (q == NULL) {
   88172:	4603      	mov	r3, r0
   88174:	b938      	cbnz	r0, 88186 <pbuf_alloc+0xb6>
        PBUF_POOL_IS_EMPTY();
   88176:	4b31      	ldr	r3, [pc, #196]	; (8823c <pbuf_alloc+0x16c>)
   88178:	4798      	blx	r3
        /* free chain so far allocated */
        pbuf_free(p);
   8817a:	4620      	mov	r0, r4
   8817c:	4b30      	ldr	r3, [pc, #192]	; (88240 <pbuf_alloc+0x170>)
   8817e:	4798      	blx	r3
        /* bail out unsuccesfully */
        return NULL;
   88180:	2000      	movs	r0, #0
   88182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      q->type = type;
   88186:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
   88188:	2200      	movs	r2, #0
   8818a:	7342      	strb	r2, [r0, #13]
      q->next = NULL;
   8818c:	6002      	str	r2, [r0, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
   8818e:	f8ca 0000 	str.w	r0, [sl]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
   88192:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   88196:	4295      	cmp	r5, r2
   88198:	dd00      	ble.n	8819c <pbuf_alloc+0xcc>
   8819a:	e7fe      	b.n	8819a <pbuf_alloc+0xca>
      q->tot_len = (u16_t)rem_len;
   8819c:	b2aa      	uxth	r2, r5
   8819e:	8102      	strh	r2, [r0, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
   881a0:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   881a4:	bf28      	it	cs
   881a6:	f44f 72fa 	movcs.w	r2, #500	; 0x1f4
   881aa:	8142      	strh	r2, [r0, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
   881ac:	f100 0110 	add.w	r1, r0, #16
   881b0:	6041      	str	r1, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
   881b2:	f011 0f03 	tst.w	r1, #3
   881b6:	d000      	beq.n	881ba <pbuf_alloc+0xea>
   881b8:	e7fe      	b.n	881b8 <pbuf_alloc+0xe8>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
   881ba:	8960      	ldrh	r0, [r4, #10]
   881bc:	6861      	ldr	r1, [r4, #4]
   881be:	4401      	add	r1, r0
   881c0:	428e      	cmp	r6, r1
   881c2:	d200      	bcs.n	881c6 <pbuf_alloc+0xf6>
   881c4:	e7fe      	b.n	881c4 <pbuf_alloc+0xf4>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
   881c6:	2101      	movs	r1, #1
   881c8:	81d9      	strh	r1, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
   881ca:	1aad      	subs	r5, r5, r2
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
   881cc:	2d00      	cmp	r5, #0
   881ce:	dd26      	ble.n	8821e <pbuf_alloc+0x14e>
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
      /* remember this pbuf for linkage in next iteration */
      r = q;
   881d0:	469a      	mov	sl, r3
   881d2:	e7cc      	b.n	8816e <pbuf_alloc+0x9e>
    /*r->next = NULL;*/

    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
   881d4:	f106 0013 	add.w	r0, r6, #19
   881d8:	f020 0003 	bic.w	r0, r0, #3
   881dc:	1ceb      	adds	r3, r5, #3
   881de:	f023 0303 	bic.w	r3, r3, #3
   881e2:	4418      	add	r0, r3
   881e4:	b280      	uxth	r0, r0
   881e6:	4b17      	ldr	r3, [pc, #92]	; (88244 <pbuf_alloc+0x174>)
   881e8:	4798      	blx	r3
    if (p == NULL) {
   881ea:	4604      	mov	r4, r0
   881ec:	b1f0      	cbz	r0, 8822c <pbuf_alloc+0x15c>
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
   881ee:	1983      	adds	r3, r0, r6
   881f0:	3313      	adds	r3, #19
   881f2:	f023 0303 	bic.w	r3, r3, #3
   881f6:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
   881f8:	8105      	strh	r5, [r0, #8]
   881fa:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
   881fc:	2300      	movs	r3, #0
   881fe:	6003      	str	r3, [r0, #0]
    p->type = type;
   88200:	7303      	strb	r3, [r0, #12]
   88202:	e00c      	b.n	8821e <pbuf_alloc+0x14e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
   88204:	200c      	movs	r0, #12
   88206:	4b0c      	ldr	r3, [pc, #48]	; (88238 <pbuf_alloc+0x168>)
   88208:	4798      	blx	r3
    if (p == NULL) {
   8820a:	4604      	mov	r4, r0
   8820c:	b188      	cbz	r0, 88232 <pbuf_alloc+0x162>
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
   8820e:	2300      	movs	r3, #0
   88210:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
   88212:	8105      	strh	r5, [r0, #8]
   88214:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
   88216:	6003      	str	r3, [r0, #0]
    p->type = type;
   88218:	7307      	strb	r7, [r0, #12]
    break;
   8821a:	e000      	b.n	8821e <pbuf_alloc+0x14e>
   8821c:	e7fe      	b.n	8821c <pbuf_alloc+0x14c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
   8821e:	2301      	movs	r3, #1
   88220:	81e3      	strh	r3, [r4, #14]
  /* set flags */
  p->flags = 0;
   88222:	2300      	movs	r3, #0
   88224:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
   88226:	4620      	mov	r0, r4
   88228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    if (p == NULL) {
      return NULL;
   8822c:	2000      	movs	r0, #0
   8822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
    if (p == NULL) {
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
   88232:	2000      	movs	r0, #0
  p->ref = 1;
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
}
   88234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88238:	00087ce1 	.word	0x00087ce1
   8823c:	00087ee1 	.word	0x00087ee1
   88240:	00088045 	.word	0x00088045
   88244:	00087af1 	.word	0x00087af1

00088248 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
   88248:	b538      	push	{r3, r4, r5, lr}
   8824a:	460d      	mov	r5, r1
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
   8824c:	4604      	mov	r4, r0
   8824e:	b900      	cbnz	r0, 88252 <pbuf_realloc+0xa>
   88250:	e7fe      	b.n	88250 <pbuf_realloc+0x8>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
   88252:	7b03      	ldrb	r3, [r0, #12]
   88254:	2b03      	cmp	r3, #3
   88256:	d900      	bls.n	8825a <pbuf_realloc+0x12>
   88258:	e7fe      	b.n	88258 <pbuf_realloc+0x10>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
   8825a:	8902      	ldrh	r2, [r0, #8]
   8825c:	428a      	cmp	r2, r1
   8825e:	d927      	bls.n	882b0 <pbuf_realloc+0x68>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
   88260:	1a8a      	subs	r2, r1, r2
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
   88262:	f64f 71fe 	movw	r1, #65534	; 0xfffe

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
   88266:	e00a      	b.n	8827e <pbuf_realloc+0x36>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
   88268:	1aed      	subs	r5, r5, r3
   8826a:	b2ad      	uxth	r5, r5
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
   8826c:	428a      	cmp	r2, r1
   8826e:	dd00      	ble.n	88272 <pbuf_realloc+0x2a>
   88270:	e7fe      	b.n	88270 <pbuf_realloc+0x28>
    q->tot_len += (u16_t)grow;
   88272:	8923      	ldrh	r3, [r4, #8]
   88274:	4413      	add	r3, r2
   88276:	8123      	strh	r3, [r4, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
   88278:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
   8827a:	b904      	cbnz	r4, 8827e <pbuf_realloc+0x36>
   8827c:	e7fe      	b.n	8827c <pbuf_realloc+0x34>

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
   8827e:	8963      	ldrh	r3, [r4, #10]
   88280:	429d      	cmp	r5, r3
   88282:	d8f1      	bhi.n	88268 <pbuf_realloc+0x20>
   88284:	4620      	mov	r0, r4
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
   88286:	7b22      	ldrb	r2, [r4, #12]
   88288:	b952      	cbnz	r2, 882a0 <pbuf_realloc+0x58>
   8828a:	429d      	cmp	r5, r3
   8828c:	d008      	beq.n	882a0 <pbuf_realloc+0x58>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
   8828e:	6863      	ldr	r3, [r4, #4]
   88290:	1b1b      	subs	r3, r3, r4
   88292:	18e9      	adds	r1, r5, r3
   88294:	b289      	uxth	r1, r1
   88296:	4b07      	ldr	r3, [pc, #28]	; (882b4 <pbuf_realloc+0x6c>)
   88298:	4798      	blx	r3
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
   8829a:	4604      	mov	r4, r0
   8829c:	b900      	cbnz	r0, 882a0 <pbuf_realloc+0x58>
   8829e:	e7fe      	b.n	8829e <pbuf_realloc+0x56>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
   882a0:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
   882a2:	8125      	strh	r5, [r4, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
   882a4:	6820      	ldr	r0, [r4, #0]
   882a6:	b108      	cbz	r0, 882ac <pbuf_realloc+0x64>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
   882a8:	4b03      	ldr	r3, [pc, #12]	; (882b8 <pbuf_realloc+0x70>)
   882aa:	4798      	blx	r3
  }
  /* q is last packet in chain */
  q->next = NULL;
   882ac:	2300      	movs	r3, #0
   882ae:	6023      	str	r3, [r4, #0]
   882b0:	bd38      	pop	{r3, r4, r5, pc}
   882b2:	bf00      	nop
   882b4:	000879c9 	.word	0x000879c9
   882b8:	00088045 	.word	0x00088045

000882bc <pbuf_clen>:
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
   882bc:	4603      	mov	r3, r0
   882be:	b130      	cbz	r0, 882ce <pbuf_clen+0x12>
u8_t
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
   882c0:	2000      	movs	r0, #0
  while (p != NULL) {
    ++len;
   882c2:	3001      	adds	r0, #1
   882c4:	b2c0      	uxtb	r0, r0
    p = p->next;
   882c6:	681b      	ldr	r3, [r3, #0]
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
   882c8:	2b00      	cmp	r3, #0
   882ca:	d1fa      	bne.n	882c2 <pbuf_clen+0x6>
   882cc:	4770      	bx	lr
u8_t
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
   882ce:	2000      	movs	r0, #0
  while (p != NULL) {
    ++len;
    p = p->next;
  }
  return len;
}
   882d0:	4770      	bx	lr
   882d2:	bf00      	nop

000882d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
   882d4:	b510      	push	{r4, lr}
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
   882d6:	4604      	mov	r4, r0
   882d8:	b130      	cbz	r0, 882e8 <pbuf_ref+0x14>
    SYS_ARCH_PROTECT(old_level);
   882da:	4b04      	ldr	r3, [pc, #16]	; (882ec <pbuf_ref+0x18>)
   882dc:	4798      	blx	r3
    ++(p->ref);
   882de:	89e3      	ldrh	r3, [r4, #14]
   882e0:	3301      	adds	r3, #1
   882e2:	81e3      	strh	r3, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
   882e4:	4b02      	ldr	r3, [pc, #8]	; (882f0 <pbuf_ref+0x1c>)
   882e6:	4798      	blx	r3
   882e8:	bd10      	pop	{r4, pc}
   882ea:	bf00      	nop
   882ec:	0008c74d 	.word	0x0008c74d
   882f0:	0008c75d 	.word	0x0008c75d

000882f4 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
   882f4:	b410      	push	{r4}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
   882f6:	4603      	mov	r3, r0
   882f8:	b118      	cbz	r0, 88302 <pbuf_cat+0xe>
   882fa:	b111      	cbz	r1, 88302 <pbuf_cat+0xe>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
   882fc:	6800      	ldr	r0, [r0, #0]
   882fe:	b908      	cbnz	r0, 88304 <pbuf_cat+0x10>
   88300:	e011      	b.n	88326 <pbuf_cat+0x32>
   88302:	e7fe      	b.n	88302 <pbuf_cat+0xe>
   88304:	461a      	mov	r2, r3
   88306:	4603      	mov	r3, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
   88308:	890c      	ldrh	r4, [r1, #8]
   8830a:	8910      	ldrh	r0, [r2, #8]
   8830c:	4420      	add	r0, r4
   8830e:	8110      	strh	r0, [r2, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
   88310:	6818      	ldr	r0, [r3, #0]
   88312:	b140      	cbz	r0, 88326 <pbuf_cat+0x32>
   88314:	461a      	mov	r2, r3
   88316:	4603      	mov	r3, r0
   88318:	e7f6      	b.n	88308 <pbuf_cat+0x14>
   8831a:	e7fe      	b.n	8831a <pbuf_cat+0x26>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
   8831c:	8908      	ldrh	r0, [r1, #8]
   8831e:	4402      	add	r2, r0
   88320:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
   88322:	6019      	str	r1, [r3, #0]
   88324:	e004      	b.n	88330 <pbuf_cat+0x3c>
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
   88326:	891a      	ldrh	r2, [r3, #8]
   88328:	8958      	ldrh	r0, [r3, #10]
   8832a:	4290      	cmp	r0, r2
   8832c:	d1f5      	bne.n	8831a <pbuf_cat+0x26>
   8832e:	e7f5      	b.n	8831c <pbuf_cat+0x28>
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
   88330:	f85d 4b04 	ldr.w	r4, [sp], #4
   88334:	4770      	bx	lr
   88336:	bf00      	nop

00088338 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
   88338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8833c:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
   8833e:	4605      	mov	r5, r0
   88340:	b120      	cbz	r0, 8834c <pbuf_copy+0x14>
   88342:	b119      	cbz	r1, 8834c <pbuf_copy+0x14>
   88344:	8902      	ldrh	r2, [r0, #8]
   88346:	890b      	ldrh	r3, [r1, #8]
   88348:	429a      	cmp	r2, r3
   8834a:	d201      	bcs.n	88350 <pbuf_copy+0x18>
   8834c:	e7fe      	b.n	8834c <pbuf_copy+0x14>
   8834e:	e7fe      	b.n	8834e <pbuf_copy+0x16>
   88350:	2600      	movs	r6, #0
   88352:	4637      	mov	r7, r6
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
   88354:	f8df a080 	ldr.w	sl, [pc, #128]	; 883d8 <pbuf_copy+0xa0>
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
   88358:	46b1      	mov	r9, r6
  /* iterate through pbuf chain */
  do
  {
    LWIP_ASSERT("p_to != NULL", p_to != NULL);
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
   8835a:	896b      	ldrh	r3, [r5, #10]
   8835c:	8962      	ldrh	r2, [r4, #10]
   8835e:	1bd8      	subs	r0, r3, r7
   88360:	1b91      	subs	r1, r2, r6
   88362:	4288      	cmp	r0, r1
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
   88364:	bfa7      	ittee	ge
   88366:	460a      	movge	r2, r1
   88368:	fa1f f882 	uxthge.w	r8, r2
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
   8836c:	ebc7 0303 	rsblt	r3, r7, r3
   88370:	fa1f f883 	uxthlt.w	r8, r3
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
   88374:	6868      	ldr	r0, [r5, #4]
   88376:	6861      	ldr	r1, [r4, #4]
   88378:	4438      	add	r0, r7
   8837a:	4431      	add	r1, r6
   8837c:	4642      	mov	r2, r8
   8837e:	47d0      	blx	sl
    offset_to += len;
   88380:	4447      	add	r7, r8
   88382:	b2bf      	uxth	r7, r7
    offset_from += len;
   88384:	4446      	add	r6, r8
   88386:	b2b6      	uxth	r6, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
   88388:	896b      	ldrh	r3, [r5, #10]
   8838a:	429f      	cmp	r7, r3
   8838c:	d900      	bls.n	88390 <pbuf_copy+0x58>
   8838e:	e7fe      	b.n	8838e <pbuf_copy+0x56>
    if (offset_to == p_to->len) {
   88390:	429f      	cmp	r7, r3
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
   88392:	bf04      	itt	eq
   88394:	682d      	ldreq	r5, [r5, #0]
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
   88396:	464f      	moveq	r7, r9
      p_to = p_to->next;
    }
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
   88398:	8963      	ldrh	r3, [r4, #10]
   8839a:	429e      	cmp	r6, r3
   8839c:	d900      	bls.n	883a0 <pbuf_copy+0x68>
   8839e:	e7fe      	b.n	8839e <pbuf_copy+0x66>
    if (offset_from >= p_from->len) {
   883a0:	429e      	cmp	r6, r3
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
   883a2:	bf24      	itt	cs
   883a4:	6824      	ldrcs	r4, [r4, #0]
      p_to = p_to->next;
    }
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
   883a6:	464e      	movcs	r6, r9
      p_from = p_from->next;
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
   883a8:	b134      	cbz	r4, 883b8 <pbuf_copy+0x80>
   883aa:	8962      	ldrh	r2, [r4, #10]
   883ac:	8923      	ldrh	r3, [r4, #8]
   883ae:	429a      	cmp	r2, r3
   883b0:	d102      	bne.n	883b8 <pbuf_copy+0x80>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
   883b2:	6823      	ldr	r3, [r4, #0]
   883b4:	b103      	cbz	r3, 883b8 <pbuf_copy+0x80>
   883b6:	e7fe      	b.n	883b6 <pbuf_copy+0x7e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
   883b8:	b14d      	cbz	r5, 883ce <pbuf_copy+0x96>
   883ba:	896a      	ldrh	r2, [r5, #10]
   883bc:	892b      	ldrh	r3, [r5, #8]
   883be:	429a      	cmp	r2, r3
   883c0:	d102      	bne.n	883c8 <pbuf_copy+0x90>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
   883c2:	682b      	ldr	r3, [r5, #0]
   883c4:	b103      	cbz	r3, 883c8 <pbuf_copy+0x90>
   883c6:	e7fe      	b.n	883c6 <pbuf_copy+0x8e>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
   883c8:	2c00      	cmp	r4, #0
   883ca:	d1c6      	bne.n	8835a <pbuf_copy+0x22>
   883cc:	e001      	b.n	883d2 <pbuf_copy+0x9a>
   883ce:	2c00      	cmp	r4, #0
   883d0:	d1bd      	bne.n	8834e <pbuf_copy+0x16>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
   883d2:	2000      	movs	r0, #0
   883d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   883d8:	0008cca9 	.word	0x0008cca9

000883dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
   883dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   883e0:	4689      	mov	r9, r1
   883e2:	4615      	mov	r5, r2
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
   883e4:	4604      	mov	r4, r0
   883e6:	b900      	cbnz	r0, 883ea <pbuf_copy_partial+0xe>
   883e8:	e7fe      	b.n	883e8 <pbuf_copy_partial+0xc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
   883ea:	b901      	cbnz	r1, 883ee <pbuf_copy_partial+0x12>
   883ec:	e7fe      	b.n	883ec <pbuf_copy_partial+0x10>
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
   883ee:	b322      	cbz	r2, 8843a <pbuf_copy_partial+0x5e>
   883f0:	2700      	movs	r7, #0
   883f2:	46b8      	mov	r8, r7
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
   883f4:	f8df b054 	ldr.w	fp, [pc, #84]	; 8844c <pbuf_copy_partial+0x70>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
   883f8:	46ba      	mov	sl, r7
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
    if ((offset != 0) && (offset >= p->len)) {
   883fa:	b12b      	cbz	r3, 88408 <pbuf_copy_partial+0x2c>
   883fc:	8962      	ldrh	r2, [r4, #10]
   883fe:	429a      	cmp	r2, r3
   88400:	d802      	bhi.n	88408 <pbuf_copy_partial+0x2c>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
   88402:	1a9b      	subs	r3, r3, r2
   88404:	b29b      	uxth	r3, r3
   88406:	e013      	b.n	88430 <pbuf_copy_partial+0x54>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
   88408:	8966      	ldrh	r6, [r4, #10]
   8840a:	1af6      	subs	r6, r6, r3
   8840c:	b2b6      	uxth	r6, r6
   8840e:	42ae      	cmp	r6, r5
   88410:	bf28      	it	cs
   88412:	462e      	movcs	r6, r5
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
   88414:	6861      	ldr	r1, [r4, #4]
   88416:	eb09 0008 	add.w	r0, r9, r8
   8841a:	4419      	add	r1, r3
   8841c:	4632      	mov	r2, r6
   8841e:	47d8      	blx	fp
      copied_total += buf_copy_len;
   88420:	4437      	add	r7, r6
   88422:	b2bf      	uxth	r7, r7
      left += buf_copy_len;
   88424:	44b0      	add	r8, r6
   88426:	fa1f f888 	uxth.w	r8, r8
      len -= buf_copy_len;
   8842a:	1bad      	subs	r5, r5, r6
   8842c:	b2ad      	uxth	r5, r5
      offset = 0;
   8842e:	4653      	mov	r3, sl
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
   88430:	6824      	ldr	r4, [r4, #0]
   88432:	b12d      	cbz	r5, 88440 <pbuf_copy_partial+0x64>
   88434:	2c00      	cmp	r4, #0
   88436:	d1e0      	bne.n	883fa <pbuf_copy_partial+0x1e>
   88438:	e005      	b.n	88446 <pbuf_copy_partial+0x6a>
   8843a:	2000      	movs	r0, #0
   8843c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88440:	4638      	mov	r0, r7
   88442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88446:	4638      	mov	r0, r7
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
   88448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8844c:	0008cca9 	.word	0x0008cca9

00088450 <pbuf_get_at>:
{
  u16_t copy_from = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
   88450:	4603      	mov	r3, r0
   88452:	b150      	cbz	r0, 8846a <pbuf_get_at+0x1a>
   88454:	8942      	ldrh	r2, [r0, #10]
   88456:	4291      	cmp	r1, r2
   88458:	d30b      	bcc.n	88472 <pbuf_get_at+0x22>
    copy_from -= q->len;
   8845a:	1a89      	subs	r1, r1, r2
   8845c:	b289      	uxth	r1, r1
    q = q->next;
   8845e:	681b      	ldr	r3, [r3, #0]
{
  u16_t copy_from = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
   88460:	b12b      	cbz	r3, 8846e <pbuf_get_at+0x1e>
   88462:	895a      	ldrh	r2, [r3, #10]
   88464:	428a      	cmp	r2, r1
   88466:	d9f8      	bls.n	8845a <pbuf_get_at+0xa>
   88468:	e003      	b.n	88472 <pbuf_get_at+0x22>
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > copy_from)) {
    return ((u8_t*)q->payload)[copy_from];
  }
  return 0;
   8846a:	2000      	movs	r0, #0
   8846c:	4770      	bx	lr
   8846e:	2000      	movs	r0, #0
   88470:	4770      	bx	lr
    copy_from -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > copy_from)) {
    return ((u8_t*)q->payload)[copy_from];
   88472:	685b      	ldr	r3, [r3, #4]
   88474:	5c58      	ldrb	r0, [r3, r1]
  }
  return 0;
}
   88476:	4770      	bx	lr

00088478 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
   88478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8847c:	460d      	mov	r5, r1
   8847e:	4690      	mov	r8, r2
  u16_t start = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
   88480:	4604      	mov	r4, r0
   88482:	b320      	cbz	r0, 884ce <pbuf_memcmp+0x56>
   88484:	8941      	ldrh	r1, [r0, #10]
   88486:	428d      	cmp	r5, r1
   88488:	d32c      	bcc.n	884e4 <pbuf_memcmp+0x6c>
    start -= q->len;
   8848a:	1a6d      	subs	r5, r5, r1
   8848c:	b2ad      	uxth	r5, r5
    q = q->next;
   8848e:	6824      	ldr	r4, [r4, #0]
{
  u16_t start = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
   88490:	b30c      	cbz	r4, 884d6 <pbuf_memcmp+0x5e>
   88492:	8961      	ldrh	r1, [r4, #10]
   88494:	42a9      	cmp	r1, r5
   88496:	d9f8      	bls.n	8848a <pbuf_memcmp+0x12>
   88498:	e024      	b.n	884e4 <pbuf_memcmp+0x6c>
   8849a:	f103 3aff 	add.w	sl, r3, #4294967295
   8849e:	fa1f fa8a 	uxth.w	sl, sl
   884a2:	f10a 0a01 	add.w	sl, sl, #1
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
    u16_t i;
    for(i = 0; i < n; i++) {
   884a6:	2600      	movs	r6, #0
      u8_t a = pbuf_get_at(q, start + i);
   884a8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 884f0 <pbuf_memcmp+0x78>
   884ac:	b2b7      	uxth	r7, r6
   884ae:	19e9      	adds	r1, r5, r7
   884b0:	4620      	mov	r0, r4
   884b2:	b289      	uxth	r1, r1
   884b4:	47c8      	blx	r9
      u8_t b = ((u8_t*)s2)[i];
      if (a != b) {
   884b6:	f818 3006 	ldrb.w	r3, [r8, r6]
   884ba:	4283      	cmp	r3, r0
   884bc:	d003      	beq.n	884c6 <pbuf_memcmp+0x4e>
        return i+1;
   884be:	1c78      	adds	r0, r7, #1
   884c0:	b280      	uxth	r0, r0
   884c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   884c6:	3601      	adds	r6, #1
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
    u16_t i;
    for(i = 0; i < n; i++) {
   884c8:	4556      	cmp	r6, sl
   884ca:	d1ef      	bne.n	884ac <pbuf_memcmp+0x34>
   884cc:	e007      	b.n	884de <pbuf_memcmp+0x66>
        return i+1;
      }
    }
    return 0;
  }
  return 0xffff;
   884ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
   884d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   884d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   884da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      u8_t b = ((u8_t*)s2)[i];
      if (a != b) {
        return i+1;
      }
    }
    return 0;
   884de:	2000      	movs	r0, #0
   884e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
    u16_t i;
    for(i = 0; i < n; i++) {
   884e4:	2b00      	cmp	r3, #0
   884e6:	d1d8      	bne.n	8849a <pbuf_memcmp+0x22>
      u8_t b = ((u8_t*)s2)[i];
      if (a != b) {
        return i+1;
      }
    }
    return 0;
   884e8:	2000      	movs	r0, #0
  }
  return 0xffff;
}
   884ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   884ee:	bf00      	nop
   884f0:	00088451 	.word	0x00088451

000884f4 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
   884f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   884f8:	4607      	mov	r7, r0
   884fa:	4688      	mov	r8, r1
   884fc:	4616      	mov	r6, r2
   884fe:	461c      	mov	r4, r3
  u16_t i;
  u16_t max = p->tot_len - mem_len;
   88500:	f8b0 9008 	ldrh.w	r9, [r0, #8]
  if (p->tot_len >= mem_len + start_offset) {
   88504:	18d3      	adds	r3, r2, r3
   88506:	4599      	cmp	r9, r3
   88508:	db12      	blt.n	88530 <pbuf_memfind+0x3c>
 */
u16_t
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  u16_t i;
  u16_t max = p->tot_len - mem_len;
   8850a:	ebc2 0909 	rsb	r9, r2, r9
   8850e:	fa1f f989 	uxth.w	r9, r9
  if (p->tot_len >= mem_len + start_offset) {
    for(i = start_offset; i <= max; ) {
   88512:	45a1      	cmp	r9, r4
   88514:	d310      	bcc.n	88538 <pbuf_memfind+0x44>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
   88516:	f8df a038 	ldr.w	sl, [pc, #56]	; 88550 <pbuf_memfind+0x5c>
   8851a:	4638      	mov	r0, r7
   8851c:	4621      	mov	r1, r4
   8851e:	4642      	mov	r2, r8
   88520:	4633      	mov	r3, r6
   88522:	47d0      	blx	sl
      if (plus == 0) {
   88524:	b160      	cbz	r0, 88540 <pbuf_memfind+0x4c>
        return i;
      } else {
        i += plus;
   88526:	4404      	add	r4, r0
   88528:	b2a4      	uxth	r4, r4
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  if (p->tot_len >= mem_len + start_offset) {
    for(i = start_offset; i <= max; ) {
   8852a:	45a1      	cmp	r9, r4
   8852c:	d2f5      	bcs.n	8851a <pbuf_memfind+0x26>
   8852e:	e00a      	b.n	88546 <pbuf_memfind+0x52>
      } else {
        i += plus;
      }
    }
  }
  return 0xFFFF;
   88530:	f64f 70ff 	movw	r0, #65535	; 0xffff
   88534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88538:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8853c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88540:	4620      	mov	r0, r4
   88542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88546:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   8854a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8854e:	bf00      	nop
   88550:	00088479 	.word	0x00088479

00088554 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(struct pbuf* p, const char* substr)
{
   88554:	b538      	push	{r3, r4, r5, lr}
   88556:	4605      	mov	r5, r0
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
   88558:	460c      	mov	r4, r1
   8855a:	b1a9      	cbz	r1, 88588 <pbuf_strstr+0x34>
   8855c:	780b      	ldrb	r3, [r1, #0]
   8855e:	b1b3      	cbz	r3, 8858e <pbuf_strstr+0x3a>
   88560:	8900      	ldrh	r0, [r0, #8]
   88562:	f64f 72ff 	movw	r2, #65535	; 0xffff
   88566:	4290      	cmp	r0, r2
   88568:	d016      	beq.n	88598 <pbuf_strstr+0x44>
    return 0xFFFF;
  }
  substr_len = strlen(substr);
   8856a:	4608      	mov	r0, r1
   8856c:	4b0b      	ldr	r3, [pc, #44]	; (8859c <pbuf_strstr+0x48>)
   8856e:	4798      	blx	r3
   88570:	4602      	mov	r2, r0
  if (substr_len >= 0xFFFF) {
   88572:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   88576:	4298      	cmp	r0, r3
   88578:	d80c      	bhi.n	88594 <pbuf_strstr+0x40>
    return 0xFFFF;
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
   8857a:	4628      	mov	r0, r5
   8857c:	4621      	mov	r1, r4
   8857e:	b292      	uxth	r2, r2
   88580:	2300      	movs	r3, #0
   88582:	4c07      	ldr	r4, [pc, #28]	; (885a0 <pbuf_strstr+0x4c>)
   88584:	47a0      	blx	r4
   88586:	bd38      	pop	{r3, r4, r5, pc}
u16_t
pbuf_strstr(struct pbuf* p, const char* substr)
{
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
    return 0xFFFF;
   88588:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8858c:	bd38      	pop	{r3, r4, r5, pc}
   8858e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   88592:	bd38      	pop	{r3, r4, r5, pc}
  }
  substr_len = strlen(substr);
  if (substr_len >= 0xFFFF) {
    return 0xFFFF;
   88594:	f64f 70ff 	movw	r0, #65535	; 0xffff
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
}
   88598:	bd38      	pop	{r3, r4, r5, pc}
   8859a:	bf00      	nop
   8859c:	0008cec3 	.word	0x0008cec3
   885a0:	000884f5 	.word	0x000884f5

000885a4 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
   885a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   885a8:	4607      	mov	r7, r0
  u8_t eaten = 0;

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
  proto = IPH_PROTO(iphdr);
   885aa:	6843      	ldr	r3, [r0, #4]
   885ac:	7a5e      	ldrb	r6, [r3, #9]

  prev = NULL;
  pcb = raw_pcbs;
   885ae:	4b19      	ldr	r3, [pc, #100]	; (88614 <raw_input+0x70>)
   885b0:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
   885b2:	b334      	cbz	r4, 88602 <raw_input+0x5e>
  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
  proto = IPH_PROTO(iphdr);

  prev = NULL;
   885b4:	2500      	movs	r5, #0
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
   885b6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 88618 <raw_input+0x74>
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
   885ba:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8861c <raw_input+0x78>
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
   885be:	7c21      	ldrb	r1, [r4, #16]
   885c0:	42b1      	cmp	r1, r6
   885c2:	d119      	bne.n	885f8 <raw_input+0x54>
   885c4:	b12c      	cbz	r4, 885d2 <raw_input+0x2e>
        (ip_addr_isany(&pcb->local_ip) ||
   885c6:	6823      	ldr	r3, [r4, #0]
   885c8:	b11b      	cbz	r3, 885d2 <raw_input+0x2e>
   885ca:	f8d9 2000 	ldr.w	r2, [r9]
   885ce:	4293      	cmp	r3, r2
   885d0:	d112      	bne.n	885f8 <raw_input+0x54>
      /* broadcast filter? */
      if ((pcb->so_options & SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
   885d2:	f8d4 c014 	ldr.w	ip, [r4, #20]
   885d6:	f1bc 0f00 	cmp.w	ip, #0
   885da:	d00d      	beq.n	885f8 <raw_input+0x54>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
   885dc:	69a0      	ldr	r0, [r4, #24]
   885de:	4621      	mov	r1, r4
   885e0:	463a      	mov	r2, r7
   885e2:	4643      	mov	r3, r8
   885e4:	47e0      	blx	ip
   885e6:	b138      	cbz	r0, 885f8 <raw_input+0x54>
            /* receive function ate the packet */
            p = NULL;
            eaten = 1;
            if (prev != NULL) {
   885e8:	b18d      	cbz	r5, 8860e <raw_input+0x6a>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
   885ea:	68e3      	ldr	r3, [r4, #12]
   885ec:	60eb      	str	r3, [r5, #12]
              pcb->next = raw_pcbs;
   885ee:	4b09      	ldr	r3, [pc, #36]	; (88614 <raw_input+0x70>)
   885f0:	681a      	ldr	r2, [r3, #0]
   885f2:	60e2      	str	r2, [r4, #12]
              raw_pcbs = pcb;
   885f4:	601c      	str	r4, [r3, #0]
   885f6:	e00a      	b.n	8860e <raw_input+0x6a>
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
   885f8:	68e1      	ldr	r1, [r4, #12]

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
   885fa:	b129      	cbz	r1, 88608 <raw_input+0x64>
   885fc:	4625      	mov	r5, r4
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
   885fe:	460c      	mov	r4, r1
   88600:	e7dd      	b.n	885be <raw_input+0x1a>
raw_input(struct pbuf *p, struct netif *inp)
{
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
   88602:	2000      	movs	r0, #0
   88604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88608:	2000      	movs	r0, #0
   8860a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
  proto = IPH_PROTO(iphdr);

  prev = NULL;
   8860e:	2001      	movs	r0, #1
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
}
   88610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88614:	200759c0 	.word	0x200759c0
   88618:	20075b5c 	.word	0x20075b5c
   8861c:	20075b64 	.word	0x20075b64

00088620 <raw_bind>:
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
  ip_addr_set(&pcb->local_ip, ipaddr);
   88620:	b109      	cbz	r1, 88626 <raw_bind+0x6>
   88622:	680b      	ldr	r3, [r1, #0]
   88624:	e000      	b.n	88628 <raw_bind+0x8>
   88626:	2300      	movs	r3, #0
   88628:	6003      	str	r3, [r0, #0]
  return ERR_OK;
}
   8862a:	2000      	movs	r0, #0
   8862c:	4770      	bx	lr
   8862e:	bf00      	nop

00088630 <raw_recv>:
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
   88630:	6141      	str	r1, [r0, #20]
  pcb->recv_arg = recv_arg;
   88632:	6182      	str	r2, [r0, #24]
   88634:	4770      	bx	lr
   88636:	bf00      	nop

00088638 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
   88638:	b508      	push	{r3, lr}
   8863a:	4601      	mov	r1, r0
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
   8863c:	4b0b      	ldr	r3, [pc, #44]	; (8866c <raw_remove+0x34>)
   8863e:	681a      	ldr	r2, [r3, #0]
   88640:	4282      	cmp	r2, r0
   88642:	d001      	beq.n	88648 <raw_remove+0x10>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
   88644:	b92a      	cbnz	r2, 88652 <raw_remove+0x1a>
   88646:	e00c      	b.n	88662 <raw_remove+0x2a>
{
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
   88648:	68d2      	ldr	r2, [r2, #12]
   8864a:	4b08      	ldr	r3, [pc, #32]	; (8866c <raw_remove+0x34>)
   8864c:	601a      	str	r2, [r3, #0]
   8864e:	e008      	b.n	88662 <raw_remove+0x2a>
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
   88650:	461a      	mov	r2, r3
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
   88652:	68d3      	ldr	r3, [r2, #12]
   88654:	b12b      	cbz	r3, 88662 <raw_remove+0x2a>
   88656:	4299      	cmp	r1, r3
   88658:	d1fa      	bne.n	88650 <raw_remove+0x18>
        /* remove pcb from list */
        pcb2->next = pcb->next;
   8865a:	68cb      	ldr	r3, [r1, #12]
   8865c:	60d3      	str	r3, [r2, #12]
  if (raw_pcbs == pcb) {
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
   8865e:	2b00      	cmp	r3, #0
   88660:	d1f6      	bne.n	88650 <raw_remove+0x18>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
   88662:	2000      	movs	r0, #0
   88664:	4b02      	ldr	r3, [pc, #8]	; (88670 <raw_remove+0x38>)
   88666:	4798      	blx	r3
   88668:	bd08      	pop	{r3, pc}
   8866a:	bf00      	nop
   8866c:	200759c0 	.word	0x200759c0
   88670:	00087d61 	.word	0x00087d61

00088674 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
   88674:	b538      	push	{r3, r4, r5, lr}
   88676:	4605      	mov	r5, r0
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
   88678:	2000      	movs	r0, #0
   8867a:	4b08      	ldr	r3, [pc, #32]	; (8869c <raw_new+0x28>)
   8867c:	4798      	blx	r3
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
   8867e:	4604      	mov	r4, r0
   88680:	b150      	cbz	r0, 88698 <raw_new+0x24>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
   88682:	2100      	movs	r1, #0
   88684:	221c      	movs	r2, #28
   88686:	4b06      	ldr	r3, [pc, #24]	; (886a0 <raw_new+0x2c>)
   88688:	4798      	blx	r3
    pcb->protocol = proto;
   8868a:	7425      	strb	r5, [r4, #16]
    pcb->ttl = RAW_TTL;
   8868c:	23ff      	movs	r3, #255	; 0xff
   8868e:	72a3      	strb	r3, [r4, #10]
    pcb->next = raw_pcbs;
   88690:	4b04      	ldr	r3, [pc, #16]	; (886a4 <raw_new+0x30>)
   88692:	681a      	ldr	r2, [r3, #0]
   88694:	60e2      	str	r2, [r4, #12]
    raw_pcbs = pcb;
   88696:	601c      	str	r4, [r3, #0]
  }
  return pcb;
}
   88698:	4620      	mov	r0, r4
   8869a:	bd38      	pop	{r3, r4, r5, pc}
   8869c:	00087ce1 	.word	0x00087ce1
   886a0:	0008ccbb 	.word	0x0008ccbb
   886a4:	200759c0 	.word	0x200759c0

000886a8 <stats_init>:
#include <string.h>

struct stats_ lwip_stats;

void stats_init(void)
{
   886a8:	4770      	bx	lr
   886aa:	bf00      	nop

000886ac <tcp_accept_null>:
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
}
   886ac:	f06f 0009 	mvn.w	r0, #9
   886b0:	4770      	bx	lr
   886b2:	bf00      	nop

000886b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
   886b4:	b4f0      	push	{r4, r5, r6, r7}
   886b6:	4b0f      	ldr	r3, [pc, #60]	; (886f4 <tcp_new_port+0x40>)
   886b8:	8818      	ldrh	r0, [r3, #0]
#define TCP_LOCAL_PORT_RANGE_END    0xffff
#endif
  static u16_t port = TCP_LOCAL_PORT_RANGE_START;
  
 again:
  if (port++ >= TCP_LOCAL_PORT_RANGE_END) {
   886ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
    port = TCP_LOCAL_PORT_RANGE_START;
   886be:	f44f 4740 	mov.w	r7, #49152	; 0xc000
   886c2:	2500      	movs	r5, #0
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
   886c4:	4c0c      	ldr	r4, [pc, #48]	; (886f8 <tcp_new_port+0x44>)
#define TCP_LOCAL_PORT_RANGE_END    0xffff
#endif
  static u16_t port = TCP_LOCAL_PORT_RANGE_START;
  
 again:
  if (port++ >= TCP_LOCAL_PORT_RANGE_END) {
   886c6:	42b0      	cmp	r0, r6
   886c8:	bf1a      	itte	ne
   886ca:	3001      	addne	r0, #1
   886cc:	b280      	uxthne	r0, r0
    port = TCP_LOCAL_PORT_RANGE_START;
   886ce:	4638      	moveq	r0, r7
   886d0:	4629      	mov	r1, r5
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
   886d2:	590b      	ldr	r3, [r1, r4]
   886d4:	681b      	ldr	r3, [r3, #0]
   886d6:	e003      	b.n	886e0 <tcp_new_port+0x2c>
      if (pcb->local_port == port) {
   886d8:	8b9a      	ldrh	r2, [r3, #28]
   886da:	4282      	cmp	r2, r0
   886dc:	d0f3      	beq.n	886c6 <tcp_new_port+0x12>
  if (port++ >= TCP_LOCAL_PORT_RANGE_END) {
    port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
   886de:	68db      	ldr	r3, [r3, #12]
   886e0:	2b00      	cmp	r3, #0
   886e2:	d1f9      	bne.n	886d8 <tcp_new_port+0x24>
   886e4:	3104      	adds	r1, #4
 again:
  if (port++ >= TCP_LOCAL_PORT_RANGE_END) {
    port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
   886e6:	2910      	cmp	r1, #16
   886e8:	d1f3      	bne.n	886d2 <tcp_new_port+0x1e>
   886ea:	4b02      	ldr	r3, [pc, #8]	; (886f4 <tcp_new_port+0x40>)
   886ec:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return port;
}
   886ee:	bcf0      	pop	{r4, r5, r6, r7}
   886f0:	4770      	bx	lr
   886f2:	bf00      	nop
   886f4:	200702b8 	.word	0x200702b8
   886f8:	000b104c 	.word	0x000b104c

000886fc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
   886fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   886fe:	4604      	mov	r4, r0
   88700:	460d      	mov	r5, r1
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
   88702:	7c03      	ldrb	r3, [r0, #16]
   88704:	b103      	cbz	r3, 88708 <tcp_bind+0xc>
   88706:	e7fe      	b.n	88706 <tcp_bind+0xa>
  if ((pcb->so_options & SOF_REUSEADDR) != 0) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
   88708:	b912      	cbnz	r2, 88710 <tcp_bind+0x14>
    port = tcp_new_port();
   8870a:	4b19      	ldr	r3, [pc, #100]	; (88770 <tcp_bind+0x74>)
   8870c:	4798      	blx	r3
   8870e:	4602      	mov	r2, r0
   88710:	4b18      	ldr	r3, [pc, #96]	; (88774 <tcp_bind+0x78>)
   88712:	1f19      	subs	r1, r3, #4
   88714:	f103 070c 	add.w	r7, r3, #12
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
   88718:	f851 3f04 	ldr.w	r3, [r1, #4]!
   8871c:	681b      	ldr	r3, [r3, #0]
   8871e:	b16b      	cbz	r3, 8873c <tcp_bind+0x40>
      if (cpcb->local_port == port) {
   88720:	8b98      	ldrh	r0, [r3, #28]
   88722:	4290      	cmp	r0, r2
   88724:	d107      	bne.n	88736 <tcp_bind+0x3a>
           tcp_connect. */
        if (((pcb->so_options & SOF_REUSEADDR) == 0) ||
          ((cpcb->so_options & SOF_REUSEADDR) == 0))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
   88726:	b1c3      	cbz	r3, 8875a <tcp_bind+0x5e>
   88728:	681e      	ldr	r6, [r3, #0]
   8872a:	b1c6      	cbz	r6, 8875e <tcp_bind+0x62>
   8872c:	b1cd      	cbz	r5, 88762 <tcp_bind+0x66>
              ip_addr_isany(ipaddr) ||
   8872e:	6828      	ldr	r0, [r5, #0]
   88730:	b1c8      	cbz	r0, 88766 <tcp_bind+0x6a>
   88732:	4286      	cmp	r6, r0
   88734:	d019      	beq.n	8876a <tcp_bind+0x6e>
    port = tcp_new_port();
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
   88736:	68db      	ldr	r3, [r3, #12]
   88738:	2b00      	cmp	r3, #0
   8873a:	d1f1      	bne.n	88720 <tcp_bind+0x24>
  if (port == 0) {
    port = tcp_new_port();
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
   8873c:	42b9      	cmp	r1, r7
   8873e:	d1eb      	bne.n	88718 <tcp_bind+0x1c>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
   88740:	b115      	cbz	r5, 88748 <tcp_bind+0x4c>
   88742:	682b      	ldr	r3, [r5, #0]
   88744:	b103      	cbz	r3, 88748 <tcp_bind+0x4c>
    pcb->local_ip = *ipaddr;
   88746:	6023      	str	r3, [r4, #0]
  }
  pcb->local_port = port;
   88748:	83a2      	strh	r2, [r4, #28]
  TCP_REG(&tcp_bound_pcbs, pcb);
   8874a:	4b0b      	ldr	r3, [pc, #44]	; (88778 <tcp_bind+0x7c>)
   8874c:	681a      	ldr	r2, [r3, #0]
   8874e:	60e2      	str	r2, [r4, #12]
   88750:	601c      	str	r4, [r3, #0]
   88752:	4b0a      	ldr	r3, [pc, #40]	; (8877c <tcp_bind+0x80>)
   88754:	4798      	blx	r3
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
   88756:	2000      	movs	r0, #0
   88758:	e008      	b.n	8876c <tcp_bind+0x70>
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
              ip_addr_isany(ipaddr) ||
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
            return ERR_USE;
   8875a:	20f8      	movs	r0, #248	; 0xf8
   8875c:	e006      	b.n	8876c <tcp_bind+0x70>
   8875e:	20f8      	movs	r0, #248	; 0xf8
   88760:	e004      	b.n	8876c <tcp_bind+0x70>
   88762:	20f8      	movs	r0, #248	; 0xf8
   88764:	e002      	b.n	8876c <tcp_bind+0x70>
   88766:	20f8      	movs	r0, #248	; 0xf8
   88768:	e000      	b.n	8876c <tcp_bind+0x70>
   8876a:	20f8      	movs	r0, #248	; 0xf8
  }
  pcb->local_port = port;
  TCP_REG(&tcp_bound_pcbs, pcb);
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
}
   8876c:	b240      	sxtb	r0, r0
   8876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88770:	000886b5 	.word	0x000886b5
   88774:	000b104c 	.word	0x000b104c
   88778:	200768e8 	.word	0x200768e8
   8877c:	000876c9 	.word	0x000876c9

00088780 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
   88780:	b538      	push	{r3, r4, r5, lr}
   88782:	4604      	mov	r4, r0
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
   88784:	7c03      	ldrb	r3, [r0, #16]
   88786:	b103      	cbz	r3, 8878a <tcp_listen_with_backlog+0xa>
   88788:	e7fe      	b.n	88788 <tcp_listen_with_backlog+0x8>
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
   8878a:	2003      	movs	r0, #3
   8878c:	4b24      	ldr	r3, [pc, #144]	; (88820 <tcp_listen_with_backlog+0xa0>)
   8878e:	4798      	blx	r3
  if (lpcb == NULL) {
   88790:	4605      	mov	r5, r0
   88792:	2800      	cmp	r0, #0
   88794:	d041      	beq.n	8881a <tcp_listen_with_backlog+0x9a>
    return NULL;
  }
  lpcb->callback_arg = pcb->callback_arg;
   88796:	6963      	ldr	r3, [r4, #20]
   88798:	6143      	str	r3, [r0, #20]
  lpcb->local_port = pcb->local_port;
   8879a:	8ba3      	ldrh	r3, [r4, #28]
   8879c:	8383      	strh	r3, [r0, #28]
  lpcb->state = LISTEN;
   8879e:	2301      	movs	r3, #1
   887a0:	7403      	strb	r3, [r0, #16]
  lpcb->prio = pcb->prio;
   887a2:	7c63      	ldrb	r3, [r4, #17]
   887a4:	7443      	strb	r3, [r0, #17]
  lpcb->so_options = pcb->so_options;
  lpcb->so_options |= SOF_ACCEPTCONN;
   887a6:	7a23      	ldrb	r3, [r4, #8]
   887a8:	f043 0302 	orr.w	r3, r3, #2
   887ac:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
   887ae:	7aa3      	ldrb	r3, [r4, #10]
   887b0:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
   887b2:	7a63      	ldrb	r3, [r4, #9]
   887b4:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
   887b6:	6823      	ldr	r3, [r4, #0]
   887b8:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
   887ba:	8ba3      	ldrh	r3, [r4, #28]
   887bc:	b1fb      	cbz	r3, 887fe <tcp_listen_with_backlog+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
   887be:	4b19      	ldr	r3, [pc, #100]	; (88824 <tcp_listen_with_backlog+0xa4>)
   887c0:	681a      	ldr	r2, [r3, #0]
   887c2:	42a2      	cmp	r2, r4
   887c4:	d102      	bne.n	887cc <tcp_listen_with_backlog+0x4c>
   887c6:	68d2      	ldr	r2, [r2, #12]
   887c8:	601a      	str	r2, [r3, #0]
   887ca:	e016      	b.n	887fa <tcp_listen_with_backlog+0x7a>
   887cc:	4b16      	ldr	r3, [pc, #88]	; (88828 <tcp_listen_with_backlog+0xa8>)
   887ce:	601a      	str	r2, [r3, #0]
   887d0:	b19a      	cbz	r2, 887fa <tcp_listen_with_backlog+0x7a>
   887d2:	68d3      	ldr	r3, [r2, #12]
   887d4:	42a3      	cmp	r3, r4
   887d6:	d10c      	bne.n	887f2 <tcp_listen_with_backlog+0x72>
   887d8:	e007      	b.n	887ea <tcp_listen_with_backlog+0x6a>
   887da:	68da      	ldr	r2, [r3, #12]
   887dc:	42a2      	cmp	r2, r4
   887de:	d001      	beq.n	887e4 <tcp_listen_with_backlog+0x64>
   887e0:	4613      	mov	r3, r2
   887e2:	e006      	b.n	887f2 <tcp_listen_with_backlog+0x72>
   887e4:	4a10      	ldr	r2, [pc, #64]	; (88828 <tcp_listen_with_backlog+0xa8>)
   887e6:	6013      	str	r3, [r2, #0]
   887e8:	e000      	b.n	887ec <tcp_listen_with_backlog+0x6c>
   887ea:	4613      	mov	r3, r2
   887ec:	68e2      	ldr	r2, [r4, #12]
   887ee:	60da      	str	r2, [r3, #12]
   887f0:	e003      	b.n	887fa <tcp_listen_with_backlog+0x7a>
   887f2:	2b00      	cmp	r3, #0
   887f4:	d1f1      	bne.n	887da <tcp_listen_with_backlog+0x5a>
   887f6:	4a0c      	ldr	r2, [pc, #48]	; (88828 <tcp_listen_with_backlog+0xa8>)
   887f8:	6013      	str	r3, [r2, #0]
   887fa:	2300      	movs	r3, #0
   887fc:	60e3      	str	r3, [r4, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
   887fe:	2002      	movs	r0, #2
   88800:	4621      	mov	r1, r4
   88802:	4b0a      	ldr	r3, [pc, #40]	; (8882c <tcp_listen_with_backlog+0xac>)
   88804:	4798      	blx	r3
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
   88806:	4b0a      	ldr	r3, [pc, #40]	; (88830 <tcp_listen_with_backlog+0xb0>)
   88808:	61ab      	str	r3, [r5, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
   8880a:	4b0a      	ldr	r3, [pc, #40]	; (88834 <tcp_listen_with_backlog+0xb4>)
   8880c:	681a      	ldr	r2, [r3, #0]
   8880e:	60ea      	str	r2, [r5, #12]
   88810:	601d      	str	r5, [r3, #0]
   88812:	4b09      	ldr	r3, [pc, #36]	; (88838 <tcp_listen_with_backlog+0xb8>)
   88814:	4798      	blx	r3
  return (struct tcp_pcb *)lpcb;
   88816:	4628      	mov	r0, r5
   88818:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  if (lpcb == NULL) {
    return NULL;
   8881a:	2000      	movs	r0, #0
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  return (struct tcp_pcb *)lpcb;
}
   8881c:	bd38      	pop	{r3, r4, r5, pc}
   8881e:	bf00      	nop
   88820:	00087ce1 	.word	0x00087ce1
   88824:	200768e8 	.word	0x200768e8
   88828:	200768e4 	.word	0x200768e4
   8882c:	00087d61 	.word	0x00087d61
   88830:	000886ad 	.word	0x000886ad
   88834:	200768e0 	.word	0x200768e0
   88838:	000876c9 	.word	0x000876c9

0008883c <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
   8883c:	b4f0      	push	{r4, r5, r6, r7}
   8883e:	4603      	mov	r3, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   88840:	6a42      	ldr	r2, [r0, #36]	; 0x24
   88842:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   88844:	18a0      	adds	r0, r4, r2

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   88846:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   88848:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   8884a:	f240 26ee 	movw	r6, #750	; 0x2ee
   8884e:	42b5      	cmp	r5, r6
   88850:	bf88      	it	hi
   88852:	4635      	movhi	r5, r6
   88854:	1a40      	subs	r0, r0, r1
   88856:	1b45      	subs	r5, r0, r5
   88858:	2d00      	cmp	r5, #0
   8885a:	db01      	blt.n	88860 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
   8885c:	855c      	strh	r4, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
   8885e:	e00c      	b.n	8887a <tcp_update_rcv_ann_wnd+0x3e>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
   88860:	1a50      	subs	r0, r2, r1
   88862:	2800      	cmp	r0, #0
   88864:	dd02      	ble.n	8886c <tcp_update_rcv_ann_wnd+0x30>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
   88866:	2000      	movs	r0, #0
   88868:	8558      	strh	r0, [r3, #42]	; 0x2a
   8886a:	e006      	b.n	8887a <tcp_update_rcv_ann_wnd+0x3e>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
   8886c:	1a8a      	subs	r2, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
   8886e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   88872:	d300      	bcc.n	88876 <tcp_update_rcv_ann_wnd+0x3a>
   88874:	e7fe      	b.n	88874 <tcp_update_rcv_ann_wnd+0x38>
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
   88876:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
   88878:	2000      	movs	r0, #0
  }
}
   8887a:	bcf0      	pop	{r4, r5, r6, r7}
   8887c:	4770      	bx	lr
   8887e:	bf00      	nop

00088880 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
   88880:	b510      	push	{r4, lr}
   88882:	4604      	mov	r4, r0
  int wnd_inflation;

  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
   88884:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   88886:	f5c2 437f 	rsb	r3, r2, #65280	; 0xff00
   8888a:	33ff      	adds	r3, #255	; 0xff
   8888c:	4299      	cmp	r1, r3
   8888e:	dd00      	ble.n	88892 <tcp_recved+0x12>
   88890:	e7fe      	b.n	88890 <tcp_recved+0x10>
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
   88892:	188b      	adds	r3, r1, r2
   88894:	b29b      	uxth	r3, r3
   88896:	8503      	strh	r3, [r0, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND) {
   88898:	f240 52dc 	movw	r2, #1500	; 0x5dc
   8889c:	4293      	cmp	r3, r2
    pcb->rcv_wnd = TCP_WND;
   8889e:	bf84      	itt	hi
   888a0:	4613      	movhi	r3, r2
   888a2:	8503      	strhhi	r3, [r0, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
   888a4:	4b07      	ldr	r3, [pc, #28]	; (888c4 <tcp_recved+0x44>)
   888a6:	4798      	blx	r3

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
   888a8:	f5b0 7fbb 	cmp.w	r0, #374	; 0x176
   888ac:	dd08      	ble.n	888c0 <tcp_recved+0x40>
    tcp_ack_now(pcb);
   888ae:	f894 3020 	ldrb.w	r3, [r4, #32]
   888b2:	f043 0302 	orr.w	r3, r3, #2
   888b6:	f884 3020 	strb.w	r3, [r4, #32]
    tcp_output(pcb);
   888ba:	4620      	mov	r0, r4
   888bc:	4b02      	ldr	r3, [pc, #8]	; (888c8 <tcp_recved+0x48>)
   888be:	4798      	blx	r3
   888c0:	bd10      	pop	{r4, pc}
   888c2:	bf00      	nop
   888c4:	0008883d 	.word	0x0008883d
   888c8:	0008b091 	.word	0x0008b091

000888cc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
   888cc:	b510      	push	{r4, lr}
  if (seg != NULL) {
   888ce:	4604      	mov	r4, r0
   888d0:	b148      	cbz	r0, 888e6 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
   888d2:	6840      	ldr	r0, [r0, #4]
   888d4:	b118      	cbz	r0, 888de <tcp_seg_free+0x12>
      pbuf_free(seg->p);
   888d6:	4b04      	ldr	r3, [pc, #16]	; (888e8 <tcp_seg_free+0x1c>)
   888d8:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
   888da:	2300      	movs	r3, #0
   888dc:	6063      	str	r3, [r4, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
   888de:	2004      	movs	r0, #4
   888e0:	4621      	mov	r1, r4
   888e2:	4b02      	ldr	r3, [pc, #8]	; (888ec <tcp_seg_free+0x20>)
   888e4:	4798      	blx	r3
   888e6:	bd10      	pop	{r4, pc}
   888e8:	00088045 	.word	0x00088045
   888ec:	00087d61 	.word	0x00087d61

000888f0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
   888f0:	b538      	push	{r3, r4, r5, lr}
  while (seg != NULL) {
   888f2:	4603      	mov	r3, r0
   888f4:	b130      	cbz	r0, 88904 <tcp_segs_free+0x14>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
   888f6:	4d04      	ldr	r5, [pc, #16]	; (88908 <tcp_segs_free+0x18>)
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
    struct tcp_seg *next = seg->next;
   888f8:	681c      	ldr	r4, [r3, #0]
    tcp_seg_free(seg);
   888fa:	4618      	mov	r0, r3
   888fc:	47a8      	blx	r5
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
   888fe:	b10c      	cbz	r4, 88904 <tcp_segs_free+0x14>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
   88900:	4623      	mov	r3, r4
   88902:	e7f9      	b.n	888f8 <tcp_segs_free+0x8>
   88904:	bd38      	pop	{r3, r4, r5, pc}
   88906:	bf00      	nop
   88908:	000888cd 	.word	0x000888cd

0008890c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
   8890c:	b538      	push	{r3, r4, r5, lr}
   8890e:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
   88910:	2004      	movs	r0, #4
   88912:	4b08      	ldr	r3, [pc, #32]	; (88934 <tcp_seg_copy+0x28>)
   88914:	4798      	blx	r3
  if (cseg == NULL) {
   88916:	4604      	mov	r4, r0
   88918:	b150      	cbz	r0, 88930 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
   8891a:	6828      	ldr	r0, [r5, #0]
   8891c:	6869      	ldr	r1, [r5, #4]
   8891e:	68aa      	ldr	r2, [r5, #8]
   88920:	68eb      	ldr	r3, [r5, #12]
   88922:	6020      	str	r0, [r4, #0]
   88924:	6061      	str	r1, [r4, #4]
   88926:	60a2      	str	r2, [r4, #8]
   88928:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
   8892a:	6860      	ldr	r0, [r4, #4]
   8892c:	4b02      	ldr	r3, [pc, #8]	; (88938 <tcp_seg_copy+0x2c>)
   8892e:	4798      	blx	r3
  return cseg;
}
   88930:	4620      	mov	r0, r4
   88932:	bd38      	pop	{r3, r4, r5, pc}
   88934:	00087ce1 	.word	0x00087ce1
   88938:	000882d5 	.word	0x000882d5

0008893c <tcp_arg>:
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{  
  pcb->callback_arg = arg;
   8893c:	6141      	str	r1, [r0, #20]
   8893e:	4770      	bx	lr

00088940 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  pcb->recv = recv;
   88940:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   88944:	4770      	bx	lr
   88946:	bf00      	nop

00088948 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  pcb->sent = sent;
   88948:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
   8894c:	4770      	bx	lr
   8894e:	bf00      	nop

00088950 <tcp_err>:
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  pcb->errf = err;
   88950:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
   88954:	4770      	bx	lr
   88956:	bf00      	nop

00088958 <tcp_accept>:
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  pcb->accept = accept;
   88958:	6181      	str	r1, [r0, #24]
   8895a:	4770      	bx	lr

0008895c <tcp_poll>:
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
#if LWIP_CALLBACK_API
  pcb->poll = poll;
   8895c:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
   88960:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
   88964:	4770      	bx	lr
   88966:	bf00      	nop

00088968 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
   88968:	b570      	push	{r4, r5, r6, lr}
   8896a:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
   8896c:	7c03      	ldrb	r3, [r0, #16]
   8896e:	2b01      	cmp	r3, #1
   88970:	d919      	bls.n	889a6 <tcp_pcb_purge+0x3e>
   88972:	2b0a      	cmp	r3, #10
   88974:	d017      	beq.n	889a6 <tcp_pcb_purge+0x3e>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
   88976:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   8897a:	b120      	cbz	r0, 88986 <tcp_pcb_purge+0x1e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
   8897c:	4b0a      	ldr	r3, [pc, #40]	; (889a8 <tcp_pcb_purge+0x40>)
   8897e:	4798      	blx	r3
      pcb->refused_data = NULL;
   88980:	2300      	movs	r3, #0
   88982:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
   88986:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   88988:	4e08      	ldr	r6, [pc, #32]	; (889ac <tcp_pcb_purge+0x44>)
   8898a:	47b0      	blx	r6
    pcb->ooseq = NULL;
   8898c:	2500      	movs	r5, #0
   8898e:	67e5      	str	r5, [r4, #124]	; 0x7c
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
   88990:	f64f 73ff 	movw	r3, #65535	; 0xffff
   88994:	86e3      	strh	r3, [r4, #54]	; 0x36

    tcp_segs_free(pcb->unsent);
   88996:	6f60      	ldr	r0, [r4, #116]	; 0x74
   88998:	47b0      	blx	r6
    tcp_segs_free(pcb->unacked);
   8899a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   8899c:	47b0      	blx	r6
    pcb->unacked = pcb->unsent = NULL;
   8899e:	6765      	str	r5, [r4, #116]	; 0x74
   889a0:	67a5      	str	r5, [r4, #120]	; 0x78
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
   889a2:	f8a4 5072 	strh.w	r5, [r4, #114]	; 0x72
   889a6:	bd70      	pop	{r4, r5, r6, pc}
   889a8:	00088045 	.word	0x00088045
   889ac:	000888f1 	.word	0x000888f1

000889b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
   889b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   889b4:	b082      	sub	sp, #8
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
   889b6:	4ba3      	ldr	r3, [pc, #652]	; (88c44 <tcp_slowtmr+0x294>)
   889b8:	681a      	ldr	r2, [r3, #0]
   889ba:	3201      	adds	r2, #1
   889bc:	601a      	str	r2, [r3, #0]

  /* Steps through all of the active PCBs. */
  prev = NULL;
  pcb = tcp_active_pcbs;
   889be:	4ba2      	ldr	r3, [pc, #648]	; (88c48 <tcp_slowtmr+0x298>)
   889c0:	681c      	ldr	r4, [r3, #0]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
   889c2:	2c00      	cmp	r4, #0
   889c4:	f000 8136 	beq.w	88c34 <tcp_slowtmr+0x284>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
   889c8:	7c23      	ldrb	r3, [r4, #16]
   889ca:	b133      	cbz	r3, 889da <tcp_slowtmr+0x2a>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
   889cc:	2b01      	cmp	r3, #1
   889ce:	d007      	beq.n	889e0 <tcp_slowtmr+0x30>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
   889d0:	2b0a      	cmp	r3, #10
   889d2:	d10c      	bne.n	889ee <tcp_slowtmr+0x3e>
   889d4:	e00a      	b.n	889ec <tcp_slowtmr+0x3c>
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
   889d6:	7c2b      	ldrb	r3, [r5, #16]
   889d8:	b903      	cbnz	r3, 889dc <tcp_slowtmr+0x2c>
   889da:	e7fe      	b.n	889da <tcp_slowtmr+0x2a>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
   889dc:	2b01      	cmp	r3, #1
   889de:	d100      	bne.n	889e2 <tcp_slowtmr+0x32>
   889e0:	e7fe      	b.n	889e0 <tcp_slowtmr+0x30>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
   889e2:	2b0a      	cmp	r3, #10
   889e4:	d002      	beq.n	889ec <tcp_slowtmr+0x3c>
   889e6:	4626      	mov	r6, r4
   889e8:	462c      	mov	r4, r5
   889ea:	e006      	b.n	889fa <tcp_slowtmr+0x4a>
   889ec:	e7fe      	b.n	889ec <tcp_slowtmr+0x3c>
  err = ERR_OK;

  ++tcp_ticks;

  /* Steps through all of the active PCBs. */
  prev = NULL;
   889ee:	2600      	movs	r6, #0
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
   889f0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 88c78 <tcp_slowtmr+0x2c8>
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
   889f4:	f8df 8284 	ldr.w	r8, [pc, #644]	; 88c7c <tcp_slowtmr+0x2cc>
      if((u32_t)(tcp_ticks - pcb->tmr) >
         (pcb->keep_idle + (pcb->keep_cnt*pcb->keep_intvl))
         / TCP_SLOW_INTERVAL)
#else      
      if((u32_t)(tcp_ticks - pcb->tmr) >
         (pcb->keep_idle + TCP_MAXIDLE) / TCP_SLOW_INTERVAL)
   889f8:	4f94      	ldr	r7, [pc, #592]	; (88c4c <tcp_slowtmr+0x29c>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
   889fa:	2b02      	cmp	r3, #2
   889fc:	d103      	bne.n	88a06 <tcp_slowtmr+0x56>
   889fe:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   88a02:	2a04      	cmp	r2, #4
   88a04:	d054      	beq.n	88ab0 <tcp_slowtmr+0x100>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
   88a06:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   88a0a:	2a0c      	cmp	r2, #12
   88a0c:	d052      	beq.n	88ab4 <tcp_slowtmr+0x104>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
   88a0e:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
   88a12:	b1b9      	cbz	r1, 88a44 <tcp_slowtmr+0x94>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
   88a14:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   88a18:	3301      	adds	r3, #1
   88a1a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
   88a1e:	4a8c      	ldr	r2, [pc, #560]	; (88c50 <tcp_slowtmr+0x2a0>)
   88a20:	440a      	add	r2, r1
   88a22:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   88a26:	4293      	cmp	r3, r2
   88a28:	d346      	bcc.n	88ab8 <tcp_slowtmr+0x108>
          pcb->persist_cnt = 0;
   88a2a:	2300      	movs	r3, #0
   88a2c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
   88a30:	2906      	cmp	r1, #6
            pcb->persist_backoff++;
   88a32:	bf9c      	itt	ls
   88a34:	3101      	addls	r1, #1
   88a36:	f884 10a0 	strbls.w	r1, [r4, #160]	; 0xa0
          }
          tcp_zero_window_probe(pcb);
   88a3a:	4620      	mov	r0, r4
   88a3c:	4b85      	ldr	r3, [pc, #532]	; (88c54 <tcp_slowtmr+0x2a4>)
   88a3e:	4798      	blx	r3
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
   88a40:	2500      	movs	r5, #0
   88a42:	e03e      	b.n	88ac2 <tcp_slowtmr+0x112>
          }
          tcp_zero_window_probe(pcb);
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0)
   88a44:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   88a46:	f411 4f00 	tst.w	r1, #32768	; 0x8000
          ++pcb->rtime;
   88a4a:	bf04      	itt	eq
   88a4c:	3101      	addeq	r1, #1
   88a4e:	86e1      	strheq	r1, [r4, #54]	; 0x36

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
   88a50:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   88a52:	b399      	cbz	r1, 88abc <tcp_slowtmr+0x10c>
   88a54:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
   88a58:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
   88a5c:	4288      	cmp	r0, r1
   88a5e:	db2f      	blt.n	88ac0 <tcp_slowtmr+0x110>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
   88a60:	2b02      	cmp	r3, #2
   88a62:	d00b      	beq.n	88a7c <tcp_slowtmr+0xcc>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
   88a64:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   88a68:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
   88a6c:	eb03 01e1 	add.w	r1, r3, r1, asr #3
   88a70:	f818 3002 	ldrb.w	r3, [r8, r2]
   88a74:	fa01 f303 	lsl.w	r3, r1, r3
   88a78:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
   88a7c:	2300      	movs	r3, #0
   88a7e:	86e3      	strh	r3, [r4, #54]	; 0x36

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
   88a80:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
   88a84:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->ssthresh = eff_wnd >> 1;
   88a88:	429a      	cmp	r2, r3
   88a8a:	bf28      	it	cs
   88a8c:	461a      	movcs	r2, r3
   88a8e:	0852      	lsrs	r2, r2, #1
   88a90:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
          if (pcb->ssthresh < (pcb->mss << 1)) {
   88a94:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   88a96:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
            pcb->ssthresh = (pcb->mss << 1);
   88a9a:	bfbc      	itt	lt
   88a9c:	005b      	lsllt	r3, r3, #1
   88a9e:	f8a4 3054 	strhlt.w	r3, [r4, #84]	; 0x54
          }
          pcb->cwnd = pcb->mss;
   88aa2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   88aa4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
   88aa8:	4620      	mov	r0, r4
   88aaa:	47c8      	blx	r9
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
   88aac:	2500      	movs	r5, #0
   88aae:	e008      	b.n	88ac2 <tcp_slowtmr+0x112>
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
   88ab0:	2501      	movs	r5, #1
   88ab2:	e006      	b.n	88ac2 <tcp_slowtmr+0x112>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
      ++pcb_remove;
   88ab4:	2501      	movs	r5, #1
   88ab6:	e004      	b.n	88ac2 <tcp_slowtmr+0x112>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
   88ab8:	2500      	movs	r5, #0
   88aba:	e002      	b.n	88ac2 <tcp_slowtmr+0x112>
   88abc:	2500      	movs	r5, #0
   88abe:	e000      	b.n	88ac2 <tcp_slowtmr+0x112>
   88ac0:	2500      	movs	r5, #0
          tcp_rexmit_rto(pcb);
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
   88ac2:	7c23      	ldrb	r3, [r4, #16]
   88ac4:	2b06      	cmp	r3, #6
   88ac6:	d109      	bne.n	88adc <tcp_slowtmr+0x12c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
   88ac8:	4b5e      	ldr	r3, [pc, #376]	; (88c44 <tcp_slowtmr+0x294>)
   88aca:	681a      	ldr	r2, [r3, #0]
   88acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   88ace:	1ad3      	subs	r3, r2, r3
   88ad0:	2b28      	cmp	r3, #40	; 0x28
   88ad2:	f240 8103 	bls.w	88cdc <tcp_slowtmr+0x32c>
          TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
   88ad6:	3501      	adds	r5, #1
   88ad8:	b2ed      	uxtb	r5, r5
   88ada:	e0ff      	b.n	88cdc <tcp_slowtmr+0x32c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
      }
    }

    /* Check if KEEPALIVE should be sent */
    if((pcb->so_options & SOF_KEEPALIVE) &&
   88adc:	7a22      	ldrb	r2, [r4, #8]
   88ade:	f012 0f08 	tst.w	r2, #8
   88ae2:	d02c      	beq.n	88b3e <tcp_slowtmr+0x18e>
   88ae4:	2b04      	cmp	r3, #4
   88ae6:	d001      	beq.n	88aec <tcp_slowtmr+0x13c>
       ((pcb->state == ESTABLISHED) ||
   88ae8:	2b07      	cmp	r3, #7
   88aea:	d12b      	bne.n	88b44 <tcp_slowtmr+0x194>
#if LWIP_TCP_KEEPALIVE
      if((u32_t)(tcp_ticks - pcb->tmr) >
         (pcb->keep_idle + (pcb->keep_cnt*pcb->keep_intvl))
         / TCP_SLOW_INTERVAL)
#else      
      if((u32_t)(tcp_ticks - pcb->tmr) >
   88aec:	4b55      	ldr	r3, [pc, #340]	; (88c44 <tcp_slowtmr+0x294>)
   88aee:	681a      	ldr	r2, [r3, #0]
   88af0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   88af2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_MAXIDLE) / TCP_SLOW_INTERVAL)
   88af4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   88af8:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
   88afc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
   88b00:	fba7 0303 	umull	r0, r3, r7, r3
#if LWIP_TCP_KEEPALIVE
      if((u32_t)(tcp_ticks - pcb->tmr) >
         (pcb->keep_idle + (pcb->keep_cnt*pcb->keep_intvl))
         / TCP_SLOW_INTERVAL)
#else      
      if((u32_t)(tcp_ticks - pcb->tmr) >
   88b04:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
   88b08:	d904      	bls.n	88b14 <tcp_slowtmr+0x164>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
   88b0a:	3501      	adds	r5, #1
   88b0c:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
   88b0e:	f04f 0a01 	mov.w	sl, #1
   88b12:	e01c      	b.n	88b4e <tcp_slowtmr+0x19e>
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * pcb->keep_intvl)
              / TCP_SLOW_INTERVAL)
#else
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEPINTVL_DEFAULT) 
   88b14:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   88b18:	484f      	ldr	r0, [pc, #316]	; (88c58 <tcp_slowtmr+0x2a8>)
   88b1a:	fb00 1303 	mla	r3, r0, r3, r1
              / TCP_SLOW_INTERVAL)
   88b1e:	fba7 1303 	umull	r1, r3, r7, r3
#if LWIP_TCP_KEEPALIVE
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * pcb->keep_intvl)
              / TCP_SLOW_INTERVAL)
#else
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
   88b22:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
   88b26:	d910      	bls.n	88b4a <tcp_slowtmr+0x19a>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEPINTVL_DEFAULT) 
              / TCP_SLOW_INTERVAL)
#endif /* LWIP_TCP_KEEPALIVE */
      {
        tcp_keepalive(pcb);
   88b28:	4620      	mov	r0, r4
   88b2a:	4b4c      	ldr	r3, [pc, #304]	; (88c5c <tcp_slowtmr+0x2ac>)
   88b2c:	4798      	blx	r3
        pcb->keep_cnt_sent++;
   88b2e:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   88b32:	3301      	adds	r3, #1
   88b34:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
    pcb_reset = 0;
   88b38:	f04f 0a00 	mov.w	sl, #0
   88b3c:	e007      	b.n	88b4e <tcp_slowtmr+0x19e>
   88b3e:	f04f 0a00 	mov.w	sl, #0
   88b42:	e004      	b.n	88b4e <tcp_slowtmr+0x19e>
   88b44:	f04f 0a00 	mov.w	sl, #0
   88b48:	e001      	b.n	88b4e <tcp_slowtmr+0x19e>
   88b4a:	f04f 0a00 	mov.w	sl, #0

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
   88b4e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   88b50:	b170      	cbz	r0, 88b70 <tcp_slowtmr+0x1c0>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
   88b52:	4b3c      	ldr	r3, [pc, #240]	; (88c44 <tcp_slowtmr+0x294>)
   88b54:	681a      	ldr	r2, [r3, #0]
   88b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
   88b58:	1ad2      	subs	r2, r2, r3
   88b5a:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
   88b5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
   88b62:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   88b66:	d303      	bcc.n	88b70 <tcp_slowtmr+0x1c0>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
   88b68:	4b3d      	ldr	r3, [pc, #244]	; (88c60 <tcp_slowtmr+0x2b0>)
   88b6a:	4798      	blx	r3
      pcb->ooseq = NULL;
   88b6c:	2300      	movs	r3, #0
   88b6e:	67e3      	str	r3, [r4, #124]	; 0x7c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
   88b70:	7c23      	ldrb	r3, [r4, #16]
   88b72:	2b03      	cmp	r3, #3
   88b74:	d108      	bne.n	88b88 <tcp_slowtmr+0x1d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
   88b76:	4b33      	ldr	r3, [pc, #204]	; (88c44 <tcp_slowtmr+0x294>)
   88b78:	681a      	ldr	r2, [r3, #0]
   88b7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   88b7c:	1ad3      	subs	r3, r2, r3
   88b7e:	2b28      	cmp	r3, #40	; 0x28
   88b80:	d90c      	bls.n	88b9c <tcp_slowtmr+0x1ec>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
   88b82:	3501      	adds	r5, #1
   88b84:	b2ed      	uxtb	r5, r5
   88b86:	e009      	b.n	88b9c <tcp_slowtmr+0x1ec>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
   88b88:	2b09      	cmp	r3, #9
   88b8a:	d107      	bne.n	88b9c <tcp_slowtmr+0x1ec>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
   88b8c:	4b2d      	ldr	r3, [pc, #180]	; (88c44 <tcp_slowtmr+0x294>)
   88b8e:	681a      	ldr	r2, [r3, #0]
   88b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
   88b92:	1ad3      	subs	r3, r2, r3
   88b94:	2bf0      	cmp	r3, #240	; 0xf0
        ++pcb_remove;
   88b96:	bf84      	itt	hi
   88b98:	3501      	addhi	r5, #1
   88b9a:	b2ed      	uxtbhi	r5, r5
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
   88b9c:	2d00      	cmp	r5, #0
   88b9e:	d02e      	beq.n	88bfe <tcp_slowtmr+0x24e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
   88ba0:	4620      	mov	r0, r4
   88ba2:	4b30      	ldr	r3, [pc, #192]	; (88c64 <tcp_slowtmr+0x2b4>)
   88ba4:	4798      	blx	r3
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
   88ba6:	b13e      	cbz	r6, 88bb8 <tcp_slowtmr+0x208>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
   88ba8:	4b27      	ldr	r3, [pc, #156]	; (88c48 <tcp_slowtmr+0x298>)
   88baa:	681b      	ldr	r3, [r3, #0]
   88bac:	429c      	cmp	r4, r3
   88bae:	d100      	bne.n	88bb2 <tcp_slowtmr+0x202>
   88bb0:	e7fe      	b.n	88bb0 <tcp_slowtmr+0x200>
        prev->next = pcb->next;
   88bb2:	68e3      	ldr	r3, [r4, #12]
   88bb4:	60f3      	str	r3, [r6, #12]
   88bb6:	e007      	b.n	88bc8 <tcp_slowtmr+0x218>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
   88bb8:	4b23      	ldr	r3, [pc, #140]	; (88c48 <tcp_slowtmr+0x298>)
   88bba:	681b      	ldr	r3, [r3, #0]
   88bbc:	42a3      	cmp	r3, r4
   88bbe:	d000      	beq.n	88bc2 <tcp_slowtmr+0x212>
   88bc0:	e7fe      	b.n	88bc0 <tcp_slowtmr+0x210>
        tcp_active_pcbs = pcb->next;
   88bc2:	68da      	ldr	r2, [r3, #12]
   88bc4:	4b20      	ldr	r3, [pc, #128]	; (88c48 <tcp_slowtmr+0x298>)
   88bc6:	601a      	str	r2, [r3, #0]
      }

      TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_ABRT);
   88bc8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   88bcc:	b11b      	cbz	r3, 88bd6 <tcp_slowtmr+0x226>
   88bce:	6960      	ldr	r0, [r4, #20]
   88bd0:	f06f 0109 	mvn.w	r1, #9
   88bd4:	4798      	blx	r3
      if (pcb_reset) {
   88bd6:	f1ba 0f00 	cmp.w	sl, #0
   88bda:	d009      	beq.n	88bf0 <tcp_slowtmr+0x240>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
   88bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88bde:	6a61      	ldr	r1, [r4, #36]	; 0x24
   88be0:	8ba3      	ldrh	r3, [r4, #28]
   88be2:	9300      	str	r3, [sp, #0]
   88be4:	8be3      	ldrh	r3, [r4, #30]
   88be6:	9301      	str	r3, [sp, #4]
   88be8:	4622      	mov	r2, r4
   88bea:	1d23      	adds	r3, r4, #4
   88bec:	4d1e      	ldr	r5, [pc, #120]	; (88c68 <tcp_slowtmr+0x2b8>)
   88bee:	47a8      	blx	r5
          pcb->local_port, pcb->remote_port);
      }

      pcb2 = pcb;
      pcb = pcb->next;
   88bf0:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
   88bf2:	2002      	movs	r0, #2
   88bf4:	4621      	mov	r1, r4
   88bf6:	4b1d      	ldr	r3, [pc, #116]	; (88c6c <tcp_slowtmr+0x2bc>)
   88bf8:	4798      	blx	r3
   88bfa:	4634      	mov	r4, r6
   88bfc:	e017      	b.n	88c2e <tcp_slowtmr+0x27e>
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
   88bfe:	68e5      	ldr	r5, [r4, #12]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
   88c00:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   88c04:	3301      	adds	r3, #1
   88c06:	b2db      	uxtb	r3, r3
   88c08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (prev->polltmr >= prev->pollinterval) {
   88c0c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   88c10:	429a      	cmp	r2, r3
   88c12:	d80c      	bhi.n	88c2e <tcp_slowtmr+0x27e>
        prev->polltmr = 0;
   88c14:	2300      	movs	r3, #0
   88c16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        TCP_EVENT_POLL(prev, err);
   88c1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   88c1e:	b11b      	cbz	r3, 88c28 <tcp_slowtmr+0x278>
   88c20:	6960      	ldr	r0, [r4, #20]
   88c22:	4621      	mov	r1, r4
   88c24:	4798      	blx	r3
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
   88c26:	b910      	cbnz	r0, 88c2e <tcp_slowtmr+0x27e>
          tcp_output(prev);
   88c28:	4620      	mov	r0, r4
   88c2a:	4b11      	ldr	r3, [pc, #68]	; (88c70 <tcp_slowtmr+0x2c0>)
   88c2c:	4798      	blx	r3
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
   88c2e:	2d00      	cmp	r5, #0
   88c30:	f47f aed1 	bne.w	889d6 <tcp_slowtmr+0x26>
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
   88c34:	4b0f      	ldr	r3, [pc, #60]	; (88c74 <tcp_slowtmr+0x2c4>)
   88c36:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
   88c38:	2c00      	cmp	r4, #0
   88c3a:	d052      	beq.n	88ce2 <tcp_slowtmr+0x332>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
   88c3c:	7c23      	ldrb	r3, [r4, #16]
   88c3e:	2b0a      	cmp	r3, #10
   88c40:	d022      	beq.n	88c88 <tcp_slowtmr+0x2d8>
   88c42:	e020      	b.n	88c86 <tcp_slowtmr+0x2d6>
   88c44:	200768dc 	.word	0x200768dc
   88c48:	200768d8 	.word	0x200768d8
   88c4c:	10624dd3 	.word	0x10624dd3
   88c50:	000b106c 	.word	0x000b106c
   88c54:	0008b5a9 	.word	0x0008b5a9
   88c58:	000124f8 	.word	0x000124f8
   88c5c:	0008b531 	.word	0x0008b531
   88c60:	000888f1 	.word	0x000888f1
   88c64:	00088969 	.word	0x00088969
   88c68:	0008b38d 	.word	0x0008b38d
   88c6c:	00087d61 	.word	0x00087d61
   88c70:	0008b091 	.word	0x0008b091
   88c74:	200768ec 	.word	0x200768ec
   88c78:	0008b44d 	.word	0x0008b44d
   88c7c:	000b105c 	.word	0x000b105c
   88c80:	7c23      	ldrb	r3, [r4, #16]
   88c82:	2b0a      	cmp	r3, #10
   88c84:	d005      	beq.n	88c92 <tcp_slowtmr+0x2e2>
   88c86:	e7fe      	b.n	88c86 <tcp_slowtmr+0x2d6>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
   88c88:	2500      	movs	r5, #0
  while (pcb != NULL) {
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
   88c8a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 88cf4 <tcp_slowtmr+0x344>


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
   88c8e:	4f16      	ldr	r7, [pc, #88]	; (88ce8 <tcp_slowtmr+0x338>)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
      }
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
   88c90:	4e16      	ldr	r6, [pc, #88]	; (88cec <tcp_slowtmr+0x33c>)
  while (pcb != NULL) {
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
   88c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
   88c94:	f8d8 2000 	ldr.w	r2, [r8]
   88c98:	1ad3      	subs	r3, r2, r3
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
   88c9a:	2bf0      	cmp	r3, #240	; 0xf0
   88c9c:	d919      	bls.n	88cd2 <tcp_slowtmr+0x322>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
   88c9e:	4620      	mov	r0, r4
   88ca0:	47b8      	blx	r7
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
   88ca2:	b13d      	cbz	r5, 88cb4 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
   88ca4:	4b12      	ldr	r3, [pc, #72]	; (88cf0 <tcp_slowtmr+0x340>)
   88ca6:	681b      	ldr	r3, [r3, #0]
   88ca8:	429c      	cmp	r4, r3
   88caa:	d100      	bne.n	88cae <tcp_slowtmr+0x2fe>
   88cac:	e7fe      	b.n	88cac <tcp_slowtmr+0x2fc>
        prev->next = pcb->next;
   88cae:	68e3      	ldr	r3, [r4, #12]
   88cb0:	60eb      	str	r3, [r5, #12]
   88cb2:	e007      	b.n	88cc4 <tcp_slowtmr+0x314>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
   88cb4:	4b0e      	ldr	r3, [pc, #56]	; (88cf0 <tcp_slowtmr+0x340>)
   88cb6:	681b      	ldr	r3, [r3, #0]
   88cb8:	42a3      	cmp	r3, r4
   88cba:	d000      	beq.n	88cbe <tcp_slowtmr+0x30e>
   88cbc:	e7fe      	b.n	88cbc <tcp_slowtmr+0x30c>
        tcp_tw_pcbs = pcb->next;
   88cbe:	68da      	ldr	r2, [r3, #12]
   88cc0:	4b0b      	ldr	r3, [pc, #44]	; (88cf0 <tcp_slowtmr+0x340>)
   88cc2:	601a      	str	r2, [r3, #0]
      }
      pcb2 = pcb;
      pcb = pcb->next;
   88cc4:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
   88cc8:	2002      	movs	r0, #2
   88cca:	4621      	mov	r1, r4
   88ccc:	47b0      	blx	r6
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
      }
      pcb2 = pcb;
      pcb = pcb->next;
   88cce:	464c      	mov	r4, r9
   88cd0:	e001      	b.n	88cd6 <tcp_slowtmr+0x326>
      memp_free(MEMP_TCP_PCB, pcb2);
    } else {
      prev = pcb;
      pcb = pcb->next;
   88cd2:	4625      	mov	r5, r4
   88cd4:	68e4      	ldr	r4, [r4, #12]

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
   88cd6:	2c00      	cmp	r4, #0
   88cd8:	d1d2      	bne.n	88c80 <tcp_slowtmr+0x2d0>
   88cda:	e002      	b.n	88ce2 <tcp_slowtmr+0x332>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;
    pcb_reset = 0;
   88cdc:	f04f 0a00 	mov.w	sl, #0
   88ce0:	e735      	b.n	88b4e <tcp_slowtmr+0x19e>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
   88ce2:	b002      	add	sp, #8
   88ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88ce8:	00088969 	.word	0x00088969
   88cec:	00087d61 	.word	0x00087d61
   88cf0:	200768ec 	.word	0x200768ec
   88cf4:	200768dc 	.word	0x200768dc

00088cf8 <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
   88cf8:	4b03      	ldr	r3, [pc, #12]	; (88d08 <tcp_next_iss+0x10>)
   88cfa:	4a04      	ldr	r2, [pc, #16]	; (88d0c <tcp_next_iss+0x14>)
   88cfc:	6810      	ldr	r0, [r2, #0]
   88cfe:	681a      	ldr	r2, [r3, #0]
   88d00:	4410      	add	r0, r2
   88d02:	6018      	str	r0, [r3, #0]
  return iss;
}
   88d04:	4770      	bx	lr
   88d06:	bf00      	nop
   88d08:	200702bc 	.word	0x200702bc
   88d0c:	200768dc 	.word	0x200768dc

00088d10 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
   88d10:	b510      	push	{r4, lr}
   88d12:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
   88d14:	4608      	mov	r0, r1
   88d16:	4b06      	ldr	r3, [pc, #24]	; (88d30 <tcp_eff_send_mss+0x20>)
   88d18:	4798      	blx	r3
  if ((outif != NULL) && (outif->mtu != 0)) {
   88d1a:	b130      	cbz	r0, 88d2a <tcp_eff_send_mss+0x1a>
   88d1c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   88d1e:	b123      	cbz	r3, 88d2a <tcp_eff_send_mss+0x1a>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
   88d20:	3b28      	subs	r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
   88d22:	b29b      	uxth	r3, r3
   88d24:	429c      	cmp	r4, r3
   88d26:	bf28      	it	cs
   88d28:	461c      	movcs	r4, r3
  }
  return sendmss;
}
   88d2a:	4620      	mov	r0, r4
   88d2c:	bd10      	pop	{r4, pc}
   88d2e:	bf00      	nop
   88d30:	00086985 	.word	0x00086985

00088d34 <tcp_debug_print>:
 *
 * @param tcphdr pointer to a struct tcp_hdr
 */
void
tcp_debug_print(struct tcp_hdr *tcphdr)
{
   88d34:	b508      	push	{r3, lr}
         TCPH_FLAGS(tcphdr) >> 3 & 1,
         TCPH_FLAGS(tcphdr) >> 2 & 1,
         TCPH_FLAGS(tcphdr) >> 1 & 1,
         TCPH_FLAGS(tcphdr) & 1,
         ntohs(tcphdr->wnd)));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
   88d36:	8980      	ldrh	r0, [r0, #12]
   88d38:	4b01      	ldr	r3, [pc, #4]	; (88d40 <tcp_debug_print+0xc>)
   88d3a:	4798      	blx	r3
   88d3c:	bd08      	pop	{r3, pc}
   88d3e:	bf00      	nop
   88d40:	000864dd 	.word	0x000864dd

00088d44 <tcp_pcbs_sane>:
 */
s16_t
tcp_pcbs_sane(void)
{
  struct tcp_pcb *pcb;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   88d44:	4b12      	ldr	r3, [pc, #72]	; (88d90 <tcp_pcbs_sane+0x4c>)
   88d46:	681b      	ldr	r3, [r3, #0]
   88d48:	b193      	cbz	r3, 88d70 <tcp_pcbs_sane+0x2c>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
   88d4a:	7c1a      	ldrb	r2, [r3, #16]
   88d4c:	b132      	cbz	r2, 88d5c <tcp_pcbs_sane+0x18>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
   88d4e:	2a01      	cmp	r2, #1
   88d50:	d007      	beq.n	88d62 <tcp_pcbs_sane+0x1e>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
   88d52:	2a0a      	cmp	r2, #10
   88d54:	d109      	bne.n	88d6a <tcp_pcbs_sane+0x26>
   88d56:	e007      	b.n	88d68 <tcp_pcbs_sane+0x24>
s16_t
tcp_pcbs_sane(void)
{
  struct tcp_pcb *pcb;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
   88d58:	7c1a      	ldrb	r2, [r3, #16]
   88d5a:	b902      	cbnz	r2, 88d5e <tcp_pcbs_sane+0x1a>
   88d5c:	e7fe      	b.n	88d5c <tcp_pcbs_sane+0x18>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
   88d5e:	2a01      	cmp	r2, #1
   88d60:	d100      	bne.n	88d64 <tcp_pcbs_sane+0x20>
   88d62:	e7fe      	b.n	88d62 <tcp_pcbs_sane+0x1e>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
   88d64:	2a0a      	cmp	r2, #10
   88d66:	d100      	bne.n	88d6a <tcp_pcbs_sane+0x26>
   88d68:	e7fe      	b.n	88d68 <tcp_pcbs_sane+0x24>
 */
s16_t
tcp_pcbs_sane(void)
{
  struct tcp_pcb *pcb;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   88d6a:	68db      	ldr	r3, [r3, #12]
   88d6c:	2b00      	cmp	r3, #0
   88d6e:	d1f3      	bne.n	88d58 <tcp_pcbs_sane+0x14>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  }
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   88d70:	4b08      	ldr	r3, [pc, #32]	; (88d94 <tcp_pcbs_sane+0x50>)
   88d72:	681b      	ldr	r3, [r3, #0]
   88d74:	b153      	cbz	r3, 88d8c <tcp_pcbs_sane+0x48>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
   88d76:	7c1a      	ldrb	r2, [r3, #16]
   88d78:	2a0a      	cmp	r2, #10
   88d7a:	d004      	beq.n	88d86 <tcp_pcbs_sane+0x42>
   88d7c:	e002      	b.n	88d84 <tcp_pcbs_sane+0x40>
   88d7e:	7c1a      	ldrb	r2, [r3, #16]
   88d80:	2a0a      	cmp	r2, #10
   88d82:	d000      	beq.n	88d86 <tcp_pcbs_sane+0x42>
   88d84:	e7fe      	b.n	88d84 <tcp_pcbs_sane+0x40>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  }
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   88d86:	68db      	ldr	r3, [r3, #12]
   88d88:	2b00      	cmp	r3, #0
   88d8a:	d1f8      	bne.n	88d7e <tcp_pcbs_sane+0x3a>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  }
  return 1;
}
   88d8c:	2001      	movs	r0, #1
   88d8e:	4770      	bx	lr
   88d90:	200768d8 	.word	0x200768d8
   88d94:	200768ec 	.word	0x200768ec

00088d98 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
   88d98:	b510      	push	{r4, lr}
   88d9a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
   88d9c:	6802      	ldr	r2, [r0, #0]
   88d9e:	428a      	cmp	r2, r1
   88da0:	d102      	bne.n	88da8 <tcp_pcb_remove+0x10>
   88da2:	68d3      	ldr	r3, [r2, #12]
   88da4:	6003      	str	r3, [r0, #0]
   88da6:	e016      	b.n	88dd6 <tcp_pcb_remove+0x3e>
   88da8:	4b1f      	ldr	r3, [pc, #124]	; (88e28 <tcp_pcb_remove+0x90>)
   88daa:	601a      	str	r2, [r3, #0]
   88dac:	b19a      	cbz	r2, 88dd6 <tcp_pcb_remove+0x3e>
   88dae:	68d3      	ldr	r3, [r2, #12]
   88db0:	428b      	cmp	r3, r1
   88db2:	d10c      	bne.n	88dce <tcp_pcb_remove+0x36>
   88db4:	e007      	b.n	88dc6 <tcp_pcb_remove+0x2e>
   88db6:	68da      	ldr	r2, [r3, #12]
   88db8:	42a2      	cmp	r2, r4
   88dba:	d001      	beq.n	88dc0 <tcp_pcb_remove+0x28>
   88dbc:	4613      	mov	r3, r2
   88dbe:	e006      	b.n	88dce <tcp_pcb_remove+0x36>
   88dc0:	4a19      	ldr	r2, [pc, #100]	; (88e28 <tcp_pcb_remove+0x90>)
   88dc2:	6013      	str	r3, [r2, #0]
   88dc4:	e000      	b.n	88dc8 <tcp_pcb_remove+0x30>
   88dc6:	4613      	mov	r3, r2
   88dc8:	68e2      	ldr	r2, [r4, #12]
   88dca:	60da      	str	r2, [r3, #12]
   88dcc:	e003      	b.n	88dd6 <tcp_pcb_remove+0x3e>
   88dce:	2b00      	cmp	r3, #0
   88dd0:	d1f1      	bne.n	88db6 <tcp_pcb_remove+0x1e>
   88dd2:	4a15      	ldr	r2, [pc, #84]	; (88e28 <tcp_pcb_remove+0x90>)
   88dd4:	6013      	str	r3, [r2, #0]
   88dd6:	2300      	movs	r3, #0
   88dd8:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
   88dda:	4620      	mov	r0, r4
   88ddc:	4b13      	ldr	r3, [pc, #76]	; (88e2c <tcp_pcb_remove+0x94>)
   88dde:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
   88de0:	7c23      	ldrb	r3, [r4, #16]
   88de2:	2b0a      	cmp	r3, #10
   88de4:	d010      	beq.n	88e08 <tcp_pcb_remove+0x70>
   88de6:	2b01      	cmp	r3, #1
   88de8:	d017      	beq.n	88e1a <tcp_pcb_remove+0x82>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
   88dea:	f894 3020 	ldrb.w	r3, [r4, #32]

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
   88dee:	f013 0f01 	tst.w	r3, #1
   88df2:	d009      	beq.n	88e08 <tcp_pcb_remove+0x70>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
   88df4:	f043 0302 	orr.w	r3, r3, #2
   88df8:	f884 3020 	strb.w	r3, [r4, #32]
    tcp_output(pcb);
   88dfc:	4620      	mov	r0, r4
   88dfe:	4b0c      	ldr	r3, [pc, #48]	; (88e30 <tcp_pcb_remove+0x98>)
   88e00:	4798      	blx	r3
  }

  if (pcb->state != LISTEN) {
   88e02:	7c23      	ldrb	r3, [r4, #16]
   88e04:	2b01      	cmp	r3, #1
   88e06:	d008      	beq.n	88e1a <tcp_pcb_remove+0x82>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
   88e08:	6f63      	ldr	r3, [r4, #116]	; 0x74
   88e0a:	b103      	cbz	r3, 88e0e <tcp_pcb_remove+0x76>
   88e0c:	e7fe      	b.n	88e0c <tcp_pcb_remove+0x74>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
   88e0e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   88e10:	b103      	cbz	r3, 88e14 <tcp_pcb_remove+0x7c>
   88e12:	e7fe      	b.n	88e12 <tcp_pcb_remove+0x7a>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
   88e14:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   88e16:	b103      	cbz	r3, 88e1a <tcp_pcb_remove+0x82>
   88e18:	e7fe      	b.n	88e18 <tcp_pcb_remove+0x80>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
   88e1a:	2300      	movs	r3, #0
   88e1c:	7423      	strb	r3, [r4, #16]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
   88e1e:	4b05      	ldr	r3, [pc, #20]	; (88e34 <tcp_pcb_remove+0x9c>)
   88e20:	4798      	blx	r3
   88e22:	b900      	cbnz	r0, 88e26 <tcp_pcb_remove+0x8e>
   88e24:	e7fe      	b.n	88e24 <tcp_pcb_remove+0x8c>
   88e26:	bd10      	pop	{r4, pc}
   88e28:	200768e4 	.word	0x200768e4
   88e2c:	00088969 	.word	0x00088969
   88e30:	0008b091 	.word	0x0008b091
   88e34:	00088d45 	.word	0x00088d45

00088e38 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
   88e38:	b530      	push	{r4, r5, lr}
   88e3a:	b083      	sub	sp, #12
   88e3c:	4604      	mov	r4, r0
  err_t err;

  if (rst_on_unacked_data && (pcb->state != LISTEN)) {
   88e3e:	2900      	cmp	r1, #0
   88e40:	d045      	beq.n	88ece <tcp_close_shutdown+0x96>
   88e42:	7c03      	ldrb	r3, [r0, #16]
   88e44:	2b01      	cmp	r3, #1
   88e46:	d072      	beq.n	88f2e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
   88e48:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   88e4c:	b923      	cbnz	r3, 88e58 <tcp_close_shutdown+0x20>
   88e4e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   88e50:	f240 53dc 	movw	r3, #1500	; 0x5dc
   88e54:	429a      	cmp	r2, r3
   88e56:	d03a      	beq.n	88ece <tcp_close_shutdown+0x96>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
   88e58:	f894 3020 	ldrb.w	r3, [r4, #32]
   88e5c:	f013 0f10 	tst.w	r3, #16
   88e60:	d100      	bne.n	88e64 <tcp_close_shutdown+0x2c>
   88e62:	e7fe      	b.n	88e62 <tcp_close_shutdown+0x2a>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
   88e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88e66:	6a61      	ldr	r1, [r4, #36]	; 0x24
   88e68:	8ba3      	ldrh	r3, [r4, #28]
   88e6a:	9300      	str	r3, [sp, #0]
   88e6c:	8be3      	ldrh	r3, [r4, #30]
   88e6e:	9301      	str	r3, [sp, #4]
   88e70:	4622      	mov	r2, r4
   88e72:	1d23      	adds	r3, r4, #4
   88e74:	4d4b      	ldr	r5, [pc, #300]	; (88fa4 <tcp_close_shutdown+0x16c>)
   88e76:	47a8      	blx	r5
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
   88e78:	4620      	mov	r0, r4
   88e7a:	4b4b      	ldr	r3, [pc, #300]	; (88fa8 <tcp_close_shutdown+0x170>)
   88e7c:	4798      	blx	r3

      /* TODO: to which state do we move now? */

      /* move to TIME_WAIT since we close actively */
      TCP_RMV(&tcp_active_pcbs, pcb);
   88e7e:	4b4b      	ldr	r3, [pc, #300]	; (88fac <tcp_close_shutdown+0x174>)
   88e80:	681a      	ldr	r2, [r3, #0]
   88e82:	42a2      	cmp	r2, r4
   88e84:	d102      	bne.n	88e8c <tcp_close_shutdown+0x54>
   88e86:	68d2      	ldr	r2, [r2, #12]
   88e88:	601a      	str	r2, [r3, #0]
   88e8a:	e016      	b.n	88eba <tcp_close_shutdown+0x82>
   88e8c:	4b48      	ldr	r3, [pc, #288]	; (88fb0 <tcp_close_shutdown+0x178>)
   88e8e:	601a      	str	r2, [r3, #0]
   88e90:	b19a      	cbz	r2, 88eba <tcp_close_shutdown+0x82>
   88e92:	68d3      	ldr	r3, [r2, #12]
   88e94:	42a3      	cmp	r3, r4
   88e96:	d10c      	bne.n	88eb2 <tcp_close_shutdown+0x7a>
   88e98:	e007      	b.n	88eaa <tcp_close_shutdown+0x72>
   88e9a:	68da      	ldr	r2, [r3, #12]
   88e9c:	42a2      	cmp	r2, r4
   88e9e:	d001      	beq.n	88ea4 <tcp_close_shutdown+0x6c>
   88ea0:	4613      	mov	r3, r2
   88ea2:	e006      	b.n	88eb2 <tcp_close_shutdown+0x7a>
   88ea4:	4a42      	ldr	r2, [pc, #264]	; (88fb0 <tcp_close_shutdown+0x178>)
   88ea6:	6013      	str	r3, [r2, #0]
   88ea8:	e000      	b.n	88eac <tcp_close_shutdown+0x74>
   88eaa:	4613      	mov	r3, r2
   88eac:	68e2      	ldr	r2, [r4, #12]
   88eae:	60da      	str	r2, [r3, #12]
   88eb0:	e003      	b.n	88eba <tcp_close_shutdown+0x82>
   88eb2:	2b00      	cmp	r3, #0
   88eb4:	d1f1      	bne.n	88e9a <tcp_close_shutdown+0x62>
   88eb6:	4a3e      	ldr	r2, [pc, #248]	; (88fb0 <tcp_close_shutdown+0x178>)
   88eb8:	6013      	str	r3, [r2, #0]
      pcb->state = TIME_WAIT;
   88eba:	230a      	movs	r3, #10
   88ebc:	7423      	strb	r3, [r4, #16]
      TCP_REG(&tcp_tw_pcbs, pcb);
   88ebe:	4b3d      	ldr	r3, [pc, #244]	; (88fb4 <tcp_close_shutdown+0x17c>)
   88ec0:	681a      	ldr	r2, [r3, #0]
   88ec2:	60e2      	str	r2, [r4, #12]
   88ec4:	601c      	str	r4, [r3, #0]
   88ec6:	4b3c      	ldr	r3, [pc, #240]	; (88fb8 <tcp_close_shutdown+0x180>)
   88ec8:	4798      	blx	r3

      return ERR_OK;
   88eca:	2300      	movs	r3, #0
   88ecc:	e05f      	b.n	88f8e <tcp_close_shutdown+0x156>
    }
  }

  switch (pcb->state) {
   88ece:	7c23      	ldrb	r3, [r4, #16]
   88ed0:	2b07      	cmp	r3, #7
   88ed2:	d85b      	bhi.n	88f8c <tcp_close_shutdown+0x154>
   88ed4:	e8df f003 	tbb	[pc, r3]
   88ed8:	3d342b04 	.word	0x3d342b04
   88edc:	4d5a5a45 	.word	0x4d5a5a45
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    if (pcb->local_port != 0) {
   88ee0:	8ba3      	ldrh	r3, [r4, #28]
   88ee2:	b1fb      	cbz	r3, 88f24 <tcp_close_shutdown+0xec>
      TCP_RMV(&tcp_bound_pcbs, pcb);
   88ee4:	4b35      	ldr	r3, [pc, #212]	; (88fbc <tcp_close_shutdown+0x184>)
   88ee6:	681a      	ldr	r2, [r3, #0]
   88ee8:	42a2      	cmp	r2, r4
   88eea:	d102      	bne.n	88ef2 <tcp_close_shutdown+0xba>
   88eec:	68d2      	ldr	r2, [r2, #12]
   88eee:	601a      	str	r2, [r3, #0]
   88ef0:	e016      	b.n	88f20 <tcp_close_shutdown+0xe8>
   88ef2:	4b2f      	ldr	r3, [pc, #188]	; (88fb0 <tcp_close_shutdown+0x178>)
   88ef4:	601a      	str	r2, [r3, #0]
   88ef6:	b19a      	cbz	r2, 88f20 <tcp_close_shutdown+0xe8>
   88ef8:	68d3      	ldr	r3, [r2, #12]
   88efa:	42a3      	cmp	r3, r4
   88efc:	d10c      	bne.n	88f18 <tcp_close_shutdown+0xe0>
   88efe:	e007      	b.n	88f10 <tcp_close_shutdown+0xd8>
   88f00:	68da      	ldr	r2, [r3, #12]
   88f02:	42a2      	cmp	r2, r4
   88f04:	d001      	beq.n	88f0a <tcp_close_shutdown+0xd2>
   88f06:	4613      	mov	r3, r2
   88f08:	e006      	b.n	88f18 <tcp_close_shutdown+0xe0>
   88f0a:	4a29      	ldr	r2, [pc, #164]	; (88fb0 <tcp_close_shutdown+0x178>)
   88f0c:	6013      	str	r3, [r2, #0]
   88f0e:	e000      	b.n	88f12 <tcp_close_shutdown+0xda>
   88f10:	4613      	mov	r3, r2
   88f12:	68e2      	ldr	r2, [r4, #12]
   88f14:	60da      	str	r2, [r3, #12]
   88f16:	e003      	b.n	88f20 <tcp_close_shutdown+0xe8>
   88f18:	2b00      	cmp	r3, #0
   88f1a:	d1f1      	bne.n	88f00 <tcp_close_shutdown+0xc8>
   88f1c:	4a24      	ldr	r2, [pc, #144]	; (88fb0 <tcp_close_shutdown+0x178>)
   88f1e:	6013      	str	r3, [r2, #0]
   88f20:	2300      	movs	r3, #0
   88f22:	60e3      	str	r3, [r4, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
   88f24:	2002      	movs	r0, #2
   88f26:	4621      	mov	r1, r4
   88f28:	4b25      	ldr	r3, [pc, #148]	; (88fc0 <tcp_close_shutdown+0x188>)
   88f2a:	4798      	blx	r3
    pcb = NULL;
    break;
   88f2c:	e035      	b.n	88f9a <tcp_close_shutdown+0x162>
  case LISTEN:
    err = ERR_OK;
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
   88f2e:	4825      	ldr	r0, [pc, #148]	; (88fc4 <tcp_close_shutdown+0x18c>)
   88f30:	4621      	mov	r1, r4
   88f32:	4b25      	ldr	r3, [pc, #148]	; (88fc8 <tcp_close_shutdown+0x190>)
   88f34:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
   88f36:	2003      	movs	r0, #3
   88f38:	4621      	mov	r1, r4
   88f3a:	4b21      	ldr	r3, [pc, #132]	; (88fc0 <tcp_close_shutdown+0x188>)
   88f3c:	4798      	blx	r3
    pcb = NULL;
    break;
   88f3e:	e02c      	b.n	88f9a <tcp_close_shutdown+0x162>
  case SYN_SENT:
    err = ERR_OK;
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
   88f40:	481a      	ldr	r0, [pc, #104]	; (88fac <tcp_close_shutdown+0x174>)
   88f42:	4621      	mov	r1, r4
   88f44:	4b20      	ldr	r3, [pc, #128]	; (88fc8 <tcp_close_shutdown+0x190>)
   88f46:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
   88f48:	2002      	movs	r0, #2
   88f4a:	4621      	mov	r1, r4
   88f4c:	4b1c      	ldr	r3, [pc, #112]	; (88fc0 <tcp_close_shutdown+0x188>)
   88f4e:	4798      	blx	r3
    pcb = NULL;
    snmp_inc_tcpattemptfails();
    break;
   88f50:	e023      	b.n	88f9a <tcp_close_shutdown+0x162>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
   88f52:	4620      	mov	r0, r4
   88f54:	4b1d      	ldr	r3, [pc, #116]	; (88fcc <tcp_close_shutdown+0x194>)
   88f56:	4798      	blx	r3
    if (err == ERR_OK) {
   88f58:	4603      	mov	r3, r0
   88f5a:	b9c0      	cbnz	r0, 88f8e <tcp_close_shutdown+0x156>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
   88f5c:	2305      	movs	r3, #5
   88f5e:	7423      	strb	r3, [r4, #16]
   88f60:	e017      	b.n	88f92 <tcp_close_shutdown+0x15a>
    }
    break;
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
   88f62:	4620      	mov	r0, r4
   88f64:	4b19      	ldr	r3, [pc, #100]	; (88fcc <tcp_close_shutdown+0x194>)
   88f66:	4798      	blx	r3
    if (err == ERR_OK) {
   88f68:	4603      	mov	r3, r0
   88f6a:	b980      	cbnz	r0, 88f8e <tcp_close_shutdown+0x156>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
   88f6c:	2305      	movs	r3, #5
   88f6e:	7423      	strb	r3, [r4, #16]
   88f70:	e00f      	b.n	88f92 <tcp_close_shutdown+0x15a>
    }
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
   88f72:	4620      	mov	r0, r4
   88f74:	4b15      	ldr	r3, [pc, #84]	; (88fcc <tcp_close_shutdown+0x194>)
   88f76:	4798      	blx	r3
    if (err == ERR_OK) {
   88f78:	4603      	mov	r3, r0
   88f7a:	b940      	cbnz	r0, 88f8e <tcp_close_shutdown+0x156>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
   88f7c:	2309      	movs	r3, #9
   88f7e:	7423      	strb	r3, [r4, #16]
   88f80:	e007      	b.n	88f92 <tcp_close_shutdown+0x15a>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
   88f82:	4620      	mov	r0, r4
   88f84:	4b12      	ldr	r3, [pc, #72]	; (88fd0 <tcp_close_shutdown+0x198>)
   88f86:	4798      	blx	r3
  }
  return err;
   88f88:	2300      	movs	r3, #0
   88f8a:	e000      	b.n	88f8e <tcp_close_shutdown+0x156>
      pcb->state = LAST_ACK;
    }
    break;
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
   88f8c:	2300      	movs	r3, #0
   88f8e:	b258      	sxtb	r0, r3
   88f90:	e005      	b.n	88f9e <tcp_close_shutdown+0x166>
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
   88f92:	2c00      	cmp	r4, #0
   88f94:	d1f5      	bne.n	88f82 <tcp_close_shutdown+0x14a>
   88f96:	2300      	movs	r3, #0
   88f98:	e7f9      	b.n	88f8e <tcp_close_shutdown+0x156>
      /* move to TIME_WAIT since we close actively */
      TCP_RMV(&tcp_active_pcbs, pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);

      return ERR_OK;
   88f9a:	2300      	movs	r3, #0
   88f9c:	e7f7      	b.n	88f8e <tcp_close_shutdown+0x156>
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
  }
  return err;
}
   88f9e:	b003      	add	sp, #12
   88fa0:	bd30      	pop	{r4, r5, pc}
   88fa2:	bf00      	nop
   88fa4:	0008b38d 	.word	0x0008b38d
   88fa8:	00088969 	.word	0x00088969
   88fac:	200768d8 	.word	0x200768d8
   88fb0:	200768e4 	.word	0x200768e4
   88fb4:	200768ec 	.word	0x200768ec
   88fb8:	000876c9 	.word	0x000876c9
   88fbc:	200768e8 	.word	0x200768e8
   88fc0:	00087d61 	.word	0x00087d61
   88fc4:	200768e0 	.word	0x200768e0
   88fc8:	00088d99 	.word	0x00088d99
   88fcc:	0008afd1 	.word	0x0008afd1
   88fd0:	0008b091 	.word	0x0008b091

00088fd4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
   88fd4:	b508      	push	{r3, lr}
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
   88fd6:	7c03      	ldrb	r3, [r0, #16]
   88fd8:	2b01      	cmp	r3, #1
   88fda:	d005      	beq.n	88fe8 <tcp_close+0x14>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
   88fdc:	f890 3020 	ldrb.w	r3, [r0, #32]
   88fe0:	f043 0310 	orr.w	r3, r3, #16
   88fe4:	f880 3020 	strb.w	r3, [r0, #32]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
   88fe8:	2101      	movs	r1, #1
   88fea:	4b01      	ldr	r3, [pc, #4]	; (88ff0 <tcp_close+0x1c>)
   88fec:	4798      	blx	r3
}
   88fee:	bd08      	pop	{r3, pc}
   88ff0:	00088e39 	.word	0x00088e39

00088ff4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
   88ff4:	b510      	push	{r4, lr}
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
   88ff6:	4614      	mov	r4, r2
   88ff8:	b142      	cbz	r2, 8900c <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
   88ffa:	4608      	mov	r0, r1
   88ffc:	8911      	ldrh	r1, [r2, #8]
   88ffe:	4b07      	ldr	r3, [pc, #28]	; (8901c <tcp_recv_null+0x28>)
   89000:	4798      	blx	r3
    pbuf_free(p);
   89002:	4620      	mov	r0, r4
   89004:	4b06      	ldr	r3, [pc, #24]	; (89020 <tcp_recv_null+0x2c>)
   89006:	4798      	blx	r3
  } else if (err == ERR_OK) {
    return tcp_close(pcb);
  }
  return ERR_OK;
   89008:	2000      	movs	r0, #0
   8900a:	e005      	b.n	89018 <tcp_recv_null+0x24>
{
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
    tcp_recved(pcb, p->tot_len);
    pbuf_free(p);
  } else if (err == ERR_OK) {
   8900c:	b91b      	cbnz	r3, 89016 <tcp_recv_null+0x22>
    return tcp_close(pcb);
   8900e:	4608      	mov	r0, r1
   89010:	4b04      	ldr	r3, [pc, #16]	; (89024 <tcp_recv_null+0x30>)
   89012:	4798      	blx	r3
   89014:	e000      	b.n	89018 <tcp_recv_null+0x24>
  }
  return ERR_OK;
   89016:	2000      	movs	r0, #0
}
   89018:	b240      	sxtb	r0, r0
   8901a:	bd10      	pop	{r4, pc}
   8901c:	00088881 	.word	0x00088881
   89020:	00088045 	.word	0x00088045
   89024:	00088fd5 	.word	0x00088fd5

00089028 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
   89028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct tcp_pcb *pcb = tcp_active_pcbs;
   8902c:	4b1b      	ldr	r3, [pc, #108]	; (8909c <tcp_fasttmr+0x74>)
   8902e:	681c      	ldr	r4, [r3, #0]

  while(pcb != NULL) {
   89030:	b38c      	cbz	r4, 89096 <tcp_fasttmr+0x6e>

    /* send delayed ACKs */
    if (pcb && (pcb->flags & TF_ACK_DELAY)) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
      tcp_ack_now(pcb);
      tcp_output(pcb);
   89032:	f8df 806c 	ldr.w	r8, [pc, #108]	; 890a0 <tcp_fasttmr+0x78>
      /* Notify again application with data previously received. */
      err_t err;
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_fasttmr: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
      if (err == ERR_OK) {
        pcb->refused_data = NULL;
   89036:	2700      	movs	r7, #0
    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      /* Notify again application with data previously received. */
      err_t err;
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_fasttmr: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
   89038:	f8df 9068 	ldr.w	r9, [pc, #104]	; 890a4 <tcp_fasttmr+0x7c>
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;

  while(pcb != NULL) {
    struct tcp_pcb *next = pcb->next;
   8903c:	68e5      	ldr	r5, [r4, #12]
    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
   8903e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   89042:	b19a      	cbz	r2, 8906c <tcp_fasttmr+0x44>
      /* Notify again application with data previously received. */
      err_t err;
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_fasttmr: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
   89044:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
   89048:	b126      	cbz	r6, 89054 <tcp_fasttmr+0x2c>
   8904a:	6960      	ldr	r0, [r4, #20]
   8904c:	4621      	mov	r1, r4
   8904e:	463b      	mov	r3, r7
   89050:	47b0      	blx	r6
   89052:	e003      	b.n	8905c <tcp_fasttmr+0x34>
   89054:	4638      	mov	r0, r7
   89056:	4621      	mov	r1, r4
   89058:	463b      	mov	r3, r7
   8905a:	47c8      	blx	r9
      if (err == ERR_OK) {
   8905c:	b910      	cbnz	r0, 89064 <tcp_fasttmr+0x3c>
        pcb->refused_data = NULL;
   8905e:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
   89062:	e003      	b.n	8906c <tcp_fasttmr+0x44>
      } else if (err == ERR_ABRT) {
   89064:	b240      	sxtb	r0, r0
   89066:	f110 0f0a 	cmn.w	r0, #10
   8906a:	d011      	beq.n	89090 <tcp_fasttmr+0x68>
        pcb = NULL;
      }
    }

    /* send delayed ACKs */
    if (pcb && (pcb->flags & TF_ACK_DELAY)) {
   8906c:	b184      	cbz	r4, 89090 <tcp_fasttmr+0x68>
   8906e:	f894 3020 	ldrb.w	r3, [r4, #32]
   89072:	f013 0f01 	tst.w	r3, #1
   89076:	d00b      	beq.n	89090 <tcp_fasttmr+0x68>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
      tcp_ack_now(pcb);
   89078:	f043 0302 	orr.w	r3, r3, #2
   8907c:	f884 3020 	strb.w	r3, [r4, #32]
      tcp_output(pcb);
   89080:	4620      	mov	r0, r4
   89082:	47c0      	blx	r8
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
   89084:	f894 3020 	ldrb.w	r3, [r4, #32]
   89088:	f023 0303 	bic.w	r3, r3, #3
   8908c:	f884 3020 	strb.w	r3, [r4, #32]
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;

  while(pcb != NULL) {
   89090:	b10d      	cbz	r5, 89096 <tcp_fasttmr+0x6e>
   89092:	462c      	mov	r4, r5
   89094:	e7d2      	b.n	8903c <tcp_fasttmr+0x14>
   89096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8909a:	bf00      	nop
   8909c:	200768d8 	.word	0x200768d8
   890a0:	0008b091 	.word	0x0008b091
   890a4:	00088ff5 	.word	0x00088ff5

000890a8 <tcp_tmr>:
 * Called periodically to dispatch TCP timers.
 *
 */
void
tcp_tmr(void)
{
   890a8:	b508      	push	{r3, lr}
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
   890aa:	4b06      	ldr	r3, [pc, #24]	; (890c4 <tcp_tmr+0x1c>)
   890ac:	4798      	blx	r3

  if (++tcp_timer & 1) {
   890ae:	4a06      	ldr	r2, [pc, #24]	; (890c8 <tcp_tmr+0x20>)
   890b0:	7813      	ldrb	r3, [r2, #0]
   890b2:	3301      	adds	r3, #1
   890b4:	b2db      	uxtb	r3, r3
   890b6:	7013      	strb	r3, [r2, #0]
   890b8:	f013 0f01 	tst.w	r3, #1
   890bc:	d001      	beq.n	890c2 <tcp_tmr+0x1a>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
   890be:	4b03      	ldr	r3, [pc, #12]	; (890cc <tcp_tmr+0x24>)
   890c0:	4798      	blx	r3
   890c2:	bd08      	pop	{r3, pc}
   890c4:	00089029 	.word	0x00089029
   890c8:	200759c4 	.word	0x200759c4
   890cc:	000889b1 	.word	0x000889b1

000890d0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
   890d0:	b538      	push	{r3, r4, r5, lr}
   890d2:	4604      	mov	r4, r0
   890d4:	4615      	mov	r5, r2
  if (pcb->state == LISTEN) {
   890d6:	7c03      	ldrb	r3, [r0, #16]
   890d8:	2b01      	cmp	r3, #1
   890da:	d01b      	beq.n	89114 <tcp_shutdown+0x44>
    return ERR_CONN;
  }
  if (shut_rx) {
   890dc:	b169      	cbz	r1, 890fa <tcp_shutdown+0x2a>
    /* shut down the receive side: free buffered data... */
    if (pcb->refused_data != NULL) {
   890de:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   890e2:	b120      	cbz	r0, 890ee <tcp_shutdown+0x1e>
      pbuf_free(pcb->refused_data);
   890e4:	4b0f      	ldr	r3, [pc, #60]	; (89124 <tcp_shutdown+0x54>)
   890e6:	4798      	blx	r3
      pcb->refused_data = NULL;
   890e8:	2300      	movs	r3, #0
   890ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    }
    /* ... and set a flag not to receive any more data */
    pcb->flags |= TF_RXCLOSED;
   890ee:	f894 3020 	ldrb.w	r3, [r4, #32]
   890f2:	f043 0310 	orr.w	r3, r3, #16
   890f6:	f884 3020 	strb.w	r3, [r4, #32]
  }
  if (shut_tx) {
   890fa:	b16d      	cbz	r5, 89118 <tcp_shutdown+0x48>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
   890fc:	7c23      	ldrb	r3, [r4, #16]
   890fe:	2b03      	cmp	r3, #3
   89100:	d30c      	bcc.n	8911c <tcp_shutdown+0x4c>
   89102:	2b04      	cmp	r3, #4
   89104:	d901      	bls.n	8910a <tcp_shutdown+0x3a>
   89106:	2b07      	cmp	r3, #7
   89108:	d108      	bne.n	8911c <tcp_shutdown+0x4c>
  case SYN_RCVD:
  case ESTABLISHED:
  case CLOSE_WAIT:
    return tcp_close_shutdown(pcb, 0);
   8910a:	4620      	mov	r0, r4
   8910c:	2100      	movs	r1, #0
   8910e:	4b06      	ldr	r3, [pc, #24]	; (89128 <tcp_shutdown+0x58>)
   89110:	4798      	blx	r3
   89112:	e004      	b.n	8911e <tcp_shutdown+0x4e>
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  if (pcb->state == LISTEN) {
    return ERR_CONN;
   89114:	20f3      	movs	r0, #243	; 0xf3
   89116:	e002      	b.n	8911e <tcp_shutdown+0x4e>
    /* don't shut down other states */
    break;
    }
  }
  /* @todo: return another err_t if not in correct state or already shut? */
  return ERR_OK;
   89118:	2000      	movs	r0, #0
   8911a:	e000      	b.n	8911e <tcp_shutdown+0x4e>
   8911c:	2000      	movs	r0, #0
}
   8911e:	b240      	sxtb	r0, r0
   89120:	bd38      	pop	{r3, r4, r5, pc}
   89122:	bf00      	nop
   89124:	00088045 	.word	0x00088045
   89128:	00088e39 	.word	0x00088e39

0008912c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
   8912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89130:	b085      	sub	sp, #20
   89132:	4604      	mov	r4, r0
   89134:	468a      	mov	sl, r1
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
   89136:	7c03      	ldrb	r3, [r0, #16]
   89138:	2b01      	cmp	r3, #1
   8913a:	d100      	bne.n	8913e <tcp_abandon+0x12>
   8913c:	e7fe      	b.n	8913c <tcp_abandon+0x10>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
   8913e:	2b0a      	cmp	r3, #10
   89140:	d108      	bne.n	89154 <tcp_abandon+0x28>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
   89142:	4820      	ldr	r0, [pc, #128]	; (891c4 <tcp_abandon+0x98>)
   89144:	4621      	mov	r1, r4
   89146:	4b20      	ldr	r3, [pc, #128]	; (891c8 <tcp_abandon+0x9c>)
   89148:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
   8914a:	2002      	movs	r0, #2
   8914c:	4621      	mov	r1, r4
   8914e:	4b1f      	ldr	r3, [pc, #124]	; (891cc <tcp_abandon+0xa0>)
   89150:	4798      	blx	r3
   89152:	e033      	b.n	891bc <tcp_abandon+0x90>
  } else {
    seqno = pcb->snd_nxt;
   89154:	6d87      	ldr	r7, [r0, #88]	; 0x58
    ackno = pcb->rcv_nxt;
   89156:	6a46      	ldr	r6, [r0, #36]	; 0x24
    ip_addr_copy(local_ip, pcb->local_ip);
   89158:	6803      	ldr	r3, [r0, #0]
   8915a:	9302      	str	r3, [sp, #8]
    ip_addr_copy(remote_ip, pcb->remote_ip);
   8915c:	6843      	ldr	r3, [r0, #4]
   8915e:	9303      	str	r3, [sp, #12]
    local_port = pcb->local_port;
   89160:	f8b0 901c 	ldrh.w	r9, [r0, #28]
    remote_port = pcb->remote_port;
   89164:	f8b0 801e 	ldrh.w	r8, [r0, #30]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
   89168:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
   8916c:	f8d0 b014 	ldr.w	fp, [r0, #20]
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
   89170:	4817      	ldr	r0, [pc, #92]	; (891d0 <tcp_abandon+0xa4>)
   89172:	4621      	mov	r1, r4
   89174:	4b14      	ldr	r3, [pc, #80]	; (891c8 <tcp_abandon+0x9c>)
   89176:	4798      	blx	r3
    if (pcb->unacked != NULL) {
   89178:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   8917a:	b108      	cbz	r0, 89180 <tcp_abandon+0x54>
      tcp_segs_free(pcb->unacked);
   8917c:	4b15      	ldr	r3, [pc, #84]	; (891d4 <tcp_abandon+0xa8>)
   8917e:	4798      	blx	r3
    }
    if (pcb->unsent != NULL) {
   89180:	6f60      	ldr	r0, [r4, #116]	; 0x74
   89182:	b108      	cbz	r0, 89188 <tcp_abandon+0x5c>
      tcp_segs_free(pcb->unsent);
   89184:	4b13      	ldr	r3, [pc, #76]	; (891d4 <tcp_abandon+0xa8>)
   89186:	4798      	blx	r3
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
   89188:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   8918a:	b108      	cbz	r0, 89190 <tcp_abandon+0x64>
      tcp_segs_free(pcb->ooseq);
   8918c:	4b11      	ldr	r3, [pc, #68]	; (891d4 <tcp_abandon+0xa8>)
   8918e:	4798      	blx	r3
    }
#endif /* TCP_QUEUE_OOSEQ */
    memp_free(MEMP_TCP_PCB, pcb);
   89190:	2002      	movs	r0, #2
   89192:	4621      	mov	r1, r4
   89194:	4b0d      	ldr	r3, [pc, #52]	; (891cc <tcp_abandon+0xa0>)
   89196:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
   89198:	b11d      	cbz	r5, 891a2 <tcp_abandon+0x76>
   8919a:	4658      	mov	r0, fp
   8919c:	f06f 0109 	mvn.w	r1, #9
   891a0:	47a8      	blx	r5
    if (reset) {
   891a2:	f1ba 0f00 	cmp.w	sl, #0
   891a6:	d009      	beq.n	891bc <tcp_abandon+0x90>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &local_ip, &remote_ip, local_port, remote_port);
   891a8:	f8cd 9000 	str.w	r9, [sp]
   891ac:	f8cd 8004 	str.w	r8, [sp, #4]
   891b0:	4638      	mov	r0, r7
   891b2:	4631      	mov	r1, r6
   891b4:	aa02      	add	r2, sp, #8
   891b6:	ab03      	add	r3, sp, #12
   891b8:	4c07      	ldr	r4, [pc, #28]	; (891d8 <tcp_abandon+0xac>)
   891ba:	47a0      	blx	r4
    }
  }
}
   891bc:	b005      	add	sp, #20
   891be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   891c2:	bf00      	nop
   891c4:	200768ec 	.word	0x200768ec
   891c8:	00088d99 	.word	0x00088d99
   891cc:	00087d61 	.word	0x00087d61
   891d0:	200768d8 	.word	0x200768d8
   891d4:	000888f1 	.word	0x000888f1
   891d8:	0008b38d 	.word	0x0008b38d

000891dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
   891dc:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
   891de:	2101      	movs	r1, #1
   891e0:	4b01      	ldr	r3, [pc, #4]	; (891e8 <tcp_abort+0xc>)
   891e2:	4798      	blx	r3
   891e4:	bd08      	pop	{r3, pc}
   891e6:	bf00      	nop
   891e8:	0008912d 	.word	0x0008912d

000891ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
   891ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   891ee:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   891f0:	2002      	movs	r0, #2
   891f2:	4b40      	ldr	r3, [pc, #256]	; (892f4 <tcp_alloc+0x108>)
   891f4:	4798      	blx	r3
  if (pcb == NULL) {
   891f6:	4604      	mov	r4, r0
   891f8:	2800      	cmp	r0, #0
   891fa:	d141      	bne.n	89280 <tcp_alloc+0x94>
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   891fc:	4b3e      	ldr	r3, [pc, #248]	; (892f8 <tcp_alloc+0x10c>)
   891fe:	681b      	ldr	r3, [r3, #0]
   89200:	b173      	cbz	r3, 89220 <tcp_alloc+0x34>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   89202:	4a3e      	ldr	r2, [pc, #248]	; (892fc <tcp_alloc+0x110>)
   89204:	6814      	ldr	r4, [r2, #0]
tcp_kill_timewait(void)
{
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
   89206:	4601      	mov	r1, r0
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   89208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8920a:	1aa2      	subs	r2, r4, r2
   8920c:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
   8920e:	bf24      	itt	cs
   89210:	4611      	movcs	r1, r2

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   89212:	4618      	movcs	r0, r3
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   89214:	68db      	ldr	r3, [r3, #12]
   89216:	2b00      	cmp	r3, #0
   89218:	d1f6      	bne.n	89208 <tcp_alloc+0x1c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
   8921a:	b108      	cbz	r0, 89220 <tcp_alloc+0x34>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
   8921c:	4b38      	ldr	r3, [pc, #224]	; (89300 <tcp_alloc+0x114>)
   8921e:	4798      	blx	r3
  if (pcb == NULL) {
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   89220:	2002      	movs	r0, #2
   89222:	4b34      	ldr	r3, [pc, #208]	; (892f4 <tcp_alloc+0x108>)
   89224:	4798      	blx	r3
    if (pcb == NULL) {
   89226:	4604      	mov	r4, r0
   89228:	bb20      	cbnz	r0, 89274 <tcp_alloc+0x88>
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   8922a:	4b36      	ldr	r3, [pc, #216]	; (89304 <tcp_alloc+0x118>)
   8922c:	681b      	ldr	r3, [r3, #0]
   8922e:	b1ab      	cbz	r3, 8925c <tcp_alloc+0x70>
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   89230:	4a32      	ldr	r2, [pc, #200]	; (892fc <tcp_alloc+0x110>)
   89232:	6817      	ldr	r7, [r2, #0]


  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
   89234:	4606      	mov	r6, r0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
   89236:	217f      	movs	r1, #127	; 0x7f
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
   89238:	7c5a      	ldrb	r2, [r3, #17]
   8923a:	4295      	cmp	r5, r2
   8923c:	d308      	bcc.n	89250 <tcp_alloc+0x64>
   8923e:	428a      	cmp	r2, r1
   89240:	d806      	bhi.n	89250 <tcp_alloc+0x64>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   89242:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   89244:	1b3c      	subs	r4, r7, r4
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
   89246:	42b4      	cmp	r4, r6
   89248:	d302      	bcc.n	89250 <tcp_alloc+0x64>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
   8924a:	4611      	mov	r1, r2
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
   8924c:	4626      	mov	r6, r4
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
   8924e:	4618      	mov	r0, r3
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   89250:	68db      	ldr	r3, [r3, #12]
   89252:	2b00      	cmp	r3, #0
   89254:	d1f0      	bne.n	89238 <tcp_alloc+0x4c>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
   89256:	b108      	cbz	r0, 8925c <tcp_alloc+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
   89258:	4b29      	ldr	r3, [pc, #164]	; (89300 <tcp_alloc+0x114>)
   8925a:	4798      	blx	r3
    if (pcb == NULL) {
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   8925c:	2002      	movs	r0, #2
   8925e:	4b25      	ldr	r3, [pc, #148]	; (892f4 <tcp_alloc+0x108>)
   89260:	4798      	blx	r3
      if (pcb != NULL) {
   89262:	4604      	mov	r4, r0
   89264:	2800      	cmp	r0, #0
   89266:	d042      	beq.n	892ee <tcp_alloc+0x102>
        /* adjust err stats: memp_malloc failed twice before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
   89268:	4b27      	ldr	r3, [pc, #156]	; (89308 <tcp_alloc+0x11c>)
   8926a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
   8926e:	3a01      	subs	r2, #1
   89270:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
      }
    }
    if (pcb != NULL) {
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
   89274:	4b24      	ldr	r3, [pc, #144]	; (89308 <tcp_alloc+0x11c>)
   89276:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
   8927a:	3a01      	subs	r2, #1
   8927c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    }
  }
  if (pcb != NULL) {
    memset(pcb, 0, sizeof(struct tcp_pcb));
   89280:	4620      	mov	r0, r4
   89282:	2100      	movs	r1, #0
   89284:	22a4      	movs	r2, #164	; 0xa4
   89286:	4b21      	ldr	r3, [pc, #132]	; (8930c <tcp_alloc+0x120>)
   89288:	4798      	blx	r3
    pcb->prio = prio;
   8928a:	7465      	strb	r5, [r4, #17]
    pcb->snd_buf = TCP_SND_BUF;
   8928c:	f640 0366 	movw	r3, #2150	; 0x866
   89290:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
    pcb->snd_queuelen = 0;
   89294:	2500      	movs	r5, #0
   89296:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
    pcb->rcv_wnd = TCP_WND;
   8929a:	f240 53dc 	movw	r3, #1500	; 0x5dc
   8929e:	8523      	strh	r3, [r4, #40]	; 0x28
    pcb->rcv_ann_wnd = TCP_WND;
   892a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    pcb->tos = 0;
   892a2:	7265      	strb	r5, [r4, #9]
    pcb->ttl = TCP_TTL;
   892a4:	23ff      	movs	r3, #255	; 0xff
   892a6:	72a3      	strb	r3, [r4, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
   892a8:	f44f 7306 	mov.w	r3, #536	; 0x218
   892ac:	8723      	strh	r3, [r4, #56]	; 0x38
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
   892ae:	2306      	movs	r3, #6
   892b0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->sa = 0;
   892b4:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
   892b8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    pcb->rtime = -1;
   892bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   892c0:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->cwnd = 1;
   892c2:	2301      	movs	r3, #1
   892c4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    iss = tcp_next_iss();
   892c8:	4b11      	ldr	r3, [pc, #68]	; (89310 <tcp_alloc+0x124>)
   892ca:	4798      	blx	r3
    pcb->snd_wl2 = iss;
   892cc:	6660      	str	r0, [r4, #100]	; 0x64
    pcb->snd_nxt = iss;
   892ce:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->lastack = iss;
   892d0:	64e0      	str	r0, [r4, #76]	; 0x4c
    pcb->snd_lbb = iss;   
   892d2:	66a0      	str	r0, [r4, #104]	; 0x68
    pcb->tmr = tcp_ticks;
   892d4:	4b09      	ldr	r3, [pc, #36]	; (892fc <tcp_alloc+0x110>)
   892d6:	681b      	ldr	r3, [r3, #0]
   892d8:	6323      	str	r3, [r4, #48]	; 0x30

    pcb->polltmr = 0;
   892da:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
   892de:	4b0d      	ldr	r3, [pc, #52]	; (89314 <tcp_alloc+0x128>)
   892e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
   892e4:	4b0c      	ldr	r3, [pc, #48]	; (89318 <tcp_alloc+0x12c>)
   892e6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
   892ea:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  }
  return pcb;
}
   892ee:	4620      	mov	r0, r4
   892f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   892f2:	bf00      	nop
   892f4:	00087ce1 	.word	0x00087ce1
   892f8:	200768ec 	.word	0x200768ec
   892fc:	200768dc 	.word	0x200768dc
   89300:	000891dd 	.word	0x000891dd
   89304:	200768d8 	.word	0x200768d8
   89308:	20076788 	.word	0x20076788
   8930c:	0008ccbb 	.word	0x0008ccbb
   89310:	00088cf9 	.word	0x00088cf9
   89314:	00088ff5 	.word	0x00088ff5
   89318:	006ddd00 	.word	0x006ddd00

0008931c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
   8931c:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
   8931e:	2040      	movs	r0, #64	; 0x40
   89320:	4b01      	ldr	r3, [pc, #4]	; (89328 <tcp_new+0xc>)
   89322:	4798      	blx	r3
}
   89324:	bd08      	pop	{r3, pc}
   89326:	bf00      	nop
   89328:	000891ed 	.word	0x000891ed

0008932c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
   8932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8932e:	4606      	mov	r6, r0
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
   89330:	4b21      	ldr	r3, [pc, #132]	; (893b8 <tcp_parseopt+0x8c>)
   89332:	681c      	ldr	r4, [r3, #0]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
   89334:	89a0      	ldrh	r0, [r4, #12]
   89336:	4b21      	ldr	r3, [pc, #132]	; (893bc <tcp_parseopt+0x90>)
   89338:	4798      	blx	r3
   8933a:	f3c0 300f 	ubfx	r0, r0, #12, #16
   8933e:	2805      	cmp	r0, #5
   89340:	d938      	bls.n	893b4 <tcp_parseopt+0x88>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
   89342:	4b1d      	ldr	r3, [pc, #116]	; (893b8 <tcp_parseopt+0x8c>)
   89344:	681b      	ldr	r3, [r3, #0]
   89346:	8998      	ldrh	r0, [r3, #12]
   89348:	4b1c      	ldr	r3, [pc, #112]	; (893bc <tcp_parseopt+0x90>)
   8934a:	4798      	blx	r3
   8934c:	0b00      	lsrs	r0, r0, #12
   8934e:	1f45      	subs	r5, r0, #5
   89350:	00ad      	lsls	r5, r5, #2
   89352:	b2ad      	uxth	r5, r5
    for (c = 0; c < max_c; ) {
   89354:	b375      	cbz	r5, 893b4 <tcp_parseopt+0x88>
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
   89356:	f104 0114 	add.w	r1, r4, #20

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
   8935a:	2300      	movs	r3, #0
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
   8935c:	f240 57db 	movw	r7, #1499	; 0x5db
   89360:	f240 50dc 	movw	r0, #1500	; 0x5dc

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
      opt = opts[c];
   89364:	461c      	mov	r4, r3
      switch (opt) {
   89366:	5cca      	ldrb	r2, [r1, r3]
   89368:	2a01      	cmp	r2, #1
   8936a:	d003      	beq.n	89374 <tcp_parseopt+0x48>
   8936c:	b312      	cbz	r2, 893b4 <tcp_parseopt+0x88>
   8936e:	2a02      	cmp	r2, #2
   89370:	d003      	beq.n	8937a <tcp_parseopt+0x4e>
   89372:	e018      	b.n	893a6 <tcp_parseopt+0x7a>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
   89374:	3301      	adds	r3, #1
   89376:	b29b      	uxth	r3, r3
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
   89378:	e01a      	b.n	893b0 <tcp_parseopt+0x84>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
   8937a:	18ca      	adds	r2, r1, r3
   8937c:	7852      	ldrb	r2, [r2, #1]
   8937e:	2a04      	cmp	r2, #4
   89380:	d118      	bne.n	893b4 <tcp_parseopt+0x88>
   89382:	1d1a      	adds	r2, r3, #4
   89384:	42aa      	cmp	r2, r5
   89386:	dc15      	bgt.n	893b4 <tcp_parseopt+0x88>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
   89388:	440c      	add	r4, r1
   8938a:	f894 c002 	ldrb.w	ip, [r4, #2]
   8938e:	78e2      	ldrb	r2, [r4, #3]
   89390:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
   89394:	1e54      	subs	r4, r2, #1
   89396:	b2a4      	uxth	r4, r4
   89398:	42bc      	cmp	r4, r7
   8939a:	bf88      	it	hi
   8939c:	4602      	movhi	r2, r0
   8939e:	8732      	strh	r2, [r6, #56]	; 0x38
        /* Advance to next option */
        c += 0x04;
   893a0:	3304      	adds	r3, #4
   893a2:	b29b      	uxth	r3, r3
        break;
   893a4:	e004      	b.n	893b0 <tcp_parseopt+0x84>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
   893a6:	440c      	add	r4, r1
   893a8:	7862      	ldrb	r2, [r4, #1]
   893aa:	b11a      	cbz	r2, 893b4 <tcp_parseopt+0x88>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
   893ac:	4413      	add	r3, r2
   893ae:	b29b      	uxth	r3, r3
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
   893b0:	429d      	cmp	r5, r3
   893b2:	d8d7      	bhi.n	89364 <tcp_parseopt+0x38>
   893b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   893b6:	bf00      	nop
   893b8:	200759c8 	.word	0x200759c8
   893bc:	000864dd 	.word	0x000864dd

000893c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
   893c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   893c4:	4605      	mov	r5, r0
   893c6:	460c      	mov	r4, r1
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
   893c8:	68c3      	ldr	r3, [r0, #12]
   893ca:	8998      	ldrh	r0, [r3, #12]
   893cc:	4b1f      	ldr	r3, [pc, #124]	; (8944c <tcp_oos_insert_segment+0x8c>)
   893ce:	4798      	blx	r3
   893d0:	f010 0f01 	tst.w	r0, #1
   893d4:	d104      	bne.n	893e0 <tcp_oos_insert_segment+0x20>
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
   893d6:	4e1e      	ldr	r6, [pc, #120]	; (89450 <tcp_oos_insert_segment+0x90>)
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
   893d8:	4f1c      	ldr	r7, [pc, #112]	; (8944c <tcp_oos_insert_segment+0x8c>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
   893da:	f8df 8084 	ldr.w	r8, [pc, #132]	; 89460 <tcp_oos_insert_segment+0xa0>
   893de:	e019      	b.n	89414 <tcp_oos_insert_segment+0x54>
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
   893e0:	4620      	mov	r0, r4
   893e2:	4b1c      	ldr	r3, [pc, #112]	; (89454 <tcp_oos_insert_segment+0x94>)
   893e4:	4798      	blx	r3
    next = NULL;
   893e6:	2400      	movs	r4, #0
   893e8:	e02c      	b.n	89444 <tcp_oos_insert_segment+0x84>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
   893ea:	8998      	ldrh	r0, [r3, #12]
   893ec:	47b8      	blx	r7
   893ee:	f010 0f01 	tst.w	r0, #1
   893f2:	d009      	beq.n	89408 <tcp_oos_insert_segment+0x48>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
   893f4:	f8d5 900c 	ldr.w	r9, [r5, #12]
   893f8:	f8b9 a00c 	ldrh.w	sl, [r9, #12]
   893fc:	2001      	movs	r0, #1
   893fe:	47c0      	blx	r8
   89400:	ea40 000a 	orr.w	r0, r0, sl
   89404:	f8a9 000c 	strh.w	r0, [r9, #12]
      }
      old_seg = next;
      next = next->next;
   89408:	f8d4 9000 	ldr.w	r9, [r4]
      tcp_seg_free(old_seg);
   8940c:	4620      	mov	r0, r4
   8940e:	4b12      	ldr	r3, [pc, #72]	; (89458 <tcp_oos_insert_segment+0x98>)
   89410:	4798      	blx	r3
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
   89412:	464c      	mov	r4, r9
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
   89414:	b1b4      	cbz	r4, 89444 <tcp_oos_insert_segment+0x84>
           TCP_SEQ_GEQ((seqno + cseg->len),
   89416:	8929      	ldrh	r1, [r5, #8]
   89418:	6832      	ldr	r2, [r6, #0]
   8941a:	68e3      	ldr	r3, [r4, #12]
   8941c:	6858      	ldr	r0, [r3, #4]
   8941e:	1a08      	subs	r0, r1, r0
   89420:	4410      	add	r0, r2
   89422:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   89426:	ebcc 0000 	rsb	r0, ip, r0
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
   8942a:	2800      	cmp	r0, #0
   8942c:	dadd      	bge.n	893ea <tcp_oos_insert_segment+0x2a>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
   8942e:	685b      	ldr	r3, [r3, #4]
   89430:	1ac9      	subs	r1, r1, r3
   89432:	4411      	add	r1, r2
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
   89434:	2900      	cmp	r1, #0
   89436:	dd05      	ble.n	89444 <tcp_oos_insert_segment+0x84>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
   89438:	1a9b      	subs	r3, r3, r2
   8943a:	b299      	uxth	r1, r3
   8943c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
   8943e:	6868      	ldr	r0, [r5, #4]
   89440:	4b06      	ldr	r3, [pc, #24]	; (8945c <tcp_oos_insert_segment+0x9c>)
   89442:	4798      	blx	r3
    }
  }
  cseg->next = next;
   89444:	602c      	str	r4, [r5, #0]
   89446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8944a:	bf00      	nop
   8944c:	000864dd 	.word	0x000864dd
   89450:	200759cc 	.word	0x200759cc
   89454:	000888f1 	.word	0x000888f1
   89458:	000888cd 	.word	0x000888cd
   8945c:	00088249 	.word	0x00088249
   89460:	000864d1 	.word	0x000864d1

00089464 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
   89464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89468:	4604      	mov	r4, r0
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;

  if (flags & TCP_ACK) {
   8946a:	4b9d      	ldr	r3, [pc, #628]	; (896e0 <tcp_receive+0x27c>)
   8946c:	781b      	ldrb	r3, [r3, #0]
   8946e:	f013 0f10 	tst.w	r3, #16
   89472:	f000 8192 	beq.w	8979a <tcp_receive+0x336>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
   89476:	f8b0 505c 	ldrh.w	r5, [r0, #92]	; 0x5c
   8947a:	6e41      	ldr	r1, [r0, #100]	; 0x64

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
   8947c:	6e02      	ldr	r2, [r0, #96]	; 0x60
   8947e:	4b99      	ldr	r3, [pc, #612]	; (896e4 <tcp_receive+0x280>)
   89480:	681b      	ldr	r3, [r3, #0]
   89482:	1ad0      	subs	r0, r2, r3
   89484:	2800      	cmp	r0, #0
   89486:	db0f      	blt.n	894a8 <tcp_receive+0x44>
   89488:	429a      	cmp	r2, r3
   8948a:	d104      	bne.n	89496 <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
   8948c:	4a96      	ldr	r2, [pc, #600]	; (896e8 <tcp_receive+0x284>)
   8948e:	6812      	ldr	r2, [r2, #0]
   89490:	1a8a      	subs	r2, r1, r2
   89492:	2a00      	cmp	r2, #0
   89494:	db08      	blt.n	894a8 <tcp_receive+0x44>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
   89496:	4a94      	ldr	r2, [pc, #592]	; (896e8 <tcp_receive+0x284>)
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
   89498:	6812      	ldr	r2, [r2, #0]
   8949a:	4291      	cmp	r1, r2
   8949c:	d115      	bne.n	894ca <tcp_receive+0x66>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
   8949e:	4a93      	ldr	r2, [pc, #588]	; (896ec <tcp_receive+0x288>)
   894a0:	6812      	ldr	r2, [r2, #0]
   894a2:	89d2      	ldrh	r2, [r2, #14]
   894a4:	42aa      	cmp	r2, r5
   894a6:	d910      	bls.n	894ca <tcp_receive+0x66>
      pcb->snd_wnd = tcphdr->wnd;
   894a8:	4a90      	ldr	r2, [pc, #576]	; (896ec <tcp_receive+0x288>)
   894aa:	6812      	ldr	r2, [r2, #0]
   894ac:	89d2      	ldrh	r2, [r2, #14]
   894ae:	b290      	uxth	r0, r2
   894b0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wl1 = seqno;
   894b4:	6623      	str	r3, [r4, #96]	; 0x60
      pcb->snd_wl2 = ackno;
   894b6:	4b8c      	ldr	r3, [pc, #560]	; (896e8 <tcp_receive+0x284>)
   894b8:	681b      	ldr	r3, [r3, #0]
   894ba:	6663      	str	r3, [r4, #100]	; 0x64
      if (pcb->snd_wnd > 0 && pcb->persist_backoff > 0) {
   894bc:	b128      	cbz	r0, 894ca <tcp_receive+0x66>
   894be:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   894c2:	b113      	cbz	r3, 894ca <tcp_receive+0x66>
          pcb->persist_backoff = 0;
   894c4:	2300      	movs	r3, #0
   894c6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
   894ca:	4b87      	ldr	r3, [pc, #540]	; (896e8 <tcp_receive+0x284>)
   894cc:	681b      	ldr	r3, [r3, #0]
   894ce:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   894d0:	1a98      	subs	r0, r3, r2
   894d2:	2800      	cmp	r0, #0
   894d4:	dc37      	bgt.n	89546 <tcp_receive+0xe2>
      pcb->acked = 0;
   894d6:	2000      	movs	r0, #0
   894d8:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
      /* Clause 2 */
      if (tcplen == 0) {
   894dc:	4884      	ldr	r0, [pc, #528]	; (896f0 <tcp_receive+0x28c>)
   894de:	8800      	ldrh	r0, [r0, #0]
   894e0:	2800      	cmp	r0, #0
   894e2:	f040 842f 	bne.w	89d44 <tcp_receive+0x8e0>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
   894e6:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
   894ea:	6e60      	ldr	r0, [r4, #100]	; 0x64
   894ec:	4430      	add	r0, r6
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
   894ee:	4429      	add	r1, r5
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
      pcb->acked = 0;
      /* Clause 2 */
      if (tcplen == 0) {
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
   894f0:	4288      	cmp	r0, r1
   894f2:	f040 8427 	bne.w	89d44 <tcp_receive+0x8e0>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
   894f6:	f9b4 1036 	ldrsh.w	r1, [r4, #54]	; 0x36
   894fa:	2900      	cmp	r1, #0
   894fc:	f2c0 8422 	blt.w	89d44 <tcp_receive+0x8e0>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
   89500:	4293      	cmp	r3, r2
   89502:	f040 841f 	bne.w	89d44 <tcp_receive+0x8e0>
              found_dupack = 1;
              if (pcb->dupacks + 1 > pcb->dupacks)
   89506:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   8950a:	1c5a      	adds	r2, r3, #1
   8950c:	4293      	cmp	r3, r2
                ++pcb->dupacks;
   8950e:	bfbc      	itt	lt
   89510:	4613      	movlt	r3, r2
   89512:	f884 3050 	strblt.w	r3, [r4, #80]	; 0x50
              if (pcb->dupacks > 3) {
   89516:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   8951a:	2b03      	cmp	r3, #3
   8951c:	d909      	bls.n	89532 <tcp_receive+0xce>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
   8951e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
   89522:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   89524:	4413      	add	r3, r2
   89526:	b29b      	uxth	r3, r3
   89528:	429a      	cmp	r2, r3
   8952a:	d207      	bcs.n	8953c <tcp_receive+0xd8>
                  pcb->cwnd += pcb->mss;
   8952c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
   89530:	e004      	b.n	8953c <tcp_receive+0xd8>
                }
              } else if (pcb->dupacks == 3) {
   89532:	2b03      	cmp	r3, #3
   89534:	d102      	bne.n	8953c <tcp_receive+0xd8>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
   89536:	4620      	mov	r0, r4
   89538:	4b6e      	ldr	r3, [pc, #440]	; (896f4 <tcp_receive+0x290>)
   8953a:	4798      	blx	r3
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
   8953c:	4e6a      	ldr	r6, [pc, #424]	; (896e8 <tcp_receive+0x284>)
   8953e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 89704 <tcp_receive+0x2a0>
   89542:	4f6d      	ldr	r7, [pc, #436]	; (896f8 <tcp_receive+0x294>)
   89544:	e0e0      	b.n	89708 <tcp_receive+0x2a4>
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
   89546:	2801      	cmp	r0, #1
   89548:	f100 8099 	bmi.w	8967e <tcp_receive+0x21a>
   8954c:	6da1      	ldr	r1, [r4, #88]	; 0x58
   8954e:	1a59      	subs	r1, r3, r1
   89550:	2900      	cmp	r1, #0
   89552:	f300 8094 	bgt.w	8967e <tcp_receive+0x21a>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
   89556:	f894 1020 	ldrb.w	r1, [r4, #32]
   8955a:	f011 0f04 	tst.w	r1, #4
   8955e:	d007      	beq.n	89570 <tcp_receive+0x10c>
        pcb->flags &= ~TF_INFR;
   89560:	f021 0104 	bic.w	r1, r1, #4
   89564:	f884 1020 	strb.w	r1, [r4, #32]
        pcb->cwnd = pcb->ssthresh;
   89568:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
   8956c:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
   89570:	2100      	movs	r1, #0
   89572:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
   89576:	f9b4 5044 	ldrsh.w	r5, [r4, #68]	; 0x44
   8957a:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
   8957e:	eb00 00e5 	add.w	r0, r0, r5, asr #3
   89582:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
   89586:	1a9a      	subs	r2, r3, r2
   89588:	b292      	uxth	r2, r2
   8958a:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c

      pcb->snd_buf += pcb->acked;
   8958e:	f8b4 006e 	ldrh.w	r0, [r4, #110]	; 0x6e
   89592:	4402      	add	r2, r0
   89594:	f8a4 206e 	strh.w	r2, [r4, #110]	; 0x6e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
   89598:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
      pcb->lastack = ackno;
   8959c:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
   8959e:	7c23      	ldrb	r3, [r4, #16]
   895a0:	2b03      	cmp	r3, #3
   895a2:	d918      	bls.n	895d6 <tcp_receive+0x172>
        if (pcb->cwnd < pcb->ssthresh) {
   895a4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   895a8:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   895ac:	429a      	cmp	r2, r3
   895ae:	d907      	bls.n	895c0 <tcp_receive+0x15c>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
   895b0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   895b2:	441a      	add	r2, r3
   895b4:	b292      	uxth	r2, r2
   895b6:	4293      	cmp	r3, r2
   895b8:	d20d      	bcs.n	895d6 <tcp_receive+0x172>
            pcb->cwnd += pcb->mss;
   895ba:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
   895be:	e00a      	b.n	895d6 <tcp_receive+0x172>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
   895c0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   895c2:	fb02 f202 	mul.w	r2, r2, r2
   895c6:	fb92 f2f3 	sdiv	r2, r2, r3
   895ca:	441a      	add	r2, r3
   895cc:	b292      	uxth	r2, r2
          if (new_cwnd > pcb->cwnd) {
   895ce:	4293      	cmp	r3, r2
            pcb->cwnd = new_cwnd;
   895d0:	bf38      	it	cc
   895d2:	f8a4 2052 	strhcc.w	r2, [r4, #82]	; 0x52
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
   895d6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 89704 <tcp_receive+0x2a0>
   895da:	4e47      	ldr	r6, [pc, #284]	; (896f8 <tcp_receive+0x294>)
   895dc:	4f42      	ldr	r7, [pc, #264]	; (896e8 <tcp_receive+0x284>)
   895de:	e02c      	b.n	8963a <tcp_receive+0x1d6>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
   895e0:	6fa5      	ldr	r5, [r4, #120]	; 0x78
        pcb->unacked = pcb->unacked->next;
   895e2:	682b      	ldr	r3, [r5, #0]
   895e4:	67a3      	str	r3, [r4, #120]	; 0x78

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
   895e6:	f8b4 9070 	ldrh.w	r9, [r4, #112]	; 0x70
   895ea:	6868      	ldr	r0, [r5, #4]
   895ec:	4b43      	ldr	r3, [pc, #268]	; (896fc <tcp_receive+0x298>)
   895ee:	4798      	blx	r3
   895f0:	4581      	cmp	r9, r0
   895f2:	d200      	bcs.n	895f6 <tcp_receive+0x192>
   895f4:	e7fe      	b.n	895f4 <tcp_receive+0x190>
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
   895f6:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   895fa:	b153      	cbz	r3, 89612 <tcp_receive+0x1ae>
   895fc:	68eb      	ldr	r3, [r5, #12]
   895fe:	8998      	ldrh	r0, [r3, #12]
   89600:	47b0      	blx	r6
   89602:	f010 0f01 	tst.w	r0, #1
   89606:	d004      	beq.n	89612 <tcp_receive+0x1ae>
          pcb->acked--;
   89608:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   8960c:	3b01      	subs	r3, #1
   8960e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
   89612:	f8b4 9070 	ldrh.w	r9, [r4, #112]	; 0x70
   89616:	6868      	ldr	r0, [r5, #4]
   89618:	4b38      	ldr	r3, [pc, #224]	; (896fc <tcp_receive+0x298>)
   8961a:	4798      	blx	r3
   8961c:	ebc0 0009 	rsb	r0, r0, r9
   89620:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
        tcp_seg_free(next);
   89624:	4628      	mov	r0, r5
   89626:	4b36      	ldr	r3, [pc, #216]	; (89700 <tcp_receive+0x29c>)
   89628:	4798      	blx	r3

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
   8962a:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   8962e:	b123      	cbz	r3, 8963a <tcp_receive+0x1d6>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
   89630:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   89632:	b913      	cbnz	r3, 8963a <tcp_receive+0x1d6>
   89634:	6f63      	ldr	r3, [r4, #116]	; 0x74
   89636:	b903      	cbnz	r3, 8963a <tcp_receive+0x1d6>
   89638:	e7fe      	b.n	89638 <tcp_receive+0x1d4>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
   8963a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8963c:	b19b      	cbz	r3, 89666 <tcp_receive+0x202>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
   8963e:	68db      	ldr	r3, [r3, #12]
   89640:	6858      	ldr	r0, [r3, #4]
   89642:	47c0      	blx	r8
   89644:	4681      	mov	r9, r0
   89646:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   89648:	891d      	ldrh	r5, [r3, #8]
   8964a:	68db      	ldr	r3, [r3, #12]
   8964c:	8998      	ldrh	r0, [r3, #12]
   8964e:	47b0      	blx	r6
   89650:	683b      	ldr	r3, [r7, #0]
   89652:	ebc3 0309 	rsb	r3, r3, r9
   89656:	f010 0003 	ands.w	r0, r0, #3
   8965a:	bf18      	it	ne
   8965c:	2001      	movne	r0, #1
   8965e:	4428      	add	r0, r5
   89660:	4403      	add	r3, r0
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
   89662:	2b00      	cmp	r3, #0
   89664:	ddbc      	ble.n	895e0 <tcp_receive+0x17c>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
   89666:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   89668:	b91b      	cbnz	r3, 89672 <tcp_receive+0x20e>
        pcb->rtime = -1;
   8966a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8966e:	86e3      	strh	r3, [r4, #54]	; 0x36
   89670:	e001      	b.n	89676 <tcp_receive+0x212>
      else
        pcb->rtime = 0;
   89672:	2300      	movs	r3, #0
   89674:	86e3      	strh	r3, [r4, #54]	; 0x36

      pcb->polltmr = 0;
   89676:	2300      	movs	r3, #0
   89678:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
   8967c:	e75e      	b.n	8953c <tcp_receive+0xd8>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
   8967e:	2300      	movs	r3, #0
   89680:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
   89684:	e75a      	b.n	8953c <tcp_receive+0xd8>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
   89686:	6f65      	ldr	r5, [r4, #116]	; 0x74
      pcb->unsent = pcb->unsent->next;
   89688:	682b      	ldr	r3, [r5, #0]
   8968a:	6763      	str	r3, [r4, #116]	; 0x74
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
   8968c:	f8b4 9070 	ldrh.w	r9, [r4, #112]	; 0x70
   89690:	6868      	ldr	r0, [r5, #4]
   89692:	4b1a      	ldr	r3, [pc, #104]	; (896fc <tcp_receive+0x298>)
   89694:	4798      	blx	r3
   89696:	4581      	cmp	r9, r0
   89698:	d200      	bcs.n	8969c <tcp_receive+0x238>
   8969a:	e7fe      	b.n	8969a <tcp_receive+0x236>
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
   8969c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   896a0:	b153      	cbz	r3, 896b8 <tcp_receive+0x254>
   896a2:	68eb      	ldr	r3, [r5, #12]
   896a4:	8998      	ldrh	r0, [r3, #12]
   896a6:	47b8      	blx	r7
   896a8:	f010 0f01 	tst.w	r0, #1
   896ac:	d004      	beq.n	896b8 <tcp_receive+0x254>
        pcb->acked--;
   896ae:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   896b2:	3b01      	subs	r3, #1
   896b4:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
   896b8:	f8b4 9070 	ldrh.w	r9, [r4, #112]	; 0x70
   896bc:	6868      	ldr	r0, [r5, #4]
   896be:	4b0f      	ldr	r3, [pc, #60]	; (896fc <tcp_receive+0x298>)
   896c0:	4798      	blx	r3
   896c2:	ebc0 0009 	rsb	r0, r0, r9
   896c6:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
      tcp_seg_free(next);
   896ca:	4628      	mov	r0, r5
   896cc:	4b0c      	ldr	r3, [pc, #48]	; (89700 <tcp_receive+0x29c>)
   896ce:	4798      	blx	r3
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
   896d0:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   896d4:	b1c3      	cbz	r3, 89708 <tcp_receive+0x2a4>
        LWIP_ASSERT("tcp_receive: valid queue length",
   896d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   896d8:	b9b3      	cbnz	r3, 89708 <tcp_receive+0x2a4>
   896da:	6f63      	ldr	r3, [r4, #116]	; 0x74
   896dc:	b9a3      	cbnz	r3, 89708 <tcp_receive+0x2a4>
   896de:	e7fe      	b.n	896de <tcp_receive+0x27a>
   896e0:	200759d8 	.word	0x200759d8
   896e4:	200759cc 	.word	0x200759cc
   896e8:	200759d4 	.word	0x200759d4
   896ec:	200759c8 	.word	0x200759c8
   896f0:	200759d0 	.word	0x200759d0
   896f4:	0008b4d1 	.word	0x0008b4d1
   896f8:	000864dd 	.word	0x000864dd
   896fc:	000882bd 	.word	0x000882bd
   89700:	000888cd 	.word	0x000888cd
   89704:	00086501 	.word	0x00086501
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
   89708:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8970a:	b1db      	cbz	r3, 89744 <tcp_receive+0x2e0>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
   8970c:	f8d6 9000 	ldr.w	r9, [r6]
   89710:	68db      	ldr	r3, [r3, #12]
   89712:	6858      	ldr	r0, [r3, #4]
   89714:	47c0      	blx	r8
   89716:	4682      	mov	sl, r0
   89718:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8971a:	891d      	ldrh	r5, [r3, #8]
   8971c:	68db      	ldr	r3, [r3, #12]
   8971e:	8998      	ldrh	r0, [r3, #12]
   89720:	47b8      	blx	r7
   89722:	ebca 0909 	rsb	r9, sl, r9
   89726:	f010 0003 	ands.w	r0, r0, #3
   8972a:	bf18      	it	ne
   8972c:	2001      	movne	r0, #1
   8972e:	4428      	add	r0, r5
   89730:	ebc0 0909 	rsb	r9, r0, r9
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
   89734:	f1b9 0f00 	cmp.w	r9, #0
   89738:	db04      	blt.n	89744 <tcp_receive+0x2e0>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
   8973a:	6832      	ldr	r2, [r6, #0]
   8973c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   8973e:	1ad3      	subs	r3, r2, r3
   89740:	2b00      	cmp	r3, #0
   89742:	dda0      	ble.n	89686 <tcp_receive+0x222>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
   89744:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   89746:	b343      	cbz	r3, 8979a <tcp_receive+0x336>
   89748:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8974a:	4979      	ldr	r1, [pc, #484]	; (89930 <tcp_receive+0x4cc>)
   8974c:	6809      	ldr	r1, [r1, #0]
   8974e:	1a52      	subs	r2, r2, r1
   89750:	2a00      	cmp	r2, #0
   89752:	da22      	bge.n	8979a <tcp_receive+0x336>

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
   89754:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
   89758:	4a76      	ldr	r2, [pc, #472]	; (89934 <tcp_receive+0x4d0>)
   8975a:	6812      	ldr	r2, [r2, #0]
   8975c:	1ad3      	subs	r3, r2, r3

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
   8975e:	f341 02cc 	sbfx	r2, r1, #3, #13
   89762:	1a9a      	subs	r2, r3, r2
   89764:	b292      	uxth	r2, r2
   89766:	b293      	uxth	r3, r2
      pcb->sa += m;
   89768:	4411      	add	r1, r2
   8976a:	b289      	uxth	r1, r1
   8976c:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
      if (m < 0) {
   89770:	f413 4f00 	tst.w	r3, #32768	; 0x8000
        m = -m;
   89774:	bf1c      	itt	ne
   89776:	4253      	negne	r3, r2
   89778:	b29b      	uxthne	r3, r3
      }
      m = m - (pcb->sv >> 2);
   8977a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
   8977e:	f342 008d 	sbfx	r0, r2, #2, #14
   89782:	1a12      	subs	r2, r2, r0
      pcb->sv += m;
   89784:	4413      	add	r3, r2
   89786:	b29b      	uxth	r3, r3
   89788:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
   8978c:	f341 01cc 	sbfx	r1, r1, #3, #13
   89790:	440b      	add	r3, r1
   89792:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
   89796:	2300      	movs	r3, #0
   89798:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /* If the incoming segment contains data, we must process it
     further. */
  if (tcplen > 0) {
   8979a:	4b67      	ldr	r3, [pc, #412]	; (89938 <tcp_receive+0x4d4>)
   8979c:	8818      	ldrh	r0, [r3, #0]
   8979e:	2800      	cmp	r0, #0
   897a0:	f000 82bc 	beq.w	89d1c <tcp_receive+0x8b8>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
   897a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   897a6:	4b65      	ldr	r3, [pc, #404]	; (8993c <tcp_receive+0x4d8>)
   897a8:	6819      	ldr	r1, [r3, #0]
   897aa:	1a53      	subs	r3, r2, r1
   897ac:	2b01      	cmp	r3, #1
   897ae:	d438      	bmi.n	89822 <tcp_receive+0x3be>
   897b0:	1c55      	adds	r5, r2, #1
   897b2:	1a6d      	subs	r5, r5, r1
   897b4:	1a28      	subs	r0, r5, r0
   897b6:	2800      	cmp	r0, #0
   897b8:	dc33      	bgt.n	89822 <tcp_receive+0x3be>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
   897ba:	461a      	mov	r2, r3
      p = inseg.p;
   897bc:	4960      	ldr	r1, [pc, #384]	; (89940 <tcp_receive+0x4dc>)
   897be:	6848      	ldr	r0, [r1, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
   897c0:	b900      	cbnz	r0, 897c4 <tcp_receive+0x360>
   897c2:	e7fe      	b.n	897c2 <tcp_receive+0x35e>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
   897c4:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   897c8:	428b      	cmp	r3, r1
   897ca:	dd00      	ble.n	897ce <tcp_receive+0x36a>
   897cc:	e7fe      	b.n	897cc <tcp_receive+0x368>
      if (inseg.p->len < off) {
   897ce:	8941      	ldrh	r1, [r0, #10]
   897d0:	4299      	cmp	r1, r3
   897d2:	da14      	bge.n	897fe <tcp_receive+0x39a>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
   897d4:	8901      	ldrh	r1, [r0, #8]
   897d6:	4299      	cmp	r1, r3
   897d8:	da00      	bge.n	897dc <tcp_receive+0x378>
   897da:	e7fe      	b.n	897da <tcp_receive+0x376>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
   897dc:	1acb      	subs	r3, r1, r3
   897de:	b29d      	uxth	r5, r3
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
   897e0:	2100      	movs	r1, #0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
   897e2:	e003      	b.n	897ec <tcp_receive+0x388>
          off -= p->len;
   897e4:	1ad2      	subs	r2, r2, r3
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
   897e6:	8105      	strh	r5, [r0, #8]
          p->len = 0;
   897e8:	8141      	strh	r1, [r0, #10]
          p = p->next;
   897ea:	6800      	ldr	r0, [r0, #0]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
   897ec:	8943      	ldrh	r3, [r0, #10]
   897ee:	4293      	cmp	r3, r2
   897f0:	dbf8      	blt.n	897e4 <tcp_receive+0x380>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
   897f2:	4251      	negs	r1, r2
   897f4:	b209      	sxth	r1, r1
   897f6:	4b53      	ldr	r3, [pc, #332]	; (89944 <tcp_receive+0x4e0>)
   897f8:	4798      	blx	r3
   897fa:	b130      	cbz	r0, 8980a <tcp_receive+0x3a6>
   897fc:	e7fe      	b.n	897fc <tcp_receive+0x398>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
   897fe:	4259      	negs	r1, r3
   89800:	b209      	sxth	r1, r1
   89802:	4b50      	ldr	r3, [pc, #320]	; (89944 <tcp_receive+0x4e0>)
   89804:	4798      	blx	r3
   89806:	b100      	cbz	r0, 8980a <tcp_receive+0x3a6>
   89808:	e7fe      	b.n	89808 <tcp_receive+0x3a4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
   8980a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8980c:	4a4c      	ldr	r2, [pc, #304]	; (89940 <tcp_receive+0x4dc>)
   8980e:	494b      	ldr	r1, [pc, #300]	; (8993c <tcp_receive+0x4d8>)
   89810:	6808      	ldr	r0, [r1, #0]
   89812:	8915      	ldrh	r5, [r2, #8]
   89814:	4428      	add	r0, r5
   89816:	1ac0      	subs	r0, r0, r3
   89818:	8110      	strh	r0, [r2, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
   8981a:	68d2      	ldr	r2, [r2, #12]
   8981c:	600b      	str	r3, [r1, #0]
   8981e:	6053      	str	r3, [r2, #4]
   89820:	e008      	b.n	89834 <tcp_receive+0x3d0>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
   89822:	1a8a      	subs	r2, r1, r2
   89824:	2a00      	cmp	r2, #0
   89826:	da05      	bge.n	89834 <tcp_receive+0x3d0>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
   89828:	f894 3020 	ldrb.w	r3, [r4, #32]
   8982c:	f043 0302 	orr.w	r3, r3, #2
   89830:	f884 3020 	strb.w	r3, [r4, #32]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
   89834:	4b41      	ldr	r3, [pc, #260]	; (8993c <tcp_receive+0x4d8>)
   89836:	681a      	ldr	r2, [r3, #0]
   89838:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8983a:	1ad1      	subs	r1, r2, r3
   8983c:	2900      	cmp	r1, #0
   8983e:	f2c0 8268 	blt.w	89d12 <tcp_receive+0x8ae>
   89842:	1c50      	adds	r0, r2, #1
   89844:	1ac0      	subs	r0, r0, r3
   89846:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   89848:	1a41      	subs	r1, r0, r1
   8984a:	2900      	cmp	r1, #0
   8984c:	f300 8261 	bgt.w	89d12 <tcp_receive+0x8ae>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
   89850:	429a      	cmp	r2, r3
   89852:	f040 8179 	bne.w	89b48 <tcp_receive+0x6e4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
   89856:	4b3a      	ldr	r3, [pc, #232]	; (89940 <tcp_receive+0x4dc>)
   89858:	891d      	ldrh	r5, [r3, #8]
   8985a:	68db      	ldr	r3, [r3, #12]
   8985c:	8998      	ldrh	r0, [r3, #12]
   8985e:	4b3a      	ldr	r3, [pc, #232]	; (89948 <tcp_receive+0x4e4>)
   89860:	4798      	blx	r3
   89862:	f010 0003 	ands.w	r0, r0, #3
   89866:	bf18      	it	ne
   89868:	2001      	movne	r0, #1
   8986a:	182b      	adds	r3, r5, r0
   8986c:	b29b      	uxth	r3, r3
   8986e:	4a32      	ldr	r2, [pc, #200]	; (89938 <tcp_receive+0x4d4>)
   89870:	8013      	strh	r3, [r2, #0]

        if (tcplen > pcb->rcv_wnd) {
   89872:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   89874:	429a      	cmp	r2, r3
   89876:	d23f      	bcs.n	898f8 <tcp_receive+0x494>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   89878:	4b31      	ldr	r3, [pc, #196]	; (89940 <tcp_receive+0x4dc>)
   8987a:	68db      	ldr	r3, [r3, #12]
   8987c:	8998      	ldrh	r0, [r3, #12]
   8987e:	4b32      	ldr	r3, [pc, #200]	; (89948 <tcp_receive+0x4e4>)
   89880:	4798      	blx	r3
   89882:	f010 0f01 	tst.w	r0, #1
   89886:	d00d      	beq.n	898a4 <tcp_receive+0x440>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
   89888:	4b2d      	ldr	r3, [pc, #180]	; (89940 <tcp_receive+0x4dc>)
   8988a:	68dd      	ldr	r5, [r3, #12]
   8988c:	89ae      	ldrh	r6, [r5, #12]
   8988e:	4630      	mov	r0, r6
   89890:	4b2d      	ldr	r3, [pc, #180]	; (89948 <tcp_receive+0x4e4>)
   89892:	4798      	blx	r3
   89894:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   89898:	4b2c      	ldr	r3, [pc, #176]	; (8994c <tcp_receive+0x4e8>)
   8989a:	4798      	blx	r3
   8989c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
   898a0:	4330      	orrs	r0, r6
   898a2:	81a8      	strh	r0, [r5, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
   898a4:	4b26      	ldr	r3, [pc, #152]	; (89940 <tcp_receive+0x4dc>)
   898a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   898a8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   898aa:	68db      	ldr	r3, [r3, #12]
   898ac:	8998      	ldrh	r0, [r3, #12]
   898ae:	4b26      	ldr	r3, [pc, #152]	; (89948 <tcp_receive+0x4e4>)
   898b0:	4798      	blx	r3
   898b2:	f000 0002 	and.w	r0, r0, #2
   898b6:	b283      	uxth	r3, r0
   898b8:	b11b      	cbz	r3, 898c2 <tcp_receive+0x45e>
            inseg.len -= 1;
   898ba:	4b21      	ldr	r3, [pc, #132]	; (89940 <tcp_receive+0x4dc>)
   898bc:	891a      	ldrh	r2, [r3, #8]
   898be:	3a01      	subs	r2, #1
   898c0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
   898c2:	4d1f      	ldr	r5, [pc, #124]	; (89940 <tcp_receive+0x4dc>)
   898c4:	6868      	ldr	r0, [r5, #4]
   898c6:	8929      	ldrh	r1, [r5, #8]
   898c8:	4b21      	ldr	r3, [pc, #132]	; (89950 <tcp_receive+0x4ec>)
   898ca:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
   898cc:	892e      	ldrh	r6, [r5, #8]
   898ce:	68eb      	ldr	r3, [r5, #12]
   898d0:	8998      	ldrh	r0, [r3, #12]
   898d2:	4b1d      	ldr	r3, [pc, #116]	; (89948 <tcp_receive+0x4e4>)
   898d4:	4798      	blx	r3
   898d6:	f010 0003 	ands.w	r0, r0, #3
   898da:	bf18      	it	ne
   898dc:	2001      	movne	r0, #1
   898de:	1833      	adds	r3, r6, r0
   898e0:	b29b      	uxth	r3, r3
   898e2:	4a15      	ldr	r2, [pc, #84]	; (89938 <tcp_receive+0x4d4>)
   898e4:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
   898e6:	4a15      	ldr	r2, [pc, #84]	; (8993c <tcp_receive+0x4d8>)
   898e8:	6812      	ldr	r2, [r2, #0]
   898ea:	4413      	add	r3, r2
   898ec:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   898ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
   898f0:	440a      	add	r2, r1
   898f2:	4293      	cmp	r3, r2
   898f4:	d000      	beq.n	898f8 <tcp_receive+0x494>
   898f6:	e7fe      	b.n	898f6 <tcp_receive+0x492>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
   898f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   898fa:	2b00      	cmp	r3, #0
   898fc:	f000 8096 	beq.w	89a2c <tcp_receive+0x5c8>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   89900:	4b0f      	ldr	r3, [pc, #60]	; (89940 <tcp_receive+0x4dc>)
   89902:	68db      	ldr	r3, [r3, #12]
   89904:	8998      	ldrh	r0, [r3, #12]
   89906:	4b10      	ldr	r3, [pc, #64]	; (89948 <tcp_receive+0x4e4>)
   89908:	4798      	blx	r3
   8990a:	f010 0f01 	tst.w	r0, #1
   8990e:	d008      	beq.n	89922 <tcp_receive+0x4be>
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
   89910:	4d10      	ldr	r5, [pc, #64]	; (89954 <tcp_receive+0x4f0>)
   89912:	e002      	b.n	8991a <tcp_receive+0x4b6>
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
   89914:	6803      	ldr	r3, [r0, #0]
   89916:	67e3      	str	r3, [r4, #124]	; 0x7c
              tcp_seg_free(old_ooseq);
   89918:	47a8      	blx	r5
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
   8991a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   8991c:	2800      	cmp	r0, #0
   8991e:	d1f9      	bne.n	89914 <tcp_receive+0x4b0>
   89920:	e084      	b.n	89a2c <tcp_receive+0x5c8>
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          }
          else {
            next = pcb->ooseq;
   89922:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
   89924:	f8df 8010 	ldr.w	r8, [pc, #16]	; 89938 <tcp_receive+0x4d4>
   89928:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8993c <tcp_receive+0x4d8>
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
   8992c:	4e06      	ldr	r6, [pc, #24]	; (89948 <tcp_receive+0x4e4>)
          }
          else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
   8992e:	e03d      	b.n	899ac <tcp_receive+0x548>
   89930:	200759d4 	.word	0x200759d4
   89934:	200768dc 	.word	0x200768dc
   89938:	200759d0 	.word	0x200759d0
   8993c:	200759cc 	.word	0x200759cc
   89940:	200759e4 	.word	0x200759e4
   89944:	00087fd1 	.word	0x00087fd1
   89948:	000864dd 	.word	0x000864dd
   8994c:	000864d1 	.word	0x000864d1
   89950:	00088249 	.word	0x00088249
   89954:	000888cd 	.word	0x000888cd
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
   89958:	8988      	ldrh	r0, [r1, #12]
   8995a:	47b0      	blx	r6
   8995c:	f010 0f01 	tst.w	r0, #1
   89960:	d01f      	beq.n	899a2 <tcp_receive+0x53e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
   89962:	4b97      	ldr	r3, [pc, #604]	; (89bc0 <tcp_receive+0x75c>)
   89964:	68db      	ldr	r3, [r3, #12]
   89966:	8998      	ldrh	r0, [r3, #12]
   89968:	47b0      	blx	r6
   8996a:	f000 0002 	and.w	r0, r0, #2
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
   8996e:	b283      	uxth	r3, r0
   89970:	b9bb      	cbnz	r3, 899a2 <tcp_receive+0x53e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
   89972:	4f93      	ldr	r7, [pc, #588]	; (89bc0 <tcp_receive+0x75c>)
   89974:	f8d7 a00c 	ldr.w	sl, [r7, #12]
   89978:	f8ba b00c 	ldrh.w	fp, [sl, #12]
   8997c:	2001      	movs	r0, #1
   8997e:	4b91      	ldr	r3, [pc, #580]	; (89bc4 <tcp_receive+0x760>)
   89980:	4798      	blx	r3
   89982:	ea40 000b 	orr.w	r0, r0, fp
   89986:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
   8998a:	f8b7 a008 	ldrh.w	sl, [r7, #8]
   8998e:	68fb      	ldr	r3, [r7, #12]
   89990:	8998      	ldrh	r0, [r3, #12]
   89992:	47b0      	blx	r6
   89994:	f010 0003 	ands.w	r0, r0, #3
   89998:	bf18      	it	ne
   8999a:	2001      	movne	r0, #1
   8999c:	4450      	add	r0, sl
   8999e:	f8a8 0000 	strh.w	r0, [r8]
              }
              prev = next;
              next = next->next;
   899a2:	682f      	ldr	r7, [r5, #0]
              tcp_seg_free(prev);
   899a4:	4628      	mov	r0, r5
   899a6:	4b88      	ldr	r3, [pc, #544]	; (89bc8 <tcp_receive+0x764>)
   899a8:	4798      	blx	r3
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
                tcplen = TCP_TCPLEN(&inseg);
              }
              prev = next;
              next = next->next;
   899aa:	463d      	mov	r5, r7
          }
          else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
   899ac:	2d00      	cmp	r5, #0
   899ae:	d03c      	beq.n	89a2a <tcp_receive+0x5c6>
                   TCP_SEQ_GEQ(seqno + tcplen,
   899b0:	f8b8 2000 	ldrh.w	r2, [r8]
   899b4:	f8d9 3000 	ldr.w	r3, [r9]
   899b8:	68e9      	ldr	r1, [r5, #12]
   899ba:	684f      	ldr	r7, [r1, #4]
   899bc:	1bd7      	subs	r7, r2, r7
   899be:	441f      	add	r7, r3
   899c0:	8928      	ldrh	r0, [r5, #8]
   899c2:	1a38      	subs	r0, r7, r0
          }
          else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
   899c4:	2800      	cmp	r0, #0
   899c6:	dac7      	bge.n	89958 <tcp_receive+0x4f4>
   899c8:	462f      	mov	r7, r5
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
   899ca:	6849      	ldr	r1, [r1, #4]
   899cc:	1a52      	subs	r2, r2, r1
   899ce:	441a      	add	r2, r3
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
   899d0:	2a00      	cmp	r2, #0
   899d2:	dd2a      	ble.n	89a2a <tcp_receive+0x5c6>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
   899d4:	4a7a      	ldr	r2, [pc, #488]	; (89bc0 <tcp_receive+0x75c>)
   899d6:	1acb      	subs	r3, r1, r3
   899d8:	8113      	strh	r3, [r2, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   899da:	68d3      	ldr	r3, [r2, #12]
   899dc:	8998      	ldrh	r0, [r3, #12]
   899de:	4b7b      	ldr	r3, [pc, #492]	; (89bcc <tcp_receive+0x768>)
   899e0:	4798      	blx	r3
   899e2:	f000 0002 	and.w	r0, r0, #2
   899e6:	b283      	uxth	r3, r0
   899e8:	b11b      	cbz	r3, 899f2 <tcp_receive+0x58e>
                inseg.len -= 1;
   899ea:	4b75      	ldr	r3, [pc, #468]	; (89bc0 <tcp_receive+0x75c>)
   899ec:	891a      	ldrh	r2, [r3, #8]
   899ee:	3a01      	subs	r2, #1
   899f0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
   899f2:	4e73      	ldr	r6, [pc, #460]	; (89bc0 <tcp_receive+0x75c>)
   899f4:	6870      	ldr	r0, [r6, #4]
   899f6:	8931      	ldrh	r1, [r6, #8]
   899f8:	4b75      	ldr	r3, [pc, #468]	; (89bd0 <tcp_receive+0x76c>)
   899fa:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
   899fc:	f8b6 8008 	ldrh.w	r8, [r6, #8]
   89a00:	68f3      	ldr	r3, [r6, #12]
   89a02:	8998      	ldrh	r0, [r3, #12]
   89a04:	4b71      	ldr	r3, [pc, #452]	; (89bcc <tcp_receive+0x768>)
   89a06:	4798      	blx	r3
   89a08:	f010 0003 	ands.w	r0, r0, #3
   89a0c:	bf18      	it	ne
   89a0e:	2001      	movne	r0, #1
   89a10:	eb08 0300 	add.w	r3, r8, r0
   89a14:	b29b      	uxth	r3, r3
   89a16:	4a6f      	ldr	r2, [pc, #444]	; (89bd4 <tcp_receive+0x770>)
   89a18:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
   89a1a:	4a6f      	ldr	r2, [pc, #444]	; (89bd8 <tcp_receive+0x774>)
   89a1c:	6812      	ldr	r2, [r2, #0]
   89a1e:	4413      	add	r3, r2
   89a20:	68fa      	ldr	r2, [r7, #12]
   89a22:	6852      	ldr	r2, [r2, #4]
   89a24:	4293      	cmp	r3, r2
   89a26:	d000      	beq.n	89a2a <tcp_receive+0x5c6>
   89a28:	e7fe      	b.n	89a28 <tcp_receive+0x5c4>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
   89a2a:	67e5      	str	r5, [r4, #124]	; 0x7c
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
   89a2c:	4b69      	ldr	r3, [pc, #420]	; (89bd4 <tcp_receive+0x770>)
   89a2e:	881b      	ldrh	r3, [r3, #0]
   89a30:	4a69      	ldr	r2, [pc, #420]	; (89bd8 <tcp_receive+0x774>)
   89a32:	6812      	ldr	r2, [r2, #0]
   89a34:	441a      	add	r2, r3
   89a36:	6262      	str	r2, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
   89a38:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   89a3a:	4293      	cmp	r3, r2
   89a3c:	d900      	bls.n	89a40 <tcp_receive+0x5dc>
   89a3e:	e7fe      	b.n	89a3e <tcp_receive+0x5da>
        pcb->rcv_wnd -= tcplen;
   89a40:	1ad3      	subs	r3, r2, r3
   89a42:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
   89a44:	4620      	mov	r0, r4
   89a46:	4b65      	ldr	r3, [pc, #404]	; (89bdc <tcp_receive+0x778>)
   89a48:	4798      	blx	r3
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
   89a4a:	4b5d      	ldr	r3, [pc, #372]	; (89bc0 <tcp_receive+0x75c>)
   89a4c:	685b      	ldr	r3, [r3, #4]
   89a4e:	891a      	ldrh	r2, [r3, #8]
   89a50:	b122      	cbz	r2, 89a5c <tcp_receive+0x5f8>
          recv_data = inseg.p;
   89a52:	4a63      	ldr	r2, [pc, #396]	; (89be0 <tcp_receive+0x77c>)
   89a54:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
   89a56:	2200      	movs	r2, #0
   89a58:	4b59      	ldr	r3, [pc, #356]	; (89bc0 <tcp_receive+0x75c>)
   89a5a:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   89a5c:	4b58      	ldr	r3, [pc, #352]	; (89bc0 <tcp_receive+0x75c>)
   89a5e:	68db      	ldr	r3, [r3, #12]
   89a60:	8998      	ldrh	r0, [r3, #12]
   89a62:	4b5a      	ldr	r3, [pc, #360]	; (89bcc <tcp_receive+0x768>)
   89a64:	4798      	blx	r3
   89a66:	f010 0f01 	tst.w	r0, #1
   89a6a:	d004      	beq.n	89a76 <tcp_receive+0x612>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
   89a6c:	4b5d      	ldr	r3, [pc, #372]	; (89be4 <tcp_receive+0x780>)
   89a6e:	781a      	ldrb	r2, [r3, #0]
   89a70:	f042 0220 	orr.w	r2, r2, #32
   89a74:	701a      	strb	r2, [r3, #0]
           are now in sequence. */
        while (pcb->ooseq != NULL &&
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;
   89a76:	f8df 9160 	ldr.w	r9, [pc, #352]	; 89bd8 <tcp_receive+0x774>

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
   89a7a:	4e54      	ldr	r6, [pc, #336]	; (89bcc <tcp_receive+0x768>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);

          tcp_update_rcv_ann_wnd(pcb);
   89a7c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 89bdc <tcp_receive+0x778>
   89a80:	e04c      	b.n	89b1c <tcp_receive+0x6b8>
           are now in sequence. */
        while (pcb->ooseq != NULL &&
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;
   89a82:	f8c9 7000 	str.w	r7, [r9]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
   89a86:	f8b5 a008 	ldrh.w	sl, [r5, #8]
   89a8a:	8998      	ldrh	r0, [r3, #12]
   89a8c:	47b0      	blx	r6
   89a8e:	f010 0003 	ands.w	r0, r0, #3
   89a92:	bf18      	it	ne
   89a94:	2001      	movne	r0, #1
   89a96:	4450      	add	r0, sl
   89a98:	4407      	add	r7, r0
   89a9a:	6267      	str	r7, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
   89a9c:	8d27      	ldrh	r7, [r4, #40]	; 0x28
   89a9e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
   89aa2:	68eb      	ldr	r3, [r5, #12]
   89aa4:	8998      	ldrh	r0, [r3, #12]
   89aa6:	47b0      	blx	r6
   89aa8:	f010 0003 	ands.w	r0, r0, #3
   89aac:	bf18      	it	ne
   89aae:	2001      	movne	r0, #1
   89ab0:	4450      	add	r0, sl
   89ab2:	4287      	cmp	r7, r0
   89ab4:	da00      	bge.n	89ab8 <tcp_receive+0x654>
   89ab6:	e7fe      	b.n	89ab6 <tcp_receive+0x652>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
   89ab8:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
   89abc:	892f      	ldrh	r7, [r5, #8]
   89abe:	68eb      	ldr	r3, [r5, #12]
   89ac0:	8998      	ldrh	r0, [r3, #12]
   89ac2:	47b0      	blx	r6
   89ac4:	ebc7 070a 	rsb	r7, r7, sl
   89ac8:	f010 0003 	ands.w	r0, r0, #3
   89acc:	bf18      	it	ne
   89ace:	2001      	movne	r0, #1
   89ad0:	1a38      	subs	r0, r7, r0
   89ad2:	8520      	strh	r0, [r4, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
   89ad4:	4620      	mov	r0, r4
   89ad6:	47c0      	blx	r8

          if (cseg->p->tot_len > 0) {
   89ad8:	6869      	ldr	r1, [r5, #4]
   89ada:	890b      	ldrh	r3, [r1, #8]
   89adc:	b14b      	cbz	r3, 89af2 <tcp_receive+0x68e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
   89ade:	4b40      	ldr	r3, [pc, #256]	; (89be0 <tcp_receive+0x77c>)
   89ae0:	6818      	ldr	r0, [r3, #0]
   89ae2:	b110      	cbz	r0, 89aea <tcp_receive+0x686>
              pbuf_cat(recv_data, cseg->p);
   89ae4:	4b40      	ldr	r3, [pc, #256]	; (89be8 <tcp_receive+0x784>)
   89ae6:	4798      	blx	r3
   89ae8:	e001      	b.n	89aee <tcp_receive+0x68a>
            } else {
              recv_data = cseg->p;
   89aea:	4b3d      	ldr	r3, [pc, #244]	; (89be0 <tcp_receive+0x77c>)
   89aec:	6019      	str	r1, [r3, #0]
            }
            cseg->p = NULL;
   89aee:	2300      	movs	r3, #0
   89af0:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
   89af2:	68eb      	ldr	r3, [r5, #12]
   89af4:	8998      	ldrh	r0, [r3, #12]
   89af6:	47b0      	blx	r6
   89af8:	f010 0f01 	tst.w	r0, #1
   89afc:	d009      	beq.n	89b12 <tcp_receive+0x6ae>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
   89afe:	4b39      	ldr	r3, [pc, #228]	; (89be4 <tcp_receive+0x780>)
   89b00:	781a      	ldrb	r2, [r3, #0]
   89b02:	f042 0220 	orr.w	r2, r2, #32
   89b06:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
   89b08:	7c23      	ldrb	r3, [r4, #16]
   89b0a:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
   89b0c:	bf04      	itt	eq
   89b0e:	2307      	moveq	r3, #7
   89b10:	7423      	strbeq	r3, [r4, #16]
            } 
          }

          pcb->ooseq = cseg->next;
   89b12:	682b      	ldr	r3, [r5, #0]
   89b14:	67e3      	str	r3, [r4, #124]	; 0x7c
          tcp_seg_free(cseg);
   89b16:	4628      	mov	r0, r5
   89b18:	4b2b      	ldr	r3, [pc, #172]	; (89bc8 <tcp_receive+0x764>)
   89b1a:	4798      	blx	r3
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
   89b1c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
   89b1e:	b125      	cbz	r5, 89b2a <tcp_receive+0x6c6>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
   89b20:	68eb      	ldr	r3, [r5, #12]
   89b22:	685f      	ldr	r7, [r3, #4]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
   89b24:	6a62      	ldr	r2, [r4, #36]	; 0x24
   89b26:	4297      	cmp	r7, r2
   89b28:	d0ab      	beq.n	89a82 <tcp_receive+0x61e>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
   89b2a:	f894 3020 	ldrb.w	r3, [r4, #32]
   89b2e:	f013 0f01 	tst.w	r3, #1
   89b32:	bf1a      	itte	ne
   89b34:	f023 0301 	bicne.w	r3, r3, #1
   89b38:	f043 0302 	orrne.w	r3, r3, #2
   89b3c:	f043 0301 	orreq.w	r3, r3, #1
   89b40:	f884 3020 	strb.w	r3, [r4, #32]
   89b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
   89b48:	4620      	mov	r0, r4
   89b4a:	4b28      	ldr	r3, [pc, #160]	; (89bec <tcp_receive+0x788>)
   89b4c:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
   89b4e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
   89b50:	b92d      	cbnz	r5, 89b5e <tcp_receive+0x6fa>
          pcb->ooseq = tcp_seg_copy(&inseg);
   89b52:	481b      	ldr	r0, [pc, #108]	; (89bc0 <tcp_receive+0x75c>)
   89b54:	4b26      	ldr	r3, [pc, #152]	; (89bf0 <tcp_receive+0x78c>)
   89b56:	4798      	blx	r3
   89b58:	67e0      	str	r0, [r4, #124]	; 0x7c
   89b5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
   89b5e:	4b1e      	ldr	r3, [pc, #120]	; (89bd8 <tcp_receive+0x774>)
   89b60:	681b      	ldr	r3, [r3, #0]
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
   89b62:	f103 3cff 	add.w	ip, r3, #4294967295
   89b66:	1c5f      	adds	r7, r3, #1
   89b68:	2600      	movs	r6, #0
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
   89b6a:	68e9      	ldr	r1, [r5, #12]
   89b6c:	684a      	ldr	r2, [r1, #4]
   89b6e:	429a      	cmp	r2, r3
   89b70:	d116      	bne.n	89ba0 <tcp_receive+0x73c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
   89b72:	4b13      	ldr	r3, [pc, #76]	; (89bc0 <tcp_receive+0x75c>)
   89b74:	891a      	ldrh	r2, [r3, #8]
   89b76:	892b      	ldrh	r3, [r5, #8]
   89b78:	429a      	cmp	r2, r3
   89b7a:	f240 80e8 	bls.w	89d4e <tcp_receive+0x8ea>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
   89b7e:	4810      	ldr	r0, [pc, #64]	; (89bc0 <tcp_receive+0x75c>)
   89b80:	4b1b      	ldr	r3, [pc, #108]	; (89bf0 <tcp_receive+0x78c>)
   89b82:	4798      	blx	r3
                if (cseg != NULL) {
   89b84:	4603      	mov	r3, r0
   89b86:	2800      	cmp	r0, #0
   89b88:	f000 80e1 	beq.w	89d4e <tcp_receive+0x8ea>
                  if (prev != NULL) {
   89b8c:	b10e      	cbz	r6, 89b92 <tcp_receive+0x72e>
                    prev->next = cseg;
   89b8e:	6030      	str	r0, [r6, #0]
   89b90:	e000      	b.n	89b94 <tcp_receive+0x730>
                  } else {
                    pcb->ooseq = cseg;
   89b92:	67e0      	str	r0, [r4, #124]	; 0x7c
                  }
                  tcp_oos_insert_segment(cseg, next);
   89b94:	4618      	mov	r0, r3
   89b96:	4629      	mov	r1, r5
   89b98:	4b16      	ldr	r3, [pc, #88]	; (89bf4 <tcp_receive+0x790>)
   89b9a:	4798      	blx	r3
   89b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
   89ba0:	bb56      	cbnz	r6, 89bf8 <tcp_receive+0x794>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
   89ba2:	1a98      	subs	r0, r3, r2
   89ba4:	2800      	cmp	r0, #0
   89ba6:	da4d      	bge.n	89c44 <tcp_receive+0x7e0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
   89ba8:	4805      	ldr	r0, [pc, #20]	; (89bc0 <tcp_receive+0x75c>)
   89baa:	4b11      	ldr	r3, [pc, #68]	; (89bf0 <tcp_receive+0x78c>)
   89bac:	4798      	blx	r3
                  if (cseg != NULL) {
   89bae:	2800      	cmp	r0, #0
   89bb0:	f000 80cd 	beq.w	89d4e <tcp_receive+0x8ea>
                    pcb->ooseq = cseg;
   89bb4:	67e0      	str	r0, [r4, #124]	; 0x7c
                    tcp_oos_insert_segment(cseg, next);
   89bb6:	4629      	mov	r1, r5
   89bb8:	4b0e      	ldr	r3, [pc, #56]	; (89bf4 <tcp_receive+0x790>)
   89bba:	4798      	blx	r3
   89bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89bc0:	200759e4 	.word	0x200759e4
   89bc4:	000864d1 	.word	0x000864d1
   89bc8:	000888cd 	.word	0x000888cd
   89bcc:	000864dd 	.word	0x000864dd
   89bd0:	00088249 	.word	0x00088249
   89bd4:	200759d0 	.word	0x200759d0
   89bd8:	200759cc 	.word	0x200759cc
   89bdc:	0008883d 	.word	0x0008883d
   89be0:	200759dc 	.word	0x200759dc
   89be4:	200759d9 	.word	0x200759d9
   89be8:	000882f5 	.word	0x000882f5
   89bec:	0008b019 	.word	0x0008b019
   89bf0:	0008890d 	.word	0x0008890d
   89bf4:	000893c1 	.word	0x000893c1
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
   89bf8:	68f0      	ldr	r0, [r6, #12]
   89bfa:	6840      	ldr	r0, [r0, #4]
   89bfc:	ebc0 000c 	rsb	r0, r0, ip
   89c00:	2800      	cmp	r0, #0
   89c02:	db1f      	blt.n	89c44 <tcp_receive+0x7e0>
   89c04:	1ab8      	subs	r0, r7, r2
   89c06:	2800      	cmp	r0, #0
   89c08:	dc1c      	bgt.n	89c44 <tcp_receive+0x7e0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
   89c0a:	4852      	ldr	r0, [pc, #328]	; (89d54 <tcp_receive+0x8f0>)
   89c0c:	4b52      	ldr	r3, [pc, #328]	; (89d58 <tcp_receive+0x8f4>)
   89c0e:	4798      	blx	r3
                  if (cseg != NULL) {
   89c10:	4604      	mov	r4, r0
   89c12:	2800      	cmp	r0, #0
   89c14:	f000 809b 	beq.w	89d4e <tcp_receive+0x8ea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
   89c18:	68f3      	ldr	r3, [r6, #12]
   89c1a:	685b      	ldr	r3, [r3, #4]
   89c1c:	4a4f      	ldr	r2, [pc, #316]	; (89d5c <tcp_receive+0x8f8>)
   89c1e:	6812      	ldr	r2, [r2, #0]
   89c20:	8931      	ldrh	r1, [r6, #8]
   89c22:	1a89      	subs	r1, r1, r2
   89c24:	4419      	add	r1, r3
   89c26:	2900      	cmp	r1, #0
   89c28:	dd05      	ble.n	89c36 <tcp_receive+0x7d2>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
   89c2a:	1ad3      	subs	r3, r2, r3
   89c2c:	b299      	uxth	r1, r3
   89c2e:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
   89c30:	6870      	ldr	r0, [r6, #4]
   89c32:	4b4b      	ldr	r3, [pc, #300]	; (89d60 <tcp_receive+0x8fc>)
   89c34:	4798      	blx	r3
                    }
                    prev->next = cseg;
   89c36:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
   89c38:	4620      	mov	r0, r4
   89c3a:	4629      	mov	r1, r5
   89c3c:	4b49      	ldr	r3, [pc, #292]	; (89d64 <tcp_receive+0x900>)
   89c3e:	4798      	blx	r3
   89c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
   89c44:	6828      	ldr	r0, [r5, #0]
   89c46:	2800      	cmp	r0, #0
   89c48:	d160      	bne.n	89d0c <tcp_receive+0x8a8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
   89c4a:	1a9b      	subs	r3, r3, r2
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
   89c4c:	2b00      	cmp	r3, #0
   89c4e:	dd7e      	ble.n	89d4e <tcp_receive+0x8ea>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
   89c50:	8988      	ldrh	r0, [r1, #12]
   89c52:	4b45      	ldr	r3, [pc, #276]	; (89d68 <tcp_receive+0x904>)
   89c54:	4798      	blx	r3
   89c56:	f010 0f01 	tst.w	r0, #1
   89c5a:	d178      	bne.n	89d4e <tcp_receive+0x8ea>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
   89c5c:	483d      	ldr	r0, [pc, #244]	; (89d54 <tcp_receive+0x8f0>)
   89c5e:	4b3e      	ldr	r3, [pc, #248]	; (89d58 <tcp_receive+0x8f4>)
   89c60:	4798      	blx	r3
   89c62:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
   89c64:	2800      	cmp	r0, #0
   89c66:	d072      	beq.n	89d4e <tcp_receive+0x8ea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
   89c68:	68eb      	ldr	r3, [r5, #12]
   89c6a:	685b      	ldr	r3, [r3, #4]
   89c6c:	4a3b      	ldr	r2, [pc, #236]	; (89d5c <tcp_receive+0x8f8>)
   89c6e:	6812      	ldr	r2, [r2, #0]
   89c70:	8929      	ldrh	r1, [r5, #8]
   89c72:	1a89      	subs	r1, r1, r2
   89c74:	4419      	add	r1, r3
   89c76:	2900      	cmp	r1, #0
   89c78:	dd05      	ble.n	89c86 <tcp_receive+0x822>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
   89c7a:	1ad3      	subs	r3, r2, r3
   89c7c:	b299      	uxth	r1, r3
   89c7e:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
   89c80:	6868      	ldr	r0, [r5, #4]
   89c82:	4b37      	ldr	r3, [pc, #220]	; (89d60 <tcp_receive+0x8fc>)
   89c84:	4798      	blx	r3
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
   89c86:	4b39      	ldr	r3, [pc, #228]	; (89d6c <tcp_receive+0x908>)
   89c88:	881a      	ldrh	r2, [r3, #0]
   89c8a:	4b34      	ldr	r3, [pc, #208]	; (89d5c <tcp_receive+0x8f8>)
   89c8c:	681b      	ldr	r3, [r3, #0]
   89c8e:	441a      	add	r2, r3
   89c90:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   89c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   89c94:	440b      	add	r3, r1
   89c96:	429a      	cmp	r2, r3
   89c98:	d959      	bls.n	89d4e <tcp_receive+0x8ea>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
   89c9a:	682b      	ldr	r3, [r5, #0]
   89c9c:	68db      	ldr	r3, [r3, #12]
   89c9e:	8998      	ldrh	r0, [r3, #12]
   89ca0:	4b31      	ldr	r3, [pc, #196]	; (89d68 <tcp_receive+0x904>)
   89ca2:	4798      	blx	r3
   89ca4:	f010 0f01 	tst.w	r0, #1
   89ca8:	d00d      	beq.n	89cc6 <tcp_receive+0x862>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
   89caa:	682b      	ldr	r3, [r5, #0]
   89cac:	68de      	ldr	r6, [r3, #12]
   89cae:	89b7      	ldrh	r7, [r6, #12]
   89cb0:	4638      	mov	r0, r7
   89cb2:	4b2d      	ldr	r3, [pc, #180]	; (89d68 <tcp_receive+0x904>)
   89cb4:	4798      	blx	r3
   89cb6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   89cba:	4b2d      	ldr	r3, [pc, #180]	; (89d70 <tcp_receive+0x90c>)
   89cbc:	4798      	blx	r3
   89cbe:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
   89cc2:	4338      	orrs	r0, r7
   89cc4:	81b0      	strh	r0, [r6, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
   89cc6:	682b      	ldr	r3, [r5, #0]
   89cc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   89cca:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   89ccc:	4411      	add	r1, r2
   89cce:	4e23      	ldr	r6, [pc, #140]	; (89d5c <tcp_receive+0x8f8>)
   89cd0:	6832      	ldr	r2, [r6, #0]
   89cd2:	1a8a      	subs	r2, r1, r2
   89cd4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
   89cd6:	682b      	ldr	r3, [r5, #0]
   89cd8:	6858      	ldr	r0, [r3, #4]
   89cda:	8919      	ldrh	r1, [r3, #8]
   89cdc:	4b20      	ldr	r3, [pc, #128]	; (89d60 <tcp_receive+0x8fc>)
   89cde:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
   89ce0:	682b      	ldr	r3, [r5, #0]
   89ce2:	891d      	ldrh	r5, [r3, #8]
   89ce4:	68db      	ldr	r3, [r3, #12]
   89ce6:	8998      	ldrh	r0, [r3, #12]
   89ce8:	4b1f      	ldr	r3, [pc, #124]	; (89d68 <tcp_receive+0x904>)
   89cea:	4798      	blx	r3
   89cec:	f010 0003 	ands.w	r0, r0, #3
   89cf0:	bf18      	it	ne
   89cf2:	2001      	movne	r0, #1
   89cf4:	182b      	adds	r3, r5, r0
   89cf6:	b29b      	uxth	r3, r3
   89cf8:	4a1c      	ldr	r2, [pc, #112]	; (89d6c <tcp_receive+0x908>)
   89cfa:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
   89cfc:	6832      	ldr	r2, [r6, #0]
   89cfe:	4413      	add	r3, r2
   89d00:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   89d02:	6a62      	ldr	r2, [r4, #36]	; 0x24
   89d04:	440a      	add	r2, r1
   89d06:	4293      	cmp	r3, r2
   89d08:	d021      	beq.n	89d4e <tcp_receive+0x8ea>
   89d0a:	e7fe      	b.n	89d0a <tcp_receive+0x8a6>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
   89d0c:	462e      	mov	r6, r5
   89d0e:	4605      	mov	r5, r0
   89d10:	e72b      	b.n	89b6a <tcp_receive+0x706>
#endif /* TCP_QUEUE_OOSEQ */

      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
   89d12:	4620      	mov	r0, r4
   89d14:	4b17      	ldr	r3, [pc, #92]	; (89d74 <tcp_receive+0x910>)
   89d16:	4798      	blx	r3
   89d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
   89d1c:	4b0f      	ldr	r3, [pc, #60]	; (89d5c <tcp_receive+0x8f8>)
   89d1e:	681a      	ldr	r2, [r3, #0]
   89d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   89d22:	1ad1      	subs	r1, r2, r3
   89d24:	2900      	cmp	r1, #0
   89d26:	db05      	blt.n	89d34 <tcp_receive+0x8d0>
   89d28:	3201      	adds	r2, #1
   89d2a:	1ad3      	subs	r3, r2, r3
   89d2c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   89d2e:	1a9b      	subs	r3, r3, r2
   89d30:	2b00      	cmp	r3, #0
   89d32:	dd0c      	ble.n	89d4e <tcp_receive+0x8ea>
      tcp_ack_now(pcb);
   89d34:	f894 3020 	ldrb.w	r3, [r4, #32]
   89d38:	f043 0302 	orr.w	r3, r3, #2
   89d3c:	f884 3020 	strb.w	r3, [r4, #32]
   89d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
   89d44:	2300      	movs	r3, #0
   89d46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   89d4a:	f7ff bbf7 	b.w	8953c <tcp_receive+0xd8>
   89d4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d52:	bf00      	nop
   89d54:	200759e4 	.word	0x200759e4
   89d58:	0008890d 	.word	0x0008890d
   89d5c:	200759cc 	.word	0x200759cc
   89d60:	00088249 	.word	0x00088249
   89d64:	000893c1 	.word	0x000893c1
   89d68:	000864dd 	.word	0x000864dd
   89d6c:	200759d0 	.word	0x200759d0
   89d70:	000864d1 	.word	0x000864d1
   89d74:	0008b019 	.word	0x0008b019

00089d78 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
   89d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   89d7c:	b083      	sub	sp, #12
   89d7e:	4605      	mov	r5, r0
   89d80:	4688      	mov	r8, r1
  u8_t hdrlen;
  err_t err;

  PERF_START;

  TCP_STATS_INC(tcp.recv);
   89d82:	4b9b      	ldr	r3, [pc, #620]	; (89ff0 <tcp_input+0x278>)
   89d84:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
   89d88:	3201      	adds	r2, #1
   89d8a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
   89d8e:	6844      	ldr	r4, [r0, #4]
   89d90:	4f98      	ldr	r7, [pc, #608]	; (89ff4 <tcp_input+0x27c>)
   89d92:	603c      	str	r4, [r7, #0]
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
   89d94:	8820      	ldrh	r0, [r4, #0]
   89d96:	4e98      	ldr	r6, [pc, #608]	; (89ff8 <tcp_input+0x280>)
   89d98:	47b0      	blx	r6
   89d9a:	f3c0 2003 	ubfx	r0, r0, #8, #4
   89d9e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   89da2:	4b96      	ldr	r3, [pc, #600]	; (89ffc <tcp_input+0x284>)
   89da4:	601c      	str	r4, [r3, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
   89da6:	683b      	ldr	r3, [r7, #0]
   89da8:	8818      	ldrh	r0, [r3, #0]
   89daa:	47b0      	blx	r6
   89dac:	f3c0 2003 	ubfx	r0, r0, #8, #4
   89db0:	0081      	lsls	r1, r0, #2
   89db2:	4628      	mov	r0, r5
   89db4:	4249      	negs	r1, r1
   89db6:	4b92      	ldr	r3, [pc, #584]	; (8a000 <tcp_input+0x288>)
   89db8:	4798      	blx	r3
   89dba:	b910      	cbnz	r0, 89dc2 <tcp_input+0x4a>
   89dbc:	892b      	ldrh	r3, [r5, #8]
   89dbe:	2b13      	cmp	r3, #19
   89dc0:	d80f      	bhi.n	89de2 <tcp_input+0x6a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
   89dc2:	4b8b      	ldr	r3, [pc, #556]	; (89ff0 <tcp_input+0x278>)
   89dc4:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
   89dc8:	3201      	adds	r2, #1
   89dca:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    TCP_STATS_INC(tcp.drop);
   89dce:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
   89dd2:	3201      	adds	r2, #1
   89dd4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    snmp_inc_tcpinerrs();
    pbuf_free(p);
   89dd8:	4628      	mov	r0, r5
   89dda:	4b8a      	ldr	r3, [pc, #552]	; (8a004 <tcp_input+0x28c>)
   89ddc:	4798      	blx	r3
    return;
   89dde:	f000 bd4d 	b.w	8a87c <tcp_input+0xb04>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
   89de2:	4b89      	ldr	r3, [pc, #548]	; (8a008 <tcp_input+0x290>)
   89de4:	6818      	ldr	r0, [r3, #0]
   89de6:	4641      	mov	r1, r8
   89de8:	4b88      	ldr	r3, [pc, #544]	; (8a00c <tcp_input+0x294>)
   89dea:	4798      	blx	r3
   89dec:	b928      	cbnz	r0, 89dfa <tcp_input+0x82>
      ip_addr_ismulticast(&current_iphdr_dest)) {
   89dee:	4b86      	ldr	r3, [pc, #536]	; (8a008 <tcp_input+0x290>)
   89df0:	681b      	ldr	r3, [r3, #0]
   89df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    pbuf_free(p);
    return;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
   89df6:	2be0      	cmp	r3, #224	; 0xe0
   89df8:	d10f      	bne.n	89e1a <tcp_input+0xa2>
      ip_addr_ismulticast(&current_iphdr_dest)) {
    TCP_STATS_INC(tcp.proterr);
   89dfa:	4b7d      	ldr	r3, [pc, #500]	; (89ff0 <tcp_input+0x278>)
   89dfc:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
   89e00:	3201      	adds	r2, #1
   89e02:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    TCP_STATS_INC(tcp.drop);
   89e06:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
   89e0a:	3201      	adds	r2, #1
   89e0c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    snmp_inc_tcpinerrs();
    pbuf_free(p);
   89e10:	4628      	mov	r0, r5
   89e12:	4b7c      	ldr	r3, [pc, #496]	; (8a004 <tcp_input+0x28c>)
   89e14:	4798      	blx	r3
    return;
   89e16:	f000 bd31 	b.w	8a87c <tcp_input+0xb04>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
   89e1a:	892b      	ldrh	r3, [r5, #8]
   89e1c:	9300      	str	r3, [sp, #0]
   89e1e:	4628      	mov	r0, r5
   89e20:	497b      	ldr	r1, [pc, #492]	; (8a010 <tcp_input+0x298>)
   89e22:	4a79      	ldr	r2, [pc, #484]	; (8a008 <tcp_input+0x290>)
   89e24:	2306      	movs	r3, #6
   89e26:	4c7b      	ldr	r4, [pc, #492]	; (8a014 <tcp_input+0x29c>)
   89e28:	47a0      	blx	r4
   89e2a:	b198      	cbz	r0, 89e54 <tcp_input+0xdc>
      IP_PROTO_TCP, p->tot_len) != 0) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
        inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
   89e2c:	4b73      	ldr	r3, [pc, #460]	; (89ffc <tcp_input+0x284>)
   89e2e:	6818      	ldr	r0, [r3, #0]
   89e30:	4b79      	ldr	r3, [pc, #484]	; (8a018 <tcp_input+0x2a0>)
   89e32:	4798      	blx	r3
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
   89e34:	4b6e      	ldr	r3, [pc, #440]	; (89ff0 <tcp_input+0x278>)
   89e36:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
   89e3a:	3201      	adds	r2, #1
   89e3c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
    TCP_STATS_INC(tcp.drop);
   89e40:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
   89e44:	3201      	adds	r2, #1
   89e46:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    snmp_inc_tcpinerrs();
    pbuf_free(p);
   89e4a:	4628      	mov	r0, r5
   89e4c:	4b6d      	ldr	r3, [pc, #436]	; (8a004 <tcp_input+0x28c>)
   89e4e:	4798      	blx	r3
    return;
   89e50:	f000 bd14 	b.w	8a87c <tcp_input+0xb04>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
   89e54:	4b69      	ldr	r3, [pc, #420]	; (89ffc <tcp_input+0x284>)
   89e56:	681b      	ldr	r3, [r3, #0]
   89e58:	8998      	ldrh	r0, [r3, #12]
   89e5a:	4b67      	ldr	r3, [pc, #412]	; (89ff8 <tcp_input+0x280>)
   89e5c:	4798      	blx	r3
   89e5e:	0b00      	lsrs	r0, r0, #12
  if(pbuf_header(p, -(hdrlen * 4))){
   89e60:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
   89e64:	0081      	lsls	r1, r0, #2
   89e66:	4628      	mov	r0, r5
   89e68:	b209      	sxth	r1, r1
   89e6a:	4b65      	ldr	r3, [pc, #404]	; (8a000 <tcp_input+0x288>)
   89e6c:	4798      	blx	r3
   89e6e:	b178      	cbz	r0, 89e90 <tcp_input+0x118>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
   89e70:	4b5f      	ldr	r3, [pc, #380]	; (89ff0 <tcp_input+0x278>)
   89e72:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
   89e76:	3201      	adds	r2, #1
   89e78:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    TCP_STATS_INC(tcp.drop);
   89e7c:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
   89e80:	3201      	adds	r2, #1
   89e82:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    snmp_inc_tcpinerrs();
    pbuf_free(p);
   89e86:	4628      	mov	r0, r5
   89e88:	4b5e      	ldr	r3, [pc, #376]	; (8a004 <tcp_input+0x28c>)
   89e8a:	4798      	blx	r3
    return;
   89e8c:	f000 bcf6 	b.w	8a87c <tcp_input+0xb04>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
   89e90:	4c5a      	ldr	r4, [pc, #360]	; (89ffc <tcp_input+0x284>)
   89e92:	6827      	ldr	r7, [r4, #0]
   89e94:	8838      	ldrh	r0, [r7, #0]
   89e96:	4e58      	ldr	r6, [pc, #352]	; (89ff8 <tcp_input+0x280>)
   89e98:	47b0      	blx	r6
   89e9a:	8038      	strh	r0, [r7, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
   89e9c:	6827      	ldr	r7, [r4, #0]
   89e9e:	8878      	ldrh	r0, [r7, #2]
   89ea0:	47b0      	blx	r6
   89ea2:	8078      	strh	r0, [r7, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
   89ea4:	6827      	ldr	r7, [r4, #0]
   89ea6:	6878      	ldr	r0, [r7, #4]
   89ea8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8a038 <tcp_input+0x2c0>
   89eac:	47c0      	blx	r8
   89eae:	6078      	str	r0, [r7, #4]
   89eb0:	4b5a      	ldr	r3, [pc, #360]	; (8a01c <tcp_input+0x2a4>)
   89eb2:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
   89eb4:	6827      	ldr	r7, [r4, #0]
   89eb6:	68b8      	ldr	r0, [r7, #8]
   89eb8:	47c0      	blx	r8
   89eba:	60b8      	str	r0, [r7, #8]
   89ebc:	4b58      	ldr	r3, [pc, #352]	; (8a020 <tcp_input+0x2a8>)
   89ebe:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
   89ec0:	6827      	ldr	r7, [r4, #0]
   89ec2:	89f8      	ldrh	r0, [r7, #14]
   89ec4:	47b0      	blx	r6
   89ec6:	81f8      	strh	r0, [r7, #14]

  flags = TCPH_FLAGS(tcphdr);
   89ec8:	6823      	ldr	r3, [r4, #0]
   89eca:	8998      	ldrh	r0, [r3, #12]
   89ecc:	47b0      	blx	r6
   89ece:	b2c0      	uxtb	r0, r0
   89ed0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
   89ed4:	4b53      	ldr	r3, [pc, #332]	; (8a024 <tcp_input+0x2ac>)
   89ed6:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
   89ed8:	f010 0303 	ands.w	r3, r0, #3
   89edc:	bf18      	it	ne
   89ede:	2301      	movne	r3, #1
   89ee0:	892a      	ldrh	r2, [r5, #8]
   89ee2:	4413      	add	r3, r2
   89ee4:	b299      	uxth	r1, r3
   89ee6:	4b50      	ldr	r3, [pc, #320]	; (8a028 <tcp_input+0x2b0>)
   89ee8:	8019      	strh	r1, [r3, #0]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   89eea:	4b50      	ldr	r3, [pc, #320]	; (8a02c <tcp_input+0x2b4>)
   89eec:	681e      	ldr	r6, [r3, #0]
   89eee:	2e00      	cmp	r6, #0
   89ef0:	d042      	beq.n	89f78 <tcp_input+0x200>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
   89ef2:	7c33      	ldrb	r3, [r6, #16]
   89ef4:	b133      	cbz	r3, 89f04 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
   89ef6:	2b0a      	cmp	r3, #10
   89ef8:	d007      	beq.n	89f0a <tcp_input+0x192>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
   89efa:	2b01      	cmp	r3, #1
   89efc:	d10c      	bne.n	89f18 <tcp_input+0x1a0>
   89efe:	e00a      	b.n	89f16 <tcp_input+0x19e>
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
   89f00:	7c1a      	ldrb	r2, [r3, #16]
   89f02:	b902      	cbnz	r2, 89f06 <tcp_input+0x18e>
   89f04:	e7fe      	b.n	89f04 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
   89f06:	2a0a      	cmp	r2, #10
   89f08:	d100      	bne.n	89f0c <tcp_input+0x194>
   89f0a:	e7fe      	b.n	89f0a <tcp_input+0x192>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
   89f0c:	2a01      	cmp	r2, #1
   89f0e:	d002      	beq.n	89f16 <tcp_input+0x19e>
   89f10:	4622      	mov	r2, r4
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   89f12:	461c      	mov	r4, r3
   89f14:	e00d      	b.n	89f32 <tcp_input+0x1ba>
   89f16:	e7fe      	b.n	89f16 <tcp_input+0x19e>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
   89f18:	4b38      	ldr	r3, [pc, #224]	; (89ffc <tcp_input+0x284>)
   89f1a:	f8d3 e000 	ldr.w	lr, [r3]
   89f1e:	f8be 7000 	ldrh.w	r7, [lr]
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
   89f22:	4b3b      	ldr	r3, [pc, #236]	; (8a010 <tcp_input+0x298>)
   89f24:	f8d3 8000 	ldr.w	r8, [r3]
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
   89f28:	4b37      	ldr	r3, [pc, #220]	; (8a008 <tcp_input+0x290>)
   89f2a:	f8d3 c000 	ldr.w	ip, [r3]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   89f2e:	4634      	mov	r4, r6
  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
   89f30:	2200      	movs	r2, #0
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
   89f32:	8be3      	ldrh	r3, [r4, #30]
   89f34:	42bb      	cmp	r3, r7
   89f36:	d118      	bne.n	89f6a <tcp_input+0x1f2>
   89f38:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   89f3c:	f8be 3002 	ldrh.w	r3, [lr, #2]
   89f40:	4599      	cmp	r9, r3
   89f42:	d112      	bne.n	89f6a <tcp_input+0x1f2>
       pcb->local_port == tcphdr->dest &&
   89f44:	6863      	ldr	r3, [r4, #4]
   89f46:	4543      	cmp	r3, r8
   89f48:	d10f      	bne.n	89f6a <tcp_input+0x1f2>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
   89f4a:	6823      	ldr	r3, [r4, #0]
   89f4c:	4563      	cmp	r3, ip
   89f4e:	d10c      	bne.n	89f6a <tcp_input+0x1f2>
   89f50:	4623      	mov	r3, r4
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
   89f52:	68e7      	ldr	r7, [r4, #12]
   89f54:	42a7      	cmp	r7, r4
   89f56:	d100      	bne.n	89f5a <tcp_input+0x1e2>
   89f58:	e7fe      	b.n	89f58 <tcp_input+0x1e0>
      if (prev != NULL) {
   89f5a:	b152      	cbz	r2, 89f72 <tcp_input+0x1fa>
        prev->next = pcb->next;
   89f5c:	60d7      	str	r7, [r2, #12]
        pcb->next = tcp_active_pcbs;
   89f5e:	60e6      	str	r6, [r4, #12]
        tcp_active_pcbs = pcb;
   89f60:	4a32      	ldr	r2, [pc, #200]	; (8a02c <tcp_input+0x2b4>)
   89f62:	6014      	str	r4, [r2, #0]
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
   89f64:	42a6      	cmp	r6, r4
   89f66:	d104      	bne.n	89f72 <tcp_input+0x1fa>
   89f68:	e7fe      	b.n	89f68 <tcp_input+0x1f0>
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   89f6a:	68e3      	ldr	r3, [r4, #12]
   89f6c:	2b00      	cmp	r3, #0
   89f6e:	d1c7      	bne.n	89f00 <tcp_input+0x188>
   89f70:	e002      	b.n	89f78 <tcp_input+0x200>
      break;
    }
    prev = pcb;
  }

  if (pcb == NULL) {
   89f72:	2b00      	cmp	r3, #0
   89f74:	f040 8105 	bne.w	8a182 <tcp_input+0x40a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   89f78:	4b2d      	ldr	r3, [pc, #180]	; (8a030 <tcp_input+0x2b8>)
   89f7a:	681c      	ldr	r4, [r3, #0]
   89f7c:	2c00      	cmp	r4, #0
   89f7e:	d075      	beq.n	8a06c <tcp_input+0x2f4>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
   89f80:	7c23      	ldrb	r3, [r4, #16]
   89f82:	2b0a      	cmp	r3, #10
   89f84:	d004      	beq.n	89f90 <tcp_input+0x218>
   89f86:	e002      	b.n	89f8e <tcp_input+0x216>
   89f88:	7c22      	ldrb	r2, [r4, #16]
   89f8a:	2a0a      	cmp	r2, #10
   89f8c:	d009      	beq.n	89fa2 <tcp_input+0x22a>
   89f8e:	e7fe      	b.n	89f8e <tcp_input+0x216>
      if (pcb->remote_port == tcphdr->src &&
   89f90:	4b1a      	ldr	r3, [pc, #104]	; (89ffc <tcp_input+0x284>)
   89f92:	681b      	ldr	r3, [r3, #0]
   89f94:	881e      	ldrh	r6, [r3, #0]
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
   89f96:	4a1e      	ldr	r2, [pc, #120]	; (8a010 <tcp_input+0x298>)
   89f98:	f8d2 c000 	ldr.w	ip, [r2]
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
   89f9c:	4a1a      	ldr	r2, [pc, #104]	; (8a008 <tcp_input+0x290>)
   89f9e:	f8d2 e000 	ldr.w	lr, [r2]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
   89fa2:	8be2      	ldrh	r2, [r4, #30]
   89fa4:	42b2      	cmp	r2, r6
   89fa6:	d15e      	bne.n	8a066 <tcp_input+0x2ee>
         pcb->local_port == tcphdr->dest &&
   89fa8:	8ba7      	ldrh	r7, [r4, #28]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
   89faa:	885a      	ldrh	r2, [r3, #2]
   89fac:	42ba      	cmp	r2, r7
   89fae:	d15a      	bne.n	8a066 <tcp_input+0x2ee>
         pcb->local_port == tcphdr->dest &&
   89fb0:	6862      	ldr	r2, [r4, #4]
   89fb2:	4562      	cmp	r2, ip
   89fb4:	d157      	bne.n	8a066 <tcp_input+0x2ee>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
   89fb6:	6822      	ldr	r2, [r4, #0]
   89fb8:	4572      	cmp	r2, lr
   89fba:	d154      	bne.n	8a066 <tcp_input+0x2ee>
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
   89fbc:	f010 0f04 	tst.w	r0, #4
   89fc0:	d14c      	bne.n	8a05c <tcp_input+0x2e4>
    return ERR_OK;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
   89fc2:	f010 0f02 	tst.w	r0, #2
   89fc6:	d039      	beq.n	8a03c <tcp_input+0x2c4>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
   89fc8:	4b14      	ldr	r3, [pc, #80]	; (8a01c <tcp_input+0x2a4>)
   89fca:	681b      	ldr	r3, [r3, #0]
   89fcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   89fce:	1a9a      	subs	r2, r3, r2
   89fd0:	d43a      	bmi.n	8a048 <tcp_input+0x2d0>
   89fd2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   89fd4:	1a12      	subs	r2, r2, r0
   89fd6:	2a00      	cmp	r2, #0
   89fd8:	dc36      	bgt.n	8a048 <tcp_input+0x2d0>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
   89fda:	4a11      	ldr	r2, [pc, #68]	; (8a020 <tcp_input+0x2a8>)
   89fdc:	6810      	ldr	r0, [r2, #0]
   89fde:	9700      	str	r7, [sp, #0]
   89fe0:	9601      	str	r6, [sp, #4]
   89fe2:	4419      	add	r1, r3
   89fe4:	4a08      	ldr	r2, [pc, #32]	; (8a008 <tcp_input+0x290>)
   89fe6:	4b0a      	ldr	r3, [pc, #40]	; (8a010 <tcp_input+0x298>)
   89fe8:	4c12      	ldr	r4, [pc, #72]	; (8a034 <tcp_input+0x2bc>)
   89fea:	47a0      	blx	r4
   89fec:	e036      	b.n	8a05c <tcp_input+0x2e4>
   89fee:	bf00      	nop
   89ff0:	20076788 	.word	0x20076788
   89ff4:	200759e0 	.word	0x200759e0
   89ff8:	000864dd 	.word	0x000864dd
   89ffc:	200759c8 	.word	0x200759c8
   8a000:	00087fd1 	.word	0x00087fd1
   8a004:	00088045 	.word	0x00088045
   8a008:	20075b64 	.word	0x20075b64
   8a00c:	00086d99 	.word	0x00086d99
   8a010:	20075b5c 	.word	0x20075b5c
   8a014:	0008688d 	.word	0x0008688d
   8a018:	00088d35 	.word	0x00088d35
   8a01c:	200759cc 	.word	0x200759cc
   8a020:	200759d4 	.word	0x200759d4
   8a024:	200759d8 	.word	0x200759d8
   8a028:	200759d0 	.word	0x200759d0
   8a02c:	200768d8 	.word	0x200768d8
   8a030:	200768ec 	.word	0x200768ec
   8a034:	0008b38d 	.word	0x0008b38d
   8a038:	00086501 	.word	0x00086501
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
    }
  } else if (flags & TCP_FIN) {
   8a03c:	f010 0f01 	tst.w	r0, #1
   8a040:	d002      	beq.n	8a048 <tcp_input+0x2d0>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
   8a042:	4b85      	ldr	r3, [pc, #532]	; (8a258 <tcp_input+0x4e0>)
   8a044:	681b      	ldr	r3, [r3, #0]
   8a046:	6323      	str	r3, [r4, #48]	; 0x30
  }

  if ((tcplen > 0))  {
   8a048:	b141      	cbz	r1, 8a05c <tcp_input+0x2e4>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
   8a04a:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a04e:	f043 0302 	orr.w	r3, r3, #2
   8a052:	f884 3020 	strb.w	r3, [r4, #32]
    return tcp_output(pcb);
   8a056:	4620      	mov	r0, r4
   8a058:	4b80      	ldr	r3, [pc, #512]	; (8a25c <tcp_input+0x4e4>)
   8a05a:	4798      	blx	r3
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
        pbuf_free(p);
   8a05c:	4628      	mov	r0, r5
   8a05e:	4b80      	ldr	r3, [pc, #512]	; (8a260 <tcp_input+0x4e8>)
   8a060:	4798      	blx	r3
        return;
   8a062:	f000 bc0b 	b.w	8a87c <tcp_input+0xb04>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   8a066:	68e4      	ldr	r4, [r4, #12]
   8a068:	2c00      	cmp	r4, #0
   8a06a:	d18d      	bne.n	89f88 <tcp_input+0x210>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   8a06c:	4b7d      	ldr	r3, [pc, #500]	; (8a264 <tcp_input+0x4ec>)
   8a06e:	681b      	ldr	r3, [r3, #0]
   8a070:	2b00      	cmp	r3, #0
   8a072:	f000 8083 	beq.w	8a17c <tcp_input+0x404>
      if (lpcb->local_port == tcphdr->dest) {
   8a076:	4a7c      	ldr	r2, [pc, #496]	; (8a268 <tcp_input+0x4f0>)
   8a078:	6812      	ldr	r2, [r2, #0]
   8a07a:	f8b2 c002 	ldrh.w	ip, [r2, #2]
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
   8a07e:	4a7b      	ldr	r2, [pc, #492]	; (8a26c <tcp_input+0x4f4>)
   8a080:	f8d2 e000 	ldr.w	lr, [r2]
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   8a084:	461e      	mov	r6, r3
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
   8a086:	2200      	movs	r2, #0
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      if (lpcb->local_port == tcphdr->dest) {
   8a088:	8bb7      	ldrh	r7, [r6, #28]
   8a08a:	4567      	cmp	r7, ip
   8a08c:	d104      	bne.n	8a098 <tcp_input+0x320>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
   8a08e:	6837      	ldr	r7, [r6, #0]
   8a090:	4577      	cmp	r7, lr
   8a092:	d007      	beq.n	8a0a4 <tcp_input+0x32c>
   8a094:	b136      	cbz	r6, 8a0a4 <tcp_input+0x32c>
            ip_addr_isany(&(lpcb->local_ip))) {
   8a096:	b12f      	cbz	r7, 8a0a4 <tcp_input+0x32c>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   8a098:	68f7      	ldr	r7, [r6, #12]
   8a09a:	2f00      	cmp	r7, #0
   8a09c:	d06e      	beq.n	8a17c <tcp_input+0x404>
   8a09e:	4632      	mov	r2, r6
   8a0a0:	463e      	mov	r6, r7
   8a0a2:	e7f1      	b.n	8a088 <tcp_input+0x310>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
   8a0a4:	2e00      	cmp	r6, #0
   8a0a6:	d069      	beq.n	8a17c <tcp_input+0x404>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
   8a0a8:	b122      	cbz	r2, 8a0b4 <tcp_input+0x33c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
   8a0aa:	68f4      	ldr	r4, [r6, #12]
   8a0ac:	60d4      	str	r4, [r2, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
   8a0ae:	60f3      	str	r3, [r6, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
   8a0b0:	4b6c      	ldr	r3, [pc, #432]	; (8a264 <tcp_input+0x4ec>)
   8a0b2:	601e      	str	r6, [r3, #0]
  struct tcp_pcb *npcb;
  err_t rc;

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
   8a0b4:	f010 0f10 	tst.w	r0, #16
   8a0b8:	d010      	beq.n	8a0dc <tcp_input+0x364>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno + 1, seqno + tcplen,
      ip_current_dest_addr(), ip_current_src_addr(),
      tcphdr->dest, tcphdr->src);
   8a0ba:	4b6b      	ldr	r3, [pc, #428]	; (8a268 <tcp_input+0x4f0>)
   8a0bc:	681b      	ldr	r3, [r3, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno + 1, seqno + tcplen,
   8a0be:	4a6c      	ldr	r2, [pc, #432]	; (8a270 <tcp_input+0x4f8>)
   8a0c0:	6810      	ldr	r0, [r2, #0]
   8a0c2:	4a6c      	ldr	r2, [pc, #432]	; (8a274 <tcp_input+0x4fc>)
   8a0c4:	6812      	ldr	r2, [r2, #0]
   8a0c6:	885c      	ldrh	r4, [r3, #2]
   8a0c8:	9400      	str	r4, [sp, #0]
   8a0ca:	881b      	ldrh	r3, [r3, #0]
   8a0cc:	9301      	str	r3, [sp, #4]
   8a0ce:	3001      	adds	r0, #1
   8a0d0:	4411      	add	r1, r2
   8a0d2:	4a66      	ldr	r2, [pc, #408]	; (8a26c <tcp_input+0x4f4>)
   8a0d4:	4b68      	ldr	r3, [pc, #416]	; (8a278 <tcp_input+0x500>)
   8a0d6:	4c69      	ldr	r4, [pc, #420]	; (8a27c <tcp_input+0x504>)
   8a0d8:	47a0      	blx	r4
   8a0da:	e04b      	b.n	8a174 <tcp_input+0x3fc>
      ip_current_dest_addr(), ip_current_src_addr(),
      tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
   8a0dc:	f010 0f02 	tst.w	r0, #2
   8a0e0:	d048      	beq.n	8a174 <tcp_input+0x3fc>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
   8a0e2:	7c70      	ldrb	r0, [r6, #17]
   8a0e4:	4b66      	ldr	r3, [pc, #408]	; (8a280 <tcp_input+0x508>)
   8a0e6:	4798      	blx	r3
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
   8a0e8:	4604      	mov	r4, r0
   8a0ea:	b930      	cbnz	r0, 8a0fa <tcp_input+0x382>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
   8a0ec:	4b65      	ldr	r3, [pc, #404]	; (8a284 <tcp_input+0x50c>)
   8a0ee:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
   8a0f2:	3201      	adds	r2, #1
   8a0f4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
   8a0f8:	e03c      	b.n	8a174 <tcp_input+0x3fc>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
   8a0fa:	4b5c      	ldr	r3, [pc, #368]	; (8a26c <tcp_input+0x4f4>)
   8a0fc:	681b      	ldr	r3, [r3, #0]
   8a0fe:	6003      	str	r3, [r0, #0]
    npcb->local_port = pcb->local_port;
   8a100:	8bb3      	ldrh	r3, [r6, #28]
   8a102:	8383      	strh	r3, [r0, #28]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
   8a104:	4b5c      	ldr	r3, [pc, #368]	; (8a278 <tcp_input+0x500>)
   8a106:	681b      	ldr	r3, [r3, #0]
   8a108:	6043      	str	r3, [r0, #4]
    npcb->remote_port = tcphdr->src;
   8a10a:	4b57      	ldr	r3, [pc, #348]	; (8a268 <tcp_input+0x4f0>)
   8a10c:	681a      	ldr	r2, [r3, #0]
   8a10e:	8813      	ldrh	r3, [r2, #0]
   8a110:	83c3      	strh	r3, [r0, #30]
    npcb->state = SYN_RCVD;
   8a112:	2303      	movs	r3, #3
   8a114:	7403      	strb	r3, [r0, #16]
    npcb->rcv_nxt = seqno + 1;
   8a116:	4b57      	ldr	r3, [pc, #348]	; (8a274 <tcp_input+0x4fc>)
   8a118:	681b      	ldr	r3, [r3, #0]
   8a11a:	1c59      	adds	r1, r3, #1
   8a11c:	6241      	str	r1, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
   8a11e:	62c1      	str	r1, [r0, #44]	; 0x2c
    npcb->snd_wnd = tcphdr->wnd;
   8a120:	89d2      	ldrh	r2, [r2, #14]
   8a122:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    npcb->ssthresh = npcb->snd_wnd;
   8a126:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
   8a12a:	3b01      	subs	r3, #1
   8a12c:	6603      	str	r3, [r0, #96]	; 0x60
    npcb->callback_arg = pcb->callback_arg;
   8a12e:	6973      	ldr	r3, [r6, #20]
   8a130:	6143      	str	r3, [r0, #20]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
   8a132:	69b3      	ldr	r3, [r6, #24]
   8a134:	6183      	str	r3, [r0, #24]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
   8a136:	7a33      	ldrb	r3, [r6, #8]
   8a138:	f023 0373 	bic.w	r3, r3, #115	; 0x73
   8a13c:	7203      	strb	r3, [r0, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG(&tcp_active_pcbs, npcb);
   8a13e:	4b52      	ldr	r3, [pc, #328]	; (8a288 <tcp_input+0x510>)
   8a140:	681a      	ldr	r2, [r3, #0]
   8a142:	60c2      	str	r2, [r0, #12]
   8a144:	6018      	str	r0, [r3, #0]
   8a146:	4b51      	ldr	r3, [pc, #324]	; (8a28c <tcp_input+0x514>)
   8a148:	4798      	blx	r3

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
   8a14a:	4620      	mov	r0, r4
   8a14c:	4b50      	ldr	r3, [pc, #320]	; (8a290 <tcp_input+0x518>)
   8a14e:	4798      	blx	r3
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
   8a150:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   8a152:	1d21      	adds	r1, r4, #4
   8a154:	4b4f      	ldr	r3, [pc, #316]	; (8a294 <tcp_input+0x51c>)
   8a156:	4798      	blx	r3
   8a158:	8720      	strh	r0, [r4, #56]	; 0x38
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
   8a15a:	4620      	mov	r0, r4
   8a15c:	2112      	movs	r1, #18
   8a15e:	4b4e      	ldr	r3, [pc, #312]	; (8a298 <tcp_input+0x520>)
   8a160:	4798      	blx	r3
    if (rc != ERR_OK) {
   8a162:	b120      	cbz	r0, 8a16e <tcp_input+0x3f6>
      tcp_abandon(npcb, 0);
   8a164:	4620      	mov	r0, r4
   8a166:	2100      	movs	r1, #0
   8a168:	4b4c      	ldr	r3, [pc, #304]	; (8a29c <tcp_input+0x524>)
   8a16a:	4798      	blx	r3
   8a16c:	e002      	b.n	8a174 <tcp_input+0x3fc>
      return rc;
    }
    return tcp_output(npcb);
   8a16e:	4620      	mov	r0, r4
   8a170:	4b3a      	ldr	r3, [pc, #232]	; (8a25c <tcp_input+0x4e4>)
   8a172:	4798      	blx	r3
        tcp_listen_pcbs.listen_pcbs = lpcb;
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
      pbuf_free(p);
   8a174:	4628      	mov	r0, r5
   8a176:	4b3a      	ldr	r3, [pc, #232]	; (8a260 <tcp_input+0x4e8>)
   8a178:	4798      	blx	r3
      return;
   8a17a:	e37f      	b.n	8a87c <tcp_input+0xb04>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
   8a17c:	2c00      	cmp	r4, #0
   8a17e:	f000 8351 	beq.w	8a824 <tcp_input+0xaac>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
   8a182:	4b47      	ldr	r3, [pc, #284]	; (8a2a0 <tcp_input+0x528>)
   8a184:	2200      	movs	r2, #0
   8a186:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
   8a188:	8929      	ldrh	r1, [r5, #8]
   8a18a:	8119      	strh	r1, [r3, #8]
    inseg.p = p;
   8a18c:	605d      	str	r5, [r3, #4]
    inseg.tcphdr = tcphdr;
   8a18e:	4936      	ldr	r1, [pc, #216]	; (8a268 <tcp_input+0x4f0>)
   8a190:	6809      	ldr	r1, [r1, #0]
   8a192:	60d9      	str	r1, [r3, #12]

    recv_data = NULL;
   8a194:	4b43      	ldr	r3, [pc, #268]	; (8a2a4 <tcp_input+0x52c>)
   8a196:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
   8a198:	4b43      	ldr	r3, [pc, #268]	; (8a2a8 <tcp_input+0x530>)
   8a19a:	701a      	strb	r2, [r3, #0]

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
   8a19c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   8a1a0:	b312      	cbz	r2, 8a1e8 <tcp_input+0x470>
      /* Notify again application with data previously received. */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
   8a1a2:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
   8a1a6:	b126      	cbz	r6, 8a1b2 <tcp_input+0x43a>
   8a1a8:	6960      	ldr	r0, [r4, #20]
   8a1aa:	4621      	mov	r1, r4
   8a1ac:	2300      	movs	r3, #0
   8a1ae:	47b0      	blx	r6
   8a1b0:	e004      	b.n	8a1bc <tcp_input+0x444>
   8a1b2:	2000      	movs	r0, #0
   8a1b4:	4621      	mov	r1, r4
   8a1b6:	4603      	mov	r3, r0
   8a1b8:	4e3c      	ldr	r6, [pc, #240]	; (8a2ac <tcp_input+0x534>)
   8a1ba:	47b0      	blx	r6
      if (err == ERR_OK) {
   8a1bc:	b918      	cbnz	r0, 8a1c6 <tcp_input+0x44e>
        pcb->refused_data = NULL;
   8a1be:	2300      	movs	r3, #0
   8a1c0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   8a1c4:	e010      	b.n	8a1e8 <tcp_input+0x470>
      } else if ((err == ERR_ABRT) || (tcplen > 0)) {
   8a1c6:	b240      	sxtb	r0, r0
   8a1c8:	f110 0f0a 	cmn.w	r0, #10
   8a1cc:	d002      	beq.n	8a1d4 <tcp_input+0x45c>
   8a1ce:	4b38      	ldr	r3, [pc, #224]	; (8a2b0 <tcp_input+0x538>)
   8a1d0:	881b      	ldrh	r3, [r3, #0]
   8a1d2:	b14b      	cbz	r3, 8a1e8 <tcp_input+0x470>
        /* if err == ERR_ABRT, 'pcb' is already deallocated */
        /* Drop incoming packets because pcb is "full" (only if the incoming
           segment contains data). */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
        TCP_STATS_INC(tcp.drop);
   8a1d4:	4b2b      	ldr	r3, [pc, #172]	; (8a284 <tcp_input+0x50c>)
   8a1d6:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
   8a1da:	3201      	adds	r2, #1
   8a1dc:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        snmp_inc_tcpinerrs();
        pbuf_free(p);
   8a1e0:	4628      	mov	r0, r5
   8a1e2:	4b1f      	ldr	r3, [pc, #124]	; (8a260 <tcp_input+0x4e8>)
   8a1e4:	4798      	blx	r3
        return;
   8a1e6:	e349      	b.n	8a87c <tcp_input+0xb04>
      }
    }
    tcp_input_pcb = pcb;
   8a1e8:	4b32      	ldr	r3, [pc, #200]	; (8a2b4 <tcp_input+0x53c>)
   8a1ea:	601c      	str	r4, [r3, #0]
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
   8a1ec:	4b32      	ldr	r3, [pc, #200]	; (8a2b8 <tcp_input+0x540>)
   8a1ee:	781b      	ldrb	r3, [r3, #0]
   8a1f0:	f013 0f04 	tst.w	r3, #4
   8a1f4:	d021      	beq.n	8a23a <tcp_input+0x4c2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
   8a1f6:	7c22      	ldrb	r2, [r4, #16]
   8a1f8:	2a02      	cmp	r2, #2
   8a1fa:	d105      	bne.n	8a208 <tcp_input+0x490>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
      }
    }

    if (acceptable) {
   8a1fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
   8a1fe:	4a1c      	ldr	r2, [pc, #112]	; (8a270 <tcp_input+0x4f8>)
   8a200:	6812      	ldr	r2, [r2, #0]
   8a202:	4293      	cmp	r3, r2
   8a204:	d00d      	beq.n	8a222 <tcp_input+0x4aa>
   8a206:	e265      	b.n	8a6d4 <tcp_input+0x95c>
    if (pcb->state == SYN_SENT) {
      if (ackno == pcb->snd_nxt) {
        acceptable = 1;
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
   8a208:	4b1a      	ldr	r3, [pc, #104]	; (8a274 <tcp_input+0x4fc>)
   8a20a:	6819      	ldr	r1, [r3, #0]
   8a20c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8a20e:	1acb      	subs	r3, r1, r3
   8a210:	f100 8260 	bmi.w	8a6d4 <tcp_input+0x95c>
   8a214:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   8a216:	1a1b      	subs	r3, r3, r0
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
      }
    }

    if (acceptable) {
   8a218:	2b00      	cmp	r3, #0
   8a21a:	f300 825b 	bgt.w	8a6d4 <tcp_input+0x95c>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
   8a21e:	b902      	cbnz	r2, 8a222 <tcp_input+0x4aa>
   8a220:	e7fe      	b.n	8a220 <tcp_input+0x4a8>
      recv_flags |= TF_RESET;
   8a222:	4b21      	ldr	r3, [pc, #132]	; (8a2a8 <tcp_input+0x530>)
   8a224:	781a      	ldrb	r2, [r3, #0]
   8a226:	f042 0208 	orr.w	r2, r2, #8
   8a22a:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
   8a22c:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a230:	f023 0301 	bic.w	r3, r3, #1
   8a234:	f884 3020 	strb.w	r3, [r4, #32]
   8a238:	e24c      	b.n	8a6d4 <tcp_input+0x95c>
       seqno, pcb->rcv_nxt));
      return ERR_OK;
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
   8a23a:	f013 0f02 	tst.w	r3, #2
   8a23e:	d03d      	beq.n	8a2bc <tcp_input+0x544>
   8a240:	7c23      	ldrb	r3, [r4, #16]
   8a242:	3b02      	subs	r3, #2
   8a244:	b2db      	uxtb	r3, r3
   8a246:	2b01      	cmp	r3, #1
   8a248:	d938      	bls.n	8a2bc <tcp_input+0x544>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
   8a24a:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a24e:	f043 0302 	orr.w	r3, r3, #2
   8a252:	f884 3020 	strb.w	r3, [r4, #32]
   8a256:	e23d      	b.n	8a6d4 <tcp_input+0x95c>
   8a258:	200768dc 	.word	0x200768dc
   8a25c:	0008b091 	.word	0x0008b091
   8a260:	00088045 	.word	0x00088045
   8a264:	200768e0 	.word	0x200768e0
   8a268:	200759c8 	.word	0x200759c8
   8a26c:	20075b64 	.word	0x20075b64
   8a270:	200759d4 	.word	0x200759d4
   8a274:	200759cc 	.word	0x200759cc
   8a278:	20075b5c 	.word	0x20075b5c
   8a27c:	0008b38d 	.word	0x0008b38d
   8a280:	000891ed 	.word	0x000891ed
   8a284:	20076788 	.word	0x20076788
   8a288:	200768d8 	.word	0x200768d8
   8a28c:	000876c9 	.word	0x000876c9
   8a290:	0008932d 	.word	0x0008932d
   8a294:	00088d11 	.word	0x00088d11
   8a298:	0008ae95 	.word	0x0008ae95
   8a29c:	0008912d 	.word	0x0008912d
   8a2a0:	200759e4 	.word	0x200759e4
   8a2a4:	200759dc 	.word	0x200759dc
   8a2a8:	200759d9 	.word	0x200759d9
   8a2ac:	00088ff5 	.word	0x00088ff5
   8a2b0:	200759d0 	.word	0x200759d0
   8a2b4:	200768f0 	.word	0x200768f0
   8a2b8:	200759d8 	.word	0x200759d8
    return ERR_OK;
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
   8a2bc:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a2c0:	f013 0f10 	tst.w	r3, #16
   8a2c4:	d102      	bne.n	8a2cc <tcp_input+0x554>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
   8a2c6:	4b9b      	ldr	r3, [pc, #620]	; (8a534 <tcp_input+0x7bc>)
   8a2c8:	681b      	ldr	r3, [r3, #0]
   8a2ca:	6323      	str	r3, [r4, #48]	; 0x30
  }
  pcb->keep_cnt_sent = 0;
   8a2cc:	2300      	movs	r3, #0
   8a2ce:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  tcp_parseopt(pcb);
   8a2d2:	4620      	mov	r0, r4
   8a2d4:	4b98      	ldr	r3, [pc, #608]	; (8a538 <tcp_input+0x7c0>)
   8a2d6:	4798      	blx	r3

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
   8a2d8:	7c23      	ldrb	r3, [r4, #16]
   8a2da:	3b02      	subs	r3, #2
   8a2dc:	2b07      	cmp	r3, #7
   8a2de:	f200 81f9 	bhi.w	8a6d4 <tcp_input+0x95c>
   8a2e2:	e8df f013 	tbh	[pc, r3, lsl #1]
   8a2e6:	0008      	.short	0x0008
   8a2e8:	00de007d 	.word	0x00de007d
   8a2ec:	017400f0 	.word	0x017400f0
   8a2f0:	01ad00de 	.word	0x01ad00de
   8a2f4:	01e5      	.short	0x01e5
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
   8a2f6:	4b91      	ldr	r3, [pc, #580]	; (8a53c <tcp_input+0x7c4>)
   8a2f8:	781b      	ldrb	r3, [r3, #0]
   8a2fa:	f003 0312 	and.w	r3, r3, #18
   8a2fe:	2b12      	cmp	r3, #18
   8a300:	d156      	bne.n	8a3b0 <tcp_input+0x638>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
   8a302:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8a304:	68db      	ldr	r3, [r3, #12]
   8a306:	6858      	ldr	r0, [r3, #4]
   8a308:	4b8d      	ldr	r3, [pc, #564]	; (8a540 <tcp_input+0x7c8>)
   8a30a:	4798      	blx	r3
   8a30c:	3001      	adds	r0, #1
   8a30e:	4b8d      	ldr	r3, [pc, #564]	; (8a544 <tcp_input+0x7cc>)
   8a310:	681b      	ldr	r3, [r3, #0]
   8a312:	4298      	cmp	r0, r3
   8a314:	d14c      	bne.n	8a3b0 <tcp_input+0x638>
      pcb->snd_buf++;
   8a316:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   8a31a:	3301      	adds	r3, #1
   8a31c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
      pcb->rcv_nxt = seqno + 1;
   8a320:	4b89      	ldr	r3, [pc, #548]	; (8a548 <tcp_input+0x7d0>)
   8a322:	681b      	ldr	r3, [r3, #0]
   8a324:	1c5a      	adds	r2, r3, #1
   8a326:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
   8a328:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
   8a32a:	64e0      	str	r0, [r4, #76]	; 0x4c
      pcb->snd_wnd = tcphdr->wnd;
   8a32c:	4a87      	ldr	r2, [pc, #540]	; (8a54c <tcp_input+0x7d4>)
   8a32e:	6812      	ldr	r2, [r2, #0]
   8a330:	89d2      	ldrh	r2, [r2, #14]
   8a332:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
   8a336:	3b01      	subs	r3, #1
   8a338:	6623      	str	r3, [r4, #96]	; 0x60
      pcb->state = ESTABLISHED;
   8a33a:	2304      	movs	r3, #4
   8a33c:	7423      	strb	r3, [r4, #16]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
   8a33e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   8a340:	18e1      	adds	r1, r4, r3
   8a342:	4b83      	ldr	r3, [pc, #524]	; (8a550 <tcp_input+0x7d8>)
   8a344:	4798      	blx	r3
   8a346:	8720      	strh	r0, [r4, #56]	; 0x38
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
   8a348:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   8a34c:	005b      	lsls	r3, r3, #1
   8a34e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
   8a352:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   8a356:	2b01      	cmp	r3, #1
   8a358:	bf04      	itt	eq
   8a35a:	0040      	lsleq	r0, r0, #1
   8a35c:	b280      	uxtheq	r0, r0
   8a35e:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
   8a362:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   8a366:	b903      	cbnz	r3, 8a36a <tcp_input+0x5f2>
   8a368:	e7fe      	b.n	8a368 <tcp_input+0x5f0>
      --pcb->snd_queuelen;
   8a36a:	3b01      	subs	r3, #1
   8a36c:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
   8a370:	6fa0      	ldr	r0, [r4, #120]	; 0x78
      pcb->unacked = rseg->next;
   8a372:	6803      	ldr	r3, [r0, #0]
   8a374:	67a3      	str	r3, [r4, #120]	; 0x78

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
   8a376:	b91b      	cbnz	r3, 8a380 <tcp_input+0x608>
        pcb->rtime = -1;
   8a378:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8a37c:	86e3      	strh	r3, [r4, #54]	; 0x36
   8a37e:	e003      	b.n	8a388 <tcp_input+0x610>
      else {
        pcb->rtime = 0;
   8a380:	2300      	movs	r3, #0
   8a382:	86e3      	strh	r3, [r4, #54]	; 0x36
        pcb->nrtx = 0;
   8a384:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
      }

      tcp_seg_free(rseg);
   8a388:	4b72      	ldr	r3, [pc, #456]	; (8a554 <tcp_input+0x7dc>)
   8a38a:	4798      	blx	r3

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
   8a38c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   8a390:	b13b      	cbz	r3, 8a3a2 <tcp_input+0x62a>
   8a392:	6960      	ldr	r0, [r4, #20]
   8a394:	4621      	mov	r1, r4
   8a396:	2200      	movs	r2, #0
   8a398:	4798      	blx	r3
      if (err == ERR_ABRT) {
   8a39a:	f110 0f0a 	cmn.w	r0, #10
   8a39e:	f000 8232 	beq.w	8a806 <tcp_input+0xa8e>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
   8a3a2:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a3a6:	f043 0302 	orr.w	r3, r3, #2
   8a3aa:	f884 3020 	strb.w	r3, [r4, #32]
   8a3ae:	e191      	b.n	8a6d4 <tcp_input+0x95c>
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
   8a3b0:	4b62      	ldr	r3, [pc, #392]	; (8a53c <tcp_input+0x7c4>)
   8a3b2:	781b      	ldrb	r3, [r3, #0]
   8a3b4:	f013 0f10 	tst.w	r3, #16
   8a3b8:	f000 818c 	beq.w	8a6d4 <tcp_input+0x95c>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
   8a3bc:	4b63      	ldr	r3, [pc, #396]	; (8a54c <tcp_input+0x7d4>)
   8a3be:	681b      	ldr	r3, [r3, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
   8a3c0:	4a60      	ldr	r2, [pc, #384]	; (8a544 <tcp_input+0x7cc>)
   8a3c2:	6810      	ldr	r0, [r2, #0]
   8a3c4:	4a64      	ldr	r2, [pc, #400]	; (8a558 <tcp_input+0x7e0>)
   8a3c6:	8811      	ldrh	r1, [r2, #0]
   8a3c8:	4a5f      	ldr	r2, [pc, #380]	; (8a548 <tcp_input+0x7d0>)
   8a3ca:	6812      	ldr	r2, [r2, #0]
   8a3cc:	885d      	ldrh	r5, [r3, #2]
   8a3ce:	9500      	str	r5, [sp, #0]
   8a3d0:	881b      	ldrh	r3, [r3, #0]
   8a3d2:	9301      	str	r3, [sp, #4]
   8a3d4:	4411      	add	r1, r2
   8a3d6:	4a61      	ldr	r2, [pc, #388]	; (8a55c <tcp_input+0x7e4>)
   8a3d8:	4b61      	ldr	r3, [pc, #388]	; (8a560 <tcp_input+0x7e8>)
   8a3da:	4d62      	ldr	r5, [pc, #392]	; (8a564 <tcp_input+0x7ec>)
   8a3dc:	47a8      	blx	r5
   8a3de:	e179      	b.n	8a6d4 <tcp_input+0x95c>
        tcphdr->dest, tcphdr->src);
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
   8a3e0:	4b56      	ldr	r3, [pc, #344]	; (8a53c <tcp_input+0x7c4>)
   8a3e2:	781b      	ldrb	r3, [r3, #0]
   8a3e4:	f013 0f10 	tst.w	r3, #16
   8a3e8:	d04c      	beq.n	8a484 <tcp_input+0x70c>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
   8a3ea:	4b56      	ldr	r3, [pc, #344]	; (8a544 <tcp_input+0x7cc>)
   8a3ec:	6818      	ldr	r0, [r3, #0]
   8a3ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   8a3f0:	43db      	mvns	r3, r3
   8a3f2:	42c3      	cmn	r3, r0
   8a3f4:	d436      	bmi.n	8a464 <tcp_input+0x6ec>
   8a3f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   8a3f8:	1ac3      	subs	r3, r0, r3
   8a3fa:	2b00      	cmp	r3, #0
   8a3fc:	dc32      	bgt.n	8a464 <tcp_input+0x6ec>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
   8a3fe:	2304      	movs	r3, #4
   8a400:	7423      	strb	r3, [r4, #16]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
   8a402:	69a3      	ldr	r3, [r4, #24]
   8a404:	b903      	cbnz	r3, 8a408 <tcp_input+0x690>
   8a406:	e7fe      	b.n	8a406 <tcp_input+0x68e>
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
   8a408:	6960      	ldr	r0, [r4, #20]
   8a40a:	4621      	mov	r1, r4
   8a40c:	2200      	movs	r2, #0
   8a40e:	4798      	blx	r3
        if (err != ERR_OK) {
   8a410:	b138      	cbz	r0, 8a422 <tcp_input+0x6aa>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
   8a412:	f110 0f0a 	cmn.w	r0, #10
   8a416:	f000 81f6 	beq.w	8a806 <tcp_input+0xa8e>
            tcp_abort(pcb);
   8a41a:	4620      	mov	r0, r4
   8a41c:	4b52      	ldr	r3, [pc, #328]	; (8a568 <tcp_input+0x7f0>)
   8a41e:	4798      	blx	r3
   8a420:	e1f1      	b.n	8a806 <tcp_input+0xa8e>
          }
          return ERR_ABRT;
        }
        old_cwnd = pcb->cwnd;
   8a422:	f8b4 5052 	ldrh.w	r5, [r4, #82]	; 0x52
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
   8a426:	4620      	mov	r0, r4
   8a428:	4b50      	ldr	r3, [pc, #320]	; (8a56c <tcp_input+0x7f4>)
   8a42a:	4798      	blx	r3

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
   8a42c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   8a430:	b113      	cbz	r3, 8a438 <tcp_input+0x6c0>
          pcb->acked--;
   8a432:	3b01      	subs	r3, #1
   8a434:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
   8a438:	2d01      	cmp	r5, #1
   8a43a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   8a43c:	bf04      	itt	eq
   8a43e:	005b      	lsleq	r3, r3, #1
   8a440:	b29b      	uxtheq	r3, r3
   8a442:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52

        if (recv_flags & TF_GOT_FIN) {
   8a446:	4b4a      	ldr	r3, [pc, #296]	; (8a570 <tcp_input+0x7f8>)
   8a448:	781b      	ldrb	r3, [r3, #0]
   8a44a:	f013 0f20 	tst.w	r3, #32
   8a44e:	f000 8141 	beq.w	8a6d4 <tcp_input+0x95c>
          tcp_ack_now(pcb);
   8a452:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a456:	f043 0302 	orr.w	r3, r3, #2
   8a45a:	f884 3020 	strb.w	r3, [r4, #32]
          pcb->state = CLOSE_WAIT;
   8a45e:	2307      	movs	r3, #7
   8a460:	7423      	strb	r3, [r4, #16]
   8a462:	e137      	b.n	8a6d4 <tcp_input+0x95c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
   8a464:	4b39      	ldr	r3, [pc, #228]	; (8a54c <tcp_input+0x7d4>)
   8a466:	681b      	ldr	r3, [r3, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
   8a468:	4a3b      	ldr	r2, [pc, #236]	; (8a558 <tcp_input+0x7e0>)
   8a46a:	8811      	ldrh	r1, [r2, #0]
   8a46c:	4a36      	ldr	r2, [pc, #216]	; (8a548 <tcp_input+0x7d0>)
   8a46e:	6812      	ldr	r2, [r2, #0]
   8a470:	885d      	ldrh	r5, [r3, #2]
   8a472:	9500      	str	r5, [sp, #0]
   8a474:	881b      	ldrh	r3, [r3, #0]
   8a476:	9301      	str	r3, [sp, #4]
   8a478:	4411      	add	r1, r2
   8a47a:	4a38      	ldr	r2, [pc, #224]	; (8a55c <tcp_input+0x7e4>)
   8a47c:	4b38      	ldr	r3, [pc, #224]	; (8a560 <tcp_input+0x7e8>)
   8a47e:	4d39      	ldr	r5, [pc, #228]	; (8a564 <tcp_input+0x7ec>)
   8a480:	47a8      	blx	r5
   8a482:	e127      	b.n	8a6d4 <tcp_input+0x95c>
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
   8a484:	f013 0f02 	tst.w	r3, #2
   8a488:	f000 8124 	beq.w	8a6d4 <tcp_input+0x95c>
   8a48c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8a48e:	3b01      	subs	r3, #1
   8a490:	4a2d      	ldr	r2, [pc, #180]	; (8a548 <tcp_input+0x7d0>)
   8a492:	6812      	ldr	r2, [r2, #0]
   8a494:	4293      	cmp	r3, r2
   8a496:	f040 811d 	bne.w	8a6d4 <tcp_input+0x95c>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
   8a49a:	4620      	mov	r0, r4
   8a49c:	4b35      	ldr	r3, [pc, #212]	; (8a574 <tcp_input+0x7fc>)
   8a49e:	4798      	blx	r3
   8a4a0:	e118      	b.n	8a6d4 <tcp_input+0x95c>
    }
    break;
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
   8a4a2:	4620      	mov	r0, r4
   8a4a4:	4b31      	ldr	r3, [pc, #196]	; (8a56c <tcp_input+0x7f4>)
   8a4a6:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
   8a4a8:	4b31      	ldr	r3, [pc, #196]	; (8a570 <tcp_input+0x7f8>)
   8a4aa:	781b      	ldrb	r3, [r3, #0]
   8a4ac:	f013 0f20 	tst.w	r3, #32
   8a4b0:	f000 8110 	beq.w	8a6d4 <tcp_input+0x95c>
      tcp_ack_now(pcb);
   8a4b4:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a4b8:	f043 0302 	orr.w	r3, r3, #2
   8a4bc:	f884 3020 	strb.w	r3, [r4, #32]
      pcb->state = CLOSE_WAIT;
   8a4c0:	2307      	movs	r3, #7
   8a4c2:	7423      	strb	r3, [r4, #16]
   8a4c4:	e106      	b.n	8a6d4 <tcp_input+0x95c>
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
   8a4c6:	4620      	mov	r0, r4
   8a4c8:	4b28      	ldr	r3, [pc, #160]	; (8a56c <tcp_input+0x7f4>)
   8a4ca:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
   8a4cc:	4b28      	ldr	r3, [pc, #160]	; (8a570 <tcp_input+0x7f8>)
   8a4ce:	781b      	ldrb	r3, [r3, #0]
   8a4d0:	f013 0f20 	tst.w	r3, #32
   8a4d4:	d06c      	beq.n	8a5b0 <tcp_input+0x838>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
   8a4d6:	4b19      	ldr	r3, [pc, #100]	; (8a53c <tcp_input+0x7c4>)
   8a4d8:	781b      	ldrb	r3, [r3, #0]
   8a4da:	f013 0f10 	tst.w	r3, #16
   8a4de:	d05e      	beq.n	8a59e <tcp_input+0x826>
   8a4e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   8a4e2:	4a18      	ldr	r2, [pc, #96]	; (8a544 <tcp_input+0x7cc>)
   8a4e4:	6812      	ldr	r2, [r2, #0]
   8a4e6:	4293      	cmp	r3, r2
   8a4e8:	d159      	bne.n	8a59e <tcp_input+0x826>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
   8a4ea:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a4ee:	f043 0302 	orr.w	r3, r3, #2
   8a4f2:	f884 3020 	strb.w	r3, [r4, #32]
        tcp_pcb_purge(pcb);
   8a4f6:	4620      	mov	r0, r4
   8a4f8:	4b1f      	ldr	r3, [pc, #124]	; (8a578 <tcp_input+0x800>)
   8a4fa:	4798      	blx	r3
        TCP_RMV(&tcp_active_pcbs, pcb);
   8a4fc:	4b1f      	ldr	r3, [pc, #124]	; (8a57c <tcp_input+0x804>)
   8a4fe:	681a      	ldr	r2, [r3, #0]
   8a500:	4294      	cmp	r4, r2
   8a502:	d103      	bne.n	8a50c <tcp_input+0x794>
   8a504:	68e3      	ldr	r3, [r4, #12]
   8a506:	4a1d      	ldr	r2, [pc, #116]	; (8a57c <tcp_input+0x804>)
   8a508:	6013      	str	r3, [r2, #0]
   8a50a:	e03f      	b.n	8a58c <tcp_input+0x814>
   8a50c:	4b1c      	ldr	r3, [pc, #112]	; (8a580 <tcp_input+0x808>)
   8a50e:	601a      	str	r2, [r3, #0]
   8a510:	2a00      	cmp	r2, #0
   8a512:	d03b      	beq.n	8a58c <tcp_input+0x814>
   8a514:	68d3      	ldr	r3, [r2, #12]
   8a516:	429c      	cmp	r4, r3
   8a518:	d134      	bne.n	8a584 <tcp_input+0x80c>
   8a51a:	e007      	b.n	8a52c <tcp_input+0x7b4>
   8a51c:	68da      	ldr	r2, [r3, #12]
   8a51e:	4294      	cmp	r4, r2
   8a520:	d001      	beq.n	8a526 <tcp_input+0x7ae>
   8a522:	4613      	mov	r3, r2
   8a524:	e02e      	b.n	8a584 <tcp_input+0x80c>
   8a526:	4a16      	ldr	r2, [pc, #88]	; (8a580 <tcp_input+0x808>)
   8a528:	6013      	str	r3, [r2, #0]
   8a52a:	e000      	b.n	8a52e <tcp_input+0x7b6>
   8a52c:	4613      	mov	r3, r2
   8a52e:	68e2      	ldr	r2, [r4, #12]
   8a530:	60da      	str	r2, [r3, #12]
   8a532:	e02b      	b.n	8a58c <tcp_input+0x814>
   8a534:	200768dc 	.word	0x200768dc
   8a538:	0008932d 	.word	0x0008932d
   8a53c:	200759d8 	.word	0x200759d8
   8a540:	00086501 	.word	0x00086501
   8a544:	200759d4 	.word	0x200759d4
   8a548:	200759cc 	.word	0x200759cc
   8a54c:	200759c8 	.word	0x200759c8
   8a550:	00088d11 	.word	0x00088d11
   8a554:	000888cd 	.word	0x000888cd
   8a558:	200759d0 	.word	0x200759d0
   8a55c:	20075b64 	.word	0x20075b64
   8a560:	20075b5c 	.word	0x20075b5c
   8a564:	0008b38d 	.word	0x0008b38d
   8a568:	000891dd 	.word	0x000891dd
   8a56c:	00089465 	.word	0x00089465
   8a570:	200759d9 	.word	0x200759d9
   8a574:	0008b47d 	.word	0x0008b47d
   8a578:	00088969 	.word	0x00088969
   8a57c:	200768d8 	.word	0x200768d8
   8a580:	200768e4 	.word	0x200768e4
   8a584:	2b00      	cmp	r3, #0
   8a586:	d1c9      	bne.n	8a51c <tcp_input+0x7a4>
   8a588:	4a7b      	ldr	r2, [pc, #492]	; (8a778 <tcp_input+0xa00>)
   8a58a:	6013      	str	r3, [r2, #0]
        pcb->state = TIME_WAIT;
   8a58c:	230a      	movs	r3, #10
   8a58e:	7423      	strb	r3, [r4, #16]
        TCP_REG(&tcp_tw_pcbs, pcb);
   8a590:	4b7a      	ldr	r3, [pc, #488]	; (8a77c <tcp_input+0xa04>)
   8a592:	681a      	ldr	r2, [r3, #0]
   8a594:	60e2      	str	r2, [r4, #12]
   8a596:	601c      	str	r4, [r3, #0]
   8a598:	4b79      	ldr	r3, [pc, #484]	; (8a780 <tcp_input+0xa08>)
   8a59a:	4798      	blx	r3
   8a59c:	e09a      	b.n	8a6d4 <tcp_input+0x95c>
      } else {
        tcp_ack_now(pcb);
   8a59e:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a5a2:	f043 0302 	orr.w	r3, r3, #2
   8a5a6:	f884 3020 	strb.w	r3, [r4, #32]
        pcb->state = CLOSING;
   8a5aa:	2308      	movs	r3, #8
   8a5ac:	7423      	strb	r3, [r4, #16]
   8a5ae:	e091      	b.n	8a6d4 <tcp_input+0x95c>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
   8a5b0:	4b74      	ldr	r3, [pc, #464]	; (8a784 <tcp_input+0xa0c>)
   8a5b2:	781b      	ldrb	r3, [r3, #0]
   8a5b4:	f013 0f10 	tst.w	r3, #16
   8a5b8:	f000 808c 	beq.w	8a6d4 <tcp_input+0x95c>
   8a5bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
   8a5be:	4a72      	ldr	r2, [pc, #456]	; (8a788 <tcp_input+0xa10>)
   8a5c0:	6812      	ldr	r2, [r2, #0]
   8a5c2:	4293      	cmp	r3, r2
   8a5c4:	f040 8086 	bne.w	8a6d4 <tcp_input+0x95c>
      pcb->state = FIN_WAIT_2;
   8a5c8:	2306      	movs	r3, #6
   8a5ca:	7423      	strb	r3, [r4, #16]
   8a5cc:	e082      	b.n	8a6d4 <tcp_input+0x95c>
    }
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
   8a5ce:	4620      	mov	r0, r4
   8a5d0:	4b6e      	ldr	r3, [pc, #440]	; (8a78c <tcp_input+0xa14>)
   8a5d2:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
   8a5d4:	4b6e      	ldr	r3, [pc, #440]	; (8a790 <tcp_input+0xa18>)
   8a5d6:	781b      	ldrb	r3, [r3, #0]
   8a5d8:	f013 0f20 	tst.w	r3, #32
   8a5dc:	d07a      	beq.n	8a6d4 <tcp_input+0x95c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
   8a5de:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a5e2:	f043 0302 	orr.w	r3, r3, #2
   8a5e6:	f884 3020 	strb.w	r3, [r4, #32]
      tcp_pcb_purge(pcb);
   8a5ea:	4620      	mov	r0, r4
   8a5ec:	4b69      	ldr	r3, [pc, #420]	; (8a794 <tcp_input+0xa1c>)
   8a5ee:	4798      	blx	r3
      TCP_RMV(&tcp_active_pcbs, pcb);
   8a5f0:	4b69      	ldr	r3, [pc, #420]	; (8a798 <tcp_input+0xa20>)
   8a5f2:	681a      	ldr	r2, [r3, #0]
   8a5f4:	4294      	cmp	r4, r2
   8a5f6:	d103      	bne.n	8a600 <tcp_input+0x888>
   8a5f8:	68e3      	ldr	r3, [r4, #12]
   8a5fa:	4a67      	ldr	r2, [pc, #412]	; (8a798 <tcp_input+0xa20>)
   8a5fc:	6013      	str	r3, [r2, #0]
   8a5fe:	e016      	b.n	8a62e <tcp_input+0x8b6>
   8a600:	4b5d      	ldr	r3, [pc, #372]	; (8a778 <tcp_input+0xa00>)
   8a602:	601a      	str	r2, [r3, #0]
   8a604:	b19a      	cbz	r2, 8a62e <tcp_input+0x8b6>
   8a606:	68d3      	ldr	r3, [r2, #12]
   8a608:	429c      	cmp	r4, r3
   8a60a:	d10c      	bne.n	8a626 <tcp_input+0x8ae>
   8a60c:	e007      	b.n	8a61e <tcp_input+0x8a6>
   8a60e:	68da      	ldr	r2, [r3, #12]
   8a610:	4294      	cmp	r4, r2
   8a612:	d001      	beq.n	8a618 <tcp_input+0x8a0>
   8a614:	4613      	mov	r3, r2
   8a616:	e006      	b.n	8a626 <tcp_input+0x8ae>
   8a618:	4a57      	ldr	r2, [pc, #348]	; (8a778 <tcp_input+0xa00>)
   8a61a:	6013      	str	r3, [r2, #0]
   8a61c:	e000      	b.n	8a620 <tcp_input+0x8a8>
   8a61e:	4613      	mov	r3, r2
   8a620:	68e2      	ldr	r2, [r4, #12]
   8a622:	60da      	str	r2, [r3, #12]
   8a624:	e003      	b.n	8a62e <tcp_input+0x8b6>
   8a626:	2b00      	cmp	r3, #0
   8a628:	d1f1      	bne.n	8a60e <tcp_input+0x896>
   8a62a:	4a53      	ldr	r2, [pc, #332]	; (8a778 <tcp_input+0xa00>)
   8a62c:	6013      	str	r3, [r2, #0]
      pcb->state = TIME_WAIT;
   8a62e:	230a      	movs	r3, #10
   8a630:	7423      	strb	r3, [r4, #16]
      TCP_REG(&tcp_tw_pcbs, pcb);
   8a632:	4b52      	ldr	r3, [pc, #328]	; (8a77c <tcp_input+0xa04>)
   8a634:	681a      	ldr	r2, [r3, #0]
   8a636:	60e2      	str	r2, [r4, #12]
   8a638:	601c      	str	r4, [r3, #0]
   8a63a:	4b51      	ldr	r3, [pc, #324]	; (8a780 <tcp_input+0xa08>)
   8a63c:	4798      	blx	r3
   8a63e:	e049      	b.n	8a6d4 <tcp_input+0x95c>
    }
    break;
  case CLOSING:
    tcp_receive(pcb);
   8a640:	4620      	mov	r0, r4
   8a642:	4b52      	ldr	r3, [pc, #328]	; (8a78c <tcp_input+0xa14>)
   8a644:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
   8a646:	4b4f      	ldr	r3, [pc, #316]	; (8a784 <tcp_input+0xa0c>)
   8a648:	781b      	ldrb	r3, [r3, #0]
   8a64a:	f013 0f10 	tst.w	r3, #16
   8a64e:	d041      	beq.n	8a6d4 <tcp_input+0x95c>
   8a650:	6da3      	ldr	r3, [r4, #88]	; 0x58
   8a652:	4a4d      	ldr	r2, [pc, #308]	; (8a788 <tcp_input+0xa10>)
   8a654:	6812      	ldr	r2, [r2, #0]
   8a656:	4293      	cmp	r3, r2
   8a658:	d13c      	bne.n	8a6d4 <tcp_input+0x95c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
   8a65a:	4620      	mov	r0, r4
   8a65c:	4b4d      	ldr	r3, [pc, #308]	; (8a794 <tcp_input+0xa1c>)
   8a65e:	4798      	blx	r3
      TCP_RMV(&tcp_active_pcbs, pcb);
   8a660:	4b4d      	ldr	r3, [pc, #308]	; (8a798 <tcp_input+0xa20>)
   8a662:	681a      	ldr	r2, [r3, #0]
   8a664:	4294      	cmp	r4, r2
   8a666:	d103      	bne.n	8a670 <tcp_input+0x8f8>
   8a668:	68e3      	ldr	r3, [r4, #12]
   8a66a:	4a4b      	ldr	r2, [pc, #300]	; (8a798 <tcp_input+0xa20>)
   8a66c:	6013      	str	r3, [r2, #0]
   8a66e:	e016      	b.n	8a69e <tcp_input+0x926>
   8a670:	4b41      	ldr	r3, [pc, #260]	; (8a778 <tcp_input+0xa00>)
   8a672:	601a      	str	r2, [r3, #0]
   8a674:	b19a      	cbz	r2, 8a69e <tcp_input+0x926>
   8a676:	68d3      	ldr	r3, [r2, #12]
   8a678:	429c      	cmp	r4, r3
   8a67a:	d10c      	bne.n	8a696 <tcp_input+0x91e>
   8a67c:	e007      	b.n	8a68e <tcp_input+0x916>
   8a67e:	68da      	ldr	r2, [r3, #12]
   8a680:	4294      	cmp	r4, r2
   8a682:	d001      	beq.n	8a688 <tcp_input+0x910>
   8a684:	4613      	mov	r3, r2
   8a686:	e006      	b.n	8a696 <tcp_input+0x91e>
   8a688:	4a3b      	ldr	r2, [pc, #236]	; (8a778 <tcp_input+0xa00>)
   8a68a:	6013      	str	r3, [r2, #0]
   8a68c:	e000      	b.n	8a690 <tcp_input+0x918>
   8a68e:	4613      	mov	r3, r2
   8a690:	68e2      	ldr	r2, [r4, #12]
   8a692:	60da      	str	r2, [r3, #12]
   8a694:	e003      	b.n	8a69e <tcp_input+0x926>
   8a696:	2b00      	cmp	r3, #0
   8a698:	d1f1      	bne.n	8a67e <tcp_input+0x906>
   8a69a:	4a37      	ldr	r2, [pc, #220]	; (8a778 <tcp_input+0xa00>)
   8a69c:	6013      	str	r3, [r2, #0]
      pcb->state = TIME_WAIT;
   8a69e:	230a      	movs	r3, #10
   8a6a0:	7423      	strb	r3, [r4, #16]
      TCP_REG(&tcp_tw_pcbs, pcb);
   8a6a2:	4b36      	ldr	r3, [pc, #216]	; (8a77c <tcp_input+0xa04>)
   8a6a4:	681a      	ldr	r2, [r3, #0]
   8a6a6:	60e2      	str	r2, [r4, #12]
   8a6a8:	601c      	str	r4, [r3, #0]
   8a6aa:	4b35      	ldr	r3, [pc, #212]	; (8a780 <tcp_input+0xa08>)
   8a6ac:	4798      	blx	r3
   8a6ae:	e011      	b.n	8a6d4 <tcp_input+0x95c>
    }
    break;
  case LAST_ACK:
    tcp_receive(pcb);
   8a6b0:	4620      	mov	r0, r4
   8a6b2:	4b36      	ldr	r3, [pc, #216]	; (8a78c <tcp_input+0xa14>)
   8a6b4:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
   8a6b6:	4b33      	ldr	r3, [pc, #204]	; (8a784 <tcp_input+0xa0c>)
   8a6b8:	781b      	ldrb	r3, [r3, #0]
   8a6ba:	f013 0f10 	tst.w	r3, #16
   8a6be:	d009      	beq.n	8a6d4 <tcp_input+0x95c>
   8a6c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   8a6c2:	4a31      	ldr	r2, [pc, #196]	; (8a788 <tcp_input+0xa10>)
   8a6c4:	6812      	ldr	r2, [r2, #0]
   8a6c6:	4293      	cmp	r3, r2
   8a6c8:	d104      	bne.n	8a6d4 <tcp_input+0x95c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
   8a6ca:	4b31      	ldr	r3, [pc, #196]	; (8a790 <tcp_input+0xa18>)
   8a6cc:	781a      	ldrb	r2, [r3, #0]
   8a6ce:	f042 0210 	orr.w	r2, r2, #16
   8a6d2:	701a      	strb	r2, [r3, #0]
    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
      if (recv_flags & TF_RESET) {
   8a6d4:	4b2e      	ldr	r3, [pc, #184]	; (8a790 <tcp_input+0xa18>)
   8a6d6:	781b      	ldrb	r3, [r3, #0]
   8a6d8:	f013 0f08 	tst.w	r3, #8
   8a6dc:	d00f      	beq.n	8a6fe <tcp_input+0x986>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
   8a6de:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8a6e2:	b11b      	cbz	r3, 8a6ec <tcp_input+0x974>
   8a6e4:	6960      	ldr	r0, [r4, #20]
   8a6e6:	f06f 010a 	mvn.w	r1, #10
   8a6ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
   8a6ec:	482a      	ldr	r0, [pc, #168]	; (8a798 <tcp_input+0xa20>)
   8a6ee:	4621      	mov	r1, r4
   8a6f0:	4b2a      	ldr	r3, [pc, #168]	; (8a79c <tcp_input+0xa24>)
   8a6f2:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
   8a6f4:	2002      	movs	r0, #2
   8a6f6:	4621      	mov	r1, r4
   8a6f8:	4b29      	ldr	r3, [pc, #164]	; (8a7a0 <tcp_input+0xa28>)
   8a6fa:	4798      	blx	r3
   8a6fc:	e083      	b.n	8a806 <tcp_input+0xa8e>
      } else if (recv_flags & TF_CLOSED) {
   8a6fe:	f013 0f10 	tst.w	r3, #16
   8a702:	d008      	beq.n	8a716 <tcp_input+0x99e>
        /* The connection has been closed and we will deallocate the
           PCB. */
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
   8a704:	4824      	ldr	r0, [pc, #144]	; (8a798 <tcp_input+0xa20>)
   8a706:	4621      	mov	r1, r4
   8a708:	4b24      	ldr	r3, [pc, #144]	; (8a79c <tcp_input+0xa24>)
   8a70a:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
   8a70c:	2002      	movs	r0, #2
   8a70e:	4621      	mov	r1, r4
   8a710:	4b23      	ldr	r3, [pc, #140]	; (8a7a0 <tcp_input+0xa28>)
   8a712:	4798      	blx	r3
   8a714:	e077      	b.n	8a806 <tcp_input+0xa8e>
      } else {
        err = ERR_OK;
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
   8a716:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   8a71a:	b142      	cbz	r2, 8a72e <tcp_input+0x9b6>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
   8a71c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   8a720:	b12b      	cbz	r3, 8a72e <tcp_input+0x9b6>
   8a722:	6960      	ldr	r0, [r4, #20]
   8a724:	4621      	mov	r1, r4
   8a726:	4798      	blx	r3
          if (err == ERR_ABRT) {
   8a728:	f110 0f0a 	cmn.w	r0, #10
   8a72c:	d06b      	beq.n	8a806 <tcp_input+0xa8e>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
   8a72e:	4b1d      	ldr	r3, [pc, #116]	; (8a7a4 <tcp_input+0xa2c>)
   8a730:	681a      	ldr	r2, [r3, #0]
   8a732:	2a00      	cmp	r2, #0
   8a734:	d04a      	beq.n	8a7cc <tcp_input+0xa54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
   8a736:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   8a73a:	b103      	cbz	r3, 8a73e <tcp_input+0x9c6>
   8a73c:	e7fe      	b.n	8a73c <tcp_input+0x9c4>
          if (pcb->flags & TF_RXCLOSED) {
   8a73e:	f894 3020 	ldrb.w	r3, [r4, #32]
   8a742:	f013 0f10 	tst.w	r3, #16
   8a746:	d006      	beq.n	8a756 <tcp_input+0x9de>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
   8a748:	4610      	mov	r0, r2
   8a74a:	4b17      	ldr	r3, [pc, #92]	; (8a7a8 <tcp_input+0xa30>)
   8a74c:	4798      	blx	r3
            tcp_abort(pcb);
   8a74e:	4620      	mov	r0, r4
   8a750:	4b16      	ldr	r3, [pc, #88]	; (8a7ac <tcp_input+0xa34>)
   8a752:	4798      	blx	r3
            goto aborted;
   8a754:	e057      	b.n	8a806 <tcp_input+0xa8e>
          }
          if (flags & TCP_PSH) {
   8a756:	4b0b      	ldr	r3, [pc, #44]	; (8a784 <tcp_input+0xa0c>)
   8a758:	781b      	ldrb	r3, [r3, #0]
   8a75a:	f013 0f08 	tst.w	r3, #8
   8a75e:	d003      	beq.n	8a768 <tcp_input+0x9f0>
            recv_data->flags |= PBUF_FLAG_PUSH;
   8a760:	7b53      	ldrb	r3, [r2, #13]
   8a762:	f043 0301 	orr.w	r3, r3, #1
   8a766:	7353      	strb	r3, [r2, #13]
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
   8a768:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   8a76c:	b305      	cbz	r5, 8a7b0 <tcp_input+0xa38>
   8a76e:	6960      	ldr	r0, [r4, #20]
   8a770:	4621      	mov	r1, r4
   8a772:	2300      	movs	r3, #0
   8a774:	47a8      	blx	r5
   8a776:	e020      	b.n	8a7ba <tcp_input+0xa42>
   8a778:	200768e4 	.word	0x200768e4
   8a77c:	200768ec 	.word	0x200768ec
   8a780:	000876c9 	.word	0x000876c9
   8a784:	200759d8 	.word	0x200759d8
   8a788:	200759d4 	.word	0x200759d4
   8a78c:	00089465 	.word	0x00089465
   8a790:	200759d9 	.word	0x200759d9
   8a794:	00088969 	.word	0x00088969
   8a798:	200768d8 	.word	0x200768d8
   8a79c:	00088d99 	.word	0x00088d99
   8a7a0:	00087d61 	.word	0x00087d61
   8a7a4:	200759dc 	.word	0x200759dc
   8a7a8:	00088045 	.word	0x00088045
   8a7ac:	000891dd 	.word	0x000891dd
   8a7b0:	2000      	movs	r0, #0
   8a7b2:	4621      	mov	r1, r4
   8a7b4:	4603      	mov	r3, r0
   8a7b6:	4d33      	ldr	r5, [pc, #204]	; (8a884 <tcp_input+0xb0c>)
   8a7b8:	47a8      	blx	r5
          if (err == ERR_ABRT) {
   8a7ba:	b243      	sxtb	r3, r0
   8a7bc:	f113 0f0a 	cmn.w	r3, #10
   8a7c0:	d021      	beq.n	8a806 <tcp_input+0xa8e>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
   8a7c2:	b118      	cbz	r0, 8a7cc <tcp_input+0xa54>
            pcb->refused_data = recv_data;
   8a7c4:	4b30      	ldr	r3, [pc, #192]	; (8a888 <tcp_input+0xb10>)
   8a7c6:	681b      	ldr	r3, [r3, #0]
   8a7c8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
   8a7cc:	4b2f      	ldr	r3, [pc, #188]	; (8a88c <tcp_input+0xb14>)
   8a7ce:	781b      	ldrb	r3, [r3, #0]
   8a7d0:	f013 0f20 	tst.w	r3, #32
   8a7d4:	d011      	beq.n	8a7fa <tcp_input+0xa82>
          /* correct rcv_wnd as the application won't call tcp_recved()
             for the FIN's seqno */
          if (pcb->rcv_wnd != TCP_WND) {
   8a7d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   8a7d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
   8a7dc:	4293      	cmp	r3, r2
            pcb->rcv_wnd++;
   8a7de:	bf1c      	itt	ne
   8a7e0:	3301      	addne	r3, #1
   8a7e2:	8523      	strhne	r3, [r4, #40]	; 0x28
          }
          TCP_EVENT_CLOSED(pcb, err);
   8a7e4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   8a7e8:	b13d      	cbz	r5, 8a7fa <tcp_input+0xa82>
   8a7ea:	6960      	ldr	r0, [r4, #20]
   8a7ec:	4621      	mov	r1, r4
   8a7ee:	2200      	movs	r2, #0
   8a7f0:	4613      	mov	r3, r2
   8a7f2:	47a8      	blx	r5
          if (err == ERR_ABRT) {
   8a7f4:	f110 0f0a 	cmn.w	r0, #10
   8a7f8:	d005      	beq.n	8a806 <tcp_input+0xa8e>
            goto aborted;
          }
        }

        tcp_input_pcb = NULL;
   8a7fa:	2200      	movs	r2, #0
   8a7fc:	4b24      	ldr	r3, [pc, #144]	; (8a890 <tcp_input+0xb18>)
   8a7fe:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
   8a800:	4620      	mov	r0, r4
   8a802:	4b24      	ldr	r3, [pc, #144]	; (8a894 <tcp_input+0xb1c>)
   8a804:	4798      	blx	r3
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
   8a806:	2300      	movs	r3, #0
   8a808:	4a21      	ldr	r2, [pc, #132]	; (8a890 <tcp_input+0xb18>)
   8a80a:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
   8a80c:	4a1e      	ldr	r2, [pc, #120]	; (8a888 <tcp_input+0xb10>)
   8a80e:	6013      	str	r3, [r2, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
   8a810:	4b21      	ldr	r3, [pc, #132]	; (8a898 <tcp_input+0xb20>)
   8a812:	6858      	ldr	r0, [r3, #4]
   8a814:	2800      	cmp	r0, #0
   8a816:	d02d      	beq.n	8a874 <tcp_input+0xafc>
    {
      pbuf_free(inseg.p);
   8a818:	4b20      	ldr	r3, [pc, #128]	; (8a89c <tcp_input+0xb24>)
   8a81a:	4798      	blx	r3
      inseg.p = NULL;
   8a81c:	2200      	movs	r2, #0
   8a81e:	4b1e      	ldr	r3, [pc, #120]	; (8a898 <tcp_input+0xb20>)
   8a820:	605a      	str	r2, [r3, #4]
   8a822:	e027      	b.n	8a874 <tcp_input+0xafc>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
   8a824:	4b1e      	ldr	r3, [pc, #120]	; (8a8a0 <tcp_input+0xb28>)
   8a826:	681b      	ldr	r3, [r3, #0]
   8a828:	8998      	ldrh	r0, [r3, #12]
   8a82a:	4b1e      	ldr	r3, [pc, #120]	; (8a8a4 <tcp_input+0xb2c>)
   8a82c:	4798      	blx	r3
   8a82e:	f000 0004 	and.w	r0, r0, #4
   8a832:	b283      	uxth	r3, r0
   8a834:	b9db      	cbnz	r3, 8a86e <tcp_input+0xaf6>
      TCP_STATS_INC(tcp.proterr);
   8a836:	4b1c      	ldr	r3, [pc, #112]	; (8a8a8 <tcp_input+0xb30>)
   8a838:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
   8a83c:	3201      	adds	r2, #1
   8a83e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
   8a842:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
   8a846:	3201      	adds	r2, #1
   8a848:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(ackno, seqno + tcplen,
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
   8a84c:	4b14      	ldr	r3, [pc, #80]	; (8a8a0 <tcp_input+0xb28>)
   8a84e:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
   8a850:	4a16      	ldr	r2, [pc, #88]	; (8a8ac <tcp_input+0xb34>)
   8a852:	6810      	ldr	r0, [r2, #0]
   8a854:	4a16      	ldr	r2, [pc, #88]	; (8a8b0 <tcp_input+0xb38>)
   8a856:	8811      	ldrh	r1, [r2, #0]
   8a858:	4a16      	ldr	r2, [pc, #88]	; (8a8b4 <tcp_input+0xb3c>)
   8a85a:	6812      	ldr	r2, [r2, #0]
   8a85c:	885c      	ldrh	r4, [r3, #2]
   8a85e:	9400      	str	r4, [sp, #0]
   8a860:	881b      	ldrh	r3, [r3, #0]
   8a862:	9301      	str	r3, [sp, #4]
   8a864:	4411      	add	r1, r2
   8a866:	4a14      	ldr	r2, [pc, #80]	; (8a8b8 <tcp_input+0xb40>)
   8a868:	4b14      	ldr	r3, [pc, #80]	; (8a8bc <tcp_input+0xb44>)
   8a86a:	4c15      	ldr	r4, [pc, #84]	; (8a8c0 <tcp_input+0xb48>)
   8a86c:	47a0      	blx	r4
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
   8a86e:	4628      	mov	r0, r5
   8a870:	4b0a      	ldr	r3, [pc, #40]	; (8a89c <tcp_input+0xb24>)
   8a872:	4798      	blx	r3
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
   8a874:	4b13      	ldr	r3, [pc, #76]	; (8a8c4 <tcp_input+0xb4c>)
   8a876:	4798      	blx	r3
   8a878:	b900      	cbnz	r0, 8a87c <tcp_input+0xb04>
   8a87a:	e7fe      	b.n	8a87a <tcp_input+0xb02>
  PERF_STOP("tcp_input");
}
   8a87c:	b003      	add	sp, #12
   8a87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a882:	bf00      	nop
   8a884:	00088ff5 	.word	0x00088ff5
   8a888:	200759dc 	.word	0x200759dc
   8a88c:	200759d9 	.word	0x200759d9
   8a890:	200768f0 	.word	0x200768f0
   8a894:	0008b091 	.word	0x0008b091
   8a898:	200759e4 	.word	0x200759e4
   8a89c:	00088045 	.word	0x00088045
   8a8a0:	200759c8 	.word	0x200759c8
   8a8a4:	000864dd 	.word	0x000864dd
   8a8a8:	20076788 	.word	0x20076788
   8a8ac:	200759d4 	.word	0x200759d4
   8a8b0:	200759d0 	.word	0x200759d0
   8a8b4:	200759cc 	.word	0x200759cc
   8a8b8:	20075b64 	.word	0x20075b64
   8a8bc:	20075b5c 	.word	0x20075b5c
   8a8c0:	0008b38d 	.word	0x0008b38d
   8a8c4:	00088d45 	.word	0x00088d45

0008a8c8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
   8a8c8:	b538      	push	{r3, r4, r5, lr}
   8a8ca:	460c      	mov	r4, r1
   8a8cc:	461d      	mov	r5, r3
   8a8ce:	9904      	ldr	r1, [sp, #16]
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = TCP_MSS;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
   8a8d0:	4294      	cmp	r4, r2
   8a8d2:	d219      	bcs.n	8a908 <tcp_pbuf_prealloc+0x40>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
   8a8d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   8a8d8:	f013 0f02 	tst.w	r3, #2
   8a8dc:	d10b      	bne.n	8a8f6 <tcp_pbuf_prealloc+0x2e>
        (!(pcb->flags & TF_NODELAY) &&
   8a8de:	f891 3020 	ldrb.w	r3, [r1, #32]
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
   8a8e2:	f013 0f40 	tst.w	r3, #64	; 0x40
   8a8e6:	d111      	bne.n	8a90c <tcp_pbuf_prealloc+0x44>
        (!(pcb->flags & TF_NODELAY) &&
   8a8e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   8a8ec:	b11b      	cbz	r3, 8a8f6 <tcp_pbuf_prealloc+0x2e>
         (!first_seg ||
   8a8ee:	6f4b      	ldr	r3, [r1, #116]	; 0x74
   8a8f0:	b90b      	cbnz	r3, 8a8f6 <tcp_pbuf_prealloc+0x2e>
          pcb->unsent != NULL ||
   8a8f2:	6f8b      	ldr	r3, [r1, #120]	; 0x78
   8a8f4:	b163      	cbz	r3, 8a910 <tcp_pbuf_prealloc+0x48>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
   8a8f6:	f204 53df 	addw	r3, r4, #1503	; 0x5df
   8a8fa:	f023 0303 	bic.w	r3, r3, #3
   8a8fe:	4293      	cmp	r3, r2
   8a900:	bfb8      	it	lt
   8a902:	461a      	movlt	r2, r3
   8a904:	b291      	uxth	r1, r2
   8a906:	e004      	b.n	8a912 <tcp_pbuf_prealloc+0x4a>
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  struct pbuf *p;
  u16_t alloc = length;
   8a908:	4621      	mov	r1, r4
   8a90a:	e002      	b.n	8a912 <tcp_pbuf_prealloc+0x4a>
   8a90c:	4621      	mov	r1, r4
   8a90e:	e000      	b.n	8a912 <tcp_pbuf_prealloc+0x4a>
   8a910:	4621      	mov	r1, r4
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
   8a912:	2200      	movs	r2, #0
   8a914:	4b06      	ldr	r3, [pc, #24]	; (8a930 <tcp_pbuf_prealloc+0x68>)
   8a916:	4798      	blx	r3
  if (p == NULL) {
   8a918:	b140      	cbz	r0, 8a92c <tcp_pbuf_prealloc+0x64>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
   8a91a:	6803      	ldr	r3, [r0, #0]
   8a91c:	b103      	cbz	r3, 8a920 <tcp_pbuf_prealloc+0x58>
   8a91e:	e7fe      	b.n	8a91e <tcp_pbuf_prealloc+0x56>
  *oversize = p->len - length;
   8a920:	8943      	ldrh	r3, [r0, #10]
   8a922:	1b1b      	subs	r3, r3, r4
   8a924:	802b      	strh	r3, [r5, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
   8a926:	8104      	strh	r4, [r0, #8]
   8a928:	8144      	strh	r4, [r0, #10]
  return p;
   8a92a:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  if (p == NULL) {
    return NULL;
   8a92c:	2000      	movs	r0, #0
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  return p;
}
   8a92e:	bd38      	pop	{r3, r4, r5, pc}
   8a930:	000880d1 	.word	0x000880d1

0008a934 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
   8a934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a938:	4680      	mov	r8, r0
   8a93a:	460e      	mov	r6, r1
   8a93c:	4691      	mov	r9, r2
   8a93e:	469a      	mov	sl, r3
   8a940:	f89d 5020 	ldrb.w	r5, [sp, #32]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
   8a944:	f005 0701 	and.w	r7, r5, #1
   8a948:	f005 0302 	and.w	r3, r5, #2
   8a94c:	b2db      	uxtb	r3, r3
   8a94e:	2b00      	cmp	r3, #0
   8a950:	bf0c      	ite	eq
   8a952:	2300      	moveq	r3, #0
   8a954:	230c      	movne	r3, #12
   8a956:	eb03 0787 	add.w	r7, r3, r7, lsl #2

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
   8a95a:	2004      	movs	r0, #4
   8a95c:	4b21      	ldr	r3, [pc, #132]	; (8a9e4 <tcp_create_segment+0xb0>)
   8a95e:	4798      	blx	r3
   8a960:	4604      	mov	r4, r0
   8a962:	b928      	cbnz	r0, 8a970 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
   8a964:	4630      	mov	r0, r6
   8a966:	4b20      	ldr	r3, [pc, #128]	; (8a9e8 <tcp_create_segment+0xb4>)
   8a968:	4798      	blx	r3
    return NULL;
   8a96a:	2000      	movs	r0, #0
   8a96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  seg->flags = optflags;
   8a970:	7285      	strb	r5, [r0, #10]
  seg->next = NULL;
   8a972:	2300      	movs	r3, #0
   8a974:	6003      	str	r3, [r0, #0]
  seg->p = p;
   8a976:	6046      	str	r6, [r0, #4]
  seg->len = p->tot_len - optlen;
   8a978:	8933      	ldrh	r3, [r6, #8]
   8a97a:	1bdb      	subs	r3, r3, r7
   8a97c:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
   8a97e:	4630      	mov	r0, r6
   8a980:	2114      	movs	r1, #20
   8a982:	4b1a      	ldr	r3, [pc, #104]	; (8a9ec <tcp_create_segment+0xb8>)
   8a984:	4798      	blx	r3
   8a986:	b158      	cbz	r0, 8a9a0 <tcp_create_segment+0x6c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
   8a988:	4b19      	ldr	r3, [pc, #100]	; (8a9f0 <tcp_create_segment+0xbc>)
   8a98a:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   8a98e:	3201      	adds	r2, #1
   8a990:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
   8a994:	4620      	mov	r0, r4
   8a996:	4b17      	ldr	r3, [pc, #92]	; (8a9f4 <tcp_create_segment+0xc0>)
   8a998:	4798      	blx	r3
    return NULL;
   8a99a:	2000      	movs	r0, #0
   8a99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
   8a9a0:	6863      	ldr	r3, [r4, #4]
   8a9a2:	685e      	ldr	r6, [r3, #4]
   8a9a4:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = htons(pcb->local_port);
   8a9a6:	f8b8 001c 	ldrh.w	r0, [r8, #28]
   8a9aa:	4d13      	ldr	r5, [pc, #76]	; (8a9f8 <tcp_create_segment+0xc4>)
   8a9ac:	47a8      	blx	r5
   8a9ae:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
   8a9b0:	68e6      	ldr	r6, [r4, #12]
   8a9b2:	f8b8 001e 	ldrh.w	r0, [r8, #30]
   8a9b6:	47a8      	blx	r5
   8a9b8:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = htonl(seqno);
   8a9ba:	68e6      	ldr	r6, [r4, #12]
   8a9bc:	4650      	mov	r0, sl
   8a9be:	4b0f      	ldr	r3, [pc, #60]	; (8a9fc <tcp_create_segment+0xc8>)
   8a9c0:	4798      	blx	r3
   8a9c2:	6070      	str	r0, [r6, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
   8a9c4:	68e6      	ldr	r6, [r4, #12]
   8a9c6:	02bf      	lsls	r7, r7, #10
   8a9c8:	f507 40a0 	add.w	r0, r7, #20480	; 0x5000
   8a9cc:	ea40 0009 	orr.w	r0, r0, r9
   8a9d0:	47a8      	blx	r5
   8a9d2:	81b0      	strh	r0, [r6, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
   8a9d4:	68e3      	ldr	r3, [r4, #12]
   8a9d6:	2200      	movs	r2, #0
   8a9d8:	749a      	strb	r2, [r3, #18]
   8a9da:	74da      	strb	r2, [r3, #19]
  return seg;
   8a9dc:	4620      	mov	r0, r4
} 
   8a9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a9e2:	bf00      	nop
   8a9e4:	00087ce1 	.word	0x00087ce1
   8a9e8:	00088045 	.word	0x00088045
   8a9ec:	00087fd1 	.word	0x00087fd1
   8a9f0:	20076788 	.word	0x20076788
   8a9f4:	000888cd 	.word	0x000888cd
   8a9f8:	000864d1 	.word	0x000864d1
   8a9fc:	000864e9 	.word	0x000864e9

0008aa00 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
   8aa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8aa04:	4605      	mov	r5, r0
   8aa06:	4688      	mov	r8, r1
   8aa08:	4699      	mov	r9, r3
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   8aa0a:	3214      	adds	r2, #20
   8aa0c:	4411      	add	r1, r2
   8aa0e:	2001      	movs	r0, #1
   8aa10:	b289      	uxth	r1, r1
   8aa12:	2200      	movs	r2, #0
   8aa14:	4b18      	ldr	r3, [pc, #96]	; (8aa78 <tcp_output_alloc_header+0x78>)
   8aa16:	4798      	blx	r3
  if (p != NULL) {
   8aa18:	4607      	mov	r7, r0
   8aa1a:	b348      	cbz	r0, 8aa70 <tcp_output_alloc_header+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
   8aa1c:	8942      	ldrh	r2, [r0, #10]
   8aa1e:	f108 0314 	add.w	r3, r8, #20
   8aa22:	429a      	cmp	r2, r3
   8aa24:	da00      	bge.n	8aa28 <tcp_output_alloc_header+0x28>
   8aa26:	e7fe      	b.n	8aa26 <tcp_output_alloc_header+0x26>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
   8aa28:	6844      	ldr	r4, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
   8aa2a:	8ba8      	ldrh	r0, [r5, #28]
   8aa2c:	4e13      	ldr	r6, [pc, #76]	; (8aa7c <tcp_output_alloc_header+0x7c>)
   8aa2e:	47b0      	blx	r6
   8aa30:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = htons(pcb->remote_port);
   8aa32:	8be8      	ldrh	r0, [r5, #30]
   8aa34:	47b0      	blx	r6
   8aa36:	8060      	strh	r0, [r4, #2]
    tcphdr->seqno = seqno_be;
   8aa38:	f8c4 9004 	str.w	r9, [r4, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
   8aa3c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   8aa3e:	4b10      	ldr	r3, [pc, #64]	; (8aa80 <tcp_output_alloc_header+0x80>)
   8aa40:	4798      	blx	r3
   8aa42:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
   8aa44:	ea4f 0098 	mov.w	r0, r8, lsr #2
   8aa48:	3005      	adds	r0, #5
   8aa4a:	0300      	lsls	r0, r0, #12
   8aa4c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
   8aa50:	f040 0010 	orr.w	r0, r0, #16
   8aa54:	47b0      	blx	r6
   8aa56:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
   8aa58:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
   8aa5a:	47b0      	blx	r6
   8aa5c:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
   8aa5e:	2300      	movs	r3, #0
   8aa60:	7423      	strb	r3, [r4, #16]
   8aa62:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
   8aa64:	74a3      	strb	r3, [r4, #18]
   8aa66:	74e3      	strb	r3, [r4, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   8aa68:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
   8aa6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   8aa6c:	4413      	add	r3, r2
   8aa6e:	62eb      	str	r3, [r5, #44]	; 0x2c
  }
  return p;
}
   8aa70:	4638      	mov	r0, r7
   8aa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8aa76:	bf00      	nop
   8aa78:	000880d1 	.word	0x000880d1
   8aa7c:	000864d1 	.word	0x000864d1
   8aa80:	000864e9 	.word	0x000864e9

0008aa84 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
   8aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aa88:	b08f      	sub	sp, #60	; 0x3c
   8aa8a:	4604      	mov	r4, r0
   8aa8c:	4693      	mov	fp, r2
   8aa8e:	9307      	str	r3, [sp, #28]
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
   8aa90:	2300      	movs	r3, #0
   8aa92:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
   8aa96:	9106      	str	r1, [sp, #24]
   8aa98:	b901      	cbnz	r1, 8aa9c <tcp_write+0x18>
   8aa9a:	e7fe      	b.n	8aa9a <tcp_write+0x16>
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
   8aa9c:	7c03      	ldrb	r3, [r0, #16]
   8aa9e:	2b07      	cmp	r3, #7
   8aaa0:	d004      	beq.n	8aaac <tcp_write+0x28>
      (pcb->state != CLOSE_WAIT) &&
   8aaa2:	3b02      	subs	r3, #2
   8aaa4:	b2db      	uxtb	r3, r3
   8aaa6:	2b02      	cmp	r3, #2
   8aaa8:	f200 81c8 	bhi.w	8ae3c <tcp_write+0x3b8>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
   8aaac:	f1bb 0f00 	cmp.w	fp, #0
   8aab0:	f000 81bc 	beq.w	8ae2c <tcp_write+0x3a8>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
   8aab4:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   8aab8:	455b      	cmp	r3, fp
   8aaba:	d207      	bcs.n	8aacc <tcp_write+0x48>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
   8aabc:	f894 3020 	ldrb.w	r3, [r4, #32]
   8aac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8aac4:	f884 3020 	strb.w	r3, [r4, #32]
    return ERR_MEM;
   8aac8:	23ff      	movs	r3, #255	; 0xff
   8aaca:	e1ad      	b.n	8ae28 <tcp_write+0x3a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
   8aacc:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   8aad0:	2b08      	cmp	r3, #8
   8aad2:	d90d      	bls.n	8aaf0 <tcp_write+0x6c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
   8aad4:	4b8f      	ldr	r3, [pc, #572]	; (8ad14 <tcp_write+0x290>)
   8aad6:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
   8aada:	3201      	adds	r2, #1
   8aadc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
   8aae0:	f894 3020 	ldrb.w	r3, [r4, #32]
   8aae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8aae8:	f884 3020 	strb.w	r3, [r4, #32]
    return ERR_MEM;
   8aaec:	23ff      	movs	r3, #255	; 0xff
   8aaee:	e19b      	b.n	8ae28 <tcp_write+0x3a4>
  }
  if (pcb->snd_queuelen != 0) {
   8aaf0:	b143      	cbz	r3, 8ab04 <tcp_write+0x80>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
   8aaf2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8aaf4:	2b00      	cmp	r3, #0
   8aaf6:	f040 8199 	bne.w	8ae2c <tcp_write+0x3a8>
   8aafa:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8aafc:	2b00      	cmp	r3, #0
   8aafe:	f040 81b0 	bne.w	8ae62 <tcp_write+0x3de>
   8ab02:	e7fe      	b.n	8ab02 <tcp_write+0x7e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
   8ab04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8ab06:	b91b      	cbnz	r3, 8ab10 <tcp_write+0x8c>
   8ab08:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8ab0a:	2b00      	cmp	r3, #0
   8ab0c:	f000 81ae 	beq.w	8ae6c <tcp_write+0x3e8>
   8ab10:	e7fe      	b.n	8ab10 <tcp_write+0x8c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);
   8ab12:	461e      	mov	r6, r3
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
   8ab14:	6833      	ldr	r3, [r6, #0]
   8ab16:	2b00      	cmp	r3, #0
   8ab18:	d1fb      	bne.n	8ab12 <tcp_write+0x8e>
   8ab1a:	4698      	mov	r8, r3
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
   8ab1c:	7ab3      	ldrb	r3, [r6, #10]
   8ab1e:	f003 0201 	and.w	r2, r3, #1
   8ab22:	f003 0302 	and.w	r3, r3, #2
   8ab26:	b2db      	uxtb	r3, r3
   8ab28:	2b00      	cmp	r3, #0
   8ab2a:	bf0c      	ite	eq
   8ab2c:	2300      	moveq	r3, #0
   8ab2e:	230c      	movne	r3, #12
    space = pcb->mss - (last_unsent->len + unsent_optlen);
   8ab30:	8931      	ldrh	r1, [r6, #8]
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
   8ab32:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   8ab34:	1a40      	subs	r0, r0, r1
    space = pcb->mss - (last_unsent->len + unsent_optlen);
   8ab36:	eba0 0282 	sub.w	r2, r0, r2, lsl #2
   8ab3a:	1ad2      	subs	r2, r2, r3
   8ab3c:	b292      	uxth	r2, r2
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
   8ab3e:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   8ab42:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if (oversize > 0) {
   8ab46:	b173      	cbz	r3, 8ab66 <tcp_write+0xe2>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
   8ab48:	459b      	cmp	fp, r3
   8ab4a:	bf34      	ite	cc
   8ab4c:	465d      	movcc	r5, fp
   8ab4e:	461d      	movcs	r5, r3
      pos += oversize_used;
      oversize -= oversize_used;
   8ab50:	1b5b      	subs	r3, r3, r5
   8ab52:	b29b      	uxth	r3, r3
   8ab54:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
   8ab58:	1b52      	subs	r2, r2, r5
   8ab5a:	b292      	uxth	r2, r2
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistend oversize vs. len", (oversize == 0) || (pos == len));
   8ab5c:	b133      	cbz	r3, 8ab6c <tcp_write+0xe8>
   8ab5e:	45ab      	cmp	fp, r5
   8ab60:	f000 816e 	beq.w	8ae40 <tcp_write+0x3bc>
   8ab64:	e7fe      	b.n	8ab64 <tcp_write+0xe0>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
   8ab66:	46c1      	mov	r9, r8
  u16_t pos = 0; /* position in 'arg' data */
   8ab68:	2500      	movs	r5, #0
   8ab6a:	e000      	b.n	8ab6e <tcp_write+0xea>
   8ab6c:	46b1      	mov	r9, r6
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
   8ab6e:	45ab      	cmp	fp, r5
   8ab70:	f240 8167 	bls.w	8ae42 <tcp_write+0x3be>
   8ab74:	b11a      	cbz	r2, 8ab7e <tcp_write+0xfa>
   8ab76:	b971      	cbnz	r1, 8ab96 <tcp_write+0x112>
   8ab78:	46aa      	mov	sl, r5
   8ab7a:	2700      	movs	r7, #0
   8ab7c:	e001      	b.n	8ab82 <tcp_write+0xfe>
   8ab7e:	46aa      	mov	sl, r5
   8ab80:	2700      	movs	r7, #0
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
      }

      pos += seglen;
   8ab82:	f04f 0800 	mov.w	r8, #0
   8ab86:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
   8ab8a:	9a07      	ldr	r2, [sp, #28]
   8ab8c:	f002 0201 	and.w	r2, r2, #1
   8ab90:	920a      	str	r2, [sp, #40]	; 0x28
   8ab92:	960b      	str	r6, [sp, #44]	; 0x2c
   8ab94:	e048      	b.n	8ac28 <tcp_write+0x1a4>
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
      u16_t seglen = space < len - pos ? space : len - pos;
   8ab96:	ebc5 090b 	rsb	r9, r5, fp
   8ab9a:	4591      	cmp	r9, r2
   8ab9c:	bfa8      	it	ge
   8ab9e:	4691      	movge	r9, r2
   8aba0:	fa1f f889 	uxth.w	r8, r9
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
   8aba4:	9b07      	ldr	r3, [sp, #28]
   8aba6:	f013 0f01 	tst.w	r3, #1
   8abaa:	d014      	beq.n	8abd6 <tcp_write+0x152>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
   8abac:	9400      	str	r4, [sp, #0]
   8abae:	9301      	str	r3, [sp, #4]
   8abb0:	2301      	movs	r3, #1
   8abb2:	9302      	str	r3, [sp, #8]
   8abb4:	2003      	movs	r0, #3
   8abb6:	4641      	mov	r1, r8
   8abb8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   8abbc:	4f56      	ldr	r7, [pc, #344]	; (8ad18 <tcp_write+0x294>)
   8abbe:	47b8      	blx	r7
   8abc0:	4607      	mov	r7, r0
   8abc2:	2800      	cmp	r0, #0
   8abc4:	f000 8140 	beq.w	8ae48 <tcp_write+0x3c4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
   8abc8:	6840      	ldr	r0, [r0, #4]
   8abca:	9906      	ldr	r1, [sp, #24]
   8abcc:	4429      	add	r1, r5
   8abce:	4642      	mov	r2, r8
   8abd0:	4b52      	ldr	r3, [pc, #328]	; (8ad1c <tcp_write+0x298>)
   8abd2:	4798      	blx	r3
   8abd4:	e00b      	b.n	8abee <tcp_write+0x16a>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
   8abd6:	2003      	movs	r0, #3
   8abd8:	4641      	mov	r1, r8
   8abda:	2201      	movs	r2, #1
   8abdc:	4b50      	ldr	r3, [pc, #320]	; (8ad20 <tcp_write+0x29c>)
   8abde:	4798      	blx	r3
   8abe0:	4607      	mov	r7, r0
   8abe2:	2800      	cmp	r0, #0
   8abe4:	f000 8130 	beq.w	8ae48 <tcp_write+0x3c4>
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
   8abe8:	9b06      	ldr	r3, [sp, #24]
   8abea:	442b      	add	r3, r5
   8abec:	6043      	str	r3, [r0, #4]
      }

      pos += seglen;
   8abee:	44a8      	add	r8, r5
   8abf0:	fa1f f888 	uxth.w	r8, r8
      queuelen += pbuf_clen(concat_p);
   8abf4:	4638      	mov	r0, r7
   8abf6:	4b4b      	ldr	r3, [pc, #300]	; (8ad24 <tcp_write+0x2a0>)
   8abf8:	4798      	blx	r3
   8abfa:	9a05      	ldr	r2, [sp, #20]
   8abfc:	4410      	add	r0, r2
   8abfe:	b280      	uxth	r0, r0
   8ac00:	9005      	str	r0, [sp, #20]
   8ac02:	46aa      	mov	sl, r5
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
      }

      pos += seglen;
   8ac04:	4645      	mov	r5, r8
   8ac06:	e004      	b.n	8ac12 <tcp_write+0x18e>
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
  u16_t oversize_used = 0;
   8ac08:	f04f 0a00 	mov.w	sl, #0
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  u16_t pos = 0; /* position in 'arg' data */
   8ac0c:	4655      	mov	r5, sl
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
   8ac0e:	4656      	mov	r6, sl
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
   8ac10:	4657      	mov	r7, sl
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
   8ac12:	45ab      	cmp	fp, r5
   8ac14:	d8b5      	bhi.n	8ab82 <tcp_write+0xfe>
   8ac16:	46b1      	mov	r9, r6
   8ac18:	f04f 0800 	mov.w	r8, #0
   8ac1c:	e074      	b.n	8ad08 <tcp_write+0x284>
      pos += seglen;
      queuelen += pbuf_clen(concat_p);
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
   8ac1e:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   8ac22:	2b00      	cmp	r3, #0
   8ac24:	d0f0      	beq.n	8ac08 <tcp_write+0x184>
   8ac26:	e7fe      	b.n	8ac26 <tcp_write+0x1a2>
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
    u16_t max_len = pcb->mss - optlen;
   8ac28:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
   8ac2a:	ebc5 060b 	rsb	r6, r5, fp
    u16_t max_len = pcb->mss - optlen;
    u16_t seglen = left > max_len ? max_len : left;
   8ac2e:	b2b6      	uxth	r6, r6
   8ac30:	4296      	cmp	r6, r2
   8ac32:	bf28      	it	cs
   8ac34:	4616      	movcs	r6, r2
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
   8ac36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ac38:	b1eb      	cbz	r3, 8ac76 <tcp_write+0x1f2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, pcb->mss, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
   8ac3a:	9400      	str	r4, [sp, #0]
   8ac3c:	9b07      	ldr	r3, [sp, #28]
   8ac3e:	9301      	str	r3, [sp, #4]
   8ac40:	f1d8 0301 	rsbs	r3, r8, #1
   8ac44:	bf38      	it	cc
   8ac46:	2300      	movcc	r3, #0
   8ac48:	9302      	str	r3, [sp, #8]
   8ac4a:	2000      	movs	r0, #0
   8ac4c:	4631      	mov	r1, r6
   8ac4e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   8ac52:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8ad18 <tcp_write+0x294>
   8ac56:	47e0      	blx	ip
   8ac58:	4681      	mov	r9, r0
   8ac5a:	2800      	cmp	r0, #0
   8ac5c:	f000 80bb 	beq.w	8add6 <tcp_write+0x352>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
   8ac60:	8943      	ldrh	r3, [r0, #10]
   8ac62:	42b3      	cmp	r3, r6
   8ac64:	d200      	bcs.n	8ac68 <tcp_write+0x1e4>
   8ac66:	e7fe      	b.n	8ac66 <tcp_write+0x1e2>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
   8ac68:	6840      	ldr	r0, [r0, #4]
   8ac6a:	9906      	ldr	r1, [sp, #24]
   8ac6c:	4429      	add	r1, r5
   8ac6e:	4632      	mov	r2, r6
   8ac70:	4b2a      	ldr	r3, [pc, #168]	; (8ad1c <tcp_write+0x298>)
   8ac72:	4798      	blx	r3
   8ac74:	e01d      	b.n	8acb2 <tcp_write+0x22e>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
   8ac76:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   8ac7a:	b103      	cbz	r3, 8ac7e <tcp_write+0x1fa>
   8ac7c:	e7fe      	b.n	8ac7c <tcp_write+0x1f8>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
   8ac7e:	2000      	movs	r0, #0
   8ac80:	4631      	mov	r1, r6
   8ac82:	2201      	movs	r2, #1
   8ac84:	4b26      	ldr	r3, [pc, #152]	; (8ad20 <tcp_write+0x29c>)
   8ac86:	4798      	blx	r3
   8ac88:	9008      	str	r0, [sp, #32]
   8ac8a:	2800      	cmp	r0, #0
   8ac8c:	f000 80a3 	beq.w	8add6 <tcp_write+0x352>
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
   8ac90:	9b06      	ldr	r3, [sp, #24]
   8ac92:	442b      	add	r3, r5
   8ac94:	6043      	str	r3, [r0, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
   8ac96:	2000      	movs	r0, #0
   8ac98:	4601      	mov	r1, r0
   8ac9a:	4602      	mov	r2, r0
   8ac9c:	4b20      	ldr	r3, [pc, #128]	; (8ad20 <tcp_write+0x29c>)
   8ac9e:	4798      	blx	r3
   8aca0:	4681      	mov	r9, r0
   8aca2:	b918      	cbnz	r0, 8acac <tcp_write+0x228>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
   8aca4:	9808      	ldr	r0, [sp, #32]
   8aca6:	4b20      	ldr	r3, [pc, #128]	; (8ad28 <tcp_write+0x2a4>)
   8aca8:	4798      	blx	r3
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
   8acaa:	e094      	b.n	8add6 <tcp_write+0x352>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
   8acac:	9908      	ldr	r1, [sp, #32]
   8acae:	4a1f      	ldr	r2, [pc, #124]	; (8ad2c <tcp_write+0x2a8>)
   8acb0:	4790      	blx	r2
    }

    queuelen += pbuf_clen(p);
   8acb2:	4648      	mov	r0, r9
   8acb4:	4b1b      	ldr	r3, [pc, #108]	; (8ad24 <tcp_write+0x2a0>)
   8acb6:	4798      	blx	r3
   8acb8:	9b05      	ldr	r3, [sp, #20]
   8acba:	4418      	add	r0, r3
   8acbc:	b280      	uxth	r0, r0
   8acbe:	9005      	str	r0, [sp, #20]

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
   8acc0:	2809      	cmp	r0, #9
   8acc2:	d903      	bls.n	8accc <tcp_write+0x248>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
   8acc4:	4648      	mov	r0, r9
   8acc6:	4b18      	ldr	r3, [pc, #96]	; (8ad28 <tcp_write+0x2a4>)
   8acc8:	4798      	blx	r3
      goto memerr;
   8acca:	e084      	b.n	8add6 <tcp_write+0x352>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
   8accc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   8acce:	2200      	movs	r2, #0
   8acd0:	9200      	str	r2, [sp, #0]
   8acd2:	4620      	mov	r0, r4
   8acd4:	4649      	mov	r1, r9
   8acd6:	442b      	add	r3, r5
   8acd8:	f8df c054 	ldr.w	ip, [pc, #84]	; 8ad30 <tcp_write+0x2ac>
   8acdc:	47e0      	blx	ip
   8acde:	4603      	mov	r3, r0
   8ace0:	2800      	cmp	r0, #0
   8ace2:	d078      	beq.n	8add6 <tcp_write+0x352>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
   8ace4:	f1b8 0f00 	cmp.w	r8, #0
   8ace8:	d005      	beq.n	8acf6 <tcp_write+0x272>
      queue = seg;
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
   8acea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8acec:	b902      	cbnz	r2, 8acf0 <tcp_write+0x26c>
   8acee:	e7fe      	b.n	8acee <tcp_write+0x26a>
      prev_seg->next = seg;
   8acf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8acf2:	6010      	str	r0, [r2, #0]
   8acf4:	e000      	b.n	8acf8 <tcp_write+0x274>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
   8acf6:	4680      	mov	r8, r0

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
   8acf8:	4435      	add	r5, r6
   8acfa:	b2ad      	uxth	r5, r5
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
   8acfc:	45ab      	cmp	fp, r5
   8acfe:	d901      	bls.n	8ad04 <tcp_write+0x280>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
   8ad00:	9309      	str	r3, [sp, #36]	; 0x24
   8ad02:	e791      	b.n	8ac28 <tcp_write+0x1a4>
   8ad04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   8ad06:	4699      	mov	r9, r3
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
   8ad08:	f1ba 0f00 	cmp.w	sl, #0
   8ad0c:	d029      	beq.n	8ad62 <tcp_write+0x2de>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
   8ad0e:	6875      	ldr	r5, [r6, #4]
   8ad10:	b325      	cbz	r5, 8ad5c <tcp_write+0x2d8>
   8ad12:	e010      	b.n	8ad36 <tcp_write+0x2b2>
   8ad14:	20076788 	.word	0x20076788
   8ad18:	0008a8c9 	.word	0x0008a8c9
   8ad1c:	0008cca9 	.word	0x0008cca9
   8ad20:	000880d1 	.word	0x000880d1
   8ad24:	000882bd 	.word	0x000882bd
   8ad28:	00088045 	.word	0x00088045
   8ad2c:	000882f5 	.word	0x000882f5
   8ad30:	0008a935 	.word	0x0008a935
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
   8ad34:	461d      	mov	r5, r3
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
      p->tot_len += oversize_used;
   8ad36:	892b      	ldrh	r3, [r5, #8]
   8ad38:	4453      	add	r3, sl
   8ad3a:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
   8ad3c:	682b      	ldr	r3, [r5, #0]
   8ad3e:	2b00      	cmp	r3, #0
   8ad40:	d1f8      	bne.n	8ad34 <tcp_write+0x2b0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
   8ad42:	8968      	ldrh	r0, [r5, #10]
   8ad44:	686b      	ldr	r3, [r5, #4]
   8ad46:	4418      	add	r0, r3
   8ad48:	9906      	ldr	r1, [sp, #24]
   8ad4a:	4652      	mov	r2, sl
   8ad4c:	4b4b      	ldr	r3, [pc, #300]	; (8ae7c <tcp_write+0x3f8>)
   8ad4e:	4798      	blx	r3
        p->len += oversize_used;
   8ad50:	896b      	ldrh	r3, [r5, #10]
   8ad52:	4453      	add	r3, sl
   8ad54:	816b      	strh	r3, [r5, #10]
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
   8ad56:	682b      	ldr	r3, [r5, #0]
   8ad58:	2b00      	cmp	r3, #0
   8ad5a:	d1eb      	bne.n	8ad34 <tcp_write+0x2b0>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
   8ad5c:	8933      	ldrh	r3, [r6, #8]
   8ad5e:	4453      	add	r3, sl
   8ad60:	8133      	strh	r3, [r6, #8]
#if TCP_OVERSIZE_DBGCHECK
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
   8ad62:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   8ad66:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
   8ad6a:	b157      	cbz	r7, 8ad82 <tcp_write+0x2fe>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
   8ad6c:	b906      	cbnz	r6, 8ad70 <tcp_write+0x2ec>
   8ad6e:	e7fe      	b.n	8ad6e <tcp_write+0x2ea>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
   8ad70:	6870      	ldr	r0, [r6, #4]
   8ad72:	4639      	mov	r1, r7
   8ad74:	4b42      	ldr	r3, [pc, #264]	; (8ae80 <tcp_write+0x3fc>)
   8ad76:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
   8ad78:	893a      	ldrh	r2, [r7, #8]
   8ad7a:	8933      	ldrh	r3, [r6, #8]
   8ad7c:	4413      	add	r3, r2
   8ad7e:	8133      	strh	r3, [r6, #8]
   8ad80:	e003      	b.n	8ad8a <tcp_write+0x306>

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
   8ad82:	b916      	cbnz	r6, 8ad8a <tcp_write+0x306>
    pcb->unsent = queue;
   8ad84:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
   8ad88:	e001      	b.n	8ad8e <tcp_write+0x30a>
  } else {
    last_unsent->next = queue;
   8ad8a:	f8c6 8000 	str.w	r8, [r6]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
   8ad8e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   8ad90:	445b      	add	r3, fp
   8ad92:	66a3      	str	r3, [r4, #104]	; 0x68
  pcb->snd_buf -= len;
   8ad94:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   8ad98:	ebcb 0303 	rsb	r3, fp, r3
   8ad9c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  pcb->snd_queuelen = queuelen;
   8ada0:	9a05      	ldr	r2, [sp, #20]
   8ada2:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
   8ada6:	b122      	cbz	r2, 8adb2 <tcp_write+0x32e>
    LWIP_ASSERT("tcp_write: valid queue length",
   8ada8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8adaa:	b913      	cbnz	r3, 8adb2 <tcp_write+0x32e>
   8adac:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8adae:	b903      	cbnz	r3, 8adb2 <tcp_write+0x32e>
   8adb0:	e7fe      	b.n	8adb0 <tcp_write+0x32c>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
   8adb2:	f1b9 0f00 	cmp.w	r9, #0
   8adb6:	d02c      	beq.n	8ae12 <tcp_write+0x38e>
   8adb8:	f8d9 400c 	ldr.w	r4, [r9, #12]
   8adbc:	b35c      	cbz	r4, 8ae16 <tcp_write+0x392>
   8adbe:	9b07      	ldr	r3, [sp, #28]
   8adc0:	f013 0f02 	tst.w	r3, #2
   8adc4:	d129      	bne.n	8ae1a <tcp_write+0x396>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
   8adc6:	89a5      	ldrh	r5, [r4, #12]
   8adc8:	2008      	movs	r0, #8
   8adca:	4b2e      	ldr	r3, [pc, #184]	; (8ae84 <tcp_write+0x400>)
   8adcc:	4798      	blx	r3
   8adce:	4328      	orrs	r0, r5
   8add0:	81a0      	strh	r0, [r4, #12]
  }

  return ERR_OK;
   8add2:	2300      	movs	r3, #0
   8add4:	e028      	b.n	8ae28 <tcp_write+0x3a4>
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
   8add6:	f894 3020 	ldrb.w	r3, [r4, #32]
   8adda:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8adde:	f884 3020 	strb.w	r3, [r4, #32]
  TCP_STATS_INC(tcp.memerr);
   8ade2:	4b29      	ldr	r3, [pc, #164]	; (8ae88 <tcp_write+0x404>)
   8ade4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
   8ade8:	3201      	adds	r2, #1
   8adea:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
   8adee:	b117      	cbz	r7, 8adf6 <tcp_write+0x372>
    pbuf_free(concat_p);
   8adf0:	4638      	mov	r0, r7
   8adf2:	4b26      	ldr	r3, [pc, #152]	; (8ae8c <tcp_write+0x408>)
   8adf4:	4798      	blx	r3
  }
  if (queue != NULL) {
   8adf6:	f1b8 0f00 	cmp.w	r8, #0
   8adfa:	d002      	beq.n	8ae02 <tcp_write+0x37e>
    tcp_segs_free(queue);
   8adfc:	4640      	mov	r0, r8
   8adfe:	4b24      	ldr	r3, [pc, #144]	; (8ae90 <tcp_write+0x40c>)
   8ae00:	4798      	blx	r3
  }
  if (pcb->snd_queuelen != 0) {
   8ae02:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   8ae06:	b153      	cbz	r3, 8ae1e <tcp_write+0x39a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
   8ae08:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8ae0a:	b953      	cbnz	r3, 8ae22 <tcp_write+0x39e>
   8ae0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8ae0e:	b953      	cbnz	r3, 8ae26 <tcp_write+0x3a2>
   8ae10:	e7fe      	b.n	8ae10 <tcp_write+0x38c>
  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
   8ae12:	2300      	movs	r3, #0
   8ae14:	e008      	b.n	8ae28 <tcp_write+0x3a4>
   8ae16:	2300      	movs	r3, #0
   8ae18:	e006      	b.n	8ae28 <tcp_write+0x3a4>
   8ae1a:	2300      	movs	r3, #0
   8ae1c:	e004      	b.n	8ae28 <tcp_write+0x3a4>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
   8ae1e:	23ff      	movs	r3, #255	; 0xff
   8ae20:	e002      	b.n	8ae28 <tcp_write+0x3a4>
   8ae22:	23ff      	movs	r3, #255	; 0xff
   8ae24:	e000      	b.n	8ae28 <tcp_write+0x3a4>
   8ae26:	23ff      	movs	r3, #255	; 0xff
   8ae28:	b258      	sxtb	r0, r3
   8ae2a:	e023      	b.n	8ae74 <tcp_write+0x3f0>

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
   8ae2c:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
   8ae30:	9205      	str	r2, [sp, #20]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
   8ae32:	6f66      	ldr	r6, [r4, #116]	; 0x74
   8ae34:	2e00      	cmp	r6, #0
   8ae36:	f47f ae6d 	bne.w	8ab14 <tcp_write+0x90>
   8ae3a:	e6f0      	b.n	8ac1e <tcp_write+0x19a>
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
   8ae3c:	23f3      	movs	r3, #243	; 0xf3
   8ae3e:	e7f3      	b.n	8ae28 <tcp_write+0x3a4>
   8ae40:	46b1      	mov	r9, r6
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
   8ae42:	46aa      	mov	sl, r5
   8ae44:	2700      	movs	r7, #0
   8ae46:	e75f      	b.n	8ad08 <tcp_write+0x284>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
   8ae48:	f894 3020 	ldrb.w	r3, [r4, #32]
   8ae4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8ae50:	f884 3020 	strb.w	r3, [r4, #32]
  TCP_STATS_INC(tcp.memerr);
   8ae54:	4b0c      	ldr	r3, [pc, #48]	; (8ae88 <tcp_write+0x404>)
   8ae56:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
   8ae5a:	3201      	adds	r2, #1
   8ae5c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
   8ae60:	e7cf      	b.n	8ae02 <tcp_write+0x37e>

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
   8ae62:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   8ae66:	9305      	str	r3, [sp, #20]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
   8ae68:	6f66      	ldr	r6, [r4, #116]	; 0x74
   8ae6a:	e653      	b.n	8ab14 <tcp_write+0x90>

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
   8ae6c:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
   8ae70:	9205      	str	r2, [sp, #20]
   8ae72:	e6d4      	b.n	8ac1e <tcp_write+0x19a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
   8ae74:	b00f      	add	sp, #60	; 0x3c
   8ae76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ae7a:	bf00      	nop
   8ae7c:	0008cca9 	.word	0x0008cca9
   8ae80:	000882f5 	.word	0x000882f5
   8ae84:	000864d1 	.word	0x000864d1
   8ae88:	20076788 	.word	0x20076788
   8ae8c:	00088045 	.word	0x00088045
   8ae90:	000888f1 	.word	0x000888f1

0008ae94 <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
   8ae94:	b5f0      	push	{r4, r5, r6, r7, lr}
   8ae96:	b083      	sub	sp, #12
   8ae98:	4604      	mov	r4, r0
   8ae9a:	460d      	mov	r5, r1
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
   8ae9c:	f011 0f03 	tst.w	r1, #3
   8aea0:	d100      	bne.n	8aea4 <tcp_enqueue_flags+0x10>
   8aea2:	e7fe      	b.n	8aea2 <tcp_enqueue_flags+0xe>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
   8aea4:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   8aea8:	2b08      	cmp	r3, #8
   8aeaa:	d90d      	bls.n	8aec8 <tcp_enqueue_flags+0x34>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
   8aeac:	4b44      	ldr	r3, [pc, #272]	; (8afc0 <tcp_enqueue_flags+0x12c>)
   8aeae:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
   8aeb2:	3201      	adds	r2, #1
   8aeb4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
   8aeb8:	f890 3020 	ldrb.w	r3, [r0, #32]
   8aebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8aec0:	f880 3020 	strb.w	r3, [r0, #32]
    return ERR_MEM;
   8aec4:	23ff      	movs	r3, #255	; 0xff
   8aec6:	e068      	b.n	8af9a <tcp_enqueue_flags+0x106>
  }

  if (flags & TCP_SYN) {
   8aec8:	f3c1 0640 	ubfx	r6, r1, #1, #1
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
   8aecc:	00b7      	lsls	r7, r6, #2

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
   8aece:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
   8aed2:	b93b      	cbnz	r3, 8aee4 <tcp_enqueue_flags+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
   8aed4:	4b3a      	ldr	r3, [pc, #232]	; (8afc0 <tcp_enqueue_flags+0x12c>)
   8aed6:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
   8aeda:	3201      	adds	r2, #1
   8aedc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
   8aee0:	23ff      	movs	r3, #255	; 0xff
   8aee2:	e05a      	b.n	8af9a <tcp_enqueue_flags+0x106>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
   8aee4:	2000      	movs	r0, #0
   8aee6:	4639      	mov	r1, r7
   8aee8:	4602      	mov	r2, r0
   8aeea:	4b36      	ldr	r3, [pc, #216]	; (8afc4 <tcp_enqueue_flags+0x130>)
   8aeec:	4798      	blx	r3
   8aeee:	4601      	mov	r1, r0
   8aef0:	b968      	cbnz	r0, 8af0e <tcp_enqueue_flags+0x7a>
    pcb->flags |= TF_NAGLEMEMERR;
   8aef2:	f894 3020 	ldrb.w	r3, [r4, #32]
   8aef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8aefa:	f884 3020 	strb.w	r3, [r4, #32]
    TCP_STATS_INC(tcp.memerr);
   8aefe:	4b30      	ldr	r3, [pc, #192]	; (8afc0 <tcp_enqueue_flags+0x12c>)
   8af00:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
   8af04:	3201      	adds	r2, #1
   8af06:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
   8af0a:	23ff      	movs	r3, #255	; 0xff
   8af0c:	e045      	b.n	8af9a <tcp_enqueue_flags+0x106>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
   8af0e:	8943      	ldrh	r3, [r0, #10]
   8af10:	42bb      	cmp	r3, r7
   8af12:	d200      	bcs.n	8af16 <tcp_enqueue_flags+0x82>
   8af14:	e7fe      	b.n	8af14 <tcp_enqueue_flags+0x80>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
   8af16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   8af18:	9600      	str	r6, [sp, #0]
   8af1a:	4620      	mov	r0, r4
   8af1c:	462a      	mov	r2, r5
   8af1e:	4e2a      	ldr	r6, [pc, #168]	; (8afc8 <tcp_enqueue_flags+0x134>)
   8af20:	47b0      	blx	r6
   8af22:	4603      	mov	r3, r0
   8af24:	b968      	cbnz	r0, 8af42 <tcp_enqueue_flags+0xae>
    pcb->flags |= TF_NAGLEMEMERR;
   8af26:	f894 3020 	ldrb.w	r3, [r4, #32]
   8af2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8af2e:	f884 3020 	strb.w	r3, [r4, #32]
    TCP_STATS_INC(tcp.memerr);
   8af32:	4b23      	ldr	r3, [pc, #140]	; (8afc0 <tcp_enqueue_flags+0x12c>)
   8af34:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
   8af38:	3201      	adds	r2, #1
   8af3a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
   8af3e:	23ff      	movs	r3, #255	; 0xff
   8af40:	e02b      	b.n	8af9a <tcp_enqueue_flags+0x106>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % MEM_ALIGNMENT) == 0);
   8af42:	68c2      	ldr	r2, [r0, #12]
   8af44:	f012 0f03 	tst.w	r2, #3
   8af48:	d000      	beq.n	8af4c <tcp_enqueue_flags+0xb8>
   8af4a:	e7fe      	b.n	8af4a <tcp_enqueue_flags+0xb6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
   8af4c:	8902      	ldrh	r2, [r0, #8]
   8af4e:	b102      	cbz	r2, 8af52 <tcp_enqueue_flags+0xbe>
   8af50:	e7fe      	b.n	8af50 <tcp_enqueue_flags+0xbc>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
   8af52:	6f62      	ldr	r2, [r4, #116]	; 0x74
   8af54:	b90a      	cbnz	r2, 8af5a <tcp_enqueue_flags+0xc6>
    pcb->unsent = seg;
   8af56:	6760      	str	r0, [r4, #116]	; 0x74
   8af58:	e021      	b.n	8af9e <tcp_enqueue_flags+0x10a>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
   8af5a:	6811      	ldr	r1, [r2, #0]
   8af5c:	b109      	cbz	r1, 8af62 <tcp_enqueue_flags+0xce>
   8af5e:	460a      	mov	r2, r1
   8af60:	e7fb      	b.n	8af5a <tcp_enqueue_flags+0xc6>
    useg->next = seg;
   8af62:	6013      	str	r3, [r2, #0]
   8af64:	e01b      	b.n	8af9e <tcp_enqueue_flags+0x10a>
    pcb->snd_lbb++;
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  }
  if (flags & TCP_FIN) {
    pcb->flags |= TF_FIN;
   8af66:	f894 2020 	ldrb.w	r2, [r4, #32]
   8af6a:	f042 0220 	orr.w	r2, r2, #32
   8af6e:	f884 2020 	strb.w	r2, [r4, #32]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
   8af72:	f8b4 5070 	ldrh.w	r5, [r4, #112]	; 0x70
   8af76:	6858      	ldr	r0, [r3, #4]
   8af78:	4b14      	ldr	r3, [pc, #80]	; (8afcc <tcp_enqueue_flags+0x138>)
   8af7a:	4798      	blx	r3
   8af7c:	4428      	add	r0, r5
   8af7e:	b283      	uxth	r3, r0
   8af80:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
   8af84:	b123      	cbz	r3, 8af90 <tcp_enqueue_flags+0xfc>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
   8af86:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8af88:	b923      	cbnz	r3, 8af94 <tcp_enqueue_flags+0x100>
   8af8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8af8c:	b923      	cbnz	r3, 8af98 <tcp_enqueue_flags+0x104>
   8af8e:	e7fe      	b.n	8af8e <tcp_enqueue_flags+0xfa>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
   8af90:	2300      	movs	r3, #0
   8af92:	e002      	b.n	8af9a <tcp_enqueue_flags+0x106>
   8af94:	2300      	movs	r3, #0
   8af96:	e000      	b.n	8af9a <tcp_enqueue_flags+0x106>
   8af98:	2300      	movs	r3, #0
   8af9a:	b258      	sxtb	r0, r3
   8af9c:	e00e      	b.n	8afbc <tcp_enqueue_flags+0x128>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
    useg->next = seg;
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
   8af9e:	2200      	movs	r2, #0
   8afa0:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
    pcb->snd_lbb++;
   8afa4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   8afa6:	3201      	adds	r2, #1
   8afa8:	66a2      	str	r2, [r4, #104]	; 0x68
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
   8afaa:	f8b4 206e 	ldrh.w	r2, [r4, #110]	; 0x6e
   8afae:	3a01      	subs	r2, #1
   8afb0:	f8a4 206e 	strh.w	r2, [r4, #110]	; 0x6e
  }
  if (flags & TCP_FIN) {
   8afb4:	f015 0f01 	tst.w	r5, #1
   8afb8:	d1d5      	bne.n	8af66 <tcp_enqueue_flags+0xd2>
   8afba:	e7da      	b.n	8af72 <tcp_enqueue_flags+0xde>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
   8afbc:	b003      	add	sp, #12
   8afbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8afc0:	20076788 	.word	0x20076788
   8afc4:	000880d1 	.word	0x000880d1
   8afc8:	0008a935 	.word	0x0008a935
   8afcc:	000882bd 	.word	0x000882bd

0008afd0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
   8afd0:	b538      	push	{r3, r4, r5, lr}
   8afd2:	4605      	mov	r5, r0
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
   8afd4:	6f44      	ldr	r4, [r0, #116]	; 0x74
   8afd6:	b19c      	cbz	r4, 8b000 <tcp_send_fin+0x30>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
   8afd8:	6823      	ldr	r3, [r4, #0]
   8afda:	b10b      	cbz	r3, 8afe0 <tcp_send_fin+0x10>
         last_unsent = last_unsent->next);
   8afdc:	461c      	mov	r4, r3
   8afde:	e7fb      	b.n	8afd8 <tcp_send_fin+0x8>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
   8afe0:	68e3      	ldr	r3, [r4, #12]
   8afe2:	8998      	ldrh	r0, [r3, #12]
   8afe4:	4b09      	ldr	r3, [pc, #36]	; (8b00c <tcp_send_fin+0x3c>)
   8afe6:	4798      	blx	r3
   8afe8:	f010 0f07 	tst.w	r0, #7
   8afec:	d108      	bne.n	8b000 <tcp_send_fin+0x30>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
   8afee:	68e4      	ldr	r4, [r4, #12]
   8aff0:	89a5      	ldrh	r5, [r4, #12]
   8aff2:	2001      	movs	r0, #1
   8aff4:	4b06      	ldr	r3, [pc, #24]	; (8b010 <tcp_send_fin+0x40>)
   8aff6:	4798      	blx	r3
   8aff8:	4328      	orrs	r0, r5
   8affa:	81a0      	strh	r0, [r4, #12]
      return ERR_OK;
   8affc:	2000      	movs	r0, #0
   8affe:	e003      	b.n	8b008 <tcp_send_fin+0x38>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
   8b000:	4628      	mov	r0, r5
   8b002:	2101      	movs	r1, #1
   8b004:	4b03      	ldr	r3, [pc, #12]	; (8b014 <tcp_send_fin+0x44>)
   8b006:	4798      	blx	r3
}
   8b008:	b240      	sxtb	r0, r0
   8b00a:	bd38      	pop	{r3, r4, r5, pc}
   8b00c:	000864dd 	.word	0x000864dd
   8b010:	000864d1 	.word	0x000864d1
   8b014:	0008ae95 	.word	0x0008ae95

0008b018 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
   8b018:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b01a:	b083      	sub	sp, #12
   8b01c:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
   8b01e:	6d80      	ldr	r0, [r0, #88]	; 0x58
   8b020:	4b16      	ldr	r3, [pc, #88]	; (8b07c <tcp_send_empty_ack+0x64>)
   8b022:	4798      	blx	r3
   8b024:	4603      	mov	r3, r0
   8b026:	4620      	mov	r0, r4
   8b028:	2100      	movs	r1, #0
   8b02a:	460a      	mov	r2, r1
   8b02c:	4d14      	ldr	r5, [pc, #80]	; (8b080 <tcp_send_empty_ack+0x68>)
   8b02e:	47a8      	blx	r5
  if (p == NULL) {
   8b030:	4605      	mov	r5, r0
   8b032:	b1f8      	cbz	r0, 8b074 <tcp_send_empty_ack+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
   8b034:	6847      	ldr	r7, [r0, #4]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
   8b036:	f894 3020 	ldrb.w	r3, [r4, #32]
   8b03a:	f023 0303 	bic.w	r3, r3, #3
   8b03e:	f884 3020 	strb.w	r3, [r4, #32]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
   8b042:	1d26      	adds	r6, r4, #4
   8b044:	8903      	ldrh	r3, [r0, #8]
   8b046:	9300      	str	r3, [sp, #0]
   8b048:	4621      	mov	r1, r4
   8b04a:	4632      	mov	r2, r6
   8b04c:	2306      	movs	r3, #6
   8b04e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8b08c <tcp_send_empty_ack+0x74>
   8b052:	47e0      	blx	ip
   8b054:	8238      	strh	r0, [r7, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
   8b056:	7aa3      	ldrb	r3, [r4, #10]
   8b058:	7a62      	ldrb	r2, [r4, #9]
   8b05a:	9200      	str	r2, [sp, #0]
   8b05c:	2206      	movs	r2, #6
   8b05e:	9201      	str	r2, [sp, #4]
   8b060:	4628      	mov	r0, r5
   8b062:	4621      	mov	r1, r4
   8b064:	4632      	mov	r2, r6
   8b066:	4c07      	ldr	r4, [pc, #28]	; (8b084 <tcp_send_empty_ack+0x6c>)
   8b068:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
   8b06a:	4628      	mov	r0, r5
   8b06c:	4b06      	ldr	r3, [pc, #24]	; (8b088 <tcp_send_empty_ack+0x70>)
   8b06e:	4798      	blx	r3

  return ERR_OK;
   8b070:	2000      	movs	r0, #0
   8b072:	e000      	b.n	8b076 <tcp_send_empty_ack+0x5e>
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  if (p == NULL) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
   8b074:	20fe      	movs	r0, #254	; 0xfe
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);

  return ERR_OK;
}
   8b076:	b240      	sxtb	r0, r0
   8b078:	b003      	add	sp, #12
   8b07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b07c:	000864e9 	.word	0x000864e9
   8b080:	0008aa01 	.word	0x0008aa01
   8b084:	00086d41 	.word	0x00086d41
   8b088:	00088045 	.word	0x00088045
   8b08c:	0008688d 	.word	0x0008688d

0008b090 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
   8b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b094:	b083      	sub	sp, #12
   8b096:	4604      	mov	r4, r0

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
   8b098:	4b8d      	ldr	r3, [pc, #564]	; (8b2d0 <tcp_output+0x240>)
   8b09a:	681b      	ldr	r3, [r3, #0]
   8b09c:	4283      	cmp	r3, r0
   8b09e:	f000 8166 	beq.w	8b36e <tcp_output+0x2de>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
   8b0a2:	f8b0 905c 	ldrh.w	r9, [r0, #92]	; 0x5c
   8b0a6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   8b0aa:	4599      	cmp	r9, r3
   8b0ac:	bf28      	it	cs
   8b0ae:	4699      	movcs	r9, r3

  seg = pcb->unsent;
   8b0b0:	6f45      	ldr	r5, [r0, #116]	; 0x74
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
   8b0b2:	f890 3020 	ldrb.w	r3, [r0, #32]
   8b0b6:	f013 0f02 	tst.w	r3, #2
   8b0ba:	d00e      	beq.n	8b0da <tcp_output+0x4a>
   8b0bc:	b14d      	cbz	r5, 8b0d2 <tcp_output+0x42>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
   8b0be:	68eb      	ldr	r3, [r5, #12]
   8b0c0:	6858      	ldr	r0, [r3, #4]
   8b0c2:	4b84      	ldr	r3, [pc, #528]	; (8b2d4 <tcp_output+0x244>)
   8b0c4:	4798      	blx	r3
   8b0c6:	892a      	ldrh	r2, [r5, #8]
   8b0c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   8b0ca:	1ad3      	subs	r3, r2, r3
   8b0cc:	4418      	add	r0, r3
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
   8b0ce:	4581      	cmp	r9, r0
   8b0d0:	d203      	bcs.n	8b0da <tcp_output+0x4a>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
   8b0d2:	4620      	mov	r0, r4
   8b0d4:	4b80      	ldr	r3, [pc, #512]	; (8b2d8 <tcp_output+0x248>)
   8b0d6:	4798      	blx	r3
   8b0d8:	e14a      	b.n	8b370 <tcp_output+0x2e0>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
   8b0da:	6fa6      	ldr	r6, [r4, #120]	; 0x78
  if (useg != NULL) {
   8b0dc:	b936      	cbnz	r6, 8b0ec <tcp_output+0x5c>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
   8b0de:	2d00      	cmp	r5, #0
   8b0e0:	f000 8120 	beq.w	8b324 <tcp_output+0x294>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
   8b0e4:	4f7b      	ldr	r7, [pc, #492]	; (8b2d4 <tcp_output+0x244>)
  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % MEM_ALIGNMENT) == 0);
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
    TCP_BUILD_MSS_OPTION(*opts);
   8b0e6:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8b2f4 <tcp_output+0x264>
   8b0ea:	e111      	b.n	8b310 <tcp_output+0x280>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
   8b0ec:	6833      	ldr	r3, [r6, #0]
   8b0ee:	2b00      	cmp	r3, #0
   8b0f0:	d0f5      	beq.n	8b0de <tcp_output+0x4e>
   8b0f2:	461e      	mov	r6, r3
   8b0f4:	e7fa      	b.n	8b0ec <tcp_output+0x5c>
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!", 
   8b0f6:	68eb      	ldr	r3, [r5, #12]
   8b0f8:	8998      	ldrh	r0, [r3, #12]
   8b0fa:	4b78      	ldr	r3, [pc, #480]	; (8b2dc <tcp_output+0x24c>)
   8b0fc:	4798      	blx	r3
   8b0fe:	f000 0004 	and.w	r0, r0, #4
   8b102:	b283      	uxth	r3, r0
   8b104:	b103      	cbz	r3, 8b108 <tcp_output+0x78>
   8b106:	e7fe      	b.n	8b106 <tcp_output+0x76>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
   8b108:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8b10a:	b17b      	cbz	r3, 8b12c <tcp_output+0x9c>
   8b10c:	f894 2020 	ldrb.w	r2, [r4, #32]
   8b110:	f012 0f44 	tst.w	r2, #68	; 0x44
   8b114:	d10a      	bne.n	8b12c <tcp_output+0x9c>
   8b116:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8b118:	2b00      	cmp	r3, #0
   8b11a:	f000 812b 	beq.w	8b374 <tcp_output+0x2e4>
   8b11e:	6819      	ldr	r1, [r3, #0]
   8b120:	b921      	cbnz	r1, 8b12c <tcp_output+0x9c>
   8b122:	8919      	ldrh	r1, [r3, #8]
   8b124:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   8b126:	4299      	cmp	r1, r3
   8b128:	f0c0 8124 	bcc.w	8b374 <tcp_output+0x2e4>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
   8b12c:	682b      	ldr	r3, [r5, #0]
   8b12e:	6763      	str	r3, [r4, #116]	; 0x74

    if (pcb->state != SYN_SENT) {
   8b130:	7c23      	ldrb	r3, [r4, #16]
   8b132:	2b02      	cmp	r3, #2
   8b134:	d010      	beq.n	8b158 <tcp_output+0xc8>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
   8b136:	f8d5 800c 	ldr.w	r8, [r5, #12]
   8b13a:	f8b8 b00c 	ldrh.w	fp, [r8, #12]
   8b13e:	2010      	movs	r0, #16
   8b140:	4b67      	ldr	r3, [pc, #412]	; (8b2e0 <tcp_output+0x250>)
   8b142:	4798      	blx	r3
   8b144:	ea40 000b 	orr.w	r0, r0, fp
   8b148:	f8a8 000c 	strh.w	r0, [r8, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
   8b14c:	f894 3020 	ldrb.w	r3, [r4, #32]
   8b150:	f023 0303 	bic.w	r3, r3, #3
   8b154:	f884 3020 	strb.w	r3, [r4, #32]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
   8b158:	f8d5 800c 	ldr.w	r8, [r5, #12]
   8b15c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   8b15e:	4b61      	ldr	r3, [pc, #388]	; (8b2e4 <tcp_output+0x254>)
   8b160:	4798      	blx	r3
   8b162:	f8c8 0008 	str.w	r0, [r8, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
   8b166:	f8d5 800c 	ldr.w	r8, [r5, #12]
   8b16a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
   8b16c:	4b5c      	ldr	r3, [pc, #368]	; (8b2e0 <tcp_output+0x250>)
   8b16e:	4798      	blx	r3
   8b170:	f8a8 000e 	strh.w	r0, [r8, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   8b174:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   8b176:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8b178:	4413      	add	r3, r2
   8b17a:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % MEM_ALIGNMENT) == 0);
   8b17c:	68eb      	ldr	r3, [r5, #12]
   8b17e:	f013 0f03 	tst.w	r3, #3
   8b182:	d000      	beq.n	8b186 <tcp_output+0xf6>
   8b184:	e7fe      	b.n	8b184 <tcp_output+0xf4>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
   8b186:	7aaa      	ldrb	r2, [r5, #10]
   8b188:	f012 0f01 	tst.w	r2, #1
    TCP_BUILD_MSS_OPTION(*opts);
   8b18c:	bf18      	it	ne
   8b18e:	f8c3 a014 	strne.w	sl, [r3, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
   8b192:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
   8b196:	f1b3 3fff 	cmp.w	r3, #4294967295
    pcb->rtime = 0;
   8b19a:	bf04      	itt	eq
   8b19c:	2300      	moveq	r3, #0
   8b19e:	86e3      	strheq	r3, [r4, #54]	; 0x36
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
   8b1a0:	b10c      	cbz	r4, 8b1a6 <tcp_output+0x116>
   8b1a2:	6823      	ldr	r3, [r4, #0]
   8b1a4:	b933      	cbnz	r3, 8b1b4 <tcp_output+0x124>
    netif = ip_route(&(pcb->remote_ip));
   8b1a6:	1d20      	adds	r0, r4, #4
   8b1a8:	4b4f      	ldr	r3, [pc, #316]	; (8b2e8 <tcp_output+0x258>)
   8b1aa:	4798      	blx	r3
    if (netif == NULL) {
   8b1ac:	2800      	cmp	r0, #0
   8b1ae:	d03d      	beq.n	8b22c <tcp_output+0x19c>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
   8b1b0:	6843      	ldr	r3, [r0, #4]
   8b1b2:	6023      	str	r3, [r4, #0]
  }

  if (pcb->rttest == 0) {
   8b1b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8b1b6:	b933      	cbnz	r3, 8b1c6 <tcp_output+0x136>
    pcb->rttest = tcp_ticks;
   8b1b8:	4b4c      	ldr	r3, [pc, #304]	; (8b2ec <tcp_output+0x25c>)
   8b1ba:	681b      	ldr	r3, [r3, #0]
   8b1bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
   8b1be:	68eb      	ldr	r3, [r5, #12]
   8b1c0:	6858      	ldr	r0, [r3, #4]
   8b1c2:	47b8      	blx	r7
   8b1c4:	6420      	str	r0, [r4, #64]	; 0x40
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
   8b1c6:	686b      	ldr	r3, [r5, #4]
   8b1c8:	68e9      	ldr	r1, [r5, #12]
   8b1ca:	685a      	ldr	r2, [r3, #4]
   8b1cc:	1a8a      	subs	r2, r1, r2
   8b1ce:	b292      	uxth	r2, r2

  seg->p->len -= len;
   8b1d0:	8959      	ldrh	r1, [r3, #10]
   8b1d2:	1a89      	subs	r1, r1, r2
   8b1d4:	8159      	strh	r1, [r3, #10]
  seg->p->tot_len -= len;
   8b1d6:	686b      	ldr	r3, [r5, #4]
   8b1d8:	8919      	ldrh	r1, [r3, #8]
   8b1da:	1a8a      	subs	r2, r1, r2
   8b1dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
   8b1de:	686b      	ldr	r3, [r5, #4]
   8b1e0:	68ea      	ldr	r2, [r5, #12]
   8b1e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
   8b1e4:	68eb      	ldr	r3, [r5, #12]
   8b1e6:	2200      	movs	r2, #0
   8b1e8:	741a      	strb	r2, [r3, #16]
   8b1ea:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
   8b1ec:	f8d5 b00c 	ldr.w	fp, [r5, #12]
   8b1f0:	f104 0804 	add.w	r8, r4, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
   8b1f4:	6868      	ldr	r0, [r5, #4]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
   8b1f6:	8903      	ldrh	r3, [r0, #8]
   8b1f8:	9300      	str	r3, [sp, #0]
   8b1fa:	4621      	mov	r1, r4
   8b1fc:	4642      	mov	r2, r8
   8b1fe:	2306      	movs	r3, #6
   8b200:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8b2f8 <tcp_output+0x268>
   8b204:	47e0      	blx	ip
   8b206:	f8ab 0010 	strh.w	r0, [fp, #16]
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
   8b20a:	4b39      	ldr	r3, [pc, #228]	; (8b2f0 <tcp_output+0x260>)
   8b20c:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
   8b210:	3201      	adds	r2, #1
   8b212:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
   8b216:	6868      	ldr	r0, [r5, #4]
   8b218:	7aa3      	ldrb	r3, [r4, #10]
   8b21a:	7a62      	ldrb	r2, [r4, #9]
   8b21c:	9200      	str	r2, [sp, #0]
   8b21e:	2206      	movs	r2, #6
   8b220:	9201      	str	r2, [sp, #4]
   8b222:	4621      	mov	r1, r4
   8b224:	4642      	mov	r2, r8
   8b226:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8b2fc <tcp_output+0x26c>
   8b22a:	47e0      	blx	ip
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }

    tcp_output_segment(seg, pcb);
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   8b22c:	68eb      	ldr	r3, [r5, #12]
   8b22e:	6858      	ldr	r0, [r3, #4]
   8b230:	47b8      	blx	r7
   8b232:	4680      	mov	r8, r0
   8b234:	f8b5 b008 	ldrh.w	fp, [r5, #8]
   8b238:	68eb      	ldr	r3, [r5, #12]
   8b23a:	8998      	ldrh	r0, [r3, #12]
   8b23c:	4b27      	ldr	r3, [pc, #156]	; (8b2dc <tcp_output+0x24c>)
   8b23e:	4798      	blx	r3
   8b240:	f010 0003 	ands.w	r0, r0, #3
   8b244:	bf18      	it	ne
   8b246:	2001      	movne	r0, #1
   8b248:	eb0b 0300 	add.w	r3, fp, r0
   8b24c:	4443      	add	r3, r8
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
   8b24e:	6da2      	ldr	r2, [r4, #88]	; 0x58
   8b250:	1ad2      	subs	r2, r2, r3
   8b252:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
   8b254:	bfb8      	it	lt
   8b256:	65a3      	strlt	r3, [r4, #88]	; 0x58
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
   8b258:	f8b5 8008 	ldrh.w	r8, [r5, #8]
   8b25c:	68eb      	ldr	r3, [r5, #12]
   8b25e:	8998      	ldrh	r0, [r3, #12]
   8b260:	4b1e      	ldr	r3, [pc, #120]	; (8b2dc <tcp_output+0x24c>)
   8b262:	4798      	blx	r3
   8b264:	f010 0003 	ands.w	r0, r0, #3
   8b268:	bf18      	it	ne
   8b26a:	2001      	movne	r0, #1
   8b26c:	4440      	add	r0, r8
   8b26e:	2800      	cmp	r0, #0
   8b270:	d046      	beq.n	8b300 <tcp_output+0x270>
      seg->next = NULL;
   8b272:	2300      	movs	r3, #0
   8b274:	602b      	str	r3, [r5, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
   8b276:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8b278:	b90b      	cbnz	r3, 8b27e <tcp_output+0x1ee>
        pcb->unacked = seg;
   8b27a:	67a5      	str	r5, [r4, #120]	; 0x78
   8b27c:	e044      	b.n	8b308 <tcp_output+0x278>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
   8b27e:	68eb      	ldr	r3, [r5, #12]
   8b280:	6858      	ldr	r0, [r3, #4]
   8b282:	47b8      	blx	r7
   8b284:	4680      	mov	r8, r0
   8b286:	68f3      	ldr	r3, [r6, #12]
   8b288:	6858      	ldr	r0, [r3, #4]
   8b28a:	47b8      	blx	r7
   8b28c:	ebc0 0008 	rsb	r0, r0, r8
   8b290:	2800      	cmp	r0, #0
   8b292:	da1b      	bge.n	8b2cc <tcp_output+0x23c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
   8b294:	f104 0878 	add.w	r8, r4, #120	; 0x78
          while (*cur_seg &&
   8b298:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   8b29a:	b183      	cbz	r3, 8b2be <tcp_output+0x22e>
   8b29c:	e004      	b.n	8b2a8 <tcp_output+0x218>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
   8b29e:	f8d8 8000 	ldr.w	r8, [r8]
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
   8b2a2:	f8d8 3000 	ldr.w	r3, [r8]
   8b2a6:	b153      	cbz	r3, 8b2be <tcp_output+0x22e>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
   8b2a8:	68db      	ldr	r3, [r3, #12]
   8b2aa:	6858      	ldr	r0, [r3, #4]
   8b2ac:	47b8      	blx	r7
   8b2ae:	4683      	mov	fp, r0
   8b2b0:	68eb      	ldr	r3, [r5, #12]
   8b2b2:	6858      	ldr	r0, [r3, #4]
   8b2b4:	47b8      	blx	r7
   8b2b6:	ebc0 000b 	rsb	r0, r0, fp
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
   8b2ba:	2800      	cmp	r0, #0
   8b2bc:	dbef      	blt.n	8b29e <tcp_output+0x20e>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
   8b2be:	f8d8 3000 	ldr.w	r3, [r8]
   8b2c2:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
   8b2c4:	f8c8 5000 	str.w	r5, [r8]
   8b2c8:	4635      	mov	r5, r6
   8b2ca:	e01d      	b.n	8b308 <tcp_output+0x278>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
   8b2cc:	6035      	str	r5, [r6, #0]
   8b2ce:	e01b      	b.n	8b308 <tcp_output+0x278>
   8b2d0:	200768f0 	.word	0x200768f0
   8b2d4:	00086501 	.word	0x00086501
   8b2d8:	0008b019 	.word	0x0008b019
   8b2dc:	000864dd 	.word	0x000864dd
   8b2e0:	000864d1 	.word	0x000864d1
   8b2e4:	000864e9 	.word	0x000864e9
   8b2e8:	00086985 	.word	0x00086985
   8b2ec:	200768dc 	.word	0x200768dc
   8b2f0:	20076788 	.word	0x20076788
   8b2f4:	dc050402 	.word	0xdc050402
   8b2f8:	0008688d 	.word	0x0008688d
   8b2fc:	00086d41 	.word	0x00086d41
          useg = useg->next;
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
   8b300:	4628      	mov	r0, r5
   8b302:	4b20      	ldr	r3, [pc, #128]	; (8b384 <tcp_output+0x2f4>)
   8b304:	4798      	blx	r3
   8b306:	4635      	mov	r5, r6
    }
    seg = pcb->unsent;
   8b308:	6f63      	ldr	r3, [r4, #116]	; 0x74
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
   8b30a:	b173      	cbz	r3, 8b32a <tcp_output+0x29a>
   8b30c:	462e      	mov	r6, r5
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
   8b30e:	461d      	mov	r5, r3
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
   8b310:	68eb      	ldr	r3, [r5, #12]
   8b312:	6858      	ldr	r0, [r3, #4]
   8b314:	47b8      	blx	r7
   8b316:	892a      	ldrh	r2, [r5, #8]
   8b318:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   8b31a:	1ad3      	subs	r3, r2, r3
   8b31c:	4418      	add	r0, r3
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
   8b31e:	4581      	cmp	r9, r0
   8b320:	f4bf aee9 	bcs.w	8b0f6 <tcp_output+0x66>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
   8b324:	6f63      	ldr	r3, [r4, #116]	; 0x74
   8b326:	b923      	cbnz	r3, 8b332 <tcp_output+0x2a2>
   8b328:	462b      	mov	r3, r5
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
   8b32a:	2200      	movs	r2, #0
   8b32c:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
   8b330:	461d      	mov	r5, r3
  }
#endif /* TCP_OVERSIZE */

  if (seg != NULL && pcb->persist_backoff == 0 && 
   8b332:	b1a5      	cbz	r5, 8b35e <tcp_output+0x2ce>
   8b334:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   8b338:	b98b      	cbnz	r3, 8b35e <tcp_output+0x2ce>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > pcb->snd_wnd) {
   8b33a:	68eb      	ldr	r3, [r5, #12]
   8b33c:	6858      	ldr	r0, [r3, #4]
   8b33e:	4b12      	ldr	r3, [pc, #72]	; (8b388 <tcp_output+0x2f8>)
   8b340:	4798      	blx	r3
   8b342:	892a      	ldrh	r2, [r5, #8]
   8b344:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   8b346:	1ad3      	subs	r3, r2, r3
   8b348:	4418      	add	r0, r3
   8b34a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (seg != NULL && pcb->persist_backoff == 0 && 
   8b34e:	4290      	cmp	r0, r2
   8b350:	d905      	bls.n	8b35e <tcp_output+0x2ce>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > pcb->snd_wnd) {
    /* prepare for persist timer */
    pcb->persist_cnt = 0;
   8b352:	2300      	movs	r3, #0
   8b354:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    pcb->persist_backoff = 1;
   8b358:	2301      	movs	r3, #1
   8b35a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
  }

  pcb->flags &= ~TF_NAGLEMEMERR;
   8b35e:	f894 3020 	ldrb.w	r3, [r4, #32]
   8b362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8b366:	f884 3020 	strb.w	r3, [r4, #32]
  return ERR_OK;
   8b36a:	2000      	movs	r0, #0
   8b36c:	e000      	b.n	8b370 <tcp_output+0x2e0>
  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
   8b36e:	2000      	movs	r0, #0
   8b370:	b240      	sxtb	r0, r0
   8b372:	e004      	b.n	8b37e <tcp_output+0x2ee>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
   8b374:	f012 0fa0 	tst.w	r2, #160	; 0xa0
   8b378:	f47f aed8 	bne.w	8b12c <tcp_output+0x9c>
   8b37c:	e7d2      	b.n	8b324 <tcp_output+0x294>
    pcb->persist_backoff = 1;
  }

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
   8b37e:	b003      	add	sp, #12
   8b380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b384:	000888cd 	.word	0x000888cd
   8b388:	00086501 	.word	0x00086501

0008b38c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
   8b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b390:	b082      	sub	sp, #8
   8b392:	4681      	mov	r9, r0
   8b394:	468a      	mov	sl, r1
   8b396:	4690      	mov	r8, r2
   8b398:	461f      	mov	r7, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
   8b39a:	2001      	movs	r0, #1
   8b39c:	2114      	movs	r1, #20
   8b39e:	2200      	movs	r2, #0
   8b3a0:	4b23      	ldr	r3, [pc, #140]	; (8b430 <tcp_rst+0xa4>)
   8b3a2:	4798      	blx	r3
  if (p == NULL) {
   8b3a4:	4605      	mov	r5, r0
   8b3a6:	2800      	cmp	r0, #0
   8b3a8:	d03f      	beq.n	8b42a <tcp_rst+0x9e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
   8b3aa:	8943      	ldrh	r3, [r0, #10]
   8b3ac:	2b13      	cmp	r3, #19
   8b3ae:	d800      	bhi.n	8b3b2 <tcp_rst+0x26>
   8b3b0:	e7fe      	b.n	8b3b0 <tcp_rst+0x24>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
   8b3b2:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
   8b3b4:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   8b3b8:	4e1e      	ldr	r6, [pc, #120]	; (8b434 <tcp_rst+0xa8>)
   8b3ba:	47b0      	blx	r6
   8b3bc:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
   8b3be:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   8b3c2:	47b0      	blx	r6
   8b3c4:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
   8b3c6:	4648      	mov	r0, r9
   8b3c8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8b444 <tcp_rst+0xb8>
   8b3cc:	47c8      	blx	r9
   8b3ce:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
   8b3d0:	4650      	mov	r0, sl
   8b3d2:	47c8      	blx	r9
   8b3d4:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
   8b3d6:	f245 0014 	movw	r0, #20500	; 0x5014
   8b3da:	47b0      	blx	r6
   8b3dc:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
   8b3de:	2600      	movs	r6, #0
   8b3e0:	2305      	movs	r3, #5
   8b3e2:	73a3      	strb	r3, [r4, #14]
   8b3e4:	f06f 0323 	mvn.w	r3, #35	; 0x23
   8b3e8:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
   8b3ea:	7426      	strb	r6, [r4, #16]
   8b3ec:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
   8b3ee:	74a6      	strb	r6, [r4, #18]
   8b3f0:	74e6      	strb	r6, [r4, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
   8b3f2:	892b      	ldrh	r3, [r5, #8]
   8b3f4:	9300      	str	r3, [sp, #0]
   8b3f6:	4628      	mov	r0, r5
   8b3f8:	4641      	mov	r1, r8
   8b3fa:	463a      	mov	r2, r7
   8b3fc:	2306      	movs	r3, #6
   8b3fe:	f8df c048 	ldr.w	ip, [pc, #72]	; 8b448 <tcp_rst+0xbc>
   8b402:	47e0      	blx	ip
   8b404:	8220      	strh	r0, [r4, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
   8b406:	4b0c      	ldr	r3, [pc, #48]	; (8b438 <tcp_rst+0xac>)
   8b408:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
   8b40c:	3201      	adds	r2, #1
   8b40e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
   8b412:	9600      	str	r6, [sp, #0]
   8b414:	2306      	movs	r3, #6
   8b416:	9301      	str	r3, [sp, #4]
   8b418:	4628      	mov	r0, r5
   8b41a:	4641      	mov	r1, r8
   8b41c:	463a      	mov	r2, r7
   8b41e:	23ff      	movs	r3, #255	; 0xff
   8b420:	4c06      	ldr	r4, [pc, #24]	; (8b43c <tcp_rst+0xb0>)
   8b422:	47a0      	blx	r4
  pbuf_free(p);
   8b424:	4628      	mov	r0, r5
   8b426:	4b06      	ldr	r3, [pc, #24]	; (8b440 <tcp_rst+0xb4>)
   8b428:	4798      	blx	r3
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
   8b42a:	b002      	add	sp, #8
   8b42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b430:	000880d1 	.word	0x000880d1
   8b434:	000864d1 	.word	0x000864d1
   8b438:	20076788 	.word	0x20076788
   8b43c:	00086d41 	.word	0x00086d41
   8b440:	00088045 	.word	0x00088045
   8b444:	000864e9 	.word	0x000864e9
   8b448:	0008688d 	.word	0x0008688d

0008b44c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
   8b44c:	b508      	push	{r3, lr}
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
   8b44e:	6f82      	ldr	r2, [r0, #120]	; 0x78
   8b450:	b18a      	cbz	r2, 8b476 <tcp_rexmit_rto+0x2a>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
   8b452:	6813      	ldr	r3, [r2, #0]
   8b454:	b10b      	cbz	r3, 8b45a <tcp_rexmit_rto+0xe>
   8b456:	461a      	mov	r2, r3
   8b458:	e7fb      	b.n	8b452 <tcp_rexmit_rto+0x6>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
   8b45a:	6f43      	ldr	r3, [r0, #116]	; 0x74
   8b45c:	6013      	str	r3, [r2, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
   8b45e:	6f83      	ldr	r3, [r0, #120]	; 0x78
   8b460:	6743      	str	r3, [r0, #116]	; 0x74
  /* unacked queue is now empty */
  pcb->unacked = NULL;
   8b462:	2300      	movs	r3, #0
   8b464:	6783      	str	r3, [r0, #120]	; 0x78

  /* increment number of retransmissions */
  ++pcb->nrtx;
   8b466:	f890 204a 	ldrb.w	r2, [r0, #74]	; 0x4a
   8b46a:	3201      	adds	r2, #1
   8b46c:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
   8b470:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Do the actual retransmission */
  tcp_output(pcb);
   8b472:	4b01      	ldr	r3, [pc, #4]	; (8b478 <tcp_rexmit_rto+0x2c>)
   8b474:	4798      	blx	r3
   8b476:	bd08      	pop	{r3, pc}
   8b478:	0008b091 	.word	0x0008b091

0008b47c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
   8b47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b480:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
   8b482:	6f87      	ldr	r7, [r0, #120]	; 0x78
   8b484:	b1ff      	cbz	r7, 8b4c6 <tcp_rexmit+0x4a>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
   8b486:	683b      	ldr	r3, [r7, #0]
   8b488:	6783      	str	r3, [r0, #120]	; 0x78

  cur_seg = &(pcb->unsent);
   8b48a:	f100 0474 	add.w	r4, r0, #116	; 0x74
  while (*cur_seg &&
   8b48e:	6f43      	ldr	r3, [r0, #116]	; 0x74
   8b490:	b173      	cbz	r3, 8b4b0 <tcp_rexmit+0x34>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
   8b492:	4d0e      	ldr	r5, [pc, #56]	; (8b4cc <tcp_rexmit+0x50>)
   8b494:	e002      	b.n	8b49c <tcp_rexmit+0x20>
      cur_seg = &((*cur_seg)->next );
   8b496:	6824      	ldr	r4, [r4, #0]
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
   8b498:	6823      	ldr	r3, [r4, #0]
   8b49a:	b14b      	cbz	r3, 8b4b0 <tcp_rexmit+0x34>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
   8b49c:	68db      	ldr	r3, [r3, #12]
   8b49e:	6858      	ldr	r0, [r3, #4]
   8b4a0:	47a8      	blx	r5
   8b4a2:	4606      	mov	r6, r0
   8b4a4:	68fb      	ldr	r3, [r7, #12]
   8b4a6:	6858      	ldr	r0, [r3, #4]
   8b4a8:	47a8      	blx	r5
   8b4aa:	1a30      	subs	r0, r6, r0
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
   8b4ac:	2800      	cmp	r0, #0
   8b4ae:	dbf2      	blt.n	8b496 <tcp_rexmit+0x1a>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
   8b4b0:	6823      	ldr	r3, [r4, #0]
   8b4b2:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
   8b4b4:	6027      	str	r7, [r4, #0]

  ++pcb->nrtx;
   8b4b6:	f898 304a 	ldrb.w	r3, [r8, #74]	; 0x4a
   8b4ba:	3301      	adds	r3, #1
   8b4bc:	f888 304a 	strb.w	r3, [r8, #74]	; 0x4a

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
   8b4c0:	2300      	movs	r3, #0
   8b4c2:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
   8b4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b4ca:	bf00      	nop
   8b4cc:	00086501 	.word	0x00086501

0008b4d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
   8b4d0:	b510      	push	{r4, lr}
   8b4d2:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
   8b4d4:	6f83      	ldr	r3, [r0, #120]	; 0x78
   8b4d6:	b343      	cbz	r3, 8b52a <tcp_rexmit_fast+0x5a>
   8b4d8:	f890 3020 	ldrb.w	r3, [r0, #32]
   8b4dc:	f013 0f04 	tst.w	r3, #4
   8b4e0:	d123      	bne.n	8b52a <tcp_rexmit_fast+0x5a>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
   8b4e2:	4b12      	ldr	r3, [pc, #72]	; (8b52c <tcp_rexmit_fast+0x5c>)
   8b4e4:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
   8b4e6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   8b4ea:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
   8b4ee:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
   8b4f0:	bf87      	ittee	hi
   8b4f2:	0852      	lsrhi	r2, r2, #1
   8b4f4:	f8a4 2054 	strhhi.w	r2, [r4, #84]	; 0x54
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
   8b4f8:	085b      	lsrls	r3, r3, #1
   8b4fa:	f8a4 3054 	strhls.w	r3, [r4, #84]	; 0x54
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
   8b4fe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   8b500:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   8b504:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
   8b508:	bfbc      	itt	lt
   8b50a:	005a      	lsllt	r2, r3, #1
   8b50c:	f8a4 2054 	strhlt.w	r2, [r4, #84]	; 0x54
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
   8b510:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8b514:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   8b518:	4413      	add	r3, r2
   8b51a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    pcb->flags |= TF_INFR;
   8b51e:	f894 3020 	ldrb.w	r3, [r4, #32]
   8b522:	f043 0304 	orr.w	r3, r3, #4
   8b526:	f884 3020 	strb.w	r3, [r4, #32]
   8b52a:	bd10      	pop	{r4, pc}
   8b52c:	0008b47d 	.word	0x0008b47d

0008b530 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
   8b530:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b532:	b083      	sub	sp, #12
   8b534:	4604      	mov	r4, r0
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
   8b536:	6d80      	ldr	r0, [r0, #88]	; 0x58
   8b538:	3801      	subs	r0, #1
   8b53a:	4b15      	ldr	r3, [pc, #84]	; (8b590 <tcp_keepalive+0x60>)
   8b53c:	4798      	blx	r3
   8b53e:	4603      	mov	r3, r0
   8b540:	4620      	mov	r0, r4
   8b542:	2100      	movs	r1, #0
   8b544:	460a      	mov	r2, r1
   8b546:	4d13      	ldr	r5, [pc, #76]	; (8b594 <tcp_keepalive+0x64>)
   8b548:	47a8      	blx	r5
  if(p == NULL) {
   8b54a:	4605      	mov	r5, r0
   8b54c:	b1e8      	cbz	r0, 8b58a <tcp_keepalive+0x5a>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
   8b54e:	6847      	ldr	r7, [r0, #4]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
   8b550:	1d26      	adds	r6, r4, #4
   8b552:	8903      	ldrh	r3, [r0, #8]
   8b554:	9300      	str	r3, [sp, #0]
   8b556:	4621      	mov	r1, r4
   8b558:	4632      	mov	r2, r6
   8b55a:	2306      	movs	r3, #6
   8b55c:	f8df c044 	ldr.w	ip, [pc, #68]	; 8b5a4 <tcp_keepalive+0x74>
   8b560:	47e0      	blx	ip
   8b562:	8238      	strh	r0, [r7, #16]
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
   8b564:	4b0c      	ldr	r3, [pc, #48]	; (8b598 <tcp_keepalive+0x68>)
   8b566:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
   8b56a:	3201      	adds	r2, #1
   8b56c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
   8b570:	7aa3      	ldrb	r3, [r4, #10]
   8b572:	2200      	movs	r2, #0
   8b574:	9200      	str	r2, [sp, #0]
   8b576:	2206      	movs	r2, #6
   8b578:	9201      	str	r2, [sp, #4]
   8b57a:	4628      	mov	r0, r5
   8b57c:	4621      	mov	r1, r4
   8b57e:	4632      	mov	r2, r6
   8b580:	4c06      	ldr	r4, [pc, #24]	; (8b59c <tcp_keepalive+0x6c>)
   8b582:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
   8b584:	4628      	mov	r0, r5
   8b586:	4b06      	ldr	r3, [pc, #24]	; (8b5a0 <tcp_keepalive+0x70>)
   8b588:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
   8b58a:	b003      	add	sp, #12
   8b58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b58e:	bf00      	nop
   8b590:	000864e9 	.word	0x000864e9
   8b594:	0008aa01 	.word	0x0008aa01
   8b598:	20076788 	.word	0x20076788
   8b59c:	00086d41 	.word	0x00086d41
   8b5a0:	00088045 	.word	0x00088045
   8b5a4:	0008688d 	.word	0x0008688d

0008b5a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
   8b5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b5ac:	b082      	sub	sp, #8
   8b5ae:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
   8b5b0:	6f85      	ldr	r5, [r0, #120]	; 0x78

  if(seg == NULL) {
   8b5b2:	b915      	cbnz	r5, 8b5ba <tcp_zero_window_probe+0x12>
    seg = pcb->unsent;
   8b5b4:	6f45      	ldr	r5, [r0, #116]	; 0x74
  }
  if(seg == NULL) {
   8b5b6:	2d00      	cmp	r5, #0
   8b5b8:	d054      	beq.n	8b664 <tcp_zero_window_probe+0xbc>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
   8b5ba:	68eb      	ldr	r3, [r5, #12]
   8b5bc:	8998      	ldrh	r0, [r3, #12]
   8b5be:	4b2b      	ldr	r3, [pc, #172]	; (8b66c <tcp_zero_window_probe+0xc4>)
   8b5c0:	4798      	blx	r3
   8b5c2:	f010 0f01 	tst.w	r0, #1
   8b5c6:	d005      	beq.n	8b5d4 <tcp_zero_window_probe+0x2c>
   8b5c8:	892a      	ldrh	r2, [r5, #8]
   8b5ca:	f1d2 0201 	rsbs	r2, r2, #1
   8b5ce:	bf38      	it	cc
   8b5d0:	2200      	movcc	r2, #0
   8b5d2:	e000      	b.n	8b5d6 <tcp_zero_window_probe+0x2e>
   8b5d4:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
   8b5d6:	f002 08ff 	and.w	r8, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
   8b5da:	68eb      	ldr	r3, [r5, #12]
   8b5dc:	4620      	mov	r0, r4
   8b5de:	2100      	movs	r1, #0
   8b5e0:	f082 0201 	eor.w	r2, r2, #1
   8b5e4:	685b      	ldr	r3, [r3, #4]
   8b5e6:	4e22      	ldr	r6, [pc, #136]	; (8b670 <tcp_zero_window_probe+0xc8>)
   8b5e8:	47b0      	blx	r6
  if(p == NULL) {
   8b5ea:	4606      	mov	r6, r0
   8b5ec:	2800      	cmp	r0, #0
   8b5ee:	d039      	beq.n	8b664 <tcp_zero_window_probe+0xbc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
   8b5f0:	6847      	ldr	r7, [r0, #4]

  if (is_fin) {
   8b5f2:	f1b8 0f00 	cmp.w	r8, #0
   8b5f6:	d009      	beq.n	8b60c <tcp_zero_window_probe+0x64>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
   8b5f8:	89bd      	ldrh	r5, [r7, #12]
   8b5fa:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
   8b5fe:	b2ad      	uxth	r5, r5
   8b600:	2011      	movs	r0, #17
   8b602:	4b1c      	ldr	r3, [pc, #112]	; (8b674 <tcp_zero_window_probe+0xcc>)
   8b604:	4798      	blx	r3
   8b606:	4328      	orrs	r0, r5
   8b608:	81b8      	strh	r0, [r7, #12]
   8b60a:	e00d      	b.n	8b628 <tcp_zero_window_probe+0x80>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    struct tcp_hdr *thdr = (struct tcp_hdr *)seg->p->payload;
   8b60c:	686d      	ldr	r5, [r5, #4]
    char *d = ((char *)p->payload + TCP_HLEN);
    pbuf_copy_partial(seg->p, d, 1, TCPH_HDRLEN(thdr) * 4);
   8b60e:	686b      	ldr	r3, [r5, #4]
   8b610:	8998      	ldrh	r0, [r3, #12]
   8b612:	4b16      	ldr	r3, [pc, #88]	; (8b66c <tcp_zero_window_probe+0xc4>)
   8b614:	4798      	blx	r3
   8b616:	0b00      	lsrs	r0, r0, #12
   8b618:	0083      	lsls	r3, r0, #2
   8b61a:	b29b      	uxth	r3, r3
   8b61c:	4628      	mov	r0, r5
   8b61e:	f107 0114 	add.w	r1, r7, #20
   8b622:	2201      	movs	r2, #1
   8b624:	4d14      	ldr	r5, [pc, #80]	; (8b678 <tcp_zero_window_probe+0xd0>)
   8b626:	47a8      	blx	r5
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
   8b628:	1d25      	adds	r5, r4, #4
   8b62a:	8933      	ldrh	r3, [r6, #8]
   8b62c:	9300      	str	r3, [sp, #0]
   8b62e:	4630      	mov	r0, r6
   8b630:	4621      	mov	r1, r4
   8b632:	462a      	mov	r2, r5
   8b634:	2306      	movs	r3, #6
   8b636:	f8df c050 	ldr.w	ip, [pc, #80]	; 8b688 <tcp_zero_window_probe+0xe0>
   8b63a:	47e0      	blx	ip
   8b63c:	8238      	strh	r0, [r7, #16]
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
   8b63e:	4b0f      	ldr	r3, [pc, #60]	; (8b67c <tcp_zero_window_probe+0xd4>)
   8b640:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
   8b644:	3201      	adds	r2, #1
   8b646:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
   8b64a:	7aa3      	ldrb	r3, [r4, #10]
   8b64c:	2200      	movs	r2, #0
   8b64e:	9200      	str	r2, [sp, #0]
   8b650:	2206      	movs	r2, #6
   8b652:	9201      	str	r2, [sp, #4]
   8b654:	4630      	mov	r0, r6
   8b656:	4621      	mov	r1, r4
   8b658:	462a      	mov	r2, r5
   8b65a:	4c09      	ldr	r4, [pc, #36]	; (8b680 <tcp_zero_window_probe+0xd8>)
   8b65c:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
   8b65e:	4630      	mov	r0, r6
   8b660:	4b08      	ldr	r3, [pc, #32]	; (8b684 <tcp_zero_window_probe+0xdc>)
   8b662:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
   8b664:	b002      	add	sp, #8
   8b666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b66a:	bf00      	nop
   8b66c:	000864dd 	.word	0x000864dd
   8b670:	0008aa01 	.word	0x0008aa01
   8b674:	000864d1 	.word	0x000864d1
   8b678:	000883dd 	.word	0x000883dd
   8b67c:	20076788 	.word	0x20076788
   8b680:	00086d41 	.word	0x00086d41
   8b684:	00088045 	.word	0x00088045
   8b688:	0008688d 	.word	0x0008688d

0008b68c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
   8b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b690:	b083      	sub	sp, #12
   8b692:	4604      	mov	r4, r0
   8b694:	468a      	mov	sl, r1
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
   8b696:	4b79      	ldr	r3, [pc, #484]	; (8b87c <udp_input+0x1f0>)
   8b698:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
   8b69c:	3201      	adds	r2, #1
   8b69e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  iphdr = (struct ip_hdr *)p->payload;
   8b6a2:	6846      	ldr	r6, [r0, #4]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
   8b6a4:	8905      	ldrh	r5, [r0, #8]
   8b6a6:	8830      	ldrh	r0, [r6, #0]
   8b6a8:	4b75      	ldr	r3, [pc, #468]	; (8b880 <udp_input+0x1f4>)
   8b6aa:	4798      	blx	r3
   8b6ac:	f3c0 2003 	ubfx	r0, r0, #8, #4
   8b6b0:	1c83      	adds	r3, r0, #2
   8b6b2:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
   8b6b6:	db0a      	blt.n	8b6ce <udp_input+0x42>
   8b6b8:	8830      	ldrh	r0, [r6, #0]
   8b6ba:	4b71      	ldr	r3, [pc, #452]	; (8b880 <udp_input+0x1f4>)
   8b6bc:	4798      	blx	r3
   8b6be:	f3c0 2003 	ubfx	r0, r0, #8, #4
   8b6c2:	0081      	lsls	r1, r0, #2
   8b6c4:	4620      	mov	r0, r4
   8b6c6:	4249      	negs	r1, r1
   8b6c8:	4b6e      	ldr	r3, [pc, #440]	; (8b884 <udp_input+0x1f8>)
   8b6ca:	4798      	blx	r3
   8b6cc:	b170      	cbz	r0, 8b6ec <udp_input+0x60>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
   8b6ce:	4b6b      	ldr	r3, [pc, #428]	; (8b87c <udp_input+0x1f0>)
   8b6d0:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
   8b6d4:	3201      	adds	r2, #1
   8b6d6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
   8b6da:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
   8b6de:	3201      	adds	r2, #1
   8b6e0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    snmp_inc_udpinerrors();
    pbuf_free(p);
   8b6e4:	4620      	mov	r0, r4
   8b6e6:	4b68      	ldr	r3, [pc, #416]	; (8b888 <udp_input+0x1fc>)
   8b6e8:	4798      	blx	r3
    goto end;
   8b6ea:	e0c3      	b.n	8b874 <udp_input+0x1e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
   8b6ec:	6867      	ldr	r7, [r4, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
   8b6ee:	4b67      	ldr	r3, [pc, #412]	; (8b88c <udp_input+0x200>)
   8b6f0:	6818      	ldr	r0, [r3, #0]
   8b6f2:	4651      	mov	r1, sl
   8b6f4:	4b66      	ldr	r3, [pc, #408]	; (8b890 <udp_input+0x204>)
   8b6f6:	4798      	blx	r3
   8b6f8:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
   8b6fa:	8838      	ldrh	r0, [r7, #0]
   8b6fc:	4d60      	ldr	r5, [pc, #384]	; (8b880 <udp_input+0x1f4>)
   8b6fe:	47a8      	blx	r5
   8b700:	4681      	mov	r9, r0
  dest = ntohs(udphdr->dest);
   8b702:	8878      	ldrh	r0, [r7, #2]
   8b704:	47a8      	blx	r5
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   8b706:	4b63      	ldr	r3, [pc, #396]	; (8b894 <udp_input+0x208>)
   8b708:	f8d3 e000 	ldr.w	lr, [r3]
   8b70c:	f1be 0f00 	cmp.w	lr, #0
   8b710:	f000 80ae 	beq.w	8b870 <udp_input+0x1e4>
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
   8b714:	4b5d      	ldr	r3, [pc, #372]	; (8b88c <udp_input+0x200>)
   8b716:	f8d3 b000 	ldr.w	fp, [r3]
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
   8b71a:	4b5f      	ldr	r3, [pc, #380]	; (8b898 <udp_input+0x20c>)
   8b71c:	f8d3 c000 	ldr.w	ip, [r3]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   8b720:	4673      	mov	r3, lr
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
    local_match = 0;
    uncon_pcb = NULL;
   8b722:	2500      	movs	r5, #0
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
   8b724:	4629      	mov	r1, r5
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
   8b726:	8a5a      	ldrh	r2, [r3, #18]
   8b728:	4282      	cmp	r2, r0
   8b72a:	d12d      	bne.n	8b788 <udp_input+0xfc>
   8b72c:	f1b8 0f00 	cmp.w	r8, #0
   8b730:	d104      	bne.n	8b73c <udp_input+0xb0>
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
   8b732:	b11b      	cbz	r3, 8b73c <udp_input+0xb0>
   8b734:	681a      	ldr	r2, [r3, #0]
   8b736:	2a00      	cmp	r2, #0
   8b738:	f040 8093 	bne.w	8b862 <udp_input+0x1d6>
           (broadcast && (pcb->so_options & SOF_BROADCAST)))) {
#else  /* IP_SOF_BROADCAST_RECV */
           (broadcast))) {
#endif /* IP_SOF_BROADCAST_RECV */
        local_match = 1;
        if ((uncon_pcb == NULL) && 
   8b73c:	2d00      	cmp	r5, #0
   8b73e:	f040 8093 	bne.w	8b868 <udp_input+0x1dc>
            ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
   8b742:	7c1a      	ldrb	r2, [r3, #16]
   8b744:	f002 0204 	and.w	r2, r2, #4
           (broadcast && (pcb->so_options & SOF_BROADCAST)))) {
#else  /* IP_SOF_BROADCAST_RECV */
           (broadcast))) {
#endif /* IP_SOF_BROADCAST_RECV */
        local_match = 1;
        if ((uncon_pcb == NULL) && 
   8b748:	b2d2      	uxtb	r2, r2
   8b74a:	2a00      	cmp	r2, #0
   8b74c:	bf08      	it	eq
   8b74e:	461d      	moveq	r5, r3
   8b750:	e08a      	b.n	8b868 <udp_input+0x1dc>
          uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
   8b752:	f113 0f04 	cmn.w	r3, #4
   8b756:	d005      	beq.n	8b764 <udp_input+0xd8>
          (ip_addr_isany(&pcb->remote_ip) ||
   8b758:	685a      	ldr	r2, [r3, #4]
   8b75a:	b12a      	cbz	r2, 8b768 <udp_input+0xdc>
   8b75c:	4562      	cmp	r2, ip
   8b75e:	d113      	bne.n	8b788 <udp_input+0xfc>
   8b760:	4618      	mov	r0, r3
   8b762:	e002      	b.n	8b76a <udp_input+0xde>
   8b764:	4618      	mov	r0, r3
   8b766:	e000      	b.n	8b76a <udp_input+0xde>
   8b768:	4618      	mov	r0, r3
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
   8b76a:	b131      	cbz	r1, 8b77a <udp_input+0xee>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
   8b76c:	68c2      	ldr	r2, [r0, #12]
   8b76e:	60ca      	str	r2, [r1, #12]
          pcb->next = udp_pcbs;
   8b770:	f8c0 e00c 	str.w	lr, [r0, #12]
          udp_pcbs = pcb;
   8b774:	4a47      	ldr	r2, [pc, #284]	; (8b894 <udp_input+0x208>)
   8b776:	6010      	str	r0, [r2, #0]
   8b778:	e00b      	b.n	8b792 <udp_input+0x106>
        } else {
          UDP_STATS_INC(udp.cachehit);
   8b77a:	4a40      	ldr	r2, [pc, #256]	; (8b87c <udp_input+0x1f0>)
   8b77c:	f8b2 108e 	ldrh.w	r1, [r2, #142]	; 0x8e
   8b780:	3101      	adds	r1, #1
   8b782:	f8a2 108e 	strh.w	r1, [r2, #142]	; 0x8e
   8b786:	e004      	b.n	8b792 <udp_input+0x106>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   8b788:	68da      	ldr	r2, [r3, #12]
   8b78a:	b11a      	cbz	r2, 8b794 <udp_input+0x108>
   8b78c:	4619      	mov	r1, r3
   8b78e:	4613      	mov	r3, r2
   8b790:	e7c9      	b.n	8b726 <udp_input+0x9a>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
   8b792:	b938      	cbnz	r0, 8b7a4 <udp_input+0x118>
      pcb = uncon_pcb;
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
   8b794:	b93d      	cbnz	r5, 8b7a6 <udp_input+0x11a>
   8b796:	f8da 2004 	ldr.w	r2, [sl, #4]
   8b79a:	4b3c      	ldr	r3, [pc, #240]	; (8b88c <udp_input+0x200>)
   8b79c:	681b      	ldr	r3, [r3, #0]
   8b79e:	429a      	cmp	r2, r3
   8b7a0:	d15b      	bne.n	8b85a <udp_input+0x1ce>
   8b7a2:	e000      	b.n	8b7a6 <udp_input+0x11a>
   8b7a4:	461d      	mov	r5, r3
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
   8b7a6:	88fb      	ldrh	r3, [r7, #6]
   8b7a8:	b1bb      	cbz	r3, 8b7da <udp_input+0x14e>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
   8b7aa:	8923      	ldrh	r3, [r4, #8]
   8b7ac:	9300      	str	r3, [sp, #0]
   8b7ae:	4620      	mov	r0, r4
   8b7b0:	4939      	ldr	r1, [pc, #228]	; (8b898 <udp_input+0x20c>)
   8b7b2:	4a36      	ldr	r2, [pc, #216]	; (8b88c <udp_input+0x200>)
   8b7b4:	2311      	movs	r3, #17
   8b7b6:	4f39      	ldr	r7, [pc, #228]	; (8b89c <udp_input+0x210>)
   8b7b8:	47b8      	blx	r7
   8b7ba:	b170      	cbz	r0, 8b7da <udp_input+0x14e>
                               IP_PROTO_UDP, p->tot_len) != 0) {
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
   8b7bc:	4b2f      	ldr	r3, [pc, #188]	; (8b87c <udp_input+0x1f0>)
   8b7be:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
   8b7c2:	3201      	adds	r2, #1
   8b7c4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
          UDP_STATS_INC(udp.drop);
   8b7c8:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
   8b7cc:	3201      	adds	r2, #1
   8b7ce:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
          snmp_inc_udpinerrors();
          pbuf_free(p);
   8b7d2:	4620      	mov	r0, r4
   8b7d4:	4b2c      	ldr	r3, [pc, #176]	; (8b888 <udp_input+0x1fc>)
   8b7d6:	4798      	blx	r3
          goto end;
   8b7d8:	e04c      	b.n	8b874 <udp_input+0x1e8>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
   8b7da:	4620      	mov	r0, r4
   8b7dc:	f06f 0107 	mvn.w	r1, #7
   8b7e0:	4b28      	ldr	r3, [pc, #160]	; (8b884 <udp_input+0x1f8>)
   8b7e2:	4798      	blx	r3
   8b7e4:	b100      	cbz	r0, 8b7e8 <udp_input+0x15c>
   8b7e6:	e7fe      	b.n	8b7e6 <udp_input+0x15a>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
   8b7e8:	b16d      	cbz	r5, 8b806 <udp_input+0x17a>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
   8b7ea:	69ae      	ldr	r6, [r5, #24]
   8b7ec:	b13e      	cbz	r6, 8b7fe <udp_input+0x172>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
   8b7ee:	69e8      	ldr	r0, [r5, #28]
   8b7f0:	f8cd 9000 	str.w	r9, [sp]
   8b7f4:	4629      	mov	r1, r5
   8b7f6:	4622      	mov	r2, r4
   8b7f8:	4b27      	ldr	r3, [pc, #156]	; (8b898 <udp_input+0x20c>)
   8b7fa:	47b0      	blx	r6
   8b7fc:	e03a      	b.n	8b874 <udp_input+0x1e8>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
   8b7fe:	4620      	mov	r0, r4
   8b800:	4b21      	ldr	r3, [pc, #132]	; (8b888 <udp_input+0x1fc>)
   8b802:	4798      	blx	r3
        goto end;
   8b804:	e036      	b.n	8b874 <udp_input+0x1e8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
   8b806:	f1b8 0f00 	cmp.w	r8, #0
   8b80a:	d117      	bne.n	8b83c <udp_input+0x1b0>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
   8b80c:	4b1f      	ldr	r3, [pc, #124]	; (8b88c <udp_input+0x200>)
   8b80e:	681b      	ldr	r3, [r3, #0]
   8b810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
   8b814:	2be0      	cmp	r3, #224	; 0xe0
   8b816:	d011      	beq.n	8b83c <udp_input+0x1b0>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
   8b818:	8830      	ldrh	r0, [r6, #0]
   8b81a:	4b19      	ldr	r3, [pc, #100]	; (8b880 <udp_input+0x1f4>)
   8b81c:	4798      	blx	r3
   8b81e:	f3c0 2003 	ubfx	r0, r0, #8, #4
   8b822:	1c81      	adds	r1, r0, #2
   8b824:	4620      	mov	r0, r4
   8b826:	0089      	lsls	r1, r1, #2
   8b828:	4b16      	ldr	r3, [pc, #88]	; (8b884 <udp_input+0x1f8>)
   8b82a:	4798      	blx	r3
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
   8b82c:	6863      	ldr	r3, [r4, #4]
   8b82e:	42b3      	cmp	r3, r6
   8b830:	d000      	beq.n	8b834 <udp_input+0x1a8>
   8b832:	e7fe      	b.n	8b832 <udp_input+0x1a6>
        icmp_dest_unreach(p, ICMP_DUR_PORT);
   8b834:	4620      	mov	r0, r4
   8b836:	2103      	movs	r1, #3
   8b838:	4b19      	ldr	r3, [pc, #100]	; (8b8a0 <udp_input+0x214>)
   8b83a:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
   8b83c:	4b0f      	ldr	r3, [pc, #60]	; (8b87c <udp_input+0x1f0>)
   8b83e:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
   8b842:	3201      	adds	r2, #1
   8b844:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
   8b848:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
   8b84c:	3201      	adds	r2, #1
   8b84e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      snmp_inc_udpnoports();
      pbuf_free(p);
   8b852:	4620      	mov	r0, r4
   8b854:	4b0c      	ldr	r3, [pc, #48]	; (8b888 <udp_input+0x1fc>)
   8b856:	4798      	blx	r3
   8b858:	e00c      	b.n	8b874 <udp_input+0x1e8>
    }
  } else {
    pbuf_free(p);
   8b85a:	4620      	mov	r0, r4
   8b85c:	4b0a      	ldr	r3, [pc, #40]	; (8b888 <udp_input+0x1fc>)
   8b85e:	4798      	blx	r3
   8b860:	e008      	b.n	8b874 <udp_input+0x1e8>
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
   8b862:	4593      	cmp	fp, r2
   8b864:	d190      	bne.n	8b788 <udp_input+0xfc>
   8b866:	e769      	b.n	8b73c <udp_input+0xb0>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
   8b868:	8a9a      	ldrh	r2, [r3, #20]
   8b86a:	454a      	cmp	r2, r9
   8b86c:	d18c      	bne.n	8b788 <udp_input+0xfc>
   8b86e:	e770      	b.n	8b752 <udp_input+0xc6>
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
    local_match = 0;
    uncon_pcb = NULL;
   8b870:	4675      	mov	r5, lr
   8b872:	e78f      	b.n	8b794 <udp_input+0x108>
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
   8b874:	b003      	add	sp, #12
   8b876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b87a:	bf00      	nop
   8b87c:	20076788 	.word	0x20076788
   8b880:	000864dd 	.word	0x000864dd
   8b884:	00087fd1 	.word	0x00087fd1
   8b888:	00088045 	.word	0x00088045
   8b88c:	20075b64 	.word	0x20075b64
   8b890:	00086d99 	.word	0x00086d99
   8b894:	200768f4 	.word	0x200768f4
   8b898:	20075b5c 	.word	0x20075b5c
   8b89c:	0008688d 	.word	0x0008688d
   8b8a0:	000867f5 	.word	0x000867f5

0008b8a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
   8b8a4:	b4f0      	push	{r4, r5, r6, r7}
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   8b8a6:	4b2b      	ldr	r3, [pc, #172]	; (8b954 <udp_bind+0xb0>)
   8b8a8:	681b      	ldr	r3, [r3, #0]
   8b8aa:	b1d3      	cbz	r3, 8b8e2 <udp_bind+0x3e>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
   8b8ac:	2600      	movs	r6, #0
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
   8b8ae:	2701      	movs	r7, #1

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
   8b8b0:	4298      	cmp	r0, r3
   8b8b2:	d101      	bne.n	8b8b8 <udp_bind+0x14>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
   8b8b4:	b186      	cbz	r6, 8b8d8 <udp_bind+0x34>
   8b8b6:	e7fe      	b.n	8b8b6 <udp_bind+0x12>
             ((ipcb->so_options & SOF_REUSEADDR) == 0)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
   8b8b8:	8a5c      	ldrh	r4, [r3, #18]
   8b8ba:	4294      	cmp	r4, r2
   8b8bc:	d10d      	bne.n	8b8da <udp_bind+0x36>
   8b8be:	2b00      	cmp	r3, #0
   8b8c0:	d033      	beq.n	8b92a <udp_bind+0x86>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
   8b8c2:	681d      	ldr	r5, [r3, #0]
   8b8c4:	2d00      	cmp	r5, #0
   8b8c6:	d032      	beq.n	8b92e <udp_bind+0x8a>
   8b8c8:	2900      	cmp	r1, #0
   8b8ca:	d032      	beq.n	8b932 <udp_bind+0x8e>
           ip_addr_isany(ipaddr) ||
   8b8cc:	680c      	ldr	r4, [r1, #0]
   8b8ce:	2c00      	cmp	r4, #0
   8b8d0:	d031      	beq.n	8b936 <udp_bind+0x92>
   8b8d2:	42a5      	cmp	r5, r4
   8b8d4:	d101      	bne.n	8b8da <udp_bind+0x36>
   8b8d6:	e030      	b.n	8b93a <udp_bind+0x96>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
   8b8d8:	463e      	mov	r6, r7
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   8b8da:	68db      	ldr	r3, [r3, #12]
   8b8dc:	2b00      	cmp	r3, #0
   8b8de:	d1e7      	bne.n	8b8b0 <udp_bind+0xc>
   8b8e0:	e000      	b.n	8b8e4 <udp_bind+0x40>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
   8b8e2:	2600      	movs	r6, #0
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
   8b8e4:	b109      	cbz	r1, 8b8ea <udp_bind+0x46>
   8b8e6:	680b      	ldr	r3, [r1, #0]
   8b8e8:	e000      	b.n	8b8ec <udp_bind+0x48>
   8b8ea:	2300      	movs	r3, #0
   8b8ec:	6003      	str	r3, [r0, #0]

  /* no port specified? */
  if (port == 0) {
   8b8ee:	b9a2      	cbnz	r2, 8b91a <udp_bind+0x76>
   "The Dynamic and/or Private Ports are those from 49152 through 65535" */
#define UDP_LOCAL_PORT_RANGE_START  0xc000
#define UDP_LOCAL_PORT_RANGE_END    0xffff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
    ipcb = udp_pcbs;
   8b8f0:	4b18      	ldr	r3, [pc, #96]	; (8b954 <udp_bind+0xb0>)
   8b8f2:	6819      	ldr	r1, [r3, #0]
    while ((ipcb != NULL) && (port != UDP_LOCAL_PORT_RANGE_END)) {
   8b8f4:	b341      	cbz	r1, 8b948 <udp_bind+0xa4>
   "The Dynamic and/or Private Ports are those from 49152 through 65535" */
#define UDP_LOCAL_PORT_RANGE_START  0xc000
#define UDP_LOCAL_PORT_RANGE_END    0xffff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
    ipcb = udp_pcbs;
   8b8f6:	460b      	mov	r3, r1
/* From http://www.iana.org/assignments/port-numbers:
   "The Dynamic and/or Private Ports are those from 49152 through 65535" */
#define UDP_LOCAL_PORT_RANGE_START  0xc000
#define UDP_LOCAL_PORT_RANGE_END    0xffff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
   8b8f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    while ((ipcb != NULL) && (port != UDP_LOCAL_PORT_RANGE_END)) {
      if (ipcb->local_port == port) {
        /* port is already used by another udp_pcb */
        port++;
        /* restart scanning all udp pcbs */
        ipcb = udp_pcbs;
   8b8fc:	460d      	mov	r5, r1
#define UDP_LOCAL_PORT_RANGE_START  0xc000
#define UDP_LOCAL_PORT_RANGE_END    0xffff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
    ipcb = udp_pcbs;
    while ((ipcb != NULL) && (port != UDP_LOCAL_PORT_RANGE_END)) {
   8b8fe:	f64f 74ff 	movw	r4, #65535	; 0xffff
      if (ipcb->local_port == port) {
   8b902:	8a59      	ldrh	r1, [r3, #18]
   8b904:	4291      	cmp	r1, r2
   8b906:	d103      	bne.n	8b910 <udp_bind+0x6c>
        /* port is already used by another udp_pcb */
        port++;
   8b908:	1c4a      	adds	r2, r1, #1
   8b90a:	b292      	uxth	r2, r2
        /* restart scanning all udp pcbs */
        ipcb = udp_pcbs;
   8b90c:	462b      	mov	r3, r5
   8b90e:	e001      	b.n	8b914 <udp_bind+0x70>
      } else {
        /* go on with next udp pcb */
        ipcb = ipcb->next;
   8b910:	68db      	ldr	r3, [r3, #12]
#define UDP_LOCAL_PORT_RANGE_START  0xc000
#define UDP_LOCAL_PORT_RANGE_END    0xffff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
    ipcb = udp_pcbs;
    while ((ipcb != NULL) && (port != UDP_LOCAL_PORT_RANGE_END)) {
   8b912:	b113      	cbz	r3, 8b91a <udp_bind+0x76>
   8b914:	42a2      	cmp	r2, r4
   8b916:	d1f4      	bne.n	8b902 <udp_bind+0x5e>
   8b918:	e011      	b.n	8b93e <udp_bind+0x9a>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  }
  pcb->local_port = port;
   8b91a:	8242      	strh	r2, [r0, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
   8b91c:	b98e      	cbnz	r6, 8b942 <udp_bind+0x9e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
   8b91e:	4b0d      	ldr	r3, [pc, #52]	; (8b954 <udp_bind+0xb0>)
   8b920:	681a      	ldr	r2, [r3, #0]
   8b922:	60c2      	str	r2, [r0, #12]
    udp_pcbs = pcb;
   8b924:	6018      	str	r0, [r3, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
   8b926:	2300      	movs	r3, #0
   8b928:	e00c      	b.n	8b944 <udp_bind+0xa0>
           ip_addr_isany(ipaddr) ||
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
   8b92a:	23f8      	movs	r3, #248	; 0xf8
   8b92c:	e00a      	b.n	8b944 <udp_bind+0xa0>
   8b92e:	23f8      	movs	r3, #248	; 0xf8
   8b930:	e008      	b.n	8b944 <udp_bind+0xa0>
   8b932:	23f8      	movs	r3, #248	; 0xf8
   8b934:	e006      	b.n	8b944 <udp_bind+0xa0>
   8b936:	23f8      	movs	r3, #248	; 0xf8
   8b938:	e004      	b.n	8b944 <udp_bind+0xa0>
   8b93a:	23f8      	movs	r3, #248	; 0xf8
   8b93c:	e002      	b.n	8b944 <udp_bind+0xa0>
      }
    }
    if (ipcb != NULL) {
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
   8b93e:	23f8      	movs	r3, #248	; 0xf8
   8b940:	e000      	b.n	8b944 <udp_bind+0xa0>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
   8b942:	2300      	movs	r3, #0
   8b944:	b258      	sxtb	r0, r3
   8b946:	e002      	b.n	8b94e <udp_bind+0xaa>
/* From http://www.iana.org/assignments/port-numbers:
   "The Dynamic and/or Private Ports are those from 49152 through 65535" */
#define UDP_LOCAL_PORT_RANGE_START  0xc000
#define UDP_LOCAL_PORT_RANGE_END    0xffff
#endif
    port = UDP_LOCAL_PORT_RANGE_START;
   8b948:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8b94c:	e7e5      	b.n	8b91a <udp_bind+0x76>
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
}
   8b94e:	bcf0      	pop	{r4, r5, r6, r7}
   8b950:	4770      	bx	lr
   8b952:	bf00      	nop
   8b954:	200768f4 	.word	0x200768f4

0008b958 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
   8b958:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
   8b95a:	61c2      	str	r2, [r0, #28]
   8b95c:	4770      	bx	lr
   8b95e:	bf00      	nop

0008b960 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
   8b960:	b508      	push	{r3, lr}
   8b962:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
   8b964:	4b0b      	ldr	r3, [pc, #44]	; (8b994 <udp_remove+0x34>)
   8b966:	681a      	ldr	r2, [r3, #0]
   8b968:	4282      	cmp	r2, r0
   8b96a:	d001      	beq.n	8b970 <udp_remove+0x10>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
   8b96c:	b92a      	cbnz	r2, 8b97a <udp_remove+0x1a>
   8b96e:	e00c      	b.n	8b98a <udp_remove+0x2a>

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
   8b970:	68d2      	ldr	r2, [r2, #12]
   8b972:	4b08      	ldr	r3, [pc, #32]	; (8b994 <udp_remove+0x34>)
   8b974:	601a      	str	r2, [r3, #0]
   8b976:	e008      	b.n	8b98a <udp_remove+0x2a>
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
   8b978:	461a      	mov	r2, r3
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
   8b97a:	68d3      	ldr	r3, [r2, #12]
   8b97c:	b12b      	cbz	r3, 8b98a <udp_remove+0x2a>
   8b97e:	4299      	cmp	r1, r3
   8b980:	d1fa      	bne.n	8b978 <udp_remove+0x18>
        /* remove pcb from list */
        pcb2->next = pcb->next;
   8b982:	68cb      	ldr	r3, [r1, #12]
   8b984:	60d3      	str	r3, [r2, #12]
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
   8b986:	2b00      	cmp	r3, #0
   8b988:	d1f6      	bne.n	8b978 <udp_remove+0x18>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
   8b98a:	2001      	movs	r0, #1
   8b98c:	4b02      	ldr	r3, [pc, #8]	; (8b998 <udp_remove+0x38>)
   8b98e:	4798      	blx	r3
   8b990:	bd08      	pop	{r3, pc}
   8b992:	bf00      	nop
   8b994:	200768f4 	.word	0x200768f4
   8b998:	00087d61 	.word	0x00087d61

0008b99c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
   8b99c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
   8b99e:	2001      	movs	r0, #1
   8b9a0:	4b05      	ldr	r3, [pc, #20]	; (8b9b8 <udp_new+0x1c>)
   8b9a2:	4798      	blx	r3
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
   8b9a4:	4604      	mov	r4, r0
   8b9a6:	b128      	cbz	r0, 8b9b4 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
   8b9a8:	2100      	movs	r1, #0
   8b9aa:	2220      	movs	r2, #32
   8b9ac:	4b03      	ldr	r3, [pc, #12]	; (8b9bc <udp_new+0x20>)
   8b9ae:	4798      	blx	r3
    pcb->ttl = UDP_TTL;
   8b9b0:	23ff      	movs	r3, #255	; 0xff
   8b9b2:	72a3      	strb	r3, [r4, #10]
  }
  return pcb;
}
   8b9b4:	4620      	mov	r0, r4
   8b9b6:	bd10      	pop	{r4, pc}
   8b9b8:	00087ce1 	.word	0x00087ce1
   8b9bc:	0008ccbb 	.word	0x0008ccbb

0008b9c0 <find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
find_entry(ip_addr_t *ipaddr, u8_t flags)
{
   8b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b9c4:	b087      	sub	sp, #28
   8b9c6:	460f      	mov	r7, r1
   8b9c8:	4a53      	ldr	r2, [pc, #332]	; (8bb18 <find_entry+0x158>)
   8b9ca:	f102 010e 	add.w	r1, r2, #14
   8b9ce:	2300      	movs	r3, #0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u8_t age_queue = 0;
   8b9d0:	9305      	str	r3, [sp, #20]
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
   8b9d2:	f04f 0c0a 	mov.w	ip, #10
static s8_t
find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
   8b9d6:	9304      	str	r3, [sp, #16]
   8b9d8:	9303      	str	r3, [sp, #12]
 */
static s8_t
find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
   8b9da:	4665      	mov	r5, ip
 * entry is found or could be recycled.
 */
static s8_t
find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   8b9dc:	46e2      	mov	sl, ip
   8b9de:	46e1      	mov	r9, ip
   8b9e0:	9002      	str	r0, [sp, #8]
   8b9e2:	46b8      	mov	r8, r7
   8b9e4:	fa5f fb83 	uxtb.w	fp, r3
   8b9e8:	4614      	mov	r4, r2
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
   8b9ea:	7b90      	ldrb	r0, [r2, #14]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   8b9ec:	b26f      	sxtb	r7, r5
   8b9ee:	2f0a      	cmp	r7, #10
   8b9f0:	d102      	bne.n	8b9f8 <find_entry+0x38>
   8b9f2:	b910      	cbnz	r0, 8b9fa <find_entry+0x3a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
   8b9f4:	465d      	mov	r5, fp
   8b9f6:	e02d      	b.n	8ba54 <find_entry+0x94>
    } else if (state != ETHARP_STATE_EMPTY) {
   8b9f8:	b360      	cbz	r0, 8ba54 <find_entry+0x94>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state == ETHARP_STATE_STABLE",
   8b9fa:	1e47      	subs	r7, r0, #1
   8b9fc:	b2ff      	uxtb	r7, r7
   8b9fe:	2f01      	cmp	r7, #1
   8ba00:	d900      	bls.n	8ba04 <find_entry+0x44>
   8ba02:	e7fe      	b.n	8ba02 <find_entry+0x42>
        state == ETHARP_STATE_PENDING || state == ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
   8ba04:	9e02      	ldr	r6, [sp, #8]
   8ba06:	b13e      	cbz	r6, 8ba18 <find_entry+0x58>
   8ba08:	6837      	ldr	r7, [r6, #0]
   8ba0a:	f851 6c0a 	ldr.w	r6, [r1, #-10]
   8ba0e:	42b7      	cmp	r7, r6
   8ba10:	d102      	bne.n	8ba18 <find_entry+0x58>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
   8ba12:	fa5f f08b 	uxtb.w	r0, fp
   8ba16:	e07b      	b.n	8bb10 <find_entry+0x150>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
   8ba18:	2801      	cmp	r0, #1
   8ba1a:	d112      	bne.n	8ba42 <find_entry+0x82>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
   8ba1c:	f851 0c0e 	ldr.w	r0, [r1, #-14]
   8ba20:	b138      	cbz	r0, 8ba32 <find_entry+0x72>
          if (arp_table[i].ctime >= age_queue) {
   8ba22:	7be0      	ldrb	r0, [r4, #15]
   8ba24:	9f05      	ldr	r7, [sp, #20]
   8ba26:	42b8      	cmp	r0, r7
   8ba28:	d314      	bcc.n	8ba54 <find_entry+0x94>
            old_queue = i;
   8ba2a:	fa5f fc83 	uxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
   8ba2e:	9005      	str	r0, [sp, #20]
   8ba30:	e010      	b.n	8ba54 <find_entry+0x94>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
   8ba32:	7be0      	ldrb	r0, [r4, #15]
   8ba34:	9c03      	ldr	r4, [sp, #12]
   8ba36:	42a0      	cmp	r0, r4
   8ba38:	d30c      	bcc.n	8ba54 <find_entry+0x94>
            old_pending = i;
   8ba3a:	fa5f f983 	uxtb.w	r9, r3
            age_pending = arp_table[i].ctime;
   8ba3e:	9003      	str	r0, [sp, #12]
   8ba40:	e008      	b.n	8ba54 <find_entry+0x94>
          }
        }
      /* stable entry? */
      } else if (state == ETHARP_STATE_STABLE) {
   8ba42:	2802      	cmp	r0, #2
   8ba44:	d106      	bne.n	8ba54 <find_entry+0x94>
        /* don't record old_stable for static entries since they never expire */
        if (arp_table[i].static_entry == 0)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
   8ba46:	7be0      	ldrb	r0, [r4, #15]
   8ba48:	9e04      	ldr	r6, [sp, #16]
   8ba4a:	42b0      	cmp	r0, r6
            old_stable = i;
   8ba4c:	bf24      	itt	cs
   8ba4e:	fa5f fa83 	uxtbcs.w	sl, r3
            age_stable = arp_table[i].ctime;
   8ba52:	9004      	strcs	r0, [sp, #16]
   8ba54:	3301      	adds	r3, #1
   8ba56:	3110      	adds	r1, #16
   8ba58:	3210      	adds	r2, #16
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   8ba5a:	2b0a      	cmp	r3, #10
   8ba5c:	d1c2      	bne.n	8b9e4 <find_entry+0x24>
   8ba5e:	9e02      	ldr	r6, [sp, #8]
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
   8ba60:	f018 0f02 	tst.w	r8, #2
   8ba64:	d14f      	bne.n	8bb06 <find_entry+0x146>
   8ba66:	b26b      	sxtb	r3, r5
   8ba68:	2b0a      	cmp	r3, #10
   8ba6a:	d103      	bne.n	8ba74 <find_entry+0xb4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
   8ba6c:	f018 0f01 	tst.w	r8, #1
   8ba70:	d107      	bne.n	8ba82 <find_entry+0xc2>
   8ba72:	e04a      	b.n	8bb0a <find_entry+0x14a>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
   8ba74:	b26b      	sxtb	r3, r5
   8ba76:	2b09      	cmp	r3, #9
   8ba78:	dc03      	bgt.n	8ba82 <find_entry+0xc2>
    i = empty;
   8ba7a:	b2ed      	uxtb	r5, r5
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
   8ba7c:	2d09      	cmp	r5, #9
   8ba7e:	d82d      	bhi.n	8badc <find_entry+0x11c>
   8ba80:	e02d      	b.n	8bade <find_entry+0x11e>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
   8ba82:	fa4f f38a 	sxtb.w	r3, sl
   8ba86:	2b09      	cmp	r3, #9
   8ba88:	dc06      	bgt.n	8ba98 <find_entry+0xd8>
      /* recycle oldest stable*/
      i = old_stable;
   8ba8a:	fa5f f58a 	uxtb.w	r5, sl
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
   8ba8e:	012b      	lsls	r3, r5, #4
   8ba90:	4a21      	ldr	r2, [pc, #132]	; (8bb18 <find_entry+0x158>)
   8ba92:	58d3      	ldr	r3, [r2, r3]
   8ba94:	b16b      	cbz	r3, 8bab2 <find_entry+0xf2>
   8ba96:	e7fe      	b.n	8ba96 <find_entry+0xd6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
   8ba98:	fa4f f389 	sxtb.w	r3, r9
   8ba9c:	2b09      	cmp	r3, #9
   8ba9e:	dc02      	bgt.n	8baa6 <find_entry+0xe6>
      /* recycle oldest pending */
      i = old_pending;
   8baa0:	fa5f f589 	uxtb.w	r5, r9
   8baa4:	e005      	b.n	8bab2 <find_entry+0xf2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
   8baa6:	fa4f f38c 	sxtb.w	r3, ip
   8baaa:	2b09      	cmp	r3, #9
   8baac:	dc2f      	bgt.n	8bb0e <find_entry+0x14e>
      /* recycle oldest pending (queued packets are free in free_entry) */
      i = old_queue;
   8baae:	fa5f f58c 	uxtb.w	r5, ip
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
   8bab2:	2d09      	cmp	r5, #9
   8bab4:	d900      	bls.n	8bab8 <find_entry+0xf8>
   8bab6:	e7fe      	b.n	8bab6 <find_entry+0xf6>
    free_entry(i);
   8bab8:	462c      	mov	r4, r5
free_entry(int i)
{
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
   8baba:	012b      	lsls	r3, r5, #4
   8babc:	4a16      	ldr	r2, [pc, #88]	; (8bb18 <find_entry+0x158>)
   8babe:	58d0      	ldr	r0, [r2, r3]
   8bac0:	b128      	cbz	r0, 8bace <find_entry+0x10e>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
   8bac2:	4b16      	ldr	r3, [pc, #88]	; (8bb1c <find_entry+0x15c>)
   8bac4:	4798      	blx	r3
    arp_table[i].q = NULL;
   8bac6:	012b      	lsls	r3, r5, #4
   8bac8:	2100      	movs	r1, #0
   8baca:	4a13      	ldr	r2, [pc, #76]	; (8bb18 <find_entry+0x158>)
   8bacc:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */      
  arp_table[i].state = ETHARP_STATE_EMPTY;
   8bace:	4b12      	ldr	r3, [pc, #72]	; (8bb18 <find_entry+0x158>)
   8bad0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   8bad4:	2200      	movs	r2, #0
   8bad6:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
   8bad8:	462b      	mov	r3, r5
   8bada:	e007      	b.n	8baec <find_entry+0x12c>
   8badc:	e7fe      	b.n	8badc <find_entry+0x11c>
   8bade:	462b      	mov	r3, r5
   8bae0:	4a0d      	ldr	r2, [pc, #52]	; (8bb18 <find_entry+0x158>)
   8bae2:	eb02 1205 	add.w	r2, r2, r5, lsl #4
   8bae6:	7b92      	ldrb	r2, [r2, #14]
   8bae8:	b102      	cbz	r2, 8baec <find_entry+0x12c>
   8baea:	e7fe      	b.n	8baea <find_entry+0x12a>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
   8baec:	b126      	cbz	r6, 8baf8 <find_entry+0x138>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
   8baee:	6831      	ldr	r1, [r6, #0]
   8baf0:	4a09      	ldr	r2, [pc, #36]	; (8bb18 <find_entry+0x158>)
   8baf2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   8baf6:	6051      	str	r1, [r2, #4]
  }
  arp_table[i].ctime = 0;
   8baf8:	4a07      	ldr	r2, [pc, #28]	; (8bb18 <find_entry+0x158>)
   8bafa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   8bafe:	2200      	movs	r2, #0
   8bb00:	73da      	strb	r2, [r3, #15]
#if ETHARP_SUPPORT_STATIC_ENTRIES
  arp_table[i].static_entry = 0;
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  return (err_t)i;
   8bb02:	b2e8      	uxtb	r0, r5
   8bb04:	e004      	b.n	8bb10 <find_entry+0x150>
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
   8bb06:	20ff      	movs	r0, #255	; 0xff
   8bb08:	e002      	b.n	8bb10 <find_entry+0x150>
   8bb0a:	20ff      	movs	r0, #255	; 0xff
   8bb0c:	e000      	b.n	8bb10 <find_entry+0x150>
      i = old_queue;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
   8bb0e:	20ff      	movs	r0, #255	; 0xff
  arp_table[i].ctime = 0;
#if ETHARP_SUPPORT_STATIC_ENTRIES
  arp_table[i].static_entry = 0;
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  return (err_t)i;
}
   8bb10:	b240      	sxtb	r0, r0
   8bb12:	b007      	add	sp, #28
   8bb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bb18:	200759f8 	.word	0x200759f8
   8bb1c:	00088045 	.word	0x00088045

0008bb20 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
   8bb20:	b538      	push	{r3, r4, r5, lr}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
   8bb22:	684c      	ldr	r4, [r1, #4]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
   8bb24:	f890 5026 	ldrb.w	r5, [r0, #38]	; 0x26
   8bb28:	2d06      	cmp	r5, #6
   8bb2a:	d000      	beq.n	8bb2e <etharp_send_ip+0xe>
   8bb2c:	e7fe      	b.n	8bb2c <etharp_send_ip+0xc>
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
   8bb2e:	681d      	ldr	r5, [r3, #0]
   8bb30:	6025      	str	r5, [r4, #0]
   8bb32:	889b      	ldrh	r3, [r3, #4]
   8bb34:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
   8bb36:	6813      	ldr	r3, [r2, #0]
   8bb38:	f8c4 3006 	str.w	r3, [r4, #6]
   8bb3c:	8893      	ldrh	r3, [r2, #4]
   8bb3e:	8163      	strh	r3, [r4, #10]
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
   8bb40:	2308      	movs	r3, #8
   8bb42:	7323      	strb	r3, [r4, #12]
   8bb44:	2300      	movs	r3, #0
   8bb46:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
   8bb48:	6983      	ldr	r3, [r0, #24]
   8bb4a:	4798      	blx	r3
}
   8bb4c:	bd38      	pop	{r3, r4, r5, pc}
   8bb4e:	bf00      	nop

0008bb50 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
   8bb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8bb54:	4f12      	ldr	r7, [pc, #72]	; (8bba0 <etharp_tmr+0x50>)
   8bb56:	f107 050e 	add.w	r5, r7, #14
   8bb5a:	463c      	mov	r4, r7
   8bb5c:	37a0      	adds	r7, #160	; 0xa0
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
  }
  /* recycle entry for re-use */      
  arp_table[i].state = ETHARP_STATE_EMPTY;
   8bb5e:	f04f 0800 	mov.w	r8, #0
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
   8bb62:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8bba4 <etharp_tmr+0x54>
   8bb66:	4626      	mov	r6, r4

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    if (state != ETHARP_STATE_EMPTY
   8bb68:	7ba3      	ldrb	r3, [r4, #14]
   8bb6a:	b193      	cbz	r3, 8bb92 <etharp_tmr+0x42>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (arp_table[i].static_entry == 0)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
   8bb6c:	7be3      	ldrb	r3, [r4, #15]
   8bb6e:	3301      	adds	r3, #1
   8bb70:	b2db      	uxtb	r3, r3
   8bb72:	73e3      	strb	r3, [r4, #15]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
   8bb74:	2bef      	cmp	r3, #239	; 0xef
   8bb76:	d804      	bhi.n	8bb82 <etharp_tmr+0x32>
   8bb78:	7ba2      	ldrb	r2, [r4, #14]
   8bb7a:	2a01      	cmp	r2, #1
   8bb7c:	d109      	bne.n	8bb92 <etharp_tmr+0x42>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
   8bb7e:	2b01      	cmp	r3, #1
   8bb80:	d907      	bls.n	8bb92 <etharp_tmr+0x42>
free_entry(int i)
{
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
   8bb82:	f855 0c0e 	ldr.w	r0, [r5, #-14]
   8bb86:	b110      	cbz	r0, 8bb8e <etharp_tmr+0x3e>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
   8bb88:	47c8      	blx	r9
    arp_table[i].q = NULL;
   8bb8a:	f845 8c0e 	str.w	r8, [r5, #-14]
  }
  /* recycle entry for re-use */      
  arp_table[i].state = ETHARP_STATE_EMPTY;
   8bb8e:	f886 800e 	strb.w	r8, [r6, #14]
   8bb92:	3510      	adds	r5, #16
   8bb94:	3410      	adds	r4, #16
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   8bb96:	42bc      	cmp	r4, r7
   8bb98:	d1e5      	bne.n	8bb66 <etharp_tmr+0x16>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
   8bb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8bb9e:	bf00      	nop
   8bba0:	200759f8 	.word	0x200759f8
   8bba4:	00088045 	.word	0x00088045

0008bba8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
   8bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bbaa:	4605      	mov	r5, r0
   8bbac:	460f      	mov	r7, r1
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
   8bbae:	2003      	movs	r0, #3
   8bbb0:	212a      	movs	r1, #42	; 0x2a
   8bbb2:	2200      	movs	r2, #0
   8bbb4:	4b27      	ldr	r3, [pc, #156]	; (8bc54 <etharp_request+0xac>)
   8bbb6:	4798      	blx	r3
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
   8bbb8:	4606      	mov	r6, r0
   8bbba:	b928      	cbnz	r0, 8bbc8 <etharp_request+0x20>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
   8bbbc:	4b26      	ldr	r3, [pc, #152]	; (8bc58 <etharp_request+0xb0>)
   8bbbe:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   8bbc0:	3201      	adds	r2, #1
   8bbc2:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
   8bbc4:	20ff      	movs	r0, #255	; 0xff
   8bbc6:	e043      	b.n	8bc50 <etharp_request+0xa8>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
   8bbc8:	8943      	ldrh	r3, [r0, #10]
   8bbca:	2b29      	cmp	r3, #41	; 0x29
   8bbcc:	d800      	bhi.n	8bbd0 <etharp_request+0x28>
   8bbce:	e7fe      	b.n	8bbce <etharp_request+0x26>
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
   8bbd0:	6844      	ldr	r4, [r0, #4]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
   8bbd2:	2001      	movs	r0, #1
   8bbd4:	4b21      	ldr	r3, [pc, #132]	; (8bc5c <etharp_request+0xb4>)
   8bbd6:	4798      	blx	r3
   8bbd8:	82a0      	strh	r0, [r4, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
   8bbda:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   8bbde:	2b06      	cmp	r3, #6
   8bbe0:	d000      	beq.n	8bbe4 <etharp_request+0x3c>
   8bbe2:	e7fe      	b.n	8bbe2 <etharp_request+0x3a>
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
   8bbe4:	462b      	mov	r3, r5
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
   8bbe6:	f853 2f27 	ldr.w	r2, [r3, #39]!
   8bbea:	f8c4 2016 	str.w	r2, [r4, #22]
   8bbee:	889a      	ldrh	r2, [r3, #4]
   8bbf0:	8362      	strh	r2, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
   8bbf2:	4a1b      	ldr	r2, [pc, #108]	; (8bc60 <etharp_request+0xb8>)
   8bbf4:	6810      	ldr	r0, [r2, #0]
   8bbf6:	6220      	str	r0, [r4, #32]
   8bbf8:	8892      	ldrh	r2, [r2, #4]
   8bbfa:	84a2      	strh	r2, [r4, #36]	; 0x24
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
   8bbfc:	4a19      	ldr	r2, [pc, #100]	; (8bc64 <etharp_request+0xbc>)
   8bbfe:	6810      	ldr	r0, [r2, #0]
   8bc00:	6020      	str	r0, [r4, #0]
   8bc02:	8892      	ldrh	r2, [r2, #4]
   8bc04:	80a2      	strh	r2, [r4, #4]
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
   8bc06:	681a      	ldr	r2, [r3, #0]
   8bc08:	f8c4 2006 	str.w	r2, [r4, #6]
   8bc0c:	889b      	ldrh	r3, [r3, #4]
   8bc0e:	8163      	strh	r3, [r4, #10]
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
   8bc10:	686b      	ldr	r3, [r5, #4]
   8bc12:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
   8bc14:	683b      	ldr	r3, [r7, #0]
   8bc16:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
   8bc1a:	2200      	movs	r2, #0
   8bc1c:	73a2      	strb	r2, [r4, #14]
   8bc1e:	2301      	movs	r3, #1
   8bc20:	73e3      	strb	r3, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   8bc22:	2308      	movs	r3, #8
   8bc24:	7423      	strb	r3, [r4, #16]
   8bc26:	7462      	strb	r2, [r4, #17]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
   8bc28:	2206      	movs	r2, #6
   8bc2a:	74a2      	strb	r2, [r4, #18]
  hdr->protolen = sizeof(ip_addr_t);
   8bc2c:	2204      	movs	r2, #4
   8bc2e:	74e2      	strb	r2, [r4, #19]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
   8bc30:	7323      	strb	r3, [r4, #12]
   8bc32:	2306      	movs	r3, #6
   8bc34:	7363      	strb	r3, [r4, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
   8bc36:	69ab      	ldr	r3, [r5, #24]
   8bc38:	4628      	mov	r0, r5
   8bc3a:	4631      	mov	r1, r6
   8bc3c:	4798      	blx	r3
   8bc3e:	4604      	mov	r4, r0
  ETHARP_STATS_INC(etharp.xmit);
   8bc40:	4b05      	ldr	r3, [pc, #20]	; (8bc58 <etharp_request+0xb0>)
   8bc42:	8b1a      	ldrh	r2, [r3, #24]
   8bc44:	3201      	adds	r2, #1
   8bc46:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
   8bc48:	4630      	mov	r0, r6
   8bc4a:	4b07      	ldr	r3, [pc, #28]	; (8bc68 <etharp_request+0xc0>)
   8bc4c:	4798      	blx	r3
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
   8bc4e:	4620      	mov	r0, r4
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
   8bc50:	b240      	sxtb	r0, r0
   8bc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bc54:	000880d1 	.word	0x000880d1
   8bc58:	20076788 	.word	0x20076788
   8bc5c:	000864d1 	.word	0x000864d1
   8bc60:	000b107c 	.word	0x000b107c
   8bc64:	000b1074 	.word	0x000b1074
   8bc68:	00088045 	.word	0x00088045

0008bc6c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
   8bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc6e:	4607      	mov	r7, r0
   8bc70:	460e      	mov	r6, r1
   8bc72:	4615      	mov	r5, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
   8bc74:	6808      	ldr	r0, [r1, #0]
   8bc76:	4639      	mov	r1, r7
   8bc78:	4b4f      	ldr	r3, [pc, #316]	; (8bdb8 <etharp_query+0x14c>)
   8bc7a:	4798      	blx	r3
   8bc7c:	2800      	cmp	r0, #0
   8bc7e:	d161      	bne.n	8bd44 <etharp_query+0xd8>
      ip_addr_ismulticast(ipaddr) ||
   8bc80:	6833      	ldr	r3, [r6, #0]
   8bc82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
   8bc86:	2ae0      	cmp	r2, #224	; 0xe0
   8bc88:	d05e      	beq.n	8bd48 <etharp_query+0xdc>
      ip_addr_ismulticast(ipaddr) ||
   8bc8a:	2e00      	cmp	r6, #0
   8bc8c:	d05e      	beq.n	8bd4c <etharp_query+0xe0>
      ip_addr_isany(ipaddr)) {
   8bc8e:	2b00      	cmp	r3, #0
   8bc90:	d05e      	beq.n	8bd50 <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
   8bc92:	4630      	mov	r0, r6
   8bc94:	2101      	movs	r1, #1
   8bc96:	4b49      	ldr	r3, [pc, #292]	; (8bdbc <etharp_query+0x150>)
   8bc98:	4798      	blx	r3

  /* could not find or create entry? */
  if (i < 0) {
   8bc9a:	1e04      	subs	r4, r0, #0
   8bc9c:	da07      	bge.n	8bcae <etharp_query+0x42>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
   8bc9e:	2d00      	cmp	r5, #0
   8bca0:	d058      	beq.n	8bd54 <etharp_query+0xe8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
   8bca2:	4b47      	ldr	r3, [pc, #284]	; (8bdc0 <etharp_query+0x154>)
   8bca4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   8bca6:	3201      	adds	r2, #1
   8bca8:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
   8bcaa:	4620      	mov	r0, r4
   8bcac:	e053      	b.n	8bd56 <etharp_query+0xea>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
   8bcae:	4b45      	ldr	r3, [pc, #276]	; (8bdc4 <etharp_query+0x158>)
   8bcb0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   8bcb4:	7b9b      	ldrb	r3, [r3, #14]
   8bcb6:	b92b      	cbnz	r3, 8bcc4 <etharp_query+0x58>
    arp_table[i].state = ETHARP_STATE_PENDING;
   8bcb8:	4b42      	ldr	r3, [pc, #264]	; (8bdc4 <etharp_query+0x158>)
   8bcba:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   8bcbe:	2201      	movs	r2, #1
   8bcc0:	739a      	strb	r2, [r3, #14]
   8bcc2:	e009      	b.n	8bcd8 <etharp_query+0x6c>
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
   8bcc4:	1e5a      	subs	r2, r3, #1
   8bcc6:	b2d2      	uxtb	r2, r2
   8bcc8:	2a01      	cmp	r2, #1
   8bcca:	d900      	bls.n	8bcce <etharp_query+0x62>
   8bccc:	e7fe      	b.n	8bccc <etharp_query+0x60>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
   8bcce:	2b01      	cmp	r3, #1
   8bcd0:	d002      	beq.n	8bcd8 <etharp_query+0x6c>
   8bcd2:	2d00      	cmp	r5, #0
   8bcd4:	d167      	bne.n	8bda6 <etharp_query+0x13a>
   8bcd6:	e040      	b.n	8bd5a <etharp_query+0xee>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
   8bcd8:	4638      	mov	r0, r7
   8bcda:	4631      	mov	r1, r6
   8bcdc:	4b3a      	ldr	r3, [pc, #232]	; (8bdc8 <etharp_query+0x15c>)
   8bcde:	4798      	blx	r3
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
   8bce0:	2d00      	cmp	r5, #0
   8bce2:	d13f      	bne.n	8bd64 <etharp_query+0xf8>
   8bce4:	e037      	b.n	8bd56 <etharp_query+0xea>
  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state == ETHARP_STATE_STABLE) {
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
   8bce6:	4b39      	ldr	r3, [pc, #228]	; (8bdcc <etharp_query+0x160>)
   8bce8:	701c      	strb	r4, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
   8bcea:	4b36      	ldr	r3, [pc, #216]	; (8bdc4 <etharp_query+0x158>)
   8bcec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   8bcf0:	4638      	mov	r0, r7
   8bcf2:	4629      	mov	r1, r5
   8bcf4:	f107 0227 	add.w	r2, r7, #39	; 0x27
   8bcf8:	3308      	adds	r3, #8
   8bcfa:	4c35      	ldr	r4, [pc, #212]	; (8bdd0 <etharp_query+0x164>)
   8bcfc:	47a0      	blx	r4
   8bcfe:	e02a      	b.n	8bd56 <etharp_query+0xea>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
   8bd00:	2b01      	cmp	r3, #1
   8bd02:	d128      	bne.n	8bd56 <etharp_query+0xea>
   8bd04:	462b      	mov	r3, r5
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
   8bd06:	8959      	ldrh	r1, [r3, #10]
   8bd08:	891a      	ldrh	r2, [r3, #8]
   8bd0a:	4291      	cmp	r1, r2
   8bd0c:	d102      	bne.n	8bd14 <etharp_query+0xa8>
   8bd0e:	681a      	ldr	r2, [r3, #0]
   8bd10:	b102      	cbz	r2, 8bd14 <etharp_query+0xa8>
   8bd12:	e7fe      	b.n	8bd12 <etharp_query+0xa6>
      if(p->type != PBUF_ROM) {
   8bd14:	7b1a      	ldrb	r2, [r3, #12]
   8bd16:	2a01      	cmp	r2, #1
   8bd18:	d12b      	bne.n	8bd72 <etharp_query+0x106>
        copy_needed = 1;
        break;
      }
      p = p->next;
   8bd1a:	681b      	ldr	r3, [r3, #0]
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
   8bd1c:	2b00      	cmp	r3, #0
   8bd1e:	d1f2      	bne.n	8bd06 <etharp_query+0x9a>
   8bd20:	e030      	b.n	8bd84 <etharp_query+0x118>
    }
    if(copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
      if(p != NULL) {
        if (pbuf_copy(p, q) != ERR_OK) {
   8bd22:	4630      	mov	r0, r6
   8bd24:	4629      	mov	r1, r5
   8bd26:	4b2b      	ldr	r3, [pc, #172]	; (8bdd4 <etharp_query+0x168>)
   8bd28:	4798      	blx	r3
   8bd2a:	2800      	cmp	r0, #0
   8bd2c:	d035      	beq.n	8bd9a <etharp_query+0x12e>
          pbuf_free(p);
   8bd2e:	4630      	mov	r0, r6
   8bd30:	4b29      	ldr	r3, [pc, #164]	; (8bdd8 <etharp_query+0x16c>)
   8bd32:	4798      	blx	r3
   8bd34:	e02b      	b.n	8bd8e <etharp_query+0x122>
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
   8bd36:	4b28      	ldr	r3, [pc, #160]	; (8bdd8 <etharp_query+0x16c>)
   8bd38:	4798      	blx	r3
      }
      arp_table[i].q = p;
   8bd3a:	0124      	lsls	r4, r4, #4
   8bd3c:	4b21      	ldr	r3, [pc, #132]	; (8bdc4 <etharp_query+0x158>)
   8bd3e:	511e      	str	r6, [r3, r4]
      result = ERR_OK;
   8bd40:	2000      	movs	r0, #0
   8bd42:	e008      	b.n	8bd56 <etharp_query+0xea>
  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr) ||
      ip_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
   8bd44:	20f2      	movs	r0, #242	; 0xf2
   8bd46:	e006      	b.n	8bd56 <etharp_query+0xea>
   8bd48:	20f2      	movs	r0, #242	; 0xf2
   8bd4a:	e004      	b.n	8bd56 <etharp_query+0xea>
   8bd4c:	20f2      	movs	r0, #242	; 0xf2
   8bd4e:	e002      	b.n	8bd56 <etharp_query+0xea>
   8bd50:	20f2      	movs	r0, #242	; 0xf2
   8bd52:	e000      	b.n	8bd56 <etharp_query+0xea>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
   8bd54:	4620      	mov	r0, r4
   8bd56:	b240      	sxtb	r0, r0
   8bd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
   8bd5a:	4638      	mov	r0, r7
   8bd5c:	4631      	mov	r1, r6
   8bd5e:	4b1a      	ldr	r3, [pc, #104]	; (8bdc8 <etharp_query+0x15c>)
   8bd60:	4798      	blx	r3
   8bd62:	e7f8      	b.n	8bd56 <etharp_query+0xea>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state == ETHARP_STATE_STABLE) {
   8bd64:	4b17      	ldr	r3, [pc, #92]	; (8bdc4 <etharp_query+0x158>)
   8bd66:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   8bd6a:	7b9b      	ldrb	r3, [r3, #14]
   8bd6c:	2b02      	cmp	r3, #2
   8bd6e:	d1c7      	bne.n	8bd00 <etharp_query+0x94>
   8bd70:	e7b9      	b.n	8bce6 <etharp_query+0x7a>
      }
      p = p->next;
    }
    if(copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
   8bd72:	2003      	movs	r0, #3
   8bd74:	8919      	ldrh	r1, [r3, #8]
   8bd76:	2200      	movs	r2, #0
   8bd78:	4b18      	ldr	r3, [pc, #96]	; (8bddc <etharp_query+0x170>)
   8bd7a:	4798      	blx	r3
      if(p != NULL) {
   8bd7c:	4606      	mov	r6, r0
   8bd7e:	2800      	cmp	r0, #0
   8bd80:	d1cf      	bne.n	8bd22 <etharp_query+0xb6>
   8bd82:	e004      	b.n	8bd8e <etharp_query+0x122>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
      pbuf_ref(p);
   8bd84:	4628      	mov	r0, r5
   8bd86:	4b16      	ldr	r3, [pc, #88]	; (8bde0 <etharp_query+0x174>)
   8bd88:	4798      	blx	r3
          p = NULL;
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
   8bd8a:	462e      	mov	r6, r5
   8bd8c:	e005      	b.n	8bd9a <etharp_query+0x12e>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
   8bd8e:	4b0c      	ldr	r3, [pc, #48]	; (8bdc0 <etharp_query+0x154>)
   8bd90:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   8bd92:	3201      	adds	r2, #1
   8bd94:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
   8bd96:	20ff      	movs	r0, #255	; 0xff
   8bd98:	e7dd      	b.n	8bd56 <etharp_query+0xea>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
   8bd9a:	0123      	lsls	r3, r4, #4
   8bd9c:	4a09      	ldr	r2, [pc, #36]	; (8bdc4 <etharp_query+0x158>)
   8bd9e:	58d0      	ldr	r0, [r2, r3]
   8bda0:	2800      	cmp	r0, #0
   8bda2:	d1c8      	bne.n	8bd36 <etharp_query+0xca>
   8bda4:	e7c9      	b.n	8bd3a <etharp_query+0xce>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state == ETHARP_STATE_STABLE) {
   8bda6:	4b07      	ldr	r3, [pc, #28]	; (8bdc4 <etharp_query+0x158>)
   8bda8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   8bdac:	7b9b      	ldrb	r3, [r3, #14]
   8bdae:	2b02      	cmp	r3, #2
   8bdb0:	d099      	beq.n	8bce6 <etharp_query+0x7a>
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
   8bdb2:	20ff      	movs	r0, #255	; 0xff
   8bdb4:	e7cf      	b.n	8bd56 <etharp_query+0xea>
   8bdb6:	bf00      	nop
   8bdb8:	00086d99 	.word	0x00086d99
   8bdbc:	0008b9c1 	.word	0x0008b9c1
   8bdc0:	20076788 	.word	0x20076788
   8bdc4:	200759f8 	.word	0x200759f8
   8bdc8:	0008bba9 	.word	0x0008bba9
   8bdcc:	200759f4 	.word	0x200759f4
   8bdd0:	0008bb21 	.word	0x0008bb21
   8bdd4:	00088339 	.word	0x00088339
   8bdd8:	00088045 	.word	0x00088045
   8bddc:	000880d1 	.word	0x000880d1
   8bde0:	000882d5 	.word	0x000882d5

0008bde4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
   8bde4:	b570      	push	{r4, r5, r6, lr}
   8bde6:	b082      	sub	sp, #8
   8bde8:	4604      	mov	r4, r0
   8bdea:	460e      	mov	r6, r1
   8bdec:	4615      	mov	r5, r2
  struct eth_addr *dest, mcastaddr;

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
   8bdee:	4608      	mov	r0, r1
   8bdf0:	210e      	movs	r1, #14
   8bdf2:	4b36      	ldr	r3, [pc, #216]	; (8becc <etharp_output+0xe8>)
   8bdf4:	4798      	blx	r3
   8bdf6:	b128      	cbz	r0, 8be04 <etharp_output+0x20>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
   8bdf8:	4b35      	ldr	r3, [pc, #212]	; (8bed0 <etharp_output+0xec>)
   8bdfa:	895a      	ldrh	r2, [r3, #10]
   8bdfc:	3201      	adds	r2, #1
   8bdfe:	815a      	strh	r2, [r3, #10]
    return ERR_BUF;
   8be00:	20fe      	movs	r0, #254	; 0xfe
   8be02:	e060      	b.n	8bec6 <etharp_output+0xe2>
  dest = NULL;
  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
   8be04:	6828      	ldr	r0, [r5, #0]
   8be06:	4621      	mov	r1, r4
   8be08:	4b32      	ldr	r3, [pc, #200]	; (8bed4 <etharp_output+0xf0>)
   8be0a:	4798      	blx	r3
   8be0c:	2800      	cmp	r0, #0
   8be0e:	d14f      	bne.n	8beb0 <etharp_output+0xcc>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
   8be10:	682b      	ldr	r3, [r5, #0]
   8be12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   8be16:	2ae0      	cmp	r2, #224	; 0xe0
   8be18:	d115      	bne.n	8be46 <etharp_output+0x62>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = 0x01;
   8be1a:	2301      	movs	r3, #1
   8be1c:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = 0x00;
   8be20:	2300      	movs	r3, #0
   8be22:	f88d 3001 	strb.w	r3, [sp, #1]
    mcastaddr.addr[2] = 0x5e;
   8be26:	235e      	movs	r3, #94	; 0x5e
   8be28:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
   8be2c:	786b      	ldrb	r3, [r5, #1]
   8be2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8be32:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
   8be36:	78ab      	ldrb	r3, [r5, #2]
   8be38:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
   8be3c:	78eb      	ldrb	r3, [r5, #3]
   8be3e:	f88d 3005 	strb.w	r3, [sp, #5]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
   8be42:	466b      	mov	r3, sp
   8be44:	e035      	b.n	8beb2 <etharp_output+0xce>
  /* unicast destination IP address? */
  } else {
    /* outside local network? */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
   8be46:	6862      	ldr	r2, [r4, #4]
   8be48:	ea83 0102 	eor.w	r1, r3, r2
   8be4c:	68a2      	ldr	r2, [r4, #8]
   8be4e:	4211      	tst	r1, r2
   8be50:	d00a      	beq.n	8be68 <etharp_output+0x84>
        !ip_addr_islinklocal(ipaddr)) {
   8be52:	b29b      	uxth	r3, r3
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  /* unicast destination IP address? */
  } else {
    /* outside local network? */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
   8be54:	f64f 62a9 	movw	r2, #65193	; 0xfea9
   8be58:	4293      	cmp	r3, r2
   8be5a:	d005      	beq.n	8be68 <etharp_output+0x84>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
   8be5c:	f114 050c 	adds.w	r5, r4, #12
   8be60:	d02e      	beq.n	8bec0 <etharp_output+0xdc>
   8be62:	68e3      	ldr	r3, [r4, #12]
   8be64:	2b00      	cmp	r3, #0
   8be66:	d02d      	beq.n	8bec4 <etharp_output+0xe0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state == ETHARP_STATE_STABLE) &&
   8be68:	4b1b      	ldr	r3, [pc, #108]	; (8bed8 <etharp_output+0xf4>)
   8be6a:	781b      	ldrb	r3, [r3, #0]
   8be6c:	4a1b      	ldr	r2, [pc, #108]	; (8bedc <etharp_output+0xf8>)
   8be6e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   8be72:	7b92      	ldrb	r2, [r2, #14]
   8be74:	2a02      	cmp	r2, #2
   8be76:	d115      	bne.n	8bea4 <etharp_output+0xc0>
            (ip_addr_cmp(ipaddr, &arp_table[etharp_cached_entry].ipaddr))) {
   8be78:	4918      	ldr	r1, [pc, #96]	; (8bedc <etharp_output+0xf8>)
   8be7a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state == ETHARP_STATE_STABLE) &&
   8be7e:	682a      	ldr	r2, [r5, #0]
   8be80:	6849      	ldr	r1, [r1, #4]
   8be82:	428a      	cmp	r2, r1
   8be84:	d10e      	bne.n	8bea4 <etharp_output+0xc0>
            (ip_addr_cmp(ipaddr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
   8be86:	4a12      	ldr	r2, [pc, #72]	; (8bed0 <etharp_output+0xec>)
   8be88:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
   8be8a:	3101      	adds	r1, #1
   8be8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
          return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
   8be8e:	4a13      	ldr	r2, [pc, #76]	; (8bedc <etharp_output+0xf8>)
   8be90:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   8be94:	4620      	mov	r0, r4
   8be96:	4631      	mov	r1, r6
   8be98:	f104 0227 	add.w	r2, r4, #39	; 0x27
   8be9c:	3308      	adds	r3, #8
   8be9e:	4c10      	ldr	r4, [pc, #64]	; (8bee0 <etharp_output+0xfc>)
   8bea0:	47a0      	blx	r4
   8bea2:	e010      	b.n	8bec6 <etharp_output+0xe2>
#if LWIP_NETIF_HWADDRHINT
      }
    }
#endif /* LWIP_NETIF_HWADDRHINT */
    /* queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, ipaddr, q);
   8bea4:	4620      	mov	r0, r4
   8bea6:	4629      	mov	r1, r5
   8bea8:	4632      	mov	r2, r6
   8beaa:	4b0e      	ldr	r3, [pc, #56]	; (8bee4 <etharp_output+0x100>)
   8beac:	4798      	blx	r3
   8beae:	e00a      	b.n	8bec6 <etharp_output+0xe2>
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
   8beb0:	4b0d      	ldr	r3, [pc, #52]	; (8bee8 <etharp_output+0x104>)
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
   8beb2:	4620      	mov	r0, r4
   8beb4:	4631      	mov	r1, r6
   8beb6:	f104 0227 	add.w	r2, r4, #39	; 0x27
   8beba:	4c09      	ldr	r4, [pc, #36]	; (8bee0 <etharp_output+0xfc>)
   8bebc:	47a0      	blx	r4
   8bebe:	e002      	b.n	8bec6 <etharp_output+0xe2>
          /* send to hardware address of default gateway IP address */
          ipaddr = &(netif->gw);
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
   8bec0:	20fc      	movs	r0, #252	; 0xfc
   8bec2:	e000      	b.n	8bec6 <etharp_output+0xe2>
   8bec4:	20fc      	movs	r0, #252	; 0xfc

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
}
   8bec6:	b240      	sxtb	r0, r0
   8bec8:	b002      	add	sp, #8
   8beca:	bd70      	pop	{r4, r5, r6, pc}
   8becc:	00087fd1 	.word	0x00087fd1
   8bed0:	20076788 	.word	0x20076788
   8bed4:	00086d99 	.word	0x00086d99
   8bed8:	200759f4 	.word	0x200759f4
   8bedc:	200759f8 	.word	0x200759f8
   8bee0:	0008bb21 	.word	0x0008bb21
   8bee4:	0008bc6d 	.word	0x0008bc6d
   8bee8:	000b1074 	.word	0x000b1074

0008beec <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
   8beec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bef0:	b085      	sub	sp, #20
   8bef2:	4606      	mov	r6, r0
   8bef4:	460d      	mov	r5, r1
  struct eth_hdr* ethhdr;
  u16_t type;
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;

  if (p->len <= SIZEOF_ETH_HDR) {
   8bef6:	8943      	ldrh	r3, [r0, #10]
   8bef8:	2b0e      	cmp	r3, #14
   8befa:	d807      	bhi.n	8bf0c <ethernet_input+0x20>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
   8befc:	4b7f      	ldr	r3, [pc, #508]	; (8c0fc <ethernet_input+0x210>)
   8befe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   8bf00:	3201      	adds	r2, #1
   8bf02:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
   8bf04:	8bda      	ldrh	r2, [r3, #30]
   8bf06:	3201      	adds	r2, #1
   8bf08:	83da      	strh	r2, [r3, #30]
    goto free_and_return;
   8bf0a:	e0ea      	b.n	8c0e2 <ethernet_input+0x1f6>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
   8bf0c:	6844      	ldr	r4, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  switch (type) {
   8bf0e:	89a2      	ldrh	r2, [r4, #12]
   8bf10:	2a08      	cmp	r2, #8
   8bf12:	d003      	beq.n	8bf1c <ethernet_input+0x30>
   8bf14:	f5b2 6fc1 	cmp.w	r2, #1544	; 0x608
   8bf18:	d011      	beq.n	8bf3e <ethernet_input+0x52>
   8bf1a:	e0db      	b.n	8c0d4 <ethernet_input+0x1e8>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
   8bf1c:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   8bf20:	f013 0f20 	tst.w	r3, #32
   8bf24:	f000 80dd 	beq.w	8c0e2 <ethernet_input+0x1f6>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
   8bf28:	f06f 010d 	mvn.w	r1, #13
   8bf2c:	4b74      	ldr	r3, [pc, #464]	; (8c100 <ethernet_input+0x214>)
   8bf2e:	4798      	blx	r3
   8bf30:	b100      	cbz	r0, 8bf34 <ethernet_input+0x48>
   8bf32:	e7fe      	b.n	8bf32 <ethernet_input+0x46>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
   8bf34:	4630      	mov	r0, r6
   8bf36:	4629      	mov	r1, r5
   8bf38:	4b72      	ldr	r3, [pc, #456]	; (8c104 <ethernet_input+0x218>)
   8bf3a:	4798      	blx	r3
      }
      break;
   8bf3c:	e0da      	b.n	8c0f4 <ethernet_input+0x208>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
   8bf3e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   8bf42:	f012 0f20 	tst.w	r2, #32
   8bf46:	f000 80cc 	beq.w	8c0e2 <ethernet_input+0x1f6>
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
   8bf4a:	b901      	cbnz	r1, 8bf4e <ethernet_input+0x62>
   8bf4c:	e7fe      	b.n	8bf4c <ethernet_input+0x60>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
   8bf4e:	2b29      	cmp	r3, #41	; 0x29
   8bf50:	d809      	bhi.n	8bf66 <ethernet_input+0x7a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
   8bf52:	4b6a      	ldr	r3, [pc, #424]	; (8c0fc <ethernet_input+0x210>)
   8bf54:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   8bf56:	3201      	adds	r2, #1
   8bf58:	845a      	strh	r2, [r3, #34]	; 0x22
    ETHARP_STATS_INC(etharp.drop);
   8bf5a:	8bda      	ldrh	r2, [r3, #30]
   8bf5c:	3201      	adds	r2, #1
   8bf5e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
   8bf60:	4b69      	ldr	r3, [pc, #420]	; (8c108 <ethernet_input+0x21c>)
   8bf62:	4798      	blx	r3
   8bf64:	e0c6      	b.n	8c0f4 <ethernet_input+0x208>
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
   8bf66:	89e3      	ldrh	r3, [r4, #14]
   8bf68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   8bf6c:	d108      	bne.n	8bf80 <ethernet_input+0x94>
   8bf6e:	7ca3      	ldrb	r3, [r4, #18]
   8bf70:	2b06      	cmp	r3, #6
   8bf72:	d105      	bne.n	8bf80 <ethernet_input+0x94>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
   8bf74:	7ce3      	ldrb	r3, [r4, #19]
   8bf76:	2b04      	cmp	r3, #4
   8bf78:	d102      	bne.n	8bf80 <ethernet_input+0x94>
      (hdr->protolen != sizeof(ip_addr_t)) ||
   8bf7a:	8a23      	ldrh	r3, [r4, #16]
   8bf7c:	2b08      	cmp	r3, #8
   8bf7e:	d00a      	beq.n	8bf96 <ethernet_input+0xaa>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
   8bf80:	4b5e      	ldr	r3, [pc, #376]	; (8c0fc <ethernet_input+0x210>)
   8bf82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   8bf84:	3201      	adds	r2, #1
   8bf86:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
   8bf88:	8bda      	ldrh	r2, [r3, #30]
   8bf8a:	3201      	adds	r2, #1
   8bf8c:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
   8bf8e:	4630      	mov	r0, r6
   8bf90:	4b5d      	ldr	r3, [pc, #372]	; (8c108 <ethernet_input+0x21c>)
   8bf92:	4798      	blx	r3
   8bf94:	e0ae      	b.n	8c0f4 <ethernet_input+0x208>
    return;
  }
  ETHARP_STATS_INC(etharp.recv);
   8bf96:	4b59      	ldr	r3, [pc, #356]	; (8c0fc <ethernet_input+0x210>)
   8bf98:	8b5a      	ldrh	r2, [r3, #26]
   8bf9a:	3201      	adds	r2, #1
   8bf9c:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
   8bf9e:	46a2      	mov	sl, r4
   8bfa0:	f85a 0f1c 	ldr.w	r0, [sl, #28]!
   8bfa4:	9002      	str	r0, [sp, #8]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
   8bfa6:	f8d4 0026 	ldr.w	r0, [r4, #38]	; 0x26
   8bfaa:	9003      	str	r0, [sp, #12]

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
   8bfac:	1d0a      	adds	r2, r1, #4
   8bfae:	9201      	str	r2, [sp, #4]
   8bfb0:	f000 809b 	beq.w	8c0ea <ethernet_input+0x1fe>
   8bfb4:	684b      	ldr	r3, [r1, #4]
   8bfb6:	2b00      	cmp	r3, #0
   8bfb8:	f000 8097 	beq.w	8c0ea <ethernet_input+0x1fe>
    for_us = 0;
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
   8bfbc:	9a03      	ldr	r2, [sp, #12]
   8bfbe:	4293      	cmp	r3, r2
   8bfc0:	bf14      	ite	ne
   8bfc2:	f04f 0900 	movne.w	r9, #0
   8bfc6:	f04f 0901 	moveq.w	r9, #1
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   8bfca:	f104 0716 	add.w	r7, r4, #22
   8bfce:	f1b9 0f00 	cmp.w	r9, #0
   8bfd2:	d102      	bne.n	8bfda <ethernet_input+0xee>
   8bfd4:	f04f 0b02 	mov.w	fp, #2
   8bfd8:	e001      	b.n	8bfde <ethernet_input+0xf2>
   8bfda:	f04f 0b01 	mov.w	fp, #1
 */
static err_t
update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETHARP_HWADDR_LEN", netif->hwaddr_len == ETHARP_HWADDR_LEN);
   8bfde:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   8bfe2:	2b06      	cmp	r3, #6
   8bfe4:	d000      	beq.n	8bfe8 <ethernet_input+0xfc>
   8bfe6:	e7fe      	b.n	8bfe6 <ethernet_input+0xfa>
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
   8bfe8:	f105 0827 	add.w	r8, r5, #39	; 0x27
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
   8bfec:	9802      	ldr	r0, [sp, #8]
   8bfee:	2800      	cmp	r0, #0
   8bff0:	d033      	beq.n	8c05a <ethernet_input+0x16e>
      ip_addr_isbroadcast(ipaddr, netif) ||
   8bff2:	4629      	mov	r1, r5
   8bff4:	4b45      	ldr	r3, [pc, #276]	; (8c10c <ethernet_input+0x220>)
   8bff6:	4798      	blx	r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
   8bff8:	bb78      	cbnz	r0, 8c05a <ethernet_input+0x16e>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
   8bffa:	9b02      	ldr	r3, [sp, #8]
   8bffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
   8c000:	2be0      	cmp	r3, #224	; 0xe0
   8c002:	d02a      	beq.n	8c05a <ethernet_input+0x16e>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = find_entry(ipaddr, flags);
   8c004:	a802      	add	r0, sp, #8
   8c006:	4659      	mov	r1, fp
   8c008:	4b41      	ldr	r3, [pc, #260]	; (8c110 <ethernet_input+0x224>)
   8c00a:	4798      	blx	r3
  /* bail out if no entry could be found */
  if (i < 0) {
   8c00c:	1e01      	subs	r1, r0, #0
   8c00e:	db24      	blt.n	8c05a <ethernet_input+0x16e>
    arp_table[i].static_entry = 1;
  }
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */

  /* mark it stable */
  arp_table[i].state = ETHARP_STATE_STABLE;
   8c010:	f8df c104 	ldr.w	ip, [pc, #260]	; 8c118 <ethernet_input+0x22c>
   8c014:	ea4f 1e01 	mov.w	lr, r1, lsl #4
   8c018:	eb0c 0b0e 	add.w	fp, ip, lr
   8c01c:	2202      	movs	r2, #2
   8c01e:	f88b 200e 	strb.w	r2, [fp, #14]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
   8c022:	4622      	mov	r2, r4
   8c024:	f852 0f16 	ldr.w	r0, [r2, #22]!
   8c028:	f8cb 0008 	str.w	r0, [fp, #8]
   8c02c:	8892      	ldrh	r2, [r2, #4]
   8c02e:	f8ab 200c 	strh.w	r2, [fp, #12]
  /* reset time stamp */
  arp_table[i].ctime = 0;
   8c032:	2200      	movs	r2, #0
   8c034:	f88b 200f 	strb.w	r2, [fp, #15]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
   8c038:	f85c b00e 	ldr.w	fp, [ip, lr]
   8c03c:	f1bb 0f00 	cmp.w	fp, #0
   8c040:	d00b      	beq.n	8c05a <ethernet_input+0x16e>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
   8c042:	f84c 200e 	str.w	r2, [ip, lr]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
   8c046:	4628      	mov	r0, r5
   8c048:	4659      	mov	r1, fp
   8c04a:	4642      	mov	r2, r8
   8c04c:	463b      	mov	r3, r7
   8c04e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8c11c <ethernet_input+0x230>
   8c052:	47e0      	blx	ip
    /* free the queued IP packet */
    pbuf_free(p);
   8c054:	4658      	mov	r0, fp
   8c056:	4b2c      	ldr	r3, [pc, #176]	; (8c108 <ethernet_input+0x21c>)
   8c058:	4798      	blx	r3
      ->  update the source IP address in the cache, if present */
  update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
   8c05a:	8aa3      	ldrh	r3, [r4, #20]
   8c05c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   8c060:	d003      	beq.n	8c06a <ethernet_input+0x17e>
   8c062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8c066:	d031      	beq.n	8c0cc <ethernet_input+0x1e0>
   8c068:	e02c      	b.n	8c0c4 <ethernet_input+0x1d8>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
   8c06a:	f1b9 0f00 	cmp.w	r9, #0
   8c06e:	d02d      	beq.n	8c0cc <ethernet_input+0x1e0>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
   8c070:	2002      	movs	r0, #2
   8c072:	4b28      	ldr	r3, [pc, #160]	; (8c114 <ethernet_input+0x228>)
   8c074:	4798      	blx	r3
   8c076:	82a0      	strh	r0, [r4, #20]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
   8c078:	f8da 3000 	ldr.w	r3, [sl]
   8c07c:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
   8c080:	9a01      	ldr	r2, [sp, #4]
   8c082:	6813      	ldr	r3, [r2, #0]
   8c084:	61e3      	str	r3, [r4, #28]

      LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
   8c086:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   8c08a:	2b06      	cmp	r3, #6
   8c08c:	d000      	beq.n	8c090 <ethernet_input+0x1a4>
   8c08e:	e7fe      	b.n	8c08e <ethernet_input+0x1a2>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
   8c090:	683b      	ldr	r3, [r7, #0]
   8c092:	6223      	str	r3, [r4, #32]
   8c094:	88bb      	ldrh	r3, [r7, #4]
   8c096:	84a3      	strh	r3, [r4, #36]	; 0x24
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
   8c098:	683b      	ldr	r3, [r7, #0]
   8c09a:	6023      	str	r3, [r4, #0]
   8c09c:	88bb      	ldrh	r3, [r7, #4]
   8c09e:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
   8c0a0:	f8d8 3000 	ldr.w	r3, [r8]
   8c0a4:	603b      	str	r3, [r7, #0]
   8c0a6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   8c0aa:	80bb      	strh	r3, [r7, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
   8c0ac:	f8d8 3000 	ldr.w	r3, [r8]
   8c0b0:	f8c4 3006 	str.w	r3, [r4, #6]
   8c0b4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   8c0b8:	8163      	strh	r3, [r4, #10]

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
   8c0ba:	69ab      	ldr	r3, [r5, #24]
   8c0bc:	4628      	mov	r0, r5
   8c0be:	4631      	mov	r1, r6
   8c0c0:	4798      	blx	r3
   8c0c2:	e003      	b.n	8c0cc <ethernet_input+0x1e0>
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
   8c0c4:	4b0d      	ldr	r3, [pc, #52]	; (8c0fc <ethernet_input+0x210>)
   8c0c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   8c0c8:	3201      	adds	r2, #1
   8c0ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
   8c0cc:	4630      	mov	r0, r6
   8c0ce:	4b0e      	ldr	r3, [pc, #56]	; (8c108 <ethernet_input+0x21c>)
   8c0d0:	4798      	blx	r3
   8c0d2:	e00f      	b.n	8c0f4 <ethernet_input+0x208>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
   8c0d4:	4b09      	ldr	r3, [pc, #36]	; (8c0fc <ethernet_input+0x210>)
   8c0d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   8c0d8:	3201      	adds	r2, #1
   8c0da:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
   8c0dc:	8bda      	ldrh	r2, [r3, #30]
   8c0de:	3201      	adds	r2, #1
   8c0e0:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
   8c0e2:	4630      	mov	r0, r6
   8c0e4:	4b08      	ldr	r3, [pc, #32]	; (8c108 <ethernet_input+0x21c>)
   8c0e6:	4798      	blx	r3
   8c0e8:	e004      	b.n	8c0f4 <ethernet_input+0x208>
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   8c0ea:	f104 0716 	add.w	r7, r4, #22
   8c0ee:	f04f 0900 	mov.w	r9, #0
   8c0f2:	e76f      	b.n	8bfd4 <ethernet_input+0xe8>
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  return ERR_OK;
}
   8c0f4:	2000      	movs	r0, #0
   8c0f6:	b005      	add	sp, #20
   8c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c0fc:	20076788 	.word	0x20076788
   8c100:	00087fd1 	.word	0x00087fd1
   8c104:	000869dd 	.word	0x000869dd
   8c108:	00088045 	.word	0x00088045
   8c10c:	00086d99 	.word	0x00086d99
   8c110:	0008b9c1 	.word	0x0008b9c1
   8c114:	000864d1 	.word	0x000864d1
   8c118:	200759f8 	.word	0x200759f8
   8c11c:	0008bb21 	.word	0x0008bb21

0008c120 <low_level_input>:
 *
 * \return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error.
 */
static struct pbuf *low_level_input(struct netif *netif)
{
   8c120:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c122:	f2ad 6d0c 	subw	sp, sp, #1548	; 0x60c
	uint32_t ul_frmlen;
	uint8_t uc_rc;

	/* Obtain the size of the packet and put it into the "len"
	 * variable. */
	uc_rc = emac_dev_read(&gs_emac_dev, pc_buf, sizeof(pc_buf), &ul_frmlen);
   8c126:	4818      	ldr	r0, [pc, #96]	; (8c188 <low_level_input+0x68>)
   8c128:	a902      	add	r1, sp, #8
   8c12a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8c12e:	ab01      	add	r3, sp, #4
   8c130:	4c16      	ldr	r4, [pc, #88]	; (8c18c <low_level_input+0x6c>)
   8c132:	47a0      	blx	r4
	if (uc_rc != EMAC_OK) {
   8c134:	b2c0      	uxtb	r0, r0
   8c136:	bb10      	cbnz	r0, 8c17e <low_level_input+0x5e>
#if ETH_PAD_SIZE
	s_len += ETH_PAD_SIZE;    /* allow room for Ethernet padding */
#endif

	/* We allocate a pbuf chain of pbufs from the pool. */
	p = pbuf_alloc(PBUF_RAW, s_len, PBUF_POOL);
   8c138:	2003      	movs	r0, #3
   8c13a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   8c13e:	4602      	mov	r2, r0
   8c140:	4b13      	ldr	r3, [pc, #76]	; (8c190 <low_level_input+0x70>)
   8c142:	4798      	blx	r3

	if (p != NULL) {
   8c144:	4607      	mov	r7, r0
   8c146:	b188      	cbz	r0, 8c16c <low_level_input+0x4c>
   8c148:	4604      	mov	r4, r0
   8c14a:	ad02      	add	r5, sp, #8
		for (q = p; q != NULL; q = q->next) {
			/* Read enough bytes to fill this pbuf in the chain. The
			 * available data in the pbuf is given by the q->len
			 * variable. */
			/* read data into(q->payload, q->len); */
			memcpy(q->payload, bufptr, q->len);
   8c14c:	4e11      	ldr	r6, [pc, #68]	; (8c194 <low_level_input+0x74>)
   8c14e:	6860      	ldr	r0, [r4, #4]
   8c150:	4629      	mov	r1, r5
   8c152:	8962      	ldrh	r2, [r4, #10]
   8c154:	47b0      	blx	r6
			bufptr += q->len;
   8c156:	8963      	ldrh	r3, [r4, #10]
   8c158:	441d      	add	r5, r3
		pbuf_header(p, -ETH_PAD_SIZE);  /* drop the padding word */
#endif

		/* Iterate over the pbuf chain until we have read the entire
		 * packet into the pbuf. */
		for (q = p; q != NULL; q = q->next) {
   8c15a:	6824      	ldr	r4, [r4, #0]
   8c15c:	2c00      	cmp	r4, #0
   8c15e:	d1f6      	bne.n	8c14e <low_level_input+0x2e>

#if ETH_PAD_SIZE
		pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
#endif

		LINK_STATS_INC(link.recv);
   8c160:	4b0d      	ldr	r3, [pc, #52]	; (8c198 <low_level_input+0x78>)
   8c162:	885a      	ldrh	r2, [r3, #2]
   8c164:	3201      	adds	r2, #1
   8c166:	805a      	strh	r2, [r3, #2]
		/* Drop packet(); */
		LINK_STATS_INC(link.memerr);
		LINK_STATS_INC(link.drop);
	}

	return p;
   8c168:	4638      	mov	r0, r7
   8c16a:	e009      	b.n	8c180 <low_level_input+0x60>
#endif

		LINK_STATS_INC(link.recv);
	} else {
		/* Drop packet(); */
		LINK_STATS_INC(link.memerr);
   8c16c:	4b0a      	ldr	r3, [pc, #40]	; (8c198 <low_level_input+0x78>)
   8c16e:	899a      	ldrh	r2, [r3, #12]
   8c170:	3201      	adds	r2, #1
   8c172:	819a      	strh	r2, [r3, #12]
		LINK_STATS_INC(link.drop);
   8c174:	88da      	ldrh	r2, [r3, #6]
   8c176:	3201      	adds	r2, #1
   8c178:	80da      	strh	r2, [r3, #6]
	}

	return p;
   8c17a:	2000      	movs	r0, #0
   8c17c:	e000      	b.n	8c180 <low_level_input+0x60>

	/* Obtain the size of the packet and put it into the "len"
	 * variable. */
	uc_rc = emac_dev_read(&gs_emac_dev, pc_buf, sizeof(pc_buf), &ul_frmlen);
	if (uc_rc != EMAC_OK) {
		return NULL;
   8c17e:	2000      	movs	r0, #0
		LINK_STATS_INC(link.memerr);
		LINK_STATS_INC(link.drop);
	}

	return p;
}
   8c180:	f20d 6d0c 	addw	sp, sp, #1548	; 0x60c
   8c184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c186:	bf00      	nop
   8c188:	20075a98 	.word	0x20075a98
   8c18c:	00083429 	.word	0x00083429
   8c190:	000880d1 	.word	0x000880d1
   8c194:	0008cca9 	.word	0x0008cca9
   8c198:	20076788 	.word	0x20076788

0008c19c <ethernetif_input>:
 *
 * \param pv_parameters the lwip network interface structure for this
 * ethernetif.
 */
void ethernetif_input(void * pvParameters)
{
   8c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c1a0:	4604      	mov	r4, r0
#ifdef FREERTOS_USED
	for( ;; ) {
		do {
#endif
			/* move received packet into a new pbuf */
			p = low_level_input( netif );
   8c1a2:	4e0a      	ldr	r6, [pc, #40]	; (8c1cc <ethernetif_input+0x30>)
			if( p == NULL ) {
#ifdef FREERTOS_USED
				/* No packet could be read.  Wait a for an interrupt to tell us
				there is more data available. */
				vTaskDelay(100);
   8c1a4:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8c1d4 <ethernetif_input+0x38>
   8c1a8:	2764      	movs	r7, #100	; 0x64
#ifdef FREERTOS_USED
	for( ;; ) {
		do {
#endif
			/* move received packet into a new pbuf */
			p = low_level_input( netif );
   8c1aa:	4620      	mov	r0, r4
   8c1ac:	47b0      	blx	r6
			if( p == NULL ) {
   8c1ae:	4605      	mov	r5, r0
   8c1b0:	b930      	cbnz	r0, 8c1c0 <ethernetif_input+0x24>
#ifdef FREERTOS_USED
				/* No packet could be read.  Wait a for an interrupt to tell us
				there is more data available. */
				vTaskDelay(100);
   8c1b2:	4638      	mov	r0, r7
   8c1b4:	47c0      	blx	r8
   8c1b6:	e7f8      	b.n	8c1aa <ethernetif_input+0xe>
				return;
			}
#endif

		if( ERR_OK != netif->input( p, netif ) ) {
			pbuf_free(p);
   8c1b8:	4628      	mov	r0, r5
   8c1ba:	4b05      	ldr	r3, [pc, #20]	; (8c1d0 <ethernetif_input+0x34>)
   8c1bc:	4798      	blx	r3
   8c1be:	e7f3      	b.n	8c1a8 <ethernetif_input+0xc>
#else
				return;
			}
#endif

		if( ERR_OK != netif->input( p, netif ) ) {
   8c1c0:	6923      	ldr	r3, [r4, #16]
   8c1c2:	4621      	mov	r1, r4
   8c1c4:	4798      	blx	r3
   8c1c6:	2800      	cmp	r0, #0
   8c1c8:	d0ee      	beq.n	8c1a8 <ethernetif_input+0xc>
   8c1ca:	e7f5      	b.n	8c1b8 <ethernetif_input+0x1c>
   8c1cc:	0008c121 	.word	0x0008c121
   8c1d0:	00088045 	.word	0x00088045
   8c1d4:	00084fbd 	.word	0x00084fbd

0008c1d8 <low_level_output>:
 *
 * \return ERR_OK if the packet could be sent
 *         an err_t value if the packet couldn't be sent.
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
   8c1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c1da:	f2ad 6d04 	subw	sp, sp, #1540	; 0x604
   8c1de:	460c      	mov	r4, r1
#if ETH_PAD_SIZE
	pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
#endif

	/* Check the buffer boundary */
	if (p->tot_len > NET_RW_BUFF_SIZE) {
   8c1e0:	890f      	ldrh	r7, [r1, #8]
   8c1e2:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
   8c1e6:	d81e      	bhi.n	8c226 <low_level_output+0x4e>
		return ERR_BUF;
	}

	/* Clear the output buffer */
	memset(bufptr, 0x0, NET_RW_BUFF_SIZE);
   8c1e8:	4668      	mov	r0, sp
   8c1ea:	2100      	movs	r1, #0
   8c1ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8c1f0:	4b10      	ldr	r3, [pc, #64]	; (8c234 <low_level_output+0x5c>)
   8c1f2:	4798      	blx	r3

	for (q = p; q != NULL; q = q->next) {
   8c1f4:	b154      	cbz	r4, 8c20c <low_level_output+0x34>
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
	struct pbuf *q = NULL;
	int8_t pc_buf[NET_RW_BUFF_SIZE];
	int8_t *bufptr = &pc_buf[0];
   8c1f6:	466d      	mov	r5, sp
		/* Send the data from the pbuf to the interface, one pbuf at a
		 * time. The size of the data in each pbuf is kept in the ->len
		 * variable. */

		/* Send data from(q->payload, q->len); */
		memcpy(bufptr, q->payload, q->len);
   8c1f8:	4e0f      	ldr	r6, [pc, #60]	; (8c238 <low_level_output+0x60>)
   8c1fa:	4628      	mov	r0, r5
   8c1fc:	6861      	ldr	r1, [r4, #4]
   8c1fe:	8962      	ldrh	r2, [r4, #10]
   8c200:	47b0      	blx	r6
		bufptr += q->len;
   8c202:	8963      	ldrh	r3, [r4, #10]
   8c204:	441d      	add	r5, r3
	}

	/* Clear the output buffer */
	memset(bufptr, 0x0, NET_RW_BUFF_SIZE);

	for (q = p; q != NULL; q = q->next) {
   8c206:	6824      	ldr	r4, [r4, #0]
   8c208:	2c00      	cmp	r4, #0
   8c20a:	d1f6      	bne.n	8c1fa <low_level_output+0x22>
		memcpy(bufptr, q->payload, q->len);
		bufptr += q->len;
	}

	/* Signal that packet should be sent(); */
	uc_rc = emac_dev_write(&gs_emac_dev, pc_buf, p->tot_len, NULL);
   8c20c:	480b      	ldr	r0, [pc, #44]	; (8c23c <low_level_output+0x64>)
   8c20e:	4669      	mov	r1, sp
   8c210:	463a      	mov	r2, r7
   8c212:	2300      	movs	r3, #0
   8c214:	4c0a      	ldr	r4, [pc, #40]	; (8c240 <low_level_output+0x68>)
   8c216:	47a0      	blx	r4
	if (uc_rc != EMAC_OK) {
   8c218:	b2c0      	uxtb	r0, r0
   8c21a:	b930      	cbnz	r0, 8c22a <low_level_output+0x52>

#if ETH_PAD_SIZE
	pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
#endif

	LINK_STATS_INC(link.xmit);
   8c21c:	4b09      	ldr	r3, [pc, #36]	; (8c244 <low_level_output+0x6c>)
   8c21e:	881a      	ldrh	r2, [r3, #0]
   8c220:	3201      	adds	r2, #1
   8c222:	801a      	strh	r2, [r3, #0]

	return ERR_OK;
   8c224:	e002      	b.n	8c22c <low_level_output+0x54>
	pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
#endif

	/* Check the buffer boundary */
	if (p->tot_len > NET_RW_BUFF_SIZE) {
		return ERR_BUF;
   8c226:	20fe      	movs	r0, #254	; 0xfe
   8c228:	e000      	b.n	8c22c <low_level_output+0x54>
	}

	/* Signal that packet should be sent(); */
	uc_rc = emac_dev_write(&gs_emac_dev, pc_buf, p->tot_len, NULL);
	if (uc_rc != EMAC_OK) {
		return ERR_BUF;
   8c22a:	20fe      	movs	r0, #254	; 0xfe
#endif

	LINK_STATS_INC(link.xmit);

	return ERR_OK;
}
   8c22c:	b240      	sxtb	r0, r0
   8c22e:	f20d 6d04 	addw	sp, sp, #1540	; 0x604
   8c232:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c234:	0008ccbb 	.word	0x0008ccbb
   8c238:	0008cca9 	.word	0x0008cca9
   8c23c:	20075a98 	.word	0x20075a98
   8c240:	000835a9 	.word	0x000835a9
   8c244:	20076788 	.word	0x20076788

0008c248 <EMAC_Handler>:

/**
 * \brief EMAC interrupt handler.
 */
void EMAC_Handler(void)
{
   8c248:	b508      	push	{r3, lr}
	emac_handler(&gs_emac_dev);
   8c24a:	4802      	ldr	r0, [pc, #8]	; (8c254 <EMAC_Handler+0xc>)
   8c24c:	4b02      	ldr	r3, [pc, #8]	; (8c258 <EMAC_Handler+0x10>)
   8c24e:	4798      	blx	r3
   8c250:	bd08      	pop	{r3, pc}
   8c252:	bf00      	nop
   8c254:	20075a98 	.word	0x20075a98
   8c258:	00083639 	.word	0x00083639

0008c25c <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
   8c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c260:	b086      	sub	sp, #24
	LWIP_ASSERT("netif != NULL", (netif != NULL));
   8c262:	4604      	mov	r4, r0
   8c264:	b900      	cbnz	r0, 8c268 <ethernetif_init+0xc>
   8c266:	e7fe      	b.n	8c266 <ethernetif_init+0xa>
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = NULL;
   8c268:	2600      	movs	r6, #0
   8c26a:	6206      	str	r6, [r0, #32]
	netif->name[0] = IFNAME0;
   8c26c:	2365      	movs	r3, #101	; 0x65
   8c26e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	netif->name[1] = IFNAME1;
   8c272:	236e      	movs	r3, #110	; 0x6e
   8c274:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
   8c278:	4b52      	ldr	r3, [pc, #328]	; (8c3c4 <ethernetif_init+0x168>)
   8c27a:	6143      	str	r3, [r0, #20]
	netif->linkoutput = low_level_output;
   8c27c:	4b52      	ldr	r3, [pc, #328]	; (8c3c8 <ethernetif_init+0x16c>)
   8c27e:	6183      	str	r3, [r0, #24]
#ifdef FREERTOS_USED
	unsigned portBASE_TYPE uxPriority;
#endif

	/* Set MAC hardware address length */
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
   8c280:	2306      	movs	r3, #6
   8c282:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	/* Set MAC hardware address */
	netif->hwaddr[0] = gs_uc_mac_address[0];
   8c286:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
	netif->hwaddr[1] = gs_uc_mac_address[1];
   8c28a:	2304      	movs	r3, #4
   8c28c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	netif->hwaddr[2] = gs_uc_mac_address[2];
   8c290:	2725      	movs	r7, #37	; 0x25
   8c292:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
	netif->hwaddr[3] = gs_uc_mac_address[3];
   8c296:	231c      	movs	r3, #28
   8c298:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	netif->hwaddr[4] = gs_uc_mac_address[4];
   8c29c:	23a0      	movs	r3, #160	; 0xa0
   8c29e:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	netif->hwaddr[5] = gs_uc_mac_address[5];
   8c2a2:	2302      	movs	r3, #2
   8c2a4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

	/* Maximum transfer unit */
	netif->mtu = NET_MTU;
   8c2a8:	f240 53dc 	movw	r3, #1500	; 0x5dc
   8c2ac:	8483      	strh	r3, [r0, #36]	; 0x24

	/* Configure EMAC pins */
	gpio_configure_pin(PIN_EEMAC_EREFCK, PIN_EMAC_FLAGS);
   8c2ae:	2020      	movs	r0, #32
   8c2b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2b4:	4d45      	ldr	r5, [pc, #276]	; (8c3cc <ethernetif_init+0x170>)
   8c2b6:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_ETX0, PIN_EMAC_FLAGS);
   8c2b8:	2022      	movs	r0, #34	; 0x22
   8c2ba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2be:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_ETX1, PIN_EMAC_FLAGS);
   8c2c0:	2023      	movs	r0, #35	; 0x23
   8c2c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2c6:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_ETXEN, PIN_EMAC_FLAGS);
   8c2c8:	2021      	movs	r0, #33	; 0x21
   8c2ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2ce:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_ECRSDV, PIN_EMAC_FLAGS);
   8c2d0:	2024      	movs	r0, #36	; 0x24
   8c2d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2d6:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_ERX0, PIN_EMAC_FLAGS);
   8c2d8:	4638      	mov	r0, r7
   8c2da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2de:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_ERX1, PIN_EMAC_FLAGS);
   8c2e0:	2026      	movs	r0, #38	; 0x26
   8c2e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2e6:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_ERXER, PIN_EMAC_FLAGS);
   8c2e8:	2027      	movs	r0, #39	; 0x27
   8c2ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2ee:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_EMDC, PIN_EMAC_FLAGS);
   8c2f0:	2028      	movs	r0, #40	; 0x28
   8c2f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2f6:	47a8      	blx	r5
	gpio_configure_pin(PIN_EMAC_EMDIO, PIN_EMAC_FLAGS);
   8c2f8:	2029      	movs	r0, #41	; 0x29
   8c2fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8c2fe:	47a8      	blx	r5

	/* device capabilities */
	/* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
   8c300:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   8c304:	f043 0322 	orr.w	r3, r3, #34	; 0x22
   8c308:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	* priority prior to the call, then raise it back again once the initialization
	* is complete.
	*/

	/* Read the priority of the current task. */
	uxPriority = uxTaskPriorityGet( NULL );
   8c30c:	4630      	mov	r0, r6
   8c30e:	4b30      	ldr	r3, [pc, #192]	; (8c3d0 <ethernetif_init+0x174>)
   8c310:	4798      	blx	r3
   8c312:	4607      	mov	r7, r0
	/* Set the priority of the current task to the lowest possible. */
	vTaskPrioritySet( NULL, tskIDLE_PRIORITY );
   8c314:	4630      	mov	r0, r6
   8c316:	4631      	mov	r1, r6
   8c318:	4b2e      	ldr	r3, [pc, #184]	; (8c3d4 <ethernetif_init+0x178>)
   8c31a:	4798      	blx	r3
#endif

	/* Reset PHY */
	rstc_set_external_reset(RSTC, 13);      /* (2^(13+1))/32768 */
   8c31c:	4d2e      	ldr	r5, [pc, #184]	; (8c3d8 <ethernetif_init+0x17c>)
   8c31e:	4628      	mov	r0, r5
   8c320:	210d      	movs	r1, #13
   8c322:	4b2e      	ldr	r3, [pc, #184]	; (8c3dc <ethernetif_init+0x180>)
   8c324:	4798      	blx	r3
	rstc_reset_extern(RSTC);
   8c326:	4628      	mov	r0, r5
   8c328:	4b2d      	ldr	r3, [pc, #180]	; (8c3e0 <ethernetif_init+0x184>)
   8c32a:	4798      	blx	r3
	while (rstc_get_status(RSTC) & RSTC_SR_NRSTL) {
   8c32c:	462e      	mov	r6, r5
   8c32e:	4d2d      	ldr	r5, [pc, #180]	; (8c3e4 <ethernetif_init+0x188>)
   8c330:	4630      	mov	r0, r6
   8c332:	47a8      	blx	r5
   8c334:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   8c338:	d1fa      	bne.n	8c330 <ethernetif_init+0xd4>
	}

	/* Wait for PHY to be ready (CAT811: Max400ms) */
	ul_dealy = sysclk_get_cpu_hz() / 6;
   8c33a:	4b2b      	ldr	r3, [pc, #172]	; (8c3e8 <ethernetif_init+0x18c>)
   8c33c:	9303      	str	r3, [sp, #12]
	while (ul_dealy--) {
   8c33e:	9b03      	ldr	r3, [sp, #12]
   8c340:	1e5a      	subs	r2, r3, #1
   8c342:	9203      	str	r2, [sp, #12]
   8c344:	2b00      	cmp	r3, #0
   8c346:	d1fa      	bne.n	8c33e <ethernetif_init+0xe2>
	}

	/* Enable EMAC clock */
	pmc_enable_periph_clk(ID_EMAC);
   8c348:	202a      	movs	r0, #42	; 0x2a
   8c34a:	4b28      	ldr	r3, [pc, #160]	; (8c3ec <ethernetif_init+0x190>)
   8c34c:	4798      	blx	r3

	/* Fill in EMAC options */
	emac_option.uc_copy_all_frame = 0;
   8c34e:	2500      	movs	r5, #0
   8c350:	f88d 5010 	strb.w	r5, [sp, #16]
	emac_option.uc_no_boardcast = 0;
   8c354:	f88d 5011 	strb.w	r5, [sp, #17]

	memcpy(emac_option.uc_mac_addr, gs_uc_mac_address,
   8c358:	4b25      	ldr	r3, [pc, #148]	; (8c3f0 <ethernetif_init+0x194>)
   8c35a:	6818      	ldr	r0, [r3, #0]
   8c35c:	f8cd 0012 	str.w	r0, [sp, #18]
   8c360:	889b      	ldrh	r3, [r3, #4]
   8c362:	f8ad 3016 	strh.w	r3, [sp, #22]
			sizeof(gs_uc_mac_address));

	gs_emac_dev.p_hw = EMAC;
   8c366:	4923      	ldr	r1, [pc, #140]	; (8c3f4 <ethernetif_init+0x198>)
   8c368:	4e23      	ldr	r6, [pc, #140]	; (8c3f8 <ethernetif_init+0x19c>)
   8c36a:	600e      	str	r6, [r1, #0]

	/* Init EMAC driver structure */
	emac_dev_init(EMAC, &gs_emac_dev, &emac_option);
   8c36c:	4630      	mov	r0, r6
   8c36e:	aa04      	add	r2, sp, #16
   8c370:	4b22      	ldr	r3, [pc, #136]	; (8c3fc <ethernetif_init+0x1a0>)
   8c372:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8c374:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8c378:	4b21      	ldr	r3, [pc, #132]	; (8c400 <ethernetif_init+0x1a4>)
   8c37a:	605a      	str	r2, [r3, #4]

	/* Enable Interrupt */
	NVIC_EnableIRQ(EMAC_IRQn);

	/* Init MAC PHY driver */
	if (ethernet_phy_init(EMAC, BOARD_EMAC_PHY_ADDR,
   8c37c:	4630      	mov	r0, r6
   8c37e:	4629      	mov	r1, r5
   8c380:	4a20      	ldr	r2, [pc, #128]	; (8c404 <ethernetif_init+0x1a8>)
   8c382:	4b21      	ldr	r3, [pc, #132]	; (8c408 <ethernetif_init+0x1ac>)
   8c384:	4798      	blx	r3
   8c386:	b9c8      	cbnz	r0, 8c3bc <ethernetif_init+0x160>
		LWIP_DEBUGF(LWIP_DBG_TRACE, "PHY Initialize ERROR!\r");
		return;
	}

	/* Auto Negotiate, work in RMII mode */
	if (ethernet_phy_auto_negotiate(EMAC, BOARD_EMAC_PHY_ADDR) != EMAC_OK) {
   8c388:	4630      	mov	r0, r6
   8c38a:	4629      	mov	r1, r5
   8c38c:	4b1f      	ldr	r3, [pc, #124]	; (8c40c <ethernetif_init+0x1b0>)
   8c38e:	4798      	blx	r3
   8c390:	b9a0      	cbnz	r0, 8c3bc <ethernetif_init+0x160>
		LWIP_DEBUGF(LWIP_DBG_TRACE, "Auto Negotiate ERROR!\r");
		return;
	}

	/* Establish ethernet link */
	while (ethernet_phy_set_link(EMAC, BOARD_EMAC_PHY_ADDR, 1) != EMAC_OK) {
   8c392:	46b0      	mov	r8, r6
   8c394:	462e      	mov	r6, r5
   8c396:	4d1e      	ldr	r5, [pc, #120]	; (8c410 <ethernetif_init+0x1b4>)
   8c398:	4640      	mov	r0, r8
   8c39a:	4631      	mov	r1, r6
   8c39c:	2201      	movs	r2, #1
   8c39e:	47a8      	blx	r5
   8c3a0:	2800      	cmp	r0, #0
   8c3a2:	d1f9      	bne.n	8c398 <ethernetif_init+0x13c>
		LWIP_DEBUGF(LWIP_DBG_TRACE, "Set link ERROR!\r");
	}

#ifdef FREERTOS_USED
	/* Restore the priority of the current task. */
	vTaskPrioritySet( NULL, uxPriority );
   8c3a4:	4639      	mov	r1, r7
   8c3a6:	4b0b      	ldr	r3, [pc, #44]	; (8c3d4 <ethernetif_init+0x178>)
   8c3a8:	4798      	blx	r3

	/* Create the task that handles the EMAC input packets. */
	sys_thread_new( "ETHINT", ethernetif_input, netif,
   8c3aa:	2307      	movs	r3, #7
   8c3ac:	9300      	str	r3, [sp, #0]
   8c3ae:	4819      	ldr	r0, [pc, #100]	; (8c414 <ethernetif_init+0x1b8>)
   8c3b0:	4919      	ldr	r1, [pc, #100]	; (8c418 <ethernetif_init+0x1bc>)
   8c3b2:	4622      	mov	r2, r4
   8c3b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8c3b8:	4c18      	ldr	r4, [pc, #96]	; (8c41c <ethernetif_init+0x1c0>)
   8c3ba:	47a0      	blx	r4

	/* Initialize the hardware */
	low_level_init(netif);

	return ERR_OK;
}
   8c3bc:	2000      	movs	r0, #0
   8c3be:	b006      	add	sp, #24
   8c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c3c4:	0008bde5 	.word	0x0008bde5
   8c3c8:	0008c1d9 	.word	0x0008c1d9
   8c3cc:	00083881 	.word	0x00083881
   8c3d0:	00084c69 	.word	0x00084c69
   8c3d4:	00084c8d 	.word	0x00084c8d
   8c3d8:	400e1a00 	.word	0x400e1a00
   8c3dc:	00083b59 	.word	0x00083b59
   8c3e0:	00083b75 	.word	0x00083b75
   8c3e4:	00083b81 	.word	0x00083b81
   8c3e8:	00d59f80 	.word	0x00d59f80
   8c3ec:	00083b01 	.word	0x00083b01
   8c3f0:	000b108c 	.word	0x000b108c
   8c3f4:	20075a98 	.word	0x20075a98
   8c3f8:	400b0000 	.word	0x400b0000
   8c3fc:	00083339 	.word	0x00083339
   8c400:	e000e100 	.word	0xe000e100
   8c404:	0501bd00 	.word	0x0501bd00
   8c408:	000830f1 	.word	0x000830f1
   8c40c:	00082f0d 	.word	0x00082f0d
   8c410:	00082e31 	.word	0x00082e31
   8c414:	000b1084 	.word	0x000b1084
   8c418:	0008c19d 	.word	0x0008c19d
   8c41c:	0008c6ed 	.word	0x0008c6ed

0008c420 <sys_init>:

/**
 * \brief Initialize the sys_arch layer.
 */
void sys_init(void)
{
   8c420:	4905      	ldr	r1, [pc, #20]	; (8c438 <sys_init+0x18>)
   8c422:	1f0b      	subs	r3, r1, #4
   8c424:	311c      	adds	r1, #28
	int i;

	/* Initialize the the per-thread sys_timeouts structures
	   make sure there are no valid pids in the list */
	for (i = 0; i < SYS_THREAD_MAX; i++) {
		Threads_TimeoutsList[i].pid = 0;
   8c426:	2200      	movs	r2, #0
   8c428:	f843 2f04 	str.w	r2, [r3, #4]!
{
	int i;

	/* Initialize the the per-thread sys_timeouts structures
	   make sure there are no valid pids in the list */
	for (i = 0; i < SYS_THREAD_MAX; i++) {
   8c42c:	428b      	cmp	r3, r1
   8c42e:	d1fb      	bne.n	8c428 <sys_init+0x8>
		Threads_TimeoutsList[i].pid = 0;
	}

	/* Keep track of how many threads have been created */
	NbActiveThreads = 0;
   8c430:	2200      	movs	r2, #0
   8c432:	4b02      	ldr	r3, [pc, #8]	; (8c43c <sys_init+0x1c>)
   8c434:	801a      	strh	r2, [r3, #0]
   8c436:	4770      	bx	lr
   8c438:	20075ac8 	.word	0x20075ac8
   8c43c:	20075ac4 	.word	0x20075ac4

0008c440 <sys_sem_new>:
 * \param count Initial state of the semaphore.
 *
 * \return ERR_OK for OK, other value indicates error.
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
   8c440:	b570      	push	{r4, r5, r6, lr}
   8c442:	460d      	mov	r5, r1
	err_t err_sem = ERR_MEM;

	/* Sanity check */
	if (sem != NULL) {
   8c444:	4604      	mov	r4, r0
   8c446:	2800      	cmp	r0, #0
   8c448:	d02d      	beq.n	8c4a6 <sys_sem_new+0x66>
		portENTER_CRITICAL();
   8c44a:	4b18      	ldr	r3, [pc, #96]	; (8c4ac <sys_sem_new+0x6c>)
   8c44c:	4798      	blx	r3

		vSemaphoreCreateBinary( *sem );
   8c44e:	2001      	movs	r0, #1
   8c450:	2100      	movs	r1, #0
   8c452:	4b17      	ldr	r3, [pc, #92]	; (8c4b0 <sys_sem_new+0x70>)
   8c454:	4798      	blx	r3
   8c456:	6020      	str	r0, [r4, #0]
   8c458:	b1e8      	cbz	r0, 8c496 <sys_sem_new+0x56>
   8c45a:	2100      	movs	r1, #0
   8c45c:	460a      	mov	r2, r1
   8c45e:	460b      	mov	r3, r1
   8c460:	4e14      	ldr	r6, [pc, #80]	; (8c4b4 <sys_sem_new+0x74>)
   8c462:	47b0      	blx	r6
		if (*sem != SYS_SEM_NULL) {
   8c464:	6823      	ldr	r3, [r4, #0]
   8c466:	b1c3      	cbz	r3, 8c49a <sys_sem_new+0x5a>
  #if SYS_STATS
			lwip_stats.sys.sem.used++;
   8c468:	4b13      	ldr	r3, [pc, #76]	; (8c4b8 <sys_sem_new+0x78>)
   8c46a:	f8b3 213e 	ldrh.w	r2, [r3, #318]	; 0x13e
   8c46e:	3201      	adds	r2, #1
   8c470:	b292      	uxth	r2, r2
   8c472:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
			if (lwip_stats.sys.sem.used > lwip_stats.sys.sem.max) {
   8c476:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
   8c47a:	4293      	cmp	r3, r2
				lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
   8c47c:	bf3c      	itt	cc
   8c47e:	4b0e      	ldrcc	r3, [pc, #56]	; (8c4b8 <sys_sem_new+0x78>)
   8c480:	f8a3 2140 	strhcc.w	r2, [r3, #320]	; 0x140
			}

  #endif /* SYS_STATS */

			if (0 == count) { /* Means we want the sem to be
   8c484:	b95d      	cbnz	r5, 8c49e <sys_sem_new+0x5e>
			                     unavailable at init state. */
				xSemaphoreTake( *sem, 1);
   8c486:	6820      	ldr	r0, [r4, #0]
   8c488:	2100      	movs	r1, #0
   8c48a:	2201      	movs	r2, #1
   8c48c:	460b      	mov	r3, r1
   8c48e:	4c0b      	ldr	r4, [pc, #44]	; (8c4bc <sys_sem_new+0x7c>)
   8c490:	47a0      	blx	r4
			}

			err_sem = ERR_OK;
   8c492:	2400      	movs	r4, #0
   8c494:	e004      	b.n	8c4a0 <sys_sem_new+0x60>
 *
 * \return ERR_OK for OK, other value indicates error.
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
	err_t err_sem = ERR_MEM;
   8c496:	24ff      	movs	r4, #255	; 0xff
   8c498:	e002      	b.n	8c4a0 <sys_sem_new+0x60>
   8c49a:	24ff      	movs	r4, #255	; 0xff
   8c49c:	e000      	b.n	8c4a0 <sys_sem_new+0x60>
			if (0 == count) { /* Means we want the sem to be
			                     unavailable at init state. */
				xSemaphoreTake( *sem, 1);
			}

			err_sem = ERR_OK;
   8c49e:	2400      	movs	r4, #0
		}

		portEXIT_CRITICAL();
   8c4a0:	4b07      	ldr	r3, [pc, #28]	; (8c4c0 <sys_sem_new+0x80>)
   8c4a2:	4798      	blx	r3
   8c4a4:	e000      	b.n	8c4a8 <sys_sem_new+0x68>
 *
 * \return ERR_OK for OK, other value indicates error.
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
	err_t err_sem = ERR_MEM;
   8c4a6:	24ff      	movs	r4, #255	; 0xff

		portEXIT_CRITICAL();
	}

	return err_sem;
}
   8c4a8:	b260      	sxtb	r0, r4
   8c4aa:	bd70      	pop	{r4, r5, r6, pc}
   8c4ac:	00084531 	.word	0x00084531
   8c4b0:	0008470d 	.word	0x0008470d
   8c4b4:	00084775 	.word	0x00084775
   8c4b8:	20076788 	.word	0x20076788
   8c4bc:	0008487d 	.word	0x0008487d
   8c4c0:	00084549 	.word	0x00084549

0008c4c4 <sys_sem_free>:
 * \brief Frees a semaphore created by sys_sem_new.
 *
 * \param sem Pointer to the semaphore.
 */
void sys_sem_free(sys_sem_t *sem)
{
   8c4c4:	b508      	push	{r3, lr}
	/* Sanity check */
	if (sem != NULL) {
   8c4c6:	b150      	cbz	r0, 8c4de <sys_sem_free+0x1a>
		if (SYS_SEM_NULL != *sem) {
   8c4c8:	6802      	ldr	r2, [r0, #0]
   8c4ca:	b142      	cbz	r2, 8c4de <sys_sem_free+0x1a>
  #ifdef SYS_STATS
			lwip_stats.sys.sem.used--;
   8c4cc:	4a04      	ldr	r2, [pc, #16]	; (8c4e0 <sys_sem_free+0x1c>)
   8c4ce:	f8b2 113e 	ldrh.w	r1, [r2, #318]	; 0x13e
   8c4d2:	3901      	subs	r1, #1
   8c4d4:	f8a2 113e 	strh.w	r1, [r2, #318]	; 0x13e
  #endif /* SYS_STATS */
			vQueueDelete( *sem );
   8c4d8:	6800      	ldr	r0, [r0, #0]
   8c4da:	4b02      	ldr	r3, [pc, #8]	; (8c4e4 <sys_sem_free+0x20>)
   8c4dc:	4798      	blx	r3
   8c4de:	bd08      	pop	{r3, pc}
   8c4e0:	20076788 	.word	0x20076788
   8c4e4:	00084999 	.word	0x00084999

0008c4e8 <sys_sem_signal>:
 * \brief Signals (or releases) a semaphore.
 *
 * \param sem Pointer to the semaphore.
 */
void sys_sem_signal(sys_sem_t *sem)
{
   8c4e8:	b510      	push	{r4, lr}
	/* Sanity check */
	if (sem != NULL) {
   8c4ea:	b128      	cbz	r0, 8c4f8 <sys_sem_signal+0x10>
		xSemaphoreGive( *sem );
   8c4ec:	6800      	ldr	r0, [r0, #0]
   8c4ee:	2100      	movs	r1, #0
   8c4f0:	460a      	mov	r2, r1
   8c4f2:	460b      	mov	r3, r1
   8c4f4:	4c01      	ldr	r4, [pc, #4]	; (8c4fc <sys_sem_signal+0x14>)
   8c4f6:	47a0      	blx	r4
   8c4f8:	bd10      	pop	{r4, pc}
   8c4fa:	bf00      	nop
   8c4fc:	00084775 	.word	0x00084775

0008c500 <sys_arch_sem_wait>:
 *
 * \return SYS_ARCH_TIMEOUT if times out, ERR_MEM for semaphore erro otherwise
 * return the milliseconds expired while waiting for the semaphore.
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
   8c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c504:	460d      	mov	r5, r1
	portTickType TickStop;
	/* Express the timeout in OS tick. */
	portTickType TickElapsed = (portTickType)(timeout / portTICK_RATE_MS);

	/* Sanity check */
	if (sem != NULL) {
   8c506:	4604      	mov	r4, r0
   8c508:	b318      	cbz	r0, 8c552 <sys_arch_sem_wait+0x52>
		if (timeout && !TickElapsed) {
			TickElapsed = 1; /* Wait at least one tick */
		}

		if (0 == TickElapsed) {
   8c50a:	b971      	cbnz	r1, 8c52a <sys_arch_sem_wait+0x2a>
			TickStart = xTaskGetTickCount();
   8c50c:	4b15      	ldr	r3, [pc, #84]	; (8c564 <sys_arch_sem_wait+0x64>)
   8c50e:	4798      	blx	r3
   8c510:	4680      	mov	r8, r0
			/* If timeout=0, then the function should block indefinitely */
			while (pdFALSE == xSemaphoreTake( *sem,	SYS_ARCH_BLOCKING_TICKTIMEOUT )) {
   8c512:	2700      	movs	r7, #0
   8c514:	f242 7610 	movw	r6, #10000	; 0x2710
   8c518:	4d13      	ldr	r5, [pc, #76]	; (8c568 <sys_arch_sem_wait+0x68>)
   8c51a:	6820      	ldr	r0, [r4, #0]
   8c51c:	4639      	mov	r1, r7
   8c51e:	4632      	mov	r2, r6
   8c520:	463b      	mov	r3, r7
   8c522:	47a8      	blx	r5
   8c524:	2800      	cmp	r0, #0
   8c526:	d0f8      	beq.n	8c51a <sys_arch_sem_wait+0x1a>
   8c528:	e009      	b.n	8c53e <sys_arch_sem_wait+0x3e>
			}
		} else {
			TickStart = xTaskGetTickCount();
   8c52a:	4b0e      	ldr	r3, [pc, #56]	; (8c564 <sys_arch_sem_wait+0x64>)
   8c52c:	4798      	blx	r3
   8c52e:	4680      	mov	r8, r0
			if (pdFALSE == xSemaphoreTake( *sem, TickElapsed )) {
   8c530:	6820      	ldr	r0, [r4, #0]
   8c532:	2100      	movs	r1, #0
   8c534:	462a      	mov	r2, r5
   8c536:	460b      	mov	r3, r1
   8c538:	4c0b      	ldr	r4, [pc, #44]	; (8c568 <sys_arch_sem_wait+0x68>)
   8c53a:	47a0      	blx	r4
   8c53c:	b168      	cbz	r0, 8c55a <sys_arch_sem_wait+0x5a>
			}
		}

		/* If the function acquires the semaphore, it should return how
		  many milliseconds expired while waiting for the semaphore */
		TickStop = xTaskGetTickCount();
   8c53e:	4b09      	ldr	r3, [pc, #36]	; (8c564 <sys_arch_sem_wait+0x64>)
   8c540:	4798      	blx	r3
		/* Take care of wrap-around */
		if (TickStop >= TickStart) {
   8c542:	4580      	cmp	r8, r0
			TickElapsed = TickStop - TickStart;
   8c544:	ebc8 0000 	rsb	r0, r8, r0
		} else {
			TickElapsed = portMAX_DELAY - TickStart + TickStop;
   8c548:	bf88      	it	hi
   8c54a:	f100 30ff 	addhi.w	r0, r0, #4294967295
   8c54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		return(TickElapsed * portTICK_RATE_MS);
	} else {
		return ERR_MEM;
   8c552:	f04f 30ff 	mov.w	r0, #4294967295
   8c556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		} else {
			TickStart = xTaskGetTickCount();
			if (pdFALSE == xSemaphoreTake( *sem, TickElapsed )) {
				/* if the function times out, it should return SYS_ARCH_TIMEOUT */
				return(SYS_ARCH_TIMEOUT);
   8c55a:	f04f 30ff 	mov.w	r0, #4294967295

		return(TickElapsed * portTICK_RATE_MS);
	} else {
		return ERR_MEM;
	}
}
   8c55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c562:	bf00      	nop
   8c564:	00084d9d 	.word	0x00084d9d
   8c568:	0008487d 	.word	0x0008487d

0008c56c <sys_sem_valid>:
 * \return Semaphore number on valid, 0 for invalid.
 */
int sys_sem_valid(sys_sem_t *sem)
{
	return ((int)(*sem));
}
   8c56c:	6800      	ldr	r0, [r0, #0]
   8c56e:	4770      	bx	lr

0008c570 <sys_sem_set_invalid>:
 *
 * \param sem Pointer to the semaphore.
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
	*sem = NULL;
   8c570:	2300      	movs	r3, #0
   8c572:	6003      	str	r3, [r0, #0]
   8c574:	4770      	bx	lr
   8c576:	bf00      	nop

0008c578 <sys_mbox_new>:
 * \param size Maximum "size" elements.
 *
 * \return ERR_OK if successfull or ERR_MEM on error.
 */
err_t sys_mbox_new(sys_mbox_t *mBoxNew, int size )
{
   8c578:	b510      	push	{r4, lr}
	err_t err_mbox = ERR_MEM;

	/* Sanity check */
	if (mBoxNew != NULL) {
   8c57a:	4604      	mov	r4, r0
   8c57c:	b1a8      	cbz	r0, 8c5aa <sys_mbox_new+0x32>
		*mBoxNew = xQueueCreate( size, sizeof(void *));
   8c57e:	4608      	mov	r0, r1
   8c580:	2104      	movs	r1, #4
   8c582:	4b0d      	ldr	r3, [pc, #52]	; (8c5b8 <sys_mbox_new+0x40>)
   8c584:	4798      	blx	r3
   8c586:	6020      	str	r0, [r4, #0]
  #if SYS_STATS
		if (SYS_MBOX_NULL != *mBoxNew) {
   8c588:	b188      	cbz	r0, 8c5ae <sys_mbox_new+0x36>
			lwip_stats.sys.mbox.used++;
   8c58a:	4b0c      	ldr	r3, [pc, #48]	; (8c5bc <sys_mbox_new+0x44>)
   8c58c:	f8b3 214a 	ldrh.w	r2, [r3, #330]	; 0x14a
   8c590:	3201      	adds	r2, #1
   8c592:	b292      	uxth	r2, r2
   8c594:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
			if (lwip_stats.sys.mbox.used > lwip_stats.sys.mbox.max) {
   8c598:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
   8c59c:	4293      	cmp	r3, r2
   8c59e:	d208      	bcs.n	8c5b2 <sys_mbox_new+0x3a>
				lwip_stats.sys.mbox.max	= lwip_stats.sys.mbox.used;
   8c5a0:	4b06      	ldr	r3, [pc, #24]	; (8c5bc <sys_mbox_new+0x44>)
   8c5a2:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
			}
		}

  #endif /* SYS_STATS */
		err_mbox = ERR_OK;
   8c5a6:	2000      	movs	r0, #0
   8c5a8:	e004      	b.n	8c5b4 <sys_mbox_new+0x3c>
 *
 * \return ERR_OK if successfull or ERR_MEM on error.
 */
err_t sys_mbox_new(sys_mbox_t *mBoxNew, int size )
{
	err_t err_mbox = ERR_MEM;
   8c5aa:	20ff      	movs	r0, #255	; 0xff
   8c5ac:	e002      	b.n	8c5b4 <sys_mbox_new+0x3c>
				lwip_stats.sys.mbox.max	= lwip_stats.sys.mbox.used;
			}
		}

  #endif /* SYS_STATS */
		err_mbox = ERR_OK;
   8c5ae:	2000      	movs	r0, #0
   8c5b0:	e000      	b.n	8c5b4 <sys_mbox_new+0x3c>
   8c5b2:	2000      	movs	r0, #0
	}

	return(err_mbox);
}
   8c5b4:	b240      	sxtb	r0, r0
   8c5b6:	bd10      	pop	{r4, pc}
   8c5b8:	0008470d 	.word	0x0008470d
   8c5bc:	20076788 	.word	0x20076788

0008c5c0 <sys_mbox_free>:
 * developer should be notified.
 *
 * \param mbox Pointer to the new mailbox.
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
   8c5c0:	b508      	push	{r3, lr}
	/* Sanity check */
	if (mbox != NULL) {
   8c5c2:	b150      	cbz	r0, 8c5da <sys_mbox_free+0x1a>
		if (SYS_MBOX_NULL != *mbox) {
   8c5c4:	6802      	ldr	r2, [r0, #0]
   8c5c6:	b142      	cbz	r2, 8c5da <sys_mbox_free+0x1a>
  #ifdef SYS_STATS
			lwip_stats.sys.mbox.used--;
   8c5c8:	4a04      	ldr	r2, [pc, #16]	; (8c5dc <sys_mbox_free+0x1c>)
   8c5ca:	f8b2 114a 	ldrh.w	r1, [r2, #330]	; 0x14a
   8c5ce:	3901      	subs	r1, #1
   8c5d0:	f8a2 114a 	strh.w	r1, [r2, #330]	; 0x14a
  #endif /* SYS_STATS */
			vQueueDelete( *mbox );
   8c5d4:	6800      	ldr	r0, [r0, #0]
   8c5d6:	4b02      	ldr	r3, [pc, #8]	; (8c5e0 <sys_mbox_free+0x20>)
   8c5d8:	4798      	blx	r3
   8c5da:	bd08      	pop	{r3, pc}
   8c5dc:	20076788 	.word	0x20076788
   8c5e0:	00084999 	.word	0x00084999

0008c5e4 <sys_mbox_post>:
 *
 * \param mbox Pointer to the mailbox.
 * \param msg Pointer to the message to be post.
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
   8c5e4:	b570      	push	{r4, r5, r6, lr}
   8c5e6:	b082      	sub	sp, #8
   8c5e8:	9101      	str	r1, [sp, #4]
	/* Sanit check */
	if (mbox != NULL) {
   8c5ea:	4604      	mov	r4, r0
   8c5ec:	b148      	cbz	r0, 8c602 <sys_mbox_post+0x1e>
		while (pdTRUE != xQueueSend( *mbox, &msg, SYS_ARCH_BLOCKING_TICKTIMEOUT )) {
   8c5ee:	f242 7610 	movw	r6, #10000	; 0x2710
   8c5f2:	4d05      	ldr	r5, [pc, #20]	; (8c608 <sys_mbox_post+0x24>)
   8c5f4:	6820      	ldr	r0, [r4, #0]
   8c5f6:	a901      	add	r1, sp, #4
   8c5f8:	4632      	mov	r2, r6
   8c5fa:	2300      	movs	r3, #0
   8c5fc:	47a8      	blx	r5
   8c5fe:	2801      	cmp	r0, #1
   8c600:	d1f8      	bne.n	8c5f4 <sys_mbox_post+0x10>
		}
	}
}
   8c602:	b002      	add	sp, #8
   8c604:	bd70      	pop	{r4, r5, r6, pc}
   8c606:	bf00      	nop
   8c608:	00084775 	.word	0x00084775

0008c60c <sys_mbox_trypost>:
 * \param msg Pointer to the message to be post.
 *
 * \return ERR_MEM if the mailbox is full otherwise ERR_OK if the "msg" is posted.
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
   8c60c:	b510      	push	{r4, lr}
   8c60e:	b082      	sub	sp, #8
   8c610:	9101      	str	r1, [sp, #4]
	err_t err_mbox = ERR_MEM;

	/* Sanity check */
	if (mbox != NULL) {
   8c612:	b150      	cbz	r0, 8c62a <sys_mbox_trypost+0x1e>
		if (errQUEUE_FULL != xQueueSend( *mbox, &msg, 0 )) {
   8c614:	6800      	ldr	r0, [r0, #0]
   8c616:	a901      	add	r1, sp, #4
   8c618:	2200      	movs	r2, #0
   8c61a:	4613      	mov	r3, r2
   8c61c:	4c05      	ldr	r4, [pc, #20]	; (8c634 <sys_mbox_trypost+0x28>)
   8c61e:	47a0      	blx	r4
   8c620:	2800      	cmp	r0, #0
   8c622:	bf0c      	ite	eq
   8c624:	20ff      	moveq	r0, #255	; 0xff
   8c626:	2000      	movne	r0, #0
   8c628:	e000      	b.n	8c62c <sys_mbox_trypost+0x20>
 *
 * \return ERR_MEM if the mailbox is full otherwise ERR_OK if the "msg" is posted.
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
	err_t err_mbox = ERR_MEM;
   8c62a:	20ff      	movs	r0, #255	; 0xff
			err_mbox = ERR_OK;
		}
	}

	return (err_mbox);
}
   8c62c:	b240      	sxtb	r0, r0
   8c62e:	b002      	add	sp, #8
   8c630:	bd10      	pop	{r4, pc}
   8c632:	bf00      	nop
   8c634:	00084775 	.word	0x00084775

0008c638 <sys_arch_mbox_fetch>:
 *
 * \return Number of milliseconds spent waiting or SYS_ARCH_TIMEOUT if there was
 * a timeout. Or ERR_MEM if invalid pointer to message box.
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
   8c638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8c63c:	b083      	sub	sp, #12
   8c63e:	460c      	mov	r4, r1
   8c640:	4616      	mov	r6, r2
	void *tempoptr;
	/* Express the timeout in OS tick. */
	portTickType TickElapsed = (portTickType)(timeout / portTICK_RATE_MS);

	/* Sanity check */
	if (mbox != NULL) {
   8c642:	4605      	mov	r5, r0
   8c644:	2800      	cmp	r0, #0
   8c646:	d029      	beq.n	8c69c <sys_arch_mbox_fetch+0x64>
		if (timeout && !TickElapsed) {
			TickElapsed = 1; /* Wait at least one tick */
		}

		if (msg == NULL) {
   8c648:	b901      	cbnz	r1, 8c64c <sys_arch_mbox_fetch+0x14>
			msg = &tempoptr;
   8c64a:	ac01      	add	r4, sp, #4
		}

		/* NOTE: INCLUDE_xTaskGetSchedulerState must be set to 1 in
		 * FreeRTOSConfig.h for xTaskGetTickCount() to be available */
		if (0 == TickElapsed) {
   8c64c:	b976      	cbnz	r6, 8c66c <sys_arch_mbox_fetch+0x34>
			TickStart = xTaskGetTickCount();
   8c64e:	4b16      	ldr	r3, [pc, #88]	; (8c6a8 <sys_arch_mbox_fetch+0x70>)
   8c650:	4798      	blx	r3
   8c652:	4681      	mov	r9, r0
			/* If "timeout" is 0, the thread should be blocked until
			 * a message arrives */
			while (pdFALSE == xQueueReceive( *mbox, &(*msg),
   8c654:	f242 7810 	movw	r8, #10000	; 0x2710
   8c658:	2700      	movs	r7, #0
   8c65a:	4e14      	ldr	r6, [pc, #80]	; (8c6ac <sys_arch_mbox_fetch+0x74>)
   8c65c:	6828      	ldr	r0, [r5, #0]
   8c65e:	4621      	mov	r1, r4
   8c660:	4642      	mov	r2, r8
   8c662:	463b      	mov	r3, r7
   8c664:	47b0      	blx	r6
   8c666:	2800      	cmp	r0, #0
   8c668:	d0f8      	beq.n	8c65c <sys_arch_mbox_fetch+0x24>
   8c66a:	e00e      	b.n	8c68a <sys_arch_mbox_fetch+0x52>
					SYS_ARCH_BLOCKING_TICKTIMEOUT )) {
			}
		} else {
			TickStart = xTaskGetTickCount();
   8c66c:	4b0e      	ldr	r3, [pc, #56]	; (8c6a8 <sys_arch_mbox_fetch+0x70>)
   8c66e:	4798      	blx	r3
   8c670:	4681      	mov	r9, r0
			if (pdFALSE == xQueueReceive( *mbox, &(*msg), TickElapsed )) {
   8c672:	6828      	ldr	r0, [r5, #0]
   8c674:	4621      	mov	r1, r4
   8c676:	4632      	mov	r2, r6
   8c678:	2300      	movs	r3, #0
   8c67a:	4d0c      	ldr	r5, [pc, #48]	; (8c6ac <sys_arch_mbox_fetch+0x74>)
   8c67c:	47a8      	blx	r5
   8c67e:	b920      	cbnz	r0, 8c68a <sys_arch_mbox_fetch+0x52>
				*msg = NULL;
   8c680:	2300      	movs	r3, #0
   8c682:	6023      	str	r3, [r4, #0]
				/* if the function times out, it should return
				 * SYS_ARCH_TIMEOUT. */
				return(SYS_ARCH_TIMEOUT);
   8c684:	f04f 30ff 	mov.w	r0, #4294967295
   8c688:	e00a      	b.n	8c6a0 <sys_arch_mbox_fetch+0x68>
			}
		}

		/* If the function gets a msg, it should return the number of ms
		 * spent waiting. */
		TickStop = xTaskGetTickCount();
   8c68a:	4b07      	ldr	r3, [pc, #28]	; (8c6a8 <sys_arch_mbox_fetch+0x70>)
   8c68c:	4798      	blx	r3
		/* Take care of wrap-around. */
		if (TickStop >= TickStart) {
   8c68e:	4581      	cmp	r9, r0
			TickElapsed = TickStop - TickStart;
   8c690:	ebc9 0000 	rsb	r0, r9, r0
		} else {
			TickElapsed = portMAX_DELAY - TickStart + TickStop;
   8c694:	bf88      	it	hi
   8c696:	f100 30ff 	addhi.w	r0, r0, #4294967295
   8c69a:	e001      	b.n	8c6a0 <sys_arch_mbox_fetch+0x68>
		}

		return(TickElapsed * portTICK_RATE_MS);
	} else {
		return ERR_MEM;
   8c69c:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
   8c6a0:	b003      	add	sp, #12
   8c6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8c6a6:	bf00      	nop
   8c6a8:	00084d9d 	.word	0x00084d9d
   8c6ac:	0008487d 	.word	0x0008487d

0008c6b0 <sys_arch_mbox_tryfetch>:
 *
 * \return Number of milliseconds spent waiting or SYS_ARCH_TIMEOUT if there was
 * a timeout. Or ERR_MEM if invalid pointer to message box.
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
   8c6b0:	b510      	push	{r4, lr}
   8c6b2:	b082      	sub	sp, #8
	void *tempoptr;

	/* Sanity check */
	if (mbox != NULL) {
   8c6b4:	4603      	mov	r3, r0
   8c6b6:	b160      	cbz	r0, 8c6d2 <sys_arch_mbox_tryfetch+0x22>
		if (msg == NULL) {
   8c6b8:	b901      	cbnz	r1, 8c6bc <sys_arch_mbox_tryfetch+0xc>
			msg = &tempoptr;
   8c6ba:	a901      	add	r1, sp, #4
		}

		if (pdFALSE == xQueueReceive( *mbox, &(*msg), 0 )) {
   8c6bc:	6818      	ldr	r0, [r3, #0]
   8c6be:	2200      	movs	r2, #0
   8c6c0:	4613      	mov	r3, r2
   8c6c2:	4c06      	ldr	r4, [pc, #24]	; (8c6dc <sys_arch_mbox_tryfetch+0x2c>)
   8c6c4:	47a0      	blx	r4
   8c6c6:	f1d0 0001 	rsbs	r0, r0, #1
   8c6ca:	bf38      	it	cc
   8c6cc:	2000      	movcc	r0, #0
   8c6ce:	4240      	negs	r0, r0
   8c6d0:	e001      	b.n	8c6d6 <sys_arch_mbox_tryfetch+0x26>
		}

		/* On success 0 is returned. */
		return(0);
	} else {
		return(SYS_MBOX_EMPTY);
   8c6d2:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
   8c6d6:	b002      	add	sp, #8
   8c6d8:	bd10      	pop	{r4, pc}
   8c6da:	bf00      	nop
   8c6dc:	0008487d 	.word	0x0008487d

0008c6e0 <sys_mbox_valid>:
 * \return Mailbox for valid, 0 for invalid.
 */
int sys_mbox_valid(sys_mbox_t *mbox)
{
	return ((int)(*mbox));
}
   8c6e0:	6800      	ldr	r0, [r0, #0]
   8c6e2:	4770      	bx	lr

0008c6e4 <sys_mbox_set_invalid>:
 *
 * \param mbox Pointer to the mailbox.
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
	*mbox = NULL;
   8c6e4:	2300      	movs	r3, #0
   8c6e6:	6003      	str	r3, [r0, #0]
   8c6e8:	4770      	bx	lr
   8c6ea:	bf00      	nop

0008c6ec <sys_thread_new>:
 *
 * \return The id of the new thread.
 */
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg,
		int stacksize, int prio)
{
   8c6ec:	b570      	push	{r4, r5, r6, lr}
   8c6ee:	b086      	sub	sp, #24
   8c6f0:	4606      	mov	r6, r0
   8c6f2:	4615      	mov	r5, r2
	sys_thread_t newthread;
	portBASE_TYPE result;
	SYS_ARCH_DECL_PROTECT(protectionLevel);

	result = xTaskCreate( thread, (signed portCHAR *)name, stacksize, arg,
   8c6f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8c6f6:	9400      	str	r4, [sp, #0]
   8c6f8:	aa05      	add	r2, sp, #20
   8c6fa:	9201      	str	r2, [sp, #4]
   8c6fc:	2400      	movs	r4, #0
   8c6fe:	9402      	str	r4, [sp, #8]
   8c700:	9403      	str	r4, [sp, #12]
   8c702:	4608      	mov	r0, r1
   8c704:	4631      	mov	r1, r6
   8c706:	b29a      	uxth	r2, r3
   8c708:	462b      	mov	r3, r5
   8c70a:	4c0b      	ldr	r4, [pc, #44]	; (8c738 <sys_thread_new+0x4c>)
   8c70c:	47a0      	blx	r4
   8c70e:	4604      	mov	r4, r0
 *
 * \return 1 on success.
 */
sys_prot_t sys_arch_protect(void)
{
	vPortEnterCritical();
   8c710:	4b0a      	ldr	r3, [pc, #40]	; (8c73c <sys_thread_new+0x50>)
   8c712:	4798      	blx	r3
	result = xTaskCreate( thread, (signed portCHAR *)name, stacksize, arg,
			prio, &newthread );

	/* Need to protect this -- preemption here could be a problem! */
	SYS_ARCH_PROTECT(protectionLevel);
	if (pdPASS == result) {
   8c714:	2c01      	cmp	r4, #1
   8c716:	d108      	bne.n	8c72a <sys_thread_new+0x3e>
		/* For each task created, store the task handle (pid) in the
		 * timers array. */
		/* This scheme doesn't allow for threads to be deleted */
		Threads_TimeoutsList[NbActiveThreads++].pid = newthread;
   8c718:	4a09      	ldr	r2, [pc, #36]	; (8c740 <sys_thread_new+0x54>)
   8c71a:	8813      	ldrh	r3, [r2, #0]
   8c71c:	1c59      	adds	r1, r3, #1
   8c71e:	8011      	strh	r1, [r2, #0]
   8c720:	9a05      	ldr	r2, [sp, #20]
   8c722:	4908      	ldr	r1, [pc, #32]	; (8c744 <sys_thread_new+0x58>)
   8c724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   8c728:	e001      	b.n	8c72e <sys_thread_new+0x42>
	} else {
		newthread = NULL;
   8c72a:	2300      	movs	r3, #0
   8c72c:	9305      	str	r3, [sp, #20]
 *
 * \param pval Protect value.
 */
void sys_arch_unprotect(sys_prot_t pval)
{
	vPortExitCritical();
   8c72e:	4b06      	ldr	r3, [pc, #24]	; (8c748 <sys_thread_new+0x5c>)
   8c730:	4798      	blx	r3
	}

	SYS_ARCH_UNPROTECT(protectionLevel);

	return(newthread);
}
   8c732:	9805      	ldr	r0, [sp, #20]
   8c734:	b006      	add	sp, #24
   8c736:	bd70      	pop	{r4, r5, r6, pc}
   8c738:	00084a05 	.word	0x00084a05
   8c73c:	00084531 	.word	0x00084531
   8c740:	20075ac4 	.word	0x20075ac4
   8c744:	20075ac8 	.word	0x20075ac8
   8c748:	00084549 	.word	0x00084549

0008c74c <sys_arch_protect>:
 * \brief Protect the system.
 *
 * \return 1 on success.
 */
sys_prot_t sys_arch_protect(void)
{
   8c74c:	b508      	push	{r3, lr}
	vPortEnterCritical();
   8c74e:	4b02      	ldr	r3, [pc, #8]	; (8c758 <sys_arch_protect+0xc>)
   8c750:	4798      	blx	r3
	return 1; /* Not used */
}
   8c752:	2001      	movs	r0, #1
   8c754:	bd08      	pop	{r3, pc}
   8c756:	bf00      	nop
   8c758:	00084531 	.word	0x00084531

0008c75c <sys_arch_unprotect>:
 * \brief Unprotect the system.
 *
 * \param pval Protect value.
 */
void sys_arch_unprotect(sys_prot_t pval)
{
   8c75c:	b508      	push	{r3, lr}
	vPortExitCritical();
   8c75e:	4b01      	ldr	r3, [pc, #4]	; (8c764 <sys_arch_unprotect+0x8>)
   8c760:	4798      	blx	r3
   8c762:	bd08      	pop	{r3, pc}
   8c764:	00084549 	.word	0x00084549

0008c768 <atexit>:
   8c768:	4601      	mov	r1, r0
   8c76a:	2000      	movs	r0, #0
   8c76c:	4602      	mov	r2, r0
   8c76e:	4603      	mov	r3, r0
   8c770:	f003 b916 	b.w	8f9a0 <__register_exitproc>

0008c774 <__errno>:
   8c774:	4b01      	ldr	r3, [pc, #4]	; (8c77c <__errno+0x8>)
   8c776:	6818      	ldr	r0, [r3, #0]
   8c778:	4770      	bx	lr
   8c77a:	bf00      	nop
   8c77c:	200702c8 	.word	0x200702c8

0008c780 <__libc_fini_array>:
   8c780:	b538      	push	{r3, r4, r5, lr}
   8c782:	4d08      	ldr	r5, [pc, #32]	; (8c7a4 <__libc_fini_array+0x24>)
   8c784:	4c08      	ldr	r4, [pc, #32]	; (8c7a8 <__libc_fini_array+0x28>)
   8c786:	1b64      	subs	r4, r4, r5
   8c788:	10a4      	asrs	r4, r4, #2
   8c78a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   8c78e:	b124      	cbz	r4, 8c79a <__libc_fini_array+0x1a>
   8c790:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8c794:	3c01      	subs	r4, #1
   8c796:	4798      	blx	r3
   8c798:	e7f9      	b.n	8c78e <__libc_fini_array+0xe>
   8c79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c79e:	f024 be01 	b.w	b13a4 <_fini>
   8c7a2:	bf00      	nop
   8c7a4:	000b13b0 	.word	0x000b13b0
   8c7a8:	000b13b4 	.word	0x000b13b4

0008c7ac <_fprintf_r>:
   8c7ac:	b40c      	push	{r2, r3}
   8c7ae:	b507      	push	{r0, r1, r2, lr}
   8c7b0:	ab04      	add	r3, sp, #16
   8c7b2:	f853 2b04 	ldr.w	r2, [r3], #4
   8c7b6:	9301      	str	r3, [sp, #4]
   8c7b8:	f002 f862 	bl	8e880 <_vfprintf_r>
   8c7bc:	b003      	add	sp, #12
   8c7be:	f85d eb04 	ldr.w	lr, [sp], #4
   8c7c2:	b002      	add	sp, #8
   8c7c4:	4770      	bx	lr

0008c7c6 <fprintf>:
   8c7c6:	b40e      	push	{r1, r2, r3}
   8c7c8:	b503      	push	{r0, r1, lr}
   8c7ca:	4601      	mov	r1, r0
   8c7cc:	ab03      	add	r3, sp, #12
   8c7ce:	4806      	ldr	r0, [pc, #24]	; (8c7e8 <fprintf+0x22>)
   8c7d0:	f853 2b04 	ldr.w	r2, [r3], #4
   8c7d4:	6800      	ldr	r0, [r0, #0]
   8c7d6:	9301      	str	r3, [sp, #4]
   8c7d8:	f002 f852 	bl	8e880 <_vfprintf_r>
   8c7dc:	b002      	add	sp, #8
   8c7de:	f85d eb04 	ldr.w	lr, [sp], #4
   8c7e2:	b003      	add	sp, #12
   8c7e4:	4770      	bx	lr
   8c7e6:	bf00      	nop
   8c7e8:	200702c8 	.word	0x200702c8

0008c7ec <__libc_init_array>:
   8c7ec:	b570      	push	{r4, r5, r6, lr}
   8c7ee:	4b0e      	ldr	r3, [pc, #56]	; (8c828 <__libc_init_array+0x3c>)
   8c7f0:	4d0e      	ldr	r5, [pc, #56]	; (8c82c <__libc_init_array+0x40>)
   8c7f2:	2400      	movs	r4, #0
   8c7f4:	1aed      	subs	r5, r5, r3
   8c7f6:	10ad      	asrs	r5, r5, #2
   8c7f8:	461e      	mov	r6, r3
   8c7fa:	42ac      	cmp	r4, r5
   8c7fc:	d004      	beq.n	8c808 <__libc_init_array+0x1c>
   8c7fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   8c802:	4790      	blx	r2
   8c804:	3401      	adds	r4, #1
   8c806:	e7f8      	b.n	8c7fa <__libc_init_array+0xe>
   8c808:	f024 fdc2 	bl	b1390 <_init>
   8c80c:	4d08      	ldr	r5, [pc, #32]	; (8c830 <__libc_init_array+0x44>)
   8c80e:	4b09      	ldr	r3, [pc, #36]	; (8c834 <__libc_init_array+0x48>)
   8c810:	2400      	movs	r4, #0
   8c812:	1aed      	subs	r5, r5, r3
   8c814:	10ad      	asrs	r5, r5, #2
   8c816:	461e      	mov	r6, r3
   8c818:	42ac      	cmp	r4, r5
   8c81a:	d004      	beq.n	8c826 <__libc_init_array+0x3a>
   8c81c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   8c820:	4790      	blx	r2
   8c822:	3401      	adds	r4, #1
   8c824:	e7f8      	b.n	8c818 <__libc_init_array+0x2c>
   8c826:	bd70      	pop	{r4, r5, r6, pc}
   8c828:	000b139c 	.word	0x000b139c
   8c82c:	000b139c 	.word	0x000b139c
   8c830:	000b13a4 	.word	0x000b13a4
   8c834:	000b139c 	.word	0x000b139c

0008c838 <iprintf>:
   8c838:	b40f      	push	{r0, r1, r2, r3}
   8c83a:	b507      	push	{r0, r1, r2, lr}
   8c83c:	4906      	ldr	r1, [pc, #24]	; (8c858 <iprintf+0x20>)
   8c83e:	ab04      	add	r3, sp, #16
   8c840:	6808      	ldr	r0, [r1, #0]
   8c842:	f853 2b04 	ldr.w	r2, [r3], #4
   8c846:	6881      	ldr	r1, [r0, #8]
   8c848:	9301      	str	r3, [sp, #4]
   8c84a:	f001 fbc6 	bl	8dfda <_vfiprintf_r>
   8c84e:	b003      	add	sp, #12
   8c850:	f85d eb04 	ldr.w	lr, [sp], #4
   8c854:	b004      	add	sp, #16
   8c856:	4770      	bx	lr
   8c858:	200702c8 	.word	0x200702c8

0008c85c <_iprintf_r>:
   8c85c:	b40e      	push	{r1, r2, r3}
   8c85e:	b503      	push	{r0, r1, lr}
   8c860:	ab03      	add	r3, sp, #12
   8c862:	f853 2b04 	ldr.w	r2, [r3], #4
   8c866:	6881      	ldr	r1, [r0, #8]
   8c868:	9301      	str	r3, [sp, #4]
   8c86a:	f001 fbb6 	bl	8dfda <_vfiprintf_r>
   8c86e:	b002      	add	sp, #8
   8c870:	f85d eb04 	ldr.w	lr, [sp], #4
   8c874:	b003      	add	sp, #12
   8c876:	4770      	bx	lr

0008c878 <malloc>:
   8c878:	4b02      	ldr	r3, [pc, #8]	; (8c884 <malloc+0xc>)
   8c87a:	4601      	mov	r1, r0
   8c87c:	6818      	ldr	r0, [r3, #0]
   8c87e:	f000 b80b 	b.w	8c898 <_malloc_r>
   8c882:	bf00      	nop
   8c884:	200702c8 	.word	0x200702c8

0008c888 <free>:
   8c888:	4b02      	ldr	r3, [pc, #8]	; (8c894 <free+0xc>)
   8c88a:	4601      	mov	r1, r0
   8c88c:	6818      	ldr	r0, [r3, #0]
   8c88e:	f004 b977 	b.w	90b80 <_free_r>
   8c892:	bf00      	nop
   8c894:	200702c8 	.word	0x200702c8

0008c898 <_malloc_r>:
   8c898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c89c:	f101 040b 	add.w	r4, r1, #11
   8c8a0:	2c16      	cmp	r4, #22
   8c8a2:	4607      	mov	r7, r0
   8c8a4:	d903      	bls.n	8c8ae <_malloc_r+0x16>
   8c8a6:	f034 0407 	bics.w	r4, r4, #7
   8c8aa:	d501      	bpl.n	8c8b0 <_malloc_r+0x18>
   8c8ac:	e002      	b.n	8c8b4 <_malloc_r+0x1c>
   8c8ae:	2410      	movs	r4, #16
   8c8b0:	428c      	cmp	r4, r1
   8c8b2:	d202      	bcs.n	8c8ba <_malloc_r+0x22>
   8c8b4:	230c      	movs	r3, #12
   8c8b6:	603b      	str	r3, [r7, #0]
   8c8b8:	e1de      	b.n	8cc78 <_malloc_r+0x3e0>
   8c8ba:	4638      	mov	r0, r7
   8c8bc:	f000 fa05 	bl	8ccca <__malloc_lock>
   8c8c0:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8c8c4:	4da3      	ldr	r5, [pc, #652]	; (8cb54 <_malloc_r+0x2bc>)
   8c8c6:	d214      	bcs.n	8c8f2 <_malloc_r+0x5a>
   8c8c8:	08e2      	lsrs	r2, r4, #3
   8c8ca:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   8c8ce:	68de      	ldr	r6, [r3, #12]
   8c8d0:	429e      	cmp	r6, r3
   8c8d2:	d106      	bne.n	8c8e2 <_malloc_r+0x4a>
   8c8d4:	f106 0308 	add.w	r3, r6, #8
   8c8d8:	6976      	ldr	r6, [r6, #20]
   8c8da:	429e      	cmp	r6, r3
   8c8dc:	bf08      	it	eq
   8c8de:	3202      	addeq	r2, #2
   8c8e0:	d043      	beq.n	8c96a <_malloc_r+0xd2>
   8c8e2:	6873      	ldr	r3, [r6, #4]
   8c8e4:	68f2      	ldr	r2, [r6, #12]
   8c8e6:	68b1      	ldr	r1, [r6, #8]
   8c8e8:	f023 0303 	bic.w	r3, r3, #3
   8c8ec:	60ca      	str	r2, [r1, #12]
   8c8ee:	6091      	str	r1, [r2, #8]
   8c8f0:	e05d      	b.n	8c9ae <_malloc_r+0x116>
   8c8f2:	0a62      	lsrs	r2, r4, #9
   8c8f4:	d01a      	beq.n	8c92c <_malloc_r+0x94>
   8c8f6:	2a04      	cmp	r2, #4
   8c8f8:	d802      	bhi.n	8c900 <_malloc_r+0x68>
   8c8fa:	09a2      	lsrs	r2, r4, #6
   8c8fc:	3238      	adds	r2, #56	; 0x38
   8c8fe:	e018      	b.n	8c932 <_malloc_r+0x9a>
   8c900:	2a14      	cmp	r2, #20
   8c902:	d801      	bhi.n	8c908 <_malloc_r+0x70>
   8c904:	325b      	adds	r2, #91	; 0x5b
   8c906:	e014      	b.n	8c932 <_malloc_r+0x9a>
   8c908:	2a54      	cmp	r2, #84	; 0x54
   8c90a:	d802      	bhi.n	8c912 <_malloc_r+0x7a>
   8c90c:	0b22      	lsrs	r2, r4, #12
   8c90e:	326e      	adds	r2, #110	; 0x6e
   8c910:	e00f      	b.n	8c932 <_malloc_r+0x9a>
   8c912:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8c916:	d802      	bhi.n	8c91e <_malloc_r+0x86>
   8c918:	0be2      	lsrs	r2, r4, #15
   8c91a:	3277      	adds	r2, #119	; 0x77
   8c91c:	e009      	b.n	8c932 <_malloc_r+0x9a>
   8c91e:	f240 5354 	movw	r3, #1364	; 0x554
   8c922:	429a      	cmp	r2, r3
   8c924:	d804      	bhi.n	8c930 <_malloc_r+0x98>
   8c926:	0ca2      	lsrs	r2, r4, #18
   8c928:	327c      	adds	r2, #124	; 0x7c
   8c92a:	e002      	b.n	8c932 <_malloc_r+0x9a>
   8c92c:	223f      	movs	r2, #63	; 0x3f
   8c92e:	e000      	b.n	8c932 <_malloc_r+0x9a>
   8c930:	227e      	movs	r2, #126	; 0x7e
   8c932:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   8c936:	68de      	ldr	r6, [r3, #12]
   8c938:	429e      	cmp	r6, r3
   8c93a:	d015      	beq.n	8c968 <_malloc_r+0xd0>
   8c93c:	6871      	ldr	r1, [r6, #4]
   8c93e:	f021 0103 	bic.w	r1, r1, #3
   8c942:	1b08      	subs	r0, r1, r4
   8c944:	280f      	cmp	r0, #15
   8c946:	dd01      	ble.n	8c94c <_malloc_r+0xb4>
   8c948:	3a01      	subs	r2, #1
   8c94a:	e00d      	b.n	8c968 <_malloc_r+0xd0>
   8c94c:	2800      	cmp	r0, #0
   8c94e:	db09      	blt.n	8c964 <_malloc_r+0xcc>
   8c950:	68f3      	ldr	r3, [r6, #12]
   8c952:	68b2      	ldr	r2, [r6, #8]
   8c954:	60d3      	str	r3, [r2, #12]
   8c956:	609a      	str	r2, [r3, #8]
   8c958:	1873      	adds	r3, r6, r1
   8c95a:	685a      	ldr	r2, [r3, #4]
   8c95c:	f042 0201 	orr.w	r2, r2, #1
   8c960:	605a      	str	r2, [r3, #4]
   8c962:	e194      	b.n	8cc8e <_malloc_r+0x3f6>
   8c964:	68f6      	ldr	r6, [r6, #12]
   8c966:	e7e7      	b.n	8c938 <_malloc_r+0xa0>
   8c968:	3201      	adds	r2, #1
   8c96a:	497a      	ldr	r1, [pc, #488]	; (8cb54 <_malloc_r+0x2bc>)
   8c96c:	692e      	ldr	r6, [r5, #16]
   8c96e:	f101 0008 	add.w	r0, r1, #8
   8c972:	4286      	cmp	r6, r0
   8c974:	4686      	mov	lr, r0
   8c976:	d06d      	beq.n	8ca54 <_malloc_r+0x1bc>
   8c978:	6873      	ldr	r3, [r6, #4]
   8c97a:	f023 0303 	bic.w	r3, r3, #3
   8c97e:	ebc4 0c03 	rsb	ip, r4, r3
   8c982:	f1bc 0f0f 	cmp.w	ip, #15
   8c986:	dd0d      	ble.n	8c9a4 <_malloc_r+0x10c>
   8c988:	1933      	adds	r3, r6, r4
   8c98a:	f04c 0201 	orr.w	r2, ip, #1
   8c98e:	f044 0401 	orr.w	r4, r4, #1
   8c992:	6074      	str	r4, [r6, #4]
   8c994:	614b      	str	r3, [r1, #20]
   8c996:	610b      	str	r3, [r1, #16]
   8c998:	60d8      	str	r0, [r3, #12]
   8c99a:	6098      	str	r0, [r3, #8]
   8c99c:	605a      	str	r2, [r3, #4]
   8c99e:	f843 c00c 	str.w	ip, [r3, ip]
   8c9a2:	e174      	b.n	8cc8e <_malloc_r+0x3f6>
   8c9a4:	f1bc 0f00 	cmp.w	ip, #0
   8c9a8:	6148      	str	r0, [r1, #20]
   8c9aa:	6108      	str	r0, [r1, #16]
   8c9ac:	db01      	blt.n	8c9b2 <_malloc_r+0x11a>
   8c9ae:	4433      	add	r3, r6
   8c9b0:	e7d3      	b.n	8c95a <_malloc_r+0xc2>
   8c9b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8c9b6:	d211      	bcs.n	8c9dc <_malloc_r+0x144>
   8c9b8:	08db      	lsrs	r3, r3, #3
   8c9ba:	1098      	asrs	r0, r3, #2
   8c9bc:	f04f 0c01 	mov.w	ip, #1
   8c9c0:	fa0c fc00 	lsl.w	ip, ip, r0
   8c9c4:	6848      	ldr	r0, [r1, #4]
   8c9c6:	ea4c 0000 	orr.w	r0, ip, r0
   8c9ca:	6048      	str	r0, [r1, #4]
   8c9cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8c9d0:	688b      	ldr	r3, [r1, #8]
   8c9d2:	60f1      	str	r1, [r6, #12]
   8c9d4:	60b3      	str	r3, [r6, #8]
   8c9d6:	608e      	str	r6, [r1, #8]
   8c9d8:	60de      	str	r6, [r3, #12]
   8c9da:	e03b      	b.n	8ca54 <_malloc_r+0x1bc>
   8c9dc:	0a58      	lsrs	r0, r3, #9
   8c9de:	2804      	cmp	r0, #4
   8c9e0:	d802      	bhi.n	8c9e8 <_malloc_r+0x150>
   8c9e2:	0998      	lsrs	r0, r3, #6
   8c9e4:	3038      	adds	r0, #56	; 0x38
   8c9e6:	e015      	b.n	8ca14 <_malloc_r+0x17c>
   8c9e8:	2814      	cmp	r0, #20
   8c9ea:	d801      	bhi.n	8c9f0 <_malloc_r+0x158>
   8c9ec:	305b      	adds	r0, #91	; 0x5b
   8c9ee:	e011      	b.n	8ca14 <_malloc_r+0x17c>
   8c9f0:	2854      	cmp	r0, #84	; 0x54
   8c9f2:	d802      	bhi.n	8c9fa <_malloc_r+0x162>
   8c9f4:	0b18      	lsrs	r0, r3, #12
   8c9f6:	306e      	adds	r0, #110	; 0x6e
   8c9f8:	e00c      	b.n	8ca14 <_malloc_r+0x17c>
   8c9fa:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8c9fe:	d802      	bhi.n	8ca06 <_malloc_r+0x16e>
   8ca00:	0bd8      	lsrs	r0, r3, #15
   8ca02:	3077      	adds	r0, #119	; 0x77
   8ca04:	e006      	b.n	8ca14 <_malloc_r+0x17c>
   8ca06:	f240 5154 	movw	r1, #1364	; 0x554
   8ca0a:	4288      	cmp	r0, r1
   8ca0c:	bf9a      	itte	ls
   8ca0e:	0c98      	lsrls	r0, r3, #18
   8ca10:	307c      	addls	r0, #124	; 0x7c
   8ca12:	207e      	movhi	r0, #126	; 0x7e
   8ca14:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
   8ca18:	f8dc 1008 	ldr.w	r1, [ip, #8]
   8ca1c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8cb54 <_malloc_r+0x2bc>
   8ca20:	4561      	cmp	r1, ip
   8ca22:	d10d      	bne.n	8ca40 <_malloc_r+0x1a8>
   8ca24:	2301      	movs	r3, #1
   8ca26:	1080      	asrs	r0, r0, #2
   8ca28:	fa03 f000 	lsl.w	r0, r3, r0
   8ca2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ca30:	4303      	orrs	r3, r0
   8ca32:	f8c8 3004 	str.w	r3, [r8, #4]
   8ca36:	460b      	mov	r3, r1
   8ca38:	e008      	b.n	8ca4c <_malloc_r+0x1b4>
   8ca3a:	6889      	ldr	r1, [r1, #8]
   8ca3c:	4561      	cmp	r1, ip
   8ca3e:	d004      	beq.n	8ca4a <_malloc_r+0x1b2>
   8ca40:	6848      	ldr	r0, [r1, #4]
   8ca42:	f020 0003 	bic.w	r0, r0, #3
   8ca46:	4283      	cmp	r3, r0
   8ca48:	d3f7      	bcc.n	8ca3a <_malloc_r+0x1a2>
   8ca4a:	68cb      	ldr	r3, [r1, #12]
   8ca4c:	60f3      	str	r3, [r6, #12]
   8ca4e:	60b1      	str	r1, [r6, #8]
   8ca50:	609e      	str	r6, [r3, #8]
   8ca52:	60ce      	str	r6, [r1, #12]
   8ca54:	2101      	movs	r1, #1
   8ca56:	1093      	asrs	r3, r2, #2
   8ca58:	fa01 f303 	lsl.w	r3, r1, r3
   8ca5c:	6869      	ldr	r1, [r5, #4]
   8ca5e:	428b      	cmp	r3, r1
   8ca60:	d85d      	bhi.n	8cb1e <_malloc_r+0x286>
   8ca62:	420b      	tst	r3, r1
   8ca64:	d106      	bne.n	8ca74 <_malloc_r+0x1dc>
   8ca66:	f022 0203 	bic.w	r2, r2, #3
   8ca6a:	005b      	lsls	r3, r3, #1
   8ca6c:	420b      	tst	r3, r1
   8ca6e:	f102 0204 	add.w	r2, r2, #4
   8ca72:	d0fa      	beq.n	8ca6a <_malloc_r+0x1d2>
   8ca74:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
   8ca78:	4680      	mov	r8, r0
   8ca7a:	4694      	mov	ip, r2
   8ca7c:	f8d8 600c 	ldr.w	r6, [r8, #12]
   8ca80:	4546      	cmp	r6, r8
   8ca82:	d02d      	beq.n	8cae0 <_malloc_r+0x248>
   8ca84:	6871      	ldr	r1, [r6, #4]
   8ca86:	f021 0903 	bic.w	r9, r1, #3
   8ca8a:	ebc4 0109 	rsb	r1, r4, r9
   8ca8e:	290f      	cmp	r1, #15
   8ca90:	dd13      	ble.n	8caba <_malloc_r+0x222>
   8ca92:	1933      	adds	r3, r6, r4
   8ca94:	f044 0401 	orr.w	r4, r4, #1
   8ca98:	68f2      	ldr	r2, [r6, #12]
   8ca9a:	6074      	str	r4, [r6, #4]
   8ca9c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8caa0:	60c2      	str	r2, [r0, #12]
   8caa2:	6090      	str	r0, [r2, #8]
   8caa4:	f041 0201 	orr.w	r2, r1, #1
   8caa8:	616b      	str	r3, [r5, #20]
   8caaa:	612b      	str	r3, [r5, #16]
   8caac:	f8c3 e00c 	str.w	lr, [r3, #12]
   8cab0:	f8c3 e008 	str.w	lr, [r3, #8]
   8cab4:	605a      	str	r2, [r3, #4]
   8cab6:	5059      	str	r1, [r3, r1]
   8cab8:	e00c      	b.n	8cad4 <_malloc_r+0x23c>
   8caba:	2900      	cmp	r1, #0
   8cabc:	db0e      	blt.n	8cadc <_malloc_r+0x244>
   8cabe:	eb06 0109 	add.w	r1, r6, r9
   8cac2:	684b      	ldr	r3, [r1, #4]
   8cac4:	f043 0301 	orr.w	r3, r3, #1
   8cac8:	604b      	str	r3, [r1, #4]
   8caca:	68f3      	ldr	r3, [r6, #12]
   8cacc:	f856 2f08 	ldr.w	r2, [r6, #8]!
   8cad0:	60d3      	str	r3, [r2, #12]
   8cad2:	609a      	str	r2, [r3, #8]
   8cad4:	4638      	mov	r0, r7
   8cad6:	f000 f8f9 	bl	8cccc <__malloc_unlock>
   8cada:	e0dc      	b.n	8cc96 <_malloc_r+0x3fe>
   8cadc:	68f6      	ldr	r6, [r6, #12]
   8cade:	e7cf      	b.n	8ca80 <_malloc_r+0x1e8>
   8cae0:	f10c 0c01 	add.w	ip, ip, #1
   8cae4:	f01c 0f03 	tst.w	ip, #3
   8cae8:	f108 0808 	add.w	r8, r8, #8
   8caec:	d1c6      	bne.n	8ca7c <_malloc_r+0x1e4>
   8caee:	0791      	lsls	r1, r2, #30
   8caf0:	d104      	bne.n	8cafc <_malloc_r+0x264>
   8caf2:	686a      	ldr	r2, [r5, #4]
   8caf4:	ea22 0203 	bic.w	r2, r2, r3
   8caf8:	606a      	str	r2, [r5, #4]
   8cafa:	e005      	b.n	8cb08 <_malloc_r+0x270>
   8cafc:	f1a0 0108 	sub.w	r1, r0, #8
   8cb00:	6800      	ldr	r0, [r0, #0]
   8cb02:	3a01      	subs	r2, #1
   8cb04:	4288      	cmp	r0, r1
   8cb06:	d0f2      	beq.n	8caee <_malloc_r+0x256>
   8cb08:	6869      	ldr	r1, [r5, #4]
   8cb0a:	005b      	lsls	r3, r3, #1
   8cb0c:	428b      	cmp	r3, r1
   8cb0e:	d806      	bhi.n	8cb1e <_malloc_r+0x286>
   8cb10:	b12b      	cbz	r3, 8cb1e <_malloc_r+0x286>
   8cb12:	4662      	mov	r2, ip
   8cb14:	420b      	tst	r3, r1
   8cb16:	d1ad      	bne.n	8ca74 <_malloc_r+0x1dc>
   8cb18:	3204      	adds	r2, #4
   8cb1a:	005b      	lsls	r3, r3, #1
   8cb1c:	e7fa      	b.n	8cb14 <_malloc_r+0x27c>
   8cb1e:	f8d5 9008 	ldr.w	r9, [r5, #8]
   8cb22:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8cb26:	f023 0b03 	bic.w	fp, r3, #3
   8cb2a:	45a3      	cmp	fp, r4
   8cb2c:	d304      	bcc.n	8cb38 <_malloc_r+0x2a0>
   8cb2e:	ebc4 030b 	rsb	r3, r4, fp
   8cb32:	2b0f      	cmp	r3, #15
   8cb34:	f300 80a2 	bgt.w	8cc7c <_malloc_r+0x3e4>
   8cb38:	4907      	ldr	r1, [pc, #28]	; (8cb58 <_malloc_r+0x2c0>)
   8cb3a:	eb09 030b 	add.w	r3, r9, fp
   8cb3e:	680a      	ldr	r2, [r1, #0]
   8cb40:	4688      	mov	r8, r1
   8cb42:	eb04 0a02 	add.w	sl, r4, r2
   8cb46:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
   8cb4a:	3201      	adds	r2, #1
   8cb4c:	d106      	bne.n	8cb5c <_malloc_r+0x2c4>
   8cb4e:	f10a 0a10 	add.w	sl, sl, #16
   8cb52:	e00b      	b.n	8cb6c <_malloc_r+0x2d4>
   8cb54:	200706f8 	.word	0x200706f8
   8cb58:	20075ae8 	.word	0x20075ae8
   8cb5c:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8cb60:	f10a 0a0f 	add.w	sl, sl, #15
   8cb64:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8cb68:	f02a 0a0f 	bic.w	sl, sl, #15
   8cb6c:	4638      	mov	r0, r7
   8cb6e:	4651      	mov	r1, sl
   8cb70:	9301      	str	r3, [sp, #4]
   8cb72:	f000 f8ad 	bl	8ccd0 <_sbrk_r>
   8cb76:	1c42      	adds	r2, r0, #1
   8cb78:	4606      	mov	r6, r0
   8cb7a:	9b01      	ldr	r3, [sp, #4]
   8cb7c:	d06f      	beq.n	8cc5e <_malloc_r+0x3c6>
   8cb7e:	4298      	cmp	r0, r3
   8cb80:	d201      	bcs.n	8cb86 <_malloc_r+0x2ee>
   8cb82:	45a9      	cmp	r9, r5
   8cb84:	d16b      	bne.n	8cc5e <_malloc_r+0x3c6>
   8cb86:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8cb8a:	429e      	cmp	r6, r3
   8cb8c:	4452      	add	r2, sl
   8cb8e:	f8c8 2004 	str.w	r2, [r8, #4]
   8cb92:	d108      	bne.n	8cba6 <_malloc_r+0x30e>
   8cb94:	f3c6 010b 	ubfx	r1, r6, #0, #12
   8cb98:	b929      	cbnz	r1, 8cba6 <_malloc_r+0x30e>
   8cb9a:	68ab      	ldr	r3, [r5, #8]
   8cb9c:	44da      	add	sl, fp
   8cb9e:	f04a 0201 	orr.w	r2, sl, #1
   8cba2:	605a      	str	r2, [r3, #4]
   8cba4:	e04d      	b.n	8cc42 <_malloc_r+0x3aa>
   8cba6:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
   8cbaa:	3101      	adds	r1, #1
   8cbac:	d103      	bne.n	8cbb6 <_malloc_r+0x31e>
   8cbae:	4b3c      	ldr	r3, [pc, #240]	; (8cca0 <_malloc_r+0x408>)
   8cbb0:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
   8cbb4:	e003      	b.n	8cbbe <_malloc_r+0x326>
   8cbb6:	1af3      	subs	r3, r6, r3
   8cbb8:	441a      	add	r2, r3
   8cbba:	f8c8 2004 	str.w	r2, [r8, #4]
   8cbbe:	f016 0307 	ands.w	r3, r6, #7
   8cbc2:	bf1c      	itt	ne
   8cbc4:	f1c3 0308 	rsbne	r3, r3, #8
   8cbc8:	18f6      	addne	r6, r6, r3
   8cbca:	44b2      	add	sl, r6
   8cbcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8cbd0:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8cbd4:	ebca 0a03 	rsb	sl, sl, r3
   8cbd8:	4651      	mov	r1, sl
   8cbda:	4638      	mov	r0, r7
   8cbdc:	f000 f878 	bl	8ccd0 <_sbrk_r>
   8cbe0:	1c43      	adds	r3, r0, #1
   8cbe2:	bf04      	itt	eq
   8cbe4:	4630      	moveq	r0, r6
   8cbe6:	f04f 0a00 	moveq.w	sl, #0
   8cbea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8cbee:	1b80      	subs	r0, r0, r6
   8cbf0:	4450      	add	r0, sl
   8cbf2:	4453      	add	r3, sl
   8cbf4:	f040 0001 	orr.w	r0, r0, #1
   8cbf8:	45a9      	cmp	r9, r5
   8cbfa:	60ae      	str	r6, [r5, #8]
   8cbfc:	f8c8 3004 	str.w	r3, [r8, #4]
   8cc00:	6070      	str	r0, [r6, #4]
   8cc02:	d01e      	beq.n	8cc42 <_malloc_r+0x3aa>
   8cc04:	f1bb 0f0f 	cmp.w	fp, #15
   8cc08:	d802      	bhi.n	8cc10 <_malloc_r+0x378>
   8cc0a:	2301      	movs	r3, #1
   8cc0c:	6073      	str	r3, [r6, #4]
   8cc0e:	e026      	b.n	8cc5e <_malloc_r+0x3c6>
   8cc10:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8cc14:	f1ab 0b0c 	sub.w	fp, fp, #12
   8cc18:	f02b 0b07 	bic.w	fp, fp, #7
   8cc1c:	f003 0301 	and.w	r3, r3, #1
   8cc20:	ea4b 0303 	orr.w	r3, fp, r3
   8cc24:	f8c9 3004 	str.w	r3, [r9, #4]
   8cc28:	2205      	movs	r2, #5
   8cc2a:	eb09 030b 	add.w	r3, r9, fp
   8cc2e:	f1bb 0f0f 	cmp.w	fp, #15
   8cc32:	605a      	str	r2, [r3, #4]
   8cc34:	609a      	str	r2, [r3, #8]
   8cc36:	d904      	bls.n	8cc42 <_malloc_r+0x3aa>
   8cc38:	4638      	mov	r0, r7
   8cc3a:	f109 0108 	add.w	r1, r9, #8
   8cc3e:	f003 ff9f 	bl	90b80 <_free_r>
   8cc42:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8cc46:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
   8cc4a:	4293      	cmp	r3, r2
   8cc4c:	bf84      	itt	hi
   8cc4e:	4a15      	ldrhi	r2, [pc, #84]	; (8cca4 <_malloc_r+0x40c>)
   8cc50:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8cc52:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
   8cc56:	4293      	cmp	r3, r2
   8cc58:	bf84      	itt	hi
   8cc5a:	4a12      	ldrhi	r2, [pc, #72]	; (8cca4 <_malloc_r+0x40c>)
   8cc5c:	6313      	strhi	r3, [r2, #48]	; 0x30
   8cc5e:	68ab      	ldr	r3, [r5, #8]
   8cc60:	685a      	ldr	r2, [r3, #4]
   8cc62:	f022 0203 	bic.w	r2, r2, #3
   8cc66:	42a2      	cmp	r2, r4
   8cc68:	ebc4 0302 	rsb	r3, r4, r2
   8cc6c:	d301      	bcc.n	8cc72 <_malloc_r+0x3da>
   8cc6e:	2b0f      	cmp	r3, #15
   8cc70:	dc04      	bgt.n	8cc7c <_malloc_r+0x3e4>
   8cc72:	4638      	mov	r0, r7
   8cc74:	f000 f82a 	bl	8cccc <__malloc_unlock>
   8cc78:	2600      	movs	r6, #0
   8cc7a:	e00c      	b.n	8cc96 <_malloc_r+0x3fe>
   8cc7c:	68ae      	ldr	r6, [r5, #8]
   8cc7e:	f044 0201 	orr.w	r2, r4, #1
   8cc82:	f043 0301 	orr.w	r3, r3, #1
   8cc86:	4434      	add	r4, r6
   8cc88:	6072      	str	r2, [r6, #4]
   8cc8a:	60ac      	str	r4, [r5, #8]
   8cc8c:	6063      	str	r3, [r4, #4]
   8cc8e:	4638      	mov	r0, r7
   8cc90:	f000 f81c 	bl	8cccc <__malloc_unlock>
   8cc94:	3608      	adds	r6, #8
   8cc96:	4630      	mov	r0, r6
   8cc98:	b003      	add	sp, #12
   8cc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cc9e:	bf00      	nop
   8cca0:	200706f8 	.word	0x200706f8
   8cca4:	20075ae8 	.word	0x20075ae8

0008cca8 <memcpy>:
   8cca8:	b510      	push	{r4, lr}
   8ccaa:	2300      	movs	r3, #0
   8ccac:	4293      	cmp	r3, r2
   8ccae:	d003      	beq.n	8ccb8 <memcpy+0x10>
   8ccb0:	5ccc      	ldrb	r4, [r1, r3]
   8ccb2:	54c4      	strb	r4, [r0, r3]
   8ccb4:	3301      	adds	r3, #1
   8ccb6:	e7f9      	b.n	8ccac <memcpy+0x4>
   8ccb8:	bd10      	pop	{r4, pc}

0008ccba <memset>:
   8ccba:	4402      	add	r2, r0
   8ccbc:	4603      	mov	r3, r0
   8ccbe:	4293      	cmp	r3, r2
   8ccc0:	d002      	beq.n	8ccc8 <memset+0xe>
   8ccc2:	f803 1b01 	strb.w	r1, [r3], #1
   8ccc6:	e7fa      	b.n	8ccbe <memset+0x4>
   8ccc8:	4770      	bx	lr

0008ccca <__malloc_lock>:
   8ccca:	4770      	bx	lr

0008cccc <__malloc_unlock>:
   8cccc:	4770      	bx	lr
	...

0008ccd0 <_sbrk_r>:
   8ccd0:	b538      	push	{r3, r4, r5, lr}
   8ccd2:	4c06      	ldr	r4, [pc, #24]	; (8ccec <_sbrk_r+0x1c>)
   8ccd4:	2300      	movs	r3, #0
   8ccd6:	4605      	mov	r5, r0
   8ccd8:	4608      	mov	r0, r1
   8ccda:	6023      	str	r3, [r4, #0]
   8ccdc:	f7f7 f8c6 	bl	83e6c <_sbrk>
   8cce0:	1c43      	adds	r3, r0, #1
   8cce2:	d102      	bne.n	8ccea <_sbrk_r+0x1a>
   8cce4:	6823      	ldr	r3, [r4, #0]
   8cce6:	b103      	cbz	r3, 8ccea <_sbrk_r+0x1a>
   8cce8:	602b      	str	r3, [r5, #0]
   8ccea:	bd38      	pop	{r3, r4, r5, pc}
   8ccec:	200768f8 	.word	0x200768f8

0008ccf0 <setbuf>:
   8ccf0:	2900      	cmp	r1, #0
   8ccf2:	bf0c      	ite	eq
   8ccf4:	2202      	moveq	r2, #2
   8ccf6:	2200      	movne	r2, #0
   8ccf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8ccfc:	f000 b800 	b.w	8cd00 <setvbuf>

0008cd00 <setvbuf>:
   8cd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cd04:	461d      	mov	r5, r3
   8cd06:	4b36      	ldr	r3, [pc, #216]	; (8cde0 <setvbuf+0xe0>)
   8cd08:	4604      	mov	r4, r0
   8cd0a:	681f      	ldr	r7, [r3, #0]
   8cd0c:	460e      	mov	r6, r1
   8cd0e:	4690      	mov	r8, r2
   8cd10:	b127      	cbz	r7, 8cd1c <setvbuf+0x1c>
   8cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8cd14:	b913      	cbnz	r3, 8cd1c <setvbuf+0x1c>
   8cd16:	4638      	mov	r0, r7
   8cd18:	f003 fdae 	bl	90878 <__sinit>
   8cd1c:	f1b8 0f02 	cmp.w	r8, #2
   8cd20:	d859      	bhi.n	8cdd6 <setvbuf+0xd6>
   8cd22:	2d00      	cmp	r5, #0
   8cd24:	db57      	blt.n	8cdd6 <setvbuf+0xd6>
   8cd26:	4638      	mov	r0, r7
   8cd28:	4621      	mov	r1, r4
   8cd2a:	f003 fd5c 	bl	907e6 <_fflush_r>
   8cd2e:	2300      	movs	r3, #0
   8cd30:	6063      	str	r3, [r4, #4]
   8cd32:	61a3      	str	r3, [r4, #24]
   8cd34:	89a3      	ldrh	r3, [r4, #12]
   8cd36:	061b      	lsls	r3, r3, #24
   8cd38:	d503      	bpl.n	8cd42 <setvbuf+0x42>
   8cd3a:	4638      	mov	r0, r7
   8cd3c:	6921      	ldr	r1, [r4, #16]
   8cd3e:	f003 ff1f 	bl	90b80 <_free_r>
   8cd42:	89a3      	ldrh	r3, [r4, #12]
   8cd44:	f1b8 0f02 	cmp.w	r8, #2
   8cd48:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8cd4c:	81a3      	strh	r3, [r4, #12]
   8cd4e:	d012      	beq.n	8cd76 <setvbuf+0x76>
   8cd50:	bb36      	cbnz	r6, 8cda0 <setvbuf+0xa0>
   8cd52:	2d00      	cmp	r5, #0
   8cd54:	bf08      	it	eq
   8cd56:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   8cd5a:	4628      	mov	r0, r5
   8cd5c:	f7ff fd8c 	bl	8c878 <malloc>
   8cd60:	4606      	mov	r6, r0
   8cd62:	b9c8      	cbnz	r0, 8cd98 <setvbuf+0x98>
   8cd64:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8cd68:	f7ff fd86 	bl	8c878 <malloc>
   8cd6c:	4606      	mov	r6, r0
   8cd6e:	b988      	cbnz	r0, 8cd94 <setvbuf+0x94>
   8cd70:	f04f 30ff 	mov.w	r0, #4294967295
   8cd74:	e000      	b.n	8cd78 <setvbuf+0x78>
   8cd76:	2000      	movs	r0, #0
   8cd78:	89a3      	ldrh	r3, [r4, #12]
   8cd7a:	f043 0302 	orr.w	r3, r3, #2
   8cd7e:	81a3      	strh	r3, [r4, #12]
   8cd80:	2300      	movs	r3, #0
   8cd82:	60a3      	str	r3, [r4, #8]
   8cd84:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8cd88:	6023      	str	r3, [r4, #0]
   8cd8a:	6123      	str	r3, [r4, #16]
   8cd8c:	2301      	movs	r3, #1
   8cd8e:	6163      	str	r3, [r4, #20]
   8cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cd94:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8cd98:	89a3      	ldrh	r3, [r4, #12]
   8cd9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8cd9e:	81a3      	strh	r3, [r4, #12]
   8cda0:	f1b8 0f01 	cmp.w	r8, #1
   8cda4:	d105      	bne.n	8cdb2 <setvbuf+0xb2>
   8cda6:	89a3      	ldrh	r3, [r4, #12]
   8cda8:	f043 0301 	orr.w	r3, r3, #1
   8cdac:	81a3      	strh	r3, [r4, #12]
   8cdae:	426b      	negs	r3, r5
   8cdb0:	61a3      	str	r3, [r4, #24]
   8cdb2:	4b0c      	ldr	r3, [pc, #48]	; (8cde4 <setvbuf+0xe4>)
   8cdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   8cdb6:	89a3      	ldrh	r3, [r4, #12]
   8cdb8:	6026      	str	r6, [r4, #0]
   8cdba:	f003 0008 	and.w	r0, r3, #8
   8cdbe:	b280      	uxth	r0, r0
   8cdc0:	6126      	str	r6, [r4, #16]
   8cdc2:	6165      	str	r5, [r4, #20]
   8cdc4:	b148      	cbz	r0, 8cdda <setvbuf+0xda>
   8cdc6:	f013 0f03 	tst.w	r3, #3
   8cdca:	bf18      	it	ne
   8cdcc:	2500      	movne	r5, #0
   8cdce:	60a5      	str	r5, [r4, #8]
   8cdd0:	2000      	movs	r0, #0
   8cdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cdd6:	f04f 30ff 	mov.w	r0, #4294967295
   8cdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cdde:	bf00      	nop
   8cde0:	200702c8 	.word	0x200702c8
   8cde4:	00090835 	.word	0x00090835

0008cde8 <_snprintf_r>:
   8cde8:	b408      	push	{r3}
   8cdea:	b530      	push	{r4, r5, lr}
   8cdec:	1e14      	subs	r4, r2, #0
   8cdee:	b09c      	sub	sp, #112	; 0x70
   8cdf0:	4605      	mov	r5, r0
   8cdf2:	da04      	bge.n	8cdfe <_snprintf_r+0x16>
   8cdf4:	238b      	movs	r3, #139	; 0x8b
   8cdf6:	6003      	str	r3, [r0, #0]
   8cdf8:	f04f 30ff 	mov.w	r0, #4294967295
   8cdfc:	e01d      	b.n	8ce3a <_snprintf_r+0x52>
   8cdfe:	f44f 7302 	mov.w	r3, #520	; 0x208
   8ce02:	f8ad 3014 	strh.w	r3, [sp, #20]
   8ce06:	bf14      	ite	ne
   8ce08:	f104 33ff 	addne.w	r3, r4, #4294967295
   8ce0c:	4623      	moveq	r3, r4
   8ce0e:	9304      	str	r3, [sp, #16]
   8ce10:	9307      	str	r3, [sp, #28]
   8ce12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8ce16:	9102      	str	r1, [sp, #8]
   8ce18:	9106      	str	r1, [sp, #24]
   8ce1a:	f8ad 3016 	strh.w	r3, [sp, #22]
   8ce1e:	a902      	add	r1, sp, #8
   8ce20:	ab20      	add	r3, sp, #128	; 0x80
   8ce22:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8ce24:	9301      	str	r3, [sp, #4]
   8ce26:	f000 f90d 	bl	8d044 <_svfprintf_r>
   8ce2a:	1c43      	adds	r3, r0, #1
   8ce2c:	bfbc      	itt	lt
   8ce2e:	238b      	movlt	r3, #139	; 0x8b
   8ce30:	602b      	strlt	r3, [r5, #0]
   8ce32:	b114      	cbz	r4, 8ce3a <_snprintf_r+0x52>
   8ce34:	9b02      	ldr	r3, [sp, #8]
   8ce36:	2200      	movs	r2, #0
   8ce38:	701a      	strb	r2, [r3, #0]
   8ce3a:	b01c      	add	sp, #112	; 0x70
   8ce3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8ce40:	b001      	add	sp, #4
   8ce42:	4770      	bx	lr

0008ce44 <snprintf>:
   8ce44:	b40c      	push	{r2, r3}
   8ce46:	b530      	push	{r4, r5, lr}
   8ce48:	4b16      	ldr	r3, [pc, #88]	; (8cea4 <snprintf+0x60>)
   8ce4a:	1e0c      	subs	r4, r1, #0
   8ce4c:	b09d      	sub	sp, #116	; 0x74
   8ce4e:	681d      	ldr	r5, [r3, #0]
   8ce50:	da04      	bge.n	8ce5c <snprintf+0x18>
   8ce52:	238b      	movs	r3, #139	; 0x8b
   8ce54:	602b      	str	r3, [r5, #0]
   8ce56:	f04f 30ff 	mov.w	r0, #4294967295
   8ce5a:	e01e      	b.n	8ce9a <snprintf+0x56>
   8ce5c:	f44f 7302 	mov.w	r3, #520	; 0x208
   8ce60:	f8ad 3014 	strh.w	r3, [sp, #20]
   8ce64:	bf14      	ite	ne
   8ce66:	f104 33ff 	addne.w	r3, r4, #4294967295
   8ce6a:	4623      	moveq	r3, r4
   8ce6c:	9304      	str	r3, [sp, #16]
   8ce6e:	9307      	str	r3, [sp, #28]
   8ce70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8ce74:	9002      	str	r0, [sp, #8]
   8ce76:	9006      	str	r0, [sp, #24]
   8ce78:	f8ad 3016 	strh.w	r3, [sp, #22]
   8ce7c:	4628      	mov	r0, r5
   8ce7e:	ab21      	add	r3, sp, #132	; 0x84
   8ce80:	a902      	add	r1, sp, #8
   8ce82:	9a20      	ldr	r2, [sp, #128]	; 0x80
   8ce84:	9301      	str	r3, [sp, #4]
   8ce86:	f000 f8dd 	bl	8d044 <_svfprintf_r>
   8ce8a:	1c43      	adds	r3, r0, #1
   8ce8c:	bfbc      	itt	lt
   8ce8e:	238b      	movlt	r3, #139	; 0x8b
   8ce90:	602b      	strlt	r3, [r5, #0]
   8ce92:	b114      	cbz	r4, 8ce9a <snprintf+0x56>
   8ce94:	9b02      	ldr	r3, [sp, #8]
   8ce96:	2200      	movs	r2, #0
   8ce98:	701a      	strb	r2, [r3, #0]
   8ce9a:	b01d      	add	sp, #116	; 0x74
   8ce9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8cea0:	b002      	add	sp, #8
   8cea2:	4770      	bx	lr
   8cea4:	200702c8 	.word	0x200702c8

0008cea8 <strcat>:
   8cea8:	b510      	push	{r4, lr}
   8ceaa:	4604      	mov	r4, r0
   8ceac:	4622      	mov	r2, r4
   8ceae:	7813      	ldrb	r3, [r2, #0]
   8ceb0:	3401      	adds	r4, #1
   8ceb2:	2b00      	cmp	r3, #0
   8ceb4:	d1fa      	bne.n	8ceac <strcat+0x4>
   8ceb6:	5ccc      	ldrb	r4, [r1, r3]
   8ceb8:	54d4      	strb	r4, [r2, r3]
   8ceba:	3301      	adds	r3, #1
   8cebc:	2c00      	cmp	r4, #0
   8cebe:	d1fa      	bne.n	8ceb6 <strcat+0xe>
   8cec0:	bd10      	pop	{r4, pc}

0008cec2 <strlen>:
   8cec2:	4603      	mov	r3, r0
   8cec4:	f813 2b01 	ldrb.w	r2, [r3], #1
   8cec8:	2a00      	cmp	r2, #0
   8ceca:	d1fb      	bne.n	8cec4 <strlen+0x2>
   8cecc:	1a18      	subs	r0, r3, r0
   8cece:	3801      	subs	r0, #1
   8ced0:	4770      	bx	lr

0008ced2 <strncmp>:
   8ced2:	b570      	push	{r4, r5, r6, lr}
   8ced4:	b18a      	cbz	r2, 8cefa <strncmp+0x28>
   8ced6:	460b      	mov	r3, r1
   8ced8:	4605      	mov	r5, r0
   8ceda:	781c      	ldrb	r4, [r3, #0]
   8cedc:	f810 6b01 	ldrb.w	r6, [r0], #1
   8cee0:	3101      	adds	r1, #1
   8cee2:	42b4      	cmp	r4, r6
   8cee4:	d101      	bne.n	8ceea <strncmp+0x18>
   8cee6:	2a01      	cmp	r2, #1
   8cee8:	d103      	bne.n	8cef2 <strncmp+0x20>
   8ceea:	7828      	ldrb	r0, [r5, #0]
   8ceec:	781b      	ldrb	r3, [r3, #0]
   8ceee:	1ac0      	subs	r0, r0, r3
   8cef0:	bd70      	pop	{r4, r5, r6, pc}
   8cef2:	3a01      	subs	r2, #1
   8cef4:	2c00      	cmp	r4, #0
   8cef6:	d1ee      	bne.n	8ced6 <strncmp+0x4>
   8cef8:	e7f7      	b.n	8ceea <strncmp+0x18>
   8cefa:	4610      	mov	r0, r2
   8cefc:	bd70      	pop	{r4, r5, r6, pc}

0008cefe <strncpy>:
   8cefe:	b510      	push	{r4, lr}
   8cf00:	4603      	mov	r3, r0
   8cf02:	b132      	cbz	r2, 8cf12 <strncpy+0x14>
   8cf04:	f811 4b01 	ldrb.w	r4, [r1], #1
   8cf08:	3a01      	subs	r2, #1
   8cf0a:	f803 4b01 	strb.w	r4, [r3], #1
   8cf0e:	2c00      	cmp	r4, #0
   8cf10:	d1f7      	bne.n	8cf02 <strncpy+0x4>
   8cf12:	441a      	add	r2, r3
   8cf14:	4293      	cmp	r3, r2
   8cf16:	d003      	beq.n	8cf20 <strncpy+0x22>
   8cf18:	2100      	movs	r1, #0
   8cf1a:	f803 1b01 	strb.w	r1, [r3], #1
   8cf1e:	e7f9      	b.n	8cf14 <strncpy+0x16>
   8cf20:	bd10      	pop	{r4, pc}
	...

0008cf24 <_strtol_r>:
   8cf24:	4684      	mov	ip, r0
   8cf26:	483f      	ldr	r0, [pc, #252]	; (8d024 <_strtol_r+0x100>)
   8cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8cf2c:	f8d0 8000 	ldr.w	r8, [r0]
   8cf30:	460e      	mov	r6, r1
   8cf32:	4634      	mov	r4, r6
   8cf34:	f814 5b01 	ldrb.w	r5, [r4], #1
   8cf38:	eb08 0005 	add.w	r0, r8, r5
   8cf3c:	7840      	ldrb	r0, [r0, #1]
   8cf3e:	f000 0008 	and.w	r0, r0, #8
   8cf42:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   8cf46:	b108      	cbz	r0, 8cf4c <_strtol_r+0x28>
   8cf48:	4626      	mov	r6, r4
   8cf4a:	e7f2      	b.n	8cf32 <_strtol_r+0xe>
   8cf4c:	2d2d      	cmp	r5, #45	; 0x2d
   8cf4e:	d103      	bne.n	8cf58 <_strtol_r+0x34>
   8cf50:	1cb4      	adds	r4, r6, #2
   8cf52:	7875      	ldrb	r5, [r6, #1]
   8cf54:	2701      	movs	r7, #1
   8cf56:	e003      	b.n	8cf60 <_strtol_r+0x3c>
   8cf58:	2d2b      	cmp	r5, #43	; 0x2b
   8cf5a:	bf04      	itt	eq
   8cf5c:	7875      	ldrbeq	r5, [r6, #1]
   8cf5e:	1cb4      	addeq	r4, r6, #2
   8cf60:	f033 0010 	bics.w	r0, r3, #16
   8cf64:	d10d      	bne.n	8cf82 <_strtol_r+0x5e>
   8cf66:	2d30      	cmp	r5, #48	; 0x30
   8cf68:	d108      	bne.n	8cf7c <_strtol_r+0x58>
   8cf6a:	7820      	ldrb	r0, [r4, #0]
   8cf6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   8cf70:	2858      	cmp	r0, #88	; 0x58
   8cf72:	d151      	bne.n	8d018 <_strtol_r+0xf4>
   8cf74:	7865      	ldrb	r5, [r4, #1]
   8cf76:	2310      	movs	r3, #16
   8cf78:	3402      	adds	r4, #2
   8cf7a:	e002      	b.n	8cf82 <_strtol_r+0x5e>
   8cf7c:	2b00      	cmp	r3, #0
   8cf7e:	bf08      	it	eq
   8cf80:	230a      	moveq	r3, #10
   8cf82:	2f00      	cmp	r7, #0
   8cf84:	bf0c      	ite	eq
   8cf86:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
   8cf8a:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
   8cf8e:	fbba f9f3 	udiv	r9, sl, r3
   8cf92:	fb03 aa19 	mls	sl, r3, r9, sl
   8cf96:	2600      	movs	r6, #0
   8cf98:	4630      	mov	r0, r6
   8cf9a:	eb08 0b05 	add.w	fp, r8, r5
   8cf9e:	f89b b001 	ldrb.w	fp, [fp, #1]
   8cfa2:	f01b 0f04 	tst.w	fp, #4
   8cfa6:	d001      	beq.n	8cfac <_strtol_r+0x88>
   8cfa8:	3d30      	subs	r5, #48	; 0x30
   8cfaa:	e00b      	b.n	8cfc4 <_strtol_r+0xa0>
   8cfac:	f01b 0b03 	ands.w	fp, fp, #3
   8cfb0:	d01b      	beq.n	8cfea <_strtol_r+0xc6>
   8cfb2:	f1bb 0f01 	cmp.w	fp, #1
   8cfb6:	bf14      	ite	ne
   8cfb8:	f04f 0b57 	movne.w	fp, #87	; 0x57
   8cfbc:	f04f 0b37 	moveq.w	fp, #55	; 0x37
   8cfc0:	ebcb 0505 	rsb	r5, fp, r5
   8cfc4:	429d      	cmp	r5, r3
   8cfc6:	da10      	bge.n	8cfea <_strtol_r+0xc6>
   8cfc8:	f1b6 3fff 	cmp.w	r6, #4294967295
   8cfcc:	d00a      	beq.n	8cfe4 <_strtol_r+0xc0>
   8cfce:	4548      	cmp	r0, r9
   8cfd0:	d806      	bhi.n	8cfe0 <_strtol_r+0xbc>
   8cfd2:	d101      	bne.n	8cfd8 <_strtol_r+0xb4>
   8cfd4:	4555      	cmp	r5, sl
   8cfd6:	dc03      	bgt.n	8cfe0 <_strtol_r+0xbc>
   8cfd8:	fb03 5000 	mla	r0, r3, r0, r5
   8cfdc:	2601      	movs	r6, #1
   8cfde:	e001      	b.n	8cfe4 <_strtol_r+0xc0>
   8cfe0:	f04f 36ff 	mov.w	r6, #4294967295
   8cfe4:	f814 5b01 	ldrb.w	r5, [r4], #1
   8cfe8:	e7d7      	b.n	8cf9a <_strtol_r+0x76>
   8cfea:	1c73      	adds	r3, r6, #1
   8cfec:	d10c      	bne.n	8d008 <_strtol_r+0xe4>
   8cfee:	2f00      	cmp	r7, #0
   8cff0:	f04f 0322 	mov.w	r3, #34	; 0x22
   8cff4:	bf0c      	ite	eq
   8cff6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8cffa:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8cffe:	f8cc 3000 	str.w	r3, [ip]
   8d002:	b92a      	cbnz	r2, 8d010 <_strtol_r+0xec>
   8d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d008:	b107      	cbz	r7, 8d00c <_strtol_r+0xe8>
   8d00a:	4240      	negs	r0, r0
   8d00c:	b142      	cbz	r2, 8d020 <_strtol_r+0xfc>
   8d00e:	b106      	cbz	r6, 8d012 <_strtol_r+0xee>
   8d010:	1e61      	subs	r1, r4, #1
   8d012:	6011      	str	r1, [r2, #0]
   8d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d018:	2b00      	cmp	r3, #0
   8d01a:	bf08      	it	eq
   8d01c:	2308      	moveq	r3, #8
   8d01e:	e7b0      	b.n	8cf82 <_strtol_r+0x5e>
   8d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d024:	200702c0 	.word	0x200702c0

0008d028 <strtol>:
   8d028:	b530      	push	{r4, r5, lr}
   8d02a:	4613      	mov	r3, r2
   8d02c:	4a04      	ldr	r2, [pc, #16]	; (8d040 <strtol+0x18>)
   8d02e:	4605      	mov	r5, r0
   8d030:	460c      	mov	r4, r1
   8d032:	6810      	ldr	r0, [r2, #0]
   8d034:	4629      	mov	r1, r5
   8d036:	4622      	mov	r2, r4
   8d038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8d03c:	f7ff bf72 	b.w	8cf24 <_strtol_r>
   8d040:	200702c8 	.word	0x200702c8

0008d044 <_svfprintf_r>:
   8d044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d048:	b0c3      	sub	sp, #268	; 0x10c
   8d04a:	468b      	mov	fp, r1
   8d04c:	4698      	mov	r8, r3
   8d04e:	920b      	str	r2, [sp, #44]	; 0x2c
   8d050:	4682      	mov	sl, r0
   8d052:	f004 f803 	bl	9105c <_localeconv_r>
   8d056:	6800      	ldr	r0, [r0, #0]
   8d058:	9018      	str	r0, [sp, #96]	; 0x60
   8d05a:	f7ff ff32 	bl	8cec2 <strlen>
   8d05e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8d062:	9010      	str	r0, [sp, #64]	; 0x40
   8d064:	0619      	lsls	r1, r3, #24
   8d066:	d515      	bpl.n	8d094 <_svfprintf_r+0x50>
   8d068:	f8db 3010 	ldr.w	r3, [fp, #16]
   8d06c:	b993      	cbnz	r3, 8d094 <_svfprintf_r+0x50>
   8d06e:	4650      	mov	r0, sl
   8d070:	2140      	movs	r1, #64	; 0x40
   8d072:	f7ff fc11 	bl	8c898 <_malloc_r>
   8d076:	f8cb 0000 	str.w	r0, [fp]
   8d07a:	f8cb 0010 	str.w	r0, [fp, #16]
   8d07e:	b930      	cbnz	r0, 8d08e <_svfprintf_r+0x4a>
   8d080:	230c      	movs	r3, #12
   8d082:	f8ca 3000 	str.w	r3, [sl]
   8d086:	f04f 30ff 	mov.w	r0, #4294967295
   8d08a:	f000 bf6e 	b.w	8df6a <_svfprintf_r+0xf26>
   8d08e:	2340      	movs	r3, #64	; 0x40
   8d090:	f8cb 3014 	str.w	r3, [fp, #20]
   8d094:	2400      	movs	r4, #0
   8d096:	2500      	movs	r5, #0
   8d098:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
   8d09c:	2300      	movs	r3, #0
   8d09e:	ae32      	add	r6, sp, #200	; 0xc8
   8d0a0:	9625      	str	r6, [sp, #148]	; 0x94
   8d0a2:	9327      	str	r3, [sp, #156]	; 0x9c
   8d0a4:	9326      	str	r3, [sp, #152]	; 0x98
   8d0a6:	9309      	str	r3, [sp, #36]	; 0x24
   8d0a8:	931b      	str	r3, [sp, #108]	; 0x6c
   8d0aa:	931a      	str	r3, [sp, #104]	; 0x68
   8d0ac:	930f      	str	r3, [sp, #60]	; 0x3c
   8d0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8d0b0:	461c      	mov	r4, r3
   8d0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   8d0b6:	b91a      	cbnz	r2, 8d0c0 <_svfprintf_r+0x7c>
   8d0b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8d0ba:	1a25      	subs	r5, r4, r0
   8d0bc:	d103      	bne.n	8d0c6 <_svfprintf_r+0x82>
   8d0be:	e01b      	b.n	8d0f8 <_svfprintf_r+0xb4>
   8d0c0:	2a25      	cmp	r2, #37	; 0x25
   8d0c2:	d1f5      	bne.n	8d0b0 <_svfprintf_r+0x6c>
   8d0c4:	e7f8      	b.n	8d0b8 <_svfprintf_r+0x74>
   8d0c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8d0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8d0ca:	442b      	add	r3, r5
   8d0cc:	9327      	str	r3, [sp, #156]	; 0x9c
   8d0ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8d0d0:	e886 0022 	stmia.w	r6, {r1, r5}
   8d0d4:	3301      	adds	r3, #1
   8d0d6:	2b07      	cmp	r3, #7
   8d0d8:	9326      	str	r3, [sp, #152]	; 0x98
   8d0da:	dc01      	bgt.n	8d0e0 <_svfprintf_r+0x9c>
   8d0dc:	3608      	adds	r6, #8
   8d0de:	e008      	b.n	8d0f2 <_svfprintf_r+0xae>
   8d0e0:	4650      	mov	r0, sl
   8d0e2:	4659      	mov	r1, fp
   8d0e4:	aa25      	add	r2, sp, #148	; 0x94
   8d0e6:	f004 fe5f 	bl	91da8 <__ssprint_r>
   8d0ea:	2800      	cmp	r0, #0
   8d0ec:	f040 8735 	bne.w	8df5a <_svfprintf_r+0xf16>
   8d0f0:	ae32      	add	r6, sp, #200	; 0xc8
   8d0f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8d0f4:	442a      	add	r2, r5
   8d0f6:	920f      	str	r2, [sp, #60]	; 0x3c
   8d0f8:	7823      	ldrb	r3, [r4, #0]
   8d0fa:	2b00      	cmp	r3, #0
   8d0fc:	f000 8726 	beq.w	8df4c <_svfprintf_r+0xf08>
   8d100:	2300      	movs	r3, #0
   8d102:	3401      	adds	r4, #1
   8d104:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d108:	f04f 39ff 	mov.w	r9, #4294967295
   8d10c:	930e      	str	r3, [sp, #56]	; 0x38
   8d10e:	461f      	mov	r7, r3
   8d110:	1c65      	adds	r5, r4, #1
   8d112:	7824      	ldrb	r4, [r4, #0]
   8d114:	950b      	str	r5, [sp, #44]	; 0x2c
   8d116:	9408      	str	r4, [sp, #32]
   8d118:	9c08      	ldr	r4, [sp, #32]
   8d11a:	f1a4 0220 	sub.w	r2, r4, #32
   8d11e:	2a58      	cmp	r2, #88	; 0x58
   8d120:	f200 8385 	bhi.w	8d82e <_svfprintf_r+0x7ea>
   8d124:	e8df f012 	tbh	[pc, r2, lsl #1]
   8d128:	0383006d 	.word	0x0383006d
   8d12c:	00710383 	.word	0x00710383
   8d130:	03830383 	.word	0x03830383
   8d134:	03830383 	.word	0x03830383
   8d138:	03830383 	.word	0x03830383
   8d13c:	0059005b 	.word	0x0059005b
   8d140:	00770383 	.word	0x00770383
   8d144:	0383007a 	.word	0x0383007a
   8d148:	00a2009f 	.word	0x00a2009f
   8d14c:	00a200a2 	.word	0x00a200a2
   8d150:	00a200a2 	.word	0x00a200a2
   8d154:	00a200a2 	.word	0x00a200a2
   8d158:	00a200a2 	.word	0x00a200a2
   8d15c:	03830383 	.word	0x03830383
   8d160:	03830383 	.word	0x03830383
   8d164:	03830383 	.word	0x03830383
   8d168:	03830383 	.word	0x03830383
   8d16c:	03830383 	.word	0x03830383
   8d170:	00fe00d3 	.word	0x00fe00d3
   8d174:	00fe0383 	.word	0x00fe0383
   8d178:	03830383 	.word	0x03830383
   8d17c:	03830383 	.word	0x03830383
   8d180:	038300b6 	.word	0x038300b6
   8d184:	026b0383 	.word	0x026b0383
   8d188:	03830383 	.word	0x03830383
   8d18c:	03830383 	.word	0x03830383
   8d190:	02bb0383 	.word	0x02bb0383
   8d194:	03830383 	.word	0x03830383
   8d198:	03830068 	.word	0x03830068
   8d19c:	03830383 	.word	0x03830383
   8d1a0:	03830383 	.word	0x03830383
   8d1a4:	03830383 	.word	0x03830383
   8d1a8:	03830383 	.word	0x03830383
   8d1ac:	00c90383 	.word	0x00c90383
   8d1b0:	00fe0065 	.word	0x00fe0065
   8d1b4:	00fe00fe 	.word	0x00fe00fe
   8d1b8:	006500b9 	.word	0x006500b9
   8d1bc:	03830383 	.word	0x03830383
   8d1c0:	038300bc 	.word	0x038300bc
   8d1c4:	026d024c 	.word	0x026d024c
   8d1c8:	00c6028c 	.word	0x00c6028c
   8d1cc:	029e0383 	.word	0x029e0383
   8d1d0:	02bd0383 	.word	0x02bd0383
   8d1d4:	03830383 	.word	0x03830383
   8d1d8:	02d8      	.short	0x02d8
   8d1da:	232b      	movs	r3, #43	; 0x2b
   8d1dc:	e007      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d1de:	f8d8 5000 	ldr.w	r5, [r8]
   8d1e2:	f108 0204 	add.w	r2, r8, #4
   8d1e6:	2d00      	cmp	r5, #0
   8d1e8:	950e      	str	r5, [sp, #56]	; 0x38
   8d1ea:	db11      	blt.n	8d210 <_svfprintf_r+0x1cc>
   8d1ec:	4690      	mov	r8, r2
   8d1ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8d1f0:	e78e      	b.n	8d110 <_svfprintf_r+0xcc>
   8d1f2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d1f6:	e06e      	b.n	8d2d6 <_svfprintf_r+0x292>
   8d1f8:	4cab      	ldr	r4, [pc, #684]	; (8d4a8 <_svfprintf_r+0x464>)
   8d1fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d1fe:	941b      	str	r4, [sp, #108]	; 0x6c
   8d200:	e26e      	b.n	8d6e0 <_svfprintf_r+0x69c>
   8d202:	2b00      	cmp	r3, #0
   8d204:	bf08      	it	eq
   8d206:	2320      	moveq	r3, #32
   8d208:	e7f1      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d20a:	f047 0701 	orr.w	r7, r7, #1
   8d20e:	e7ee      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d210:	426d      	negs	r5, r5
   8d212:	950e      	str	r5, [sp, #56]	; 0x38
   8d214:	4690      	mov	r8, r2
   8d216:	f047 0704 	orr.w	r7, r7, #4
   8d21a:	e7e8      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d21c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8d21e:	7825      	ldrb	r5, [r4, #0]
   8d220:	1c62      	adds	r2, r4, #1
   8d222:	2d2a      	cmp	r5, #42	; 0x2a
   8d224:	9508      	str	r5, [sp, #32]
   8d226:	d002      	beq.n	8d22e <_svfprintf_r+0x1ea>
   8d228:	f04f 0900 	mov.w	r9, #0
   8d22c:	e00b      	b.n	8d246 <_svfprintf_r+0x202>
   8d22e:	f8d8 9000 	ldr.w	r9, [r8]
   8d232:	f108 0104 	add.w	r1, r8, #4
   8d236:	f1b9 0f00 	cmp.w	r9, #0
   8d23a:	4688      	mov	r8, r1
   8d23c:	920b      	str	r2, [sp, #44]	; 0x2c
   8d23e:	dad6      	bge.n	8d1ee <_svfprintf_r+0x1aa>
   8d240:	f04f 39ff 	mov.w	r9, #4294967295
   8d244:	e7d3      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d246:	9d08      	ldr	r5, [sp, #32]
   8d248:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
   8d24c:	2909      	cmp	r1, #9
   8d24e:	d806      	bhi.n	8d25e <_svfprintf_r+0x21a>
   8d250:	f812 4b01 	ldrb.w	r4, [r2], #1
   8d254:	200a      	movs	r0, #10
   8d256:	fb00 1909 	mla	r9, r0, r9, r1
   8d25a:	9408      	str	r4, [sp, #32]
   8d25c:	e7f3      	b.n	8d246 <_svfprintf_r+0x202>
   8d25e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
   8d262:	920b      	str	r2, [sp, #44]	; 0x2c
   8d264:	e758      	b.n	8d118 <_svfprintf_r+0xd4>
   8d266:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8d26a:	e7c0      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d26c:	2400      	movs	r4, #0
   8d26e:	940e      	str	r4, [sp, #56]	; 0x38
   8d270:	9d08      	ldr	r5, [sp, #32]
   8d272:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8d274:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   8d278:	210a      	movs	r1, #10
   8d27a:	fb01 2404 	mla	r4, r1, r4, r2
   8d27e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8d280:	940e      	str	r4, [sp, #56]	; 0x38
   8d282:	f812 5b01 	ldrb.w	r5, [r2], #1
   8d286:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
   8d28a:	2909      	cmp	r1, #9
   8d28c:	9508      	str	r5, [sp, #32]
   8d28e:	d8e8      	bhi.n	8d262 <_svfprintf_r+0x21e>
   8d290:	920b      	str	r2, [sp, #44]	; 0x2c
   8d292:	e7ed      	b.n	8d270 <_svfprintf_r+0x22c>
   8d294:	f047 0708 	orr.w	r7, r7, #8
   8d298:	e7a9      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d29a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8d29e:	e7a6      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d2a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8d2a2:	7822      	ldrb	r2, [r4, #0]
   8d2a4:	2a6c      	cmp	r2, #108	; 0x6c
   8d2a6:	d102      	bne.n	8d2ae <_svfprintf_r+0x26a>
   8d2a8:	3401      	adds	r4, #1
   8d2aa:	940b      	str	r4, [sp, #44]	; 0x2c
   8d2ac:	e002      	b.n	8d2b4 <_svfprintf_r+0x270>
   8d2ae:	f047 0710 	orr.w	r7, r7, #16
   8d2b2:	e79c      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d2b4:	f047 0720 	orr.w	r7, r7, #32
   8d2b8:	e799      	b.n	8d1ee <_svfprintf_r+0x1aa>
   8d2ba:	f8d8 3000 	ldr.w	r3, [r8]
   8d2be:	2500      	movs	r5, #0
   8d2c0:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
   8d2c4:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8d2c8:	f108 0804 	add.w	r8, r8, #4
   8d2cc:	e2ba      	b.n	8d844 <_svfprintf_r+0x800>
   8d2ce:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d2d2:	f047 0710 	orr.w	r7, r7, #16
   8d2d6:	06ba      	lsls	r2, r7, #26
   8d2d8:	d508      	bpl.n	8d2ec <_svfprintf_r+0x2a8>
   8d2da:	f108 0807 	add.w	r8, r8, #7
   8d2de:	f028 0307 	bic.w	r3, r8, #7
   8d2e2:	f103 0808 	add.w	r8, r3, #8
   8d2e6:	e9d3 4500 	ldrd	r4, r5, [r3]
   8d2ea:	e00f      	b.n	8d30c <_svfprintf_r+0x2c8>
   8d2ec:	f017 0f10 	tst.w	r7, #16
   8d2f0:	f108 0304 	add.w	r3, r8, #4
   8d2f4:	d002      	beq.n	8d2fc <_svfprintf_r+0x2b8>
   8d2f6:	f8d8 4000 	ldr.w	r4, [r8]
   8d2fa:	e005      	b.n	8d308 <_svfprintf_r+0x2c4>
   8d2fc:	f8d8 4000 	ldr.w	r4, [r8]
   8d300:	f017 0f40 	tst.w	r7, #64	; 0x40
   8d304:	bf18      	it	ne
   8d306:	b224      	sxthne	r4, r4
   8d308:	17e5      	asrs	r5, r4, #31
   8d30a:	4698      	mov	r8, r3
   8d30c:	2c00      	cmp	r4, #0
   8d30e:	f175 0100 	sbcs.w	r1, r5, #0
   8d312:	f280 8210 	bge.w	8d736 <_svfprintf_r+0x6f2>
   8d316:	232d      	movs	r3, #45	; 0x2d
   8d318:	4264      	negs	r4, r4
   8d31a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8d31e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d322:	e208      	b.n	8d736 <_svfprintf_r+0x6f2>
   8d324:	9c08      	ldr	r4, [sp, #32]
   8d326:	f108 0807 	add.w	r8, r8, #7
   8d32a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d32e:	970a      	str	r7, [sp, #40]	; 0x28
   8d330:	f028 0307 	bic.w	r3, r8, #7
   8d334:	9411      	str	r4, [sp, #68]	; 0x44
   8d336:	e9d3 4500 	ldrd	r4, r5, [r3]
   8d33a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
   8d33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8d342:	f103 0808 	add.w	r8, r3, #8
   8d346:	f004 fcbd 	bl	91cc4 <__fpclassifyd>
   8d34a:	2801      	cmp	r0, #1
   8d34c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8d350:	d114      	bne.n	8d37c <_svfprintf_r+0x338>
   8d352:	2200      	movs	r2, #0
   8d354:	2300      	movs	r3, #0
   8d356:	f005 ff43 	bl	931e0 <__aeabi_dcmplt>
   8d35a:	b110      	cbz	r0, 8d362 <_svfprintf_r+0x31e>
   8d35c:	232d      	movs	r3, #45	; 0x2d
   8d35e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d362:	9d08      	ldr	r5, [sp, #32]
   8d364:	4b51      	ldr	r3, [pc, #324]	; (8d4ac <_svfprintf_r+0x468>)
   8d366:	4a52      	ldr	r2, [pc, #328]	; (8d4b0 <_svfprintf_r+0x46c>)
   8d368:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8d36c:	2d47      	cmp	r5, #71	; 0x47
   8d36e:	bfd8      	it	le
   8d370:	461a      	movle	r2, r3
   8d372:	9207      	str	r2, [sp, #28]
   8d374:	f04f 0903 	mov.w	r9, #3
   8d378:	2500      	movs	r5, #0
   8d37a:	e26a      	b.n	8d852 <_svfprintf_r+0x80e>
   8d37c:	f004 fca2 	bl	91cc4 <__fpclassifyd>
   8d380:	b958      	cbnz	r0, 8d39a <_svfprintf_r+0x356>
   8d382:	4b4c      	ldr	r3, [pc, #304]	; (8d4b4 <_svfprintf_r+0x470>)
   8d384:	4a4c      	ldr	r2, [pc, #304]	; (8d4b8 <_svfprintf_r+0x474>)
   8d386:	9c08      	ldr	r4, [sp, #32]
   8d388:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8d38c:	2c47      	cmp	r4, #71	; 0x47
   8d38e:	bfd8      	it	le
   8d390:	461a      	movle	r2, r3
   8d392:	9207      	str	r2, [sp, #28]
   8d394:	f04f 0903 	mov.w	r9, #3
   8d398:	e25a      	b.n	8d850 <_svfprintf_r+0x80c>
   8d39a:	f1b9 3fff 	cmp.w	r9, #4294967295
   8d39e:	d00a      	beq.n	8d3b6 <_svfprintf_r+0x372>
   8d3a0:	9d08      	ldr	r5, [sp, #32]
   8d3a2:	f025 0320 	bic.w	r3, r5, #32
   8d3a6:	2b47      	cmp	r3, #71	; 0x47
   8d3a8:	d107      	bne.n	8d3ba <_svfprintf_r+0x376>
   8d3aa:	f1b9 0f00 	cmp.w	r9, #0
   8d3ae:	bf08      	it	eq
   8d3b0:	f04f 0901 	moveq.w	r9, #1
   8d3b4:	e001      	b.n	8d3ba <_svfprintf_r+0x376>
   8d3b6:	f04f 0906 	mov.w	r9, #6
   8d3ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   8d3be:	2b00      	cmp	r3, #0
   8d3c0:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   8d3c4:	da08      	bge.n	8d3d8 <_svfprintf_r+0x394>
   8d3c6:	990d      	ldr	r1, [sp, #52]	; 0x34
   8d3c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   8d3ca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   8d3ce:	242d      	movs	r4, #45	; 0x2d
   8d3d0:	9012      	str	r0, [sp, #72]	; 0x48
   8d3d2:	9113      	str	r1, [sp, #76]	; 0x4c
   8d3d4:	9419      	str	r4, [sp, #100]	; 0x64
   8d3d6:	e005      	b.n	8d3e4 <_svfprintf_r+0x3a0>
   8d3d8:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   8d3dc:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
   8d3e0:	2500      	movs	r5, #0
   8d3e2:	9519      	str	r5, [sp, #100]	; 0x64
   8d3e4:	9d08      	ldr	r5, [sp, #32]
   8d3e6:	f025 0420 	bic.w	r4, r5, #32
   8d3ea:	2c46      	cmp	r4, #70	; 0x46
   8d3ec:	d004      	beq.n	8d3f8 <_svfprintf_r+0x3b4>
   8d3ee:	2c45      	cmp	r4, #69	; 0x45
   8d3f0:	d105      	bne.n	8d3fe <_svfprintf_r+0x3ba>
   8d3f2:	f109 0501 	add.w	r5, r9, #1
   8d3f6:	e003      	b.n	8d400 <_svfprintf_r+0x3bc>
   8d3f8:	464d      	mov	r5, r9
   8d3fa:	2303      	movs	r3, #3
   8d3fc:	e001      	b.n	8d402 <_svfprintf_r+0x3be>
   8d3fe:	464d      	mov	r5, r9
   8d400:	2302      	movs	r3, #2
   8d402:	e88d 0028 	stmia.w	sp, {r3, r5}
   8d406:	ab1f      	add	r3, sp, #124	; 0x7c
   8d408:	9302      	str	r3, [sp, #8]
   8d40a:	ab20      	add	r3, sp, #128	; 0x80
   8d40c:	9303      	str	r3, [sp, #12]
   8d40e:	ab23      	add	r3, sp, #140	; 0x8c
   8d410:	9304      	str	r3, [sp, #16]
   8d412:	4650      	mov	r0, sl
   8d414:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   8d418:	f002 fba9 	bl	8fb6e <_dtoa_r>
   8d41c:	2c47      	cmp	r4, #71	; 0x47
   8d41e:	9007      	str	r0, [sp, #28]
   8d420:	d10a      	bne.n	8d438 <_svfprintf_r+0x3f4>
   8d422:	980a      	ldr	r0, [sp, #40]	; 0x28
   8d424:	07c3      	lsls	r3, r0, #31
   8d426:	d407      	bmi.n	8d438 <_svfprintf_r+0x3f4>
   8d428:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8d42a:	9d07      	ldr	r5, [sp, #28]
   8d42c:	2c47      	cmp	r4, #71	; 0x47
   8d42e:	ebc5 0303 	rsb	r3, r5, r3
   8d432:	9309      	str	r3, [sp, #36]	; 0x24
   8d434:	d142      	bne.n	8d4bc <_svfprintf_r+0x478>
   8d436:	e02d      	b.n	8d494 <_svfprintf_r+0x450>
   8d438:	f8dd c01c 	ldr.w	ip, [sp, #28]
   8d43c:	2c46      	cmp	r4, #70	; 0x46
   8d43e:	44ac      	add	ip, r5
   8d440:	d113      	bne.n	8d46a <_svfprintf_r+0x426>
   8d442:	9807      	ldr	r0, [sp, #28]
   8d444:	7803      	ldrb	r3, [r0, #0]
   8d446:	2b30      	cmp	r3, #48	; 0x30
   8d448:	d10d      	bne.n	8d466 <_svfprintf_r+0x422>
   8d44a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8d44e:	2200      	movs	r2, #0
   8d450:	2300      	movs	r3, #0
   8d452:	f8cd c018 	str.w	ip, [sp, #24]
   8d456:	f005 feb9 	bl	931cc <__aeabi_dcmpeq>
   8d45a:	f8dd c018 	ldr.w	ip, [sp, #24]
   8d45e:	b910      	cbnz	r0, 8d466 <_svfprintf_r+0x422>
   8d460:	f1c5 0501 	rsb	r5, r5, #1
   8d464:	951f      	str	r5, [sp, #124]	; 0x7c
   8d466:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8d468:	449c      	add	ip, r3
   8d46a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8d46e:	2200      	movs	r2, #0
   8d470:	2300      	movs	r3, #0
   8d472:	f8cd c018 	str.w	ip, [sp, #24]
   8d476:	f005 fea9 	bl	931cc <__aeabi_dcmpeq>
   8d47a:	f8dd c018 	ldr.w	ip, [sp, #24]
   8d47e:	b108      	cbz	r0, 8d484 <_svfprintf_r+0x440>
   8d480:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
   8d484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8d486:	4563      	cmp	r3, ip
   8d488:	d2ce      	bcs.n	8d428 <_svfprintf_r+0x3e4>
   8d48a:	1c5a      	adds	r2, r3, #1
   8d48c:	9223      	str	r2, [sp, #140]	; 0x8c
   8d48e:	2230      	movs	r2, #48	; 0x30
   8d490:	701a      	strb	r2, [r3, #0]
   8d492:	e7f7      	b.n	8d484 <_svfprintf_r+0x440>
   8d494:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8d496:	1cdc      	adds	r4, r3, #3
   8d498:	db01      	blt.n	8d49e <_svfprintf_r+0x45a>
   8d49a:	454b      	cmp	r3, r9
   8d49c:	dd6e      	ble.n	8d57c <_svfprintf_r+0x538>
   8d49e:	9c08      	ldr	r4, [sp, #32]
   8d4a0:	3c02      	subs	r4, #2
   8d4a2:	9408      	str	r4, [sp, #32]
   8d4a4:	e00d      	b.n	8d4c2 <_svfprintf_r+0x47e>
   8d4a6:	bf00      	nop
   8d4a8:	000b11ce 	.word	0x000b11ce
   8d4ac:	000b11be 	.word	0x000b11be
   8d4b0:	000b11c2 	.word	0x000b11c2
   8d4b4:	000b11c6 	.word	0x000b11c6
   8d4b8:	000b11ca 	.word	0x000b11ca
   8d4bc:	9d08      	ldr	r5, [sp, #32]
   8d4be:	2d65      	cmp	r5, #101	; 0x65
   8d4c0:	dc43      	bgt.n	8d54a <_svfprintf_r+0x506>
   8d4c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8d4c4:	9c08      	ldr	r4, [sp, #32]
   8d4c6:	3b01      	subs	r3, #1
   8d4c8:	2b00      	cmp	r3, #0
   8d4ca:	931f      	str	r3, [sp, #124]	; 0x7c
   8d4cc:	bfba      	itte	lt
   8d4ce:	425b      	neglt	r3, r3
   8d4d0:	222d      	movlt	r2, #45	; 0x2d
   8d4d2:	222b      	movge	r2, #43	; 0x2b
   8d4d4:	2b09      	cmp	r3, #9
   8d4d6:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
   8d4da:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   8d4de:	dd1d      	ble.n	8d51c <_svfprintf_r+0x4d8>
   8d4e0:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   8d4e4:	200a      	movs	r0, #10
   8d4e6:	fb93 f1f0 	sdiv	r1, r3, r0
   8d4ea:	fb00 3311 	mls	r3, r0, r1, r3
   8d4ee:	2909      	cmp	r1, #9
   8d4f0:	f103 0330 	add.w	r3, r3, #48	; 0x30
   8d4f4:	4614      	mov	r4, r2
   8d4f6:	f802 3901 	strb.w	r3, [r2], #-1
   8d4fa:	460b      	mov	r3, r1
   8d4fc:	dcf2      	bgt.n	8d4e4 <_svfprintf_r+0x4a0>
   8d4fe:	f101 0330 	add.w	r3, r1, #48	; 0x30
   8d502:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8d506:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   8d50a:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   8d50e:	4294      	cmp	r4, r2
   8d510:	d20b      	bcs.n	8d52a <_svfprintf_r+0x4e6>
   8d512:	f814 2b01 	ldrb.w	r2, [r4], #1
   8d516:	f803 2b01 	strb.w	r2, [r3], #1
   8d51a:	e7f6      	b.n	8d50a <_svfprintf_r+0x4c6>
   8d51c:	2230      	movs	r2, #48	; 0x30
   8d51e:	4413      	add	r3, r2
   8d520:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8d524:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   8d528:	ab22      	add	r3, sp, #136	; 0x88
   8d52a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8d52c:	aa21      	add	r2, sp, #132	; 0x84
   8d52e:	1a9a      	subs	r2, r3, r2
   8d530:	4691      	mov	r9, r2
   8d532:	2d01      	cmp	r5, #1
   8d534:	921a      	str	r2, [sp, #104]	; 0x68
   8d536:	44a9      	add	r9, r5
   8d538:	dc03      	bgt.n	8d542 <_svfprintf_r+0x4fe>
   8d53a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8d53c:	f015 0401 	ands.w	r4, r5, #1
   8d540:	d037      	beq.n	8d5b2 <_svfprintf_r+0x56e>
   8d542:	f109 0901 	add.w	r9, r9, #1
   8d546:	2400      	movs	r4, #0
   8d548:	e033      	b.n	8d5b2 <_svfprintf_r+0x56e>
   8d54a:	9c08      	ldr	r4, [sp, #32]
   8d54c:	2c66      	cmp	r4, #102	; 0x66
   8d54e:	d115      	bne.n	8d57c <_svfprintf_r+0x538>
   8d550:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8d552:	2b00      	cmp	r3, #0
   8d554:	dd09      	ble.n	8d56a <_svfprintf_r+0x526>
   8d556:	f1b9 0f00 	cmp.w	r9, #0
   8d55a:	d102      	bne.n	8d562 <_svfprintf_r+0x51e>
   8d55c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8d55e:	07e8      	lsls	r0, r5, #31
   8d560:	d523      	bpl.n	8d5aa <_svfprintf_r+0x566>
   8d562:	f109 0901 	add.w	r9, r9, #1
   8d566:	444b      	add	r3, r9
   8d568:	e01f      	b.n	8d5aa <_svfprintf_r+0x566>
   8d56a:	f1b9 0f00 	cmp.w	r9, #0
   8d56e:	d102      	bne.n	8d576 <_svfprintf_r+0x532>
   8d570:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8d572:	07e1      	lsls	r1, r4, #31
   8d574:	d515      	bpl.n	8d5a2 <_svfprintf_r+0x55e>
   8d576:	f109 0302 	add.w	r3, r9, #2
   8d57a:	e016      	b.n	8d5aa <_svfprintf_r+0x566>
   8d57c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8d57e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8d580:	42ab      	cmp	r3, r5
   8d582:	db04      	blt.n	8d58e <_svfprintf_r+0x54a>
   8d584:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8d586:	07e2      	lsls	r2, r4, #31
   8d588:	d50d      	bpl.n	8d5a6 <_svfprintf_r+0x562>
   8d58a:	3301      	adds	r3, #1
   8d58c:	e006      	b.n	8d59c <_svfprintf_r+0x558>
   8d58e:	2b00      	cmp	r3, #0
   8d590:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8d592:	bfd4      	ite	le
   8d594:	f1c3 0302 	rsble	r3, r3, #2
   8d598:	2301      	movgt	r3, #1
   8d59a:	4423      	add	r3, r4
   8d59c:	2567      	movs	r5, #103	; 0x67
   8d59e:	9511      	str	r5, [sp, #68]	; 0x44
   8d5a0:	e003      	b.n	8d5aa <_svfprintf_r+0x566>
   8d5a2:	2301      	movs	r3, #1
   8d5a4:	e001      	b.n	8d5aa <_svfprintf_r+0x566>
   8d5a6:	2467      	movs	r4, #103	; 0x67
   8d5a8:	9411      	str	r4, [sp, #68]	; 0x44
   8d5aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
   8d5ac:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   8d5ae:	9508      	str	r5, [sp, #32]
   8d5b0:	4699      	mov	r9, r3
   8d5b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
   8d5b4:	b115      	cbz	r5, 8d5bc <_svfprintf_r+0x578>
   8d5b6:	232d      	movs	r3, #45	; 0x2d
   8d5b8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d5bc:	2500      	movs	r5, #0
   8d5be:	e149      	b.n	8d854 <_svfprintf_r+0x810>
   8d5c0:	f017 0f20 	tst.w	r7, #32
   8d5c4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d5c8:	f108 0104 	add.w	r1, r8, #4
   8d5cc:	d008      	beq.n	8d5e0 <_svfprintf_r+0x59c>
   8d5ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8d5d0:	f8d8 0000 	ldr.w	r0, [r8]
   8d5d4:	17e5      	asrs	r5, r4, #31
   8d5d6:	4622      	mov	r2, r4
   8d5d8:	462b      	mov	r3, r5
   8d5da:	e9c0 2300 	strd	r2, r3, [r0]
   8d5de:	e00c      	b.n	8d5fa <_svfprintf_r+0x5b6>
   8d5e0:	06fb      	lsls	r3, r7, #27
   8d5e2:	d406      	bmi.n	8d5f2 <_svfprintf_r+0x5ae>
   8d5e4:	067d      	lsls	r5, r7, #25
   8d5e6:	d504      	bpl.n	8d5f2 <_svfprintf_r+0x5ae>
   8d5e8:	f8d8 3000 	ldr.w	r3, [r8]
   8d5ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8d5ee:	801c      	strh	r4, [r3, #0]
   8d5f0:	e003      	b.n	8d5fa <_svfprintf_r+0x5b6>
   8d5f2:	f8d8 3000 	ldr.w	r3, [r8]
   8d5f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8d5f8:	601d      	str	r5, [r3, #0]
   8d5fa:	4688      	mov	r8, r1
   8d5fc:	e557      	b.n	8d0ae <_svfprintf_r+0x6a>
   8d5fe:	f047 0710 	orr.w	r7, r7, #16
   8d602:	f017 0320 	ands.w	r3, r7, #32
   8d606:	d009      	beq.n	8d61c <_svfprintf_r+0x5d8>
   8d608:	f108 0807 	add.w	r8, r8, #7
   8d60c:	f028 0307 	bic.w	r3, r8, #7
   8d610:	f103 0808 	add.w	r8, r3, #8
   8d614:	e9d3 4500 	ldrd	r4, r5, [r3]
   8d618:	2300      	movs	r3, #0
   8d61a:	e088      	b.n	8d72e <_svfprintf_r+0x6ea>
   8d61c:	f017 0110 	ands.w	r1, r7, #16
   8d620:	f108 0204 	add.w	r2, r8, #4
   8d624:	d107      	bne.n	8d636 <_svfprintf_r+0x5f2>
   8d626:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   8d62a:	d004      	beq.n	8d636 <_svfprintf_r+0x5f2>
   8d62c:	f8b8 4000 	ldrh.w	r4, [r8]
   8d630:	2500      	movs	r5, #0
   8d632:	4690      	mov	r8, r2
   8d634:	e7f0      	b.n	8d618 <_svfprintf_r+0x5d4>
   8d636:	f8d8 4000 	ldr.w	r4, [r8]
   8d63a:	2500      	movs	r5, #0
   8d63c:	4690      	mov	r8, r2
   8d63e:	e076      	b.n	8d72e <_svfprintf_r+0x6ea>
   8d640:	48a9      	ldr	r0, [pc, #676]	; (8d8e8 <_svfprintf_r+0x8a4>)
   8d642:	2330      	movs	r3, #48	; 0x30
   8d644:	2278      	movs	r2, #120	; 0x78
   8d646:	f8d8 4000 	ldr.w	r4, [r8]
   8d64a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8d64e:	2500      	movs	r5, #0
   8d650:	f047 0702 	orr.w	r7, r7, #2
   8d654:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8d658:	f108 0804 	add.w	r8, r8, #4
   8d65c:	901b      	str	r0, [sp, #108]	; 0x6c
   8d65e:	2302      	movs	r3, #2
   8d660:	9208      	str	r2, [sp, #32]
   8d662:	e064      	b.n	8d72e <_svfprintf_r+0x6ea>
   8d664:	4643      	mov	r3, r8
   8d666:	2500      	movs	r5, #0
   8d668:	681b      	ldr	r3, [r3, #0]
   8d66a:	45a9      	cmp	r9, r5
   8d66c:	9307      	str	r3, [sp, #28]
   8d66e:	f108 0804 	add.w	r8, r8, #4
   8d672:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8d676:	db0d      	blt.n	8d694 <_svfprintf_r+0x650>
   8d678:	4618      	mov	r0, r3
   8d67a:	4629      	mov	r1, r5
   8d67c:	464a      	mov	r2, r9
   8d67e:	f003 fd63 	bl	91148 <memchr>
   8d682:	2800      	cmp	r0, #0
   8d684:	f000 80e4 	beq.w	8d850 <_svfprintf_r+0x80c>
   8d688:	9c07      	ldr	r4, [sp, #28]
   8d68a:	1b00      	subs	r0, r0, r4
   8d68c:	4548      	cmp	r0, r9
   8d68e:	bfb8      	it	lt
   8d690:	4681      	movlt	r9, r0
   8d692:	e0de      	b.n	8d852 <_svfprintf_r+0x80e>
   8d694:	9807      	ldr	r0, [sp, #28]
   8d696:	f7ff fc14 	bl	8cec2 <strlen>
   8d69a:	4681      	mov	r9, r0
   8d69c:	e0d9      	b.n	8d852 <_svfprintf_r+0x80e>
   8d69e:	f047 0710 	orr.w	r7, r7, #16
   8d6a2:	06bc      	lsls	r4, r7, #26
   8d6a4:	d508      	bpl.n	8d6b8 <_svfprintf_r+0x674>
   8d6a6:	f108 0807 	add.w	r8, r8, #7
   8d6aa:	f028 0307 	bic.w	r3, r8, #7
   8d6ae:	f103 0808 	add.w	r8, r3, #8
   8d6b2:	e9d3 4500 	ldrd	r4, r5, [r3]
   8d6b6:	e00d      	b.n	8d6d4 <_svfprintf_r+0x690>
   8d6b8:	f017 0f10 	tst.w	r7, #16
   8d6bc:	f108 0304 	add.w	r3, r8, #4
   8d6c0:	d104      	bne.n	8d6cc <_svfprintf_r+0x688>
   8d6c2:	0678      	lsls	r0, r7, #25
   8d6c4:	d502      	bpl.n	8d6cc <_svfprintf_r+0x688>
   8d6c6:	f8b8 4000 	ldrh.w	r4, [r8]
   8d6ca:	e001      	b.n	8d6d0 <_svfprintf_r+0x68c>
   8d6cc:	f8d8 4000 	ldr.w	r4, [r8]
   8d6d0:	2500      	movs	r5, #0
   8d6d2:	4698      	mov	r8, r3
   8d6d4:	2301      	movs	r3, #1
   8d6d6:	e02a      	b.n	8d72e <_svfprintf_r+0x6ea>
   8d6d8:	4d83      	ldr	r5, [pc, #524]	; (8d8e8 <_svfprintf_r+0x8a4>)
   8d6da:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d6de:	951b      	str	r5, [sp, #108]	; 0x6c
   8d6e0:	06b9      	lsls	r1, r7, #26
   8d6e2:	d508      	bpl.n	8d6f6 <_svfprintf_r+0x6b2>
   8d6e4:	f108 0807 	add.w	r8, r8, #7
   8d6e8:	f028 0307 	bic.w	r3, r8, #7
   8d6ec:	f103 0808 	add.w	r8, r3, #8
   8d6f0:	e9d3 4500 	ldrd	r4, r5, [r3]
   8d6f4:	e00d      	b.n	8d712 <_svfprintf_r+0x6ce>
   8d6f6:	f017 0f10 	tst.w	r7, #16
   8d6fa:	f108 0304 	add.w	r3, r8, #4
   8d6fe:	d104      	bne.n	8d70a <_svfprintf_r+0x6c6>
   8d700:	067a      	lsls	r2, r7, #25
   8d702:	d502      	bpl.n	8d70a <_svfprintf_r+0x6c6>
   8d704:	f8b8 4000 	ldrh.w	r4, [r8]
   8d708:	e001      	b.n	8d70e <_svfprintf_r+0x6ca>
   8d70a:	f8d8 4000 	ldr.w	r4, [r8]
   8d70e:	2500      	movs	r5, #0
   8d710:	4698      	mov	r8, r3
   8d712:	07fb      	lsls	r3, r7, #31
   8d714:	d50a      	bpl.n	8d72c <_svfprintf_r+0x6e8>
   8d716:	ea54 0005 	orrs.w	r0, r4, r5
   8d71a:	d007      	beq.n	8d72c <_svfprintf_r+0x6e8>
   8d71c:	9908      	ldr	r1, [sp, #32]
   8d71e:	2330      	movs	r3, #48	; 0x30
   8d720:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8d724:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
   8d728:	f047 0702 	orr.w	r7, r7, #2
   8d72c:	2302      	movs	r3, #2
   8d72e:	2200      	movs	r2, #0
   8d730:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   8d734:	e000      	b.n	8d738 <_svfprintf_r+0x6f4>
   8d736:	2301      	movs	r3, #1
   8d738:	f1b9 0f00 	cmp.w	r9, #0
   8d73c:	bfa8      	it	ge
   8d73e:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8d742:	ea54 0205 	orrs.w	r2, r4, r5
   8d746:	d102      	bne.n	8d74e <_svfprintf_r+0x70a>
   8d748:	f1b9 0f00 	cmp.w	r9, #0
   8d74c:	d05a      	beq.n	8d804 <_svfprintf_r+0x7c0>
   8d74e:	2b01      	cmp	r3, #1
   8d750:	d01f      	beq.n	8d792 <_svfprintf_r+0x74e>
   8d752:	2b02      	cmp	r3, #2
   8d754:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
   8d758:	d041      	beq.n	8d7de <_svfprintf_r+0x79a>
   8d75a:	08e1      	lsrs	r1, r4, #3
   8d75c:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
   8d760:	08e9      	lsrs	r1, r5, #3
   8d762:	f004 0207 	and.w	r2, r4, #7
   8d766:	9014      	str	r0, [sp, #80]	; 0x50
   8d768:	9115      	str	r1, [sp, #84]	; 0x54
   8d76a:	3230      	adds	r2, #48	; 0x30
   8d76c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   8d770:	ea54 0005 	orrs.w	r0, r4, r5
   8d774:	9307      	str	r3, [sp, #28]
   8d776:	701a      	strb	r2, [r3, #0]
   8d778:	f103 33ff 	add.w	r3, r3, #4294967295
   8d77c:	d1ed      	bne.n	8d75a <_svfprintf_r+0x716>
   8d77e:	07f8      	lsls	r0, r7, #31
   8d780:	9907      	ldr	r1, [sp, #28]
   8d782:	d54c      	bpl.n	8d81e <_svfprintf_r+0x7da>
   8d784:	2a30      	cmp	r2, #48	; 0x30
   8d786:	d04a      	beq.n	8d81e <_svfprintf_r+0x7da>
   8d788:	9307      	str	r3, [sp, #28]
   8d78a:	2330      	movs	r3, #48	; 0x30
   8d78c:	f801 3c01 	strb.w	r3, [r1, #-1]
   8d790:	e045      	b.n	8d81e <_svfprintf_r+0x7da>
   8d792:	2d00      	cmp	r5, #0
   8d794:	bf08      	it	eq
   8d796:	2c0a      	cmpeq	r4, #10
   8d798:	d205      	bcs.n	8d7a6 <_svfprintf_r+0x762>
   8d79a:	3430      	adds	r4, #48	; 0x30
   8d79c:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
   8d7a0:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
   8d7a4:	e03a      	b.n	8d81c <_svfprintf_r+0x7d8>
   8d7a6:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
   8d7aa:	900a      	str	r0, [sp, #40]	; 0x28
   8d7ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   8d7ae:	4620      	mov	r0, r4
   8d7b0:	9107      	str	r1, [sp, #28]
   8d7b2:	220a      	movs	r2, #10
   8d7b4:	4629      	mov	r1, r5
   8d7b6:	2300      	movs	r3, #0
   8d7b8:	f005 fd62 	bl	93280 <__aeabi_uldivmod>
   8d7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8d7be:	3230      	adds	r2, #48	; 0x30
   8d7c0:	f803 2901 	strb.w	r2, [r3], #-1
   8d7c4:	930a      	str	r3, [sp, #40]	; 0x28
   8d7c6:	4620      	mov	r0, r4
   8d7c8:	4629      	mov	r1, r5
   8d7ca:	220a      	movs	r2, #10
   8d7cc:	2300      	movs	r3, #0
   8d7ce:	f005 fd57 	bl	93280 <__aeabi_uldivmod>
   8d7d2:	4604      	mov	r4, r0
   8d7d4:	460d      	mov	r5, r1
   8d7d6:	ea54 0005 	orrs.w	r0, r4, r5
   8d7da:	d1e7      	bne.n	8d7ac <_svfprintf_r+0x768>
   8d7dc:	e01f      	b.n	8d81e <_svfprintf_r+0x7da>
   8d7de:	991b      	ldr	r1, [sp, #108]	; 0x6c
   8d7e0:	f004 020f 	and.w	r2, r4, #15
   8d7e4:	5c8a      	ldrb	r2, [r1, r2]
   8d7e6:	9307      	str	r3, [sp, #28]
   8d7e8:	f803 2901 	strb.w	r2, [r3], #-1
   8d7ec:	0922      	lsrs	r2, r4, #4
   8d7ee:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   8d7f2:	0929      	lsrs	r1, r5, #4
   8d7f4:	9016      	str	r0, [sp, #88]	; 0x58
   8d7f6:	9117      	str	r1, [sp, #92]	; 0x5c
   8d7f8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   8d7fc:	ea54 0205 	orrs.w	r2, r4, r5
   8d800:	d1ed      	bne.n	8d7de <_svfprintf_r+0x79a>
   8d802:	e00c      	b.n	8d81e <_svfprintf_r+0x7da>
   8d804:	b933      	cbnz	r3, 8d814 <_svfprintf_r+0x7d0>
   8d806:	07fb      	lsls	r3, r7, #31
   8d808:	d507      	bpl.n	8d81a <_svfprintf_r+0x7d6>
   8d80a:	ac42      	add	r4, sp, #264	; 0x108
   8d80c:	2330      	movs	r3, #48	; 0x30
   8d80e:	f804 3d41 	strb.w	r3, [r4, #-65]!
   8d812:	e003      	b.n	8d81c <_svfprintf_r+0x7d8>
   8d814:	ad32      	add	r5, sp, #200	; 0xc8
   8d816:	9507      	str	r5, [sp, #28]
   8d818:	e001      	b.n	8d81e <_svfprintf_r+0x7da>
   8d81a:	ac32      	add	r4, sp, #200	; 0xc8
   8d81c:	9407      	str	r4, [sp, #28]
   8d81e:	9c07      	ldr	r4, [sp, #28]
   8d820:	464d      	mov	r5, r9
   8d822:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   8d826:	ebc4 0909 	rsb	r9, r4, r9
   8d82a:	2400      	movs	r4, #0
   8d82c:	e012      	b.n	8d854 <_svfprintf_r+0x810>
   8d82e:	9d08      	ldr	r5, [sp, #32]
   8d830:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8d834:	2d00      	cmp	r5, #0
   8d836:	f000 8389 	beq.w	8df4c <_svfprintf_r+0xf08>
   8d83a:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
   8d83e:	2500      	movs	r5, #0
   8d840:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8d844:	a828      	add	r0, sp, #160	; 0xa0
   8d846:	f04f 0901 	mov.w	r9, #1
   8d84a:	462c      	mov	r4, r5
   8d84c:	9007      	str	r0, [sp, #28]
   8d84e:	e001      	b.n	8d854 <_svfprintf_r+0x810>
   8d850:	4605      	mov	r5, r0
   8d852:	462c      	mov	r4, r5
   8d854:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
   8d858:	45a9      	cmp	r9, r5
   8d85a:	bfac      	ite	ge
   8d85c:	4649      	movge	r1, r9
   8d85e:	4629      	movlt	r1, r5
   8d860:	910a      	str	r1, [sp, #40]	; 0x28
   8d862:	b10b      	cbz	r3, 8d868 <_svfprintf_r+0x824>
   8d864:	3101      	adds	r1, #1
   8d866:	910a      	str	r1, [sp, #40]	; 0x28
   8d868:	f017 0302 	ands.w	r3, r7, #2
   8d86c:	9311      	str	r3, [sp, #68]	; 0x44
   8d86e:	d002      	beq.n	8d876 <_svfprintf_r+0x832>
   8d870:	980a      	ldr	r0, [sp, #40]	; 0x28
   8d872:	3002      	adds	r0, #2
   8d874:	900a      	str	r0, [sp, #40]	; 0x28
   8d876:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8d87a:	9319      	str	r3, [sp, #100]	; 0x64
   8d87c:	d141      	bne.n	8d902 <_svfprintf_r+0x8be>
   8d87e:	980e      	ldr	r0, [sp, #56]	; 0x38
   8d880:	990a      	ldr	r1, [sp, #40]	; 0x28
   8d882:	ebc1 0c00 	rsb	ip, r1, r0
   8d886:	f1bc 0f00 	cmp.w	ip, #0
   8d88a:	dd3a      	ble.n	8d902 <_svfprintf_r+0x8be>
   8d88c:	4b17      	ldr	r3, [pc, #92]	; (8d8ec <_svfprintf_r+0x8a8>)
   8d88e:	f1bc 0f10 	cmp.w	ip, #16
   8d892:	6033      	str	r3, [r6, #0]
   8d894:	dd1b      	ble.n	8d8ce <_svfprintf_r+0x88a>
   8d896:	2310      	movs	r3, #16
   8d898:	6073      	str	r3, [r6, #4]
   8d89a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8d89c:	3310      	adds	r3, #16
   8d89e:	9327      	str	r3, [sp, #156]	; 0x9c
   8d8a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8d8a2:	3301      	adds	r3, #1
   8d8a4:	2b07      	cmp	r3, #7
   8d8a6:	9326      	str	r3, [sp, #152]	; 0x98
   8d8a8:	dc01      	bgt.n	8d8ae <_svfprintf_r+0x86a>
   8d8aa:	3608      	adds	r6, #8
   8d8ac:	e00c      	b.n	8d8c8 <_svfprintf_r+0x884>
   8d8ae:	4650      	mov	r0, sl
   8d8b0:	4659      	mov	r1, fp
   8d8b2:	aa25      	add	r2, sp, #148	; 0x94
   8d8b4:	f8cd c018 	str.w	ip, [sp, #24]
   8d8b8:	f004 fa76 	bl	91da8 <__ssprint_r>
   8d8bc:	f8dd c018 	ldr.w	ip, [sp, #24]
   8d8c0:	2800      	cmp	r0, #0
   8d8c2:	f040 834a 	bne.w	8df5a <_svfprintf_r+0xf16>
   8d8c6:	ae32      	add	r6, sp, #200	; 0xc8
   8d8c8:	f1ac 0c10 	sub.w	ip, ip, #16
   8d8cc:	e7de      	b.n	8d88c <_svfprintf_r+0x848>
   8d8ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8d8d0:	f8c6 c004 	str.w	ip, [r6, #4]
   8d8d4:	4463      	add	r3, ip
   8d8d6:	9327      	str	r3, [sp, #156]	; 0x9c
   8d8d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8d8da:	3301      	adds	r3, #1
   8d8dc:	2b07      	cmp	r3, #7
   8d8de:	9326      	str	r3, [sp, #152]	; 0x98
   8d8e0:	dc06      	bgt.n	8d8f0 <_svfprintf_r+0x8ac>
   8d8e2:	3608      	adds	r6, #8
   8d8e4:	e00d      	b.n	8d902 <_svfprintf_r+0x8be>
   8d8e6:	bf00      	nop
   8d8e8:	000b11df 	.word	0x000b11df
   8d8ec:	000b119e 	.word	0x000b119e
   8d8f0:	4650      	mov	r0, sl
   8d8f2:	4659      	mov	r1, fp
   8d8f4:	aa25      	add	r2, sp, #148	; 0x94
   8d8f6:	f004 fa57 	bl	91da8 <__ssprint_r>
   8d8fa:	2800      	cmp	r0, #0
   8d8fc:	f040 832d 	bne.w	8df5a <_svfprintf_r+0xf16>
   8d900:	ae32      	add	r6, sp, #200	; 0xc8
   8d902:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
   8d906:	b1bb      	cbz	r3, 8d938 <_svfprintf_r+0x8f4>
   8d908:	f10d 0377 	add.w	r3, sp, #119	; 0x77
   8d90c:	6033      	str	r3, [r6, #0]
   8d90e:	2301      	movs	r3, #1
   8d910:	6073      	str	r3, [r6, #4]
   8d912:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8d914:	3301      	adds	r3, #1
   8d916:	9327      	str	r3, [sp, #156]	; 0x9c
   8d918:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8d91a:	3301      	adds	r3, #1
   8d91c:	2b07      	cmp	r3, #7
   8d91e:	9326      	str	r3, [sp, #152]	; 0x98
   8d920:	dc01      	bgt.n	8d926 <_svfprintf_r+0x8e2>
   8d922:	3608      	adds	r6, #8
   8d924:	e008      	b.n	8d938 <_svfprintf_r+0x8f4>
   8d926:	4650      	mov	r0, sl
   8d928:	4659      	mov	r1, fp
   8d92a:	aa25      	add	r2, sp, #148	; 0x94
   8d92c:	f004 fa3c 	bl	91da8 <__ssprint_r>
   8d930:	2800      	cmp	r0, #0
   8d932:	f040 8312 	bne.w	8df5a <_svfprintf_r+0xf16>
   8d936:	ae32      	add	r6, sp, #200	; 0xc8
   8d938:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8d93a:	b1b3      	cbz	r3, 8d96a <_svfprintf_r+0x926>
   8d93c:	ab1e      	add	r3, sp, #120	; 0x78
   8d93e:	6033      	str	r3, [r6, #0]
   8d940:	2302      	movs	r3, #2
   8d942:	6073      	str	r3, [r6, #4]
   8d944:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8d946:	3302      	adds	r3, #2
   8d948:	9327      	str	r3, [sp, #156]	; 0x9c
   8d94a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8d94c:	3301      	adds	r3, #1
   8d94e:	2b07      	cmp	r3, #7
   8d950:	9326      	str	r3, [sp, #152]	; 0x98
   8d952:	dc01      	bgt.n	8d958 <_svfprintf_r+0x914>
   8d954:	3608      	adds	r6, #8
   8d956:	e008      	b.n	8d96a <_svfprintf_r+0x926>
   8d958:	4650      	mov	r0, sl
   8d95a:	4659      	mov	r1, fp
   8d95c:	aa25      	add	r2, sp, #148	; 0x94
   8d95e:	f004 fa23 	bl	91da8 <__ssprint_r>
   8d962:	2800      	cmp	r0, #0
   8d964:	f040 82f9 	bne.w	8df5a <_svfprintf_r+0xf16>
   8d968:	ae32      	add	r6, sp, #200	; 0xc8
   8d96a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8d96c:	2b80      	cmp	r3, #128	; 0x80
   8d96e:	d13c      	bne.n	8d9ea <_svfprintf_r+0x9a6>
   8d970:	980e      	ldr	r0, [sp, #56]	; 0x38
   8d972:	990a      	ldr	r1, [sp, #40]	; 0x28
   8d974:	ebc1 0c00 	rsb	ip, r1, r0
   8d978:	f1bc 0f00 	cmp.w	ip, #0
   8d97c:	dd35      	ble.n	8d9ea <_svfprintf_r+0x9a6>
   8d97e:	4b9c      	ldr	r3, [pc, #624]	; (8dbf0 <_svfprintf_r+0xbac>)
   8d980:	f1bc 0f10 	cmp.w	ip, #16
   8d984:	6033      	str	r3, [r6, #0]
   8d986:	dd1b      	ble.n	8d9c0 <_svfprintf_r+0x97c>
   8d988:	2310      	movs	r3, #16
   8d98a:	6073      	str	r3, [r6, #4]
   8d98c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8d98e:	3310      	adds	r3, #16
   8d990:	9327      	str	r3, [sp, #156]	; 0x9c
   8d992:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8d994:	3301      	adds	r3, #1
   8d996:	2b07      	cmp	r3, #7
   8d998:	9326      	str	r3, [sp, #152]	; 0x98
   8d99a:	dc01      	bgt.n	8d9a0 <_svfprintf_r+0x95c>
   8d99c:	3608      	adds	r6, #8
   8d99e:	e00c      	b.n	8d9ba <_svfprintf_r+0x976>
   8d9a0:	4650      	mov	r0, sl
   8d9a2:	4659      	mov	r1, fp
   8d9a4:	aa25      	add	r2, sp, #148	; 0x94
   8d9a6:	f8cd c018 	str.w	ip, [sp, #24]
   8d9aa:	f004 f9fd 	bl	91da8 <__ssprint_r>
   8d9ae:	f8dd c018 	ldr.w	ip, [sp, #24]
   8d9b2:	2800      	cmp	r0, #0
   8d9b4:	f040 82d1 	bne.w	8df5a <_svfprintf_r+0xf16>
   8d9b8:	ae32      	add	r6, sp, #200	; 0xc8
   8d9ba:	f1ac 0c10 	sub.w	ip, ip, #16
   8d9be:	e7de      	b.n	8d97e <_svfprintf_r+0x93a>
   8d9c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8d9c2:	f8c6 c004 	str.w	ip, [r6, #4]
   8d9c6:	4463      	add	r3, ip
   8d9c8:	9327      	str	r3, [sp, #156]	; 0x9c
   8d9ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8d9cc:	3301      	adds	r3, #1
   8d9ce:	2b07      	cmp	r3, #7
   8d9d0:	9326      	str	r3, [sp, #152]	; 0x98
   8d9d2:	dc01      	bgt.n	8d9d8 <_svfprintf_r+0x994>
   8d9d4:	3608      	adds	r6, #8
   8d9d6:	e008      	b.n	8d9ea <_svfprintf_r+0x9a6>
   8d9d8:	4650      	mov	r0, sl
   8d9da:	4659      	mov	r1, fp
   8d9dc:	aa25      	add	r2, sp, #148	; 0x94
   8d9de:	f004 f9e3 	bl	91da8 <__ssprint_r>
   8d9e2:	2800      	cmp	r0, #0
   8d9e4:	f040 82b9 	bne.w	8df5a <_svfprintf_r+0xf16>
   8d9e8:	ae32      	add	r6, sp, #200	; 0xc8
   8d9ea:	ebc9 0505 	rsb	r5, r9, r5
   8d9ee:	2d00      	cmp	r5, #0
   8d9f0:	dd2e      	ble.n	8da50 <_svfprintf_r+0xa0c>
   8d9f2:	4b7f      	ldr	r3, [pc, #508]	; (8dbf0 <_svfprintf_r+0xbac>)
   8d9f4:	2d10      	cmp	r5, #16
   8d9f6:	6033      	str	r3, [r6, #0]
   8d9f8:	dd16      	ble.n	8da28 <_svfprintf_r+0x9e4>
   8d9fa:	2310      	movs	r3, #16
   8d9fc:	6073      	str	r3, [r6, #4]
   8d9fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8da00:	3310      	adds	r3, #16
   8da02:	9327      	str	r3, [sp, #156]	; 0x9c
   8da04:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8da06:	3301      	adds	r3, #1
   8da08:	2b07      	cmp	r3, #7
   8da0a:	9326      	str	r3, [sp, #152]	; 0x98
   8da0c:	dc01      	bgt.n	8da12 <_svfprintf_r+0x9ce>
   8da0e:	3608      	adds	r6, #8
   8da10:	e008      	b.n	8da24 <_svfprintf_r+0x9e0>
   8da12:	4650      	mov	r0, sl
   8da14:	4659      	mov	r1, fp
   8da16:	aa25      	add	r2, sp, #148	; 0x94
   8da18:	f004 f9c6 	bl	91da8 <__ssprint_r>
   8da1c:	2800      	cmp	r0, #0
   8da1e:	f040 829c 	bne.w	8df5a <_svfprintf_r+0xf16>
   8da22:	ae32      	add	r6, sp, #200	; 0xc8
   8da24:	3d10      	subs	r5, #16
   8da26:	e7e4      	b.n	8d9f2 <_svfprintf_r+0x9ae>
   8da28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8da2a:	6075      	str	r5, [r6, #4]
   8da2c:	441d      	add	r5, r3
   8da2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8da30:	9527      	str	r5, [sp, #156]	; 0x9c
   8da32:	3301      	adds	r3, #1
   8da34:	2b07      	cmp	r3, #7
   8da36:	9326      	str	r3, [sp, #152]	; 0x98
   8da38:	dc01      	bgt.n	8da3e <_svfprintf_r+0x9fa>
   8da3a:	3608      	adds	r6, #8
   8da3c:	e008      	b.n	8da50 <_svfprintf_r+0xa0c>
   8da3e:	4650      	mov	r0, sl
   8da40:	4659      	mov	r1, fp
   8da42:	aa25      	add	r2, sp, #148	; 0x94
   8da44:	f004 f9b0 	bl	91da8 <__ssprint_r>
   8da48:	2800      	cmp	r0, #0
   8da4a:	f040 8286 	bne.w	8df5a <_svfprintf_r+0xf16>
   8da4e:	ae32      	add	r6, sp, #200	; 0xc8
   8da50:	05fd      	lsls	r5, r7, #23
   8da52:	d405      	bmi.n	8da60 <_svfprintf_r+0xa1c>
   8da54:	9c07      	ldr	r4, [sp, #28]
   8da56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8da58:	e886 0210 	stmia.w	r6, {r4, r9}
   8da5c:	444b      	add	r3, r9
   8da5e:	e0da      	b.n	8dc16 <_svfprintf_r+0xbd2>
   8da60:	9d08      	ldr	r5, [sp, #32]
   8da62:	2d65      	cmp	r5, #101	; 0x65
   8da64:	f340 81a7 	ble.w	8ddb6 <_svfprintf_r+0xd72>
   8da68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8da6c:	2200      	movs	r2, #0
   8da6e:	2300      	movs	r3, #0
   8da70:	f005 fbac 	bl	931cc <__aeabi_dcmpeq>
   8da74:	2800      	cmp	r0, #0
   8da76:	d059      	beq.n	8db2c <_svfprintf_r+0xae8>
   8da78:	4b5e      	ldr	r3, [pc, #376]	; (8dbf4 <_svfprintf_r+0xbb0>)
   8da7a:	6033      	str	r3, [r6, #0]
   8da7c:	2301      	movs	r3, #1
   8da7e:	6073      	str	r3, [r6, #4]
   8da80:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8da82:	3301      	adds	r3, #1
   8da84:	9327      	str	r3, [sp, #156]	; 0x9c
   8da86:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8da88:	3301      	adds	r3, #1
   8da8a:	2b07      	cmp	r3, #7
   8da8c:	9326      	str	r3, [sp, #152]	; 0x98
   8da8e:	dc01      	bgt.n	8da94 <_svfprintf_r+0xa50>
   8da90:	3608      	adds	r6, #8
   8da92:	e008      	b.n	8daa6 <_svfprintf_r+0xa62>
   8da94:	4650      	mov	r0, sl
   8da96:	4659      	mov	r1, fp
   8da98:	aa25      	add	r2, sp, #148	; 0x94
   8da9a:	f004 f985 	bl	91da8 <__ssprint_r>
   8da9e:	2800      	cmp	r0, #0
   8daa0:	f040 825b 	bne.w	8df5a <_svfprintf_r+0xf16>
   8daa4:	ae32      	add	r6, sp, #200	; 0xc8
   8daa6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8daa8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8daaa:	42a3      	cmp	r3, r4
   8daac:	db02      	blt.n	8dab4 <_svfprintf_r+0xa70>
   8daae:	07fc      	lsls	r4, r7, #31
   8dab0:	f140 8202 	bpl.w	8deb8 <_svfprintf_r+0xe74>
   8dab4:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8dab6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dab8:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8daba:	4423      	add	r3, r4
   8dabc:	9327      	str	r3, [sp, #156]	; 0x9c
   8dabe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dac0:	6035      	str	r5, [r6, #0]
   8dac2:	3301      	adds	r3, #1
   8dac4:	2b07      	cmp	r3, #7
   8dac6:	6074      	str	r4, [r6, #4]
   8dac8:	9326      	str	r3, [sp, #152]	; 0x98
   8daca:	dc01      	bgt.n	8dad0 <_svfprintf_r+0xa8c>
   8dacc:	3608      	adds	r6, #8
   8dace:	e008      	b.n	8dae2 <_svfprintf_r+0xa9e>
   8dad0:	4650      	mov	r0, sl
   8dad2:	4659      	mov	r1, fp
   8dad4:	aa25      	add	r2, sp, #148	; 0x94
   8dad6:	f004 f967 	bl	91da8 <__ssprint_r>
   8dada:	2800      	cmp	r0, #0
   8dadc:	f040 823d 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dae0:	ae32      	add	r6, sp, #200	; 0xc8
   8dae2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8dae4:	1e6c      	subs	r4, r5, #1
   8dae6:	2c00      	cmp	r4, #0
   8dae8:	f340 81e6 	ble.w	8deb8 <_svfprintf_r+0xe74>
   8daec:	4b40      	ldr	r3, [pc, #256]	; (8dbf0 <_svfprintf_r+0xbac>)
   8daee:	2c10      	cmp	r4, #16
   8daf0:	6033      	str	r3, [r6, #0]
   8daf2:	dd16      	ble.n	8db22 <_svfprintf_r+0xade>
   8daf4:	2310      	movs	r3, #16
   8daf6:	6073      	str	r3, [r6, #4]
   8daf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dafa:	3310      	adds	r3, #16
   8dafc:	9327      	str	r3, [sp, #156]	; 0x9c
   8dafe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8db00:	3301      	adds	r3, #1
   8db02:	2b07      	cmp	r3, #7
   8db04:	9326      	str	r3, [sp, #152]	; 0x98
   8db06:	dc01      	bgt.n	8db0c <_svfprintf_r+0xac8>
   8db08:	3608      	adds	r6, #8
   8db0a:	e008      	b.n	8db1e <_svfprintf_r+0xada>
   8db0c:	4650      	mov	r0, sl
   8db0e:	4659      	mov	r1, fp
   8db10:	aa25      	add	r2, sp, #148	; 0x94
   8db12:	f004 f949 	bl	91da8 <__ssprint_r>
   8db16:	2800      	cmp	r0, #0
   8db18:	f040 821f 	bne.w	8df5a <_svfprintf_r+0xf16>
   8db1c:	ae32      	add	r6, sp, #200	; 0xc8
   8db1e:	3c10      	subs	r4, #16
   8db20:	e7e4      	b.n	8daec <_svfprintf_r+0xaa8>
   8db22:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8db24:	6074      	str	r4, [r6, #4]
   8db26:	441c      	add	r4, r3
   8db28:	9427      	str	r4, [sp, #156]	; 0x9c
   8db2a:	e134      	b.n	8dd96 <_svfprintf_r+0xd52>
   8db2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8db2e:	2b00      	cmp	r3, #0
   8db30:	dc73      	bgt.n	8dc1a <_svfprintf_r+0xbd6>
   8db32:	4b30      	ldr	r3, [pc, #192]	; (8dbf4 <_svfprintf_r+0xbb0>)
   8db34:	6033      	str	r3, [r6, #0]
   8db36:	2301      	movs	r3, #1
   8db38:	6073      	str	r3, [r6, #4]
   8db3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8db3c:	3301      	adds	r3, #1
   8db3e:	9327      	str	r3, [sp, #156]	; 0x9c
   8db40:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8db42:	3301      	adds	r3, #1
   8db44:	2b07      	cmp	r3, #7
   8db46:	9326      	str	r3, [sp, #152]	; 0x98
   8db48:	dc01      	bgt.n	8db4e <_svfprintf_r+0xb0a>
   8db4a:	3608      	adds	r6, #8
   8db4c:	e008      	b.n	8db60 <_svfprintf_r+0xb1c>
   8db4e:	4650      	mov	r0, sl
   8db50:	4659      	mov	r1, fp
   8db52:	aa25      	add	r2, sp, #148	; 0x94
   8db54:	f004 f928 	bl	91da8 <__ssprint_r>
   8db58:	2800      	cmp	r0, #0
   8db5a:	f040 81fe 	bne.w	8df5a <_svfprintf_r+0xf16>
   8db5e:	ae32      	add	r6, sp, #200	; 0xc8
   8db60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8db62:	b923      	cbnz	r3, 8db6e <_svfprintf_r+0xb2a>
   8db64:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8db66:	b914      	cbnz	r4, 8db6e <_svfprintf_r+0xb2a>
   8db68:	07f8      	lsls	r0, r7, #31
   8db6a:	f140 81a5 	bpl.w	8deb8 <_svfprintf_r+0xe74>
   8db6e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8db70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8db72:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8db74:	4423      	add	r3, r4
   8db76:	9327      	str	r3, [sp, #156]	; 0x9c
   8db78:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8db7a:	6035      	str	r5, [r6, #0]
   8db7c:	3301      	adds	r3, #1
   8db7e:	2b07      	cmp	r3, #7
   8db80:	6074      	str	r4, [r6, #4]
   8db82:	9326      	str	r3, [sp, #152]	; 0x98
   8db84:	dc01      	bgt.n	8db8a <_svfprintf_r+0xb46>
   8db86:	3608      	adds	r6, #8
   8db88:	e008      	b.n	8db9c <_svfprintf_r+0xb58>
   8db8a:	4650      	mov	r0, sl
   8db8c:	4659      	mov	r1, fp
   8db8e:	aa25      	add	r2, sp, #148	; 0x94
   8db90:	f004 f90a 	bl	91da8 <__ssprint_r>
   8db94:	2800      	cmp	r0, #0
   8db96:	f040 81e0 	bne.w	8df5a <_svfprintf_r+0xf16>
   8db9a:	ae32      	add	r6, sp, #200	; 0xc8
   8db9c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   8db9e:	4264      	negs	r4, r4
   8dba0:	2c00      	cmp	r4, #0
   8dba2:	dd32      	ble.n	8dc0a <_svfprintf_r+0xbc6>
   8dba4:	4b12      	ldr	r3, [pc, #72]	; (8dbf0 <_svfprintf_r+0xbac>)
   8dba6:	2c10      	cmp	r4, #16
   8dba8:	6033      	str	r3, [r6, #0]
   8dbaa:	dd16      	ble.n	8dbda <_svfprintf_r+0xb96>
   8dbac:	2310      	movs	r3, #16
   8dbae:	6073      	str	r3, [r6, #4]
   8dbb0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dbb2:	3310      	adds	r3, #16
   8dbb4:	9327      	str	r3, [sp, #156]	; 0x9c
   8dbb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dbb8:	3301      	adds	r3, #1
   8dbba:	2b07      	cmp	r3, #7
   8dbbc:	9326      	str	r3, [sp, #152]	; 0x98
   8dbbe:	dc01      	bgt.n	8dbc4 <_svfprintf_r+0xb80>
   8dbc0:	3608      	adds	r6, #8
   8dbc2:	e008      	b.n	8dbd6 <_svfprintf_r+0xb92>
   8dbc4:	4650      	mov	r0, sl
   8dbc6:	4659      	mov	r1, fp
   8dbc8:	aa25      	add	r2, sp, #148	; 0x94
   8dbca:	f004 f8ed 	bl	91da8 <__ssprint_r>
   8dbce:	2800      	cmp	r0, #0
   8dbd0:	f040 81c3 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dbd4:	ae32      	add	r6, sp, #200	; 0xc8
   8dbd6:	3c10      	subs	r4, #16
   8dbd8:	e7e4      	b.n	8dba4 <_svfprintf_r+0xb60>
   8dbda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dbdc:	6074      	str	r4, [r6, #4]
   8dbde:	441c      	add	r4, r3
   8dbe0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dbe2:	9427      	str	r4, [sp, #156]	; 0x9c
   8dbe4:	3301      	adds	r3, #1
   8dbe6:	2b07      	cmp	r3, #7
   8dbe8:	9326      	str	r3, [sp, #152]	; 0x98
   8dbea:	dc05      	bgt.n	8dbf8 <_svfprintf_r+0xbb4>
   8dbec:	3608      	adds	r6, #8
   8dbee:	e00c      	b.n	8dc0a <_svfprintf_r+0xbc6>
   8dbf0:	000b11ae 	.word	0x000b11ae
   8dbf4:	000b11f0 	.word	0x000b11f0
   8dbf8:	4650      	mov	r0, sl
   8dbfa:	4659      	mov	r1, fp
   8dbfc:	aa25      	add	r2, sp, #148	; 0x94
   8dbfe:	f004 f8d3 	bl	91da8 <__ssprint_r>
   8dc02:	2800      	cmp	r0, #0
   8dc04:	f040 81a9 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dc08:	ae32      	add	r6, sp, #200	; 0xc8
   8dc0a:	9d07      	ldr	r5, [sp, #28]
   8dc0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8dc0e:	6035      	str	r5, [r6, #0]
   8dc10:	6074      	str	r4, [r6, #4]
   8dc12:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dc14:	4423      	add	r3, r4
   8dc16:	9327      	str	r3, [sp, #156]	; 0x9c
   8dc18:	e0bd      	b.n	8dd96 <_svfprintf_r+0xd52>
   8dc1a:	9809      	ldr	r0, [sp, #36]	; 0x24
   8dc1c:	9d07      	ldr	r5, [sp, #28]
   8dc1e:	4681      	mov	r9, r0
   8dc20:	45a1      	cmp	r9, r4
   8dc22:	bfa8      	it	ge
   8dc24:	46a1      	movge	r9, r4
   8dc26:	f1b9 0f00 	cmp.w	r9, #0
   8dc2a:	4405      	add	r5, r0
   8dc2c:	dd15      	ble.n	8dc5a <_svfprintf_r+0xc16>
   8dc2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dc30:	9907      	ldr	r1, [sp, #28]
   8dc32:	444b      	add	r3, r9
   8dc34:	9327      	str	r3, [sp, #156]	; 0x9c
   8dc36:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dc38:	e886 0202 	stmia.w	r6, {r1, r9}
   8dc3c:	3301      	adds	r3, #1
   8dc3e:	2b07      	cmp	r3, #7
   8dc40:	9326      	str	r3, [sp, #152]	; 0x98
   8dc42:	dc01      	bgt.n	8dc48 <_svfprintf_r+0xc04>
   8dc44:	3608      	adds	r6, #8
   8dc46:	e008      	b.n	8dc5a <_svfprintf_r+0xc16>
   8dc48:	4650      	mov	r0, sl
   8dc4a:	4659      	mov	r1, fp
   8dc4c:	aa25      	add	r2, sp, #148	; 0x94
   8dc4e:	f004 f8ab 	bl	91da8 <__ssprint_r>
   8dc52:	2800      	cmp	r0, #0
   8dc54:	f040 8181 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dc58:	ae32      	add	r6, sp, #200	; 0xc8
   8dc5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   8dc5e:	ebc9 0904 	rsb	r9, r9, r4
   8dc62:	f1b9 0f00 	cmp.w	r9, #0
   8dc66:	dd31      	ble.n	8dccc <_svfprintf_r+0xc88>
   8dc68:	4b9a      	ldr	r3, [pc, #616]	; (8ded4 <_svfprintf_r+0xe90>)
   8dc6a:	f1b9 0f10 	cmp.w	r9, #16
   8dc6e:	6033      	str	r3, [r6, #0]
   8dc70:	dd17      	ble.n	8dca2 <_svfprintf_r+0xc5e>
   8dc72:	2310      	movs	r3, #16
   8dc74:	6073      	str	r3, [r6, #4]
   8dc76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dc78:	3310      	adds	r3, #16
   8dc7a:	9327      	str	r3, [sp, #156]	; 0x9c
   8dc7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dc7e:	3301      	adds	r3, #1
   8dc80:	2b07      	cmp	r3, #7
   8dc82:	9326      	str	r3, [sp, #152]	; 0x98
   8dc84:	dc01      	bgt.n	8dc8a <_svfprintf_r+0xc46>
   8dc86:	3608      	adds	r6, #8
   8dc88:	e008      	b.n	8dc9c <_svfprintf_r+0xc58>
   8dc8a:	4650      	mov	r0, sl
   8dc8c:	4659      	mov	r1, fp
   8dc8e:	aa25      	add	r2, sp, #148	; 0x94
   8dc90:	f004 f88a 	bl	91da8 <__ssprint_r>
   8dc94:	2800      	cmp	r0, #0
   8dc96:	f040 8160 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dc9a:	ae32      	add	r6, sp, #200	; 0xc8
   8dc9c:	f1a9 0910 	sub.w	r9, r9, #16
   8dca0:	e7e2      	b.n	8dc68 <_svfprintf_r+0xc24>
   8dca2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dca4:	f8c6 9004 	str.w	r9, [r6, #4]
   8dca8:	444b      	add	r3, r9
   8dcaa:	9327      	str	r3, [sp, #156]	; 0x9c
   8dcac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dcae:	3301      	adds	r3, #1
   8dcb0:	2b07      	cmp	r3, #7
   8dcb2:	9326      	str	r3, [sp, #152]	; 0x98
   8dcb4:	dc01      	bgt.n	8dcba <_svfprintf_r+0xc76>
   8dcb6:	3608      	adds	r6, #8
   8dcb8:	e008      	b.n	8dccc <_svfprintf_r+0xc88>
   8dcba:	4650      	mov	r0, sl
   8dcbc:	4659      	mov	r1, fp
   8dcbe:	aa25      	add	r2, sp, #148	; 0x94
   8dcc0:	f004 f872 	bl	91da8 <__ssprint_r>
   8dcc4:	2800      	cmp	r0, #0
   8dcc6:	f040 8148 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dcca:	ae32      	add	r6, sp, #200	; 0xc8
   8dccc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8dcce:	9809      	ldr	r0, [sp, #36]	; 0x24
   8dcd0:	9a07      	ldr	r2, [sp, #28]
   8dcd2:	4283      	cmp	r3, r0
   8dcd4:	4414      	add	r4, r2
   8dcd6:	db01      	blt.n	8dcdc <_svfprintf_r+0xc98>
   8dcd8:	07f9      	lsls	r1, r7, #31
   8dcda:	d516      	bpl.n	8dd0a <_svfprintf_r+0xcc6>
   8dcdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8dcde:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dce0:	9918      	ldr	r1, [sp, #96]	; 0x60
   8dce2:	4413      	add	r3, r2
   8dce4:	9327      	str	r3, [sp, #156]	; 0x9c
   8dce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dce8:	6031      	str	r1, [r6, #0]
   8dcea:	3301      	adds	r3, #1
   8dcec:	2b07      	cmp	r3, #7
   8dcee:	6072      	str	r2, [r6, #4]
   8dcf0:	9326      	str	r3, [sp, #152]	; 0x98
   8dcf2:	dc01      	bgt.n	8dcf8 <_svfprintf_r+0xcb4>
   8dcf4:	3608      	adds	r6, #8
   8dcf6:	e008      	b.n	8dd0a <_svfprintf_r+0xcc6>
   8dcf8:	4650      	mov	r0, sl
   8dcfa:	4659      	mov	r1, fp
   8dcfc:	aa25      	add	r2, sp, #148	; 0x94
   8dcfe:	f004 f853 	bl	91da8 <__ssprint_r>
   8dd02:	2800      	cmp	r0, #0
   8dd04:	f040 8129 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dd08:	ae32      	add	r6, sp, #200	; 0xc8
   8dd0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8dd0c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8dd0e:	1b2d      	subs	r5, r5, r4
   8dd10:	1ac3      	subs	r3, r0, r3
   8dd12:	429d      	cmp	r5, r3
   8dd14:	bfa8      	it	ge
   8dd16:	461d      	movge	r5, r3
   8dd18:	2d00      	cmp	r5, #0
   8dd1a:	dd14      	ble.n	8dd46 <_svfprintf_r+0xd02>
   8dd1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dd1e:	e886 0030 	stmia.w	r6, {r4, r5}
   8dd22:	442b      	add	r3, r5
   8dd24:	9327      	str	r3, [sp, #156]	; 0x9c
   8dd26:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dd28:	3301      	adds	r3, #1
   8dd2a:	2b07      	cmp	r3, #7
   8dd2c:	9326      	str	r3, [sp, #152]	; 0x98
   8dd2e:	dc01      	bgt.n	8dd34 <_svfprintf_r+0xcf0>
   8dd30:	3608      	adds	r6, #8
   8dd32:	e008      	b.n	8dd46 <_svfprintf_r+0xd02>
   8dd34:	4650      	mov	r0, sl
   8dd36:	4659      	mov	r1, fp
   8dd38:	aa25      	add	r2, sp, #148	; 0x94
   8dd3a:	f004 f835 	bl	91da8 <__ssprint_r>
   8dd3e:	2800      	cmp	r0, #0
   8dd40:	f040 810b 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dd44:	ae32      	add	r6, sp, #200	; 0xc8
   8dd46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8dd48:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8dd4a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   8dd4e:	1ae3      	subs	r3, r4, r3
   8dd50:	1b5d      	subs	r5, r3, r5
   8dd52:	2d00      	cmp	r5, #0
   8dd54:	f340 80b0 	ble.w	8deb8 <_svfprintf_r+0xe74>
   8dd58:	4b5e      	ldr	r3, [pc, #376]	; (8ded4 <_svfprintf_r+0xe90>)
   8dd5a:	2d10      	cmp	r5, #16
   8dd5c:	6033      	str	r3, [r6, #0]
   8dd5e:	dd16      	ble.n	8dd8e <_svfprintf_r+0xd4a>
   8dd60:	2310      	movs	r3, #16
   8dd62:	6073      	str	r3, [r6, #4]
   8dd64:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dd66:	3310      	adds	r3, #16
   8dd68:	9327      	str	r3, [sp, #156]	; 0x9c
   8dd6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dd6c:	3301      	adds	r3, #1
   8dd6e:	2b07      	cmp	r3, #7
   8dd70:	9326      	str	r3, [sp, #152]	; 0x98
   8dd72:	dc01      	bgt.n	8dd78 <_svfprintf_r+0xd34>
   8dd74:	3608      	adds	r6, #8
   8dd76:	e008      	b.n	8dd8a <_svfprintf_r+0xd46>
   8dd78:	4650      	mov	r0, sl
   8dd7a:	4659      	mov	r1, fp
   8dd7c:	aa25      	add	r2, sp, #148	; 0x94
   8dd7e:	f004 f813 	bl	91da8 <__ssprint_r>
   8dd82:	2800      	cmp	r0, #0
   8dd84:	f040 80e9 	bne.w	8df5a <_svfprintf_r+0xf16>
   8dd88:	ae32      	add	r6, sp, #200	; 0xc8
   8dd8a:	3d10      	subs	r5, #16
   8dd8c:	e7e4      	b.n	8dd58 <_svfprintf_r+0xd14>
   8dd8e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dd90:	6075      	str	r5, [r6, #4]
   8dd92:	441d      	add	r5, r3
   8dd94:	9527      	str	r5, [sp, #156]	; 0x9c
   8dd96:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8dd98:	3301      	adds	r3, #1
   8dd9a:	2b07      	cmp	r3, #7
   8dd9c:	9326      	str	r3, [sp, #152]	; 0x98
   8dd9e:	f340 808a 	ble.w	8deb6 <_svfprintf_r+0xe72>
   8dda2:	4650      	mov	r0, sl
   8dda4:	4659      	mov	r1, fp
   8dda6:	aa25      	add	r2, sp, #148	; 0x94
   8dda8:	f003 fffe 	bl	91da8 <__ssprint_r>
   8ddac:	2800      	cmp	r0, #0
   8ddae:	f040 80d4 	bne.w	8df5a <_svfprintf_r+0xf16>
   8ddb2:	ae32      	add	r6, sp, #200	; 0xc8
   8ddb4:	e080      	b.n	8deb8 <_svfprintf_r+0xe74>
   8ddb6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8ddb8:	2d01      	cmp	r5, #1
   8ddba:	dc01      	bgt.n	8ddc0 <_svfprintf_r+0xd7c>
   8ddbc:	07fa      	lsls	r2, r7, #31
   8ddbe:	d56d      	bpl.n	8de9c <_svfprintf_r+0xe58>
   8ddc0:	2301      	movs	r3, #1
   8ddc2:	6073      	str	r3, [r6, #4]
   8ddc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8ddc6:	9c07      	ldr	r4, [sp, #28]
   8ddc8:	3301      	adds	r3, #1
   8ddca:	9327      	str	r3, [sp, #156]	; 0x9c
   8ddcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8ddce:	6034      	str	r4, [r6, #0]
   8ddd0:	3301      	adds	r3, #1
   8ddd2:	2b07      	cmp	r3, #7
   8ddd4:	9326      	str	r3, [sp, #152]	; 0x98
   8ddd6:	dc01      	bgt.n	8dddc <_svfprintf_r+0xd98>
   8ddd8:	3608      	adds	r6, #8
   8ddda:	e008      	b.n	8ddee <_svfprintf_r+0xdaa>
   8dddc:	4650      	mov	r0, sl
   8ddde:	4659      	mov	r1, fp
   8dde0:	aa25      	add	r2, sp, #148	; 0x94
   8dde2:	f003 ffe1 	bl	91da8 <__ssprint_r>
   8dde6:	2800      	cmp	r0, #0
   8dde8:	f040 80b7 	bne.w	8df5a <_svfprintf_r+0xf16>
   8ddec:	ae32      	add	r6, sp, #200	; 0xc8
   8ddee:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8ddf0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8ddf2:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8ddf4:	4423      	add	r3, r4
   8ddf6:	9327      	str	r3, [sp, #156]	; 0x9c
   8ddf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8ddfa:	6035      	str	r5, [r6, #0]
   8ddfc:	3301      	adds	r3, #1
   8ddfe:	2b07      	cmp	r3, #7
   8de00:	6074      	str	r4, [r6, #4]
   8de02:	9326      	str	r3, [sp, #152]	; 0x98
   8de04:	dc01      	bgt.n	8de0a <_svfprintf_r+0xdc6>
   8de06:	3608      	adds	r6, #8
   8de08:	e008      	b.n	8de1c <_svfprintf_r+0xdd8>
   8de0a:	4650      	mov	r0, sl
   8de0c:	4659      	mov	r1, fp
   8de0e:	aa25      	add	r2, sp, #148	; 0x94
   8de10:	f003 ffca 	bl	91da8 <__ssprint_r>
   8de14:	2800      	cmp	r0, #0
   8de16:	f040 80a0 	bne.w	8df5a <_svfprintf_r+0xf16>
   8de1a:	ae32      	add	r6, sp, #200	; 0xc8
   8de1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8de20:	2200      	movs	r2, #0
   8de22:	2300      	movs	r3, #0
   8de24:	f005 f9d2 	bl	931cc <__aeabi_dcmpeq>
   8de28:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8de2a:	1e6c      	subs	r4, r5, #1
   8de2c:	b940      	cbnz	r0, 8de40 <_svfprintf_r+0xdfc>
   8de2e:	9d07      	ldr	r5, [sp, #28]
   8de30:	1c6b      	adds	r3, r5, #1
   8de32:	e886 0018 	stmia.w	r6, {r3, r4}
   8de36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8de38:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8de3a:	3b01      	subs	r3, #1
   8de3c:	4423      	add	r3, r4
   8de3e:	e033      	b.n	8dea8 <_svfprintf_r+0xe64>
   8de40:	2c00      	cmp	r4, #0
   8de42:	dd34      	ble.n	8deae <_svfprintf_r+0xe6a>
   8de44:	4b23      	ldr	r3, [pc, #140]	; (8ded4 <_svfprintf_r+0xe90>)
   8de46:	2c10      	cmp	r4, #16
   8de48:	6033      	str	r3, [r6, #0]
   8de4a:	dd15      	ble.n	8de78 <_svfprintf_r+0xe34>
   8de4c:	2310      	movs	r3, #16
   8de4e:	6073      	str	r3, [r6, #4]
   8de50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8de52:	3310      	adds	r3, #16
   8de54:	9327      	str	r3, [sp, #156]	; 0x9c
   8de56:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8de58:	3301      	adds	r3, #1
   8de5a:	2b07      	cmp	r3, #7
   8de5c:	9326      	str	r3, [sp, #152]	; 0x98
   8de5e:	dc01      	bgt.n	8de64 <_svfprintf_r+0xe20>
   8de60:	3608      	adds	r6, #8
   8de62:	e007      	b.n	8de74 <_svfprintf_r+0xe30>
   8de64:	4650      	mov	r0, sl
   8de66:	4659      	mov	r1, fp
   8de68:	aa25      	add	r2, sp, #148	; 0x94
   8de6a:	f003 ff9d 	bl	91da8 <__ssprint_r>
   8de6e:	2800      	cmp	r0, #0
   8de70:	d173      	bne.n	8df5a <_svfprintf_r+0xf16>
   8de72:	ae32      	add	r6, sp, #200	; 0xc8
   8de74:	3c10      	subs	r4, #16
   8de76:	e7e5      	b.n	8de44 <_svfprintf_r+0xe00>
   8de78:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8de7a:	6074      	str	r4, [r6, #4]
   8de7c:	441c      	add	r4, r3
   8de7e:	9427      	str	r4, [sp, #156]	; 0x9c
   8de80:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8de82:	3301      	adds	r3, #1
   8de84:	2b07      	cmp	r3, #7
   8de86:	9326      	str	r3, [sp, #152]	; 0x98
   8de88:	dd10      	ble.n	8deac <_svfprintf_r+0xe68>
   8de8a:	4650      	mov	r0, sl
   8de8c:	4659      	mov	r1, fp
   8de8e:	aa25      	add	r2, sp, #148	; 0x94
   8de90:	f003 ff8a 	bl	91da8 <__ssprint_r>
   8de94:	2800      	cmp	r0, #0
   8de96:	d160      	bne.n	8df5a <_svfprintf_r+0xf16>
   8de98:	ae32      	add	r6, sp, #200	; 0xc8
   8de9a:	e008      	b.n	8deae <_svfprintf_r+0xe6a>
   8de9c:	2301      	movs	r3, #1
   8de9e:	9d07      	ldr	r5, [sp, #28]
   8dea0:	6073      	str	r3, [r6, #4]
   8dea2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dea4:	6035      	str	r5, [r6, #0]
   8dea6:	3301      	adds	r3, #1
   8dea8:	9327      	str	r3, [sp, #156]	; 0x9c
   8deaa:	e7e9      	b.n	8de80 <_svfprintf_r+0xe3c>
   8deac:	3608      	adds	r6, #8
   8deae:	ab21      	add	r3, sp, #132	; 0x84
   8deb0:	6033      	str	r3, [r6, #0]
   8deb2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   8deb4:	e6ac      	b.n	8dc10 <_svfprintf_r+0xbcc>
   8deb6:	3608      	adds	r6, #8
   8deb8:	077b      	lsls	r3, r7, #29
   8deba:	d40d      	bmi.n	8ded8 <_svfprintf_r+0xe94>
   8debc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8debe:	980a      	ldr	r0, [sp, #40]	; 0x28
   8dec0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8dec2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8dec4:	42a0      	cmp	r0, r4
   8dec6:	bfac      	ite	ge
   8dec8:	182d      	addge	r5, r5, r0
   8deca:	192d      	addlt	r5, r5, r4
   8decc:	950f      	str	r5, [sp, #60]	; 0x3c
   8dece:	2b00      	cmp	r3, #0
   8ded0:	d037      	beq.n	8df42 <_svfprintf_r+0xefe>
   8ded2:	e030      	b.n	8df36 <_svfprintf_r+0xef2>
   8ded4:	000b11ae 	.word	0x000b11ae
   8ded8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   8deda:	980a      	ldr	r0, [sp, #40]	; 0x28
   8dedc:	1a2c      	subs	r4, r5, r0
   8dede:	2c00      	cmp	r4, #0
   8dee0:	ddec      	ble.n	8debc <_svfprintf_r+0xe78>
   8dee2:	4b23      	ldr	r3, [pc, #140]	; (8df70 <_svfprintf_r+0xf2c>)
   8dee4:	2c10      	cmp	r4, #16
   8dee6:	6033      	str	r3, [r6, #0]
   8dee8:	dd14      	ble.n	8df14 <_svfprintf_r+0xed0>
   8deea:	2310      	movs	r3, #16
   8deec:	6073      	str	r3, [r6, #4]
   8deee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8def0:	3310      	adds	r3, #16
   8def2:	9327      	str	r3, [sp, #156]	; 0x9c
   8def4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8def6:	3301      	adds	r3, #1
   8def8:	2b07      	cmp	r3, #7
   8defa:	9326      	str	r3, [sp, #152]	; 0x98
   8defc:	dc01      	bgt.n	8df02 <_svfprintf_r+0xebe>
   8defe:	3608      	adds	r6, #8
   8df00:	e006      	b.n	8df10 <_svfprintf_r+0xecc>
   8df02:	4650      	mov	r0, sl
   8df04:	4659      	mov	r1, fp
   8df06:	aa25      	add	r2, sp, #148	; 0x94
   8df08:	f003 ff4e 	bl	91da8 <__ssprint_r>
   8df0c:	bb28      	cbnz	r0, 8df5a <_svfprintf_r+0xf16>
   8df0e:	ae32      	add	r6, sp, #200	; 0xc8
   8df10:	3c10      	subs	r4, #16
   8df12:	e7e6      	b.n	8dee2 <_svfprintf_r+0xe9e>
   8df14:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8df16:	6074      	str	r4, [r6, #4]
   8df18:	441c      	add	r4, r3
   8df1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8df1c:	9427      	str	r4, [sp, #156]	; 0x9c
   8df1e:	3301      	adds	r3, #1
   8df20:	2b07      	cmp	r3, #7
   8df22:	9326      	str	r3, [sp, #152]	; 0x98
   8df24:	ddca      	ble.n	8debc <_svfprintf_r+0xe78>
   8df26:	4650      	mov	r0, sl
   8df28:	4659      	mov	r1, fp
   8df2a:	aa25      	add	r2, sp, #148	; 0x94
   8df2c:	f003 ff3c 	bl	91da8 <__ssprint_r>
   8df30:	2800      	cmp	r0, #0
   8df32:	d0c3      	beq.n	8debc <_svfprintf_r+0xe78>
   8df34:	e011      	b.n	8df5a <_svfprintf_r+0xf16>
   8df36:	4650      	mov	r0, sl
   8df38:	4659      	mov	r1, fp
   8df3a:	aa25      	add	r2, sp, #148	; 0x94
   8df3c:	f003 ff34 	bl	91da8 <__ssprint_r>
   8df40:	b958      	cbnz	r0, 8df5a <_svfprintf_r+0xf16>
   8df42:	2300      	movs	r3, #0
   8df44:	9326      	str	r3, [sp, #152]	; 0x98
   8df46:	ae32      	add	r6, sp, #200	; 0xc8
   8df48:	f7ff b8b1 	b.w	8d0ae <_svfprintf_r+0x6a>
   8df4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8df4e:	b123      	cbz	r3, 8df5a <_svfprintf_r+0xf16>
   8df50:	4650      	mov	r0, sl
   8df52:	4659      	mov	r1, fp
   8df54:	aa25      	add	r2, sp, #148	; 0x94
   8df56:	f003 ff27 	bl	91da8 <__ssprint_r>
   8df5a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8df5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8df60:	f013 0f40 	tst.w	r3, #64	; 0x40
   8df64:	bf18      	it	ne
   8df66:	f04f 30ff 	movne.w	r0, #4294967295
   8df6a:	b043      	add	sp, #268	; 0x10c
   8df6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8df70:	000b119e 	.word	0x000b119e

0008df74 <__sprint_r>:
   8df74:	6893      	ldr	r3, [r2, #8]
   8df76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8df7a:	4681      	mov	r9, r0
   8df7c:	460f      	mov	r7, r1
   8df7e:	4614      	mov	r4, r2
   8df80:	b91b      	cbnz	r3, 8df8a <__sprint_r+0x16>
   8df82:	6053      	str	r3, [r2, #4]
   8df84:	4618      	mov	r0, r3
   8df86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8df8a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8df8c:	049d      	lsls	r5, r3, #18
   8df8e:	d51d      	bpl.n	8dfcc <__sprint_r+0x58>
   8df90:	6815      	ldr	r5, [r2, #0]
   8df92:	68a3      	ldr	r3, [r4, #8]
   8df94:	3508      	adds	r5, #8
   8df96:	b1bb      	cbz	r3, 8dfc8 <__sprint_r+0x54>
   8df98:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8df9c:	f855 ac08 	ldr.w	sl, [r5, #-8]
   8dfa0:	ea4f 0893 	mov.w	r8, r3, lsr #2
   8dfa4:	2600      	movs	r6, #0
   8dfa6:	4546      	cmp	r6, r8
   8dfa8:	da09      	bge.n	8dfbe <__sprint_r+0x4a>
   8dfaa:	4648      	mov	r0, r9
   8dfac:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   8dfb0:	463a      	mov	r2, r7
   8dfb2:	f002 fd2b 	bl	90a0c <_fputwc_r>
   8dfb6:	1c43      	adds	r3, r0, #1
   8dfb8:	d00a      	beq.n	8dfd0 <__sprint_r+0x5c>
   8dfba:	3601      	adds	r6, #1
   8dfbc:	e7f3      	b.n	8dfa6 <__sprint_r+0x32>
   8dfbe:	68a3      	ldr	r3, [r4, #8]
   8dfc0:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
   8dfc4:	60a3      	str	r3, [r4, #8]
   8dfc6:	e7e4      	b.n	8df92 <__sprint_r+0x1e>
   8dfc8:	4618      	mov	r0, r3
   8dfca:	e001      	b.n	8dfd0 <__sprint_r+0x5c>
   8dfcc:	f002 fe90 	bl	90cf0 <__sfvwrite_r>
   8dfd0:	2300      	movs	r3, #0
   8dfd2:	60a3      	str	r3, [r4, #8]
   8dfd4:	6063      	str	r3, [r4, #4]
   8dfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008dfda <_vfiprintf_r>:
   8dfda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8dfde:	b0ad      	sub	sp, #180	; 0xb4
   8dfe0:	4688      	mov	r8, r1
   8dfe2:	9202      	str	r2, [sp, #8]
   8dfe4:	461c      	mov	r4, r3
   8dfe6:	461e      	mov	r6, r3
   8dfe8:	4683      	mov	fp, r0
   8dfea:	b118      	cbz	r0, 8dff4 <_vfiprintf_r+0x1a>
   8dfec:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8dfee:	b90b      	cbnz	r3, 8dff4 <_vfiprintf_r+0x1a>
   8dff0:	f002 fc42 	bl	90878 <__sinit>
   8dff4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8dff8:	0498      	lsls	r0, r3, #18
   8dffa:	d409      	bmi.n	8e010 <_vfiprintf_r+0x36>
   8dffc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8e000:	f8a8 300c 	strh.w	r3, [r8, #12]
   8e004:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
   8e008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8e00c:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
   8e010:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8e014:	0719      	lsls	r1, r3, #28
   8e016:	d509      	bpl.n	8e02c <_vfiprintf_r+0x52>
   8e018:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8e01c:	b133      	cbz	r3, 8e02c <_vfiprintf_r+0x52>
   8e01e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8e022:	f003 031a 	and.w	r3, r3, #26
   8e026:	2b0a      	cmp	r3, #10
   8e028:	d114      	bne.n	8e054 <_vfiprintf_r+0x7a>
   8e02a:	e008      	b.n	8e03e <_vfiprintf_r+0x64>
   8e02c:	4658      	mov	r0, fp
   8e02e:	4641      	mov	r1, r8
   8e030:	f001 fc5c 	bl	8f8ec <__swsetup_r>
   8e034:	2800      	cmp	r0, #0
   8e036:	d0f2      	beq.n	8e01e <_vfiprintf_r+0x44>
   8e038:	f04f 30ff 	mov.w	r0, #4294967295
   8e03c:	e3d9      	b.n	8e7f2 <_vfiprintf_r+0x818>
   8e03e:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   8e042:	2b00      	cmp	r3, #0
   8e044:	db06      	blt.n	8e054 <_vfiprintf_r+0x7a>
   8e046:	4658      	mov	r0, fp
   8e048:	4641      	mov	r1, r8
   8e04a:	9a02      	ldr	r2, [sp, #8]
   8e04c:	4623      	mov	r3, r4
   8e04e:	f000 fbe1 	bl	8e814 <__sbprintf>
   8e052:	e3ce      	b.n	8e7f2 <_vfiprintf_r+0x818>
   8e054:	2300      	movs	r3, #0
   8e056:	aa1c      	add	r2, sp, #112	; 0x70
   8e058:	920f      	str	r2, [sp, #60]	; 0x3c
   8e05a:	9311      	str	r3, [sp, #68]	; 0x44
   8e05c:	9310      	str	r3, [sp, #64]	; 0x40
   8e05e:	4694      	mov	ip, r2
   8e060:	930a      	str	r3, [sp, #40]	; 0x28
   8e062:	9305      	str	r3, [sp, #20]
   8e064:	9b02      	ldr	r3, [sp, #8]
   8e066:	461c      	mov	r4, r3
   8e068:	f813 2b01 	ldrb.w	r2, [r3], #1
   8e06c:	b91a      	cbnz	r2, 8e076 <_vfiprintf_r+0x9c>
   8e06e:	9802      	ldr	r0, [sp, #8]
   8e070:	1a25      	subs	r5, r4, r0
   8e072:	d103      	bne.n	8e07c <_vfiprintf_r+0xa2>
   8e074:	e01d      	b.n	8e0b2 <_vfiprintf_r+0xd8>
   8e076:	2a25      	cmp	r2, #37	; 0x25
   8e078:	d1f5      	bne.n	8e066 <_vfiprintf_r+0x8c>
   8e07a:	e7f8      	b.n	8e06e <_vfiprintf_r+0x94>
   8e07c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e07e:	9902      	ldr	r1, [sp, #8]
   8e080:	442b      	add	r3, r5
   8e082:	9311      	str	r3, [sp, #68]	; 0x44
   8e084:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e086:	e88c 0022 	stmia.w	ip, {r1, r5}
   8e08a:	3301      	adds	r3, #1
   8e08c:	2b07      	cmp	r3, #7
   8e08e:	9310      	str	r3, [sp, #64]	; 0x40
   8e090:	dc02      	bgt.n	8e098 <_vfiprintf_r+0xbe>
   8e092:	f10c 0c08 	add.w	ip, ip, #8
   8e096:	e009      	b.n	8e0ac <_vfiprintf_r+0xd2>
   8e098:	4658      	mov	r0, fp
   8e09a:	4641      	mov	r1, r8
   8e09c:	aa0f      	add	r2, sp, #60	; 0x3c
   8e09e:	f7ff ff69 	bl	8df74 <__sprint_r>
   8e0a2:	2800      	cmp	r0, #0
   8e0a4:	f040 839f 	bne.w	8e7e6 <_vfiprintf_r+0x80c>
   8e0a8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e0ac:	9a05      	ldr	r2, [sp, #20]
   8e0ae:	442a      	add	r2, r5
   8e0b0:	9205      	str	r2, [sp, #20]
   8e0b2:	7823      	ldrb	r3, [r4, #0]
   8e0b4:	2b00      	cmp	r3, #0
   8e0b6:	f000 838f 	beq.w	8e7d8 <_vfiprintf_r+0x7fe>
   8e0ba:	2200      	movs	r2, #0
   8e0bc:	3401      	adds	r4, #1
   8e0be:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8e0c2:	f04f 3aff 	mov.w	sl, #4294967295
   8e0c6:	9204      	str	r2, [sp, #16]
   8e0c8:	4617      	mov	r7, r2
   8e0ca:	1c65      	adds	r5, r4, #1
   8e0cc:	7823      	ldrb	r3, [r4, #0]
   8e0ce:	9502      	str	r5, [sp, #8]
   8e0d0:	2b58      	cmp	r3, #88	; 0x58
   8e0d2:	d064      	beq.n	8e19e <_vfiprintf_r+0x1c4>
   8e0d4:	dc2d      	bgt.n	8e132 <_vfiprintf_r+0x158>
   8e0d6:	2b2e      	cmp	r3, #46	; 0x2e
   8e0d8:	d076      	beq.n	8e1c8 <_vfiprintf_r+0x1ee>
   8e0da:	dc12      	bgt.n	8e102 <_vfiprintf_r+0x128>
   8e0dc:	2b2a      	cmp	r3, #42	; 0x2a
   8e0de:	d066      	beq.n	8e1ae <_vfiprintf_r+0x1d4>
   8e0e0:	dc08      	bgt.n	8e0f4 <_vfiprintf_r+0x11a>
   8e0e2:	2b20      	cmp	r3, #32
   8e0e4:	d05f      	beq.n	8e1a6 <_vfiprintf_r+0x1cc>
   8e0e6:	2b23      	cmp	r3, #35	; 0x23
   8e0e8:	f040 8200 	bne.w	8e4ec <_vfiprintf_r+0x512>
   8e0ec:	f047 0701 	orr.w	r7, r7, #1
   8e0f0:	9c02      	ldr	r4, [sp, #8]
   8e0f2:	e7ea      	b.n	8e0ca <_vfiprintf_r+0xf0>
   8e0f4:	2b2b      	cmp	r3, #43	; 0x2b
   8e0f6:	d101      	bne.n	8e0fc <_vfiprintf_r+0x122>
   8e0f8:	461a      	mov	r2, r3
   8e0fa:	e7f9      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e0fc:	2b2d      	cmp	r3, #45	; 0x2d
   8e0fe:	d060      	beq.n	8e1c2 <_vfiprintf_r+0x1e8>
   8e100:	e1f4      	b.n	8e4ec <_vfiprintf_r+0x512>
   8e102:	2b39      	cmp	r3, #57	; 0x39
   8e104:	dc07      	bgt.n	8e116 <_vfiprintf_r+0x13c>
   8e106:	2b31      	cmp	r3, #49	; 0x31
   8e108:	da7f      	bge.n	8e20a <_vfiprintf_r+0x230>
   8e10a:	2b30      	cmp	r3, #48	; 0x30
   8e10c:	f040 81ee 	bne.w	8e4ec <_vfiprintf_r+0x512>
   8e110:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8e114:	e7ec      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e116:	2b4f      	cmp	r3, #79	; 0x4f
   8e118:	f000 80e0 	beq.w	8e2dc <_vfiprintf_r+0x302>
   8e11c:	2b55      	cmp	r3, #85	; 0x55
   8e11e:	f000 8120 	beq.w	8e362 <_vfiprintf_r+0x388>
   8e122:	2b44      	cmp	r3, #68	; 0x44
   8e124:	f040 81e2 	bne.w	8e4ec <_vfiprintf_r+0x512>
   8e128:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8e12c:	f047 0710 	orr.w	r7, r7, #16
   8e130:	e094      	b.n	8e25c <_vfiprintf_r+0x282>
   8e132:	2b6e      	cmp	r3, #110	; 0x6e
   8e134:	f000 80b6 	beq.w	8e2a4 <_vfiprintf_r+0x2ca>
   8e138:	dc0d      	bgt.n	8e156 <_vfiprintf_r+0x17c>
   8e13a:	2b68      	cmp	r3, #104	; 0x68
   8e13c:	d076      	beq.n	8e22c <_vfiprintf_r+0x252>
   8e13e:	dc05      	bgt.n	8e14c <_vfiprintf_r+0x172>
   8e140:	2b63      	cmp	r3, #99	; 0x63
   8e142:	f000 8083 	beq.w	8e24c <_vfiprintf_r+0x272>
   8e146:	2b64      	cmp	r3, #100	; 0x64
   8e148:	d026      	beq.n	8e198 <_vfiprintf_r+0x1be>
   8e14a:	e1cf      	b.n	8e4ec <_vfiprintf_r+0x512>
   8e14c:	2b69      	cmp	r3, #105	; 0x69
   8e14e:	d023      	beq.n	8e198 <_vfiprintf_r+0x1be>
   8e150:	2b6c      	cmp	r3, #108	; 0x6c
   8e152:	d06e      	beq.n	8e232 <_vfiprintf_r+0x258>
   8e154:	e1ca      	b.n	8e4ec <_vfiprintf_r+0x512>
   8e156:	2b71      	cmp	r3, #113	; 0x71
   8e158:	d075      	beq.n	8e246 <_vfiprintf_r+0x26c>
   8e15a:	dc13      	bgt.n	8e184 <_vfiprintf_r+0x1aa>
   8e15c:	2b6f      	cmp	r3, #111	; 0x6f
   8e15e:	f000 80bf 	beq.w	8e2e0 <_vfiprintf_r+0x306>
   8e162:	2b70      	cmp	r3, #112	; 0x70
   8e164:	f040 81c2 	bne.w	8e4ec <_vfiprintf_r+0x512>
   8e168:	2330      	movs	r3, #48	; 0x30
   8e16a:	48a0      	ldr	r0, [pc, #640]	; (8e3ec <_vfiprintf_r+0x412>)
   8e16c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8e170:	2378      	movs	r3, #120	; 0x78
   8e172:	6834      	ldr	r4, [r6, #0]
   8e174:	2500      	movs	r5, #0
   8e176:	f047 0702 	orr.w	r7, r7, #2
   8e17a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   8e17e:	3604      	adds	r6, #4
   8e180:	900a      	str	r0, [sp, #40]	; 0x28
   8e182:	e12e      	b.n	8e3e2 <_vfiprintf_r+0x408>
   8e184:	2b75      	cmp	r3, #117	; 0x75
   8e186:	f000 80ee 	beq.w	8e366 <_vfiprintf_r+0x38c>
   8e18a:	2b78      	cmp	r3, #120	; 0x78
   8e18c:	f000 8103 	beq.w	8e396 <_vfiprintf_r+0x3bc>
   8e190:	2b73      	cmp	r3, #115	; 0x73
   8e192:	f040 81ab 	bne.w	8e4ec <_vfiprintf_r+0x512>
   8e196:	e0bf      	b.n	8e318 <_vfiprintf_r+0x33e>
   8e198:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8e19c:	e05e      	b.n	8e25c <_vfiprintf_r+0x282>
   8e19e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8e1a2:	4c93      	ldr	r4, [pc, #588]	; (8e3f0 <_vfiprintf_r+0x416>)
   8e1a4:	e0fa      	b.n	8e39c <_vfiprintf_r+0x3c2>
   8e1a6:	2a00      	cmp	r2, #0
   8e1a8:	bf08      	it	eq
   8e1aa:	2220      	moveq	r2, #32
   8e1ac:	e7a0      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e1ae:	1d33      	adds	r3, r6, #4
   8e1b0:	6836      	ldr	r6, [r6, #0]
   8e1b2:	2e00      	cmp	r6, #0
   8e1b4:	9604      	str	r6, [sp, #16]
   8e1b6:	db01      	blt.n	8e1bc <_vfiprintf_r+0x1e2>
   8e1b8:	461e      	mov	r6, r3
   8e1ba:	e799      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e1bc:	4275      	negs	r5, r6
   8e1be:	9504      	str	r5, [sp, #16]
   8e1c0:	461e      	mov	r6, r3
   8e1c2:	f047 0704 	orr.w	r7, r7, #4
   8e1c6:	e793      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e1c8:	9c02      	ldr	r4, [sp, #8]
   8e1ca:	7823      	ldrb	r3, [r4, #0]
   8e1cc:	1c61      	adds	r1, r4, #1
   8e1ce:	2b2a      	cmp	r3, #42	; 0x2a
   8e1d0:	d002      	beq.n	8e1d8 <_vfiprintf_r+0x1fe>
   8e1d2:	f04f 0a00 	mov.w	sl, #0
   8e1d6:	e00a      	b.n	8e1ee <_vfiprintf_r+0x214>
   8e1d8:	f8d6 a000 	ldr.w	sl, [r6]
   8e1dc:	1d33      	adds	r3, r6, #4
   8e1de:	f1ba 0f00 	cmp.w	sl, #0
   8e1e2:	461e      	mov	r6, r3
   8e1e4:	9102      	str	r1, [sp, #8]
   8e1e6:	da83      	bge.n	8e0f0 <_vfiprintf_r+0x116>
   8e1e8:	f04f 3aff 	mov.w	sl, #4294967295
   8e1ec:	e780      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e1ee:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8e1f2:	2809      	cmp	r0, #9
   8e1f4:	d805      	bhi.n	8e202 <_vfiprintf_r+0x228>
   8e1f6:	230a      	movs	r3, #10
   8e1f8:	fb03 0a0a 	mla	sl, r3, sl, r0
   8e1fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   8e200:	e7f5      	b.n	8e1ee <_vfiprintf_r+0x214>
   8e202:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
   8e206:	9102      	str	r1, [sp, #8]
   8e208:	e762      	b.n	8e0d0 <_vfiprintf_r+0xf6>
   8e20a:	2500      	movs	r5, #0
   8e20c:	9504      	str	r5, [sp, #16]
   8e20e:	9c04      	ldr	r4, [sp, #16]
   8e210:	3b30      	subs	r3, #48	; 0x30
   8e212:	210a      	movs	r1, #10
   8e214:	fb01 3404 	mla	r4, r1, r4, r3
   8e218:	9902      	ldr	r1, [sp, #8]
   8e21a:	9404      	str	r4, [sp, #16]
   8e21c:	f811 3b01 	ldrb.w	r3, [r1], #1
   8e220:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8e224:	2809      	cmp	r0, #9
   8e226:	d8ee      	bhi.n	8e206 <_vfiprintf_r+0x22c>
   8e228:	9102      	str	r1, [sp, #8]
   8e22a:	e7f0      	b.n	8e20e <_vfiprintf_r+0x234>
   8e22c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8e230:	e75e      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e232:	9d02      	ldr	r5, [sp, #8]
   8e234:	782b      	ldrb	r3, [r5, #0]
   8e236:	2b6c      	cmp	r3, #108	; 0x6c
   8e238:	d102      	bne.n	8e240 <_vfiprintf_r+0x266>
   8e23a:	3501      	adds	r5, #1
   8e23c:	9502      	str	r5, [sp, #8]
   8e23e:	e002      	b.n	8e246 <_vfiprintf_r+0x26c>
   8e240:	f047 0710 	orr.w	r7, r7, #16
   8e244:	e754      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e246:	f047 0720 	orr.w	r7, r7, #32
   8e24a:	e751      	b.n	8e0f0 <_vfiprintf_r+0x116>
   8e24c:	6833      	ldr	r3, [r6, #0]
   8e24e:	2500      	movs	r5, #0
   8e250:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   8e254:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8e258:	3604      	adds	r6, #4
   8e25a:	e151      	b.n	8e500 <_vfiprintf_r+0x526>
   8e25c:	06ba      	lsls	r2, r7, #26
   8e25e:	d507      	bpl.n	8e270 <_vfiprintf_r+0x296>
   8e260:	3607      	adds	r6, #7
   8e262:	f026 0307 	bic.w	r3, r6, #7
   8e266:	f103 0608 	add.w	r6, r3, #8
   8e26a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8e26e:	e00d      	b.n	8e28c <_vfiprintf_r+0x2b2>
   8e270:	f017 0f10 	tst.w	r7, #16
   8e274:	f106 0304 	add.w	r3, r6, #4
   8e278:	d001      	beq.n	8e27e <_vfiprintf_r+0x2a4>
   8e27a:	6834      	ldr	r4, [r6, #0]
   8e27c:	e004      	b.n	8e288 <_vfiprintf_r+0x2ae>
   8e27e:	6834      	ldr	r4, [r6, #0]
   8e280:	f017 0f40 	tst.w	r7, #64	; 0x40
   8e284:	bf18      	it	ne
   8e286:	b224      	sxthne	r4, r4
   8e288:	17e5      	asrs	r5, r4, #31
   8e28a:	461e      	mov	r6, r3
   8e28c:	2c00      	cmp	r4, #0
   8e28e:	f175 0000 	sbcs.w	r0, r5, #0
   8e292:	f280 80af 	bge.w	8e3f4 <_vfiprintf_r+0x41a>
   8e296:	232d      	movs	r3, #45	; 0x2d
   8e298:	4264      	negs	r4, r4
   8e29a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8e29e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8e2a2:	e0a7      	b.n	8e3f4 <_vfiprintf_r+0x41a>
   8e2a4:	f017 0f20 	tst.w	r7, #32
   8e2a8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8e2ac:	f106 0104 	add.w	r1, r6, #4
   8e2b0:	d007      	beq.n	8e2c2 <_vfiprintf_r+0x2e8>
   8e2b2:	9c05      	ldr	r4, [sp, #20]
   8e2b4:	6830      	ldr	r0, [r6, #0]
   8e2b6:	17e5      	asrs	r5, r4, #31
   8e2b8:	4622      	mov	r2, r4
   8e2ba:	462b      	mov	r3, r5
   8e2bc:	e9c0 2300 	strd	r2, r3, [r0]
   8e2c0:	e00a      	b.n	8e2d8 <_vfiprintf_r+0x2fe>
   8e2c2:	06fb      	lsls	r3, r7, #27
   8e2c4:	d405      	bmi.n	8e2d2 <_vfiprintf_r+0x2f8>
   8e2c6:	067f      	lsls	r7, r7, #25
   8e2c8:	d503      	bpl.n	8e2d2 <_vfiprintf_r+0x2f8>
   8e2ca:	6833      	ldr	r3, [r6, #0]
   8e2cc:	9c05      	ldr	r4, [sp, #20]
   8e2ce:	801c      	strh	r4, [r3, #0]
   8e2d0:	e002      	b.n	8e2d8 <_vfiprintf_r+0x2fe>
   8e2d2:	6833      	ldr	r3, [r6, #0]
   8e2d4:	9d05      	ldr	r5, [sp, #20]
   8e2d6:	601d      	str	r5, [r3, #0]
   8e2d8:	460e      	mov	r6, r1
   8e2da:	e6c3      	b.n	8e064 <_vfiprintf_r+0x8a>
   8e2dc:	f047 0710 	orr.w	r7, r7, #16
   8e2e0:	f017 0320 	ands.w	r3, r7, #32
   8e2e4:	d008      	beq.n	8e2f8 <_vfiprintf_r+0x31e>
   8e2e6:	3607      	adds	r6, #7
   8e2e8:	f026 0307 	bic.w	r3, r6, #7
   8e2ec:	f103 0608 	add.w	r6, r3, #8
   8e2f0:	e9d3 4500 	ldrd	r4, r5, [r3]
   8e2f4:	2300      	movs	r3, #0
   8e2f6:	e075      	b.n	8e3e4 <_vfiprintf_r+0x40a>
   8e2f8:	f017 0110 	ands.w	r1, r7, #16
   8e2fc:	f106 0204 	add.w	r2, r6, #4
   8e300:	d106      	bne.n	8e310 <_vfiprintf_r+0x336>
   8e302:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   8e306:	d003      	beq.n	8e310 <_vfiprintf_r+0x336>
   8e308:	8834      	ldrh	r4, [r6, #0]
   8e30a:	2500      	movs	r5, #0
   8e30c:	4616      	mov	r6, r2
   8e30e:	e7f1      	b.n	8e2f4 <_vfiprintf_r+0x31a>
   8e310:	6834      	ldr	r4, [r6, #0]
   8e312:	2500      	movs	r5, #0
   8e314:	4616      	mov	r6, r2
   8e316:	e065      	b.n	8e3e4 <_vfiprintf_r+0x40a>
   8e318:	f8d6 9000 	ldr.w	r9, [r6]
   8e31c:	2300      	movs	r3, #0
   8e31e:	459a      	cmp	sl, r3
   8e320:	f106 0604 	add.w	r6, r6, #4
   8e324:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8e328:	4648      	mov	r0, r9
   8e32a:	db11      	blt.n	8e350 <_vfiprintf_r+0x376>
   8e32c:	4619      	mov	r1, r3
   8e32e:	4652      	mov	r2, sl
   8e330:	f8cd c004 	str.w	ip, [sp, #4]
   8e334:	f002 ff08 	bl	91148 <memchr>
   8e338:	f8dd c004 	ldr.w	ip, [sp, #4]
   8e33c:	2800      	cmp	r0, #0
   8e33e:	f000 80e4 	beq.w	8e50a <_vfiprintf_r+0x530>
   8e342:	ebc9 0000 	rsb	r0, r9, r0
   8e346:	4550      	cmp	r0, sl
   8e348:	bfb8      	it	lt
   8e34a:	4682      	movlt	sl, r0
   8e34c:	2500      	movs	r5, #0
   8e34e:	e0dd      	b.n	8e50c <_vfiprintf_r+0x532>
   8e350:	f8cd c004 	str.w	ip, [sp, #4]
   8e354:	f7fe fdb5 	bl	8cec2 <strlen>
   8e358:	2500      	movs	r5, #0
   8e35a:	4682      	mov	sl, r0
   8e35c:	f8dd c004 	ldr.w	ip, [sp, #4]
   8e360:	e0d4      	b.n	8e50c <_vfiprintf_r+0x532>
   8e362:	f047 0710 	orr.w	r7, r7, #16
   8e366:	06bd      	lsls	r5, r7, #26
   8e368:	d507      	bpl.n	8e37a <_vfiprintf_r+0x3a0>
   8e36a:	3607      	adds	r6, #7
   8e36c:	f026 0307 	bic.w	r3, r6, #7
   8e370:	f103 0608 	add.w	r6, r3, #8
   8e374:	e9d3 4500 	ldrd	r4, r5, [r3]
   8e378:	e00b      	b.n	8e392 <_vfiprintf_r+0x3b8>
   8e37a:	f017 0f10 	tst.w	r7, #16
   8e37e:	f106 0304 	add.w	r3, r6, #4
   8e382:	d103      	bne.n	8e38c <_vfiprintf_r+0x3b2>
   8e384:	067c      	lsls	r4, r7, #25
   8e386:	d501      	bpl.n	8e38c <_vfiprintf_r+0x3b2>
   8e388:	8834      	ldrh	r4, [r6, #0]
   8e38a:	e000      	b.n	8e38e <_vfiprintf_r+0x3b4>
   8e38c:	6834      	ldr	r4, [r6, #0]
   8e38e:	2500      	movs	r5, #0
   8e390:	461e      	mov	r6, r3
   8e392:	2301      	movs	r3, #1
   8e394:	e026      	b.n	8e3e4 <_vfiprintf_r+0x40a>
   8e396:	4c15      	ldr	r4, [pc, #84]	; (8e3ec <_vfiprintf_r+0x412>)
   8e398:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8e39c:	06b8      	lsls	r0, r7, #26
   8e39e:	940a      	str	r4, [sp, #40]	; 0x28
   8e3a0:	d507      	bpl.n	8e3b2 <_vfiprintf_r+0x3d8>
   8e3a2:	3607      	adds	r6, #7
   8e3a4:	f026 0207 	bic.w	r2, r6, #7
   8e3a8:	f102 0608 	add.w	r6, r2, #8
   8e3ac:	e9d2 4500 	ldrd	r4, r5, [r2]
   8e3b0:	e00b      	b.n	8e3ca <_vfiprintf_r+0x3f0>
   8e3b2:	f017 0f10 	tst.w	r7, #16
   8e3b6:	f106 0204 	add.w	r2, r6, #4
   8e3ba:	d103      	bne.n	8e3c4 <_vfiprintf_r+0x3ea>
   8e3bc:	0679      	lsls	r1, r7, #25
   8e3be:	d501      	bpl.n	8e3c4 <_vfiprintf_r+0x3ea>
   8e3c0:	8834      	ldrh	r4, [r6, #0]
   8e3c2:	e000      	b.n	8e3c6 <_vfiprintf_r+0x3ec>
   8e3c4:	6834      	ldr	r4, [r6, #0]
   8e3c6:	2500      	movs	r5, #0
   8e3c8:	4616      	mov	r6, r2
   8e3ca:	07fa      	lsls	r2, r7, #31
   8e3cc:	d509      	bpl.n	8e3e2 <_vfiprintf_r+0x408>
   8e3ce:	ea54 0005 	orrs.w	r0, r4, r5
   8e3d2:	d006      	beq.n	8e3e2 <_vfiprintf_r+0x408>
   8e3d4:	2230      	movs	r2, #48	; 0x30
   8e3d6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8e3da:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   8e3de:	f047 0702 	orr.w	r7, r7, #2
   8e3e2:	2302      	movs	r3, #2
   8e3e4:	2200      	movs	r2, #0
   8e3e6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8e3ea:	e004      	b.n	8e3f6 <_vfiprintf_r+0x41c>
   8e3ec:	000b11df 	.word	0x000b11df
   8e3f0:	000b11ce 	.word	0x000b11ce
   8e3f4:	2301      	movs	r3, #1
   8e3f6:	f1ba 0f00 	cmp.w	sl, #0
   8e3fa:	bfa8      	it	ge
   8e3fc:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8e400:	ea54 0105 	orrs.w	r1, r4, r5
   8e404:	d102      	bne.n	8e40c <_vfiprintf_r+0x432>
   8e406:	f1ba 0f00 	cmp.w	sl, #0
   8e40a:	d05e      	beq.n	8e4ca <_vfiprintf_r+0x4f0>
   8e40c:	2b01      	cmp	r3, #1
   8e40e:	d01f      	beq.n	8e450 <_vfiprintf_r+0x476>
   8e410:	2b02      	cmp	r3, #2
   8e412:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
   8e416:	d045      	beq.n	8e4a4 <_vfiprintf_r+0x4ca>
   8e418:	08e0      	lsrs	r0, r4, #3
   8e41a:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
   8e41e:	08e8      	lsrs	r0, r5, #3
   8e420:	f004 0207 	and.w	r2, r4, #7
   8e424:	9106      	str	r1, [sp, #24]
   8e426:	9007      	str	r0, [sp, #28]
   8e428:	3230      	adds	r2, #48	; 0x30
   8e42a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   8e42e:	ea54 0105 	orrs.w	r1, r4, r5
   8e432:	4699      	mov	r9, r3
   8e434:	701a      	strb	r2, [r3, #0]
   8e436:	f103 33ff 	add.w	r3, r3, #4294967295
   8e43a:	d1ed      	bne.n	8e418 <_vfiprintf_r+0x43e>
   8e43c:	07f8      	lsls	r0, r7, #31
   8e43e:	4649      	mov	r1, r9
   8e440:	d54e      	bpl.n	8e4e0 <_vfiprintf_r+0x506>
   8e442:	2a30      	cmp	r2, #48	; 0x30
   8e444:	d04c      	beq.n	8e4e0 <_vfiprintf_r+0x506>
   8e446:	4699      	mov	r9, r3
   8e448:	2330      	movs	r3, #48	; 0x30
   8e44a:	f801 3c01 	strb.w	r3, [r1, #-1]
   8e44e:	e047      	b.n	8e4e0 <_vfiprintf_r+0x506>
   8e450:	2d00      	cmp	r5, #0
   8e452:	bf08      	it	eq
   8e454:	2c0a      	cmpeq	r4, #10
   8e456:	d205      	bcs.n	8e464 <_vfiprintf_r+0x48a>
   8e458:	3430      	adds	r4, #48	; 0x30
   8e45a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   8e45e:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
   8e462:	e03d      	b.n	8e4e0 <_vfiprintf_r+0x506>
   8e464:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   8e468:	9203      	str	r2, [sp, #12]
   8e46a:	4620      	mov	r0, r4
   8e46c:	4629      	mov	r1, r5
   8e46e:	220a      	movs	r2, #10
   8e470:	2300      	movs	r3, #0
   8e472:	f8cd c004 	str.w	ip, [sp, #4]
   8e476:	f004 ff03 	bl	93280 <__aeabi_uldivmod>
   8e47a:	9b03      	ldr	r3, [sp, #12]
   8e47c:	3230      	adds	r2, #48	; 0x30
   8e47e:	f803 2901 	strb.w	r2, [r3], #-1
   8e482:	4620      	mov	r0, r4
   8e484:	4629      	mov	r1, r5
   8e486:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8e48a:	220a      	movs	r2, #10
   8e48c:	9303      	str	r3, [sp, #12]
   8e48e:	2300      	movs	r3, #0
   8e490:	f004 fef6 	bl	93280 <__aeabi_uldivmod>
   8e494:	4604      	mov	r4, r0
   8e496:	460d      	mov	r5, r1
   8e498:	ea54 0005 	orrs.w	r0, r4, r5
   8e49c:	f8dd c004 	ldr.w	ip, [sp, #4]
   8e4a0:	d1e3      	bne.n	8e46a <_vfiprintf_r+0x490>
   8e4a2:	e01d      	b.n	8e4e0 <_vfiprintf_r+0x506>
   8e4a4:	990a      	ldr	r1, [sp, #40]	; 0x28
   8e4a6:	f004 020f 	and.w	r2, r4, #15
   8e4aa:	5c8a      	ldrb	r2, [r1, r2]
   8e4ac:	4699      	mov	r9, r3
   8e4ae:	f803 2901 	strb.w	r2, [r3], #-1
   8e4b2:	0922      	lsrs	r2, r4, #4
   8e4b4:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   8e4b8:	0929      	lsrs	r1, r5, #4
   8e4ba:	9008      	str	r0, [sp, #32]
   8e4bc:	9109      	str	r1, [sp, #36]	; 0x24
   8e4be:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   8e4c2:	ea54 0205 	orrs.w	r2, r4, r5
   8e4c6:	d1ed      	bne.n	8e4a4 <_vfiprintf_r+0x4ca>
   8e4c8:	e00a      	b.n	8e4e0 <_vfiprintf_r+0x506>
   8e4ca:	b93b      	cbnz	r3, 8e4dc <_vfiprintf_r+0x502>
   8e4cc:	07f9      	lsls	r1, r7, #31
   8e4ce:	d505      	bpl.n	8e4dc <_vfiprintf_r+0x502>
   8e4d0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   8e4d4:	2330      	movs	r3, #48	; 0x30
   8e4d6:	f809 3d41 	strb.w	r3, [r9, #-65]!
   8e4da:	e001      	b.n	8e4e0 <_vfiprintf_r+0x506>
   8e4dc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   8e4e0:	4655      	mov	r5, sl
   8e4e2:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   8e4e6:	ebc9 0a0a 	rsb	sl, r9, sl
   8e4ea:	e00f      	b.n	8e50c <_vfiprintf_r+0x532>
   8e4ec:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8e4f0:	2b00      	cmp	r3, #0
   8e4f2:	f000 8171 	beq.w	8e7d8 <_vfiprintf_r+0x7fe>
   8e4f6:	2500      	movs	r5, #0
   8e4f8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   8e4fc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8e500:	f04f 0a01 	mov.w	sl, #1
   8e504:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   8e508:	e000      	b.n	8e50c <_vfiprintf_r+0x532>
   8e50a:	4605      	mov	r5, r0
   8e50c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   8e510:	45aa      	cmp	sl, r5
   8e512:	bfac      	ite	ge
   8e514:	4654      	movge	r4, sl
   8e516:	462c      	movlt	r4, r5
   8e518:	b103      	cbz	r3, 8e51c <_vfiprintf_r+0x542>
   8e51a:	3401      	adds	r4, #1
   8e51c:	f017 0302 	ands.w	r3, r7, #2
   8e520:	9303      	str	r3, [sp, #12]
   8e522:	bf18      	it	ne
   8e524:	3402      	addne	r4, #2
   8e526:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8e52a:	930b      	str	r3, [sp, #44]	; 0x2c
   8e52c:	d13b      	bne.n	8e5a6 <_vfiprintf_r+0x5cc>
   8e52e:	9804      	ldr	r0, [sp, #16]
   8e530:	1b03      	subs	r3, r0, r4
   8e532:	2b00      	cmp	r3, #0
   8e534:	dd37      	ble.n	8e5a6 <_vfiprintf_r+0x5cc>
   8e536:	4aa6      	ldr	r2, [pc, #664]	; (8e7d0 <_vfiprintf_r+0x7f6>)
   8e538:	2b10      	cmp	r3, #16
   8e53a:	f8cc 2000 	str.w	r2, [ip]
   8e53e:	dd1b      	ble.n	8e578 <_vfiprintf_r+0x59e>
   8e540:	2210      	movs	r2, #16
   8e542:	f8cc 2004 	str.w	r2, [ip, #4]
   8e546:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8e548:	3210      	adds	r2, #16
   8e54a:	9211      	str	r2, [sp, #68]	; 0x44
   8e54c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8e54e:	3201      	adds	r2, #1
   8e550:	2a07      	cmp	r2, #7
   8e552:	9210      	str	r2, [sp, #64]	; 0x40
   8e554:	dc02      	bgt.n	8e55c <_vfiprintf_r+0x582>
   8e556:	f10c 0c08 	add.w	ip, ip, #8
   8e55a:	e00b      	b.n	8e574 <_vfiprintf_r+0x59a>
   8e55c:	4658      	mov	r0, fp
   8e55e:	4641      	mov	r1, r8
   8e560:	aa0f      	add	r2, sp, #60	; 0x3c
   8e562:	9301      	str	r3, [sp, #4]
   8e564:	f7ff fd06 	bl	8df74 <__sprint_r>
   8e568:	9b01      	ldr	r3, [sp, #4]
   8e56a:	2800      	cmp	r0, #0
   8e56c:	f040 813b 	bne.w	8e7e6 <_vfiprintf_r+0x80c>
   8e570:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e574:	3b10      	subs	r3, #16
   8e576:	e7de      	b.n	8e536 <_vfiprintf_r+0x55c>
   8e578:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8e57a:	f8cc 3004 	str.w	r3, [ip, #4]
   8e57e:	4413      	add	r3, r2
   8e580:	9311      	str	r3, [sp, #68]	; 0x44
   8e582:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e584:	3301      	adds	r3, #1
   8e586:	2b07      	cmp	r3, #7
   8e588:	9310      	str	r3, [sp, #64]	; 0x40
   8e58a:	dc02      	bgt.n	8e592 <_vfiprintf_r+0x5b8>
   8e58c:	f10c 0c08 	add.w	ip, ip, #8
   8e590:	e009      	b.n	8e5a6 <_vfiprintf_r+0x5cc>
   8e592:	4658      	mov	r0, fp
   8e594:	4641      	mov	r1, r8
   8e596:	aa0f      	add	r2, sp, #60	; 0x3c
   8e598:	f7ff fcec 	bl	8df74 <__sprint_r>
   8e59c:	2800      	cmp	r0, #0
   8e59e:	f040 8122 	bne.w	8e7e6 <_vfiprintf_r+0x80c>
   8e5a2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e5a6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   8e5aa:	b1db      	cbz	r3, 8e5e4 <_vfiprintf_r+0x60a>
   8e5ac:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   8e5b0:	f8cc 3000 	str.w	r3, [ip]
   8e5b4:	2301      	movs	r3, #1
   8e5b6:	f8cc 3004 	str.w	r3, [ip, #4]
   8e5ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e5bc:	3301      	adds	r3, #1
   8e5be:	9311      	str	r3, [sp, #68]	; 0x44
   8e5c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e5c2:	3301      	adds	r3, #1
   8e5c4:	2b07      	cmp	r3, #7
   8e5c6:	9310      	str	r3, [sp, #64]	; 0x40
   8e5c8:	dc02      	bgt.n	8e5d0 <_vfiprintf_r+0x5f6>
   8e5ca:	f10c 0c08 	add.w	ip, ip, #8
   8e5ce:	e009      	b.n	8e5e4 <_vfiprintf_r+0x60a>
   8e5d0:	4658      	mov	r0, fp
   8e5d2:	4641      	mov	r1, r8
   8e5d4:	aa0f      	add	r2, sp, #60	; 0x3c
   8e5d6:	f7ff fccd 	bl	8df74 <__sprint_r>
   8e5da:	2800      	cmp	r0, #0
   8e5dc:	f040 8103 	bne.w	8e7e6 <_vfiprintf_r+0x80c>
   8e5e0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e5e4:	9b03      	ldr	r3, [sp, #12]
   8e5e6:	b1d3      	cbz	r3, 8e61e <_vfiprintf_r+0x644>
   8e5e8:	ab0e      	add	r3, sp, #56	; 0x38
   8e5ea:	f8cc 3000 	str.w	r3, [ip]
   8e5ee:	2302      	movs	r3, #2
   8e5f0:	f8cc 3004 	str.w	r3, [ip, #4]
   8e5f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e5f6:	3302      	adds	r3, #2
   8e5f8:	9311      	str	r3, [sp, #68]	; 0x44
   8e5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e5fc:	3301      	adds	r3, #1
   8e5fe:	2b07      	cmp	r3, #7
   8e600:	9310      	str	r3, [sp, #64]	; 0x40
   8e602:	dc02      	bgt.n	8e60a <_vfiprintf_r+0x630>
   8e604:	f10c 0c08 	add.w	ip, ip, #8
   8e608:	e009      	b.n	8e61e <_vfiprintf_r+0x644>
   8e60a:	4658      	mov	r0, fp
   8e60c:	4641      	mov	r1, r8
   8e60e:	aa0f      	add	r2, sp, #60	; 0x3c
   8e610:	f7ff fcb0 	bl	8df74 <__sprint_r>
   8e614:	2800      	cmp	r0, #0
   8e616:	f040 80e6 	bne.w	8e7e6 <_vfiprintf_r+0x80c>
   8e61a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8e620:	2b80      	cmp	r3, #128	; 0x80
   8e622:	d13f      	bne.n	8e6a4 <_vfiprintf_r+0x6ca>
   8e624:	9b04      	ldr	r3, [sp, #16]
   8e626:	1b1b      	subs	r3, r3, r4
   8e628:	2b00      	cmp	r3, #0
   8e62a:	9303      	str	r3, [sp, #12]
   8e62c:	dd3a      	ble.n	8e6a4 <_vfiprintf_r+0x6ca>
   8e62e:	9b03      	ldr	r3, [sp, #12]
   8e630:	2b10      	cmp	r3, #16
   8e632:	4b68      	ldr	r3, [pc, #416]	; (8e7d4 <_vfiprintf_r+0x7fa>)
   8e634:	f8cc 3000 	str.w	r3, [ip]
   8e638:	dd1b      	ble.n	8e672 <_vfiprintf_r+0x698>
   8e63a:	2310      	movs	r3, #16
   8e63c:	f8cc 3004 	str.w	r3, [ip, #4]
   8e640:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e642:	3310      	adds	r3, #16
   8e644:	9311      	str	r3, [sp, #68]	; 0x44
   8e646:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e648:	3301      	adds	r3, #1
   8e64a:	2b07      	cmp	r3, #7
   8e64c:	9310      	str	r3, [sp, #64]	; 0x40
   8e64e:	dc02      	bgt.n	8e656 <_vfiprintf_r+0x67c>
   8e650:	f10c 0c08 	add.w	ip, ip, #8
   8e654:	e009      	b.n	8e66a <_vfiprintf_r+0x690>
   8e656:	4658      	mov	r0, fp
   8e658:	4641      	mov	r1, r8
   8e65a:	aa0f      	add	r2, sp, #60	; 0x3c
   8e65c:	f7ff fc8a 	bl	8df74 <__sprint_r>
   8e660:	2800      	cmp	r0, #0
   8e662:	f040 80c0 	bne.w	8e7e6 <_vfiprintf_r+0x80c>
   8e666:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e66a:	9b03      	ldr	r3, [sp, #12]
   8e66c:	3b10      	subs	r3, #16
   8e66e:	9303      	str	r3, [sp, #12]
   8e670:	e7dd      	b.n	8e62e <_vfiprintf_r+0x654>
   8e672:	9b03      	ldr	r3, [sp, #12]
   8e674:	9803      	ldr	r0, [sp, #12]
   8e676:	f8cc 3004 	str.w	r3, [ip, #4]
   8e67a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e67c:	4403      	add	r3, r0
   8e67e:	9311      	str	r3, [sp, #68]	; 0x44
   8e680:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e682:	3301      	adds	r3, #1
   8e684:	2b07      	cmp	r3, #7
   8e686:	9310      	str	r3, [sp, #64]	; 0x40
   8e688:	dc02      	bgt.n	8e690 <_vfiprintf_r+0x6b6>
   8e68a:	f10c 0c08 	add.w	ip, ip, #8
   8e68e:	e009      	b.n	8e6a4 <_vfiprintf_r+0x6ca>
   8e690:	4658      	mov	r0, fp
   8e692:	4641      	mov	r1, r8
   8e694:	aa0f      	add	r2, sp, #60	; 0x3c
   8e696:	f7ff fc6d 	bl	8df74 <__sprint_r>
   8e69a:	2800      	cmp	r0, #0
   8e69c:	f040 80a3 	bne.w	8e7e6 <_vfiprintf_r+0x80c>
   8e6a0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e6a4:	ebca 0505 	rsb	r5, sl, r5
   8e6a8:	2d00      	cmp	r5, #0
   8e6aa:	dd34      	ble.n	8e716 <_vfiprintf_r+0x73c>
   8e6ac:	4b49      	ldr	r3, [pc, #292]	; (8e7d4 <_vfiprintf_r+0x7fa>)
   8e6ae:	2d10      	cmp	r5, #16
   8e6b0:	f8cc 3000 	str.w	r3, [ip]
   8e6b4:	dd19      	ble.n	8e6ea <_vfiprintf_r+0x710>
   8e6b6:	2310      	movs	r3, #16
   8e6b8:	f8cc 3004 	str.w	r3, [ip, #4]
   8e6bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e6be:	3310      	adds	r3, #16
   8e6c0:	9311      	str	r3, [sp, #68]	; 0x44
   8e6c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e6c4:	3301      	adds	r3, #1
   8e6c6:	2b07      	cmp	r3, #7
   8e6c8:	9310      	str	r3, [sp, #64]	; 0x40
   8e6ca:	dc02      	bgt.n	8e6d2 <_vfiprintf_r+0x6f8>
   8e6cc:	f10c 0c08 	add.w	ip, ip, #8
   8e6d0:	e009      	b.n	8e6e6 <_vfiprintf_r+0x70c>
   8e6d2:	4658      	mov	r0, fp
   8e6d4:	4641      	mov	r1, r8
   8e6d6:	aa0f      	add	r2, sp, #60	; 0x3c
   8e6d8:	f7ff fc4c 	bl	8df74 <__sprint_r>
   8e6dc:	2800      	cmp	r0, #0
   8e6de:	f040 8082 	bne.w	8e7e6 <_vfiprintf_r+0x80c>
   8e6e2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e6e6:	3d10      	subs	r5, #16
   8e6e8:	e7e0      	b.n	8e6ac <_vfiprintf_r+0x6d2>
   8e6ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e6ec:	f8cc 5004 	str.w	r5, [ip, #4]
   8e6f0:	441d      	add	r5, r3
   8e6f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e6f4:	9511      	str	r5, [sp, #68]	; 0x44
   8e6f6:	3301      	adds	r3, #1
   8e6f8:	2b07      	cmp	r3, #7
   8e6fa:	9310      	str	r3, [sp, #64]	; 0x40
   8e6fc:	dc02      	bgt.n	8e704 <_vfiprintf_r+0x72a>
   8e6fe:	f10c 0c08 	add.w	ip, ip, #8
   8e702:	e008      	b.n	8e716 <_vfiprintf_r+0x73c>
   8e704:	4658      	mov	r0, fp
   8e706:	4641      	mov	r1, r8
   8e708:	aa0f      	add	r2, sp, #60	; 0x3c
   8e70a:	f7ff fc33 	bl	8df74 <__sprint_r>
   8e70e:	2800      	cmp	r0, #0
   8e710:	d169      	bne.n	8e7e6 <_vfiprintf_r+0x80c>
   8e712:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e716:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e718:	e88c 0600 	stmia.w	ip, {r9, sl}
   8e71c:	4453      	add	r3, sl
   8e71e:	9311      	str	r3, [sp, #68]	; 0x44
   8e720:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e722:	3301      	adds	r3, #1
   8e724:	2b07      	cmp	r3, #7
   8e726:	9310      	str	r3, [sp, #64]	; 0x40
   8e728:	dc02      	bgt.n	8e730 <_vfiprintf_r+0x756>
   8e72a:	f10c 0308 	add.w	r3, ip, #8
   8e72e:	e007      	b.n	8e740 <_vfiprintf_r+0x766>
   8e730:	4658      	mov	r0, fp
   8e732:	4641      	mov	r1, r8
   8e734:	aa0f      	add	r2, sp, #60	; 0x3c
   8e736:	f7ff fc1d 	bl	8df74 <__sprint_r>
   8e73a:	2800      	cmp	r0, #0
   8e73c:	d153      	bne.n	8e7e6 <_vfiprintf_r+0x80c>
   8e73e:	ab1c      	add	r3, sp, #112	; 0x70
   8e740:	077a      	lsls	r2, r7, #29
   8e742:	d40a      	bmi.n	8e75a <_vfiprintf_r+0x780>
   8e744:	9d05      	ldr	r5, [sp, #20]
   8e746:	9804      	ldr	r0, [sp, #16]
   8e748:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e74a:	4284      	cmp	r4, r0
   8e74c:	bfac      	ite	ge
   8e74e:	192d      	addge	r5, r5, r4
   8e750:	182d      	addlt	r5, r5, r0
   8e752:	9505      	str	r5, [sp, #20]
   8e754:	2b00      	cmp	r3, #0
   8e756:	d035      	beq.n	8e7c4 <_vfiprintf_r+0x7ea>
   8e758:	e02e      	b.n	8e7b8 <_vfiprintf_r+0x7de>
   8e75a:	9904      	ldr	r1, [sp, #16]
   8e75c:	1b0d      	subs	r5, r1, r4
   8e75e:	2d00      	cmp	r5, #0
   8e760:	ddf0      	ble.n	8e744 <_vfiprintf_r+0x76a>
   8e762:	4a1b      	ldr	r2, [pc, #108]	; (8e7d0 <_vfiprintf_r+0x7f6>)
   8e764:	2d10      	cmp	r5, #16
   8e766:	601a      	str	r2, [r3, #0]
   8e768:	dd15      	ble.n	8e796 <_vfiprintf_r+0x7bc>
   8e76a:	2210      	movs	r2, #16
   8e76c:	605a      	str	r2, [r3, #4]
   8e76e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8e770:	3210      	adds	r2, #16
   8e772:	9211      	str	r2, [sp, #68]	; 0x44
   8e774:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8e776:	3201      	adds	r2, #1
   8e778:	2a07      	cmp	r2, #7
   8e77a:	9210      	str	r2, [sp, #64]	; 0x40
   8e77c:	dc01      	bgt.n	8e782 <_vfiprintf_r+0x7a8>
   8e77e:	3308      	adds	r3, #8
   8e780:	e007      	b.n	8e792 <_vfiprintf_r+0x7b8>
   8e782:	4658      	mov	r0, fp
   8e784:	4641      	mov	r1, r8
   8e786:	aa0f      	add	r2, sp, #60	; 0x3c
   8e788:	f7ff fbf4 	bl	8df74 <__sprint_r>
   8e78c:	2800      	cmp	r0, #0
   8e78e:	d12a      	bne.n	8e7e6 <_vfiprintf_r+0x80c>
   8e790:	ab1c      	add	r3, sp, #112	; 0x70
   8e792:	3d10      	subs	r5, #16
   8e794:	e7e5      	b.n	8e762 <_vfiprintf_r+0x788>
   8e796:	605d      	str	r5, [r3, #4]
   8e798:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e79a:	441d      	add	r5, r3
   8e79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8e79e:	9511      	str	r5, [sp, #68]	; 0x44
   8e7a0:	3301      	adds	r3, #1
   8e7a2:	2b07      	cmp	r3, #7
   8e7a4:	9310      	str	r3, [sp, #64]	; 0x40
   8e7a6:	ddcd      	ble.n	8e744 <_vfiprintf_r+0x76a>
   8e7a8:	4658      	mov	r0, fp
   8e7aa:	4641      	mov	r1, r8
   8e7ac:	aa0f      	add	r2, sp, #60	; 0x3c
   8e7ae:	f7ff fbe1 	bl	8df74 <__sprint_r>
   8e7b2:	2800      	cmp	r0, #0
   8e7b4:	d0c6      	beq.n	8e744 <_vfiprintf_r+0x76a>
   8e7b6:	e016      	b.n	8e7e6 <_vfiprintf_r+0x80c>
   8e7b8:	4658      	mov	r0, fp
   8e7ba:	4641      	mov	r1, r8
   8e7bc:	aa0f      	add	r2, sp, #60	; 0x3c
   8e7be:	f7ff fbd9 	bl	8df74 <__sprint_r>
   8e7c2:	b980      	cbnz	r0, 8e7e6 <_vfiprintf_r+0x80c>
   8e7c4:	2300      	movs	r3, #0
   8e7c6:	9310      	str	r3, [sp, #64]	; 0x40
   8e7c8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   8e7cc:	e44a      	b.n	8e064 <_vfiprintf_r+0x8a>
   8e7ce:	bf00      	nop
   8e7d0:	000b11f2 	.word	0x000b11f2
   8e7d4:	000b1202 	.word	0x000b1202
   8e7d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8e7da:	b123      	cbz	r3, 8e7e6 <_vfiprintf_r+0x80c>
   8e7dc:	4658      	mov	r0, fp
   8e7de:	4641      	mov	r1, r8
   8e7e0:	aa0f      	add	r2, sp, #60	; 0x3c
   8e7e2:	f7ff fbc7 	bl	8df74 <__sprint_r>
   8e7e6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8e7ea:	065b      	lsls	r3, r3, #25
   8e7ec:	f53f ac24 	bmi.w	8e038 <_vfiprintf_r+0x5e>
   8e7f0:	9805      	ldr	r0, [sp, #20]
   8e7f2:	b02d      	add	sp, #180	; 0xb4
   8e7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008e7f8 <vfiprintf>:
   8e7f8:	b530      	push	{r4, r5, lr}
   8e7fa:	4613      	mov	r3, r2
   8e7fc:	4a04      	ldr	r2, [pc, #16]	; (8e810 <vfiprintf+0x18>)
   8e7fe:	4605      	mov	r5, r0
   8e800:	460c      	mov	r4, r1
   8e802:	6810      	ldr	r0, [r2, #0]
   8e804:	4629      	mov	r1, r5
   8e806:	4622      	mov	r2, r4
   8e808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8e80c:	f7ff bbe5 	b.w	8dfda <_vfiprintf_r>
   8e810:	200702c8 	.word	0x200702c8

0008e814 <__sbprintf>:
   8e814:	b570      	push	{r4, r5, r6, lr}
   8e816:	460c      	mov	r4, r1
   8e818:	8989      	ldrh	r1, [r1, #12]
   8e81a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8e81e:	f021 0102 	bic.w	r1, r1, #2
   8e822:	f8ad 100c 	strh.w	r1, [sp, #12]
   8e826:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8e828:	4606      	mov	r6, r0
   8e82a:	9119      	str	r1, [sp, #100]	; 0x64
   8e82c:	89e1      	ldrh	r1, [r4, #14]
   8e82e:	f8ad 100e 	strh.w	r1, [sp, #14]
   8e832:	69e1      	ldr	r1, [r4, #28]
   8e834:	9107      	str	r1, [sp, #28]
   8e836:	6a61      	ldr	r1, [r4, #36]	; 0x24
   8e838:	9109      	str	r1, [sp, #36]	; 0x24
   8e83a:	a91a      	add	r1, sp, #104	; 0x68
   8e83c:	9100      	str	r1, [sp, #0]
   8e83e:	9104      	str	r1, [sp, #16]
   8e840:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8e844:	9102      	str	r1, [sp, #8]
   8e846:	9105      	str	r1, [sp, #20]
   8e848:	2100      	movs	r1, #0
   8e84a:	9106      	str	r1, [sp, #24]
   8e84c:	4669      	mov	r1, sp
   8e84e:	f7ff fbc4 	bl	8dfda <_vfiprintf_r>
   8e852:	1e05      	subs	r5, r0, #0
   8e854:	db07      	blt.n	8e866 <__sbprintf+0x52>
   8e856:	4630      	mov	r0, r6
   8e858:	4669      	mov	r1, sp
   8e85a:	f001 ffc4 	bl	907e6 <_fflush_r>
   8e85e:	2800      	cmp	r0, #0
   8e860:	bf18      	it	ne
   8e862:	f04f 35ff 	movne.w	r5, #4294967295
   8e866:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8e86a:	065b      	lsls	r3, r3, #25
   8e86c:	d503      	bpl.n	8e876 <__sbprintf+0x62>
   8e86e:	89a3      	ldrh	r3, [r4, #12]
   8e870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8e874:	81a3      	strh	r3, [r4, #12]
   8e876:	4628      	mov	r0, r5
   8e878:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8e87c:	bd70      	pop	{r4, r5, r6, pc}
   8e87e:	bf00      	nop

0008e880 <_vfprintf_r>:
   8e880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8e884:	b0c3      	sub	sp, #268	; 0x10c
   8e886:	4689      	mov	r9, r1
   8e888:	920b      	str	r2, [sp, #44]	; 0x2c
   8e88a:	461c      	mov	r4, r3
   8e88c:	4698      	mov	r8, r3
   8e88e:	4682      	mov	sl, r0
   8e890:	f002 fbe4 	bl	9105c <_localeconv_r>
   8e894:	6800      	ldr	r0, [r0, #0]
   8e896:	9018      	str	r0, [sp, #96]	; 0x60
   8e898:	f7fe fb13 	bl	8cec2 <strlen>
   8e89c:	9010      	str	r0, [sp, #64]	; 0x40
   8e89e:	f1ba 0f00 	cmp.w	sl, #0
   8e8a2:	d005      	beq.n	8e8b0 <_vfprintf_r+0x30>
   8e8a4:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
   8e8a8:	b913      	cbnz	r3, 8e8b0 <_vfprintf_r+0x30>
   8e8aa:	4650      	mov	r0, sl
   8e8ac:	f001 ffe4 	bl	90878 <__sinit>
   8e8b0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8e8b4:	0498      	lsls	r0, r3, #18
   8e8b6:	d409      	bmi.n	8e8cc <_vfprintf_r+0x4c>
   8e8b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8e8bc:	f8a9 300c 	strh.w	r3, [r9, #12]
   8e8c0:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8e8c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8e8c8:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   8e8cc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8e8d0:	0719      	lsls	r1, r3, #28
   8e8d2:	d509      	bpl.n	8e8e8 <_vfprintf_r+0x68>
   8e8d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8e8d8:	b133      	cbz	r3, 8e8e8 <_vfprintf_r+0x68>
   8e8da:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8e8de:	f003 031a 	and.w	r3, r3, #26
   8e8e2:	2b0a      	cmp	r3, #10
   8e8e4:	d116      	bne.n	8e914 <_vfprintf_r+0x94>
   8e8e6:	e009      	b.n	8e8fc <_vfprintf_r+0x7c>
   8e8e8:	4650      	mov	r0, sl
   8e8ea:	4649      	mov	r1, r9
   8e8ec:	f000 fffe 	bl	8f8ec <__swsetup_r>
   8e8f0:	2800      	cmp	r0, #0
   8e8f2:	d0f2      	beq.n	8e8da <_vfprintf_r+0x5a>
   8e8f4:	f04f 30ff 	mov.w	r0, #4294967295
   8e8f8:	f000 bf75 	b.w	8f7e6 <_vfprintf_r+0xf66>
   8e8fc:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   8e900:	2b00      	cmp	r3, #0
   8e902:	db07      	blt.n	8e914 <_vfprintf_r+0x94>
   8e904:	4650      	mov	r0, sl
   8e906:	4649      	mov	r1, r9
   8e908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8e90a:	4623      	mov	r3, r4
   8e90c:	f000 ff7e 	bl	8f80c <__sbprintf>
   8e910:	f000 bf69 	b.w	8f7e6 <_vfprintf_r+0xf66>
   8e914:	2400      	movs	r4, #0
   8e916:	2500      	movs	r5, #0
   8e918:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
   8e91c:	2300      	movs	r3, #0
   8e91e:	ae32      	add	r6, sp, #200	; 0xc8
   8e920:	9625      	str	r6, [sp, #148]	; 0x94
   8e922:	9327      	str	r3, [sp, #156]	; 0x9c
   8e924:	9326      	str	r3, [sp, #152]	; 0x98
   8e926:	9309      	str	r3, [sp, #36]	; 0x24
   8e928:	931b      	str	r3, [sp, #108]	; 0x6c
   8e92a:	931a      	str	r3, [sp, #104]	; 0x68
   8e92c:	930f      	str	r3, [sp, #60]	; 0x3c
   8e92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8e930:	461c      	mov	r4, r3
   8e932:	f813 2b01 	ldrb.w	r2, [r3], #1
   8e936:	b91a      	cbnz	r2, 8e940 <_vfprintf_r+0xc0>
   8e938:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8e93a:	1a25      	subs	r5, r4, r0
   8e93c:	d103      	bne.n	8e946 <_vfprintf_r+0xc6>
   8e93e:	e01b      	b.n	8e978 <_vfprintf_r+0xf8>
   8e940:	2a25      	cmp	r2, #37	; 0x25
   8e942:	d1f5      	bne.n	8e930 <_vfprintf_r+0xb0>
   8e944:	e7f8      	b.n	8e938 <_vfprintf_r+0xb8>
   8e946:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8e948:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8e94a:	442b      	add	r3, r5
   8e94c:	9327      	str	r3, [sp, #156]	; 0x9c
   8e94e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8e950:	e886 0022 	stmia.w	r6, {r1, r5}
   8e954:	3301      	adds	r3, #1
   8e956:	2b07      	cmp	r3, #7
   8e958:	9326      	str	r3, [sp, #152]	; 0x98
   8e95a:	dc01      	bgt.n	8e960 <_vfprintf_r+0xe0>
   8e95c:	3608      	adds	r6, #8
   8e95e:	e008      	b.n	8e972 <_vfprintf_r+0xf2>
   8e960:	4650      	mov	r0, sl
   8e962:	4649      	mov	r1, r9
   8e964:	aa25      	add	r2, sp, #148	; 0x94
   8e966:	f7ff fb05 	bl	8df74 <__sprint_r>
   8e96a:	2800      	cmp	r0, #0
   8e96c:	f040 8735 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8e970:	ae32      	add	r6, sp, #200	; 0xc8
   8e972:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8e974:	442a      	add	r2, r5
   8e976:	920f      	str	r2, [sp, #60]	; 0x3c
   8e978:	7823      	ldrb	r3, [r4, #0]
   8e97a:	2b00      	cmp	r3, #0
   8e97c:	f000 8726 	beq.w	8f7cc <_vfprintf_r+0xf4c>
   8e980:	2300      	movs	r3, #0
   8e982:	3401      	adds	r4, #1
   8e984:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8e988:	f04f 3bff 	mov.w	fp, #4294967295
   8e98c:	930e      	str	r3, [sp, #56]	; 0x38
   8e98e:	461f      	mov	r7, r3
   8e990:	1c65      	adds	r5, r4, #1
   8e992:	7824      	ldrb	r4, [r4, #0]
   8e994:	950b      	str	r5, [sp, #44]	; 0x2c
   8e996:	9408      	str	r4, [sp, #32]
   8e998:	9c08      	ldr	r4, [sp, #32]
   8e99a:	f1a4 0220 	sub.w	r2, r4, #32
   8e99e:	2a58      	cmp	r2, #88	; 0x58
   8e9a0:	f200 8385 	bhi.w	8f0ae <_vfprintf_r+0x82e>
   8e9a4:	e8df f012 	tbh	[pc, r2, lsl #1]
   8e9a8:	0383006d 	.word	0x0383006d
   8e9ac:	00710383 	.word	0x00710383
   8e9b0:	03830383 	.word	0x03830383
   8e9b4:	03830383 	.word	0x03830383
   8e9b8:	03830383 	.word	0x03830383
   8e9bc:	0059005b 	.word	0x0059005b
   8e9c0:	00770383 	.word	0x00770383
   8e9c4:	0383007a 	.word	0x0383007a
   8e9c8:	00a2009f 	.word	0x00a2009f
   8e9cc:	00a200a2 	.word	0x00a200a2
   8e9d0:	00a200a2 	.word	0x00a200a2
   8e9d4:	00a200a2 	.word	0x00a200a2
   8e9d8:	00a200a2 	.word	0x00a200a2
   8e9dc:	03830383 	.word	0x03830383
   8e9e0:	03830383 	.word	0x03830383
   8e9e4:	03830383 	.word	0x03830383
   8e9e8:	03830383 	.word	0x03830383
   8e9ec:	03830383 	.word	0x03830383
   8e9f0:	00fe00d3 	.word	0x00fe00d3
   8e9f4:	00fe0383 	.word	0x00fe0383
   8e9f8:	03830383 	.word	0x03830383
   8e9fc:	03830383 	.word	0x03830383
   8ea00:	038300b6 	.word	0x038300b6
   8ea04:	026b0383 	.word	0x026b0383
   8ea08:	03830383 	.word	0x03830383
   8ea0c:	03830383 	.word	0x03830383
   8ea10:	02bb0383 	.word	0x02bb0383
   8ea14:	03830383 	.word	0x03830383
   8ea18:	03830068 	.word	0x03830068
   8ea1c:	03830383 	.word	0x03830383
   8ea20:	03830383 	.word	0x03830383
   8ea24:	03830383 	.word	0x03830383
   8ea28:	03830383 	.word	0x03830383
   8ea2c:	00c90383 	.word	0x00c90383
   8ea30:	00fe0065 	.word	0x00fe0065
   8ea34:	00fe00fe 	.word	0x00fe00fe
   8ea38:	006500b9 	.word	0x006500b9
   8ea3c:	03830383 	.word	0x03830383
   8ea40:	038300bc 	.word	0x038300bc
   8ea44:	026d024c 	.word	0x026d024c
   8ea48:	00c6028c 	.word	0x00c6028c
   8ea4c:	029e0383 	.word	0x029e0383
   8ea50:	02bd0383 	.word	0x02bd0383
   8ea54:	03830383 	.word	0x03830383
   8ea58:	02d8      	.short	0x02d8
   8ea5a:	232b      	movs	r3, #43	; 0x2b
   8ea5c:	e007      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8ea5e:	f8d8 5000 	ldr.w	r5, [r8]
   8ea62:	f108 0204 	add.w	r2, r8, #4
   8ea66:	2d00      	cmp	r5, #0
   8ea68:	950e      	str	r5, [sp, #56]	; 0x38
   8ea6a:	db11      	blt.n	8ea90 <_vfprintf_r+0x210>
   8ea6c:	4690      	mov	r8, r2
   8ea6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8ea70:	e78e      	b.n	8e990 <_vfprintf_r+0x110>
   8ea72:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8ea76:	e06e      	b.n	8eb56 <_vfprintf_r+0x2d6>
   8ea78:	4cab      	ldr	r4, [pc, #684]	; (8ed28 <_vfprintf_r+0x4a8>)
   8ea7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8ea7e:	941b      	str	r4, [sp, #108]	; 0x6c
   8ea80:	e26e      	b.n	8ef60 <_vfprintf_r+0x6e0>
   8ea82:	2b00      	cmp	r3, #0
   8ea84:	bf08      	it	eq
   8ea86:	2320      	moveq	r3, #32
   8ea88:	e7f1      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8ea8a:	f047 0701 	orr.w	r7, r7, #1
   8ea8e:	e7ee      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8ea90:	426d      	negs	r5, r5
   8ea92:	950e      	str	r5, [sp, #56]	; 0x38
   8ea94:	4690      	mov	r8, r2
   8ea96:	f047 0704 	orr.w	r7, r7, #4
   8ea9a:	e7e8      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8ea9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8ea9e:	7825      	ldrb	r5, [r4, #0]
   8eaa0:	1c62      	adds	r2, r4, #1
   8eaa2:	2d2a      	cmp	r5, #42	; 0x2a
   8eaa4:	9508      	str	r5, [sp, #32]
   8eaa6:	d002      	beq.n	8eaae <_vfprintf_r+0x22e>
   8eaa8:	f04f 0c00 	mov.w	ip, #0
   8eaac:	e00b      	b.n	8eac6 <_vfprintf_r+0x246>
   8eaae:	f8d8 b000 	ldr.w	fp, [r8]
   8eab2:	f108 0104 	add.w	r1, r8, #4
   8eab6:	f1bb 0f00 	cmp.w	fp, #0
   8eaba:	4688      	mov	r8, r1
   8eabc:	920b      	str	r2, [sp, #44]	; 0x2c
   8eabe:	dad6      	bge.n	8ea6e <_vfprintf_r+0x1ee>
   8eac0:	f04f 3bff 	mov.w	fp, #4294967295
   8eac4:	e7d3      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8eac6:	9d08      	ldr	r5, [sp, #32]
   8eac8:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
   8eacc:	2909      	cmp	r1, #9
   8eace:	d806      	bhi.n	8eade <_vfprintf_r+0x25e>
   8ead0:	f812 4b01 	ldrb.w	r4, [r2], #1
   8ead4:	200a      	movs	r0, #10
   8ead6:	fb00 1c0c 	mla	ip, r0, ip, r1
   8eada:	9408      	str	r4, [sp, #32]
   8eadc:	e7f3      	b.n	8eac6 <_vfprintf_r+0x246>
   8eade:	ea4c 7bec 	orr.w	fp, ip, ip, asr #31
   8eae2:	920b      	str	r2, [sp, #44]	; 0x2c
   8eae4:	e758      	b.n	8e998 <_vfprintf_r+0x118>
   8eae6:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8eaea:	e7c0      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8eaec:	2400      	movs	r4, #0
   8eaee:	940e      	str	r4, [sp, #56]	; 0x38
   8eaf0:	9d08      	ldr	r5, [sp, #32]
   8eaf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8eaf4:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   8eaf8:	210a      	movs	r1, #10
   8eafa:	fb01 2404 	mla	r4, r1, r4, r2
   8eafe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8eb00:	940e      	str	r4, [sp, #56]	; 0x38
   8eb02:	f812 5b01 	ldrb.w	r5, [r2], #1
   8eb06:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
   8eb0a:	2909      	cmp	r1, #9
   8eb0c:	9508      	str	r5, [sp, #32]
   8eb0e:	d8e8      	bhi.n	8eae2 <_vfprintf_r+0x262>
   8eb10:	920b      	str	r2, [sp, #44]	; 0x2c
   8eb12:	e7ed      	b.n	8eaf0 <_vfprintf_r+0x270>
   8eb14:	f047 0708 	orr.w	r7, r7, #8
   8eb18:	e7a9      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8eb1a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8eb1e:	e7a6      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8eb20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8eb22:	7822      	ldrb	r2, [r4, #0]
   8eb24:	2a6c      	cmp	r2, #108	; 0x6c
   8eb26:	d102      	bne.n	8eb2e <_vfprintf_r+0x2ae>
   8eb28:	3401      	adds	r4, #1
   8eb2a:	940b      	str	r4, [sp, #44]	; 0x2c
   8eb2c:	e002      	b.n	8eb34 <_vfprintf_r+0x2b4>
   8eb2e:	f047 0710 	orr.w	r7, r7, #16
   8eb32:	e79c      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8eb34:	f047 0720 	orr.w	r7, r7, #32
   8eb38:	e799      	b.n	8ea6e <_vfprintf_r+0x1ee>
   8eb3a:	f8d8 3000 	ldr.w	r3, [r8]
   8eb3e:	2500      	movs	r5, #0
   8eb40:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
   8eb44:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8eb48:	f108 0804 	add.w	r8, r8, #4
   8eb4c:	e2ba      	b.n	8f0c4 <_vfprintf_r+0x844>
   8eb4e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8eb52:	f047 0710 	orr.w	r7, r7, #16
   8eb56:	06ba      	lsls	r2, r7, #26
   8eb58:	d508      	bpl.n	8eb6c <_vfprintf_r+0x2ec>
   8eb5a:	f108 0807 	add.w	r8, r8, #7
   8eb5e:	f028 0307 	bic.w	r3, r8, #7
   8eb62:	f103 0808 	add.w	r8, r3, #8
   8eb66:	e9d3 4500 	ldrd	r4, r5, [r3]
   8eb6a:	e00f      	b.n	8eb8c <_vfprintf_r+0x30c>
   8eb6c:	f017 0f10 	tst.w	r7, #16
   8eb70:	f108 0304 	add.w	r3, r8, #4
   8eb74:	d002      	beq.n	8eb7c <_vfprintf_r+0x2fc>
   8eb76:	f8d8 4000 	ldr.w	r4, [r8]
   8eb7a:	e005      	b.n	8eb88 <_vfprintf_r+0x308>
   8eb7c:	f8d8 4000 	ldr.w	r4, [r8]
   8eb80:	f017 0f40 	tst.w	r7, #64	; 0x40
   8eb84:	bf18      	it	ne
   8eb86:	b224      	sxthne	r4, r4
   8eb88:	17e5      	asrs	r5, r4, #31
   8eb8a:	4698      	mov	r8, r3
   8eb8c:	2c00      	cmp	r4, #0
   8eb8e:	f175 0100 	sbcs.w	r1, r5, #0
   8eb92:	f280 8210 	bge.w	8efb6 <_vfprintf_r+0x736>
   8eb96:	232d      	movs	r3, #45	; 0x2d
   8eb98:	4264      	negs	r4, r4
   8eb9a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8eb9e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8eba2:	e208      	b.n	8efb6 <_vfprintf_r+0x736>
   8eba4:	9c08      	ldr	r4, [sp, #32]
   8eba6:	f108 0807 	add.w	r8, r8, #7
   8ebaa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8ebae:	970a      	str	r7, [sp, #40]	; 0x28
   8ebb0:	f028 0307 	bic.w	r3, r8, #7
   8ebb4:	9411      	str	r4, [sp, #68]	; 0x44
   8ebb6:	e9d3 4500 	ldrd	r4, r5, [r3]
   8ebba:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
   8ebbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8ebc2:	f103 0808 	add.w	r8, r3, #8
   8ebc6:	f003 f87d 	bl	91cc4 <__fpclassifyd>
   8ebca:	2801      	cmp	r0, #1
   8ebcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8ebd0:	d114      	bne.n	8ebfc <_vfprintf_r+0x37c>
   8ebd2:	2200      	movs	r2, #0
   8ebd4:	2300      	movs	r3, #0
   8ebd6:	f004 fb03 	bl	931e0 <__aeabi_dcmplt>
   8ebda:	b110      	cbz	r0, 8ebe2 <_vfprintf_r+0x362>
   8ebdc:	232d      	movs	r3, #45	; 0x2d
   8ebde:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8ebe2:	9d08      	ldr	r5, [sp, #32]
   8ebe4:	4b51      	ldr	r3, [pc, #324]	; (8ed2c <_vfprintf_r+0x4ac>)
   8ebe6:	4a52      	ldr	r2, [pc, #328]	; (8ed30 <_vfprintf_r+0x4b0>)
   8ebe8:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8ebec:	2d47      	cmp	r5, #71	; 0x47
   8ebee:	bfd8      	it	le
   8ebf0:	461a      	movle	r2, r3
   8ebf2:	9207      	str	r2, [sp, #28]
   8ebf4:	f04f 0b03 	mov.w	fp, #3
   8ebf8:	2500      	movs	r5, #0
   8ebfa:	e26a      	b.n	8f0d2 <_vfprintf_r+0x852>
   8ebfc:	f003 f862 	bl	91cc4 <__fpclassifyd>
   8ec00:	b958      	cbnz	r0, 8ec1a <_vfprintf_r+0x39a>
   8ec02:	4b4c      	ldr	r3, [pc, #304]	; (8ed34 <_vfprintf_r+0x4b4>)
   8ec04:	4a4c      	ldr	r2, [pc, #304]	; (8ed38 <_vfprintf_r+0x4b8>)
   8ec06:	9c08      	ldr	r4, [sp, #32]
   8ec08:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8ec0c:	2c47      	cmp	r4, #71	; 0x47
   8ec0e:	bfd8      	it	le
   8ec10:	461a      	movle	r2, r3
   8ec12:	9207      	str	r2, [sp, #28]
   8ec14:	f04f 0b03 	mov.w	fp, #3
   8ec18:	e25a      	b.n	8f0d0 <_vfprintf_r+0x850>
   8ec1a:	f1bb 3fff 	cmp.w	fp, #4294967295
   8ec1e:	d00a      	beq.n	8ec36 <_vfprintf_r+0x3b6>
   8ec20:	9d08      	ldr	r5, [sp, #32]
   8ec22:	f025 0320 	bic.w	r3, r5, #32
   8ec26:	2b47      	cmp	r3, #71	; 0x47
   8ec28:	d107      	bne.n	8ec3a <_vfprintf_r+0x3ba>
   8ec2a:	f1bb 0f00 	cmp.w	fp, #0
   8ec2e:	bf08      	it	eq
   8ec30:	f04f 0b01 	moveq.w	fp, #1
   8ec34:	e001      	b.n	8ec3a <_vfprintf_r+0x3ba>
   8ec36:	f04f 0b06 	mov.w	fp, #6
   8ec3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   8ec3e:	2b00      	cmp	r3, #0
   8ec40:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   8ec44:	da08      	bge.n	8ec58 <_vfprintf_r+0x3d8>
   8ec46:	990d      	ldr	r1, [sp, #52]	; 0x34
   8ec48:	980c      	ldr	r0, [sp, #48]	; 0x30
   8ec4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   8ec4e:	242d      	movs	r4, #45	; 0x2d
   8ec50:	9012      	str	r0, [sp, #72]	; 0x48
   8ec52:	9113      	str	r1, [sp, #76]	; 0x4c
   8ec54:	9419      	str	r4, [sp, #100]	; 0x64
   8ec56:	e005      	b.n	8ec64 <_vfprintf_r+0x3e4>
   8ec58:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   8ec5c:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
   8ec60:	2500      	movs	r5, #0
   8ec62:	9519      	str	r5, [sp, #100]	; 0x64
   8ec64:	9d08      	ldr	r5, [sp, #32]
   8ec66:	f025 0420 	bic.w	r4, r5, #32
   8ec6a:	2c46      	cmp	r4, #70	; 0x46
   8ec6c:	d004      	beq.n	8ec78 <_vfprintf_r+0x3f8>
   8ec6e:	2c45      	cmp	r4, #69	; 0x45
   8ec70:	d105      	bne.n	8ec7e <_vfprintf_r+0x3fe>
   8ec72:	f10b 0501 	add.w	r5, fp, #1
   8ec76:	e003      	b.n	8ec80 <_vfprintf_r+0x400>
   8ec78:	465d      	mov	r5, fp
   8ec7a:	2303      	movs	r3, #3
   8ec7c:	e001      	b.n	8ec82 <_vfprintf_r+0x402>
   8ec7e:	465d      	mov	r5, fp
   8ec80:	2302      	movs	r3, #2
   8ec82:	e88d 0028 	stmia.w	sp, {r3, r5}
   8ec86:	ab1f      	add	r3, sp, #124	; 0x7c
   8ec88:	9302      	str	r3, [sp, #8]
   8ec8a:	ab20      	add	r3, sp, #128	; 0x80
   8ec8c:	9303      	str	r3, [sp, #12]
   8ec8e:	ab23      	add	r3, sp, #140	; 0x8c
   8ec90:	9304      	str	r3, [sp, #16]
   8ec92:	4650      	mov	r0, sl
   8ec94:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   8ec98:	f000 ff69 	bl	8fb6e <_dtoa_r>
   8ec9c:	2c47      	cmp	r4, #71	; 0x47
   8ec9e:	9007      	str	r0, [sp, #28]
   8eca0:	d10a      	bne.n	8ecb8 <_vfprintf_r+0x438>
   8eca2:	980a      	ldr	r0, [sp, #40]	; 0x28
   8eca4:	07c3      	lsls	r3, r0, #31
   8eca6:	d407      	bmi.n	8ecb8 <_vfprintf_r+0x438>
   8eca8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8ecaa:	9d07      	ldr	r5, [sp, #28]
   8ecac:	2c47      	cmp	r4, #71	; 0x47
   8ecae:	ebc5 0303 	rsb	r3, r5, r3
   8ecb2:	9309      	str	r3, [sp, #36]	; 0x24
   8ecb4:	d142      	bne.n	8ed3c <_vfprintf_r+0x4bc>
   8ecb6:	e02d      	b.n	8ed14 <_vfprintf_r+0x494>
   8ecb8:	f8dd c01c 	ldr.w	ip, [sp, #28]
   8ecbc:	2c46      	cmp	r4, #70	; 0x46
   8ecbe:	44ac      	add	ip, r5
   8ecc0:	d113      	bne.n	8ecea <_vfprintf_r+0x46a>
   8ecc2:	9807      	ldr	r0, [sp, #28]
   8ecc4:	7803      	ldrb	r3, [r0, #0]
   8ecc6:	2b30      	cmp	r3, #48	; 0x30
   8ecc8:	d10d      	bne.n	8ece6 <_vfprintf_r+0x466>
   8ecca:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8ecce:	2200      	movs	r2, #0
   8ecd0:	2300      	movs	r3, #0
   8ecd2:	f8cd c018 	str.w	ip, [sp, #24]
   8ecd6:	f004 fa79 	bl	931cc <__aeabi_dcmpeq>
   8ecda:	f8dd c018 	ldr.w	ip, [sp, #24]
   8ecde:	b910      	cbnz	r0, 8ece6 <_vfprintf_r+0x466>
   8ece0:	f1c5 0501 	rsb	r5, r5, #1
   8ece4:	951f      	str	r5, [sp, #124]	; 0x7c
   8ece6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8ece8:	449c      	add	ip, r3
   8ecea:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8ecee:	2200      	movs	r2, #0
   8ecf0:	2300      	movs	r3, #0
   8ecf2:	f8cd c018 	str.w	ip, [sp, #24]
   8ecf6:	f004 fa69 	bl	931cc <__aeabi_dcmpeq>
   8ecfa:	f8dd c018 	ldr.w	ip, [sp, #24]
   8ecfe:	b108      	cbz	r0, 8ed04 <_vfprintf_r+0x484>
   8ed00:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
   8ed04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8ed06:	4563      	cmp	r3, ip
   8ed08:	d2ce      	bcs.n	8eca8 <_vfprintf_r+0x428>
   8ed0a:	1c5a      	adds	r2, r3, #1
   8ed0c:	9223      	str	r2, [sp, #140]	; 0x8c
   8ed0e:	2230      	movs	r2, #48	; 0x30
   8ed10:	701a      	strb	r2, [r3, #0]
   8ed12:	e7f7      	b.n	8ed04 <_vfprintf_r+0x484>
   8ed14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8ed16:	1cdc      	adds	r4, r3, #3
   8ed18:	db01      	blt.n	8ed1e <_vfprintf_r+0x49e>
   8ed1a:	455b      	cmp	r3, fp
   8ed1c:	dd6e      	ble.n	8edfc <_vfprintf_r+0x57c>
   8ed1e:	9c08      	ldr	r4, [sp, #32]
   8ed20:	3c02      	subs	r4, #2
   8ed22:	9408      	str	r4, [sp, #32]
   8ed24:	e00d      	b.n	8ed42 <_vfprintf_r+0x4c2>
   8ed26:	bf00      	nop
   8ed28:	000b11ce 	.word	0x000b11ce
   8ed2c:	000b11be 	.word	0x000b11be
   8ed30:	000b11c2 	.word	0x000b11c2
   8ed34:	000b11c6 	.word	0x000b11c6
   8ed38:	000b11ca 	.word	0x000b11ca
   8ed3c:	9d08      	ldr	r5, [sp, #32]
   8ed3e:	2d65      	cmp	r5, #101	; 0x65
   8ed40:	dc43      	bgt.n	8edca <_vfprintf_r+0x54a>
   8ed42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8ed44:	9c08      	ldr	r4, [sp, #32]
   8ed46:	3b01      	subs	r3, #1
   8ed48:	2b00      	cmp	r3, #0
   8ed4a:	931f      	str	r3, [sp, #124]	; 0x7c
   8ed4c:	bfba      	itte	lt
   8ed4e:	425b      	neglt	r3, r3
   8ed50:	222d      	movlt	r2, #45	; 0x2d
   8ed52:	222b      	movge	r2, #43	; 0x2b
   8ed54:	2b09      	cmp	r3, #9
   8ed56:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
   8ed5a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   8ed5e:	dd1d      	ble.n	8ed9c <_vfprintf_r+0x51c>
   8ed60:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   8ed64:	200a      	movs	r0, #10
   8ed66:	fb93 f1f0 	sdiv	r1, r3, r0
   8ed6a:	fb00 3311 	mls	r3, r0, r1, r3
   8ed6e:	2909      	cmp	r1, #9
   8ed70:	f103 0330 	add.w	r3, r3, #48	; 0x30
   8ed74:	4614      	mov	r4, r2
   8ed76:	f802 3901 	strb.w	r3, [r2], #-1
   8ed7a:	460b      	mov	r3, r1
   8ed7c:	dcf2      	bgt.n	8ed64 <_vfprintf_r+0x4e4>
   8ed7e:	f101 0330 	add.w	r3, r1, #48	; 0x30
   8ed82:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8ed86:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   8ed8a:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   8ed8e:	4294      	cmp	r4, r2
   8ed90:	d20b      	bcs.n	8edaa <_vfprintf_r+0x52a>
   8ed92:	f814 2b01 	ldrb.w	r2, [r4], #1
   8ed96:	f803 2b01 	strb.w	r2, [r3], #1
   8ed9a:	e7f6      	b.n	8ed8a <_vfprintf_r+0x50a>
   8ed9c:	2230      	movs	r2, #48	; 0x30
   8ed9e:	4413      	add	r3, r2
   8eda0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8eda4:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   8eda8:	ab22      	add	r3, sp, #136	; 0x88
   8edaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8edac:	aa21      	add	r2, sp, #132	; 0x84
   8edae:	1a9a      	subs	r2, r3, r2
   8edb0:	4693      	mov	fp, r2
   8edb2:	2d01      	cmp	r5, #1
   8edb4:	921a      	str	r2, [sp, #104]	; 0x68
   8edb6:	44ab      	add	fp, r5
   8edb8:	dc03      	bgt.n	8edc2 <_vfprintf_r+0x542>
   8edba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8edbc:	f015 0401 	ands.w	r4, r5, #1
   8edc0:	d037      	beq.n	8ee32 <_vfprintf_r+0x5b2>
   8edc2:	f10b 0b01 	add.w	fp, fp, #1
   8edc6:	2400      	movs	r4, #0
   8edc8:	e033      	b.n	8ee32 <_vfprintf_r+0x5b2>
   8edca:	9c08      	ldr	r4, [sp, #32]
   8edcc:	2c66      	cmp	r4, #102	; 0x66
   8edce:	d115      	bne.n	8edfc <_vfprintf_r+0x57c>
   8edd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8edd2:	2b00      	cmp	r3, #0
   8edd4:	dd09      	ble.n	8edea <_vfprintf_r+0x56a>
   8edd6:	f1bb 0f00 	cmp.w	fp, #0
   8edda:	d102      	bne.n	8ede2 <_vfprintf_r+0x562>
   8eddc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8edde:	07e8      	lsls	r0, r5, #31
   8ede0:	d523      	bpl.n	8ee2a <_vfprintf_r+0x5aa>
   8ede2:	f10b 0c01 	add.w	ip, fp, #1
   8ede6:	4463      	add	r3, ip
   8ede8:	e01f      	b.n	8ee2a <_vfprintf_r+0x5aa>
   8edea:	f1bb 0f00 	cmp.w	fp, #0
   8edee:	d102      	bne.n	8edf6 <_vfprintf_r+0x576>
   8edf0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8edf2:	07e1      	lsls	r1, r4, #31
   8edf4:	d515      	bpl.n	8ee22 <_vfprintf_r+0x5a2>
   8edf6:	f10b 0302 	add.w	r3, fp, #2
   8edfa:	e016      	b.n	8ee2a <_vfprintf_r+0x5aa>
   8edfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8edfe:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8ee00:	42ab      	cmp	r3, r5
   8ee02:	db04      	blt.n	8ee0e <_vfprintf_r+0x58e>
   8ee04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8ee06:	07e2      	lsls	r2, r4, #31
   8ee08:	d50d      	bpl.n	8ee26 <_vfprintf_r+0x5a6>
   8ee0a:	3301      	adds	r3, #1
   8ee0c:	e006      	b.n	8ee1c <_vfprintf_r+0x59c>
   8ee0e:	2b00      	cmp	r3, #0
   8ee10:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8ee12:	bfd4      	ite	le
   8ee14:	f1c3 0302 	rsble	r3, r3, #2
   8ee18:	2301      	movgt	r3, #1
   8ee1a:	4423      	add	r3, r4
   8ee1c:	2567      	movs	r5, #103	; 0x67
   8ee1e:	9511      	str	r5, [sp, #68]	; 0x44
   8ee20:	e003      	b.n	8ee2a <_vfprintf_r+0x5aa>
   8ee22:	2301      	movs	r3, #1
   8ee24:	e001      	b.n	8ee2a <_vfprintf_r+0x5aa>
   8ee26:	2467      	movs	r4, #103	; 0x67
   8ee28:	9411      	str	r4, [sp, #68]	; 0x44
   8ee2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   8ee2c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   8ee2e:	9508      	str	r5, [sp, #32]
   8ee30:	469b      	mov	fp, r3
   8ee32:	9d19      	ldr	r5, [sp, #100]	; 0x64
   8ee34:	b115      	cbz	r5, 8ee3c <_vfprintf_r+0x5bc>
   8ee36:	232d      	movs	r3, #45	; 0x2d
   8ee38:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8ee3c:	2500      	movs	r5, #0
   8ee3e:	e149      	b.n	8f0d4 <_vfprintf_r+0x854>
   8ee40:	f017 0f20 	tst.w	r7, #32
   8ee44:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8ee48:	f108 0104 	add.w	r1, r8, #4
   8ee4c:	d008      	beq.n	8ee60 <_vfprintf_r+0x5e0>
   8ee4e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8ee50:	f8d8 0000 	ldr.w	r0, [r8]
   8ee54:	17e5      	asrs	r5, r4, #31
   8ee56:	4622      	mov	r2, r4
   8ee58:	462b      	mov	r3, r5
   8ee5a:	e9c0 2300 	strd	r2, r3, [r0]
   8ee5e:	e00c      	b.n	8ee7a <_vfprintf_r+0x5fa>
   8ee60:	06fb      	lsls	r3, r7, #27
   8ee62:	d406      	bmi.n	8ee72 <_vfprintf_r+0x5f2>
   8ee64:	067d      	lsls	r5, r7, #25
   8ee66:	d504      	bpl.n	8ee72 <_vfprintf_r+0x5f2>
   8ee68:	f8d8 3000 	ldr.w	r3, [r8]
   8ee6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8ee6e:	801c      	strh	r4, [r3, #0]
   8ee70:	e003      	b.n	8ee7a <_vfprintf_r+0x5fa>
   8ee72:	f8d8 3000 	ldr.w	r3, [r8]
   8ee76:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8ee78:	601d      	str	r5, [r3, #0]
   8ee7a:	4688      	mov	r8, r1
   8ee7c:	e557      	b.n	8e92e <_vfprintf_r+0xae>
   8ee7e:	f047 0710 	orr.w	r7, r7, #16
   8ee82:	f017 0320 	ands.w	r3, r7, #32
   8ee86:	d009      	beq.n	8ee9c <_vfprintf_r+0x61c>
   8ee88:	f108 0807 	add.w	r8, r8, #7
   8ee8c:	f028 0307 	bic.w	r3, r8, #7
   8ee90:	f103 0808 	add.w	r8, r3, #8
   8ee94:	e9d3 4500 	ldrd	r4, r5, [r3]
   8ee98:	2300      	movs	r3, #0
   8ee9a:	e088      	b.n	8efae <_vfprintf_r+0x72e>
   8ee9c:	f017 0110 	ands.w	r1, r7, #16
   8eea0:	f108 0204 	add.w	r2, r8, #4
   8eea4:	d107      	bne.n	8eeb6 <_vfprintf_r+0x636>
   8eea6:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   8eeaa:	d004      	beq.n	8eeb6 <_vfprintf_r+0x636>
   8eeac:	f8b8 4000 	ldrh.w	r4, [r8]
   8eeb0:	2500      	movs	r5, #0
   8eeb2:	4690      	mov	r8, r2
   8eeb4:	e7f0      	b.n	8ee98 <_vfprintf_r+0x618>
   8eeb6:	f8d8 4000 	ldr.w	r4, [r8]
   8eeba:	2500      	movs	r5, #0
   8eebc:	4690      	mov	r8, r2
   8eebe:	e076      	b.n	8efae <_vfprintf_r+0x72e>
   8eec0:	48a9      	ldr	r0, [pc, #676]	; (8f168 <_vfprintf_r+0x8e8>)
   8eec2:	2330      	movs	r3, #48	; 0x30
   8eec4:	2278      	movs	r2, #120	; 0x78
   8eec6:	f8d8 4000 	ldr.w	r4, [r8]
   8eeca:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8eece:	2500      	movs	r5, #0
   8eed0:	f047 0702 	orr.w	r7, r7, #2
   8eed4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8eed8:	f108 0804 	add.w	r8, r8, #4
   8eedc:	901b      	str	r0, [sp, #108]	; 0x6c
   8eede:	2302      	movs	r3, #2
   8eee0:	9208      	str	r2, [sp, #32]
   8eee2:	e064      	b.n	8efae <_vfprintf_r+0x72e>
   8eee4:	4643      	mov	r3, r8
   8eee6:	2500      	movs	r5, #0
   8eee8:	681b      	ldr	r3, [r3, #0]
   8eeea:	45ab      	cmp	fp, r5
   8eeec:	9307      	str	r3, [sp, #28]
   8eeee:	f108 0804 	add.w	r8, r8, #4
   8eef2:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8eef6:	db0d      	blt.n	8ef14 <_vfprintf_r+0x694>
   8eef8:	4618      	mov	r0, r3
   8eefa:	4629      	mov	r1, r5
   8eefc:	465a      	mov	r2, fp
   8eefe:	f002 f923 	bl	91148 <memchr>
   8ef02:	2800      	cmp	r0, #0
   8ef04:	f000 80e4 	beq.w	8f0d0 <_vfprintf_r+0x850>
   8ef08:	9c07      	ldr	r4, [sp, #28]
   8ef0a:	1b00      	subs	r0, r0, r4
   8ef0c:	4558      	cmp	r0, fp
   8ef0e:	bfb8      	it	lt
   8ef10:	4683      	movlt	fp, r0
   8ef12:	e0de      	b.n	8f0d2 <_vfprintf_r+0x852>
   8ef14:	9807      	ldr	r0, [sp, #28]
   8ef16:	f7fd ffd4 	bl	8cec2 <strlen>
   8ef1a:	4683      	mov	fp, r0
   8ef1c:	e0d9      	b.n	8f0d2 <_vfprintf_r+0x852>
   8ef1e:	f047 0710 	orr.w	r7, r7, #16
   8ef22:	06bc      	lsls	r4, r7, #26
   8ef24:	d508      	bpl.n	8ef38 <_vfprintf_r+0x6b8>
   8ef26:	f108 0807 	add.w	r8, r8, #7
   8ef2a:	f028 0307 	bic.w	r3, r8, #7
   8ef2e:	f103 0808 	add.w	r8, r3, #8
   8ef32:	e9d3 4500 	ldrd	r4, r5, [r3]
   8ef36:	e00d      	b.n	8ef54 <_vfprintf_r+0x6d4>
   8ef38:	f017 0f10 	tst.w	r7, #16
   8ef3c:	f108 0304 	add.w	r3, r8, #4
   8ef40:	d104      	bne.n	8ef4c <_vfprintf_r+0x6cc>
   8ef42:	0678      	lsls	r0, r7, #25
   8ef44:	d502      	bpl.n	8ef4c <_vfprintf_r+0x6cc>
   8ef46:	f8b8 4000 	ldrh.w	r4, [r8]
   8ef4a:	e001      	b.n	8ef50 <_vfprintf_r+0x6d0>
   8ef4c:	f8d8 4000 	ldr.w	r4, [r8]
   8ef50:	2500      	movs	r5, #0
   8ef52:	4698      	mov	r8, r3
   8ef54:	2301      	movs	r3, #1
   8ef56:	e02a      	b.n	8efae <_vfprintf_r+0x72e>
   8ef58:	4d83      	ldr	r5, [pc, #524]	; (8f168 <_vfprintf_r+0x8e8>)
   8ef5a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8ef5e:	951b      	str	r5, [sp, #108]	; 0x6c
   8ef60:	06b9      	lsls	r1, r7, #26
   8ef62:	d508      	bpl.n	8ef76 <_vfprintf_r+0x6f6>
   8ef64:	f108 0807 	add.w	r8, r8, #7
   8ef68:	f028 0307 	bic.w	r3, r8, #7
   8ef6c:	f103 0808 	add.w	r8, r3, #8
   8ef70:	e9d3 4500 	ldrd	r4, r5, [r3]
   8ef74:	e00d      	b.n	8ef92 <_vfprintf_r+0x712>
   8ef76:	f017 0f10 	tst.w	r7, #16
   8ef7a:	f108 0304 	add.w	r3, r8, #4
   8ef7e:	d104      	bne.n	8ef8a <_vfprintf_r+0x70a>
   8ef80:	067a      	lsls	r2, r7, #25
   8ef82:	d502      	bpl.n	8ef8a <_vfprintf_r+0x70a>
   8ef84:	f8b8 4000 	ldrh.w	r4, [r8]
   8ef88:	e001      	b.n	8ef8e <_vfprintf_r+0x70e>
   8ef8a:	f8d8 4000 	ldr.w	r4, [r8]
   8ef8e:	2500      	movs	r5, #0
   8ef90:	4698      	mov	r8, r3
   8ef92:	07fb      	lsls	r3, r7, #31
   8ef94:	d50a      	bpl.n	8efac <_vfprintf_r+0x72c>
   8ef96:	ea54 0005 	orrs.w	r0, r4, r5
   8ef9a:	d007      	beq.n	8efac <_vfprintf_r+0x72c>
   8ef9c:	9908      	ldr	r1, [sp, #32]
   8ef9e:	2330      	movs	r3, #48	; 0x30
   8efa0:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8efa4:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
   8efa8:	f047 0702 	orr.w	r7, r7, #2
   8efac:	2302      	movs	r3, #2
   8efae:	2200      	movs	r2, #0
   8efb0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   8efb4:	e000      	b.n	8efb8 <_vfprintf_r+0x738>
   8efb6:	2301      	movs	r3, #1
   8efb8:	f1bb 0f00 	cmp.w	fp, #0
   8efbc:	bfa8      	it	ge
   8efbe:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8efc2:	ea54 0205 	orrs.w	r2, r4, r5
   8efc6:	d102      	bne.n	8efce <_vfprintf_r+0x74e>
   8efc8:	f1bb 0f00 	cmp.w	fp, #0
   8efcc:	d05a      	beq.n	8f084 <_vfprintf_r+0x804>
   8efce:	2b01      	cmp	r3, #1
   8efd0:	d01f      	beq.n	8f012 <_vfprintf_r+0x792>
   8efd2:	2b02      	cmp	r3, #2
   8efd4:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
   8efd8:	d041      	beq.n	8f05e <_vfprintf_r+0x7de>
   8efda:	08e1      	lsrs	r1, r4, #3
   8efdc:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
   8efe0:	08e9      	lsrs	r1, r5, #3
   8efe2:	f004 0207 	and.w	r2, r4, #7
   8efe6:	9014      	str	r0, [sp, #80]	; 0x50
   8efe8:	9115      	str	r1, [sp, #84]	; 0x54
   8efea:	3230      	adds	r2, #48	; 0x30
   8efec:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   8eff0:	ea54 0005 	orrs.w	r0, r4, r5
   8eff4:	9307      	str	r3, [sp, #28]
   8eff6:	701a      	strb	r2, [r3, #0]
   8eff8:	f103 33ff 	add.w	r3, r3, #4294967295
   8effc:	d1ed      	bne.n	8efda <_vfprintf_r+0x75a>
   8effe:	07f8      	lsls	r0, r7, #31
   8f000:	9907      	ldr	r1, [sp, #28]
   8f002:	d54c      	bpl.n	8f09e <_vfprintf_r+0x81e>
   8f004:	2a30      	cmp	r2, #48	; 0x30
   8f006:	d04a      	beq.n	8f09e <_vfprintf_r+0x81e>
   8f008:	9307      	str	r3, [sp, #28]
   8f00a:	2330      	movs	r3, #48	; 0x30
   8f00c:	f801 3c01 	strb.w	r3, [r1, #-1]
   8f010:	e045      	b.n	8f09e <_vfprintf_r+0x81e>
   8f012:	2d00      	cmp	r5, #0
   8f014:	bf08      	it	eq
   8f016:	2c0a      	cmpeq	r4, #10
   8f018:	d205      	bcs.n	8f026 <_vfprintf_r+0x7a6>
   8f01a:	3430      	adds	r4, #48	; 0x30
   8f01c:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
   8f020:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
   8f024:	e03a      	b.n	8f09c <_vfprintf_r+0x81c>
   8f026:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
   8f02a:	900a      	str	r0, [sp, #40]	; 0x28
   8f02c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8f02e:	4620      	mov	r0, r4
   8f030:	9107      	str	r1, [sp, #28]
   8f032:	220a      	movs	r2, #10
   8f034:	4629      	mov	r1, r5
   8f036:	2300      	movs	r3, #0
   8f038:	f004 f922 	bl	93280 <__aeabi_uldivmod>
   8f03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8f03e:	3230      	adds	r2, #48	; 0x30
   8f040:	f803 2901 	strb.w	r2, [r3], #-1
   8f044:	930a      	str	r3, [sp, #40]	; 0x28
   8f046:	4620      	mov	r0, r4
   8f048:	4629      	mov	r1, r5
   8f04a:	220a      	movs	r2, #10
   8f04c:	2300      	movs	r3, #0
   8f04e:	f004 f917 	bl	93280 <__aeabi_uldivmod>
   8f052:	4604      	mov	r4, r0
   8f054:	460d      	mov	r5, r1
   8f056:	ea54 0005 	orrs.w	r0, r4, r5
   8f05a:	d1e7      	bne.n	8f02c <_vfprintf_r+0x7ac>
   8f05c:	e01f      	b.n	8f09e <_vfprintf_r+0x81e>
   8f05e:	991b      	ldr	r1, [sp, #108]	; 0x6c
   8f060:	f004 020f 	and.w	r2, r4, #15
   8f064:	5c8a      	ldrb	r2, [r1, r2]
   8f066:	9307      	str	r3, [sp, #28]
   8f068:	f803 2901 	strb.w	r2, [r3], #-1
   8f06c:	0922      	lsrs	r2, r4, #4
   8f06e:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   8f072:	0929      	lsrs	r1, r5, #4
   8f074:	9016      	str	r0, [sp, #88]	; 0x58
   8f076:	9117      	str	r1, [sp, #92]	; 0x5c
   8f078:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   8f07c:	ea54 0205 	orrs.w	r2, r4, r5
   8f080:	d1ed      	bne.n	8f05e <_vfprintf_r+0x7de>
   8f082:	e00c      	b.n	8f09e <_vfprintf_r+0x81e>
   8f084:	b933      	cbnz	r3, 8f094 <_vfprintf_r+0x814>
   8f086:	07fa      	lsls	r2, r7, #31
   8f088:	d507      	bpl.n	8f09a <_vfprintf_r+0x81a>
   8f08a:	ac42      	add	r4, sp, #264	; 0x108
   8f08c:	2330      	movs	r3, #48	; 0x30
   8f08e:	f804 3d41 	strb.w	r3, [r4, #-65]!
   8f092:	e003      	b.n	8f09c <_vfprintf_r+0x81c>
   8f094:	ad32      	add	r5, sp, #200	; 0xc8
   8f096:	9507      	str	r5, [sp, #28]
   8f098:	e001      	b.n	8f09e <_vfprintf_r+0x81e>
   8f09a:	ac32      	add	r4, sp, #200	; 0xc8
   8f09c:	9407      	str	r4, [sp, #28]
   8f09e:	9c07      	ldr	r4, [sp, #28]
   8f0a0:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
   8f0a4:	465d      	mov	r5, fp
   8f0a6:	ebc4 0b0c 	rsb	fp, r4, ip
   8f0aa:	2400      	movs	r4, #0
   8f0ac:	e012      	b.n	8f0d4 <_vfprintf_r+0x854>
   8f0ae:	9d08      	ldr	r5, [sp, #32]
   8f0b0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8f0b4:	2d00      	cmp	r5, #0
   8f0b6:	f000 8389 	beq.w	8f7cc <_vfprintf_r+0xf4c>
   8f0ba:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
   8f0be:	2500      	movs	r5, #0
   8f0c0:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8f0c4:	a828      	add	r0, sp, #160	; 0xa0
   8f0c6:	f04f 0b01 	mov.w	fp, #1
   8f0ca:	462c      	mov	r4, r5
   8f0cc:	9007      	str	r0, [sp, #28]
   8f0ce:	e001      	b.n	8f0d4 <_vfprintf_r+0x854>
   8f0d0:	4605      	mov	r5, r0
   8f0d2:	462c      	mov	r4, r5
   8f0d4:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
   8f0d8:	45ab      	cmp	fp, r5
   8f0da:	bfac      	ite	ge
   8f0dc:	4659      	movge	r1, fp
   8f0de:	4629      	movlt	r1, r5
   8f0e0:	910a      	str	r1, [sp, #40]	; 0x28
   8f0e2:	b10b      	cbz	r3, 8f0e8 <_vfprintf_r+0x868>
   8f0e4:	3101      	adds	r1, #1
   8f0e6:	910a      	str	r1, [sp, #40]	; 0x28
   8f0e8:	f017 0302 	ands.w	r3, r7, #2
   8f0ec:	9311      	str	r3, [sp, #68]	; 0x44
   8f0ee:	d002      	beq.n	8f0f6 <_vfprintf_r+0x876>
   8f0f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   8f0f2:	3002      	adds	r0, #2
   8f0f4:	900a      	str	r0, [sp, #40]	; 0x28
   8f0f6:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8f0fa:	9319      	str	r3, [sp, #100]	; 0x64
   8f0fc:	d141      	bne.n	8f182 <_vfprintf_r+0x902>
   8f0fe:	980e      	ldr	r0, [sp, #56]	; 0x38
   8f100:	990a      	ldr	r1, [sp, #40]	; 0x28
   8f102:	ebc1 0c00 	rsb	ip, r1, r0
   8f106:	f1bc 0f00 	cmp.w	ip, #0
   8f10a:	dd3a      	ble.n	8f182 <_vfprintf_r+0x902>
   8f10c:	4b17      	ldr	r3, [pc, #92]	; (8f16c <_vfprintf_r+0x8ec>)
   8f10e:	f1bc 0f10 	cmp.w	ip, #16
   8f112:	6033      	str	r3, [r6, #0]
   8f114:	dd1b      	ble.n	8f14e <_vfprintf_r+0x8ce>
   8f116:	2310      	movs	r3, #16
   8f118:	6073      	str	r3, [r6, #4]
   8f11a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f11c:	3310      	adds	r3, #16
   8f11e:	9327      	str	r3, [sp, #156]	; 0x9c
   8f120:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f122:	3301      	adds	r3, #1
   8f124:	2b07      	cmp	r3, #7
   8f126:	9326      	str	r3, [sp, #152]	; 0x98
   8f128:	dc01      	bgt.n	8f12e <_vfprintf_r+0x8ae>
   8f12a:	3608      	adds	r6, #8
   8f12c:	e00c      	b.n	8f148 <_vfprintf_r+0x8c8>
   8f12e:	4650      	mov	r0, sl
   8f130:	4649      	mov	r1, r9
   8f132:	aa25      	add	r2, sp, #148	; 0x94
   8f134:	f8cd c018 	str.w	ip, [sp, #24]
   8f138:	f7fe ff1c 	bl	8df74 <__sprint_r>
   8f13c:	f8dd c018 	ldr.w	ip, [sp, #24]
   8f140:	2800      	cmp	r0, #0
   8f142:	f040 834a 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f146:	ae32      	add	r6, sp, #200	; 0xc8
   8f148:	f1ac 0c10 	sub.w	ip, ip, #16
   8f14c:	e7de      	b.n	8f10c <_vfprintf_r+0x88c>
   8f14e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f150:	f8c6 c004 	str.w	ip, [r6, #4]
   8f154:	4463      	add	r3, ip
   8f156:	9327      	str	r3, [sp, #156]	; 0x9c
   8f158:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f15a:	3301      	adds	r3, #1
   8f15c:	2b07      	cmp	r3, #7
   8f15e:	9326      	str	r3, [sp, #152]	; 0x98
   8f160:	dc06      	bgt.n	8f170 <_vfprintf_r+0x8f0>
   8f162:	3608      	adds	r6, #8
   8f164:	e00d      	b.n	8f182 <_vfprintf_r+0x902>
   8f166:	bf00      	nop
   8f168:	000b11df 	.word	0x000b11df
   8f16c:	000b1212 	.word	0x000b1212
   8f170:	4650      	mov	r0, sl
   8f172:	4649      	mov	r1, r9
   8f174:	aa25      	add	r2, sp, #148	; 0x94
   8f176:	f7fe fefd 	bl	8df74 <__sprint_r>
   8f17a:	2800      	cmp	r0, #0
   8f17c:	f040 832d 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f180:	ae32      	add	r6, sp, #200	; 0xc8
   8f182:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
   8f186:	b1bb      	cbz	r3, 8f1b8 <_vfprintf_r+0x938>
   8f188:	f10d 0377 	add.w	r3, sp, #119	; 0x77
   8f18c:	6033      	str	r3, [r6, #0]
   8f18e:	2301      	movs	r3, #1
   8f190:	6073      	str	r3, [r6, #4]
   8f192:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f194:	3301      	adds	r3, #1
   8f196:	9327      	str	r3, [sp, #156]	; 0x9c
   8f198:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f19a:	3301      	adds	r3, #1
   8f19c:	2b07      	cmp	r3, #7
   8f19e:	9326      	str	r3, [sp, #152]	; 0x98
   8f1a0:	dc01      	bgt.n	8f1a6 <_vfprintf_r+0x926>
   8f1a2:	3608      	adds	r6, #8
   8f1a4:	e008      	b.n	8f1b8 <_vfprintf_r+0x938>
   8f1a6:	4650      	mov	r0, sl
   8f1a8:	4649      	mov	r1, r9
   8f1aa:	aa25      	add	r2, sp, #148	; 0x94
   8f1ac:	f7fe fee2 	bl	8df74 <__sprint_r>
   8f1b0:	2800      	cmp	r0, #0
   8f1b2:	f040 8312 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f1b6:	ae32      	add	r6, sp, #200	; 0xc8
   8f1b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8f1ba:	b1b3      	cbz	r3, 8f1ea <_vfprintf_r+0x96a>
   8f1bc:	ab1e      	add	r3, sp, #120	; 0x78
   8f1be:	6033      	str	r3, [r6, #0]
   8f1c0:	2302      	movs	r3, #2
   8f1c2:	6073      	str	r3, [r6, #4]
   8f1c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f1c6:	3302      	adds	r3, #2
   8f1c8:	9327      	str	r3, [sp, #156]	; 0x9c
   8f1ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f1cc:	3301      	adds	r3, #1
   8f1ce:	2b07      	cmp	r3, #7
   8f1d0:	9326      	str	r3, [sp, #152]	; 0x98
   8f1d2:	dc01      	bgt.n	8f1d8 <_vfprintf_r+0x958>
   8f1d4:	3608      	adds	r6, #8
   8f1d6:	e008      	b.n	8f1ea <_vfprintf_r+0x96a>
   8f1d8:	4650      	mov	r0, sl
   8f1da:	4649      	mov	r1, r9
   8f1dc:	aa25      	add	r2, sp, #148	; 0x94
   8f1de:	f7fe fec9 	bl	8df74 <__sprint_r>
   8f1e2:	2800      	cmp	r0, #0
   8f1e4:	f040 82f9 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f1e8:	ae32      	add	r6, sp, #200	; 0xc8
   8f1ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8f1ec:	2b80      	cmp	r3, #128	; 0x80
   8f1ee:	d13c      	bne.n	8f26a <_vfprintf_r+0x9ea>
   8f1f0:	980e      	ldr	r0, [sp, #56]	; 0x38
   8f1f2:	990a      	ldr	r1, [sp, #40]	; 0x28
   8f1f4:	ebc1 0c00 	rsb	ip, r1, r0
   8f1f8:	f1bc 0f00 	cmp.w	ip, #0
   8f1fc:	dd35      	ble.n	8f26a <_vfprintf_r+0x9ea>
   8f1fe:	4b9c      	ldr	r3, [pc, #624]	; (8f470 <_vfprintf_r+0xbf0>)
   8f200:	f1bc 0f10 	cmp.w	ip, #16
   8f204:	6033      	str	r3, [r6, #0]
   8f206:	dd1b      	ble.n	8f240 <_vfprintf_r+0x9c0>
   8f208:	2310      	movs	r3, #16
   8f20a:	6073      	str	r3, [r6, #4]
   8f20c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f20e:	3310      	adds	r3, #16
   8f210:	9327      	str	r3, [sp, #156]	; 0x9c
   8f212:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f214:	3301      	adds	r3, #1
   8f216:	2b07      	cmp	r3, #7
   8f218:	9326      	str	r3, [sp, #152]	; 0x98
   8f21a:	dc01      	bgt.n	8f220 <_vfprintf_r+0x9a0>
   8f21c:	3608      	adds	r6, #8
   8f21e:	e00c      	b.n	8f23a <_vfprintf_r+0x9ba>
   8f220:	4650      	mov	r0, sl
   8f222:	4649      	mov	r1, r9
   8f224:	aa25      	add	r2, sp, #148	; 0x94
   8f226:	f8cd c018 	str.w	ip, [sp, #24]
   8f22a:	f7fe fea3 	bl	8df74 <__sprint_r>
   8f22e:	f8dd c018 	ldr.w	ip, [sp, #24]
   8f232:	2800      	cmp	r0, #0
   8f234:	f040 82d1 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f238:	ae32      	add	r6, sp, #200	; 0xc8
   8f23a:	f1ac 0c10 	sub.w	ip, ip, #16
   8f23e:	e7de      	b.n	8f1fe <_vfprintf_r+0x97e>
   8f240:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f242:	f8c6 c004 	str.w	ip, [r6, #4]
   8f246:	4463      	add	r3, ip
   8f248:	9327      	str	r3, [sp, #156]	; 0x9c
   8f24a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f24c:	3301      	adds	r3, #1
   8f24e:	2b07      	cmp	r3, #7
   8f250:	9326      	str	r3, [sp, #152]	; 0x98
   8f252:	dc01      	bgt.n	8f258 <_vfprintf_r+0x9d8>
   8f254:	3608      	adds	r6, #8
   8f256:	e008      	b.n	8f26a <_vfprintf_r+0x9ea>
   8f258:	4650      	mov	r0, sl
   8f25a:	4649      	mov	r1, r9
   8f25c:	aa25      	add	r2, sp, #148	; 0x94
   8f25e:	f7fe fe89 	bl	8df74 <__sprint_r>
   8f262:	2800      	cmp	r0, #0
   8f264:	f040 82b9 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f268:	ae32      	add	r6, sp, #200	; 0xc8
   8f26a:	ebcb 0505 	rsb	r5, fp, r5
   8f26e:	2d00      	cmp	r5, #0
   8f270:	dd2e      	ble.n	8f2d0 <_vfprintf_r+0xa50>
   8f272:	4b7f      	ldr	r3, [pc, #508]	; (8f470 <_vfprintf_r+0xbf0>)
   8f274:	2d10      	cmp	r5, #16
   8f276:	6033      	str	r3, [r6, #0]
   8f278:	dd16      	ble.n	8f2a8 <_vfprintf_r+0xa28>
   8f27a:	2310      	movs	r3, #16
   8f27c:	6073      	str	r3, [r6, #4]
   8f27e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f280:	3310      	adds	r3, #16
   8f282:	9327      	str	r3, [sp, #156]	; 0x9c
   8f284:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f286:	3301      	adds	r3, #1
   8f288:	2b07      	cmp	r3, #7
   8f28a:	9326      	str	r3, [sp, #152]	; 0x98
   8f28c:	dc01      	bgt.n	8f292 <_vfprintf_r+0xa12>
   8f28e:	3608      	adds	r6, #8
   8f290:	e008      	b.n	8f2a4 <_vfprintf_r+0xa24>
   8f292:	4650      	mov	r0, sl
   8f294:	4649      	mov	r1, r9
   8f296:	aa25      	add	r2, sp, #148	; 0x94
   8f298:	f7fe fe6c 	bl	8df74 <__sprint_r>
   8f29c:	2800      	cmp	r0, #0
   8f29e:	f040 829c 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f2a2:	ae32      	add	r6, sp, #200	; 0xc8
   8f2a4:	3d10      	subs	r5, #16
   8f2a6:	e7e4      	b.n	8f272 <_vfprintf_r+0x9f2>
   8f2a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f2aa:	6075      	str	r5, [r6, #4]
   8f2ac:	441d      	add	r5, r3
   8f2ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f2b0:	9527      	str	r5, [sp, #156]	; 0x9c
   8f2b2:	3301      	adds	r3, #1
   8f2b4:	2b07      	cmp	r3, #7
   8f2b6:	9326      	str	r3, [sp, #152]	; 0x98
   8f2b8:	dc01      	bgt.n	8f2be <_vfprintf_r+0xa3e>
   8f2ba:	3608      	adds	r6, #8
   8f2bc:	e008      	b.n	8f2d0 <_vfprintf_r+0xa50>
   8f2be:	4650      	mov	r0, sl
   8f2c0:	4649      	mov	r1, r9
   8f2c2:	aa25      	add	r2, sp, #148	; 0x94
   8f2c4:	f7fe fe56 	bl	8df74 <__sprint_r>
   8f2c8:	2800      	cmp	r0, #0
   8f2ca:	f040 8286 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f2ce:	ae32      	add	r6, sp, #200	; 0xc8
   8f2d0:	05fb      	lsls	r3, r7, #23
   8f2d2:	d405      	bmi.n	8f2e0 <_vfprintf_r+0xa60>
   8f2d4:	9c07      	ldr	r4, [sp, #28]
   8f2d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f2d8:	e886 0810 	stmia.w	r6, {r4, fp}
   8f2dc:	445b      	add	r3, fp
   8f2de:	e0da      	b.n	8f496 <_vfprintf_r+0xc16>
   8f2e0:	9d08      	ldr	r5, [sp, #32]
   8f2e2:	2d65      	cmp	r5, #101	; 0x65
   8f2e4:	f340 81a7 	ble.w	8f636 <_vfprintf_r+0xdb6>
   8f2e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8f2ec:	2200      	movs	r2, #0
   8f2ee:	2300      	movs	r3, #0
   8f2f0:	f003 ff6c 	bl	931cc <__aeabi_dcmpeq>
   8f2f4:	2800      	cmp	r0, #0
   8f2f6:	d059      	beq.n	8f3ac <_vfprintf_r+0xb2c>
   8f2f8:	4b5e      	ldr	r3, [pc, #376]	; (8f474 <_vfprintf_r+0xbf4>)
   8f2fa:	6033      	str	r3, [r6, #0]
   8f2fc:	2301      	movs	r3, #1
   8f2fe:	6073      	str	r3, [r6, #4]
   8f300:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f302:	3301      	adds	r3, #1
   8f304:	9327      	str	r3, [sp, #156]	; 0x9c
   8f306:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f308:	3301      	adds	r3, #1
   8f30a:	2b07      	cmp	r3, #7
   8f30c:	9326      	str	r3, [sp, #152]	; 0x98
   8f30e:	dc01      	bgt.n	8f314 <_vfprintf_r+0xa94>
   8f310:	3608      	adds	r6, #8
   8f312:	e008      	b.n	8f326 <_vfprintf_r+0xaa6>
   8f314:	4650      	mov	r0, sl
   8f316:	4649      	mov	r1, r9
   8f318:	aa25      	add	r2, sp, #148	; 0x94
   8f31a:	f7fe fe2b 	bl	8df74 <__sprint_r>
   8f31e:	2800      	cmp	r0, #0
   8f320:	f040 825b 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f324:	ae32      	add	r6, sp, #200	; 0xc8
   8f326:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8f328:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8f32a:	42a3      	cmp	r3, r4
   8f32c:	db02      	blt.n	8f334 <_vfprintf_r+0xab4>
   8f32e:	07fd      	lsls	r5, r7, #31
   8f330:	f140 8202 	bpl.w	8f738 <_vfprintf_r+0xeb8>
   8f334:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8f336:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f338:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8f33a:	4423      	add	r3, r4
   8f33c:	9327      	str	r3, [sp, #156]	; 0x9c
   8f33e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f340:	6035      	str	r5, [r6, #0]
   8f342:	3301      	adds	r3, #1
   8f344:	2b07      	cmp	r3, #7
   8f346:	6074      	str	r4, [r6, #4]
   8f348:	9326      	str	r3, [sp, #152]	; 0x98
   8f34a:	dc01      	bgt.n	8f350 <_vfprintf_r+0xad0>
   8f34c:	3608      	adds	r6, #8
   8f34e:	e008      	b.n	8f362 <_vfprintf_r+0xae2>
   8f350:	4650      	mov	r0, sl
   8f352:	4649      	mov	r1, r9
   8f354:	aa25      	add	r2, sp, #148	; 0x94
   8f356:	f7fe fe0d 	bl	8df74 <__sprint_r>
   8f35a:	2800      	cmp	r0, #0
   8f35c:	f040 823d 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f360:	ae32      	add	r6, sp, #200	; 0xc8
   8f362:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8f364:	1e6c      	subs	r4, r5, #1
   8f366:	2c00      	cmp	r4, #0
   8f368:	f340 81e6 	ble.w	8f738 <_vfprintf_r+0xeb8>
   8f36c:	4b40      	ldr	r3, [pc, #256]	; (8f470 <_vfprintf_r+0xbf0>)
   8f36e:	2c10      	cmp	r4, #16
   8f370:	6033      	str	r3, [r6, #0]
   8f372:	dd16      	ble.n	8f3a2 <_vfprintf_r+0xb22>
   8f374:	2310      	movs	r3, #16
   8f376:	6073      	str	r3, [r6, #4]
   8f378:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f37a:	3310      	adds	r3, #16
   8f37c:	9327      	str	r3, [sp, #156]	; 0x9c
   8f37e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f380:	3301      	adds	r3, #1
   8f382:	2b07      	cmp	r3, #7
   8f384:	9326      	str	r3, [sp, #152]	; 0x98
   8f386:	dc01      	bgt.n	8f38c <_vfprintf_r+0xb0c>
   8f388:	3608      	adds	r6, #8
   8f38a:	e008      	b.n	8f39e <_vfprintf_r+0xb1e>
   8f38c:	4650      	mov	r0, sl
   8f38e:	4649      	mov	r1, r9
   8f390:	aa25      	add	r2, sp, #148	; 0x94
   8f392:	f7fe fdef 	bl	8df74 <__sprint_r>
   8f396:	2800      	cmp	r0, #0
   8f398:	f040 821f 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f39c:	ae32      	add	r6, sp, #200	; 0xc8
   8f39e:	3c10      	subs	r4, #16
   8f3a0:	e7e4      	b.n	8f36c <_vfprintf_r+0xaec>
   8f3a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f3a4:	6074      	str	r4, [r6, #4]
   8f3a6:	441c      	add	r4, r3
   8f3a8:	9427      	str	r4, [sp, #156]	; 0x9c
   8f3aa:	e134      	b.n	8f616 <_vfprintf_r+0xd96>
   8f3ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8f3ae:	2b00      	cmp	r3, #0
   8f3b0:	dc73      	bgt.n	8f49a <_vfprintf_r+0xc1a>
   8f3b2:	4b30      	ldr	r3, [pc, #192]	; (8f474 <_vfprintf_r+0xbf4>)
   8f3b4:	6033      	str	r3, [r6, #0]
   8f3b6:	2301      	movs	r3, #1
   8f3b8:	6073      	str	r3, [r6, #4]
   8f3ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f3bc:	3301      	adds	r3, #1
   8f3be:	9327      	str	r3, [sp, #156]	; 0x9c
   8f3c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f3c2:	3301      	adds	r3, #1
   8f3c4:	2b07      	cmp	r3, #7
   8f3c6:	9326      	str	r3, [sp, #152]	; 0x98
   8f3c8:	dc01      	bgt.n	8f3ce <_vfprintf_r+0xb4e>
   8f3ca:	3608      	adds	r6, #8
   8f3cc:	e008      	b.n	8f3e0 <_vfprintf_r+0xb60>
   8f3ce:	4650      	mov	r0, sl
   8f3d0:	4649      	mov	r1, r9
   8f3d2:	aa25      	add	r2, sp, #148	; 0x94
   8f3d4:	f7fe fdce 	bl	8df74 <__sprint_r>
   8f3d8:	2800      	cmp	r0, #0
   8f3da:	f040 81fe 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f3de:	ae32      	add	r6, sp, #200	; 0xc8
   8f3e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8f3e2:	b923      	cbnz	r3, 8f3ee <_vfprintf_r+0xb6e>
   8f3e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8f3e6:	b914      	cbnz	r4, 8f3ee <_vfprintf_r+0xb6e>
   8f3e8:	07fc      	lsls	r4, r7, #31
   8f3ea:	f140 81a5 	bpl.w	8f738 <_vfprintf_r+0xeb8>
   8f3ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8f3f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f3f2:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8f3f4:	4423      	add	r3, r4
   8f3f6:	9327      	str	r3, [sp, #156]	; 0x9c
   8f3f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f3fa:	6035      	str	r5, [r6, #0]
   8f3fc:	3301      	adds	r3, #1
   8f3fe:	2b07      	cmp	r3, #7
   8f400:	6074      	str	r4, [r6, #4]
   8f402:	9326      	str	r3, [sp, #152]	; 0x98
   8f404:	dc01      	bgt.n	8f40a <_vfprintf_r+0xb8a>
   8f406:	3608      	adds	r6, #8
   8f408:	e008      	b.n	8f41c <_vfprintf_r+0xb9c>
   8f40a:	4650      	mov	r0, sl
   8f40c:	4649      	mov	r1, r9
   8f40e:	aa25      	add	r2, sp, #148	; 0x94
   8f410:	f7fe fdb0 	bl	8df74 <__sprint_r>
   8f414:	2800      	cmp	r0, #0
   8f416:	f040 81e0 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f41a:	ae32      	add	r6, sp, #200	; 0xc8
   8f41c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   8f41e:	4264      	negs	r4, r4
   8f420:	2c00      	cmp	r4, #0
   8f422:	dd32      	ble.n	8f48a <_vfprintf_r+0xc0a>
   8f424:	4b12      	ldr	r3, [pc, #72]	; (8f470 <_vfprintf_r+0xbf0>)
   8f426:	2c10      	cmp	r4, #16
   8f428:	6033      	str	r3, [r6, #0]
   8f42a:	dd16      	ble.n	8f45a <_vfprintf_r+0xbda>
   8f42c:	2310      	movs	r3, #16
   8f42e:	6073      	str	r3, [r6, #4]
   8f430:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f432:	3310      	adds	r3, #16
   8f434:	9327      	str	r3, [sp, #156]	; 0x9c
   8f436:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f438:	3301      	adds	r3, #1
   8f43a:	2b07      	cmp	r3, #7
   8f43c:	9326      	str	r3, [sp, #152]	; 0x98
   8f43e:	dc01      	bgt.n	8f444 <_vfprintf_r+0xbc4>
   8f440:	3608      	adds	r6, #8
   8f442:	e008      	b.n	8f456 <_vfprintf_r+0xbd6>
   8f444:	4650      	mov	r0, sl
   8f446:	4649      	mov	r1, r9
   8f448:	aa25      	add	r2, sp, #148	; 0x94
   8f44a:	f7fe fd93 	bl	8df74 <__sprint_r>
   8f44e:	2800      	cmp	r0, #0
   8f450:	f040 81c3 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f454:	ae32      	add	r6, sp, #200	; 0xc8
   8f456:	3c10      	subs	r4, #16
   8f458:	e7e4      	b.n	8f424 <_vfprintf_r+0xba4>
   8f45a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f45c:	6074      	str	r4, [r6, #4]
   8f45e:	441c      	add	r4, r3
   8f460:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f462:	9427      	str	r4, [sp, #156]	; 0x9c
   8f464:	3301      	adds	r3, #1
   8f466:	2b07      	cmp	r3, #7
   8f468:	9326      	str	r3, [sp, #152]	; 0x98
   8f46a:	dc05      	bgt.n	8f478 <_vfprintf_r+0xbf8>
   8f46c:	3608      	adds	r6, #8
   8f46e:	e00c      	b.n	8f48a <_vfprintf_r+0xc0a>
   8f470:	000b1222 	.word	0x000b1222
   8f474:	000b11f0 	.word	0x000b11f0
   8f478:	4650      	mov	r0, sl
   8f47a:	4649      	mov	r1, r9
   8f47c:	aa25      	add	r2, sp, #148	; 0x94
   8f47e:	f7fe fd79 	bl	8df74 <__sprint_r>
   8f482:	2800      	cmp	r0, #0
   8f484:	f040 81a9 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f488:	ae32      	add	r6, sp, #200	; 0xc8
   8f48a:	9d07      	ldr	r5, [sp, #28]
   8f48c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8f48e:	6035      	str	r5, [r6, #0]
   8f490:	6074      	str	r4, [r6, #4]
   8f492:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f494:	4423      	add	r3, r4
   8f496:	9327      	str	r3, [sp, #156]	; 0x9c
   8f498:	e0bd      	b.n	8f616 <_vfprintf_r+0xd96>
   8f49a:	9809      	ldr	r0, [sp, #36]	; 0x24
   8f49c:	9d07      	ldr	r5, [sp, #28]
   8f49e:	4683      	mov	fp, r0
   8f4a0:	45a3      	cmp	fp, r4
   8f4a2:	bfa8      	it	ge
   8f4a4:	46a3      	movge	fp, r4
   8f4a6:	f1bb 0f00 	cmp.w	fp, #0
   8f4aa:	4405      	add	r5, r0
   8f4ac:	dd15      	ble.n	8f4da <_vfprintf_r+0xc5a>
   8f4ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f4b0:	9907      	ldr	r1, [sp, #28]
   8f4b2:	445b      	add	r3, fp
   8f4b4:	9327      	str	r3, [sp, #156]	; 0x9c
   8f4b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f4b8:	e886 0802 	stmia.w	r6, {r1, fp}
   8f4bc:	3301      	adds	r3, #1
   8f4be:	2b07      	cmp	r3, #7
   8f4c0:	9326      	str	r3, [sp, #152]	; 0x98
   8f4c2:	dc01      	bgt.n	8f4c8 <_vfprintf_r+0xc48>
   8f4c4:	3608      	adds	r6, #8
   8f4c6:	e008      	b.n	8f4da <_vfprintf_r+0xc5a>
   8f4c8:	4650      	mov	r0, sl
   8f4ca:	4649      	mov	r1, r9
   8f4cc:	aa25      	add	r2, sp, #148	; 0x94
   8f4ce:	f7fe fd51 	bl	8df74 <__sprint_r>
   8f4d2:	2800      	cmp	r0, #0
   8f4d4:	f040 8181 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f4d8:	ae32      	add	r6, sp, #200	; 0xc8
   8f4da:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
   8f4de:	ebcb 0b04 	rsb	fp, fp, r4
   8f4e2:	f1bb 0f00 	cmp.w	fp, #0
   8f4e6:	dd31      	ble.n	8f54c <_vfprintf_r+0xccc>
   8f4e8:	4b9a      	ldr	r3, [pc, #616]	; (8f754 <_vfprintf_r+0xed4>)
   8f4ea:	f1bb 0f10 	cmp.w	fp, #16
   8f4ee:	6033      	str	r3, [r6, #0]
   8f4f0:	dd17      	ble.n	8f522 <_vfprintf_r+0xca2>
   8f4f2:	2310      	movs	r3, #16
   8f4f4:	6073      	str	r3, [r6, #4]
   8f4f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f4f8:	3310      	adds	r3, #16
   8f4fa:	9327      	str	r3, [sp, #156]	; 0x9c
   8f4fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f4fe:	3301      	adds	r3, #1
   8f500:	2b07      	cmp	r3, #7
   8f502:	9326      	str	r3, [sp, #152]	; 0x98
   8f504:	dc01      	bgt.n	8f50a <_vfprintf_r+0xc8a>
   8f506:	3608      	adds	r6, #8
   8f508:	e008      	b.n	8f51c <_vfprintf_r+0xc9c>
   8f50a:	4650      	mov	r0, sl
   8f50c:	4649      	mov	r1, r9
   8f50e:	aa25      	add	r2, sp, #148	; 0x94
   8f510:	f7fe fd30 	bl	8df74 <__sprint_r>
   8f514:	2800      	cmp	r0, #0
   8f516:	f040 8160 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f51a:	ae32      	add	r6, sp, #200	; 0xc8
   8f51c:	f1ab 0b10 	sub.w	fp, fp, #16
   8f520:	e7e2      	b.n	8f4e8 <_vfprintf_r+0xc68>
   8f522:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f524:	f8c6 b004 	str.w	fp, [r6, #4]
   8f528:	445b      	add	r3, fp
   8f52a:	9327      	str	r3, [sp, #156]	; 0x9c
   8f52c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f52e:	3301      	adds	r3, #1
   8f530:	2b07      	cmp	r3, #7
   8f532:	9326      	str	r3, [sp, #152]	; 0x98
   8f534:	dc01      	bgt.n	8f53a <_vfprintf_r+0xcba>
   8f536:	3608      	adds	r6, #8
   8f538:	e008      	b.n	8f54c <_vfprintf_r+0xccc>
   8f53a:	4650      	mov	r0, sl
   8f53c:	4649      	mov	r1, r9
   8f53e:	aa25      	add	r2, sp, #148	; 0x94
   8f540:	f7fe fd18 	bl	8df74 <__sprint_r>
   8f544:	2800      	cmp	r0, #0
   8f546:	f040 8148 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f54a:	ae32      	add	r6, sp, #200	; 0xc8
   8f54c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8f54e:	9809      	ldr	r0, [sp, #36]	; 0x24
   8f550:	9a07      	ldr	r2, [sp, #28]
   8f552:	4283      	cmp	r3, r0
   8f554:	4414      	add	r4, r2
   8f556:	db01      	blt.n	8f55c <_vfprintf_r+0xcdc>
   8f558:	07f8      	lsls	r0, r7, #31
   8f55a:	d516      	bpl.n	8f58a <_vfprintf_r+0xd0a>
   8f55c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8f55e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f560:	9918      	ldr	r1, [sp, #96]	; 0x60
   8f562:	4413      	add	r3, r2
   8f564:	9327      	str	r3, [sp, #156]	; 0x9c
   8f566:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f568:	6031      	str	r1, [r6, #0]
   8f56a:	3301      	adds	r3, #1
   8f56c:	2b07      	cmp	r3, #7
   8f56e:	6072      	str	r2, [r6, #4]
   8f570:	9326      	str	r3, [sp, #152]	; 0x98
   8f572:	dc01      	bgt.n	8f578 <_vfprintf_r+0xcf8>
   8f574:	3608      	adds	r6, #8
   8f576:	e008      	b.n	8f58a <_vfprintf_r+0xd0a>
   8f578:	4650      	mov	r0, sl
   8f57a:	4649      	mov	r1, r9
   8f57c:	aa25      	add	r2, sp, #148	; 0x94
   8f57e:	f7fe fcf9 	bl	8df74 <__sprint_r>
   8f582:	2800      	cmp	r0, #0
   8f584:	f040 8129 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f588:	ae32      	add	r6, sp, #200	; 0xc8
   8f58a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8f58c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8f58e:	1b2d      	subs	r5, r5, r4
   8f590:	1ac3      	subs	r3, r0, r3
   8f592:	429d      	cmp	r5, r3
   8f594:	bfa8      	it	ge
   8f596:	461d      	movge	r5, r3
   8f598:	2d00      	cmp	r5, #0
   8f59a:	dd14      	ble.n	8f5c6 <_vfprintf_r+0xd46>
   8f59c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f59e:	e886 0030 	stmia.w	r6, {r4, r5}
   8f5a2:	442b      	add	r3, r5
   8f5a4:	9327      	str	r3, [sp, #156]	; 0x9c
   8f5a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f5a8:	3301      	adds	r3, #1
   8f5aa:	2b07      	cmp	r3, #7
   8f5ac:	9326      	str	r3, [sp, #152]	; 0x98
   8f5ae:	dc01      	bgt.n	8f5b4 <_vfprintf_r+0xd34>
   8f5b0:	3608      	adds	r6, #8
   8f5b2:	e008      	b.n	8f5c6 <_vfprintf_r+0xd46>
   8f5b4:	4650      	mov	r0, sl
   8f5b6:	4649      	mov	r1, r9
   8f5b8:	aa25      	add	r2, sp, #148	; 0x94
   8f5ba:	f7fe fcdb 	bl	8df74 <__sprint_r>
   8f5be:	2800      	cmp	r0, #0
   8f5c0:	f040 810b 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f5c4:	ae32      	add	r6, sp, #200	; 0xc8
   8f5c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8f5c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8f5ca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   8f5ce:	1ae3      	subs	r3, r4, r3
   8f5d0:	1b5d      	subs	r5, r3, r5
   8f5d2:	2d00      	cmp	r5, #0
   8f5d4:	f340 80b0 	ble.w	8f738 <_vfprintf_r+0xeb8>
   8f5d8:	4b5e      	ldr	r3, [pc, #376]	; (8f754 <_vfprintf_r+0xed4>)
   8f5da:	2d10      	cmp	r5, #16
   8f5dc:	6033      	str	r3, [r6, #0]
   8f5de:	dd16      	ble.n	8f60e <_vfprintf_r+0xd8e>
   8f5e0:	2310      	movs	r3, #16
   8f5e2:	6073      	str	r3, [r6, #4]
   8f5e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f5e6:	3310      	adds	r3, #16
   8f5e8:	9327      	str	r3, [sp, #156]	; 0x9c
   8f5ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f5ec:	3301      	adds	r3, #1
   8f5ee:	2b07      	cmp	r3, #7
   8f5f0:	9326      	str	r3, [sp, #152]	; 0x98
   8f5f2:	dc01      	bgt.n	8f5f8 <_vfprintf_r+0xd78>
   8f5f4:	3608      	adds	r6, #8
   8f5f6:	e008      	b.n	8f60a <_vfprintf_r+0xd8a>
   8f5f8:	4650      	mov	r0, sl
   8f5fa:	4649      	mov	r1, r9
   8f5fc:	aa25      	add	r2, sp, #148	; 0x94
   8f5fe:	f7fe fcb9 	bl	8df74 <__sprint_r>
   8f602:	2800      	cmp	r0, #0
   8f604:	f040 80e9 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f608:	ae32      	add	r6, sp, #200	; 0xc8
   8f60a:	3d10      	subs	r5, #16
   8f60c:	e7e4      	b.n	8f5d8 <_vfprintf_r+0xd58>
   8f60e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f610:	6075      	str	r5, [r6, #4]
   8f612:	441d      	add	r5, r3
   8f614:	9527      	str	r5, [sp, #156]	; 0x9c
   8f616:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f618:	3301      	adds	r3, #1
   8f61a:	2b07      	cmp	r3, #7
   8f61c:	9326      	str	r3, [sp, #152]	; 0x98
   8f61e:	f340 808a 	ble.w	8f736 <_vfprintf_r+0xeb6>
   8f622:	4650      	mov	r0, sl
   8f624:	4649      	mov	r1, r9
   8f626:	aa25      	add	r2, sp, #148	; 0x94
   8f628:	f7fe fca4 	bl	8df74 <__sprint_r>
   8f62c:	2800      	cmp	r0, #0
   8f62e:	f040 80d4 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f632:	ae32      	add	r6, sp, #200	; 0xc8
   8f634:	e080      	b.n	8f738 <_vfprintf_r+0xeb8>
   8f636:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8f638:	2d01      	cmp	r5, #1
   8f63a:	dc01      	bgt.n	8f640 <_vfprintf_r+0xdc0>
   8f63c:	07f9      	lsls	r1, r7, #31
   8f63e:	d56d      	bpl.n	8f71c <_vfprintf_r+0xe9c>
   8f640:	2301      	movs	r3, #1
   8f642:	6073      	str	r3, [r6, #4]
   8f644:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f646:	9c07      	ldr	r4, [sp, #28]
   8f648:	3301      	adds	r3, #1
   8f64a:	9327      	str	r3, [sp, #156]	; 0x9c
   8f64c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f64e:	6034      	str	r4, [r6, #0]
   8f650:	3301      	adds	r3, #1
   8f652:	2b07      	cmp	r3, #7
   8f654:	9326      	str	r3, [sp, #152]	; 0x98
   8f656:	dc01      	bgt.n	8f65c <_vfprintf_r+0xddc>
   8f658:	3608      	adds	r6, #8
   8f65a:	e008      	b.n	8f66e <_vfprintf_r+0xdee>
   8f65c:	4650      	mov	r0, sl
   8f65e:	4649      	mov	r1, r9
   8f660:	aa25      	add	r2, sp, #148	; 0x94
   8f662:	f7fe fc87 	bl	8df74 <__sprint_r>
   8f666:	2800      	cmp	r0, #0
   8f668:	f040 80b7 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f66c:	ae32      	add	r6, sp, #200	; 0xc8
   8f66e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8f670:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f672:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8f674:	4423      	add	r3, r4
   8f676:	9327      	str	r3, [sp, #156]	; 0x9c
   8f678:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f67a:	6035      	str	r5, [r6, #0]
   8f67c:	3301      	adds	r3, #1
   8f67e:	2b07      	cmp	r3, #7
   8f680:	6074      	str	r4, [r6, #4]
   8f682:	9326      	str	r3, [sp, #152]	; 0x98
   8f684:	dc01      	bgt.n	8f68a <_vfprintf_r+0xe0a>
   8f686:	3608      	adds	r6, #8
   8f688:	e008      	b.n	8f69c <_vfprintf_r+0xe1c>
   8f68a:	4650      	mov	r0, sl
   8f68c:	4649      	mov	r1, r9
   8f68e:	aa25      	add	r2, sp, #148	; 0x94
   8f690:	f7fe fc70 	bl	8df74 <__sprint_r>
   8f694:	2800      	cmp	r0, #0
   8f696:	f040 80a0 	bne.w	8f7da <_vfprintf_r+0xf5a>
   8f69a:	ae32      	add	r6, sp, #200	; 0xc8
   8f69c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8f6a0:	2200      	movs	r2, #0
   8f6a2:	2300      	movs	r3, #0
   8f6a4:	f003 fd92 	bl	931cc <__aeabi_dcmpeq>
   8f6a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8f6aa:	1e6c      	subs	r4, r5, #1
   8f6ac:	b940      	cbnz	r0, 8f6c0 <_vfprintf_r+0xe40>
   8f6ae:	9d07      	ldr	r5, [sp, #28]
   8f6b0:	1c6b      	adds	r3, r5, #1
   8f6b2:	e886 0018 	stmia.w	r6, {r3, r4}
   8f6b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f6b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8f6ba:	3b01      	subs	r3, #1
   8f6bc:	4423      	add	r3, r4
   8f6be:	e033      	b.n	8f728 <_vfprintf_r+0xea8>
   8f6c0:	2c00      	cmp	r4, #0
   8f6c2:	dd34      	ble.n	8f72e <_vfprintf_r+0xeae>
   8f6c4:	4b23      	ldr	r3, [pc, #140]	; (8f754 <_vfprintf_r+0xed4>)
   8f6c6:	2c10      	cmp	r4, #16
   8f6c8:	6033      	str	r3, [r6, #0]
   8f6ca:	dd15      	ble.n	8f6f8 <_vfprintf_r+0xe78>
   8f6cc:	2310      	movs	r3, #16
   8f6ce:	6073      	str	r3, [r6, #4]
   8f6d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f6d2:	3310      	adds	r3, #16
   8f6d4:	9327      	str	r3, [sp, #156]	; 0x9c
   8f6d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f6d8:	3301      	adds	r3, #1
   8f6da:	2b07      	cmp	r3, #7
   8f6dc:	9326      	str	r3, [sp, #152]	; 0x98
   8f6de:	dc01      	bgt.n	8f6e4 <_vfprintf_r+0xe64>
   8f6e0:	3608      	adds	r6, #8
   8f6e2:	e007      	b.n	8f6f4 <_vfprintf_r+0xe74>
   8f6e4:	4650      	mov	r0, sl
   8f6e6:	4649      	mov	r1, r9
   8f6e8:	aa25      	add	r2, sp, #148	; 0x94
   8f6ea:	f7fe fc43 	bl	8df74 <__sprint_r>
   8f6ee:	2800      	cmp	r0, #0
   8f6f0:	d173      	bne.n	8f7da <_vfprintf_r+0xf5a>
   8f6f2:	ae32      	add	r6, sp, #200	; 0xc8
   8f6f4:	3c10      	subs	r4, #16
   8f6f6:	e7e5      	b.n	8f6c4 <_vfprintf_r+0xe44>
   8f6f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f6fa:	6074      	str	r4, [r6, #4]
   8f6fc:	441c      	add	r4, r3
   8f6fe:	9427      	str	r4, [sp, #156]	; 0x9c
   8f700:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f702:	3301      	adds	r3, #1
   8f704:	2b07      	cmp	r3, #7
   8f706:	9326      	str	r3, [sp, #152]	; 0x98
   8f708:	dd10      	ble.n	8f72c <_vfprintf_r+0xeac>
   8f70a:	4650      	mov	r0, sl
   8f70c:	4649      	mov	r1, r9
   8f70e:	aa25      	add	r2, sp, #148	; 0x94
   8f710:	f7fe fc30 	bl	8df74 <__sprint_r>
   8f714:	2800      	cmp	r0, #0
   8f716:	d160      	bne.n	8f7da <_vfprintf_r+0xf5a>
   8f718:	ae32      	add	r6, sp, #200	; 0xc8
   8f71a:	e008      	b.n	8f72e <_vfprintf_r+0xeae>
   8f71c:	2301      	movs	r3, #1
   8f71e:	9d07      	ldr	r5, [sp, #28]
   8f720:	6073      	str	r3, [r6, #4]
   8f722:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f724:	6035      	str	r5, [r6, #0]
   8f726:	3301      	adds	r3, #1
   8f728:	9327      	str	r3, [sp, #156]	; 0x9c
   8f72a:	e7e9      	b.n	8f700 <_vfprintf_r+0xe80>
   8f72c:	3608      	adds	r6, #8
   8f72e:	ab21      	add	r3, sp, #132	; 0x84
   8f730:	6033      	str	r3, [r6, #0]
   8f732:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   8f734:	e6ac      	b.n	8f490 <_vfprintf_r+0xc10>
   8f736:	3608      	adds	r6, #8
   8f738:	077a      	lsls	r2, r7, #29
   8f73a:	d40d      	bmi.n	8f758 <_vfprintf_r+0xed8>
   8f73c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8f73e:	980a      	ldr	r0, [sp, #40]	; 0x28
   8f740:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8f742:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f744:	42a0      	cmp	r0, r4
   8f746:	bfac      	ite	ge
   8f748:	182d      	addge	r5, r5, r0
   8f74a:	192d      	addlt	r5, r5, r4
   8f74c:	950f      	str	r5, [sp, #60]	; 0x3c
   8f74e:	2b00      	cmp	r3, #0
   8f750:	d037      	beq.n	8f7c2 <_vfprintf_r+0xf42>
   8f752:	e030      	b.n	8f7b6 <_vfprintf_r+0xf36>
   8f754:	000b1222 	.word	0x000b1222
   8f758:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   8f75a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8f75c:	1a2c      	subs	r4, r5, r0
   8f75e:	2c00      	cmp	r4, #0
   8f760:	ddec      	ble.n	8f73c <_vfprintf_r+0xebc>
   8f762:	4b22      	ldr	r3, [pc, #136]	; (8f7ec <_vfprintf_r+0xf6c>)
   8f764:	2c10      	cmp	r4, #16
   8f766:	6033      	str	r3, [r6, #0]
   8f768:	dd14      	ble.n	8f794 <_vfprintf_r+0xf14>
   8f76a:	2310      	movs	r3, #16
   8f76c:	6073      	str	r3, [r6, #4]
   8f76e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f770:	3310      	adds	r3, #16
   8f772:	9327      	str	r3, [sp, #156]	; 0x9c
   8f774:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f776:	3301      	adds	r3, #1
   8f778:	2b07      	cmp	r3, #7
   8f77a:	9326      	str	r3, [sp, #152]	; 0x98
   8f77c:	dc01      	bgt.n	8f782 <_vfprintf_r+0xf02>
   8f77e:	3608      	adds	r6, #8
   8f780:	e006      	b.n	8f790 <_vfprintf_r+0xf10>
   8f782:	4650      	mov	r0, sl
   8f784:	4649      	mov	r1, r9
   8f786:	aa25      	add	r2, sp, #148	; 0x94
   8f788:	f7fe fbf4 	bl	8df74 <__sprint_r>
   8f78c:	bb28      	cbnz	r0, 8f7da <_vfprintf_r+0xf5a>
   8f78e:	ae32      	add	r6, sp, #200	; 0xc8
   8f790:	3c10      	subs	r4, #16
   8f792:	e7e6      	b.n	8f762 <_vfprintf_r+0xee2>
   8f794:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f796:	6074      	str	r4, [r6, #4]
   8f798:	441c      	add	r4, r3
   8f79a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8f79c:	9427      	str	r4, [sp, #156]	; 0x9c
   8f79e:	3301      	adds	r3, #1
   8f7a0:	2b07      	cmp	r3, #7
   8f7a2:	9326      	str	r3, [sp, #152]	; 0x98
   8f7a4:	ddca      	ble.n	8f73c <_vfprintf_r+0xebc>
   8f7a6:	4650      	mov	r0, sl
   8f7a8:	4649      	mov	r1, r9
   8f7aa:	aa25      	add	r2, sp, #148	; 0x94
   8f7ac:	f7fe fbe2 	bl	8df74 <__sprint_r>
   8f7b0:	2800      	cmp	r0, #0
   8f7b2:	d0c3      	beq.n	8f73c <_vfprintf_r+0xebc>
   8f7b4:	e011      	b.n	8f7da <_vfprintf_r+0xf5a>
   8f7b6:	4650      	mov	r0, sl
   8f7b8:	4649      	mov	r1, r9
   8f7ba:	aa25      	add	r2, sp, #148	; 0x94
   8f7bc:	f7fe fbda 	bl	8df74 <__sprint_r>
   8f7c0:	b958      	cbnz	r0, 8f7da <_vfprintf_r+0xf5a>
   8f7c2:	2300      	movs	r3, #0
   8f7c4:	9326      	str	r3, [sp, #152]	; 0x98
   8f7c6:	ae32      	add	r6, sp, #200	; 0xc8
   8f7c8:	f7ff b8b1 	b.w	8e92e <_vfprintf_r+0xae>
   8f7cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8f7ce:	b123      	cbz	r3, 8f7da <_vfprintf_r+0xf5a>
   8f7d0:	4650      	mov	r0, sl
   8f7d2:	4649      	mov	r1, r9
   8f7d4:	aa25      	add	r2, sp, #148	; 0x94
   8f7d6:	f7fe fbcd 	bl	8df74 <__sprint_r>
   8f7da:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8f7de:	065b      	lsls	r3, r3, #25
   8f7e0:	f53f a888 	bmi.w	8e8f4 <_vfprintf_r+0x74>
   8f7e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8f7e6:	b043      	add	sp, #268	; 0x10c
   8f7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8f7ec:	000b1212 	.word	0x000b1212

0008f7f0 <vfprintf>:
   8f7f0:	b530      	push	{r4, r5, lr}
   8f7f2:	4613      	mov	r3, r2
   8f7f4:	4a04      	ldr	r2, [pc, #16]	; (8f808 <vfprintf+0x18>)
   8f7f6:	4605      	mov	r5, r0
   8f7f8:	460c      	mov	r4, r1
   8f7fa:	6810      	ldr	r0, [r2, #0]
   8f7fc:	4629      	mov	r1, r5
   8f7fe:	4622      	mov	r2, r4
   8f800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8f804:	f7ff b83c 	b.w	8e880 <_vfprintf_r>
   8f808:	200702c8 	.word	0x200702c8

0008f80c <__sbprintf>:
   8f80c:	b570      	push	{r4, r5, r6, lr}
   8f80e:	460c      	mov	r4, r1
   8f810:	8989      	ldrh	r1, [r1, #12]
   8f812:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8f816:	f021 0102 	bic.w	r1, r1, #2
   8f81a:	f8ad 100c 	strh.w	r1, [sp, #12]
   8f81e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8f820:	4606      	mov	r6, r0
   8f822:	9119      	str	r1, [sp, #100]	; 0x64
   8f824:	89e1      	ldrh	r1, [r4, #14]
   8f826:	f8ad 100e 	strh.w	r1, [sp, #14]
   8f82a:	69e1      	ldr	r1, [r4, #28]
   8f82c:	9107      	str	r1, [sp, #28]
   8f82e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   8f830:	9109      	str	r1, [sp, #36]	; 0x24
   8f832:	a91a      	add	r1, sp, #104	; 0x68
   8f834:	9100      	str	r1, [sp, #0]
   8f836:	9104      	str	r1, [sp, #16]
   8f838:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8f83c:	9102      	str	r1, [sp, #8]
   8f83e:	9105      	str	r1, [sp, #20]
   8f840:	2100      	movs	r1, #0
   8f842:	9106      	str	r1, [sp, #24]
   8f844:	4669      	mov	r1, sp
   8f846:	f7ff f81b 	bl	8e880 <_vfprintf_r>
   8f84a:	1e05      	subs	r5, r0, #0
   8f84c:	db07      	blt.n	8f85e <__sbprintf+0x52>
   8f84e:	4630      	mov	r0, r6
   8f850:	4669      	mov	r1, sp
   8f852:	f000 ffc8 	bl	907e6 <_fflush_r>
   8f856:	2800      	cmp	r0, #0
   8f858:	bf18      	it	ne
   8f85a:	f04f 35ff 	movne.w	r5, #4294967295
   8f85e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8f862:	065b      	lsls	r3, r3, #25
   8f864:	d503      	bpl.n	8f86e <__sbprintf+0x62>
   8f866:	89a3      	ldrh	r3, [r4, #12]
   8f868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8f86c:	81a3      	strh	r3, [r4, #12]
   8f86e:	4628      	mov	r0, r5
   8f870:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8f874:	bd70      	pop	{r4, r5, r6, pc}
   8f876:	bf00      	nop

0008f878 <_vsnprintf_r>:
   8f878:	b530      	push	{r4, r5, lr}
   8f87a:	1e14      	subs	r4, r2, #0
   8f87c:	b09b      	sub	sp, #108	; 0x6c
   8f87e:	4605      	mov	r5, r0
   8f880:	da04      	bge.n	8f88c <_vsnprintf_r+0x14>
   8f882:	238b      	movs	r3, #139	; 0x8b
   8f884:	6003      	str	r3, [r0, #0]
   8f886:	f04f 30ff 	mov.w	r0, #4294967295
   8f88a:	e01c      	b.n	8f8c6 <_vsnprintf_r+0x4e>
   8f88c:	f44f 7202 	mov.w	r2, #520	; 0x208
   8f890:	9100      	str	r1, [sp, #0]
   8f892:	9104      	str	r1, [sp, #16]
   8f894:	f8ad 200c 	strh.w	r2, [sp, #12]
   8f898:	bf14      	ite	ne
   8f89a:	f104 31ff 	addne.w	r1, r4, #4294967295
   8f89e:	4621      	moveq	r1, r4
   8f8a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8f8a4:	9102      	str	r1, [sp, #8]
   8f8a6:	9105      	str	r1, [sp, #20]
   8f8a8:	f8ad 200e 	strh.w	r2, [sp, #14]
   8f8ac:	4669      	mov	r1, sp
   8f8ae:	461a      	mov	r2, r3
   8f8b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8f8b2:	f7fd fbc7 	bl	8d044 <_svfprintf_r>
   8f8b6:	1c43      	adds	r3, r0, #1
   8f8b8:	bfbc      	itt	lt
   8f8ba:	238b      	movlt	r3, #139	; 0x8b
   8f8bc:	602b      	strlt	r3, [r5, #0]
   8f8be:	b114      	cbz	r4, 8f8c6 <_vsnprintf_r+0x4e>
   8f8c0:	9b00      	ldr	r3, [sp, #0]
   8f8c2:	2200      	movs	r2, #0
   8f8c4:	701a      	strb	r2, [r3, #0]
   8f8c6:	b01b      	add	sp, #108	; 0x6c
   8f8c8:	bd30      	pop	{r4, r5, pc}

0008f8ca <vsnprintf>:
   8f8ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   8f8cc:	9300      	str	r3, [sp, #0]
   8f8ce:	4b06      	ldr	r3, [pc, #24]	; (8f8e8 <vsnprintf+0x1e>)
   8f8d0:	4606      	mov	r6, r0
   8f8d2:	460d      	mov	r5, r1
   8f8d4:	4614      	mov	r4, r2
   8f8d6:	6818      	ldr	r0, [r3, #0]
   8f8d8:	4631      	mov	r1, r6
   8f8da:	462a      	mov	r2, r5
   8f8dc:	4623      	mov	r3, r4
   8f8de:	f7ff ffcb 	bl	8f878 <_vsnprintf_r>
   8f8e2:	b002      	add	sp, #8
   8f8e4:	bd70      	pop	{r4, r5, r6, pc}
   8f8e6:	bf00      	nop
   8f8e8:	200702c8 	.word	0x200702c8

0008f8ec <__swsetup_r>:
   8f8ec:	b538      	push	{r3, r4, r5, lr}
   8f8ee:	4b2b      	ldr	r3, [pc, #172]	; (8f99c <__swsetup_r+0xb0>)
   8f8f0:	4605      	mov	r5, r0
   8f8f2:	6818      	ldr	r0, [r3, #0]
   8f8f4:	460c      	mov	r4, r1
   8f8f6:	b118      	cbz	r0, 8f900 <__swsetup_r+0x14>
   8f8f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8f8fa:	b90b      	cbnz	r3, 8f900 <__swsetup_r+0x14>
   8f8fc:	f000 ffbc 	bl	90878 <__sinit>
   8f900:	89a2      	ldrh	r2, [r4, #12]
   8f902:	b293      	uxth	r3, r2
   8f904:	0718      	lsls	r0, r3, #28
   8f906:	d420      	bmi.n	8f94a <__swsetup_r+0x5e>
   8f908:	06d9      	lsls	r1, r3, #27
   8f90a:	d405      	bmi.n	8f918 <__swsetup_r+0x2c>
   8f90c:	2309      	movs	r3, #9
   8f90e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8f912:	602b      	str	r3, [r5, #0]
   8f914:	81a2      	strh	r2, [r4, #12]
   8f916:	e03b      	b.n	8f990 <__swsetup_r+0xa4>
   8f918:	0758      	lsls	r0, r3, #29
   8f91a:	d512      	bpl.n	8f942 <__swsetup_r+0x56>
   8f91c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8f91e:	b141      	cbz	r1, 8f932 <__swsetup_r+0x46>
   8f920:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8f924:	4299      	cmp	r1, r3
   8f926:	d002      	beq.n	8f92e <__swsetup_r+0x42>
   8f928:	4628      	mov	r0, r5
   8f92a:	f001 f929 	bl	90b80 <_free_r>
   8f92e:	2300      	movs	r3, #0
   8f930:	6323      	str	r3, [r4, #48]	; 0x30
   8f932:	89a3      	ldrh	r3, [r4, #12]
   8f934:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8f938:	81a3      	strh	r3, [r4, #12]
   8f93a:	2300      	movs	r3, #0
   8f93c:	6063      	str	r3, [r4, #4]
   8f93e:	6923      	ldr	r3, [r4, #16]
   8f940:	6023      	str	r3, [r4, #0]
   8f942:	89a3      	ldrh	r3, [r4, #12]
   8f944:	f043 0308 	orr.w	r3, r3, #8
   8f948:	81a3      	strh	r3, [r4, #12]
   8f94a:	6923      	ldr	r3, [r4, #16]
   8f94c:	b94b      	cbnz	r3, 8f962 <__swsetup_r+0x76>
   8f94e:	89a3      	ldrh	r3, [r4, #12]
   8f950:	f403 7320 	and.w	r3, r3, #640	; 0x280
   8f954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8f958:	d003      	beq.n	8f962 <__swsetup_r+0x76>
   8f95a:	4628      	mov	r0, r5
   8f95c:	4621      	mov	r1, r4
   8f95e:	f001 fb8f 	bl	91080 <__smakebuf_r>
   8f962:	89a3      	ldrh	r3, [r4, #12]
   8f964:	f013 0201 	ands.w	r2, r3, #1
   8f968:	d005      	beq.n	8f976 <__swsetup_r+0x8a>
   8f96a:	2200      	movs	r2, #0
   8f96c:	60a2      	str	r2, [r4, #8]
   8f96e:	6962      	ldr	r2, [r4, #20]
   8f970:	4252      	negs	r2, r2
   8f972:	61a2      	str	r2, [r4, #24]
   8f974:	e003      	b.n	8f97e <__swsetup_r+0x92>
   8f976:	0799      	lsls	r1, r3, #30
   8f978:	bf58      	it	pl
   8f97a:	6962      	ldrpl	r2, [r4, #20]
   8f97c:	60a2      	str	r2, [r4, #8]
   8f97e:	6922      	ldr	r2, [r4, #16]
   8f980:	b94a      	cbnz	r2, 8f996 <__swsetup_r+0xaa>
   8f982:	f003 0080 	and.w	r0, r3, #128	; 0x80
   8f986:	b280      	uxth	r0, r0
   8f988:	b130      	cbz	r0, 8f998 <__swsetup_r+0xac>
   8f98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8f98e:	81a3      	strh	r3, [r4, #12]
   8f990:	f04f 30ff 	mov.w	r0, #4294967295
   8f994:	bd38      	pop	{r3, r4, r5, pc}
   8f996:	2000      	movs	r0, #0
   8f998:	bd38      	pop	{r3, r4, r5, pc}
   8f99a:	bf00      	nop
   8f99c:	200702c8 	.word	0x200702c8

0008f9a0 <__register_exitproc>:
   8f9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8f9a4:	4698      	mov	r8, r3
   8f9a6:	4b22      	ldr	r3, [pc, #136]	; (8fa30 <__register_exitproc+0x90>)
   8f9a8:	4606      	mov	r6, r0
   8f9aa:	681c      	ldr	r4, [r3, #0]
   8f9ac:	460f      	mov	r7, r1
   8f9ae:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8f9b2:	4691      	mov	r9, r2
   8f9b4:	b918      	cbnz	r0, 8f9be <__register_exitproc+0x1e>
   8f9b6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8f9ba:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8f9be:	6843      	ldr	r3, [r0, #4]
   8f9c0:	2b1f      	cmp	r3, #31
   8f9c2:	dd16      	ble.n	8f9f2 <__register_exitproc+0x52>
   8f9c4:	4b1b      	ldr	r3, [pc, #108]	; (8fa34 <__register_exitproc+0x94>)
   8f9c6:	b91b      	cbnz	r3, 8f9d0 <__register_exitproc+0x30>
   8f9c8:	f04f 30ff 	mov.w	r0, #4294967295
   8f9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8f9d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8f9d4:	f7fc ff50 	bl	8c878 <malloc>
   8f9d8:	2800      	cmp	r0, #0
   8f9da:	d0f5      	beq.n	8f9c8 <__register_exitproc+0x28>
   8f9dc:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8f9e0:	2500      	movs	r5, #0
   8f9e2:	6045      	str	r5, [r0, #4]
   8f9e4:	6001      	str	r1, [r0, #0]
   8f9e6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8f9ea:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8f9ee:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8f9f2:	6844      	ldr	r4, [r0, #4]
   8f9f4:	b1a6      	cbz	r6, 8fa20 <__register_exitproc+0x80>
   8f9f6:	2201      	movs	r2, #1
   8f9f8:	40a2      	lsls	r2, r4
   8f9fa:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   8f9fe:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
   8fa02:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8fa06:	2e02      	cmp	r6, #2
   8fa08:	ea41 0102 	orr.w	r1, r1, r2
   8fa0c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   8fa10:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   8fa14:	d104      	bne.n	8fa20 <__register_exitproc+0x80>
   8fa16:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8fa1a:	431a      	orrs	r2, r3
   8fa1c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8fa20:	1c63      	adds	r3, r4, #1
   8fa22:	3402      	adds	r4, #2
   8fa24:	6043      	str	r3, [r0, #4]
   8fa26:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
   8fa2a:	2000      	movs	r0, #0
   8fa2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8fa30:	000b1198 	.word	0x000b1198
   8fa34:	0008c879 	.word	0x0008c879

0008fa38 <register_fini>:
   8fa38:	4b02      	ldr	r3, [pc, #8]	; (8fa44 <register_fini+0xc>)
   8fa3a:	b113      	cbz	r3, 8fa42 <register_fini+0xa>
   8fa3c:	4802      	ldr	r0, [pc, #8]	; (8fa48 <register_fini+0x10>)
   8fa3e:	f7fc be93 	b.w	8c768 <atexit>
   8fa42:	4770      	bx	lr
   8fa44:	00000000 	.word	0x00000000
   8fa48:	0008c781 	.word	0x0008c781
   8fa4c:	00000000 	.word	0x00000000

0008fa50 <quorem>:
   8fa50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8fa54:	6903      	ldr	r3, [r0, #16]
   8fa56:	690c      	ldr	r4, [r1, #16]
   8fa58:	4680      	mov	r8, r0
   8fa5a:	42a3      	cmp	r3, r4
   8fa5c:	f2c0 8083 	blt.w	8fb66 <quorem+0x116>
   8fa60:	3c01      	subs	r4, #1
   8fa62:	00a2      	lsls	r2, r4, #2
   8fa64:	f101 0714 	add.w	r7, r1, #20
   8fa68:	f100 0514 	add.w	r5, r0, #20
   8fa6c:	4691      	mov	r9, r2
   8fa6e:	9200      	str	r2, [sp, #0]
   8fa70:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   8fa74:	442a      	add	r2, r5
   8fa76:	9201      	str	r2, [sp, #4]
   8fa78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   8fa7c:	3601      	adds	r6, #1
   8fa7e:	fbb2 f6f6 	udiv	r6, r2, r6
   8fa82:	44b9      	add	r9, r7
   8fa84:	2e00      	cmp	r6, #0
   8fa86:	d03b      	beq.n	8fb00 <quorem+0xb0>
   8fa88:	f04f 0e00 	mov.w	lr, #0
   8fa8c:	463a      	mov	r2, r7
   8fa8e:	4628      	mov	r0, r5
   8fa90:	46f3      	mov	fp, lr
   8fa92:	f852 cb04 	ldr.w	ip, [r2], #4
   8fa96:	6803      	ldr	r3, [r0, #0]
   8fa98:	fa1f fa8c 	uxth.w	sl, ip
   8fa9c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8faa0:	fb0a ea06 	mla	sl, sl, r6, lr
   8faa4:	fb0c fc06 	mul.w	ip, ip, r6
   8faa8:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
   8faac:	fa1f fa8a 	uxth.w	sl, sl
   8fab0:	ebca 0b0b 	rsb	fp, sl, fp
   8fab4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8fab8:	fa1f fa83 	uxth.w	sl, r3
   8fabc:	fa1f fc8c 	uxth.w	ip, ip
   8fac0:	44da      	add	sl, fp
   8fac2:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
   8fac6:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
   8faca:	fa1f fa8a 	uxth.w	sl, sl
   8face:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
   8fad2:	454a      	cmp	r2, r9
   8fad4:	ea4f 4b2c 	mov.w	fp, ip, asr #16
   8fad8:	f840 ab04 	str.w	sl, [r0], #4
   8fadc:	d9d9      	bls.n	8fa92 <quorem+0x42>
   8fade:	9a00      	ldr	r2, [sp, #0]
   8fae0:	58ab      	ldr	r3, [r5, r2]
   8fae2:	b96b      	cbnz	r3, 8fb00 <quorem+0xb0>
   8fae4:	9a01      	ldr	r2, [sp, #4]
   8fae6:	1f13      	subs	r3, r2, #4
   8fae8:	42ab      	cmp	r3, r5
   8faea:	461a      	mov	r2, r3
   8faec:	d802      	bhi.n	8faf4 <quorem+0xa4>
   8faee:	f8c8 4010 	str.w	r4, [r8, #16]
   8faf2:	e005      	b.n	8fb00 <quorem+0xb0>
   8faf4:	6812      	ldr	r2, [r2, #0]
   8faf6:	3b04      	subs	r3, #4
   8faf8:	2a00      	cmp	r2, #0
   8fafa:	d1f8      	bne.n	8faee <quorem+0x9e>
   8fafc:	3c01      	subs	r4, #1
   8fafe:	e7f3      	b.n	8fae8 <quorem+0x98>
   8fb00:	4640      	mov	r0, r8
   8fb02:	f001 fd76 	bl	915f2 <__mcmp>
   8fb06:	2800      	cmp	r0, #0
   8fb08:	db2b      	blt.n	8fb62 <quorem+0x112>
   8fb0a:	3601      	adds	r6, #1
   8fb0c:	462b      	mov	r3, r5
   8fb0e:	2000      	movs	r0, #0
   8fb10:	f857 cb04 	ldr.w	ip, [r7], #4
   8fb14:	681a      	ldr	r2, [r3, #0]
   8fb16:	fa1f f18c 	uxth.w	r1, ip
   8fb1a:	1a41      	subs	r1, r0, r1
   8fb1c:	fa1f fa82 	uxth.w	sl, r2
   8fb20:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8fb24:	4451      	add	r1, sl
   8fb26:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
   8fb2a:	eb02 4221 	add.w	r2, r2, r1, asr #16
   8fb2e:	b289      	uxth	r1, r1
   8fb30:	1410      	asrs	r0, r2, #16
   8fb32:	454f      	cmp	r7, r9
   8fb34:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   8fb38:	f843 2b04 	str.w	r2, [r3], #4
   8fb3c:	d9e8      	bls.n	8fb10 <quorem+0xc0>
   8fb3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   8fb42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   8fb46:	b962      	cbnz	r2, 8fb62 <quorem+0x112>
   8fb48:	3b04      	subs	r3, #4
   8fb4a:	42ab      	cmp	r3, r5
   8fb4c:	461a      	mov	r2, r3
   8fb4e:	d802      	bhi.n	8fb56 <quorem+0x106>
   8fb50:	f8c8 4010 	str.w	r4, [r8, #16]
   8fb54:	e005      	b.n	8fb62 <quorem+0x112>
   8fb56:	6812      	ldr	r2, [r2, #0]
   8fb58:	3b04      	subs	r3, #4
   8fb5a:	2a00      	cmp	r2, #0
   8fb5c:	d1f8      	bne.n	8fb50 <quorem+0x100>
   8fb5e:	3c01      	subs	r4, #1
   8fb60:	e7f3      	b.n	8fb4a <quorem+0xfa>
   8fb62:	4630      	mov	r0, r6
   8fb64:	e000      	b.n	8fb68 <quorem+0x118>
   8fb66:	2000      	movs	r0, #0
   8fb68:	b003      	add	sp, #12
   8fb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008fb6e <_dtoa_r>:
   8fb6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8fb72:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8fb74:	b09b      	sub	sp, #108	; 0x6c
   8fb76:	4682      	mov	sl, r0
   8fb78:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8fb7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8fb7e:	b151      	cbz	r1, 8fb96 <_dtoa_r+0x28>
   8fb80:	6c43      	ldr	r3, [r0, #68]	; 0x44
   8fb82:	2201      	movs	r2, #1
   8fb84:	604b      	str	r3, [r1, #4]
   8fb86:	fa02 f303 	lsl.w	r3, r2, r3
   8fb8a:	608b      	str	r3, [r1, #8]
   8fb8c:	f001 fb2c 	bl	911e8 <_Bfree>
   8fb90:	2300      	movs	r3, #0
   8fb92:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
   8fb96:	9805      	ldr	r0, [sp, #20]
   8fb98:	2800      	cmp	r0, #0
   8fb9a:	da05      	bge.n	8fba8 <_dtoa_r+0x3a>
   8fb9c:	2301      	movs	r3, #1
   8fb9e:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   8fba2:	6023      	str	r3, [r4, #0]
   8fba4:	9105      	str	r1, [sp, #20]
   8fba6:	e001      	b.n	8fbac <_dtoa_r+0x3e>
   8fba8:	2300      	movs	r3, #0
   8fbaa:	6023      	str	r3, [r4, #0]
   8fbac:	9f05      	ldr	r7, [sp, #20]
   8fbae:	4a9c      	ldr	r2, [pc, #624]	; (8fe20 <_dtoa_r+0x2b2>)
   8fbb0:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   8fbb4:	0d1b      	lsrs	r3, r3, #20
   8fbb6:	051b      	lsls	r3, r3, #20
   8fbb8:	4293      	cmp	r3, r2
   8fbba:	d11d      	bne.n	8fbf8 <_dtoa_r+0x8a>
   8fbbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8fbbe:	f242 730f 	movw	r3, #9999	; 0x270f
   8fbc2:	6013      	str	r3, [r2, #0]
   8fbc4:	9b04      	ldr	r3, [sp, #16]
   8fbc6:	b943      	cbnz	r3, 8fbda <_dtoa_r+0x6c>
   8fbc8:	4b96      	ldr	r3, [pc, #600]	; (8fe24 <_dtoa_r+0x2b6>)
   8fbca:	4a97      	ldr	r2, [pc, #604]	; (8fe28 <_dtoa_r+0x2ba>)
   8fbcc:	f3c7 0013 	ubfx	r0, r7, #0, #20
   8fbd0:	2800      	cmp	r0, #0
   8fbd2:	bf0c      	ite	eq
   8fbd4:	4610      	moveq	r0, r2
   8fbd6:	4618      	movne	r0, r3
   8fbd8:	e000      	b.n	8fbdc <_dtoa_r+0x6e>
   8fbda:	4892      	ldr	r0, [pc, #584]	; (8fe24 <_dtoa_r+0x2b6>)
   8fbdc:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   8fbde:	2f00      	cmp	r7, #0
   8fbe0:	f000 856f 	beq.w	906c2 <_dtoa_r+0xb54>
   8fbe4:	78c3      	ldrb	r3, [r0, #3]
   8fbe6:	b113      	cbz	r3, 8fbee <_dtoa_r+0x80>
   8fbe8:	f100 0308 	add.w	r3, r0, #8
   8fbec:	e000      	b.n	8fbf0 <_dtoa_r+0x82>
   8fbee:	1cc3      	adds	r3, r0, #3
   8fbf0:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   8fbf2:	603b      	str	r3, [r7, #0]
   8fbf4:	f000 bd65 	b.w	906c2 <_dtoa_r+0xb54>
   8fbf8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   8fbfc:	2200      	movs	r2, #0
   8fbfe:	4620      	mov	r0, r4
   8fc00:	4629      	mov	r1, r5
   8fc02:	2300      	movs	r3, #0
   8fc04:	f003 fae2 	bl	931cc <__aeabi_dcmpeq>
   8fc08:	4680      	mov	r8, r0
   8fc0a:	b158      	cbz	r0, 8fc24 <_dtoa_r+0xb6>
   8fc0c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8fc0e:	2301      	movs	r3, #1
   8fc10:	603b      	str	r3, [r7, #0]
   8fc12:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   8fc14:	2f00      	cmp	r7, #0
   8fc16:	f000 8551 	beq.w	906bc <_dtoa_r+0xb4e>
   8fc1a:	4884      	ldr	r0, [pc, #528]	; (8fe2c <_dtoa_r+0x2be>)
   8fc1c:	6038      	str	r0, [r7, #0]
   8fc1e:	3801      	subs	r0, #1
   8fc20:	f000 bd4f 	b.w	906c2 <_dtoa_r+0xb54>
   8fc24:	ab19      	add	r3, sp, #100	; 0x64
   8fc26:	9300      	str	r3, [sp, #0]
   8fc28:	ab18      	add	r3, sp, #96	; 0x60
   8fc2a:	9301      	str	r3, [sp, #4]
   8fc2c:	4650      	mov	r0, sl
   8fc2e:	4622      	mov	r2, r4
   8fc30:	462b      	mov	r3, r5
   8fc32:	f001 fdce 	bl	917d2 <__d2b>
   8fc36:	f3c7 560a 	ubfx	r6, r7, #20, #11
   8fc3a:	4683      	mov	fp, r0
   8fc3c:	b15e      	cbz	r6, 8fc56 <_dtoa_r+0xe8>
   8fc3e:	f3c5 0313 	ubfx	r3, r5, #0, #20
   8fc42:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   8fc46:	4620      	mov	r0, r4
   8fc48:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8fc4c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   8fc50:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
   8fc54:	e01c      	b.n	8fc90 <_dtoa_r+0x122>
   8fc56:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8fc58:	9e18      	ldr	r6, [sp, #96]	; 0x60
   8fc5a:	441e      	add	r6, r3
   8fc5c:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   8fc60:	429e      	cmp	r6, r3
   8fc62:	db09      	blt.n	8fc78 <_dtoa_r+0x10a>
   8fc64:	9904      	ldr	r1, [sp, #16]
   8fc66:	331f      	adds	r3, #31
   8fc68:	f206 4012 	addw	r0, r6, #1042	; 0x412
   8fc6c:	1b9b      	subs	r3, r3, r6
   8fc6e:	fa21 f000 	lsr.w	r0, r1, r0
   8fc72:	409f      	lsls	r7, r3
   8fc74:	4338      	orrs	r0, r7
   8fc76:	e004      	b.n	8fc82 <_dtoa_r+0x114>
   8fc78:	486d      	ldr	r0, [pc, #436]	; (8fe30 <_dtoa_r+0x2c2>)
   8fc7a:	9a04      	ldr	r2, [sp, #16]
   8fc7c:	1b80      	subs	r0, r0, r6
   8fc7e:	fa02 f000 	lsl.w	r0, r2, r0
   8fc82:	f002 ffc5 	bl	92c10 <__aeabi_ui2d>
   8fc86:	2701      	movs	r7, #1
   8fc88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8fc8c:	3e01      	subs	r6, #1
   8fc8e:	9715      	str	r7, [sp, #84]	; 0x54
   8fc90:	2200      	movs	r2, #0
   8fc92:	4b68      	ldr	r3, [pc, #416]	; (8fe34 <_dtoa_r+0x2c6>)
   8fc94:	f002 fe7e 	bl	92994 <__aeabi_dsub>
   8fc98:	a35b      	add	r3, pc, #364	; (adr r3, 8fe08 <_dtoa_r+0x29a>)
   8fc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fc9e:	f003 f82d 	bl	92cfc <__aeabi_dmul>
   8fca2:	a35b      	add	r3, pc, #364	; (adr r3, 8fe10 <_dtoa_r+0x2a2>)
   8fca4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fca8:	f002 fe76 	bl	92998 <__adddf3>
   8fcac:	4604      	mov	r4, r0
   8fcae:	4630      	mov	r0, r6
   8fcb0:	460d      	mov	r5, r1
   8fcb2:	f002 ffbd 	bl	92c30 <__aeabi_i2d>
   8fcb6:	a358      	add	r3, pc, #352	; (adr r3, 8fe18 <_dtoa_r+0x2aa>)
   8fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fcbc:	f003 f81e 	bl	92cfc <__aeabi_dmul>
   8fcc0:	4602      	mov	r2, r0
   8fcc2:	460b      	mov	r3, r1
   8fcc4:	4620      	mov	r0, r4
   8fcc6:	4629      	mov	r1, r5
   8fcc8:	f002 fe66 	bl	92998 <__adddf3>
   8fccc:	4604      	mov	r4, r0
   8fcce:	460d      	mov	r5, r1
   8fcd0:	f003 faae 	bl	93230 <__aeabi_d2iz>
   8fcd4:	4629      	mov	r1, r5
   8fcd6:	4681      	mov	r9, r0
   8fcd8:	2200      	movs	r2, #0
   8fcda:	4620      	mov	r0, r4
   8fcdc:	2300      	movs	r3, #0
   8fcde:	f003 fa7f 	bl	931e0 <__aeabi_dcmplt>
   8fce2:	b158      	cbz	r0, 8fcfc <_dtoa_r+0x18e>
   8fce4:	4648      	mov	r0, r9
   8fce6:	f002 ffa3 	bl	92c30 <__aeabi_i2d>
   8fcea:	4602      	mov	r2, r0
   8fcec:	460b      	mov	r3, r1
   8fcee:	4620      	mov	r0, r4
   8fcf0:	4629      	mov	r1, r5
   8fcf2:	f003 fa6b 	bl	931cc <__aeabi_dcmpeq>
   8fcf6:	b908      	cbnz	r0, 8fcfc <_dtoa_r+0x18e>
   8fcf8:	f109 39ff 	add.w	r9, r9, #4294967295
   8fcfc:	f1b9 0f16 	cmp.w	r9, #22
   8fd00:	d80d      	bhi.n	8fd1e <_dtoa_r+0x1b0>
   8fd02:	4b4d      	ldr	r3, [pc, #308]	; (8fe38 <_dtoa_r+0x2ca>)
   8fd04:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   8fd08:	e9d3 0100 	ldrd	r0, r1, [r3]
   8fd0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8fd10:	f003 fa84 	bl	9321c <__aeabi_dcmpgt>
   8fd14:	b130      	cbz	r0, 8fd24 <_dtoa_r+0x1b6>
   8fd16:	f109 39ff 	add.w	r9, r9, #4294967295
   8fd1a:	2700      	movs	r7, #0
   8fd1c:	e000      	b.n	8fd20 <_dtoa_r+0x1b2>
   8fd1e:	2701      	movs	r7, #1
   8fd20:	9714      	str	r7, [sp, #80]	; 0x50
   8fd22:	e000      	b.n	8fd26 <_dtoa_r+0x1b8>
   8fd24:	9014      	str	r0, [sp, #80]	; 0x50
   8fd26:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8fd28:	1b9e      	subs	r6, r3, r6
   8fd2a:	3e01      	subs	r6, #1
   8fd2c:	960a      	str	r6, [sp, #40]	; 0x28
   8fd2e:	d504      	bpl.n	8fd3a <_dtoa_r+0x1cc>
   8fd30:	4277      	negs	r7, r6
   8fd32:	9708      	str	r7, [sp, #32]
   8fd34:	2700      	movs	r7, #0
   8fd36:	970a      	str	r7, [sp, #40]	; 0x28
   8fd38:	e001      	b.n	8fd3e <_dtoa_r+0x1d0>
   8fd3a:	2700      	movs	r7, #0
   8fd3c:	9708      	str	r7, [sp, #32]
   8fd3e:	f1b9 0f00 	cmp.w	r9, #0
   8fd42:	db07      	blt.n	8fd54 <_dtoa_r+0x1e6>
   8fd44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   8fd46:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   8fd4a:	444f      	add	r7, r9
   8fd4c:	970a      	str	r7, [sp, #40]	; 0x28
   8fd4e:	2700      	movs	r7, #0
   8fd50:	970e      	str	r7, [sp, #56]	; 0x38
   8fd52:	e008      	b.n	8fd66 <_dtoa_r+0x1f8>
   8fd54:	9f08      	ldr	r7, [sp, #32]
   8fd56:	ebc9 0707 	rsb	r7, r9, r7
   8fd5a:	9708      	str	r7, [sp, #32]
   8fd5c:	f1c9 0700 	rsb	r7, r9, #0
   8fd60:	970e      	str	r7, [sp, #56]	; 0x38
   8fd62:	2700      	movs	r7, #0
   8fd64:	9711      	str	r7, [sp, #68]	; 0x44
   8fd66:	9f24      	ldr	r7, [sp, #144]	; 0x90
   8fd68:	2f09      	cmp	r7, #9
   8fd6a:	d829      	bhi.n	8fdc0 <_dtoa_r+0x252>
   8fd6c:	2f05      	cmp	r7, #5
   8fd6e:	bfc4      	itt	gt
   8fd70:	3f04      	subgt	r7, #4
   8fd72:	9724      	strgt	r7, [sp, #144]	; 0x90
   8fd74:	9f24      	ldr	r7, [sp, #144]	; 0x90
   8fd76:	bfc8      	it	gt
   8fd78:	2400      	movgt	r4, #0
   8fd7a:	f1a7 0302 	sub.w	r3, r7, #2
   8fd7e:	bfd8      	it	le
   8fd80:	2401      	movle	r4, #1
   8fd82:	2b03      	cmp	r3, #3
   8fd84:	d821      	bhi.n	8fdca <_dtoa_r+0x25c>
   8fd86:	e8df f003 	tbb	[pc, r3]
   8fd8a:	0f06      	.short	0x0f06
   8fd8c:	0402      	.short	0x0402
   8fd8e:	2701      	movs	r7, #1
   8fd90:	e002      	b.n	8fd98 <_dtoa_r+0x22a>
   8fd92:	2701      	movs	r7, #1
   8fd94:	e009      	b.n	8fdaa <_dtoa_r+0x23c>
   8fd96:	2700      	movs	r7, #0
   8fd98:	970f      	str	r7, [sp, #60]	; 0x3c
   8fd9a:	9f25      	ldr	r7, [sp, #148]	; 0x94
   8fd9c:	2f00      	cmp	r7, #0
   8fd9e:	dd1e      	ble.n	8fdde <_dtoa_r+0x270>
   8fda0:	970b      	str	r7, [sp, #44]	; 0x2c
   8fda2:	9707      	str	r7, [sp, #28]
   8fda4:	463b      	mov	r3, r7
   8fda6:	e01f      	b.n	8fde8 <_dtoa_r+0x27a>
   8fda8:	2700      	movs	r7, #0
   8fdaa:	970f      	str	r7, [sp, #60]	; 0x3c
   8fdac:	9f25      	ldr	r7, [sp, #148]	; 0x94
   8fdae:	444f      	add	r7, r9
   8fdb0:	970b      	str	r7, [sp, #44]	; 0x2c
   8fdb2:	3701      	adds	r7, #1
   8fdb4:	463b      	mov	r3, r7
   8fdb6:	9707      	str	r7, [sp, #28]
   8fdb8:	2b01      	cmp	r3, #1
   8fdba:	bfb8      	it	lt
   8fdbc:	2301      	movlt	r3, #1
   8fdbe:	e013      	b.n	8fde8 <_dtoa_r+0x27a>
   8fdc0:	2401      	movs	r4, #1
   8fdc2:	2700      	movs	r7, #0
   8fdc4:	9724      	str	r7, [sp, #144]	; 0x90
   8fdc6:	940f      	str	r4, [sp, #60]	; 0x3c
   8fdc8:	e001      	b.n	8fdce <_dtoa_r+0x260>
   8fdca:	2701      	movs	r7, #1
   8fdcc:	970f      	str	r7, [sp, #60]	; 0x3c
   8fdce:	f04f 37ff 	mov.w	r7, #4294967295
   8fdd2:	970b      	str	r7, [sp, #44]	; 0x2c
   8fdd4:	9707      	str	r7, [sp, #28]
   8fdd6:	2700      	movs	r7, #0
   8fdd8:	2312      	movs	r3, #18
   8fdda:	9725      	str	r7, [sp, #148]	; 0x94
   8fddc:	e004      	b.n	8fde8 <_dtoa_r+0x27a>
   8fdde:	2701      	movs	r7, #1
   8fde0:	970b      	str	r7, [sp, #44]	; 0x2c
   8fde2:	9707      	str	r7, [sp, #28]
   8fde4:	463b      	mov	r3, r7
   8fde6:	9725      	str	r7, [sp, #148]	; 0x94
   8fde8:	2200      	movs	r2, #0
   8fdea:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
   8fdee:	2204      	movs	r2, #4
   8fdf0:	f102 0114 	add.w	r1, r2, #20
   8fdf4:	4299      	cmp	r1, r3
   8fdf6:	d821      	bhi.n	8fe3c <_dtoa_r+0x2ce>
   8fdf8:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
   8fdfc:	0052      	lsls	r2, r2, #1
   8fdfe:	3101      	adds	r1, #1
   8fe00:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
   8fe04:	e7f4      	b.n	8fdf0 <_dtoa_r+0x282>
   8fe06:	bf00      	nop
   8fe08:	636f4361 	.word	0x636f4361
   8fe0c:	3fd287a7 	.word	0x3fd287a7
   8fe10:	8b60c8b3 	.word	0x8b60c8b3
   8fe14:	3fc68a28 	.word	0x3fc68a28
   8fe18:	509f79fb 	.word	0x509f79fb
   8fe1c:	3fd34413 	.word	0x3fd34413
   8fe20:	7ff00000 	.word	0x7ff00000
   8fe24:	000b123b 	.word	0x000b123b
   8fe28:	000b1232 	.word	0x000b1232
   8fe2c:	000b11f1 	.word	0x000b11f1
   8fe30:	fffffbee 	.word	0xfffffbee
   8fe34:	3ff80000 	.word	0x3ff80000
   8fe38:	000b1258 	.word	0x000b1258
   8fe3c:	4650      	mov	r0, sl
   8fe3e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
   8fe42:	f001 f9ab 	bl	9119c <_Balloc>
   8fe46:	9f07      	ldr	r7, [sp, #28]
   8fe48:	9009      	str	r0, [sp, #36]	; 0x24
   8fe4a:	2f0e      	cmp	r7, #14
   8fe4c:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
   8fe50:	f200 816a 	bhi.w	90128 <_dtoa_r+0x5ba>
   8fe54:	2c00      	cmp	r4, #0
   8fe56:	f000 8167 	beq.w	90128 <_dtoa_r+0x5ba>
   8fe5a:	f1b9 0f00 	cmp.w	r9, #0
   8fe5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8fe62:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   8fe66:	dd31      	ble.n	8fecc <_dtoa_r+0x35e>
   8fe68:	4a80      	ldr	r2, [pc, #512]	; (9006c <_dtoa_r+0x4fe>)
   8fe6a:	f009 030f 	and.w	r3, r9, #15
   8fe6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   8fe72:	ea4f 1429 	mov.w	r4, r9, asr #4
   8fe76:	e9d3 0100 	ldrd	r0, r1, [r3]
   8fe7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8fe7e:	06e0      	lsls	r0, r4, #27
   8fe80:	d50c      	bpl.n	8fe9c <_dtoa_r+0x32e>
   8fe82:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8fe86:	4b7a      	ldr	r3, [pc, #488]	; (90070 <_dtoa_r+0x502>)
   8fe88:	f004 040f 	and.w	r4, r4, #15
   8fe8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8fe90:	f003 f85e 	bl	92f50 <__aeabi_ddiv>
   8fe94:	2703      	movs	r7, #3
   8fe96:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8fe9a:	e000      	b.n	8fe9e <_dtoa_r+0x330>
   8fe9c:	2702      	movs	r7, #2
   8fe9e:	4d74      	ldr	r5, [pc, #464]	; (90070 <_dtoa_r+0x502>)
   8fea0:	b16c      	cbz	r4, 8febe <_dtoa_r+0x350>
   8fea2:	07e1      	lsls	r1, r4, #31
   8fea4:	d508      	bpl.n	8feb8 <_dtoa_r+0x34a>
   8fea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8feaa:	e9d5 2300 	ldrd	r2, r3, [r5]
   8feae:	f002 ff25 	bl	92cfc <__aeabi_dmul>
   8feb2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8feb6:	3701      	adds	r7, #1
   8feb8:	1064      	asrs	r4, r4, #1
   8feba:	3508      	adds	r5, #8
   8febc:	e7f0      	b.n	8fea0 <_dtoa_r+0x332>
   8febe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8fec2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   8fec6:	f003 f843 	bl	92f50 <__aeabi_ddiv>
   8feca:	e01b      	b.n	8ff04 <_dtoa_r+0x396>
   8fecc:	f1c9 0400 	rsb	r4, r9, #0
   8fed0:	b1dc      	cbz	r4, 8ff0a <_dtoa_r+0x39c>
   8fed2:	4b66      	ldr	r3, [pc, #408]	; (9006c <_dtoa_r+0x4fe>)
   8fed4:	f004 020f 	and.w	r2, r4, #15
   8fed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8fedc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8fee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fee4:	f002 ff0a 	bl	92cfc <__aeabi_dmul>
   8fee8:	4d61      	ldr	r5, [pc, #388]	; (90070 <_dtoa_r+0x502>)
   8feea:	1124      	asrs	r4, r4, #4
   8feec:	2702      	movs	r7, #2
   8feee:	b14c      	cbz	r4, 8ff04 <_dtoa_r+0x396>
   8fef0:	07e2      	lsls	r2, r4, #31
   8fef2:	d504      	bpl.n	8fefe <_dtoa_r+0x390>
   8fef4:	e9d5 2300 	ldrd	r2, r3, [r5]
   8fef8:	3701      	adds	r7, #1
   8fefa:	f002 feff 	bl	92cfc <__aeabi_dmul>
   8fefe:	1064      	asrs	r4, r4, #1
   8ff00:	3508      	adds	r5, #8
   8ff02:	e7f4      	b.n	8feee <_dtoa_r+0x380>
   8ff04:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8ff08:	e000      	b.n	8ff0c <_dtoa_r+0x39e>
   8ff0a:	2702      	movs	r7, #2
   8ff0c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8ff0e:	b1e9      	cbz	r1, 8ff4c <_dtoa_r+0x3de>
   8ff10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   8ff14:	2200      	movs	r2, #0
   8ff16:	4620      	mov	r0, r4
   8ff18:	4629      	mov	r1, r5
   8ff1a:	4b56      	ldr	r3, [pc, #344]	; (90074 <_dtoa_r+0x506>)
   8ff1c:	f003 f960 	bl	931e0 <__aeabi_dcmplt>
   8ff20:	b1c8      	cbz	r0, 8ff56 <_dtoa_r+0x3e8>
   8ff22:	9a07      	ldr	r2, [sp, #28]
   8ff24:	b1e2      	cbz	r2, 8ff60 <_dtoa_r+0x3f2>
   8ff26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8ff28:	2b00      	cmp	r3, #0
   8ff2a:	f340 80f9 	ble.w	90120 <_dtoa_r+0x5b2>
   8ff2e:	f109 30ff 	add.w	r0, r9, #4294967295
   8ff32:	9010      	str	r0, [sp, #64]	; 0x40
   8ff34:	4629      	mov	r1, r5
   8ff36:	4620      	mov	r0, r4
   8ff38:	2200      	movs	r2, #0
   8ff3a:	4b4f      	ldr	r3, [pc, #316]	; (90078 <_dtoa_r+0x50a>)
   8ff3c:	f002 fede 	bl	92cfc <__aeabi_dmul>
   8ff40:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8ff44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8ff46:	3701      	adds	r7, #1
   8ff48:	910c      	str	r1, [sp, #48]	; 0x30
   8ff4a:	e00d      	b.n	8ff68 <_dtoa_r+0x3fa>
   8ff4c:	9a07      	ldr	r2, [sp, #28]
   8ff4e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   8ff52:	920c      	str	r2, [sp, #48]	; 0x30
   8ff54:	e008      	b.n	8ff68 <_dtoa_r+0x3fa>
   8ff56:	9b07      	ldr	r3, [sp, #28]
   8ff58:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   8ff5c:	930c      	str	r3, [sp, #48]	; 0x30
   8ff5e:	e003      	b.n	8ff68 <_dtoa_r+0x3fa>
   8ff60:	9807      	ldr	r0, [sp, #28]
   8ff62:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   8ff66:	900c      	str	r0, [sp, #48]	; 0x30
   8ff68:	4638      	mov	r0, r7
   8ff6a:	f002 fe61 	bl	92c30 <__aeabi_i2d>
   8ff6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8ff72:	f002 fec3 	bl	92cfc <__aeabi_dmul>
   8ff76:	2200      	movs	r2, #0
   8ff78:	4b40      	ldr	r3, [pc, #256]	; (9007c <_dtoa_r+0x50e>)
   8ff7a:	f002 fd0d 	bl	92998 <__adddf3>
   8ff7e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8ff80:	4604      	mov	r4, r0
   8ff82:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
   8ff86:	b9cf      	cbnz	r7, 8ffbc <_dtoa_r+0x44e>
   8ff88:	2200      	movs	r2, #0
   8ff8a:	4b3d      	ldr	r3, [pc, #244]	; (90080 <_dtoa_r+0x512>)
   8ff8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8ff90:	f002 fd00 	bl	92994 <__aeabi_dsub>
   8ff94:	4622      	mov	r2, r4
   8ff96:	462b      	mov	r3, r5
   8ff98:	4606      	mov	r6, r0
   8ff9a:	460f      	mov	r7, r1
   8ff9c:	f003 f93e 	bl	9321c <__aeabi_dcmpgt>
   8ffa0:	2800      	cmp	r0, #0
   8ffa2:	f040 8252 	bne.w	9044a <_dtoa_r+0x8dc>
   8ffa6:	4622      	mov	r2, r4
   8ffa8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   8ffac:	4630      	mov	r0, r6
   8ffae:	4639      	mov	r1, r7
   8ffb0:	f003 f916 	bl	931e0 <__aeabi_dcmplt>
   8ffb4:	2800      	cmp	r0, #0
   8ffb6:	f040 823e 	bne.w	90436 <_dtoa_r+0x8c8>
   8ffba:	e0b1      	b.n	90120 <_dtoa_r+0x5b2>
   8ffbc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8ffbe:	4b2b      	ldr	r3, [pc, #172]	; (9006c <_dtoa_r+0x4fe>)
   8ffc0:	1e7a      	subs	r2, r7, #1
   8ffc2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8ffc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8ffc8:	2f00      	cmp	r7, #0
   8ffca:	d05d      	beq.n	90088 <_dtoa_r+0x51a>
   8ffcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ffd0:	2000      	movs	r0, #0
   8ffd2:	492c      	ldr	r1, [pc, #176]	; (90084 <_dtoa_r+0x516>)
   8ffd4:	f002 ffbc 	bl	92f50 <__aeabi_ddiv>
   8ffd8:	4622      	mov	r2, r4
   8ffda:	462b      	mov	r3, r5
   8ffdc:	f002 fcda 	bl	92994 <__aeabi_dsub>
   8ffe0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8ffe4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   8ffe8:	4604      	mov	r4, r0
   8ffea:	460d      	mov	r5, r1
   8ffec:	4639      	mov	r1, r7
   8ffee:	4630      	mov	r0, r6
   8fff0:	f003 f91e 	bl	93230 <__aeabi_d2iz>
   8fff4:	9002      	str	r0, [sp, #8]
   8fff6:	f002 fe1b 	bl	92c30 <__aeabi_i2d>
   8fffa:	4602      	mov	r2, r0
   8fffc:	460b      	mov	r3, r1
   8fffe:	4630      	mov	r0, r6
   90000:	4639      	mov	r1, r7
   90002:	f002 fcc7 	bl	92994 <__aeabi_dsub>
   90006:	f8dd c008 	ldr.w	ip, [sp, #8]
   9000a:	4622      	mov	r2, r4
   9000c:	f10c 0330 	add.w	r3, ip, #48	; 0x30
   90010:	f808 3b01 	strb.w	r3, [r8], #1
   90014:	462b      	mov	r3, r5
   90016:	4606      	mov	r6, r0
   90018:	460f      	mov	r7, r1
   9001a:	f003 f8e1 	bl	931e0 <__aeabi_dcmplt>
   9001e:	2800      	cmp	r0, #0
   90020:	f040 833a 	bne.w	90698 <_dtoa_r+0xb2a>
   90024:	4632      	mov	r2, r6
   90026:	463b      	mov	r3, r7
   90028:	2000      	movs	r0, #0
   9002a:	4912      	ldr	r1, [pc, #72]	; (90074 <_dtoa_r+0x506>)
   9002c:	f002 fcb2 	bl	92994 <__aeabi_dsub>
   90030:	4622      	mov	r2, r4
   90032:	462b      	mov	r3, r5
   90034:	f003 f8d4 	bl	931e0 <__aeabi_dcmplt>
   90038:	2800      	cmp	r0, #0
   9003a:	f040 80d4 	bne.w	901e6 <_dtoa_r+0x678>
   9003e:	9809      	ldr	r0, [sp, #36]	; 0x24
   90040:	990c      	ldr	r1, [sp, #48]	; 0x30
   90042:	ebc0 0308 	rsb	r3, r0, r8
   90046:	428b      	cmp	r3, r1
   90048:	da6a      	bge.n	90120 <_dtoa_r+0x5b2>
   9004a:	4620      	mov	r0, r4
   9004c:	4629      	mov	r1, r5
   9004e:	2200      	movs	r2, #0
   90050:	4b09      	ldr	r3, [pc, #36]	; (90078 <_dtoa_r+0x50a>)
   90052:	f002 fe53 	bl	92cfc <__aeabi_dmul>
   90056:	2200      	movs	r2, #0
   90058:	4604      	mov	r4, r0
   9005a:	460d      	mov	r5, r1
   9005c:	4630      	mov	r0, r6
   9005e:	4639      	mov	r1, r7
   90060:	4b05      	ldr	r3, [pc, #20]	; (90078 <_dtoa_r+0x50a>)
   90062:	f002 fe4b 	bl	92cfc <__aeabi_dmul>
   90066:	4606      	mov	r6, r0
   90068:	460f      	mov	r7, r1
   9006a:	e7bf      	b.n	8ffec <_dtoa_r+0x47e>
   9006c:	000b1258 	.word	0x000b1258
   90070:	000b1348 	.word	0x000b1348
   90074:	3ff00000 	.word	0x3ff00000
   90078:	40240000 	.word	0x40240000
   9007c:	401c0000 	.word	0x401c0000
   90080:	40140000 	.word	0x40140000
   90084:	3fe00000 	.word	0x3fe00000
   90088:	4622      	mov	r2, r4
   9008a:	e9d3 0100 	ldrd	r0, r1, [r3]
   9008e:	462b      	mov	r3, r5
   90090:	f002 fe34 	bl	92cfc <__aeabi_dmul>
   90094:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   90098:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   9009c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   9009e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   900a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   900a4:	4490      	add	r8, r2
   900a6:	4639      	mov	r1, r7
   900a8:	4630      	mov	r0, r6
   900aa:	f003 f8c1 	bl	93230 <__aeabi_d2iz>
   900ae:	4605      	mov	r5, r0
   900b0:	f002 fdbe 	bl	92c30 <__aeabi_i2d>
   900b4:	4602      	mov	r2, r0
   900b6:	460b      	mov	r3, r1
   900b8:	4630      	mov	r0, r6
   900ba:	4639      	mov	r1, r7
   900bc:	f002 fc6a 	bl	92994 <__aeabi_dsub>
   900c0:	3530      	adds	r5, #48	; 0x30
   900c2:	f804 5b01 	strb.w	r5, [r4], #1
   900c6:	4544      	cmp	r4, r8
   900c8:	4606      	mov	r6, r0
   900ca:	460f      	mov	r7, r1
   900cc:	d121      	bne.n	90112 <_dtoa_r+0x5a4>
   900ce:	2200      	movs	r2, #0
   900d0:	4b87      	ldr	r3, [pc, #540]	; (902f0 <_dtoa_r+0x782>)
   900d2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   900d6:	f002 fc5f 	bl	92998 <__adddf3>
   900da:	4602      	mov	r2, r0
   900dc:	460b      	mov	r3, r1
   900de:	4630      	mov	r0, r6
   900e0:	4639      	mov	r1, r7
   900e2:	f003 f89b 	bl	9321c <__aeabi_dcmpgt>
   900e6:	2800      	cmp	r0, #0
   900e8:	d17d      	bne.n	901e6 <_dtoa_r+0x678>
   900ea:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   900ee:	2000      	movs	r0, #0
   900f0:	497f      	ldr	r1, [pc, #508]	; (902f0 <_dtoa_r+0x782>)
   900f2:	f002 fc4f 	bl	92994 <__aeabi_dsub>
   900f6:	4602      	mov	r2, r0
   900f8:	460b      	mov	r3, r1
   900fa:	4630      	mov	r0, r6
   900fc:	4639      	mov	r1, r7
   900fe:	f003 f86f 	bl	931e0 <__aeabi_dcmplt>
   90102:	b168      	cbz	r0, 90120 <_dtoa_r+0x5b2>
   90104:	46a0      	mov	r8, r4
   90106:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   9010a:	3c01      	subs	r4, #1
   9010c:	2b30      	cmp	r3, #48	; 0x30
   9010e:	d0f9      	beq.n	90104 <_dtoa_r+0x596>
   90110:	e2c2      	b.n	90698 <_dtoa_r+0xb2a>
   90112:	2200      	movs	r2, #0
   90114:	4b77      	ldr	r3, [pc, #476]	; (902f4 <_dtoa_r+0x786>)
   90116:	f002 fdf1 	bl	92cfc <__aeabi_dmul>
   9011a:	4606      	mov	r6, r0
   9011c:	460f      	mov	r7, r1
   9011e:	e7c2      	b.n	900a6 <_dtoa_r+0x538>
   90120:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   90124:	e9cd 0104 	strd	r0, r1, [sp, #16]
   90128:	9b19      	ldr	r3, [sp, #100]	; 0x64
   9012a:	2b00      	cmp	r3, #0
   9012c:	db7c      	blt.n	90228 <_dtoa_r+0x6ba>
   9012e:	f1b9 0f0e 	cmp.w	r9, #14
   90132:	dc79      	bgt.n	90228 <_dtoa_r+0x6ba>
   90134:	4b70      	ldr	r3, [pc, #448]	; (902f8 <_dtoa_r+0x78a>)
   90136:	9f25      	ldr	r7, [sp, #148]	; 0x94
   90138:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   9013c:	2f00      	cmp	r7, #0
   9013e:	e9d3 4500 	ldrd	r4, r5, [r3]
   90142:	da14      	bge.n	9016e <_dtoa_r+0x600>
   90144:	9f07      	ldr	r7, [sp, #28]
   90146:	2f00      	cmp	r7, #0
   90148:	dc11      	bgt.n	9016e <_dtoa_r+0x600>
   9014a:	f040 8176 	bne.w	9043a <_dtoa_r+0x8cc>
   9014e:	4620      	mov	r0, r4
   90150:	4629      	mov	r1, r5
   90152:	2200      	movs	r2, #0
   90154:	4b69      	ldr	r3, [pc, #420]	; (902fc <_dtoa_r+0x78e>)
   90156:	f002 fdd1 	bl	92cfc <__aeabi_dmul>
   9015a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   9015e:	f003 f853 	bl	93208 <__aeabi_dcmpge>
   90162:	9d07      	ldr	r5, [sp, #28]
   90164:	462c      	mov	r4, r5
   90166:	2800      	cmp	r0, #0
   90168:	f040 8169 	bne.w	9043e <_dtoa_r+0x8d0>
   9016c:	e171      	b.n	90452 <_dtoa_r+0x8e4>
   9016e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   90172:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   90176:	4622      	mov	r2, r4
   90178:	462b      	mov	r3, r5
   9017a:	4630      	mov	r0, r6
   9017c:	4639      	mov	r1, r7
   9017e:	f002 fee7 	bl	92f50 <__aeabi_ddiv>
   90182:	f003 f855 	bl	93230 <__aeabi_d2iz>
   90186:	9004      	str	r0, [sp, #16]
   90188:	f002 fd52 	bl	92c30 <__aeabi_i2d>
   9018c:	4622      	mov	r2, r4
   9018e:	462b      	mov	r3, r5
   90190:	f002 fdb4 	bl	92cfc <__aeabi_dmul>
   90194:	4602      	mov	r2, r0
   90196:	460b      	mov	r3, r1
   90198:	4630      	mov	r0, r6
   9019a:	4639      	mov	r1, r7
   9019c:	f002 fbfa 	bl	92994 <__aeabi_dsub>
   901a0:	9f04      	ldr	r7, [sp, #16]
   901a2:	4602      	mov	r2, r0
   901a4:	f107 0630 	add.w	r6, r7, #48	; 0x30
   901a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   901aa:	f808 6b01 	strb.w	r6, [r8], #1
   901ae:	ebc7 0608 	rsb	r6, r7, r8
   901b2:	9f07      	ldr	r7, [sp, #28]
   901b4:	460b      	mov	r3, r1
   901b6:	42be      	cmp	r6, r7
   901b8:	d129      	bne.n	9020e <_dtoa_r+0x6a0>
   901ba:	f002 fbed 	bl	92998 <__adddf3>
   901be:	4622      	mov	r2, r4
   901c0:	462b      	mov	r3, r5
   901c2:	4606      	mov	r6, r0
   901c4:	460f      	mov	r7, r1
   901c6:	f003 f829 	bl	9321c <__aeabi_dcmpgt>
   901ca:	b970      	cbnz	r0, 901ea <_dtoa_r+0x67c>
   901cc:	4630      	mov	r0, r6
   901ce:	4639      	mov	r1, r7
   901d0:	4622      	mov	r2, r4
   901d2:	462b      	mov	r3, r5
   901d4:	f002 fffa 	bl	931cc <__aeabi_dcmpeq>
   901d8:	2800      	cmp	r0, #0
   901da:	f000 825f 	beq.w	9069c <_dtoa_r+0xb2e>
   901de:	9f04      	ldr	r7, [sp, #16]
   901e0:	07fb      	lsls	r3, r7, #31
   901e2:	d402      	bmi.n	901ea <_dtoa_r+0x67c>
   901e4:	e25a      	b.n	9069c <_dtoa_r+0xb2e>
   901e6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   901ea:	4643      	mov	r3, r8
   901ec:	4698      	mov	r8, r3
   901ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
   901f2:	3b01      	subs	r3, #1
   901f4:	2a39      	cmp	r2, #57	; 0x39
   901f6:	d106      	bne.n	90206 <_dtoa_r+0x698>
   901f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   901fa:	429f      	cmp	r7, r3
   901fc:	d1f6      	bne.n	901ec <_dtoa_r+0x67e>
   901fe:	2230      	movs	r2, #48	; 0x30
   90200:	f109 0901 	add.w	r9, r9, #1
   90204:	703a      	strb	r2, [r7, #0]
   90206:	781a      	ldrb	r2, [r3, #0]
   90208:	3201      	adds	r2, #1
   9020a:	701a      	strb	r2, [r3, #0]
   9020c:	e246      	b.n	9069c <_dtoa_r+0xb2e>
   9020e:	2200      	movs	r2, #0
   90210:	4b38      	ldr	r3, [pc, #224]	; (902f4 <_dtoa_r+0x786>)
   90212:	f002 fd73 	bl	92cfc <__aeabi_dmul>
   90216:	2200      	movs	r2, #0
   90218:	2300      	movs	r3, #0
   9021a:	4606      	mov	r6, r0
   9021c:	460f      	mov	r7, r1
   9021e:	f002 ffd5 	bl	931cc <__aeabi_dcmpeq>
   90222:	2800      	cmp	r0, #0
   90224:	d0a7      	beq.n	90176 <_dtoa_r+0x608>
   90226:	e239      	b.n	9069c <_dtoa_r+0xb2e>
   90228:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   9022a:	2f00      	cmp	r7, #0
   9022c:	d030      	beq.n	90290 <_dtoa_r+0x722>
   9022e:	9f24      	ldr	r7, [sp, #144]	; 0x90
   90230:	2f01      	cmp	r7, #1
   90232:	dc0a      	bgt.n	9024a <_dtoa_r+0x6dc>
   90234:	9f15      	ldr	r7, [sp, #84]	; 0x54
   90236:	b117      	cbz	r7, 9023e <_dtoa_r+0x6d0>
   90238:	f203 4333 	addw	r3, r3, #1075	; 0x433
   9023c:	e002      	b.n	90244 <_dtoa_r+0x6d6>
   9023e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   90240:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   90244:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   90246:	9e08      	ldr	r6, [sp, #32]
   90248:	e016      	b.n	90278 <_dtoa_r+0x70a>
   9024a:	9f07      	ldr	r7, [sp, #28]
   9024c:	1e7d      	subs	r5, r7, #1
   9024e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   90250:	42af      	cmp	r7, r5
   90252:	db01      	blt.n	90258 <_dtoa_r+0x6ea>
   90254:	1b7d      	subs	r5, r7, r5
   90256:	e006      	b.n	90266 <_dtoa_r+0x6f8>
   90258:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   9025a:	950e      	str	r5, [sp, #56]	; 0x38
   9025c:	1beb      	subs	r3, r5, r7
   9025e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   90260:	2500      	movs	r5, #0
   90262:	441f      	add	r7, r3
   90264:	9711      	str	r7, [sp, #68]	; 0x44
   90266:	9f07      	ldr	r7, [sp, #28]
   90268:	2f00      	cmp	r7, #0
   9026a:	da03      	bge.n	90274 <_dtoa_r+0x706>
   9026c:	9808      	ldr	r0, [sp, #32]
   9026e:	2300      	movs	r3, #0
   90270:	1bc6      	subs	r6, r0, r7
   90272:	e001      	b.n	90278 <_dtoa_r+0x70a>
   90274:	9e08      	ldr	r6, [sp, #32]
   90276:	9b07      	ldr	r3, [sp, #28]
   90278:	9f08      	ldr	r7, [sp, #32]
   9027a:	4650      	mov	r0, sl
   9027c:	441f      	add	r7, r3
   9027e:	9708      	str	r7, [sp, #32]
   90280:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   90282:	2101      	movs	r1, #1
   90284:	441f      	add	r7, r3
   90286:	970a      	str	r7, [sp, #40]	; 0x28
   90288:	f001 f880 	bl	9138c <__i2b>
   9028c:	4604      	mov	r4, r0
   9028e:	e002      	b.n	90296 <_dtoa_r+0x728>
   90290:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   90292:	9e08      	ldr	r6, [sp, #32]
   90294:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   90296:	b16e      	cbz	r6, 902b4 <_dtoa_r+0x746>
   90298:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   9029a:	2f00      	cmp	r7, #0
   9029c:	dd0a      	ble.n	902b4 <_dtoa_r+0x746>
   9029e:	463b      	mov	r3, r7
   902a0:	9f08      	ldr	r7, [sp, #32]
   902a2:	42b3      	cmp	r3, r6
   902a4:	bfa8      	it	ge
   902a6:	4633      	movge	r3, r6
   902a8:	1aff      	subs	r7, r7, r3
   902aa:	9708      	str	r7, [sp, #32]
   902ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   902ae:	1af6      	subs	r6, r6, r3
   902b0:	1aff      	subs	r7, r7, r3
   902b2:	970a      	str	r7, [sp, #40]	; 0x28
   902b4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   902b6:	2f00      	cmp	r7, #0
   902b8:	dd28      	ble.n	9030c <_dtoa_r+0x79e>
   902ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   902bc:	b307      	cbz	r7, 90300 <_dtoa_r+0x792>
   902be:	2d00      	cmp	r5, #0
   902c0:	dd10      	ble.n	902e4 <_dtoa_r+0x776>
   902c2:	4621      	mov	r1, r4
   902c4:	462a      	mov	r2, r5
   902c6:	4650      	mov	r0, sl
   902c8:	f001 f901 	bl	914ce <__pow5mult>
   902cc:	4604      	mov	r4, r0
   902ce:	465a      	mov	r2, fp
   902d0:	4621      	mov	r1, r4
   902d2:	4650      	mov	r0, sl
   902d4:	f001 f863 	bl	9139e <__multiply>
   902d8:	4659      	mov	r1, fp
   902da:	4607      	mov	r7, r0
   902dc:	4650      	mov	r0, sl
   902de:	f000 ff83 	bl	911e8 <_Bfree>
   902e2:	46bb      	mov	fp, r7
   902e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   902e6:	1b7a      	subs	r2, r7, r5
   902e8:	d010      	beq.n	9030c <_dtoa_r+0x79e>
   902ea:	4650      	mov	r0, sl
   902ec:	4659      	mov	r1, fp
   902ee:	e00a      	b.n	90306 <_dtoa_r+0x798>
   902f0:	3fe00000 	.word	0x3fe00000
   902f4:	40240000 	.word	0x40240000
   902f8:	000b1258 	.word	0x000b1258
   902fc:	40140000 	.word	0x40140000
   90300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   90302:	4650      	mov	r0, sl
   90304:	4659      	mov	r1, fp
   90306:	f001 f8e2 	bl	914ce <__pow5mult>
   9030a:	4683      	mov	fp, r0
   9030c:	4650      	mov	r0, sl
   9030e:	2101      	movs	r1, #1
   90310:	f001 f83c 	bl	9138c <__i2b>
   90314:	9f11      	ldr	r7, [sp, #68]	; 0x44
   90316:	4605      	mov	r5, r0
   90318:	2f00      	cmp	r7, #0
   9031a:	dd05      	ble.n	90328 <_dtoa_r+0x7ba>
   9031c:	4629      	mov	r1, r5
   9031e:	4650      	mov	r0, sl
   90320:	463a      	mov	r2, r7
   90322:	f001 f8d4 	bl	914ce <__pow5mult>
   90326:	4605      	mov	r5, r0
   90328:	9f24      	ldr	r7, [sp, #144]	; 0x90
   9032a:	2f01      	cmp	r7, #1
   9032c:	dc12      	bgt.n	90354 <_dtoa_r+0x7e6>
   9032e:	9804      	ldr	r0, [sp, #16]
   90330:	b980      	cbnz	r0, 90354 <_dtoa_r+0x7e6>
   90332:	9905      	ldr	r1, [sp, #20]
   90334:	f3c1 0313 	ubfx	r3, r1, #0, #20
   90338:	b973      	cbnz	r3, 90358 <_dtoa_r+0x7ea>
   9033a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   9033e:	0d3f      	lsrs	r7, r7, #20
   90340:	053f      	lsls	r7, r7, #20
   90342:	b157      	cbz	r7, 9035a <_dtoa_r+0x7ec>
   90344:	9f08      	ldr	r7, [sp, #32]
   90346:	3701      	adds	r7, #1
   90348:	9708      	str	r7, [sp, #32]
   9034a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   9034c:	3701      	adds	r7, #1
   9034e:	970a      	str	r7, [sp, #40]	; 0x28
   90350:	2701      	movs	r7, #1
   90352:	e002      	b.n	9035a <_dtoa_r+0x7ec>
   90354:	2700      	movs	r7, #0
   90356:	e000      	b.n	9035a <_dtoa_r+0x7ec>
   90358:	9f04      	ldr	r7, [sp, #16]
   9035a:	9811      	ldr	r0, [sp, #68]	; 0x44
   9035c:	b140      	cbz	r0, 90370 <_dtoa_r+0x802>
   9035e:	692b      	ldr	r3, [r5, #16]
   90360:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   90364:	6918      	ldr	r0, [r3, #16]
   90366:	f000 ffc4 	bl	912f2 <__hi0bits>
   9036a:	f1c0 0020 	rsb	r0, r0, #32
   9036e:	e000      	b.n	90372 <_dtoa_r+0x804>
   90370:	2001      	movs	r0, #1
   90372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   90374:	4403      	add	r3, r0
   90376:	f013 031f 	ands.w	r3, r3, #31
   9037a:	d00f      	beq.n	9039c <_dtoa_r+0x82e>
   9037c:	f1c3 0220 	rsb	r2, r3, #32
   90380:	2a04      	cmp	r2, #4
   90382:	dd09      	ble.n	90398 <_dtoa_r+0x82a>
   90384:	9908      	ldr	r1, [sp, #32]
   90386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   90388:	f1c3 031c 	rsb	r3, r3, #28
   9038c:	4419      	add	r1, r3
   9038e:	441a      	add	r2, r3
   90390:	9108      	str	r1, [sp, #32]
   90392:	441e      	add	r6, r3
   90394:	920a      	str	r2, [sp, #40]	; 0x28
   90396:	e009      	b.n	903ac <_dtoa_r+0x83e>
   90398:	d008      	beq.n	903ac <_dtoa_r+0x83e>
   9039a:	4613      	mov	r3, r2
   9039c:	9808      	ldr	r0, [sp, #32]
   9039e:	990a      	ldr	r1, [sp, #40]	; 0x28
   903a0:	331c      	adds	r3, #28
   903a2:	4418      	add	r0, r3
   903a4:	4419      	add	r1, r3
   903a6:	9008      	str	r0, [sp, #32]
   903a8:	441e      	add	r6, r3
   903aa:	910a      	str	r1, [sp, #40]	; 0x28
   903ac:	9a08      	ldr	r2, [sp, #32]
   903ae:	2a00      	cmp	r2, #0
   903b0:	dd04      	ble.n	903bc <_dtoa_r+0x84e>
   903b2:	4659      	mov	r1, fp
   903b4:	4650      	mov	r0, sl
   903b6:	f001 f8c9 	bl	9154c <__lshift>
   903ba:	4683      	mov	fp, r0
   903bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   903be:	2b00      	cmp	r3, #0
   903c0:	dd05      	ble.n	903ce <_dtoa_r+0x860>
   903c2:	4629      	mov	r1, r5
   903c4:	4650      	mov	r0, sl
   903c6:	461a      	mov	r2, r3
   903c8:	f001 f8c0 	bl	9154c <__lshift>
   903cc:	4605      	mov	r5, r0
   903ce:	9814      	ldr	r0, [sp, #80]	; 0x50
   903d0:	b1e0      	cbz	r0, 9040c <_dtoa_r+0x89e>
   903d2:	4658      	mov	r0, fp
   903d4:	4629      	mov	r1, r5
   903d6:	f001 f90c 	bl	915f2 <__mcmp>
   903da:	2800      	cmp	r0, #0
   903dc:	da16      	bge.n	9040c <_dtoa_r+0x89e>
   903de:	4659      	mov	r1, fp
   903e0:	4650      	mov	r0, sl
   903e2:	220a      	movs	r2, #10
   903e4:	2300      	movs	r3, #0
   903e6:	f000 ff08 	bl	911fa <__multadd>
   903ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   903ec:	f109 39ff 	add.w	r9, r9, #4294967295
   903f0:	4683      	mov	fp, r0
   903f2:	b149      	cbz	r1, 90408 <_dtoa_r+0x89a>
   903f4:	4621      	mov	r1, r4
   903f6:	220a      	movs	r2, #10
   903f8:	4650      	mov	r0, sl
   903fa:	2300      	movs	r3, #0
   903fc:	f000 fefd 	bl	911fa <__multadd>
   90400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   90402:	4604      	mov	r4, r0
   90404:	9207      	str	r2, [sp, #28]
   90406:	e001      	b.n	9040c <_dtoa_r+0x89e>
   90408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   9040a:	9307      	str	r3, [sp, #28]
   9040c:	9807      	ldr	r0, [sp, #28]
   9040e:	2800      	cmp	r0, #0
   90410:	dc29      	bgt.n	90466 <_dtoa_r+0x8f8>
   90412:	9924      	ldr	r1, [sp, #144]	; 0x90
   90414:	2902      	cmp	r1, #2
   90416:	dd26      	ble.n	90466 <_dtoa_r+0x8f8>
   90418:	b988      	cbnz	r0, 9043e <_dtoa_r+0x8d0>
   9041a:	4629      	mov	r1, r5
   9041c:	2205      	movs	r2, #5
   9041e:	9b07      	ldr	r3, [sp, #28]
   90420:	4650      	mov	r0, sl
   90422:	f000 feea 	bl	911fa <__multadd>
   90426:	4605      	mov	r5, r0
   90428:	4629      	mov	r1, r5
   9042a:	4658      	mov	r0, fp
   9042c:	f001 f8e1 	bl	915f2 <__mcmp>
   90430:	2800      	cmp	r0, #0
   90432:	dc0e      	bgt.n	90452 <_dtoa_r+0x8e4>
   90434:	e003      	b.n	9043e <_dtoa_r+0x8d0>
   90436:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   90438:	e000      	b.n	9043c <_dtoa_r+0x8ce>
   9043a:	2500      	movs	r5, #0
   9043c:	462c      	mov	r4, r5
   9043e:	9f25      	ldr	r7, [sp, #148]	; 0x94
   90440:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   90444:	ea6f 0907 	mvn.w	r9, r7
   90448:	e00a      	b.n	90460 <_dtoa_r+0x8f2>
   9044a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   9044c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   90450:	462c      	mov	r4, r5
   90452:	9f09      	ldr	r7, [sp, #36]	; 0x24
   90454:	2331      	movs	r3, #49	; 0x31
   90456:	f107 0801 	add.w	r8, r7, #1
   9045a:	703b      	strb	r3, [r7, #0]
   9045c:	f109 0901 	add.w	r9, r9, #1
   90460:	4627      	mov	r7, r4
   90462:	2400      	movs	r4, #0
   90464:	e107      	b.n	90676 <_dtoa_r+0xb08>
   90466:	980f      	ldr	r0, [sp, #60]	; 0x3c
   90468:	2800      	cmp	r0, #0
   9046a:	f000 80bb 	beq.w	905e4 <_dtoa_r+0xa76>
   9046e:	2e00      	cmp	r6, #0
   90470:	dd05      	ble.n	9047e <_dtoa_r+0x910>
   90472:	4621      	mov	r1, r4
   90474:	4650      	mov	r0, sl
   90476:	4632      	mov	r2, r6
   90478:	f001 f868 	bl	9154c <__lshift>
   9047c:	4604      	mov	r4, r0
   9047e:	b19f      	cbz	r7, 904a8 <_dtoa_r+0x93a>
   90480:	6861      	ldr	r1, [r4, #4]
   90482:	4650      	mov	r0, sl
   90484:	f000 fe8a 	bl	9119c <_Balloc>
   90488:	6922      	ldr	r2, [r4, #16]
   9048a:	4606      	mov	r6, r0
   9048c:	3202      	adds	r2, #2
   9048e:	f104 010c 	add.w	r1, r4, #12
   90492:	0092      	lsls	r2, r2, #2
   90494:	300c      	adds	r0, #12
   90496:	f7fc fc07 	bl	8cca8 <memcpy>
   9049a:	4650      	mov	r0, sl
   9049c:	4631      	mov	r1, r6
   9049e:	2201      	movs	r2, #1
   904a0:	f001 f854 	bl	9154c <__lshift>
   904a4:	4607      	mov	r7, r0
   904a6:	e000      	b.n	904aa <_dtoa_r+0x93c>
   904a8:	4627      	mov	r7, r4
   904aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   904ac:	4629      	mov	r1, r5
   904ae:	4658      	mov	r0, fp
   904b0:	f7ff face 	bl	8fa50 <quorem>
   904b4:	4621      	mov	r1, r4
   904b6:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   904ba:	4680      	mov	r8, r0
   904bc:	4658      	mov	r0, fp
   904be:	f8cd c008 	str.w	ip, [sp, #8]
   904c2:	f001 f896 	bl	915f2 <__mcmp>
   904c6:	463a      	mov	r2, r7
   904c8:	9008      	str	r0, [sp, #32]
   904ca:	4629      	mov	r1, r5
   904cc:	4650      	mov	r0, sl
   904ce:	f001 f8ad 	bl	9162c <__mdiff>
   904d2:	68c3      	ldr	r3, [r0, #12]
   904d4:	4602      	mov	r2, r0
   904d6:	f8dd c008 	ldr.w	ip, [sp, #8]
   904da:	b94b      	cbnz	r3, 904f0 <_dtoa_r+0x982>
   904dc:	4611      	mov	r1, r2
   904de:	4658      	mov	r0, fp
   904e0:	9203      	str	r2, [sp, #12]
   904e2:	f001 f886 	bl	915f2 <__mcmp>
   904e6:	9a03      	ldr	r2, [sp, #12]
   904e8:	4603      	mov	r3, r0
   904ea:	f8dd c008 	ldr.w	ip, [sp, #8]
   904ee:	e000      	b.n	904f2 <_dtoa_r+0x984>
   904f0:	2301      	movs	r3, #1
   904f2:	4650      	mov	r0, sl
   904f4:	4611      	mov	r1, r2
   904f6:	9303      	str	r3, [sp, #12]
   904f8:	f8cd c008 	str.w	ip, [sp, #8]
   904fc:	f000 fe74 	bl	911e8 <_Bfree>
   90500:	9b03      	ldr	r3, [sp, #12]
   90502:	f8dd c008 	ldr.w	ip, [sp, #8]
   90506:	b963      	cbnz	r3, 90522 <_dtoa_r+0x9b4>
   90508:	9924      	ldr	r1, [sp, #144]	; 0x90
   9050a:	b951      	cbnz	r1, 90522 <_dtoa_r+0x9b4>
   9050c:	9804      	ldr	r0, [sp, #16]
   9050e:	f000 0201 	and.w	r2, r0, #1
   90512:	b932      	cbnz	r2, 90522 <_dtoa_r+0x9b4>
   90514:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   90518:	d035      	beq.n	90586 <_dtoa_r+0xa18>
   9051a:	9b08      	ldr	r3, [sp, #32]
   9051c:	2b00      	cmp	r3, #0
   9051e:	dc24      	bgt.n	9056a <_dtoa_r+0x9fc>
   90520:	e025      	b.n	9056e <_dtoa_r+0xa00>
   90522:	9808      	ldr	r0, [sp, #32]
   90524:	2800      	cmp	r0, #0
   90526:	da02      	bge.n	9052e <_dtoa_r+0x9c0>
   90528:	2b00      	cmp	r3, #0
   9052a:	dc08      	bgt.n	9053e <_dtoa_r+0x9d0>
   9052c:	e01f      	b.n	9056e <_dtoa_r+0xa00>
   9052e:	d123      	bne.n	90578 <_dtoa_r+0xa0a>
   90530:	9924      	ldr	r1, [sp, #144]	; 0x90
   90532:	bb09      	cbnz	r1, 90578 <_dtoa_r+0xa0a>
   90534:	9804      	ldr	r0, [sp, #16]
   90536:	f000 0201 	and.w	r2, r0, #1
   9053a:	b9ea      	cbnz	r2, 90578 <_dtoa_r+0xa0a>
   9053c:	e7f4      	b.n	90528 <_dtoa_r+0x9ba>
   9053e:	4659      	mov	r1, fp
   90540:	2201      	movs	r2, #1
   90542:	4650      	mov	r0, sl
   90544:	f8cd c008 	str.w	ip, [sp, #8]
   90548:	f001 f800 	bl	9154c <__lshift>
   9054c:	4629      	mov	r1, r5
   9054e:	4683      	mov	fp, r0
   90550:	f001 f84f 	bl	915f2 <__mcmp>
   90554:	2800      	cmp	r0, #0
   90556:	f8dd c008 	ldr.w	ip, [sp, #8]
   9055a:	dc03      	bgt.n	90564 <_dtoa_r+0x9f6>
   9055c:	d107      	bne.n	9056e <_dtoa_r+0xa00>
   9055e:	f01c 0f01 	tst.w	ip, #1
   90562:	d004      	beq.n	9056e <_dtoa_r+0xa00>
   90564:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   90568:	d00d      	beq.n	90586 <_dtoa_r+0xa18>
   9056a:	f108 0c31 	add.w	ip, r8, #49	; 0x31
   9056e:	f106 0801 	add.w	r8, r6, #1
   90572:	f886 c000 	strb.w	ip, [r6]
   90576:	e07e      	b.n	90676 <_dtoa_r+0xb08>
   90578:	2b00      	cmp	r3, #0
   9057a:	f106 0801 	add.w	r8, r6, #1
   9057e:	dd09      	ble.n	90594 <_dtoa_r+0xa26>
   90580:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   90584:	d103      	bne.n	9058e <_dtoa_r+0xa20>
   90586:	2339      	movs	r3, #57	; 0x39
   90588:	7033      	strb	r3, [r6, #0]
   9058a:	3601      	adds	r6, #1
   9058c:	e05b      	b.n	90646 <_dtoa_r+0xad8>
   9058e:	f10c 0301 	add.w	r3, ip, #1
   90592:	e068      	b.n	90666 <_dtoa_r+0xaf8>
   90594:	9909      	ldr	r1, [sp, #36]	; 0x24
   90596:	9a07      	ldr	r2, [sp, #28]
   90598:	ebc1 0308 	rsb	r3, r1, r8
   9059c:	4646      	mov	r6, r8
   9059e:	4293      	cmp	r3, r2
   905a0:	f806 cc01 	strb.w	ip, [r6, #-1]
   905a4:	d03c      	beq.n	90620 <_dtoa_r+0xab2>
   905a6:	4659      	mov	r1, fp
   905a8:	220a      	movs	r2, #10
   905aa:	2300      	movs	r3, #0
   905ac:	4650      	mov	r0, sl
   905ae:	f000 fe24 	bl	911fa <__multadd>
   905b2:	42bc      	cmp	r4, r7
   905b4:	4683      	mov	fp, r0
   905b6:	4621      	mov	r1, r4
   905b8:	4650      	mov	r0, sl
   905ba:	f04f 020a 	mov.w	r2, #10
   905be:	f04f 0300 	mov.w	r3, #0
   905c2:	d104      	bne.n	905ce <_dtoa_r+0xa60>
   905c4:	f000 fe19 	bl	911fa <__multadd>
   905c8:	4604      	mov	r4, r0
   905ca:	4607      	mov	r7, r0
   905cc:	e76e      	b.n	904ac <_dtoa_r+0x93e>
   905ce:	f000 fe14 	bl	911fa <__multadd>
   905d2:	4639      	mov	r1, r7
   905d4:	4604      	mov	r4, r0
   905d6:	220a      	movs	r2, #10
   905d8:	4650      	mov	r0, sl
   905da:	2300      	movs	r3, #0
   905dc:	f000 fe0d 	bl	911fa <__multadd>
   905e0:	4607      	mov	r7, r0
   905e2:	e763      	b.n	904ac <_dtoa_r+0x93e>
   905e4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   905e6:	4658      	mov	r0, fp
   905e8:	4629      	mov	r1, r5
   905ea:	f7ff fa31 	bl	8fa50 <quorem>
   905ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
   905f0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   905f4:	f807 c006 	strb.w	ip, [r7, r6]
   905f8:	9f07      	ldr	r7, [sp, #28]
   905fa:	3601      	adds	r6, #1
   905fc:	42be      	cmp	r6, r7
   905fe:	db07      	blt.n	90610 <_dtoa_r+0xaa2>
   90600:	9e09      	ldr	r6, [sp, #36]	; 0x24
   90602:	2f01      	cmp	r7, #1
   90604:	bfac      	ite	ge
   90606:	19f6      	addge	r6, r6, r7
   90608:	3601      	addlt	r6, #1
   9060a:	4627      	mov	r7, r4
   9060c:	2400      	movs	r4, #0
   9060e:	e007      	b.n	90620 <_dtoa_r+0xab2>
   90610:	4659      	mov	r1, fp
   90612:	4650      	mov	r0, sl
   90614:	220a      	movs	r2, #10
   90616:	2300      	movs	r3, #0
   90618:	f000 fdef 	bl	911fa <__multadd>
   9061c:	4683      	mov	fp, r0
   9061e:	e7e2      	b.n	905e6 <_dtoa_r+0xa78>
   90620:	4659      	mov	r1, fp
   90622:	2201      	movs	r2, #1
   90624:	4650      	mov	r0, sl
   90626:	f8cd c008 	str.w	ip, [sp, #8]
   9062a:	f000 ff8f 	bl	9154c <__lshift>
   9062e:	4629      	mov	r1, r5
   90630:	4683      	mov	fp, r0
   90632:	f000 ffde 	bl	915f2 <__mcmp>
   90636:	2800      	cmp	r0, #0
   90638:	f8dd c008 	ldr.w	ip, [sp, #8]
   9063c:	dc03      	bgt.n	90646 <_dtoa_r+0xad8>
   9063e:	d114      	bne.n	9066a <_dtoa_r+0xafc>
   90640:	f01c 0f01 	tst.w	ip, #1
   90644:	d011      	beq.n	9066a <_dtoa_r+0xafc>
   90646:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   9064a:	46b0      	mov	r8, r6
   9064c:	2b39      	cmp	r3, #57	; 0x39
   9064e:	f106 36ff 	add.w	r6, r6, #4294967295
   90652:	d107      	bne.n	90664 <_dtoa_r+0xaf6>
   90654:	9809      	ldr	r0, [sp, #36]	; 0x24
   90656:	42b0      	cmp	r0, r6
   90658:	d1f5      	bne.n	90646 <_dtoa_r+0xad8>
   9065a:	2331      	movs	r3, #49	; 0x31
   9065c:	f109 0901 	add.w	r9, r9, #1
   90660:	7003      	strb	r3, [r0, #0]
   90662:	e008      	b.n	90676 <_dtoa_r+0xb08>
   90664:	3301      	adds	r3, #1
   90666:	7033      	strb	r3, [r6, #0]
   90668:	e005      	b.n	90676 <_dtoa_r+0xb08>
   9066a:	46b0      	mov	r8, r6
   9066c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   90670:	3e01      	subs	r6, #1
   90672:	2b30      	cmp	r3, #48	; 0x30
   90674:	d0f9      	beq.n	9066a <_dtoa_r+0xafc>
   90676:	4650      	mov	r0, sl
   90678:	4629      	mov	r1, r5
   9067a:	f000 fdb5 	bl	911e8 <_Bfree>
   9067e:	b16f      	cbz	r7, 9069c <_dtoa_r+0xb2e>
   90680:	b12c      	cbz	r4, 9068e <_dtoa_r+0xb20>
   90682:	42bc      	cmp	r4, r7
   90684:	d003      	beq.n	9068e <_dtoa_r+0xb20>
   90686:	4650      	mov	r0, sl
   90688:	4621      	mov	r1, r4
   9068a:	f000 fdad 	bl	911e8 <_Bfree>
   9068e:	4650      	mov	r0, sl
   90690:	4639      	mov	r1, r7
   90692:	f000 fda9 	bl	911e8 <_Bfree>
   90696:	e001      	b.n	9069c <_dtoa_r+0xb2e>
   90698:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   9069c:	4650      	mov	r0, sl
   9069e:	4659      	mov	r1, fp
   906a0:	f000 fda2 	bl	911e8 <_Bfree>
   906a4:	2300      	movs	r3, #0
   906a6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   906a8:	f888 3000 	strb.w	r3, [r8]
   906ac:	f109 0301 	add.w	r3, r9, #1
   906b0:	603b      	str	r3, [r7, #0]
   906b2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   906b4:	b127      	cbz	r7, 906c0 <_dtoa_r+0xb52>
   906b6:	f8c7 8000 	str.w	r8, [r7]
   906ba:	e001      	b.n	906c0 <_dtoa_r+0xb52>
   906bc:	4802      	ldr	r0, [pc, #8]	; (906c8 <_dtoa_r+0xb5a>)
   906be:	e000      	b.n	906c2 <_dtoa_r+0xb54>
   906c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   906c2:	b01b      	add	sp, #108	; 0x6c
   906c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   906c8:	000b11f0 	.word	0x000b11f0
   906cc:	f3af 8000 	nop.w

000906d0 <__sflush_r>:
   906d0:	898a      	ldrh	r2, [r1, #12]
   906d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   906d6:	b293      	uxth	r3, r2
   906d8:	4605      	mov	r5, r0
   906da:	0718      	lsls	r0, r3, #28
   906dc:	460c      	mov	r4, r1
   906de:	d45e      	bmi.n	9079e <__sflush_r+0xce>
   906e0:	684b      	ldr	r3, [r1, #4]
   906e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   906e6:	2b00      	cmp	r3, #0
   906e8:	818a      	strh	r2, [r1, #12]
   906ea:	dc02      	bgt.n	906f2 <__sflush_r+0x22>
   906ec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   906ee:	2b00      	cmp	r3, #0
   906f0:	dd18      	ble.n	90724 <__sflush_r+0x54>
   906f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   906f4:	b1b6      	cbz	r6, 90724 <__sflush_r+0x54>
   906f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   906fa:	2300      	movs	r3, #0
   906fc:	b292      	uxth	r2, r2
   906fe:	682f      	ldr	r7, [r5, #0]
   90700:	602b      	str	r3, [r5, #0]
   90702:	b10a      	cbz	r2, 90708 <__sflush_r+0x38>
   90704:	6d22      	ldr	r2, [r4, #80]	; 0x50
   90706:	e010      	b.n	9072a <__sflush_r+0x5a>
   90708:	69e1      	ldr	r1, [r4, #28]
   9070a:	4628      	mov	r0, r5
   9070c:	2301      	movs	r3, #1
   9070e:	47b0      	blx	r6
   90710:	1c41      	adds	r1, r0, #1
   90712:	4602      	mov	r2, r0
   90714:	d109      	bne.n	9072a <__sflush_r+0x5a>
   90716:	682b      	ldr	r3, [r5, #0]
   90718:	b13b      	cbz	r3, 9072a <__sflush_r+0x5a>
   9071a:	2b1d      	cmp	r3, #29
   9071c:	d001      	beq.n	90722 <__sflush_r+0x52>
   9071e:	2b16      	cmp	r3, #22
   90720:	d14a      	bne.n	907b8 <__sflush_r+0xe8>
   90722:	602f      	str	r7, [r5, #0]
   90724:	2000      	movs	r0, #0
   90726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9072a:	89a3      	ldrh	r3, [r4, #12]
   9072c:	075b      	lsls	r3, r3, #29
   9072e:	d505      	bpl.n	9073c <__sflush_r+0x6c>
   90730:	6863      	ldr	r3, [r4, #4]
   90732:	1ad2      	subs	r2, r2, r3
   90734:	6b23      	ldr	r3, [r4, #48]	; 0x30
   90736:	b10b      	cbz	r3, 9073c <__sflush_r+0x6c>
   90738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   9073a:	1ad2      	subs	r2, r2, r3
   9073c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   9073e:	4628      	mov	r0, r5
   90740:	69e1      	ldr	r1, [r4, #28]
   90742:	2300      	movs	r3, #0
   90744:	47b0      	blx	r6
   90746:	1c46      	adds	r6, r0, #1
   90748:	89a2      	ldrh	r2, [r4, #12]
   9074a:	d105      	bne.n	90758 <__sflush_r+0x88>
   9074c:	682b      	ldr	r3, [r5, #0]
   9074e:	b11b      	cbz	r3, 90758 <__sflush_r+0x88>
   90750:	2b1d      	cmp	r3, #29
   90752:	d001      	beq.n	90758 <__sflush_r+0x88>
   90754:	2b16      	cmp	r3, #22
   90756:	d11d      	bne.n	90794 <__sflush_r+0xc4>
   90758:	2300      	movs	r3, #0
   9075a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   9075e:	b292      	uxth	r2, r2
   90760:	6063      	str	r3, [r4, #4]
   90762:	6923      	ldr	r3, [r4, #16]
   90764:	04d1      	lsls	r1, r2, #19
   90766:	81a2      	strh	r2, [r4, #12]
   90768:	6023      	str	r3, [r4, #0]
   9076a:	d504      	bpl.n	90776 <__sflush_r+0xa6>
   9076c:	1c42      	adds	r2, r0, #1
   9076e:	d101      	bne.n	90774 <__sflush_r+0xa4>
   90770:	682b      	ldr	r3, [r5, #0]
   90772:	b903      	cbnz	r3, 90776 <__sflush_r+0xa6>
   90774:	6520      	str	r0, [r4, #80]	; 0x50
   90776:	6b21      	ldr	r1, [r4, #48]	; 0x30
   90778:	602f      	str	r7, [r5, #0]
   9077a:	2900      	cmp	r1, #0
   9077c:	d0d2      	beq.n	90724 <__sflush_r+0x54>
   9077e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   90782:	4299      	cmp	r1, r3
   90784:	d002      	beq.n	9078c <__sflush_r+0xbc>
   90786:	4628      	mov	r0, r5
   90788:	f000 f9fa 	bl	90b80 <_free_r>
   9078c:	2000      	movs	r0, #0
   9078e:	6320      	str	r0, [r4, #48]	; 0x30
   90790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   90794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   90798:	81a2      	strh	r2, [r4, #12]
   9079a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9079e:	690e      	ldr	r6, [r1, #16]
   907a0:	2e00      	cmp	r6, #0
   907a2:	d0bf      	beq.n	90724 <__sflush_r+0x54>
   907a4:	079b      	lsls	r3, r3, #30
   907a6:	680a      	ldr	r2, [r1, #0]
   907a8:	bf0c      	ite	eq
   907aa:	694b      	ldreq	r3, [r1, #20]
   907ac:	2300      	movne	r3, #0
   907ae:	ebc6 0802 	rsb	r8, r6, r2
   907b2:	600e      	str	r6, [r1, #0]
   907b4:	608b      	str	r3, [r1, #8]
   907b6:	e012      	b.n	907de <__sflush_r+0x10e>
   907b8:	89a3      	ldrh	r3, [r4, #12]
   907ba:	f04f 30ff 	mov.w	r0, #4294967295
   907be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   907c2:	81a3      	strh	r3, [r4, #12]
   907c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   907c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   907ca:	4628      	mov	r0, r5
   907cc:	69e1      	ldr	r1, [r4, #28]
   907ce:	4632      	mov	r2, r6
   907d0:	4643      	mov	r3, r8
   907d2:	47b8      	blx	r7
   907d4:	2800      	cmp	r0, #0
   907d6:	ddef      	ble.n	907b8 <__sflush_r+0xe8>
   907d8:	4406      	add	r6, r0
   907da:	ebc0 0808 	rsb	r8, r0, r8
   907de:	f1b8 0f00 	cmp.w	r8, #0
   907e2:	dcf1      	bgt.n	907c8 <__sflush_r+0xf8>
   907e4:	e79e      	b.n	90724 <__sflush_r+0x54>

000907e6 <_fflush_r>:
   907e6:	b538      	push	{r3, r4, r5, lr}
   907e8:	460c      	mov	r4, r1
   907ea:	4605      	mov	r5, r0
   907ec:	b118      	cbz	r0, 907f6 <_fflush_r+0x10>
   907ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   907f0:	b90b      	cbnz	r3, 907f6 <_fflush_r+0x10>
   907f2:	f000 f841 	bl	90878 <__sinit>
   907f6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   907fa:	b128      	cbz	r0, 90808 <_fflush_r+0x22>
   907fc:	4628      	mov	r0, r5
   907fe:	4621      	mov	r1, r4
   90800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   90804:	f7ff bf64 	b.w	906d0 <__sflush_r>
   90808:	bd38      	pop	{r3, r4, r5, pc}

0009080a <fflush>:
   9080a:	4601      	mov	r1, r0
   9080c:	b920      	cbnz	r0, 90818 <fflush+0xe>
   9080e:	4b04      	ldr	r3, [pc, #16]	; (90820 <fflush+0x16>)
   90810:	4904      	ldr	r1, [pc, #16]	; (90824 <fflush+0x1a>)
   90812:	6818      	ldr	r0, [r3, #0]
   90814:	f000 bbd4 	b.w	90fc0 <_fwalk_reent>
   90818:	4b03      	ldr	r3, [pc, #12]	; (90828 <fflush+0x1e>)
   9081a:	6818      	ldr	r0, [r3, #0]
   9081c:	f7ff bfe3 	b.w	907e6 <_fflush_r>
   90820:	000b1198 	.word	0x000b1198
   90824:	000907e7 	.word	0x000907e7
   90828:	200702c8 	.word	0x200702c8

0009082c <__fp_lock>:
   9082c:	2000      	movs	r0, #0
   9082e:	4770      	bx	lr

00090830 <__fp_unlock>:
   90830:	2000      	movs	r0, #0
   90832:	4770      	bx	lr

00090834 <_cleanup_r>:
   90834:	4901      	ldr	r1, [pc, #4]	; (9083c <_cleanup_r+0x8>)
   90836:	f000 bba7 	b.w	90f88 <_fwalk>
   9083a:	bf00      	nop
   9083c:	000928f1 	.word	0x000928f1

00090840 <__sfmoreglue>:
   90840:	b570      	push	{r4, r5, r6, lr}
   90842:	1e4b      	subs	r3, r1, #1
   90844:	2568      	movs	r5, #104	; 0x68
   90846:	435d      	muls	r5, r3
   90848:	460e      	mov	r6, r1
   9084a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   9084e:	f7fc f823 	bl	8c898 <_malloc_r>
   90852:	4604      	mov	r4, r0
   90854:	b140      	cbz	r0, 90868 <__sfmoreglue+0x28>
   90856:	2100      	movs	r1, #0
   90858:	e880 0042 	stmia.w	r0, {r1, r6}
   9085c:	300c      	adds	r0, #12
   9085e:	60a0      	str	r0, [r4, #8]
   90860:	f105 0268 	add.w	r2, r5, #104	; 0x68
   90864:	f7fc fa29 	bl	8ccba <memset>
   90868:	4620      	mov	r0, r4
   9086a:	bd70      	pop	{r4, r5, r6, pc}

0009086c <_cleanup>:
   9086c:	4b01      	ldr	r3, [pc, #4]	; (90874 <_cleanup+0x8>)
   9086e:	6818      	ldr	r0, [r3, #0]
   90870:	f7ff bfe0 	b.w	90834 <_cleanup_r>
   90874:	000b1198 	.word	0x000b1198

00090878 <__sinit>:
   90878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9087c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   9087e:	4606      	mov	r6, r0
   90880:	2c00      	cmp	r4, #0
   90882:	d162      	bne.n	9094a <__sinit+0xd2>
   90884:	4b32      	ldr	r3, [pc, #200]	; (90950 <__sinit+0xd8>)
   90886:	6845      	ldr	r5, [r0, #4]
   90888:	63c3      	str	r3, [r0, #60]	; 0x3c
   9088a:	2303      	movs	r3, #3
   9088c:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
   90890:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
   90894:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
   90898:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 90958 <__sinit+0xe0>
   9089c:	2304      	movs	r3, #4
   9089e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9095c <__sinit+0xe4>
   908a2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 90960 <__sinit+0xe8>
   908a6:	4f2b      	ldr	r7, [pc, #172]	; (90954 <__sinit+0xdc>)
   908a8:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
   908ac:	4621      	mov	r1, r4
   908ae:	81ab      	strh	r3, [r5, #12]
   908b0:	602c      	str	r4, [r5, #0]
   908b2:	606c      	str	r4, [r5, #4]
   908b4:	60ac      	str	r4, [r5, #8]
   908b6:	666c      	str	r4, [r5, #100]	; 0x64
   908b8:	81ec      	strh	r4, [r5, #14]
   908ba:	612c      	str	r4, [r5, #16]
   908bc:	616c      	str	r4, [r5, #20]
   908be:	61ac      	str	r4, [r5, #24]
   908c0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   908c4:	2208      	movs	r2, #8
   908c6:	f7fc f9f8 	bl	8ccba <memset>
   908ca:	61ed      	str	r5, [r5, #28]
   908cc:	f8c5 a020 	str.w	sl, [r5, #32]
   908d0:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   908d4:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   908d8:	62ef      	str	r7, [r5, #44]	; 0x2c
   908da:	68b5      	ldr	r5, [r6, #8]
   908dc:	2309      	movs	r3, #9
   908de:	f04f 0b01 	mov.w	fp, #1
   908e2:	81ab      	strh	r3, [r5, #12]
   908e4:	602c      	str	r4, [r5, #0]
   908e6:	606c      	str	r4, [r5, #4]
   908e8:	60ac      	str	r4, [r5, #8]
   908ea:	666c      	str	r4, [r5, #100]	; 0x64
   908ec:	f8a5 b00e 	strh.w	fp, [r5, #14]
   908f0:	612c      	str	r4, [r5, #16]
   908f2:	616c      	str	r4, [r5, #20]
   908f4:	61ac      	str	r4, [r5, #24]
   908f6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   908fa:	4621      	mov	r1, r4
   908fc:	2208      	movs	r2, #8
   908fe:	f7fc f9dc 	bl	8ccba <memset>
   90902:	61ed      	str	r5, [r5, #28]
   90904:	f8c5 a020 	str.w	sl, [r5, #32]
   90908:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   9090c:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   90910:	62ef      	str	r7, [r5, #44]	; 0x2c
   90912:	68f5      	ldr	r5, [r6, #12]
   90914:	2312      	movs	r3, #18
   90916:	81ab      	strh	r3, [r5, #12]
   90918:	2302      	movs	r3, #2
   9091a:	602c      	str	r4, [r5, #0]
   9091c:	606c      	str	r4, [r5, #4]
   9091e:	60ac      	str	r4, [r5, #8]
   90920:	666c      	str	r4, [r5, #100]	; 0x64
   90922:	81eb      	strh	r3, [r5, #14]
   90924:	612c      	str	r4, [r5, #16]
   90926:	616c      	str	r4, [r5, #20]
   90928:	61ac      	str	r4, [r5, #24]
   9092a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   9092e:	4621      	mov	r1, r4
   90930:	2208      	movs	r2, #8
   90932:	f7fc f9c2 	bl	8ccba <memset>
   90936:	61ed      	str	r5, [r5, #28]
   90938:	f8c5 a020 	str.w	sl, [r5, #32]
   9093c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   90940:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   90944:	62ef      	str	r7, [r5, #44]	; 0x2c
   90946:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
   9094a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9094e:	bf00      	nop
   90950:	00090835 	.word	0x00090835
   90954:	00091d8b 	.word	0x00091d8b
   90958:	00091d09 	.word	0x00091d09
   9095c:	00091d2f 	.word	0x00091d2f
   90960:	00091d67 	.word	0x00091d67

00090964 <__sfp>:
   90964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   90966:	4b1c      	ldr	r3, [pc, #112]	; (909d8 <__sfp+0x74>)
   90968:	4607      	mov	r7, r0
   9096a:	681e      	ldr	r6, [r3, #0]
   9096c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   9096e:	b913      	cbnz	r3, 90976 <__sfp+0x12>
   90970:	4630      	mov	r0, r6
   90972:	f7ff ff81 	bl	90878 <__sinit>
   90976:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   9097a:	68b4      	ldr	r4, [r6, #8]
   9097c:	6873      	ldr	r3, [r6, #4]
   9097e:	3b01      	subs	r3, #1
   90980:	d404      	bmi.n	9098c <__sfp+0x28>
   90982:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   90986:	b175      	cbz	r5, 909a6 <__sfp+0x42>
   90988:	3468      	adds	r4, #104	; 0x68
   9098a:	e7f8      	b.n	9097e <__sfp+0x1a>
   9098c:	6833      	ldr	r3, [r6, #0]
   9098e:	b92b      	cbnz	r3, 9099c <__sfp+0x38>
   90990:	4638      	mov	r0, r7
   90992:	2104      	movs	r1, #4
   90994:	f7ff ff54 	bl	90840 <__sfmoreglue>
   90998:	6030      	str	r0, [r6, #0]
   9099a:	b108      	cbz	r0, 909a0 <__sfp+0x3c>
   9099c:	6836      	ldr	r6, [r6, #0]
   9099e:	e7ec      	b.n	9097a <__sfp+0x16>
   909a0:	230c      	movs	r3, #12
   909a2:	603b      	str	r3, [r7, #0]
   909a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   909a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   909aa:	81e3      	strh	r3, [r4, #14]
   909ac:	2301      	movs	r3, #1
   909ae:	81a3      	strh	r3, [r4, #12]
   909b0:	6665      	str	r5, [r4, #100]	; 0x64
   909b2:	6025      	str	r5, [r4, #0]
   909b4:	60a5      	str	r5, [r4, #8]
   909b6:	6065      	str	r5, [r4, #4]
   909b8:	6125      	str	r5, [r4, #16]
   909ba:	6165      	str	r5, [r4, #20]
   909bc:	61a5      	str	r5, [r4, #24]
   909be:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   909c2:	4629      	mov	r1, r5
   909c4:	2208      	movs	r2, #8
   909c6:	f7fc f978 	bl	8ccba <memset>
   909ca:	6325      	str	r5, [r4, #48]	; 0x30
   909cc:	6365      	str	r5, [r4, #52]	; 0x34
   909ce:	6465      	str	r5, [r4, #68]	; 0x44
   909d0:	64a5      	str	r5, [r4, #72]	; 0x48
   909d2:	4620      	mov	r0, r4
   909d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   909d6:	bf00      	nop
   909d8:	000b1198 	.word	0x000b1198

000909dc <__sfp_lock_acquire>:
   909dc:	4770      	bx	lr

000909de <__sfp_lock_release>:
   909de:	4770      	bx	lr

000909e0 <__sinit_lock_acquire>:
   909e0:	4770      	bx	lr

000909e2 <__sinit_lock_release>:
   909e2:	4770      	bx	lr

000909e4 <__fp_lock_all>:
   909e4:	4b02      	ldr	r3, [pc, #8]	; (909f0 <__fp_lock_all+0xc>)
   909e6:	4903      	ldr	r1, [pc, #12]	; (909f4 <__fp_lock_all+0x10>)
   909e8:	6818      	ldr	r0, [r3, #0]
   909ea:	f000 bacd 	b.w	90f88 <_fwalk>
   909ee:	bf00      	nop
   909f0:	200702c8 	.word	0x200702c8
   909f4:	0009082d 	.word	0x0009082d

000909f8 <__fp_unlock_all>:
   909f8:	4b02      	ldr	r3, [pc, #8]	; (90a04 <__fp_unlock_all+0xc>)
   909fa:	4903      	ldr	r1, [pc, #12]	; (90a08 <__fp_unlock_all+0x10>)
   909fc:	6818      	ldr	r0, [r3, #0]
   909fe:	f000 bac3 	b.w	90f88 <_fwalk>
   90a02:	bf00      	nop
   90a04:	200702c8 	.word	0x200702c8
   90a08:	00090831 	.word	0x00090831

00090a0c <_fputwc_r>:
   90a0c:	8993      	ldrh	r3, [r2, #12]
   90a0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   90a12:	460e      	mov	r6, r1
   90a14:	0499      	lsls	r1, r3, #18
   90a16:	4680      	mov	r8, r0
   90a18:	4614      	mov	r4, r2
   90a1a:	d406      	bmi.n	90a2a <_fputwc_r+0x1e>
   90a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   90a20:	8193      	strh	r3, [r2, #12]
   90a22:	6e53      	ldr	r3, [r2, #100]	; 0x64
   90a24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   90a28:	6653      	str	r3, [r2, #100]	; 0x64
   90a2a:	f000 fb0b 	bl	91044 <__locale_mb_cur_max>
   90a2e:	2801      	cmp	r0, #1
   90a30:	d106      	bne.n	90a40 <_fputwc_r+0x34>
   90a32:	1e73      	subs	r3, r6, #1
   90a34:	2bfe      	cmp	r3, #254	; 0xfe
   90a36:	d803      	bhi.n	90a40 <_fputwc_r+0x34>
   90a38:	f88d 6004 	strb.w	r6, [sp, #4]
   90a3c:	4607      	mov	r7, r0
   90a3e:	e00e      	b.n	90a5e <_fputwc_r+0x52>
   90a40:	4632      	mov	r2, r6
   90a42:	4640      	mov	r0, r8
   90a44:	a901      	add	r1, sp, #4
   90a46:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   90a4a:	f001 fe6b 	bl	92724 <_wcrtomb_r>
   90a4e:	1c42      	adds	r2, r0, #1
   90a50:	4607      	mov	r7, r0
   90a52:	d104      	bne.n	90a5e <_fputwc_r+0x52>
   90a54:	89a3      	ldrh	r3, [r4, #12]
   90a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   90a5a:	81a3      	strh	r3, [r4, #12]
   90a5c:	e02b      	b.n	90ab6 <_fputwc_r+0xaa>
   90a5e:	2500      	movs	r5, #0
   90a60:	42bd      	cmp	r5, r7
   90a62:	d024      	beq.n	90aae <_fputwc_r+0xa2>
   90a64:	68a2      	ldr	r2, [r4, #8]
   90a66:	ab01      	add	r3, sp, #4
   90a68:	3a01      	subs	r2, #1
   90a6a:	2a00      	cmp	r2, #0
   90a6c:	60a2      	str	r2, [r4, #8]
   90a6e:	da16      	bge.n	90a9e <_fputwc_r+0x92>
   90a70:	69a1      	ldr	r1, [r4, #24]
   90a72:	428a      	cmp	r2, r1
   90a74:	db08      	blt.n	90a88 <_fputwc_r+0x7c>
   90a76:	5d5b      	ldrb	r3, [r3, r5]
   90a78:	6822      	ldr	r2, [r4, #0]
   90a7a:	7013      	strb	r3, [r2, #0]
   90a7c:	6823      	ldr	r3, [r4, #0]
   90a7e:	7819      	ldrb	r1, [r3, #0]
   90a80:	290a      	cmp	r1, #10
   90a82:	d110      	bne.n	90aa6 <_fputwc_r+0x9a>
   90a84:	4640      	mov	r0, r8
   90a86:	e001      	b.n	90a8c <_fputwc_r+0x80>
   90a88:	5d59      	ldrb	r1, [r3, r5]
   90a8a:	4640      	mov	r0, r8
   90a8c:	4622      	mov	r2, r4
   90a8e:	f001 fdf7 	bl	92680 <__swbuf_r>
   90a92:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   90a96:	4258      	negs	r0, r3
   90a98:	4158      	adcs	r0, r3
   90a9a:	b130      	cbz	r0, 90aaa <_fputwc_r+0x9e>
   90a9c:	e009      	b.n	90ab2 <_fputwc_r+0xa6>
   90a9e:	5d5b      	ldrb	r3, [r3, r5]
   90aa0:	6822      	ldr	r2, [r4, #0]
   90aa2:	7013      	strb	r3, [r2, #0]
   90aa4:	6823      	ldr	r3, [r4, #0]
   90aa6:	3301      	adds	r3, #1
   90aa8:	6023      	str	r3, [r4, #0]
   90aaa:	3501      	adds	r5, #1
   90aac:	e7d8      	b.n	90a60 <_fputwc_r+0x54>
   90aae:	4630      	mov	r0, r6
   90ab0:	e001      	b.n	90ab6 <_fputwc_r+0xaa>
   90ab2:	f04f 30ff 	mov.w	r0, #4294967295
   90ab6:	b002      	add	sp, #8
   90ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00090abc <fputwc>:
   90abc:	4b08      	ldr	r3, [pc, #32]	; (90ae0 <fputwc+0x24>)
   90abe:	b570      	push	{r4, r5, r6, lr}
   90ac0:	681c      	ldr	r4, [r3, #0]
   90ac2:	4606      	mov	r6, r0
   90ac4:	460d      	mov	r5, r1
   90ac6:	b124      	cbz	r4, 90ad2 <fputwc+0x16>
   90ac8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   90aca:	b913      	cbnz	r3, 90ad2 <fputwc+0x16>
   90acc:	4620      	mov	r0, r4
   90ace:	f7ff fed3 	bl	90878 <__sinit>
   90ad2:	4620      	mov	r0, r4
   90ad4:	4631      	mov	r1, r6
   90ad6:	462a      	mov	r2, r5
   90ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   90adc:	f7ff bf96 	b.w	90a0c <_fputwc_r>
   90ae0:	200702c8 	.word	0x200702c8

00090ae4 <_malloc_trim_r>:
   90ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   90ae6:	4d23      	ldr	r5, [pc, #140]	; (90b74 <_malloc_trim_r+0x90>)
   90ae8:	460e      	mov	r6, r1
   90aea:	4604      	mov	r4, r0
   90aec:	f7fc f8ed 	bl	8ccca <__malloc_lock>
   90af0:	68ab      	ldr	r3, [r5, #8]
   90af2:	685f      	ldr	r7, [r3, #4]
   90af4:	f027 0703 	bic.w	r7, r7, #3
   90af8:	1bbe      	subs	r6, r7, r6
   90afa:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
   90afe:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
   90b02:	f026 060f 	bic.w	r6, r6, #15
   90b06:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   90b0a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   90b0e:	da04      	bge.n	90b1a <_malloc_trim_r+0x36>
   90b10:	4620      	mov	r0, r4
   90b12:	f7fc f8db 	bl	8cccc <__malloc_unlock>
   90b16:	2000      	movs	r0, #0
   90b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   90b1a:	4620      	mov	r0, r4
   90b1c:	2100      	movs	r1, #0
   90b1e:	f7fc f8d7 	bl	8ccd0 <_sbrk_r>
   90b22:	68ab      	ldr	r3, [r5, #8]
   90b24:	443b      	add	r3, r7
   90b26:	4298      	cmp	r0, r3
   90b28:	d1f2      	bne.n	90b10 <_malloc_trim_r+0x2c>
   90b2a:	4620      	mov	r0, r4
   90b2c:	4271      	negs	r1, r6
   90b2e:	f7fc f8cf 	bl	8ccd0 <_sbrk_r>
   90b32:	3001      	adds	r0, #1
   90b34:	d110      	bne.n	90b58 <_malloc_trim_r+0x74>
   90b36:	4620      	mov	r0, r4
   90b38:	2100      	movs	r1, #0
   90b3a:	f7fc f8c9 	bl	8ccd0 <_sbrk_r>
   90b3e:	68ab      	ldr	r3, [r5, #8]
   90b40:	1ac2      	subs	r2, r0, r3
   90b42:	2a0f      	cmp	r2, #15
   90b44:	dde4      	ble.n	90b10 <_malloc_trim_r+0x2c>
   90b46:	490c      	ldr	r1, [pc, #48]	; (90b78 <_malloc_trim_r+0x94>)
   90b48:	f042 0201 	orr.w	r2, r2, #1
   90b4c:	6809      	ldr	r1, [r1, #0]
   90b4e:	605a      	str	r2, [r3, #4]
   90b50:	1a40      	subs	r0, r0, r1
   90b52:	490a      	ldr	r1, [pc, #40]	; (90b7c <_malloc_trim_r+0x98>)
   90b54:	6008      	str	r0, [r1, #0]
   90b56:	e7db      	b.n	90b10 <_malloc_trim_r+0x2c>
   90b58:	68ab      	ldr	r3, [r5, #8]
   90b5a:	1bbf      	subs	r7, r7, r6
   90b5c:	f047 0701 	orr.w	r7, r7, #1
   90b60:	605f      	str	r7, [r3, #4]
   90b62:	4b06      	ldr	r3, [pc, #24]	; (90b7c <_malloc_trim_r+0x98>)
   90b64:	4620      	mov	r0, r4
   90b66:	681a      	ldr	r2, [r3, #0]
   90b68:	1b96      	subs	r6, r2, r6
   90b6a:	601e      	str	r6, [r3, #0]
   90b6c:	f7fc f8ae 	bl	8cccc <__malloc_unlock>
   90b70:	2001      	movs	r0, #1
   90b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   90b74:	200706f8 	.word	0x200706f8
   90b78:	20070b00 	.word	0x20070b00
   90b7c:	20075aec 	.word	0x20075aec

00090b80 <_free_r>:
   90b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   90b82:	4606      	mov	r6, r0
   90b84:	460d      	mov	r5, r1
   90b86:	2900      	cmp	r1, #0
   90b88:	f000 80a9 	beq.w	90cde <_free_r+0x15e>
   90b8c:	f7fc f89d 	bl	8ccca <__malloc_lock>
   90b90:	f855 cc04 	ldr.w	ip, [r5, #-4]
   90b94:	4c52      	ldr	r4, [pc, #328]	; (90ce0 <_free_r+0x160>)
   90b96:	f1a5 0308 	sub.w	r3, r5, #8
   90b9a:	f02c 0201 	bic.w	r2, ip, #1
   90b9e:	1898      	adds	r0, r3, r2
   90ba0:	68a1      	ldr	r1, [r4, #8]
   90ba2:	6847      	ldr	r7, [r0, #4]
   90ba4:	4288      	cmp	r0, r1
   90ba6:	f027 0703 	bic.w	r7, r7, #3
   90baa:	f00c 0101 	and.w	r1, ip, #1
   90bae:	d11b      	bne.n	90be8 <_free_r+0x68>
   90bb0:	443a      	add	r2, r7
   90bb2:	b939      	cbnz	r1, 90bc4 <_free_r+0x44>
   90bb4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   90bb8:	1a5b      	subs	r3, r3, r1
   90bba:	6898      	ldr	r0, [r3, #8]
   90bbc:	440a      	add	r2, r1
   90bbe:	68d9      	ldr	r1, [r3, #12]
   90bc0:	60c1      	str	r1, [r0, #12]
   90bc2:	6088      	str	r0, [r1, #8]
   90bc4:	f042 0101 	orr.w	r1, r2, #1
   90bc8:	6059      	str	r1, [r3, #4]
   90bca:	60a3      	str	r3, [r4, #8]
   90bcc:	4b45      	ldr	r3, [pc, #276]	; (90ce4 <_free_r+0x164>)
   90bce:	681b      	ldr	r3, [r3, #0]
   90bd0:	429a      	cmp	r2, r3
   90bd2:	d304      	bcc.n	90bde <_free_r+0x5e>
   90bd4:	4b44      	ldr	r3, [pc, #272]	; (90ce8 <_free_r+0x168>)
   90bd6:	4630      	mov	r0, r6
   90bd8:	6819      	ldr	r1, [r3, #0]
   90bda:	f7ff ff83 	bl	90ae4 <_malloc_trim_r>
   90bde:	4630      	mov	r0, r6
   90be0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   90be4:	f7fc b872 	b.w	8cccc <__malloc_unlock>
   90be8:	6047      	str	r7, [r0, #4]
   90bea:	b979      	cbnz	r1, 90c0c <_free_r+0x8c>
   90bec:	f855 5c08 	ldr.w	r5, [r5, #-8]
   90bf0:	f104 0c08 	add.w	ip, r4, #8
   90bf4:	1b5b      	subs	r3, r3, r5
   90bf6:	442a      	add	r2, r5
   90bf8:	689d      	ldr	r5, [r3, #8]
   90bfa:	4565      	cmp	r5, ip
   90bfc:	d008      	beq.n	90c10 <_free_r+0x90>
   90bfe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   90c02:	f8c5 c00c 	str.w	ip, [r5, #12]
   90c06:	f8cc 5008 	str.w	r5, [ip, #8]
   90c0a:	e002      	b.n	90c12 <_free_r+0x92>
   90c0c:	2100      	movs	r1, #0
   90c0e:	e000      	b.n	90c12 <_free_r+0x92>
   90c10:	2101      	movs	r1, #1
   90c12:	19c5      	adds	r5, r0, r7
   90c14:	686d      	ldr	r5, [r5, #4]
   90c16:	07ed      	lsls	r5, r5, #31
   90c18:	d40e      	bmi.n	90c38 <_free_r+0xb8>
   90c1a:	443a      	add	r2, r7
   90c1c:	6885      	ldr	r5, [r0, #8]
   90c1e:	b941      	cbnz	r1, 90c32 <_free_r+0xb2>
   90c20:	4f32      	ldr	r7, [pc, #200]	; (90cec <_free_r+0x16c>)
   90c22:	42bd      	cmp	r5, r7
   90c24:	d105      	bne.n	90c32 <_free_r+0xb2>
   90c26:	6163      	str	r3, [r4, #20]
   90c28:	6123      	str	r3, [r4, #16]
   90c2a:	2101      	movs	r1, #1
   90c2c:	60dd      	str	r5, [r3, #12]
   90c2e:	609d      	str	r5, [r3, #8]
   90c30:	e002      	b.n	90c38 <_free_r+0xb8>
   90c32:	68c0      	ldr	r0, [r0, #12]
   90c34:	60e8      	str	r0, [r5, #12]
   90c36:	6085      	str	r5, [r0, #8]
   90c38:	f042 0001 	orr.w	r0, r2, #1
   90c3c:	6058      	str	r0, [r3, #4]
   90c3e:	509a      	str	r2, [r3, r2]
   90c40:	2900      	cmp	r1, #0
   90c42:	d1cc      	bne.n	90bde <_free_r+0x5e>
   90c44:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   90c48:	d20e      	bcs.n	90c68 <_free_r+0xe8>
   90c4a:	08d2      	lsrs	r2, r2, #3
   90c4c:	1091      	asrs	r1, r2, #2
   90c4e:	2001      	movs	r0, #1
   90c50:	4088      	lsls	r0, r1
   90c52:	6861      	ldr	r1, [r4, #4]
   90c54:	4301      	orrs	r1, r0
   90c56:	6061      	str	r1, [r4, #4]
   90c58:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
   90c5c:	68a2      	ldr	r2, [r4, #8]
   90c5e:	60dc      	str	r4, [r3, #12]
   90c60:	609a      	str	r2, [r3, #8]
   90c62:	60a3      	str	r3, [r4, #8]
   90c64:	60d3      	str	r3, [r2, #12]
   90c66:	e7ba      	b.n	90bde <_free_r+0x5e>
   90c68:	0a51      	lsrs	r1, r2, #9
   90c6a:	2904      	cmp	r1, #4
   90c6c:	d802      	bhi.n	90c74 <_free_r+0xf4>
   90c6e:	0991      	lsrs	r1, r2, #6
   90c70:	3138      	adds	r1, #56	; 0x38
   90c72:	e015      	b.n	90ca0 <_free_r+0x120>
   90c74:	2914      	cmp	r1, #20
   90c76:	d801      	bhi.n	90c7c <_free_r+0xfc>
   90c78:	315b      	adds	r1, #91	; 0x5b
   90c7a:	e011      	b.n	90ca0 <_free_r+0x120>
   90c7c:	2954      	cmp	r1, #84	; 0x54
   90c7e:	d802      	bhi.n	90c86 <_free_r+0x106>
   90c80:	0b11      	lsrs	r1, r2, #12
   90c82:	316e      	adds	r1, #110	; 0x6e
   90c84:	e00c      	b.n	90ca0 <_free_r+0x120>
   90c86:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   90c8a:	d802      	bhi.n	90c92 <_free_r+0x112>
   90c8c:	0bd1      	lsrs	r1, r2, #15
   90c8e:	3177      	adds	r1, #119	; 0x77
   90c90:	e006      	b.n	90ca0 <_free_r+0x120>
   90c92:	f240 5054 	movw	r0, #1364	; 0x554
   90c96:	4281      	cmp	r1, r0
   90c98:	bf9a      	itte	ls
   90c9a:	0c91      	lsrls	r1, r2, #18
   90c9c:	317c      	addls	r1, #124	; 0x7c
   90c9e:	217e      	movhi	r1, #126	; 0x7e
   90ca0:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   90ca4:	68a5      	ldr	r5, [r4, #8]
   90ca6:	480e      	ldr	r0, [pc, #56]	; (90ce0 <_free_r+0x160>)
   90ca8:	42a5      	cmp	r5, r4
   90caa:	d001      	beq.n	90cb0 <_free_r+0x130>
   90cac:	4629      	mov	r1, r5
   90cae:	e00b      	b.n	90cc8 <_free_r+0x148>
   90cb0:	2201      	movs	r2, #1
   90cb2:	1089      	asrs	r1, r1, #2
   90cb4:	fa02 f101 	lsl.w	r1, r2, r1
   90cb8:	6842      	ldr	r2, [r0, #4]
   90cba:	430a      	orrs	r2, r1
   90cbc:	6042      	str	r2, [r0, #4]
   90cbe:	4629      	mov	r1, r5
   90cc0:	e008      	b.n	90cd4 <_free_r+0x154>
   90cc2:	6889      	ldr	r1, [r1, #8]
   90cc4:	42a1      	cmp	r1, r4
   90cc6:	d004      	beq.n	90cd2 <_free_r+0x152>
   90cc8:	6848      	ldr	r0, [r1, #4]
   90cca:	f020 0003 	bic.w	r0, r0, #3
   90cce:	4282      	cmp	r2, r0
   90cd0:	d3f7      	bcc.n	90cc2 <_free_r+0x142>
   90cd2:	68cd      	ldr	r5, [r1, #12]
   90cd4:	60dd      	str	r5, [r3, #12]
   90cd6:	6099      	str	r1, [r3, #8]
   90cd8:	60ab      	str	r3, [r5, #8]
   90cda:	60cb      	str	r3, [r1, #12]
   90cdc:	e77f      	b.n	90bde <_free_r+0x5e>
   90cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   90ce0:	200706f8 	.word	0x200706f8
   90ce4:	20070b04 	.word	0x20070b04
   90ce8:	20075ae8 	.word	0x20075ae8
   90cec:	20070700 	.word	0x20070700

00090cf0 <__sfvwrite_r>:
   90cf0:	6893      	ldr	r3, [r2, #8]
   90cf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   90cf6:	4680      	mov	r8, r0
   90cf8:	460c      	mov	r4, r1
   90cfa:	4691      	mov	r9, r2
   90cfc:	b90b      	cbnz	r3, 90d02 <__sfvwrite_r+0x12>
   90cfe:	2000      	movs	r0, #0
   90d00:	e13c      	b.n	90f7c <__sfvwrite_r+0x28c>
   90d02:	898b      	ldrh	r3, [r1, #12]
   90d04:	0718      	lsls	r0, r3, #28
   90d06:	d50e      	bpl.n	90d26 <__sfvwrite_r+0x36>
   90d08:	690b      	ldr	r3, [r1, #16]
   90d0a:	b163      	cbz	r3, 90d26 <__sfvwrite_r+0x36>
   90d0c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   90d10:	f8d9 6000 	ldr.w	r6, [r9]
   90d14:	f00a 0c02 	and.w	ip, sl, #2
   90d18:	fa1f f38c 	uxth.w	r3, ip
   90d1c:	b333      	cbz	r3, 90d6c <__sfvwrite_r+0x7c>
   90d1e:	f04f 0a00 	mov.w	sl, #0
   90d22:	4657      	mov	r7, sl
   90d24:	e01b      	b.n	90d5e <__sfvwrite_r+0x6e>
   90d26:	4640      	mov	r0, r8
   90d28:	4621      	mov	r1, r4
   90d2a:	f7fe fddf 	bl	8f8ec <__swsetup_r>
   90d2e:	2800      	cmp	r0, #0
   90d30:	d0ec      	beq.n	90d0c <__sfvwrite_r+0x1c>
   90d32:	e121      	b.n	90f78 <__sfvwrite_r+0x288>
   90d34:	4b93      	ldr	r3, [pc, #588]	; (90f84 <__sfvwrite_r+0x294>)
   90d36:	4640      	mov	r0, r8
   90d38:	429f      	cmp	r7, r3
   90d3a:	bf38      	it	cc
   90d3c:	463b      	movcc	r3, r7
   90d3e:	69e1      	ldr	r1, [r4, #28]
   90d40:	4652      	mov	r2, sl
   90d42:	6a65      	ldr	r5, [r4, #36]	; 0x24
   90d44:	47a8      	blx	r5
   90d46:	2800      	cmp	r0, #0
   90d48:	f340 8112 	ble.w	90f70 <__sfvwrite_r+0x280>
   90d4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   90d50:	4482      	add	sl, r0
   90d52:	1a3f      	subs	r7, r7, r0
   90d54:	1a18      	subs	r0, r3, r0
   90d56:	f8c9 0008 	str.w	r0, [r9, #8]
   90d5a:	2800      	cmp	r0, #0
   90d5c:	d0cf      	beq.n	90cfe <__sfvwrite_r+0xe>
   90d5e:	2f00      	cmp	r7, #0
   90d60:	d1e8      	bne.n	90d34 <__sfvwrite_r+0x44>
   90d62:	f8d6 a000 	ldr.w	sl, [r6]
   90d66:	6877      	ldr	r7, [r6, #4]
   90d68:	3608      	adds	r6, #8
   90d6a:	e7f8      	b.n	90d5e <__sfvwrite_r+0x6e>
   90d6c:	f01a 0a01 	ands.w	sl, sl, #1
   90d70:	d004      	beq.n	90d7c <__sfvwrite_r+0x8c>
   90d72:	469b      	mov	fp, r3
   90d74:	9301      	str	r3, [sp, #4]
   90d76:	461f      	mov	r7, r3
   90d78:	469a      	mov	sl, r3
   90d7a:	e0bf      	b.n	90efc <__sfvwrite_r+0x20c>
   90d7c:	4655      	mov	r5, sl
   90d7e:	b925      	cbnz	r5, 90d8a <__sfvwrite_r+0x9a>
   90d80:	f8d6 a000 	ldr.w	sl, [r6]
   90d84:	6875      	ldr	r5, [r6, #4]
   90d86:	3608      	adds	r6, #8
   90d88:	e7f9      	b.n	90d7e <__sfvwrite_r+0x8e>
   90d8a:	89a2      	ldrh	r2, [r4, #12]
   90d8c:	68a7      	ldr	r7, [r4, #8]
   90d8e:	0591      	lsls	r1, r2, #22
   90d90:	d552      	bpl.n	90e38 <__sfvwrite_r+0x148>
   90d92:	42bd      	cmp	r5, r7
   90d94:	d342      	bcc.n	90e1c <__sfvwrite_r+0x12c>
   90d96:	f412 6f90 	tst.w	r2, #1152	; 0x480
   90d9a:	d03d      	beq.n	90e18 <__sfvwrite_r+0x128>
   90d9c:	6921      	ldr	r1, [r4, #16]
   90d9e:	6823      	ldr	r3, [r4, #0]
   90da0:	2002      	movs	r0, #2
   90da2:	1a5b      	subs	r3, r3, r1
   90da4:	9301      	str	r3, [sp, #4]
   90da6:	6963      	ldr	r3, [r4, #20]
   90da8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   90dac:	fb93 fbf0 	sdiv	fp, r3, r0
   90db0:	9b01      	ldr	r3, [sp, #4]
   90db2:	1c58      	adds	r0, r3, #1
   90db4:	4428      	add	r0, r5
   90db6:	4583      	cmp	fp, r0
   90db8:	bf38      	it	cc
   90dba:	4683      	movcc	fp, r0
   90dbc:	0553      	lsls	r3, r2, #21
   90dbe:	4640      	mov	r0, r8
   90dc0:	d50f      	bpl.n	90de2 <__sfvwrite_r+0xf2>
   90dc2:	4659      	mov	r1, fp
   90dc4:	f7fb fd68 	bl	8c898 <_malloc_r>
   90dc8:	4607      	mov	r7, r0
   90dca:	b1b8      	cbz	r0, 90dfc <__sfvwrite_r+0x10c>
   90dcc:	9a01      	ldr	r2, [sp, #4]
   90dce:	6921      	ldr	r1, [r4, #16]
   90dd0:	f7fb ff6a 	bl	8cca8 <memcpy>
   90dd4:	89a2      	ldrh	r2, [r4, #12]
   90dd6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   90dda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   90dde:	81a2      	strh	r2, [r4, #12]
   90de0:	e010      	b.n	90e04 <__sfvwrite_r+0x114>
   90de2:	465a      	mov	r2, fp
   90de4:	f000 fdc4 	bl	91970 <_realloc_r>
   90de8:	4607      	mov	r7, r0
   90dea:	b958      	cbnz	r0, 90e04 <__sfvwrite_r+0x114>
   90dec:	4640      	mov	r0, r8
   90dee:	6921      	ldr	r1, [r4, #16]
   90df0:	f7ff fec6 	bl	90b80 <_free_r>
   90df4:	89a3      	ldrh	r3, [r4, #12]
   90df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   90dfa:	81a3      	strh	r3, [r4, #12]
   90dfc:	230c      	movs	r3, #12
   90dfe:	f8c8 3000 	str.w	r3, [r8]
   90e02:	e0b5      	b.n	90f70 <__sfvwrite_r+0x280>
   90e04:	9b01      	ldr	r3, [sp, #4]
   90e06:	6127      	str	r7, [r4, #16]
   90e08:	441f      	add	r7, r3
   90e0a:	ebc3 030b 	rsb	r3, r3, fp
   90e0e:	6027      	str	r7, [r4, #0]
   90e10:	f8c4 b014 	str.w	fp, [r4, #20]
   90e14:	462f      	mov	r7, r5
   90e16:	60a3      	str	r3, [r4, #8]
   90e18:	42bd      	cmp	r5, r7
   90e1a:	d200      	bcs.n	90e1e <__sfvwrite_r+0x12e>
   90e1c:	462f      	mov	r7, r5
   90e1e:	463a      	mov	r2, r7
   90e20:	6820      	ldr	r0, [r4, #0]
   90e22:	4651      	mov	r1, sl
   90e24:	f000 f99e 	bl	91164 <memmove>
   90e28:	68a3      	ldr	r3, [r4, #8]
   90e2a:	1bdb      	subs	r3, r3, r7
   90e2c:	60a3      	str	r3, [r4, #8]
   90e2e:	6823      	ldr	r3, [r4, #0]
   90e30:	441f      	add	r7, r3
   90e32:	6027      	str	r7, [r4, #0]
   90e34:	462f      	mov	r7, r5
   90e36:	e02a      	b.n	90e8e <__sfvwrite_r+0x19e>
   90e38:	6820      	ldr	r0, [r4, #0]
   90e3a:	6923      	ldr	r3, [r4, #16]
   90e3c:	4298      	cmp	r0, r3
   90e3e:	d802      	bhi.n	90e46 <__sfvwrite_r+0x156>
   90e40:	6963      	ldr	r3, [r4, #20]
   90e42:	429d      	cmp	r5, r3
   90e44:	d213      	bcs.n	90e6e <__sfvwrite_r+0x17e>
   90e46:	42bd      	cmp	r5, r7
   90e48:	bf38      	it	cc
   90e4a:	462f      	movcc	r7, r5
   90e4c:	463a      	mov	r2, r7
   90e4e:	4651      	mov	r1, sl
   90e50:	f000 f988 	bl	91164 <memmove>
   90e54:	68a3      	ldr	r3, [r4, #8]
   90e56:	6822      	ldr	r2, [r4, #0]
   90e58:	1bdb      	subs	r3, r3, r7
   90e5a:	443a      	add	r2, r7
   90e5c:	60a3      	str	r3, [r4, #8]
   90e5e:	6022      	str	r2, [r4, #0]
   90e60:	b9ab      	cbnz	r3, 90e8e <__sfvwrite_r+0x19e>
   90e62:	4640      	mov	r0, r8
   90e64:	4621      	mov	r1, r4
   90e66:	f7ff fcbe 	bl	907e6 <_fflush_r>
   90e6a:	b180      	cbz	r0, 90e8e <__sfvwrite_r+0x19e>
   90e6c:	e080      	b.n	90f70 <__sfvwrite_r+0x280>
   90e6e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   90e72:	4575      	cmp	r5, lr
   90e74:	bf38      	it	cc
   90e76:	46ae      	movcc	lr, r5
   90e78:	fb9e fef3 	sdiv	lr, lr, r3
   90e7c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   90e7e:	4640      	mov	r0, r8
   90e80:	69e1      	ldr	r1, [r4, #28]
   90e82:	4652      	mov	r2, sl
   90e84:	fb03 f30e 	mul.w	r3, r3, lr
   90e88:	47b8      	blx	r7
   90e8a:	1e07      	subs	r7, r0, #0
   90e8c:	dd70      	ble.n	90f70 <__sfvwrite_r+0x280>
   90e8e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   90e92:	44ba      	add	sl, r7
   90e94:	1bed      	subs	r5, r5, r7
   90e96:	1bdf      	subs	r7, r3, r7
   90e98:	f8c9 7008 	str.w	r7, [r9, #8]
   90e9c:	2f00      	cmp	r7, #0
   90e9e:	f47f af6e 	bne.w	90d7e <__sfvwrite_r+0x8e>
   90ea2:	e72c      	b.n	90cfe <__sfvwrite_r+0xe>
   90ea4:	9d01      	ldr	r5, [sp, #4]
   90ea6:	2d00      	cmp	r5, #0
   90ea8:	d031      	beq.n	90f0e <__sfvwrite_r+0x21e>
   90eaa:	6820      	ldr	r0, [r4, #0]
   90eac:	6922      	ldr	r2, [r4, #16]
   90eae:	45d3      	cmp	fp, sl
   90eb0:	bf34      	ite	cc
   90eb2:	465b      	movcc	r3, fp
   90eb4:	4653      	movcs	r3, sl
   90eb6:	4290      	cmp	r0, r2
   90eb8:	68a5      	ldr	r5, [r4, #8]
   90eba:	f8d4 e014 	ldr.w	lr, [r4, #20]
   90ebe:	d936      	bls.n	90f2e <__sfvwrite_r+0x23e>
   90ec0:	4475      	add	r5, lr
   90ec2:	42ab      	cmp	r3, r5
   90ec4:	dd33      	ble.n	90f2e <__sfvwrite_r+0x23e>
   90ec6:	4639      	mov	r1, r7
   90ec8:	462a      	mov	r2, r5
   90eca:	f000 f94b 	bl	91164 <memmove>
   90ece:	6823      	ldr	r3, [r4, #0]
   90ed0:	4640      	mov	r0, r8
   90ed2:	442b      	add	r3, r5
   90ed4:	6023      	str	r3, [r4, #0]
   90ed6:	4621      	mov	r1, r4
   90ed8:	f7ff fc85 	bl	907e6 <_fflush_r>
   90edc:	2800      	cmp	r0, #0
   90ede:	d147      	bne.n	90f70 <__sfvwrite_r+0x280>
   90ee0:	ebbb 0b05 	subs.w	fp, fp, r5
   90ee4:	d03c      	beq.n	90f60 <__sfvwrite_r+0x270>
   90ee6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   90eea:	442f      	add	r7, r5
   90eec:	ebc5 0a0a 	rsb	sl, r5, sl
   90ef0:	1b5d      	subs	r5, r3, r5
   90ef2:	f8c9 5008 	str.w	r5, [r9, #8]
   90ef6:	2d00      	cmp	r5, #0
   90ef8:	f43f af01 	beq.w	90cfe <__sfvwrite_r+0xe>
   90efc:	f1ba 0f00 	cmp.w	sl, #0
   90f00:	d1d0      	bne.n	90ea4 <__sfvwrite_r+0x1b4>
   90f02:	2500      	movs	r5, #0
   90f04:	e896 0480 	ldmia.w	r6, {r7, sl}
   90f08:	9501      	str	r5, [sp, #4]
   90f0a:	3608      	adds	r6, #8
   90f0c:	e7f6      	b.n	90efc <__sfvwrite_r+0x20c>
   90f0e:	4638      	mov	r0, r7
   90f10:	210a      	movs	r1, #10
   90f12:	4652      	mov	r2, sl
   90f14:	f000 f918 	bl	91148 <memchr>
   90f18:	b120      	cbz	r0, 90f24 <__sfvwrite_r+0x234>
   90f1a:	f100 0c01 	add.w	ip, r0, #1
   90f1e:	ebc7 0b0c 	rsb	fp, r7, ip
   90f22:	e001      	b.n	90f28 <__sfvwrite_r+0x238>
   90f24:	f10a 0b01 	add.w	fp, sl, #1
   90f28:	2501      	movs	r5, #1
   90f2a:	9501      	str	r5, [sp, #4]
   90f2c:	e7bd      	b.n	90eaa <__sfvwrite_r+0x1ba>
   90f2e:	4573      	cmp	r3, lr
   90f30:	db08      	blt.n	90f44 <__sfvwrite_r+0x254>
   90f32:	6a65      	ldr	r5, [r4, #36]	; 0x24
   90f34:	4640      	mov	r0, r8
   90f36:	69e1      	ldr	r1, [r4, #28]
   90f38:	463a      	mov	r2, r7
   90f3a:	4673      	mov	r3, lr
   90f3c:	47a8      	blx	r5
   90f3e:	1e05      	subs	r5, r0, #0
   90f40:	dcce      	bgt.n	90ee0 <__sfvwrite_r+0x1f0>
   90f42:	e015      	b.n	90f70 <__sfvwrite_r+0x280>
   90f44:	461a      	mov	r2, r3
   90f46:	4639      	mov	r1, r7
   90f48:	9300      	str	r3, [sp, #0]
   90f4a:	f000 f90b 	bl	91164 <memmove>
   90f4e:	9b00      	ldr	r3, [sp, #0]
   90f50:	68a2      	ldr	r2, [r4, #8]
   90f52:	461d      	mov	r5, r3
   90f54:	1ad2      	subs	r2, r2, r3
   90f56:	60a2      	str	r2, [r4, #8]
   90f58:	6822      	ldr	r2, [r4, #0]
   90f5a:	441a      	add	r2, r3
   90f5c:	6022      	str	r2, [r4, #0]
   90f5e:	e7bf      	b.n	90ee0 <__sfvwrite_r+0x1f0>
   90f60:	4640      	mov	r0, r8
   90f62:	4621      	mov	r1, r4
   90f64:	f7ff fc3f 	bl	907e6 <_fflush_r>
   90f68:	b910      	cbnz	r0, 90f70 <__sfvwrite_r+0x280>
   90f6a:	f8cd b004 	str.w	fp, [sp, #4]
   90f6e:	e7ba      	b.n	90ee6 <__sfvwrite_r+0x1f6>
   90f70:	89a3      	ldrh	r3, [r4, #12]
   90f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   90f76:	81a3      	strh	r3, [r4, #12]
   90f78:	f04f 30ff 	mov.w	r0, #4294967295
   90f7c:	b003      	add	sp, #12
   90f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   90f82:	bf00      	nop
   90f84:	7ffffc00 	.word	0x7ffffc00

00090f88 <_fwalk>:
   90f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   90f8c:	4688      	mov	r8, r1
   90f8e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   90f92:	2600      	movs	r6, #0
   90f94:	b18c      	cbz	r4, 90fba <_fwalk+0x32>
   90f96:	68a5      	ldr	r5, [r4, #8]
   90f98:	6867      	ldr	r7, [r4, #4]
   90f9a:	3f01      	subs	r7, #1
   90f9c:	d40b      	bmi.n	90fb6 <_fwalk+0x2e>
   90f9e:	89ab      	ldrh	r3, [r5, #12]
   90fa0:	2b01      	cmp	r3, #1
   90fa2:	d906      	bls.n	90fb2 <_fwalk+0x2a>
   90fa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   90fa8:	3301      	adds	r3, #1
   90faa:	d002      	beq.n	90fb2 <_fwalk+0x2a>
   90fac:	4628      	mov	r0, r5
   90fae:	47c0      	blx	r8
   90fb0:	4306      	orrs	r6, r0
   90fb2:	3568      	adds	r5, #104	; 0x68
   90fb4:	e7f1      	b.n	90f9a <_fwalk+0x12>
   90fb6:	6824      	ldr	r4, [r4, #0]
   90fb8:	e7ec      	b.n	90f94 <_fwalk+0xc>
   90fba:	4630      	mov	r0, r6
   90fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00090fc0 <_fwalk_reent>:
   90fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   90fc4:	4680      	mov	r8, r0
   90fc6:	4689      	mov	r9, r1
   90fc8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   90fcc:	2600      	movs	r6, #0
   90fce:	b194      	cbz	r4, 90ff6 <_fwalk_reent+0x36>
   90fd0:	68a5      	ldr	r5, [r4, #8]
   90fd2:	6867      	ldr	r7, [r4, #4]
   90fd4:	3f01      	subs	r7, #1
   90fd6:	d40c      	bmi.n	90ff2 <_fwalk_reent+0x32>
   90fd8:	89ab      	ldrh	r3, [r5, #12]
   90fda:	2b01      	cmp	r3, #1
   90fdc:	d907      	bls.n	90fee <_fwalk_reent+0x2e>
   90fde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   90fe2:	3301      	adds	r3, #1
   90fe4:	d003      	beq.n	90fee <_fwalk_reent+0x2e>
   90fe6:	4640      	mov	r0, r8
   90fe8:	4629      	mov	r1, r5
   90fea:	47c8      	blx	r9
   90fec:	4306      	orrs	r6, r0
   90fee:	3568      	adds	r5, #104	; 0x68
   90ff0:	e7f0      	b.n	90fd4 <_fwalk_reent+0x14>
   90ff2:	6824      	ldr	r4, [r4, #0]
   90ff4:	e7eb      	b.n	90fce <_fwalk_reent+0xe>
   90ff6:	4630      	mov	r0, r6
   90ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00090ffc <_setlocale_r>:
   90ffc:	b510      	push	{r4, lr}
   90ffe:	4614      	mov	r4, r2
   91000:	b90a      	cbnz	r2, 91006 <_setlocale_r+0xa>
   91002:	480b      	ldr	r0, [pc, #44]	; (91030 <_setlocale_r+0x34>)
   91004:	bd10      	pop	{r4, pc}
   91006:	4610      	mov	r0, r2
   91008:	490a      	ldr	r1, [pc, #40]	; (91034 <_setlocale_r+0x38>)
   9100a:	f000 fec2 	bl	91d92 <strcmp>
   9100e:	2800      	cmp	r0, #0
   91010:	d0f7      	beq.n	91002 <_setlocale_r+0x6>
   91012:	4620      	mov	r0, r4
   91014:	4906      	ldr	r1, [pc, #24]	; (91030 <_setlocale_r+0x34>)
   91016:	f000 febc 	bl	91d92 <strcmp>
   9101a:	2800      	cmp	r0, #0
   9101c:	d0f1      	beq.n	91002 <_setlocale_r+0x6>
   9101e:	4620      	mov	r0, r4
   91020:	4905      	ldr	r1, [pc, #20]	; (91038 <_setlocale_r+0x3c>)
   91022:	f000 feb6 	bl	91d92 <strcmp>
   91026:	2800      	cmp	r0, #0
   91028:	4801      	ldr	r0, [pc, #4]	; (91030 <_setlocale_r+0x34>)
   9102a:	bf18      	it	ne
   9102c:	2000      	movne	r0, #0
   9102e:	bd10      	pop	{r4, pc}
   91030:	000b119c 	.word	0x000b119c
   91034:	000b123f 	.word	0x000b123f
   91038:	000b1246 	.word	0x000b1246

0009103c <__locale_charset>:
   9103c:	4800      	ldr	r0, [pc, #0]	; (91040 <__locale_charset+0x4>)
   9103e:	4770      	bx	lr
   91040:	20070b08 	.word	0x20070b08

00091044 <__locale_mb_cur_max>:
   91044:	4b01      	ldr	r3, [pc, #4]	; (9104c <__locale_mb_cur_max+0x8>)
   91046:	6a18      	ldr	r0, [r3, #32]
   91048:	4770      	bx	lr
   9104a:	bf00      	nop
   9104c:	20070b08 	.word	0x20070b08

00091050 <__locale_msgcharset>:
   91050:	4800      	ldr	r0, [pc, #0]	; (91054 <__locale_msgcharset+0x4>)
   91052:	4770      	bx	lr
   91054:	20070b2c 	.word	0x20070b2c

00091058 <__locale_cjk_lang>:
   91058:	2000      	movs	r0, #0
   9105a:	4770      	bx	lr

0009105c <_localeconv_r>:
   9105c:	4800      	ldr	r0, [pc, #0]	; (91060 <_localeconv_r+0x4>)
   9105e:	4770      	bx	lr
   91060:	20070b4c 	.word	0x20070b4c

00091064 <setlocale>:
   91064:	460a      	mov	r2, r1
   91066:	4903      	ldr	r1, [pc, #12]	; (91074 <setlocale+0x10>)
   91068:	4603      	mov	r3, r0
   9106a:	6808      	ldr	r0, [r1, #0]
   9106c:	4619      	mov	r1, r3
   9106e:	f7ff bfc5 	b.w	90ffc <_setlocale_r>
   91072:	bf00      	nop
   91074:	200702c8 	.word	0x200702c8

00091078 <localeconv>:
   91078:	4800      	ldr	r0, [pc, #0]	; (9107c <localeconv+0x4>)
   9107a:	4770      	bx	lr
   9107c:	20070b4c 	.word	0x20070b4c

00091080 <__smakebuf_r>:
   91080:	b5f0      	push	{r4, r5, r6, r7, lr}
   91082:	898b      	ldrh	r3, [r1, #12]
   91084:	b091      	sub	sp, #68	; 0x44
   91086:	079d      	lsls	r5, r3, #30
   91088:	4606      	mov	r6, r0
   9108a:	460c      	mov	r4, r1
   9108c:	d43a      	bmi.n	91104 <__smakebuf_r+0x84>
   9108e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   91092:	2900      	cmp	r1, #0
   91094:	da0b      	bge.n	910ae <__smakebuf_r+0x2e>
   91096:	89a3      	ldrh	r3, [r4, #12]
   91098:	2700      	movs	r7, #0
   9109a:	f013 0f80 	tst.w	r3, #128	; 0x80
   9109e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   910a2:	bf0c      	ite	eq
   910a4:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   910a8:	2540      	movne	r5, #64	; 0x40
   910aa:	81a3      	strh	r3, [r4, #12]
   910ac:	e01f      	b.n	910ee <__smakebuf_r+0x6e>
   910ae:	aa01      	add	r2, sp, #4
   910b0:	f001 fc26 	bl	92900 <_fstat_r>
   910b4:	2800      	cmp	r0, #0
   910b6:	dbee      	blt.n	91096 <__smakebuf_r+0x16>
   910b8:	9b02      	ldr	r3, [sp, #8]
   910ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   910be:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   910c2:	424f      	negs	r7, r1
   910c4:	414f      	adcs	r7, r1
   910c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   910ca:	89a3      	ldrh	r3, [r4, #12]
   910cc:	d10a      	bne.n	910e4 <__smakebuf_r+0x64>
   910ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   910d0:	491b      	ldr	r1, [pc, #108]	; (91140 <__smakebuf_r+0xc0>)
   910d2:	428a      	cmp	r2, r1
   910d4:	d106      	bne.n	910e4 <__smakebuf_r+0x64>
   910d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   910da:	f44f 6580 	mov.w	r5, #1024	; 0x400
   910de:	81a3      	strh	r3, [r4, #12]
   910e0:	64e5      	str	r5, [r4, #76]	; 0x4c
   910e2:	e004      	b.n	910ee <__smakebuf_r+0x6e>
   910e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   910e8:	81a3      	strh	r3, [r4, #12]
   910ea:	f44f 6580 	mov.w	r5, #1024	; 0x400
   910ee:	4630      	mov	r0, r6
   910f0:	4629      	mov	r1, r5
   910f2:	f7fb fbd1 	bl	8c898 <_malloc_r>
   910f6:	b960      	cbnz	r0, 91112 <__smakebuf_r+0x92>
   910f8:	89a3      	ldrh	r3, [r4, #12]
   910fa:	059a      	lsls	r2, r3, #22
   910fc:	d41d      	bmi.n	9113a <__smakebuf_r+0xba>
   910fe:	f043 0302 	orr.w	r3, r3, #2
   91102:	81a3      	strh	r3, [r4, #12]
   91104:	f104 0343 	add.w	r3, r4, #67	; 0x43
   91108:	6023      	str	r3, [r4, #0]
   9110a:	6123      	str	r3, [r4, #16]
   9110c:	2301      	movs	r3, #1
   9110e:	6163      	str	r3, [r4, #20]
   91110:	e013      	b.n	9113a <__smakebuf_r+0xba>
   91112:	4b0c      	ldr	r3, [pc, #48]	; (91144 <__smakebuf_r+0xc4>)
   91114:	63f3      	str	r3, [r6, #60]	; 0x3c
   91116:	89a3      	ldrh	r3, [r4, #12]
   91118:	6020      	str	r0, [r4, #0]
   9111a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   9111e:	81a3      	strh	r3, [r4, #12]
   91120:	6120      	str	r0, [r4, #16]
   91122:	6165      	str	r5, [r4, #20]
   91124:	b14f      	cbz	r7, 9113a <__smakebuf_r+0xba>
   91126:	4630      	mov	r0, r6
   91128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   9112c:	f001 fbfa 	bl	92924 <_isatty_r>
   91130:	b118      	cbz	r0, 9113a <__smakebuf_r+0xba>
   91132:	89a3      	ldrh	r3, [r4, #12]
   91134:	f043 0301 	orr.w	r3, r3, #1
   91138:	81a3      	strh	r3, [r4, #12]
   9113a:	b011      	add	sp, #68	; 0x44
   9113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9113e:	bf00      	nop
   91140:	00091d67 	.word	0x00091d67
   91144:	00090835 	.word	0x00090835

00091148 <memchr>:
   91148:	b510      	push	{r4, lr}
   9114a:	b2c9      	uxtb	r1, r1
   9114c:	4402      	add	r2, r0
   9114e:	4290      	cmp	r0, r2
   91150:	4603      	mov	r3, r0
   91152:	d005      	beq.n	91160 <memchr+0x18>
   91154:	781c      	ldrb	r4, [r3, #0]
   91156:	3001      	adds	r0, #1
   91158:	428c      	cmp	r4, r1
   9115a:	d1f8      	bne.n	9114e <memchr+0x6>
   9115c:	4618      	mov	r0, r3
   9115e:	bd10      	pop	{r4, pc}
   91160:	2000      	movs	r0, #0
   91162:	bd10      	pop	{r4, pc}

00091164 <memmove>:
   91164:	4281      	cmp	r1, r0
   91166:	b570      	push	{r4, r5, r6, lr}
   91168:	d301      	bcc.n	9116e <memmove+0xa>
   9116a:	2300      	movs	r3, #0
   9116c:	e00e      	b.n	9118c <memmove+0x28>
   9116e:	188c      	adds	r4, r1, r2
   91170:	42a0      	cmp	r0, r4
   91172:	d2fa      	bcs.n	9116a <memmove+0x6>
   91174:	1885      	adds	r5, r0, r2
   91176:	4613      	mov	r3, r2
   91178:	f113 33ff 	adds.w	r3, r3, #4294967295
   9117c:	d305      	bcc.n	9118a <memmove+0x26>
   9117e:	4251      	negs	r1, r2
   91180:	1866      	adds	r6, r4, r1
   91182:	5cf6      	ldrb	r6, [r6, r3]
   91184:	4429      	add	r1, r5
   91186:	54ce      	strb	r6, [r1, r3]
   91188:	e7f6      	b.n	91178 <memmove+0x14>
   9118a:	bd70      	pop	{r4, r5, r6, pc}
   9118c:	4293      	cmp	r3, r2
   9118e:	d003      	beq.n	91198 <memmove+0x34>
   91190:	5ccc      	ldrb	r4, [r1, r3]
   91192:	54c4      	strb	r4, [r0, r3]
   91194:	3301      	adds	r3, #1
   91196:	e7f9      	b.n	9118c <memmove+0x28>
   91198:	bd70      	pop	{r4, r5, r6, pc}
	...

0009119c <_Balloc>:
   9119c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   9119e:	b570      	push	{r4, r5, r6, lr}
   911a0:	4605      	mov	r5, r0
   911a2:	460c      	mov	r4, r1
   911a4:	b13b      	cbz	r3, 911b6 <_Balloc+0x1a>
   911a6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   911a8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   911ac:	b160      	cbz	r0, 911c8 <_Balloc+0x2c>
   911ae:	6801      	ldr	r1, [r0, #0]
   911b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   911b4:	e014      	b.n	911e0 <_Balloc+0x44>
   911b6:	2104      	movs	r1, #4
   911b8:	2221      	movs	r2, #33	; 0x21
   911ba:	f001 fb1d 	bl	927f8 <_calloc_r>
   911be:	64e8      	str	r0, [r5, #76]	; 0x4c
   911c0:	2800      	cmp	r0, #0
   911c2:	d1f0      	bne.n	911a6 <_Balloc+0xa>
   911c4:	2000      	movs	r0, #0
   911c6:	bd70      	pop	{r4, r5, r6, pc}
   911c8:	2101      	movs	r1, #1
   911ca:	fa01 f604 	lsl.w	r6, r1, r4
   911ce:	1d72      	adds	r2, r6, #5
   911d0:	4628      	mov	r0, r5
   911d2:	0092      	lsls	r2, r2, #2
   911d4:	f001 fb10 	bl	927f8 <_calloc_r>
   911d8:	2800      	cmp	r0, #0
   911da:	d0f3      	beq.n	911c4 <_Balloc+0x28>
   911dc:	6044      	str	r4, [r0, #4]
   911de:	6086      	str	r6, [r0, #8]
   911e0:	2200      	movs	r2, #0
   911e2:	6102      	str	r2, [r0, #16]
   911e4:	60c2      	str	r2, [r0, #12]
   911e6:	bd70      	pop	{r4, r5, r6, pc}

000911e8 <_Bfree>:
   911e8:	b131      	cbz	r1, 911f8 <_Bfree+0x10>
   911ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   911ec:	684a      	ldr	r2, [r1, #4]
   911ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   911f2:	6008      	str	r0, [r1, #0]
   911f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   911f8:	4770      	bx	lr

000911fa <__multadd>:
   911fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   911fe:	460c      	mov	r4, r1
   91200:	461e      	mov	r6, r3
   91202:	690d      	ldr	r5, [r1, #16]
   91204:	4607      	mov	r7, r0
   91206:	3114      	adds	r1, #20
   91208:	2300      	movs	r3, #0
   9120a:	6808      	ldr	r0, [r1, #0]
   9120c:	3301      	adds	r3, #1
   9120e:	fa1f fc80 	uxth.w	ip, r0
   91212:	0c00      	lsrs	r0, r0, #16
   91214:	fb02 6c0c 	mla	ip, r2, ip, r6
   91218:	4350      	muls	r0, r2
   9121a:	eb00 401c 	add.w	r0, r0, ip, lsr #16
   9121e:	fa1f fc8c 	uxth.w	ip, ip
   91222:	0c06      	lsrs	r6, r0, #16
   91224:	42ab      	cmp	r3, r5
   91226:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
   9122a:	f841 0b04 	str.w	r0, [r1], #4
   9122e:	dbec      	blt.n	9120a <__multadd+0x10>
   91230:	b1d6      	cbz	r6, 91268 <__multadd+0x6e>
   91232:	68a3      	ldr	r3, [r4, #8]
   91234:	429d      	cmp	r5, r3
   91236:	db12      	blt.n	9125e <__multadd+0x64>
   91238:	6861      	ldr	r1, [r4, #4]
   9123a:	4638      	mov	r0, r7
   9123c:	3101      	adds	r1, #1
   9123e:	f7ff ffad 	bl	9119c <_Balloc>
   91242:	6922      	ldr	r2, [r4, #16]
   91244:	f104 010c 	add.w	r1, r4, #12
   91248:	3202      	adds	r2, #2
   9124a:	4680      	mov	r8, r0
   9124c:	0092      	lsls	r2, r2, #2
   9124e:	300c      	adds	r0, #12
   91250:	f7fb fd2a 	bl	8cca8 <memcpy>
   91254:	4621      	mov	r1, r4
   91256:	4638      	mov	r0, r7
   91258:	f7ff ffc6 	bl	911e8 <_Bfree>
   9125c:	4644      	mov	r4, r8
   9125e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   91262:	3501      	adds	r5, #1
   91264:	615e      	str	r6, [r3, #20]
   91266:	6125      	str	r5, [r4, #16]
   91268:	4620      	mov	r0, r4
   9126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0009126e <__s2b>:
   9126e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   91272:	4614      	mov	r4, r2
   91274:	4698      	mov	r8, r3
   91276:	f103 0208 	add.w	r2, r3, #8
   9127a:	2309      	movs	r3, #9
   9127c:	460d      	mov	r5, r1
   9127e:	fb92 f2f3 	sdiv	r2, r2, r3
   91282:	4606      	mov	r6, r0
   91284:	2301      	movs	r3, #1
   91286:	2100      	movs	r1, #0
   91288:	429a      	cmp	r2, r3
   9128a:	dd02      	ble.n	91292 <__s2b+0x24>
   9128c:	005b      	lsls	r3, r3, #1
   9128e:	3101      	adds	r1, #1
   91290:	e7fa      	b.n	91288 <__s2b+0x1a>
   91292:	4630      	mov	r0, r6
   91294:	f7ff ff82 	bl	9119c <_Balloc>
   91298:	9b08      	ldr	r3, [sp, #32]
   9129a:	2c09      	cmp	r4, #9
   9129c:	6143      	str	r3, [r0, #20]
   9129e:	f04f 0301 	mov.w	r3, #1
   912a2:	4601      	mov	r1, r0
   912a4:	6103      	str	r3, [r0, #16]
   912a6:	dd11      	ble.n	912cc <__s2b+0x5e>
   912a8:	f105 0909 	add.w	r9, r5, #9
   912ac:	464f      	mov	r7, r9
   912ae:	4425      	add	r5, r4
   912b0:	f817 3b01 	ldrb.w	r3, [r7], #1
   912b4:	4630      	mov	r0, r6
   912b6:	220a      	movs	r2, #10
   912b8:	3b30      	subs	r3, #48	; 0x30
   912ba:	f7ff ff9e 	bl	911fa <__multadd>
   912be:	42af      	cmp	r7, r5
   912c0:	4601      	mov	r1, r0
   912c2:	d1f5      	bne.n	912b0 <__s2b+0x42>
   912c4:	eb09 0704 	add.w	r7, r9, r4
   912c8:	3f08      	subs	r7, #8
   912ca:	e002      	b.n	912d2 <__s2b+0x64>
   912cc:	f105 070a 	add.w	r7, r5, #10
   912d0:	2409      	movs	r4, #9
   912d2:	4625      	mov	r5, r4
   912d4:	4545      	cmp	r5, r8
   912d6:	da09      	bge.n	912ec <__s2b+0x7e>
   912d8:	1b3b      	subs	r3, r7, r4
   912da:	5d5b      	ldrb	r3, [r3, r5]
   912dc:	4630      	mov	r0, r6
   912de:	220a      	movs	r2, #10
   912e0:	3b30      	subs	r3, #48	; 0x30
   912e2:	f7ff ff8a 	bl	911fa <__multadd>
   912e6:	3501      	adds	r5, #1
   912e8:	4601      	mov	r1, r0
   912ea:	e7f3      	b.n	912d4 <__s2b+0x66>
   912ec:	4608      	mov	r0, r1
   912ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000912f2 <__hi0bits>:
   912f2:	0c03      	lsrs	r3, r0, #16
   912f4:	041b      	lsls	r3, r3, #16
   912f6:	b913      	cbnz	r3, 912fe <__hi0bits+0xc>
   912f8:	0400      	lsls	r0, r0, #16
   912fa:	2310      	movs	r3, #16
   912fc:	e000      	b.n	91300 <__hi0bits+0xe>
   912fe:	2300      	movs	r3, #0
   91300:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   91304:	bf04      	itt	eq
   91306:	0200      	lsleq	r0, r0, #8
   91308:	3308      	addeq	r3, #8
   9130a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   9130e:	bf04      	itt	eq
   91310:	0100      	lsleq	r0, r0, #4
   91312:	3304      	addeq	r3, #4
   91314:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   91318:	bf04      	itt	eq
   9131a:	0080      	lsleq	r0, r0, #2
   9131c:	3302      	addeq	r3, #2
   9131e:	2800      	cmp	r0, #0
   91320:	db03      	blt.n	9132a <__hi0bits+0x38>
   91322:	0042      	lsls	r2, r0, #1
   91324:	d503      	bpl.n	9132e <__hi0bits+0x3c>
   91326:	1c58      	adds	r0, r3, #1
   91328:	4770      	bx	lr
   9132a:	4618      	mov	r0, r3
   9132c:	4770      	bx	lr
   9132e:	2020      	movs	r0, #32
   91330:	4770      	bx	lr

00091332 <__lo0bits>:
   91332:	6803      	ldr	r3, [r0, #0]
   91334:	f013 0207 	ands.w	r2, r3, #7
   91338:	d00b      	beq.n	91352 <__lo0bits+0x20>
   9133a:	07d9      	lsls	r1, r3, #31
   9133c:	d422      	bmi.n	91384 <__lo0bits+0x52>
   9133e:	079a      	lsls	r2, r3, #30
   91340:	d503      	bpl.n	9134a <__lo0bits+0x18>
   91342:	085b      	lsrs	r3, r3, #1
   91344:	6003      	str	r3, [r0, #0]
   91346:	2001      	movs	r0, #1
   91348:	4770      	bx	lr
   9134a:	089b      	lsrs	r3, r3, #2
   9134c:	6003      	str	r3, [r0, #0]
   9134e:	2002      	movs	r0, #2
   91350:	4770      	bx	lr
   91352:	b299      	uxth	r1, r3
   91354:	b909      	cbnz	r1, 9135a <__lo0bits+0x28>
   91356:	0c1b      	lsrs	r3, r3, #16
   91358:	2210      	movs	r2, #16
   9135a:	f013 0fff 	tst.w	r3, #255	; 0xff
   9135e:	bf04      	itt	eq
   91360:	0a1b      	lsreq	r3, r3, #8
   91362:	3208      	addeq	r2, #8
   91364:	0719      	lsls	r1, r3, #28
   91366:	bf04      	itt	eq
   91368:	091b      	lsreq	r3, r3, #4
   9136a:	3204      	addeq	r2, #4
   9136c:	0799      	lsls	r1, r3, #30
   9136e:	bf04      	itt	eq
   91370:	089b      	lsreq	r3, r3, #2
   91372:	3202      	addeq	r2, #2
   91374:	07d9      	lsls	r1, r3, #31
   91376:	d402      	bmi.n	9137e <__lo0bits+0x4c>
   91378:	085b      	lsrs	r3, r3, #1
   9137a:	d005      	beq.n	91388 <__lo0bits+0x56>
   9137c:	3201      	adds	r2, #1
   9137e:	6003      	str	r3, [r0, #0]
   91380:	4610      	mov	r0, r2
   91382:	4770      	bx	lr
   91384:	2000      	movs	r0, #0
   91386:	4770      	bx	lr
   91388:	2020      	movs	r0, #32
   9138a:	4770      	bx	lr

0009138c <__i2b>:
   9138c:	b510      	push	{r4, lr}
   9138e:	460c      	mov	r4, r1
   91390:	2101      	movs	r1, #1
   91392:	f7ff ff03 	bl	9119c <_Balloc>
   91396:	2201      	movs	r2, #1
   91398:	6144      	str	r4, [r0, #20]
   9139a:	6102      	str	r2, [r0, #16]
   9139c:	bd10      	pop	{r4, pc}

0009139e <__multiply>:
   9139e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   913a2:	4616      	mov	r6, r2
   913a4:	6933      	ldr	r3, [r6, #16]
   913a6:	690a      	ldr	r2, [r1, #16]
   913a8:	b085      	sub	sp, #20
   913aa:	429a      	cmp	r2, r3
   913ac:	460d      	mov	r5, r1
   913ae:	da01      	bge.n	913b4 <__multiply+0x16>
   913b0:	4635      	mov	r5, r6
   913b2:	460e      	mov	r6, r1
   913b4:	f8d5 8010 	ldr.w	r8, [r5, #16]
   913b8:	6937      	ldr	r7, [r6, #16]
   913ba:	68ab      	ldr	r3, [r5, #8]
   913bc:	6869      	ldr	r1, [r5, #4]
   913be:	eb08 0407 	add.w	r4, r8, r7
   913c2:	429c      	cmp	r4, r3
   913c4:	bfc8      	it	gt
   913c6:	3101      	addgt	r1, #1
   913c8:	f7ff fee8 	bl	9119c <_Balloc>
   913cc:	f100 0314 	add.w	r3, r0, #20
   913d0:	eb03 0184 	add.w	r1, r3, r4, lsl #2
   913d4:	9101      	str	r1, [sp, #4]
   913d6:	461a      	mov	r2, r3
   913d8:	f8dd a004 	ldr.w	sl, [sp, #4]
   913dc:	4552      	cmp	r2, sl
   913de:	d203      	bcs.n	913e8 <__multiply+0x4a>
   913e0:	2100      	movs	r1, #0
   913e2:	f842 1b04 	str.w	r1, [r2], #4
   913e6:	e7f7      	b.n	913d8 <__multiply+0x3a>
   913e8:	f105 0114 	add.w	r1, r5, #20
   913ec:	f106 0214 	add.w	r2, r6, #20
   913f0:	eb01 0888 	add.w	r8, r1, r8, lsl #2
   913f4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   913f8:	f8cd 8008 	str.w	r8, [sp, #8]
   913fc:	9703      	str	r7, [sp, #12]
   913fe:	9e03      	ldr	r6, [sp, #12]
   91400:	4615      	mov	r5, r2
   91402:	42b2      	cmp	r2, r6
   91404:	d256      	bcs.n	914b4 <__multiply+0x116>
   91406:	f8b5 c000 	ldrh.w	ip, [r5]
   9140a:	3204      	adds	r2, #4
   9140c:	f1bc 0f00 	cmp.w	ip, #0
   91410:	d025      	beq.n	9145e <__multiply+0xc0>
   91412:	460f      	mov	r7, r1
   91414:	461d      	mov	r5, r3
   91416:	2600      	movs	r6, #0
   91418:	f857 9b04 	ldr.w	r9, [r7], #4
   9141c:	f8d5 8000 	ldr.w	r8, [r5]
   91420:	fa1f fb89 	uxth.w	fp, r9
   91424:	fa1f fa88 	uxth.w	sl, r8
   91428:	fb0c aa0b 	mla	sl, ip, fp, sl
   9142c:	ea4f 4919 	mov.w	r9, r9, lsr #16
   91430:	ea4f 4818 	mov.w	r8, r8, lsr #16
   91434:	fb0c 8809 	mla	r8, ip, r9, r8
   91438:	44b2      	add	sl, r6
   9143a:	eb08 481a 	add.w	r8, r8, sl, lsr #16
   9143e:	fa1f fa8a 	uxth.w	sl, sl
   91442:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
   91446:	ea4f 4618 	mov.w	r6, r8, lsr #16
   9144a:	f8dd 8008 	ldr.w	r8, [sp, #8]
   9144e:	46ab      	mov	fp, r5
   91450:	45b8      	cmp	r8, r7
   91452:	f84b ab04 	str.w	sl, [fp], #4
   91456:	d901      	bls.n	9145c <__multiply+0xbe>
   91458:	465d      	mov	r5, fp
   9145a:	e7dd      	b.n	91418 <__multiply+0x7a>
   9145c:	606e      	str	r6, [r5, #4]
   9145e:	f832 8c02 	ldrh.w	r8, [r2, #-2]
   91462:	f1b8 0f00 	cmp.w	r8, #0
   91466:	d023      	beq.n	914b0 <__multiply+0x112>
   91468:	681e      	ldr	r6, [r3, #0]
   9146a:	460f      	mov	r7, r1
   9146c:	461d      	mov	r5, r3
   9146e:	f04f 0900 	mov.w	r9, #0
   91472:	f8b7 a000 	ldrh.w	sl, [r7]
   91476:	f8b5 c002 	ldrh.w	ip, [r5, #2]
   9147a:	b2b6      	uxth	r6, r6
   9147c:	fb08 cc0a 	mla	ip, r8, sl, ip
   91480:	44e1      	add	r9, ip
   91482:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
   91486:	46ac      	mov	ip, r5
   91488:	f84c 6b04 	str.w	r6, [ip], #4
   9148c:	f857 6b04 	ldr.w	r6, [r7], #4
   91490:	f8b5 a004 	ldrh.w	sl, [r5, #4]
   91494:	0c36      	lsrs	r6, r6, #16
   91496:	fb08 a606 	mla	r6, r8, r6, sl
   9149a:	f8dd a008 	ldr.w	sl, [sp, #8]
   9149e:	eb06 4619 	add.w	r6, r6, r9, lsr #16
   914a2:	4557      	cmp	r7, sl
   914a4:	ea4f 4916 	mov.w	r9, r6, lsr #16
   914a8:	d201      	bcs.n	914ae <__multiply+0x110>
   914aa:	4665      	mov	r5, ip
   914ac:	e7e1      	b.n	91472 <__multiply+0xd4>
   914ae:	606e      	str	r6, [r5, #4]
   914b0:	3304      	adds	r3, #4
   914b2:	e7a4      	b.n	913fe <__multiply+0x60>
   914b4:	9b01      	ldr	r3, [sp, #4]
   914b6:	2c00      	cmp	r4, #0
   914b8:	dc03      	bgt.n	914c2 <__multiply+0x124>
   914ba:	6104      	str	r4, [r0, #16]
   914bc:	b005      	add	sp, #20
   914be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   914c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   914c6:	2a00      	cmp	r2, #0
   914c8:	d1f7      	bne.n	914ba <__multiply+0x11c>
   914ca:	3c01      	subs	r4, #1
   914cc:	e7f3      	b.n	914b6 <__multiply+0x118>

000914ce <__pow5mult>:
   914ce:	f012 0303 	ands.w	r3, r2, #3
   914d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   914d6:	4605      	mov	r5, r0
   914d8:	460e      	mov	r6, r1
   914da:	4617      	mov	r7, r2
   914dc:	d007      	beq.n	914ee <__pow5mult+0x20>
   914de:	4a1a      	ldr	r2, [pc, #104]	; (91548 <__pow5mult+0x7a>)
   914e0:	3b01      	subs	r3, #1
   914e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   914e6:	2300      	movs	r3, #0
   914e8:	f7ff fe87 	bl	911fa <__multadd>
   914ec:	4606      	mov	r6, r0
   914ee:	10bf      	asrs	r7, r7, #2
   914f0:	d027      	beq.n	91542 <__pow5mult+0x74>
   914f2:	6cac      	ldr	r4, [r5, #72]	; 0x48
   914f4:	b974      	cbnz	r4, 91514 <__pow5mult+0x46>
   914f6:	4628      	mov	r0, r5
   914f8:	f240 2171 	movw	r1, #625	; 0x271
   914fc:	f7ff ff46 	bl	9138c <__i2b>
   91500:	2300      	movs	r3, #0
   91502:	64a8      	str	r0, [r5, #72]	; 0x48
   91504:	4604      	mov	r4, r0
   91506:	6003      	str	r3, [r0, #0]
   91508:	e004      	b.n	91514 <__pow5mult+0x46>
   9150a:	107f      	asrs	r7, r7, #1
   9150c:	d019      	beq.n	91542 <__pow5mult+0x74>
   9150e:	6820      	ldr	r0, [r4, #0]
   91510:	b170      	cbz	r0, 91530 <__pow5mult+0x62>
   91512:	4604      	mov	r4, r0
   91514:	07fb      	lsls	r3, r7, #31
   91516:	d5f8      	bpl.n	9150a <__pow5mult+0x3c>
   91518:	4631      	mov	r1, r6
   9151a:	4622      	mov	r2, r4
   9151c:	4628      	mov	r0, r5
   9151e:	f7ff ff3e 	bl	9139e <__multiply>
   91522:	4631      	mov	r1, r6
   91524:	4680      	mov	r8, r0
   91526:	4628      	mov	r0, r5
   91528:	f7ff fe5e 	bl	911e8 <_Bfree>
   9152c:	4646      	mov	r6, r8
   9152e:	e7ec      	b.n	9150a <__pow5mult+0x3c>
   91530:	4628      	mov	r0, r5
   91532:	4621      	mov	r1, r4
   91534:	4622      	mov	r2, r4
   91536:	f7ff ff32 	bl	9139e <__multiply>
   9153a:	2300      	movs	r3, #0
   9153c:	6020      	str	r0, [r4, #0]
   9153e:	6003      	str	r3, [r0, #0]
   91540:	e7e7      	b.n	91512 <__pow5mult+0x44>
   91542:	4630      	mov	r0, r6
   91544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   91548:	000b1248 	.word	0x000b1248

0009154c <__lshift>:
   9154c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   91550:	460c      	mov	r4, r1
   91552:	6923      	ldr	r3, [r4, #16]
   91554:	ea4f 1a62 	mov.w	sl, r2, asr #5
   91558:	eb0a 0903 	add.w	r9, sl, r3
   9155c:	6849      	ldr	r1, [r1, #4]
   9155e:	68a3      	ldr	r3, [r4, #8]
   91560:	4680      	mov	r8, r0
   91562:	4615      	mov	r5, r2
   91564:	f109 0701 	add.w	r7, r9, #1
   91568:	429f      	cmp	r7, r3
   9156a:	dd02      	ble.n	91572 <__lshift+0x26>
   9156c:	3101      	adds	r1, #1
   9156e:	005b      	lsls	r3, r3, #1
   91570:	e7fa      	b.n	91568 <__lshift+0x1c>
   91572:	4640      	mov	r0, r8
   91574:	f7ff fe12 	bl	9119c <_Balloc>
   91578:	2300      	movs	r3, #0
   9157a:	4606      	mov	r6, r0
   9157c:	f100 0214 	add.w	r2, r0, #20
   91580:	4553      	cmp	r3, sl
   91582:	da04      	bge.n	9158e <__lshift+0x42>
   91584:	2100      	movs	r1, #0
   91586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   9158a:	3301      	adds	r3, #1
   9158c:	e7f8      	b.n	91580 <__lshift+0x34>
   9158e:	6920      	ldr	r0, [r4, #16]
   91590:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
   91594:	f104 0314 	add.w	r3, r4, #20
   91598:	f015 0c1f 	ands.w	ip, r5, #31
   9159c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   915a0:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
   915a4:	d016      	beq.n	915d4 <__lshift+0x88>
   915a6:	f1cc 0a20 	rsb	sl, ip, #32
   915aa:	2500      	movs	r5, #0
   915ac:	6818      	ldr	r0, [r3, #0]
   915ae:	460a      	mov	r2, r1
   915b0:	fa00 f00c 	lsl.w	r0, r0, ip
   915b4:	4305      	orrs	r5, r0
   915b6:	f842 5b04 	str.w	r5, [r2], #4
   915ba:	f853 5b04 	ldr.w	r5, [r3], #4
   915be:	4573      	cmp	r3, lr
   915c0:	fa25 f50a 	lsr.w	r5, r5, sl
   915c4:	d201      	bcs.n	915ca <__lshift+0x7e>
   915c6:	4611      	mov	r1, r2
   915c8:	e7f0      	b.n	915ac <__lshift+0x60>
   915ca:	604d      	str	r5, [r1, #4]
   915cc:	b145      	cbz	r5, 915e0 <__lshift+0x94>
   915ce:	f109 0702 	add.w	r7, r9, #2
   915d2:	e005      	b.n	915e0 <__lshift+0x94>
   915d4:	f853 2b04 	ldr.w	r2, [r3], #4
   915d8:	4573      	cmp	r3, lr
   915da:	f841 2b04 	str.w	r2, [r1], #4
   915de:	d3f9      	bcc.n	915d4 <__lshift+0x88>
   915e0:	3f01      	subs	r7, #1
   915e2:	4640      	mov	r0, r8
   915e4:	6137      	str	r7, [r6, #16]
   915e6:	4621      	mov	r1, r4
   915e8:	f7ff fdfe 	bl	911e8 <_Bfree>
   915ec:	4630      	mov	r0, r6
   915ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000915f2 <__mcmp>:
   915f2:	6902      	ldr	r2, [r0, #16]
   915f4:	690b      	ldr	r3, [r1, #16]
   915f6:	b510      	push	{r4, lr}
   915f8:	1ad2      	subs	r2, r2, r3
   915fa:	d113      	bne.n	91624 <__mcmp+0x32>
   915fc:	009c      	lsls	r4, r3, #2
   915fe:	3014      	adds	r0, #20
   91600:	f101 0214 	add.w	r2, r1, #20
   91604:	1903      	adds	r3, r0, r4
   91606:	4422      	add	r2, r4
   91608:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   9160c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   91610:	428c      	cmp	r4, r1
   91612:	d003      	beq.n	9161c <__mcmp+0x2a>
   91614:	d208      	bcs.n	91628 <__mcmp+0x36>
   91616:	f04f 30ff 	mov.w	r0, #4294967295
   9161a:	bd10      	pop	{r4, pc}
   9161c:	4298      	cmp	r0, r3
   9161e:	d3f3      	bcc.n	91608 <__mcmp+0x16>
   91620:	2000      	movs	r0, #0
   91622:	bd10      	pop	{r4, pc}
   91624:	4610      	mov	r0, r2
   91626:	bd10      	pop	{r4, pc}
   91628:	2001      	movs	r0, #1
   9162a:	bd10      	pop	{r4, pc}

0009162c <__mdiff>:
   9162c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   91630:	4606      	mov	r6, r0
   91632:	460c      	mov	r4, r1
   91634:	4608      	mov	r0, r1
   91636:	4611      	mov	r1, r2
   91638:	4615      	mov	r5, r2
   9163a:	f7ff ffda 	bl	915f2 <__mcmp>
   9163e:	1e07      	subs	r7, r0, #0
   91640:	d108      	bne.n	91654 <__mdiff+0x28>
   91642:	4630      	mov	r0, r6
   91644:	4639      	mov	r1, r7
   91646:	f7ff fda9 	bl	9119c <_Balloc>
   9164a:	2301      	movs	r3, #1
   9164c:	6103      	str	r3, [r0, #16]
   9164e:	6147      	str	r7, [r0, #20]
   91650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   91654:	db01      	blt.n	9165a <__mdiff+0x2e>
   91656:	2700      	movs	r7, #0
   91658:	e003      	b.n	91662 <__mdiff+0x36>
   9165a:	4623      	mov	r3, r4
   9165c:	2701      	movs	r7, #1
   9165e:	462c      	mov	r4, r5
   91660:	461d      	mov	r5, r3
   91662:	6861      	ldr	r1, [r4, #4]
   91664:	4630      	mov	r0, r6
   91666:	f7ff fd99 	bl	9119c <_Balloc>
   9166a:	6922      	ldr	r2, [r4, #16]
   9166c:	692b      	ldr	r3, [r5, #16]
   9166e:	3414      	adds	r4, #20
   91670:	f105 0614 	add.w	r6, r5, #20
   91674:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
   91678:	60c7      	str	r7, [r0, #12]
   9167a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
   9167e:	f100 0314 	add.w	r3, r0, #20
   91682:	2100      	movs	r1, #0
   91684:	f854 7b04 	ldr.w	r7, [r4], #4
   91688:	f856 9b04 	ldr.w	r9, [r6], #4
   9168c:	fa1f f887 	uxth.w	r8, r7
   91690:	fa1f f589 	uxth.w	r5, r9
   91694:	4441      	add	r1, r8
   91696:	ea4f 4919 	mov.w	r9, r9, lsr #16
   9169a:	ebc5 0801 	rsb	r8, r5, r1
   9169e:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
   916a2:	eb07 4728 	add.w	r7, r7, r8, asr #16
   916a6:	fa1f f888 	uxth.w	r8, r8
   916aa:	1439      	asrs	r1, r7, #16
   916ac:	45b2      	cmp	sl, r6
   916ae:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   916b2:	4625      	mov	r5, r4
   916b4:	f843 7b04 	str.w	r7, [r3], #4
   916b8:	d8e4      	bhi.n	91684 <__mdiff+0x58>
   916ba:	4565      	cmp	r5, ip
   916bc:	d20d      	bcs.n	916da <__mdiff+0xae>
   916be:	f855 4b04 	ldr.w	r4, [r5], #4
   916c2:	b2a6      	uxth	r6, r4
   916c4:	440e      	add	r6, r1
   916c6:	0c24      	lsrs	r4, r4, #16
   916c8:	eb04 4426 	add.w	r4, r4, r6, asr #16
   916cc:	b2b6      	uxth	r6, r6
   916ce:	1421      	asrs	r1, r4, #16
   916d0:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   916d4:	f843 4b04 	str.w	r4, [r3], #4
   916d8:	e7ef      	b.n	916ba <__mdiff+0x8e>
   916da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   916de:	b909      	cbnz	r1, 916e4 <__mdiff+0xb8>
   916e0:	3a01      	subs	r2, #1
   916e2:	e7fa      	b.n	916da <__mdiff+0xae>
   916e4:	6102      	str	r2, [r0, #16]
   916e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000916ea <__ulp>:
   916ea:	4b0f      	ldr	r3, [pc, #60]	; (91728 <__ulp+0x3e>)
   916ec:	400b      	ands	r3, r1
   916ee:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   916f2:	2b00      	cmp	r3, #0
   916f4:	dd01      	ble.n	916fa <__ulp+0x10>
   916f6:	4619      	mov	r1, r3
   916f8:	e009      	b.n	9170e <__ulp+0x24>
   916fa:	425b      	negs	r3, r3
   916fc:	151b      	asrs	r3, r3, #20
   916fe:	2b13      	cmp	r3, #19
   91700:	f04f 0100 	mov.w	r1, #0
   91704:	dc05      	bgt.n	91712 <__ulp+0x28>
   91706:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   9170a:	fa42 f103 	asr.w	r1, r2, r3
   9170e:	2000      	movs	r0, #0
   91710:	4770      	bx	lr
   91712:	2b32      	cmp	r3, #50	; 0x32
   91714:	f04f 0201 	mov.w	r2, #1
   91718:	bfda      	itte	le
   9171a:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
   9171e:	fa02 f303 	lslle.w	r3, r2, r3
   91722:	4613      	movgt	r3, r2
   91724:	4618      	mov	r0, r3
   91726:	4770      	bx	lr
   91728:	7ff00000 	.word	0x7ff00000

0009172c <__b2d>:
   9172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   91730:	6906      	ldr	r6, [r0, #16]
   91732:	f100 0714 	add.w	r7, r0, #20
   91736:	eb07 0686 	add.w	r6, r7, r6, lsl #2
   9173a:	f856 4c04 	ldr.w	r4, [r6, #-4]
   9173e:	4688      	mov	r8, r1
   91740:	4620      	mov	r0, r4
   91742:	f7ff fdd6 	bl	912f2 <__hi0bits>
   91746:	f1c0 0320 	rsb	r3, r0, #32
   9174a:	280a      	cmp	r0, #10
   9174c:	f1a6 0504 	sub.w	r5, r6, #4
   91750:	f8c8 3000 	str.w	r3, [r8]
   91754:	dc14      	bgt.n	91780 <__b2d+0x54>
   91756:	42bd      	cmp	r5, r7
   91758:	f1c0 010b 	rsb	r1, r0, #11
   9175c:	bf88      	it	hi
   9175e:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
   91762:	fa24 fc01 	lsr.w	ip, r4, r1
   91766:	bf98      	it	ls
   91768:	2500      	movls	r5, #0
   9176a:	3015      	adds	r0, #21
   9176c:	fa25 f101 	lsr.w	r1, r5, r1
   91770:	4084      	lsls	r4, r0
   91772:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
   91776:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   9177a:	ea41 0204 	orr.w	r2, r1, r4
   9177e:	e024      	b.n	917ca <__b2d+0x9e>
   91780:	42bd      	cmp	r5, r7
   91782:	bf86      	itte	hi
   91784:	f1a6 0508 	subhi.w	r5, r6, #8
   91788:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
   9178c:	2100      	movls	r1, #0
   9178e:	f1b0 060b 	subs.w	r6, r0, #11
   91792:	d015      	beq.n	917c0 <__b2d+0x94>
   91794:	40b4      	lsls	r4, r6
   91796:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
   9179a:	fa21 fc00 	lsr.w	ip, r1, r0
   9179e:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   917a2:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   917a6:	42bd      	cmp	r5, r7
   917a8:	ea44 030c 	orr.w	r3, r4, ip
   917ac:	bf8c      	ite	hi
   917ae:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   917b2:	2400      	movls	r4, #0
   917b4:	fa24 f000 	lsr.w	r0, r4, r0
   917b8:	40b1      	lsls	r1, r6
   917ba:	ea40 0201 	orr.w	r2, r0, r1
   917be:	e004      	b.n	917ca <__b2d+0x9e>
   917c0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   917c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   917c8:	460a      	mov	r2, r1
   917ca:	4610      	mov	r0, r2
   917cc:	4619      	mov	r1, r3
   917ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000917d2 <__d2b>:
   917d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   917d6:	2101      	movs	r1, #1
   917d8:	461d      	mov	r5, r3
   917da:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   917de:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   917e2:	4614      	mov	r4, r2
   917e4:	f7ff fcda 	bl	9119c <_Balloc>
   917e8:	f3c5 570a 	ubfx	r7, r5, #20, #11
   917ec:	4606      	mov	r6, r0
   917ee:	f3c5 0313 	ubfx	r3, r5, #0, #20
   917f2:	b10f      	cbz	r7, 917f8 <__d2b+0x26>
   917f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   917f8:	9301      	str	r3, [sp, #4]
   917fa:	b1d4      	cbz	r4, 91832 <__d2b+0x60>
   917fc:	a802      	add	r0, sp, #8
   917fe:	f840 4d08 	str.w	r4, [r0, #-8]!
   91802:	4668      	mov	r0, sp
   91804:	f7ff fd95 	bl	91332 <__lo0bits>
   91808:	9b00      	ldr	r3, [sp, #0]
   9180a:	b148      	cbz	r0, 91820 <__d2b+0x4e>
   9180c:	9a01      	ldr	r2, [sp, #4]
   9180e:	f1c0 0120 	rsb	r1, r0, #32
   91812:	fa02 f101 	lsl.w	r1, r2, r1
   91816:	40c2      	lsrs	r2, r0
   91818:	430b      	orrs	r3, r1
   9181a:	6173      	str	r3, [r6, #20]
   9181c:	9201      	str	r2, [sp, #4]
   9181e:	e000      	b.n	91822 <__d2b+0x50>
   91820:	6173      	str	r3, [r6, #20]
   91822:	9b01      	ldr	r3, [sp, #4]
   91824:	2b00      	cmp	r3, #0
   91826:	bf0c      	ite	eq
   91828:	2401      	moveq	r4, #1
   9182a:	2402      	movne	r4, #2
   9182c:	61b3      	str	r3, [r6, #24]
   9182e:	6134      	str	r4, [r6, #16]
   91830:	e007      	b.n	91842 <__d2b+0x70>
   91832:	a801      	add	r0, sp, #4
   91834:	f7ff fd7d 	bl	91332 <__lo0bits>
   91838:	9b01      	ldr	r3, [sp, #4]
   9183a:	2401      	movs	r4, #1
   9183c:	6173      	str	r3, [r6, #20]
   9183e:	6134      	str	r4, [r6, #16]
   91840:	3020      	adds	r0, #32
   91842:	b13f      	cbz	r7, 91854 <__d2b+0x82>
   91844:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   91848:	4407      	add	r7, r0
   9184a:	f8c9 7000 	str.w	r7, [r9]
   9184e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   91852:	e00a      	b.n	9186a <__d2b+0x98>
   91854:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   91858:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   9185c:	f8c9 0000 	str.w	r0, [r9]
   91860:	6918      	ldr	r0, [r3, #16]
   91862:	f7ff fd46 	bl	912f2 <__hi0bits>
   91866:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   9186a:	f8c8 0000 	str.w	r0, [r8]
   9186e:	4630      	mov	r0, r6
   91870:	b003      	add	sp, #12
   91872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00091876 <__ratio>:
   91876:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   9187a:	460e      	mov	r6, r1
   9187c:	4669      	mov	r1, sp
   9187e:	4680      	mov	r8, r0
   91880:	f7ff ff54 	bl	9172c <__b2d>
   91884:	460d      	mov	r5, r1
   91886:	4604      	mov	r4, r0
   91888:	a901      	add	r1, sp, #4
   9188a:	4630      	mov	r0, r6
   9188c:	f7ff ff4e 	bl	9172c <__b2d>
   91890:	9f00      	ldr	r7, [sp, #0]
   91892:	460b      	mov	r3, r1
   91894:	9901      	ldr	r1, [sp, #4]
   91896:	4602      	mov	r2, r0
   91898:	1a7f      	subs	r7, r7, r1
   9189a:	f8d8 0010 	ldr.w	r0, [r8, #16]
   9189e:	6931      	ldr	r1, [r6, #16]
   918a0:	1a41      	subs	r1, r0, r1
   918a2:	eb07 1141 	add.w	r1, r7, r1, lsl #5
   918a6:	2900      	cmp	r1, #0
   918a8:	bfcc      	ite	gt
   918aa:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
   918ae:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
   918b2:	4620      	mov	r0, r4
   918b4:	4629      	mov	r1, r5
   918b6:	f001 fb4b 	bl	92f50 <__aeabi_ddiv>
   918ba:	b002      	add	sp, #8
   918bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000918c0 <_mprec_log10>:
   918c0:	2817      	cmp	r0, #23
   918c2:	b510      	push	{r4, lr}
   918c4:	4604      	mov	r4, r0
   918c6:	dc05      	bgt.n	918d4 <_mprec_log10+0x14>
   918c8:	4b07      	ldr	r3, [pc, #28]	; (918e8 <_mprec_log10+0x28>)
   918ca:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   918ce:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   918d2:	bd10      	pop	{r4, pc}
   918d4:	4905      	ldr	r1, [pc, #20]	; (918ec <_mprec_log10+0x2c>)
   918d6:	2000      	movs	r0, #0
   918d8:	2200      	movs	r2, #0
   918da:	4b05      	ldr	r3, [pc, #20]	; (918f0 <_mprec_log10+0x30>)
   918dc:	f001 fa0e 	bl	92cfc <__aeabi_dmul>
   918e0:	3c01      	subs	r4, #1
   918e2:	d1f9      	bne.n	918d8 <_mprec_log10+0x18>
   918e4:	bd10      	pop	{r4, pc}
   918e6:	bf00      	nop
   918e8:	000b1248 	.word	0x000b1248
   918ec:	3ff00000 	.word	0x3ff00000
   918f0:	40240000 	.word	0x40240000

000918f4 <__copybits>:
   918f4:	b510      	push	{r4, lr}
   918f6:	3901      	subs	r1, #1
   918f8:	f102 0314 	add.w	r3, r2, #20
   918fc:	1149      	asrs	r1, r1, #5
   918fe:	6912      	ldr	r2, [r2, #16]
   91900:	3101      	adds	r1, #1
   91902:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   91906:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   9190a:	4293      	cmp	r3, r2
   9190c:	d204      	bcs.n	91918 <__copybits+0x24>
   9190e:	f853 4b04 	ldr.w	r4, [r3], #4
   91912:	f840 4b04 	str.w	r4, [r0], #4
   91916:	e7f8      	b.n	9190a <__copybits+0x16>
   91918:	4288      	cmp	r0, r1
   9191a:	d203      	bcs.n	91924 <__copybits+0x30>
   9191c:	2300      	movs	r3, #0
   9191e:	f840 3b04 	str.w	r3, [r0], #4
   91922:	e7f9      	b.n	91918 <__copybits+0x24>
   91924:	bd10      	pop	{r4, pc}

00091926 <__any_on>:
   91926:	f100 0214 	add.w	r2, r0, #20
   9192a:	6900      	ldr	r0, [r0, #16]
   9192c:	114b      	asrs	r3, r1, #5
   9192e:	4283      	cmp	r3, r0
   91930:	b510      	push	{r4, lr}
   91932:	dc0c      	bgt.n	9194e <__any_on+0x28>
   91934:	da0c      	bge.n	91950 <__any_on+0x2a>
   91936:	f011 011f 	ands.w	r1, r1, #31
   9193a:	d009      	beq.n	91950 <__any_on+0x2a>
   9193c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   91940:	fa20 f401 	lsr.w	r4, r0, r1
   91944:	fa04 f101 	lsl.w	r1, r4, r1
   91948:	4281      	cmp	r1, r0
   9194a:	d10e      	bne.n	9196a <__any_on+0x44>
   9194c:	e000      	b.n	91950 <__any_on+0x2a>
   9194e:	4603      	mov	r3, r0
   91950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   91954:	4293      	cmp	r3, r2
   91956:	4619      	mov	r1, r3
   91958:	d905      	bls.n	91966 <__any_on+0x40>
   9195a:	f851 1c04 	ldr.w	r1, [r1, #-4]
   9195e:	3b04      	subs	r3, #4
   91960:	2900      	cmp	r1, #0
   91962:	d0f7      	beq.n	91954 <__any_on+0x2e>
   91964:	e001      	b.n	9196a <__any_on+0x44>
   91966:	2000      	movs	r0, #0
   91968:	bd10      	pop	{r4, pc}
   9196a:	2001      	movs	r0, #1
   9196c:	bd10      	pop	{r4, pc}
   9196e:	bf00      	nop

00091970 <_realloc_r>:
   91970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   91974:	4681      	mov	r9, r0
   91976:	460c      	mov	r4, r1
   91978:	b929      	cbnz	r1, 91986 <_realloc_r+0x16>
   9197a:	4611      	mov	r1, r2
   9197c:	b003      	add	sp, #12
   9197e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   91982:	f7fa bf89 	b.w	8c898 <_malloc_r>
   91986:	9201      	str	r2, [sp, #4]
   91988:	f7fb f99f 	bl	8ccca <__malloc_lock>
   9198c:	9a01      	ldr	r2, [sp, #4]
   9198e:	f854 5c04 	ldr.w	r5, [r4, #-4]
   91992:	f102 070b 	add.w	r7, r2, #11
   91996:	2f16      	cmp	r7, #22
   91998:	f1a4 0808 	sub.w	r8, r4, #8
   9199c:	f025 0603 	bic.w	r6, r5, #3
   919a0:	d903      	bls.n	919aa <_realloc_r+0x3a>
   919a2:	f037 0707 	bics.w	r7, r7, #7
   919a6:	d501      	bpl.n	919ac <_realloc_r+0x3c>
   919a8:	e002      	b.n	919b0 <_realloc_r+0x40>
   919aa:	2710      	movs	r7, #16
   919ac:	4297      	cmp	r7, r2
   919ae:	d204      	bcs.n	919ba <_realloc_r+0x4a>
   919b0:	230c      	movs	r3, #12
   919b2:	f8c9 3000 	str.w	r3, [r9]
   919b6:	2000      	movs	r0, #0
   919b8:	e180      	b.n	91cbc <_realloc_r+0x34c>
   919ba:	42be      	cmp	r6, r7
   919bc:	f280 8156 	bge.w	91c6c <_realloc_r+0x2fc>
   919c0:	49a3      	ldr	r1, [pc, #652]	; (91c50 <_realloc_r+0x2e0>)
   919c2:	eb08 0306 	add.w	r3, r8, r6
   919c6:	f8d1 e008 	ldr.w	lr, [r1, #8]
   919ca:	468b      	mov	fp, r1
   919cc:	4573      	cmp	r3, lr
   919ce:	6858      	ldr	r0, [r3, #4]
   919d0:	d005      	beq.n	919de <_realloc_r+0x6e>
   919d2:	f020 0101 	bic.w	r1, r0, #1
   919d6:	4419      	add	r1, r3
   919d8:	6849      	ldr	r1, [r1, #4]
   919da:	07c9      	lsls	r1, r1, #31
   919dc:	d425      	bmi.n	91a2a <_realloc_r+0xba>
   919de:	f020 0003 	bic.w	r0, r0, #3
   919e2:	4573      	cmp	r3, lr
   919e4:	eb00 0106 	add.w	r1, r0, r6
   919e8:	d117      	bne.n	91a1a <_realloc_r+0xaa>
   919ea:	f107 0c10 	add.w	ip, r7, #16
   919ee:	4561      	cmp	r1, ip
   919f0:	db1d      	blt.n	91a2e <_realloc_r+0xbe>
   919f2:	1bc9      	subs	r1, r1, r7
   919f4:	eb08 0507 	add.w	r5, r8, r7
   919f8:	f041 0101 	orr.w	r1, r1, #1
   919fc:	f8cb 5008 	str.w	r5, [fp, #8]
   91a00:	6069      	str	r1, [r5, #4]
   91a02:	f854 3c04 	ldr.w	r3, [r4, #-4]
   91a06:	4648      	mov	r0, r9
   91a08:	f003 0301 	and.w	r3, r3, #1
   91a0c:	431f      	orrs	r7, r3
   91a0e:	f844 7c04 	str.w	r7, [r4, #-4]
   91a12:	f7fb f95b 	bl	8cccc <__malloc_unlock>
   91a16:	4620      	mov	r0, r4
   91a18:	e150      	b.n	91cbc <_realloc_r+0x34c>
   91a1a:	42b9      	cmp	r1, r7
   91a1c:	db07      	blt.n	91a2e <_realloc_r+0xbe>
   91a1e:	68da      	ldr	r2, [r3, #12]
   91a20:	689b      	ldr	r3, [r3, #8]
   91a22:	460e      	mov	r6, r1
   91a24:	60da      	str	r2, [r3, #12]
   91a26:	6093      	str	r3, [r2, #8]
   91a28:	e120      	b.n	91c6c <_realloc_r+0x2fc>
   91a2a:	2000      	movs	r0, #0
   91a2c:	4603      	mov	r3, r0
   91a2e:	07e9      	lsls	r1, r5, #31
   91a30:	f100 80cb 	bmi.w	91bca <_realloc_r+0x25a>
   91a34:	f854 5c08 	ldr.w	r5, [r4, #-8]
   91a38:	ebc5 0508 	rsb	r5, r5, r8
   91a3c:	6869      	ldr	r1, [r5, #4]
   91a3e:	f021 0103 	bic.w	r1, r1, #3
   91a42:	eb01 0a06 	add.w	sl, r1, r6
   91a46:	2b00      	cmp	r3, #0
   91a48:	f000 808a 	beq.w	91b60 <_realloc_r+0x1f0>
   91a4c:	4573      	cmp	r3, lr
   91a4e:	d14d      	bne.n	91aec <_realloc_r+0x17c>
   91a50:	eb0a 0300 	add.w	r3, sl, r0
   91a54:	f107 0110 	add.w	r1, r7, #16
   91a58:	428b      	cmp	r3, r1
   91a5a:	f2c0 8081 	blt.w	91b60 <_realloc_r+0x1f0>
   91a5e:	46a8      	mov	r8, r5
   91a60:	68ea      	ldr	r2, [r5, #12]
   91a62:	f858 1f08 	ldr.w	r1, [r8, #8]!
   91a66:	60ca      	str	r2, [r1, #12]
   91a68:	6091      	str	r1, [r2, #8]
   91a6a:	1f32      	subs	r2, r6, #4
   91a6c:	2a24      	cmp	r2, #36	; 0x24
   91a6e:	d826      	bhi.n	91abe <_realloc_r+0x14e>
   91a70:	2a13      	cmp	r2, #19
   91a72:	d91c      	bls.n	91aae <_realloc_r+0x13e>
   91a74:	6821      	ldr	r1, [r4, #0]
   91a76:	2a1b      	cmp	r2, #27
   91a78:	60a9      	str	r1, [r5, #8]
   91a7a:	6861      	ldr	r1, [r4, #4]
   91a7c:	60e9      	str	r1, [r5, #12]
   91a7e:	d803      	bhi.n	91a88 <_realloc_r+0x118>
   91a80:	f105 0210 	add.w	r2, r5, #16
   91a84:	3408      	adds	r4, #8
   91a86:	e013      	b.n	91ab0 <_realloc_r+0x140>
   91a88:	68a1      	ldr	r1, [r4, #8]
   91a8a:	2a24      	cmp	r2, #36	; 0x24
   91a8c:	6129      	str	r1, [r5, #16]
   91a8e:	68e1      	ldr	r1, [r4, #12]
   91a90:	6169      	str	r1, [r5, #20]
   91a92:	d003      	beq.n	91a9c <_realloc_r+0x12c>
   91a94:	f105 0218 	add.w	r2, r5, #24
   91a98:	3410      	adds	r4, #16
   91a9a:	e009      	b.n	91ab0 <_realloc_r+0x140>
   91a9c:	6922      	ldr	r2, [r4, #16]
   91a9e:	3418      	adds	r4, #24
   91aa0:	61aa      	str	r2, [r5, #24]
   91aa2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   91aa6:	f105 0220 	add.w	r2, r5, #32
   91aaa:	61e9      	str	r1, [r5, #28]
   91aac:	e000      	b.n	91ab0 <_realloc_r+0x140>
   91aae:	4642      	mov	r2, r8
   91ab0:	6821      	ldr	r1, [r4, #0]
   91ab2:	6011      	str	r1, [r2, #0]
   91ab4:	6861      	ldr	r1, [r4, #4]
   91ab6:	6051      	str	r1, [r2, #4]
   91ab8:	68a1      	ldr	r1, [r4, #8]
   91aba:	6091      	str	r1, [r2, #8]
   91abc:	e005      	b.n	91aca <_realloc_r+0x15a>
   91abe:	4640      	mov	r0, r8
   91ac0:	4621      	mov	r1, r4
   91ac2:	9301      	str	r3, [sp, #4]
   91ac4:	f7ff fb4e 	bl	91164 <memmove>
   91ac8:	9b01      	ldr	r3, [sp, #4]
   91aca:	1bdb      	subs	r3, r3, r7
   91acc:	19ea      	adds	r2, r5, r7
   91ace:	f043 0301 	orr.w	r3, r3, #1
   91ad2:	f8cb 2008 	str.w	r2, [fp, #8]
   91ad6:	6053      	str	r3, [r2, #4]
   91ad8:	686b      	ldr	r3, [r5, #4]
   91ada:	4648      	mov	r0, r9
   91adc:	f003 0301 	and.w	r3, r3, #1
   91ae0:	431f      	orrs	r7, r3
   91ae2:	606f      	str	r7, [r5, #4]
   91ae4:	f7fb f8f2 	bl	8cccc <__malloc_unlock>
   91ae8:	4640      	mov	r0, r8
   91aea:	e0e7      	b.n	91cbc <_realloc_r+0x34c>
   91aec:	eb0a 0b00 	add.w	fp, sl, r0
   91af0:	45bb      	cmp	fp, r7
   91af2:	db35      	blt.n	91b60 <_realloc_r+0x1f0>
   91af4:	68da      	ldr	r2, [r3, #12]
   91af6:	689b      	ldr	r3, [r3, #8]
   91af8:	4628      	mov	r0, r5
   91afa:	60da      	str	r2, [r3, #12]
   91afc:	6093      	str	r3, [r2, #8]
   91afe:	f850 2f08 	ldr.w	r2, [r0, #8]!
   91b02:	68eb      	ldr	r3, [r5, #12]
   91b04:	60d3      	str	r3, [r2, #12]
   91b06:	609a      	str	r2, [r3, #8]
   91b08:	1f32      	subs	r2, r6, #4
   91b0a:	2a24      	cmp	r2, #36	; 0x24
   91b0c:	d823      	bhi.n	91b56 <_realloc_r+0x1e6>
   91b0e:	2a13      	cmp	r2, #19
   91b10:	d91a      	bls.n	91b48 <_realloc_r+0x1d8>
   91b12:	6823      	ldr	r3, [r4, #0]
   91b14:	2a1b      	cmp	r2, #27
   91b16:	60ab      	str	r3, [r5, #8]
   91b18:	6863      	ldr	r3, [r4, #4]
   91b1a:	60eb      	str	r3, [r5, #12]
   91b1c:	d803      	bhi.n	91b26 <_realloc_r+0x1b6>
   91b1e:	f105 0010 	add.w	r0, r5, #16
   91b22:	3408      	adds	r4, #8
   91b24:	e010      	b.n	91b48 <_realloc_r+0x1d8>
   91b26:	68a3      	ldr	r3, [r4, #8]
   91b28:	2a24      	cmp	r2, #36	; 0x24
   91b2a:	612b      	str	r3, [r5, #16]
   91b2c:	68e3      	ldr	r3, [r4, #12]
   91b2e:	616b      	str	r3, [r5, #20]
   91b30:	d003      	beq.n	91b3a <_realloc_r+0x1ca>
   91b32:	f105 0018 	add.w	r0, r5, #24
   91b36:	3410      	adds	r4, #16
   91b38:	e006      	b.n	91b48 <_realloc_r+0x1d8>
   91b3a:	6923      	ldr	r3, [r4, #16]
   91b3c:	f105 0020 	add.w	r0, r5, #32
   91b40:	61ab      	str	r3, [r5, #24]
   91b42:	6963      	ldr	r3, [r4, #20]
   91b44:	3418      	adds	r4, #24
   91b46:	61eb      	str	r3, [r5, #28]
   91b48:	6823      	ldr	r3, [r4, #0]
   91b4a:	6003      	str	r3, [r0, #0]
   91b4c:	6863      	ldr	r3, [r4, #4]
   91b4e:	6043      	str	r3, [r0, #4]
   91b50:	68a3      	ldr	r3, [r4, #8]
   91b52:	6083      	str	r3, [r0, #8]
   91b54:	e002      	b.n	91b5c <_realloc_r+0x1ec>
   91b56:	4621      	mov	r1, r4
   91b58:	f7ff fb04 	bl	91164 <memmove>
   91b5c:	465e      	mov	r6, fp
   91b5e:	e02e      	b.n	91bbe <_realloc_r+0x24e>
   91b60:	45ba      	cmp	sl, r7
   91b62:	db32      	blt.n	91bca <_realloc_r+0x25a>
   91b64:	4628      	mov	r0, r5
   91b66:	f850 2f08 	ldr.w	r2, [r0, #8]!
   91b6a:	68eb      	ldr	r3, [r5, #12]
   91b6c:	60d3      	str	r3, [r2, #12]
   91b6e:	609a      	str	r2, [r3, #8]
   91b70:	1f32      	subs	r2, r6, #4
   91b72:	2a24      	cmp	r2, #36	; 0x24
   91b74:	d825      	bhi.n	91bc2 <_realloc_r+0x252>
   91b76:	2a13      	cmp	r2, #19
   91b78:	d91a      	bls.n	91bb0 <_realloc_r+0x240>
   91b7a:	6823      	ldr	r3, [r4, #0]
   91b7c:	2a1b      	cmp	r2, #27
   91b7e:	60ab      	str	r3, [r5, #8]
   91b80:	6863      	ldr	r3, [r4, #4]
   91b82:	60eb      	str	r3, [r5, #12]
   91b84:	d803      	bhi.n	91b8e <_realloc_r+0x21e>
   91b86:	f105 0010 	add.w	r0, r5, #16
   91b8a:	3408      	adds	r4, #8
   91b8c:	e010      	b.n	91bb0 <_realloc_r+0x240>
   91b8e:	68a3      	ldr	r3, [r4, #8]
   91b90:	2a24      	cmp	r2, #36	; 0x24
   91b92:	612b      	str	r3, [r5, #16]
   91b94:	68e3      	ldr	r3, [r4, #12]
   91b96:	616b      	str	r3, [r5, #20]
   91b98:	d003      	beq.n	91ba2 <_realloc_r+0x232>
   91b9a:	f105 0018 	add.w	r0, r5, #24
   91b9e:	3410      	adds	r4, #16
   91ba0:	e006      	b.n	91bb0 <_realloc_r+0x240>
   91ba2:	6923      	ldr	r3, [r4, #16]
   91ba4:	f105 0020 	add.w	r0, r5, #32
   91ba8:	61ab      	str	r3, [r5, #24]
   91baa:	6963      	ldr	r3, [r4, #20]
   91bac:	3418      	adds	r4, #24
   91bae:	61eb      	str	r3, [r5, #28]
   91bb0:	6823      	ldr	r3, [r4, #0]
   91bb2:	6003      	str	r3, [r0, #0]
   91bb4:	6863      	ldr	r3, [r4, #4]
   91bb6:	6043      	str	r3, [r0, #4]
   91bb8:	68a3      	ldr	r3, [r4, #8]
   91bba:	6083      	str	r3, [r0, #8]
   91bbc:	4656      	mov	r6, sl
   91bbe:	46a8      	mov	r8, r5
   91bc0:	e054      	b.n	91c6c <_realloc_r+0x2fc>
   91bc2:	4621      	mov	r1, r4
   91bc4:	f7ff face 	bl	91164 <memmove>
   91bc8:	e7f8      	b.n	91bbc <_realloc_r+0x24c>
   91bca:	4648      	mov	r0, r9
   91bcc:	4611      	mov	r1, r2
   91bce:	f7fa fe63 	bl	8c898 <_malloc_r>
   91bd2:	4605      	mov	r5, r0
   91bd4:	2800      	cmp	r0, #0
   91bd6:	d044      	beq.n	91c62 <_realloc_r+0x2f2>
   91bd8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   91bdc:	f1a0 0208 	sub.w	r2, r0, #8
   91be0:	f023 0301 	bic.w	r3, r3, #1
   91be4:	4443      	add	r3, r8
   91be6:	429a      	cmp	r2, r3
   91be8:	d105      	bne.n	91bf6 <_realloc_r+0x286>
   91bea:	f850 3c04 	ldr.w	r3, [r0, #-4]
   91bee:	f023 0303 	bic.w	r3, r3, #3
   91bf2:	441e      	add	r6, r3
   91bf4:	e03a      	b.n	91c6c <_realloc_r+0x2fc>
   91bf6:	1f32      	subs	r2, r6, #4
   91bf8:	2a24      	cmp	r2, #36	; 0x24
   91bfa:	d82b      	bhi.n	91c54 <_realloc_r+0x2e4>
   91bfc:	2a13      	cmp	r2, #19
   91bfe:	d91e      	bls.n	91c3e <_realloc_r+0x2ce>
   91c00:	6823      	ldr	r3, [r4, #0]
   91c02:	2a1b      	cmp	r2, #27
   91c04:	6003      	str	r3, [r0, #0]
   91c06:	6863      	ldr	r3, [r4, #4]
   91c08:	6043      	str	r3, [r0, #4]
   91c0a:	d804      	bhi.n	91c16 <_realloc_r+0x2a6>
   91c0c:	f100 0308 	add.w	r3, r0, #8
   91c10:	f104 0208 	add.w	r2, r4, #8
   91c14:	e015      	b.n	91c42 <_realloc_r+0x2d2>
   91c16:	68a3      	ldr	r3, [r4, #8]
   91c18:	2a24      	cmp	r2, #36	; 0x24
   91c1a:	6083      	str	r3, [r0, #8]
   91c1c:	68e3      	ldr	r3, [r4, #12]
   91c1e:	60c3      	str	r3, [r0, #12]
   91c20:	d004      	beq.n	91c2c <_realloc_r+0x2bc>
   91c22:	f100 0310 	add.w	r3, r0, #16
   91c26:	f104 0210 	add.w	r2, r4, #16
   91c2a:	e00a      	b.n	91c42 <_realloc_r+0x2d2>
   91c2c:	6923      	ldr	r3, [r4, #16]
   91c2e:	f104 0218 	add.w	r2, r4, #24
   91c32:	6103      	str	r3, [r0, #16]
   91c34:	6961      	ldr	r1, [r4, #20]
   91c36:	f100 0318 	add.w	r3, r0, #24
   91c3a:	6141      	str	r1, [r0, #20]
   91c3c:	e001      	b.n	91c42 <_realloc_r+0x2d2>
   91c3e:	4603      	mov	r3, r0
   91c40:	4622      	mov	r2, r4
   91c42:	6811      	ldr	r1, [r2, #0]
   91c44:	6019      	str	r1, [r3, #0]
   91c46:	6851      	ldr	r1, [r2, #4]
   91c48:	6059      	str	r1, [r3, #4]
   91c4a:	6892      	ldr	r2, [r2, #8]
   91c4c:	609a      	str	r2, [r3, #8]
   91c4e:	e004      	b.n	91c5a <_realloc_r+0x2ea>
   91c50:	200706f8 	.word	0x200706f8
   91c54:	4621      	mov	r1, r4
   91c56:	f7ff fa85 	bl	91164 <memmove>
   91c5a:	4648      	mov	r0, r9
   91c5c:	4621      	mov	r1, r4
   91c5e:	f7fe ff8f 	bl	90b80 <_free_r>
   91c62:	4648      	mov	r0, r9
   91c64:	f7fb f832 	bl	8cccc <__malloc_unlock>
   91c68:	4628      	mov	r0, r5
   91c6a:	e027      	b.n	91cbc <_realloc_r+0x34c>
   91c6c:	1bf3      	subs	r3, r6, r7
   91c6e:	2b0f      	cmp	r3, #15
   91c70:	f8d8 2004 	ldr.w	r2, [r8, #4]
   91c74:	d913      	bls.n	91c9e <_realloc_r+0x32e>
   91c76:	f002 0201 	and.w	r2, r2, #1
   91c7a:	eb08 0107 	add.w	r1, r8, r7
   91c7e:	4317      	orrs	r7, r2
   91c80:	f043 0201 	orr.w	r2, r3, #1
   91c84:	f8c8 7004 	str.w	r7, [r8, #4]
   91c88:	440b      	add	r3, r1
   91c8a:	604a      	str	r2, [r1, #4]
   91c8c:	685a      	ldr	r2, [r3, #4]
   91c8e:	4648      	mov	r0, r9
   91c90:	f042 0201 	orr.w	r2, r2, #1
   91c94:	605a      	str	r2, [r3, #4]
   91c96:	3108      	adds	r1, #8
   91c98:	f7fe ff72 	bl	90b80 <_free_r>
   91c9c:	e009      	b.n	91cb2 <_realloc_r+0x342>
   91c9e:	f002 0201 	and.w	r2, r2, #1
   91ca2:	4332      	orrs	r2, r6
   91ca4:	f8c8 2004 	str.w	r2, [r8, #4]
   91ca8:	4446      	add	r6, r8
   91caa:	6873      	ldr	r3, [r6, #4]
   91cac:	f043 0301 	orr.w	r3, r3, #1
   91cb0:	6073      	str	r3, [r6, #4]
   91cb2:	4648      	mov	r0, r9
   91cb4:	f7fb f80a 	bl	8cccc <__malloc_unlock>
   91cb8:	f108 0008 	add.w	r0, r8, #8
   91cbc:	b003      	add	sp, #12
   91cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   91cc2:	bf00      	nop

00091cc4 <__fpclassifyd>:
   91cc4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   91cc8:	b510      	push	{r4, lr}
   91cca:	d100      	bne.n	91cce <__fpclassifyd+0xa>
   91ccc:	b178      	cbz	r0, 91cee <__fpclassifyd+0x2a>
   91cce:	4a0c      	ldr	r2, [pc, #48]	; (91d00 <__fpclassifyd+0x3c>)
   91cd0:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   91cd4:	4294      	cmp	r4, r2
   91cd6:	d90c      	bls.n	91cf2 <__fpclassifyd+0x2e>
   91cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   91cdc:	d30b      	bcc.n	91cf6 <__fpclassifyd+0x32>
   91cde:	4a09      	ldr	r2, [pc, #36]	; (91d04 <__fpclassifyd+0x40>)
   91ce0:	4293      	cmp	r3, r2
   91ce2:	d10a      	bne.n	91cfa <__fpclassifyd+0x36>
   91ce4:	f1d0 0001 	rsbs	r0, r0, #1
   91ce8:	bf38      	it	cc
   91cea:	2000      	movcc	r0, #0
   91cec:	bd10      	pop	{r4, pc}
   91cee:	2002      	movs	r0, #2
   91cf0:	bd10      	pop	{r4, pc}
   91cf2:	2004      	movs	r0, #4
   91cf4:	bd10      	pop	{r4, pc}
   91cf6:	2003      	movs	r0, #3
   91cf8:	bd10      	pop	{r4, pc}
   91cfa:	2000      	movs	r0, #0
   91cfc:	bd10      	pop	{r4, pc}
   91cfe:	bf00      	nop
   91d00:	7fdfffff 	.word	0x7fdfffff
   91d04:	7ff00000 	.word	0x7ff00000

00091d08 <__sread>:
   91d08:	b510      	push	{r4, lr}
   91d0a:	460c      	mov	r4, r1
   91d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   91d10:	f000 fe2a 	bl	92968 <_read_r>
   91d14:	2800      	cmp	r0, #0
   91d16:	db03      	blt.n	91d20 <__sread+0x18>
   91d18:	6d23      	ldr	r3, [r4, #80]	; 0x50
   91d1a:	4403      	add	r3, r0
   91d1c:	6523      	str	r3, [r4, #80]	; 0x50
   91d1e:	bd10      	pop	{r4, pc}
   91d20:	89a3      	ldrh	r3, [r4, #12]
   91d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   91d26:	81a3      	strh	r3, [r4, #12]
   91d28:	bd10      	pop	{r4, pc}

00091d2a <__seofread>:
   91d2a:	2000      	movs	r0, #0
   91d2c:	4770      	bx	lr

00091d2e <__swrite>:
   91d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   91d32:	461d      	mov	r5, r3
   91d34:	898b      	ldrh	r3, [r1, #12]
   91d36:	4607      	mov	r7, r0
   91d38:	05db      	lsls	r3, r3, #23
   91d3a:	460c      	mov	r4, r1
   91d3c:	4616      	mov	r6, r2
   91d3e:	d505      	bpl.n	91d4c <__swrite+0x1e>
   91d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   91d44:	2200      	movs	r2, #0
   91d46:	2302      	movs	r3, #2
   91d48:	f000 fdfc 	bl	92944 <_lseek_r>
   91d4c:	89a3      	ldrh	r3, [r4, #12]
   91d4e:	4638      	mov	r0, r7
   91d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   91d54:	81a3      	strh	r3, [r4, #12]
   91d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   91d5a:	4632      	mov	r2, r6
   91d5c:	462b      	mov	r3, r5
   91d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   91d62:	f000 bd37 	b.w	927d4 <_write_r>

00091d66 <__sseek>:
   91d66:	b510      	push	{r4, lr}
   91d68:	460c      	mov	r4, r1
   91d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   91d6e:	f000 fde9 	bl	92944 <_lseek_r>
   91d72:	1c43      	adds	r3, r0, #1
   91d74:	89a3      	ldrh	r3, [r4, #12]
   91d76:	d103      	bne.n	91d80 <__sseek+0x1a>
   91d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   91d7c:	81a3      	strh	r3, [r4, #12]
   91d7e:	bd10      	pop	{r4, pc}
   91d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   91d84:	81a3      	strh	r3, [r4, #12]
   91d86:	6520      	str	r0, [r4, #80]	; 0x50
   91d88:	bd10      	pop	{r4, pc}

00091d8a <__sclose>:
   91d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   91d8e:	f000 bd61 	b.w	92854 <_close_r>

00091d92 <strcmp>:
   91d92:	f810 2b01 	ldrb.w	r2, [r0], #1
   91d96:	f811 3b01 	ldrb.w	r3, [r1], #1
   91d9a:	2a01      	cmp	r2, #1
   91d9c:	bf28      	it	cs
   91d9e:	429a      	cmpcs	r2, r3
   91da0:	d0f7      	beq.n	91d92 <strcmp>
   91da2:	1ad0      	subs	r0, r2, r3
   91da4:	4770      	bx	lr
	...

00091da8 <__ssprint_r>:
   91da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   91dac:	4680      	mov	r8, r0
   91dae:	6890      	ldr	r0, [r2, #8]
   91db0:	460c      	mov	r4, r1
   91db2:	4615      	mov	r5, r2
   91db4:	f8d2 9000 	ldr.w	r9, [r2]
   91db8:	b118      	cbz	r0, 91dc2 <__ssprint_r+0x1a>
   91dba:	2300      	movs	r3, #0
   91dbc:	9301      	str	r3, [sp, #4]
   91dbe:	461e      	mov	r6, r3
   91dc0:	e008      	b.n	91dd4 <__ssprint_r+0x2c>
   91dc2:	6050      	str	r0, [r2, #4]
   91dc4:	e066      	b.n	91e94 <__ssprint_r+0xec>
   91dc6:	f8d9 3000 	ldr.w	r3, [r9]
   91dca:	f8d9 6004 	ldr.w	r6, [r9, #4]
   91dce:	9301      	str	r3, [sp, #4]
   91dd0:	f109 0908 	add.w	r9, r9, #8
   91dd4:	2e00      	cmp	r6, #0
   91dd6:	d0f6      	beq.n	91dc6 <__ssprint_r+0x1e>
   91dd8:	68a7      	ldr	r7, [r4, #8]
   91dda:	42be      	cmp	r6, r7
   91ddc:	d347      	bcc.n	91e6e <__ssprint_r+0xc6>
   91dde:	89a2      	ldrh	r2, [r4, #12]
   91de0:	f412 6f90 	tst.w	r2, #1152	; 0x480
   91de4:	d041      	beq.n	91e6a <__ssprint_r+0xc2>
   91de6:	6823      	ldr	r3, [r4, #0]
   91de8:	6921      	ldr	r1, [r4, #16]
   91dea:	2002      	movs	r0, #2
   91dec:	ebc1 0a03 	rsb	sl, r1, r3
   91df0:	6963      	ldr	r3, [r4, #20]
   91df2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   91df6:	fb93 fbf0 	sdiv	fp, r3, r0
   91dfa:	f10a 0001 	add.w	r0, sl, #1
   91dfe:	4430      	add	r0, r6
   91e00:	4583      	cmp	fp, r0
   91e02:	bf38      	it	cc
   91e04:	4683      	movcc	fp, r0
   91e06:	0553      	lsls	r3, r2, #21
   91e08:	4640      	mov	r0, r8
   91e0a:	d50f      	bpl.n	91e2c <__ssprint_r+0x84>
   91e0c:	4659      	mov	r1, fp
   91e0e:	f7fa fd43 	bl	8c898 <_malloc_r>
   91e12:	4607      	mov	r7, r0
   91e14:	b198      	cbz	r0, 91e3e <__ssprint_r+0x96>
   91e16:	4652      	mov	r2, sl
   91e18:	6921      	ldr	r1, [r4, #16]
   91e1a:	f7fa ff45 	bl	8cca8 <memcpy>
   91e1e:	89a2      	ldrh	r2, [r4, #12]
   91e20:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   91e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   91e28:	81a2      	strh	r2, [r4, #12]
   91e2a:	e015      	b.n	91e58 <__ssprint_r+0xb0>
   91e2c:	465a      	mov	r2, fp
   91e2e:	f7ff fd9f 	bl	91970 <_realloc_r>
   91e32:	4607      	mov	r7, r0
   91e34:	b980      	cbnz	r0, 91e58 <__ssprint_r+0xb0>
   91e36:	4640      	mov	r0, r8
   91e38:	6921      	ldr	r1, [r4, #16]
   91e3a:	f7fe fea1 	bl	90b80 <_free_r>
   91e3e:	230c      	movs	r3, #12
   91e40:	f8c8 3000 	str.w	r3, [r8]
   91e44:	89a3      	ldrh	r3, [r4, #12]
   91e46:	f04f 30ff 	mov.w	r0, #4294967295
   91e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   91e4e:	81a3      	strh	r3, [r4, #12]
   91e50:	2300      	movs	r3, #0
   91e52:	60ab      	str	r3, [r5, #8]
   91e54:	606b      	str	r3, [r5, #4]
   91e56:	e01d      	b.n	91e94 <__ssprint_r+0xec>
   91e58:	6127      	str	r7, [r4, #16]
   91e5a:	ebca 030b 	rsb	r3, sl, fp
   91e5e:	4457      	add	r7, sl
   91e60:	6027      	str	r7, [r4, #0]
   91e62:	f8c4 b014 	str.w	fp, [r4, #20]
   91e66:	4637      	mov	r7, r6
   91e68:	60a3      	str	r3, [r4, #8]
   91e6a:	42be      	cmp	r6, r7
   91e6c:	d200      	bcs.n	91e70 <__ssprint_r+0xc8>
   91e6e:	4637      	mov	r7, r6
   91e70:	463a      	mov	r2, r7
   91e72:	6820      	ldr	r0, [r4, #0]
   91e74:	9901      	ldr	r1, [sp, #4]
   91e76:	f7ff f975 	bl	91164 <memmove>
   91e7a:	68a3      	ldr	r3, [r4, #8]
   91e7c:	1bdb      	subs	r3, r3, r7
   91e7e:	60a3      	str	r3, [r4, #8]
   91e80:	6823      	ldr	r3, [r4, #0]
   91e82:	441f      	add	r7, r3
   91e84:	68ab      	ldr	r3, [r5, #8]
   91e86:	6027      	str	r7, [r4, #0]
   91e88:	1b9e      	subs	r6, r3, r6
   91e8a:	60ae      	str	r6, [r5, #8]
   91e8c:	2e00      	cmp	r6, #0
   91e8e:	d19a      	bne.n	91dc6 <__ssprint_r+0x1e>
   91e90:	606e      	str	r6, [r5, #4]
   91e92:	4630      	mov	r0, r6
   91e94:	b003      	add	sp, #12
   91e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00091e9a <_svfiprintf_r>:
   91e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   91e9e:	461e      	mov	r6, r3
   91ea0:	898b      	ldrh	r3, [r1, #12]
   91ea2:	b0ad      	sub	sp, #180	; 0xb4
   91ea4:	4688      	mov	r8, r1
   91ea6:	0619      	lsls	r1, r3, #24
   91ea8:	4683      	mov	fp, r0
   91eaa:	9202      	str	r2, [sp, #8]
   91eac:	d513      	bpl.n	91ed6 <_svfiprintf_r+0x3c>
   91eae:	f8d8 3010 	ldr.w	r3, [r8, #16]
   91eb2:	b983      	cbnz	r3, 91ed6 <_svfiprintf_r+0x3c>
   91eb4:	2140      	movs	r1, #64	; 0x40
   91eb6:	f7fa fcef 	bl	8c898 <_malloc_r>
   91eba:	f8c8 0000 	str.w	r0, [r8]
   91ebe:	f8c8 0010 	str.w	r0, [r8, #16]
   91ec2:	b928      	cbnz	r0, 91ed0 <_svfiprintf_r+0x36>
   91ec4:	230c      	movs	r3, #12
   91ec6:	f8cb 3000 	str.w	r3, [fp]
   91eca:	f04f 30ff 	mov.w	r0, #4294967295
   91ece:	e3d4      	b.n	9267a <_svfiprintf_r+0x7e0>
   91ed0:	2340      	movs	r3, #64	; 0x40
   91ed2:	f8c8 3014 	str.w	r3, [r8, #20]
   91ed6:	2300      	movs	r3, #0
   91ed8:	aa1c      	add	r2, sp, #112	; 0x70
   91eda:	920f      	str	r2, [sp, #60]	; 0x3c
   91edc:	9311      	str	r3, [sp, #68]	; 0x44
   91ede:	9310      	str	r3, [sp, #64]	; 0x40
   91ee0:	4694      	mov	ip, r2
   91ee2:	930a      	str	r3, [sp, #40]	; 0x28
   91ee4:	9305      	str	r3, [sp, #20]
   91ee6:	9b02      	ldr	r3, [sp, #8]
   91ee8:	461c      	mov	r4, r3
   91eea:	f813 2b01 	ldrb.w	r2, [r3], #1
   91eee:	b91a      	cbnz	r2, 91ef8 <_svfiprintf_r+0x5e>
   91ef0:	9802      	ldr	r0, [sp, #8]
   91ef2:	1a25      	subs	r5, r4, r0
   91ef4:	d103      	bne.n	91efe <_svfiprintf_r+0x64>
   91ef6:	e01d      	b.n	91f34 <_svfiprintf_r+0x9a>
   91ef8:	2a25      	cmp	r2, #37	; 0x25
   91efa:	d1f5      	bne.n	91ee8 <_svfiprintf_r+0x4e>
   91efc:	e7f8      	b.n	91ef0 <_svfiprintf_r+0x56>
   91efe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   91f00:	9902      	ldr	r1, [sp, #8]
   91f02:	442b      	add	r3, r5
   91f04:	9311      	str	r3, [sp, #68]	; 0x44
   91f06:	9b10      	ldr	r3, [sp, #64]	; 0x40
   91f08:	e88c 0022 	stmia.w	ip, {r1, r5}
   91f0c:	3301      	adds	r3, #1
   91f0e:	2b07      	cmp	r3, #7
   91f10:	9310      	str	r3, [sp, #64]	; 0x40
   91f12:	dc02      	bgt.n	91f1a <_svfiprintf_r+0x80>
   91f14:	f10c 0c08 	add.w	ip, ip, #8
   91f18:	e009      	b.n	91f2e <_svfiprintf_r+0x94>
   91f1a:	4658      	mov	r0, fp
   91f1c:	4641      	mov	r1, r8
   91f1e:	aa0f      	add	r2, sp, #60	; 0x3c
   91f20:	f7ff ff42 	bl	91da8 <__ssprint_r>
   91f24:	2800      	cmp	r0, #0
   91f26:	f040 83a0 	bne.w	9266a <_svfiprintf_r+0x7d0>
   91f2a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   91f2e:	9a05      	ldr	r2, [sp, #20]
   91f30:	442a      	add	r2, r5
   91f32:	9205      	str	r2, [sp, #20]
   91f34:	7823      	ldrb	r3, [r4, #0]
   91f36:	2b00      	cmp	r3, #0
   91f38:	f000 8390 	beq.w	9265c <_svfiprintf_r+0x7c2>
   91f3c:	2200      	movs	r2, #0
   91f3e:	3401      	adds	r4, #1
   91f40:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   91f44:	f04f 3aff 	mov.w	sl, #4294967295
   91f48:	9204      	str	r2, [sp, #16]
   91f4a:	4617      	mov	r7, r2
   91f4c:	1c65      	adds	r5, r4, #1
   91f4e:	7823      	ldrb	r3, [r4, #0]
   91f50:	9502      	str	r5, [sp, #8]
   91f52:	2b58      	cmp	r3, #88	; 0x58
   91f54:	d064      	beq.n	92020 <_svfiprintf_r+0x186>
   91f56:	dc2d      	bgt.n	91fb4 <_svfiprintf_r+0x11a>
   91f58:	2b2e      	cmp	r3, #46	; 0x2e
   91f5a:	d076      	beq.n	9204a <_svfiprintf_r+0x1b0>
   91f5c:	dc12      	bgt.n	91f84 <_svfiprintf_r+0xea>
   91f5e:	2b2a      	cmp	r3, #42	; 0x2a
   91f60:	d066      	beq.n	92030 <_svfiprintf_r+0x196>
   91f62:	dc08      	bgt.n	91f76 <_svfiprintf_r+0xdc>
   91f64:	2b20      	cmp	r3, #32
   91f66:	d05f      	beq.n	92028 <_svfiprintf_r+0x18e>
   91f68:	2b23      	cmp	r3, #35	; 0x23
   91f6a:	f040 8201 	bne.w	92370 <_svfiprintf_r+0x4d6>
   91f6e:	f047 0701 	orr.w	r7, r7, #1
   91f72:	9c02      	ldr	r4, [sp, #8]
   91f74:	e7ea      	b.n	91f4c <_svfiprintf_r+0xb2>
   91f76:	2b2b      	cmp	r3, #43	; 0x2b
   91f78:	d101      	bne.n	91f7e <_svfiprintf_r+0xe4>
   91f7a:	461a      	mov	r2, r3
   91f7c:	e7f9      	b.n	91f72 <_svfiprintf_r+0xd8>
   91f7e:	2b2d      	cmp	r3, #45	; 0x2d
   91f80:	d060      	beq.n	92044 <_svfiprintf_r+0x1aa>
   91f82:	e1f5      	b.n	92370 <_svfiprintf_r+0x4d6>
   91f84:	2b39      	cmp	r3, #57	; 0x39
   91f86:	dc07      	bgt.n	91f98 <_svfiprintf_r+0xfe>
   91f88:	2b31      	cmp	r3, #49	; 0x31
   91f8a:	da7f      	bge.n	9208c <_svfiprintf_r+0x1f2>
   91f8c:	2b30      	cmp	r3, #48	; 0x30
   91f8e:	f040 81ef 	bne.w	92370 <_svfiprintf_r+0x4d6>
   91f92:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   91f96:	e7ec      	b.n	91f72 <_svfiprintf_r+0xd8>
   91f98:	2b4f      	cmp	r3, #79	; 0x4f
   91f9a:	f000 80e0 	beq.w	9215e <_svfiprintf_r+0x2c4>
   91f9e:	2b55      	cmp	r3, #85	; 0x55
   91fa0:	f000 8120 	beq.w	921e4 <_svfiprintf_r+0x34a>
   91fa4:	2b44      	cmp	r3, #68	; 0x44
   91fa6:	f040 81e3 	bne.w	92370 <_svfiprintf_r+0x4d6>
   91faa:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   91fae:	f047 0710 	orr.w	r7, r7, #16
   91fb2:	e094      	b.n	920de <_svfiprintf_r+0x244>
   91fb4:	2b6e      	cmp	r3, #110	; 0x6e
   91fb6:	f000 80b6 	beq.w	92126 <_svfiprintf_r+0x28c>
   91fba:	dc0d      	bgt.n	91fd8 <_svfiprintf_r+0x13e>
   91fbc:	2b68      	cmp	r3, #104	; 0x68
   91fbe:	d076      	beq.n	920ae <_svfiprintf_r+0x214>
   91fc0:	dc05      	bgt.n	91fce <_svfiprintf_r+0x134>
   91fc2:	2b63      	cmp	r3, #99	; 0x63
   91fc4:	f000 8083 	beq.w	920ce <_svfiprintf_r+0x234>
   91fc8:	2b64      	cmp	r3, #100	; 0x64
   91fca:	d026      	beq.n	9201a <_svfiprintf_r+0x180>
   91fcc:	e1d0      	b.n	92370 <_svfiprintf_r+0x4d6>
   91fce:	2b69      	cmp	r3, #105	; 0x69
   91fd0:	d023      	beq.n	9201a <_svfiprintf_r+0x180>
   91fd2:	2b6c      	cmp	r3, #108	; 0x6c
   91fd4:	d06e      	beq.n	920b4 <_svfiprintf_r+0x21a>
   91fd6:	e1cb      	b.n	92370 <_svfiprintf_r+0x4d6>
   91fd8:	2b71      	cmp	r3, #113	; 0x71
   91fda:	d075      	beq.n	920c8 <_svfiprintf_r+0x22e>
   91fdc:	dc13      	bgt.n	92006 <_svfiprintf_r+0x16c>
   91fde:	2b6f      	cmp	r3, #111	; 0x6f
   91fe0:	f000 80bf 	beq.w	92162 <_svfiprintf_r+0x2c8>
   91fe4:	2b70      	cmp	r3, #112	; 0x70
   91fe6:	f040 81c3 	bne.w	92370 <_svfiprintf_r+0x4d6>
   91fea:	2330      	movs	r3, #48	; 0x30
   91fec:	48a0      	ldr	r0, [pc, #640]	; (92270 <_svfiprintf_r+0x3d6>)
   91fee:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   91ff2:	2378      	movs	r3, #120	; 0x78
   91ff4:	6834      	ldr	r4, [r6, #0]
   91ff6:	2500      	movs	r5, #0
   91ff8:	f047 0702 	orr.w	r7, r7, #2
   91ffc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   92000:	3604      	adds	r6, #4
   92002:	900a      	str	r0, [sp, #40]	; 0x28
   92004:	e12e      	b.n	92264 <_svfiprintf_r+0x3ca>
   92006:	2b75      	cmp	r3, #117	; 0x75
   92008:	f000 80ee 	beq.w	921e8 <_svfiprintf_r+0x34e>
   9200c:	2b78      	cmp	r3, #120	; 0x78
   9200e:	f000 8103 	beq.w	92218 <_svfiprintf_r+0x37e>
   92012:	2b73      	cmp	r3, #115	; 0x73
   92014:	f040 81ac 	bne.w	92370 <_svfiprintf_r+0x4d6>
   92018:	e0bf      	b.n	9219a <_svfiprintf_r+0x300>
   9201a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   9201e:	e05e      	b.n	920de <_svfiprintf_r+0x244>
   92020:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   92024:	4c93      	ldr	r4, [pc, #588]	; (92274 <_svfiprintf_r+0x3da>)
   92026:	e0fa      	b.n	9221e <_svfiprintf_r+0x384>
   92028:	2a00      	cmp	r2, #0
   9202a:	bf08      	it	eq
   9202c:	2220      	moveq	r2, #32
   9202e:	e7a0      	b.n	91f72 <_svfiprintf_r+0xd8>
   92030:	1d33      	adds	r3, r6, #4
   92032:	6836      	ldr	r6, [r6, #0]
   92034:	2e00      	cmp	r6, #0
   92036:	9604      	str	r6, [sp, #16]
   92038:	db01      	blt.n	9203e <_svfiprintf_r+0x1a4>
   9203a:	461e      	mov	r6, r3
   9203c:	e799      	b.n	91f72 <_svfiprintf_r+0xd8>
   9203e:	4275      	negs	r5, r6
   92040:	9504      	str	r5, [sp, #16]
   92042:	461e      	mov	r6, r3
   92044:	f047 0704 	orr.w	r7, r7, #4
   92048:	e793      	b.n	91f72 <_svfiprintf_r+0xd8>
   9204a:	9c02      	ldr	r4, [sp, #8]
   9204c:	7823      	ldrb	r3, [r4, #0]
   9204e:	1c61      	adds	r1, r4, #1
   92050:	2b2a      	cmp	r3, #42	; 0x2a
   92052:	d002      	beq.n	9205a <_svfiprintf_r+0x1c0>
   92054:	f04f 0a00 	mov.w	sl, #0
   92058:	e00a      	b.n	92070 <_svfiprintf_r+0x1d6>
   9205a:	f8d6 a000 	ldr.w	sl, [r6]
   9205e:	1d33      	adds	r3, r6, #4
   92060:	f1ba 0f00 	cmp.w	sl, #0
   92064:	461e      	mov	r6, r3
   92066:	9102      	str	r1, [sp, #8]
   92068:	da83      	bge.n	91f72 <_svfiprintf_r+0xd8>
   9206a:	f04f 3aff 	mov.w	sl, #4294967295
   9206e:	e780      	b.n	91f72 <_svfiprintf_r+0xd8>
   92070:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   92074:	2809      	cmp	r0, #9
   92076:	d805      	bhi.n	92084 <_svfiprintf_r+0x1ea>
   92078:	230a      	movs	r3, #10
   9207a:	fb03 0a0a 	mla	sl, r3, sl, r0
   9207e:	f811 3b01 	ldrb.w	r3, [r1], #1
   92082:	e7f5      	b.n	92070 <_svfiprintf_r+0x1d6>
   92084:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
   92088:	9102      	str	r1, [sp, #8]
   9208a:	e762      	b.n	91f52 <_svfiprintf_r+0xb8>
   9208c:	2500      	movs	r5, #0
   9208e:	9504      	str	r5, [sp, #16]
   92090:	9c04      	ldr	r4, [sp, #16]
   92092:	3b30      	subs	r3, #48	; 0x30
   92094:	210a      	movs	r1, #10
   92096:	fb01 3404 	mla	r4, r1, r4, r3
   9209a:	9902      	ldr	r1, [sp, #8]
   9209c:	9404      	str	r4, [sp, #16]
   9209e:	f811 3b01 	ldrb.w	r3, [r1], #1
   920a2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   920a6:	2809      	cmp	r0, #9
   920a8:	d8ee      	bhi.n	92088 <_svfiprintf_r+0x1ee>
   920aa:	9102      	str	r1, [sp, #8]
   920ac:	e7f0      	b.n	92090 <_svfiprintf_r+0x1f6>
   920ae:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   920b2:	e75e      	b.n	91f72 <_svfiprintf_r+0xd8>
   920b4:	9d02      	ldr	r5, [sp, #8]
   920b6:	782b      	ldrb	r3, [r5, #0]
   920b8:	2b6c      	cmp	r3, #108	; 0x6c
   920ba:	d102      	bne.n	920c2 <_svfiprintf_r+0x228>
   920bc:	3501      	adds	r5, #1
   920be:	9502      	str	r5, [sp, #8]
   920c0:	e002      	b.n	920c8 <_svfiprintf_r+0x22e>
   920c2:	f047 0710 	orr.w	r7, r7, #16
   920c6:	e754      	b.n	91f72 <_svfiprintf_r+0xd8>
   920c8:	f047 0720 	orr.w	r7, r7, #32
   920cc:	e751      	b.n	91f72 <_svfiprintf_r+0xd8>
   920ce:	6833      	ldr	r3, [r6, #0]
   920d0:	2500      	movs	r5, #0
   920d2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   920d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   920da:	3604      	adds	r6, #4
   920dc:	e152      	b.n	92384 <_svfiprintf_r+0x4ea>
   920de:	06ba      	lsls	r2, r7, #26
   920e0:	d507      	bpl.n	920f2 <_svfiprintf_r+0x258>
   920e2:	3607      	adds	r6, #7
   920e4:	f026 0307 	bic.w	r3, r6, #7
   920e8:	f103 0608 	add.w	r6, r3, #8
   920ec:	e9d3 4500 	ldrd	r4, r5, [r3]
   920f0:	e00d      	b.n	9210e <_svfiprintf_r+0x274>
   920f2:	f017 0f10 	tst.w	r7, #16
   920f6:	f106 0304 	add.w	r3, r6, #4
   920fa:	d001      	beq.n	92100 <_svfiprintf_r+0x266>
   920fc:	6834      	ldr	r4, [r6, #0]
   920fe:	e004      	b.n	9210a <_svfiprintf_r+0x270>
   92100:	6834      	ldr	r4, [r6, #0]
   92102:	f017 0f40 	tst.w	r7, #64	; 0x40
   92106:	bf18      	it	ne
   92108:	b224      	sxthne	r4, r4
   9210a:	17e5      	asrs	r5, r4, #31
   9210c:	461e      	mov	r6, r3
   9210e:	2c00      	cmp	r4, #0
   92110:	f175 0000 	sbcs.w	r0, r5, #0
   92114:	f280 80b0 	bge.w	92278 <_svfiprintf_r+0x3de>
   92118:	232d      	movs	r3, #45	; 0x2d
   9211a:	4264      	negs	r4, r4
   9211c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   92120:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   92124:	e0a8      	b.n	92278 <_svfiprintf_r+0x3de>
   92126:	f017 0f20 	tst.w	r7, #32
   9212a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   9212e:	f106 0104 	add.w	r1, r6, #4
   92132:	d007      	beq.n	92144 <_svfiprintf_r+0x2aa>
   92134:	9c05      	ldr	r4, [sp, #20]
   92136:	6830      	ldr	r0, [r6, #0]
   92138:	17e5      	asrs	r5, r4, #31
   9213a:	4622      	mov	r2, r4
   9213c:	462b      	mov	r3, r5
   9213e:	e9c0 2300 	strd	r2, r3, [r0]
   92142:	e00a      	b.n	9215a <_svfiprintf_r+0x2c0>
   92144:	06fb      	lsls	r3, r7, #27
   92146:	d405      	bmi.n	92154 <_svfiprintf_r+0x2ba>
   92148:	067f      	lsls	r7, r7, #25
   9214a:	d503      	bpl.n	92154 <_svfiprintf_r+0x2ba>
   9214c:	6833      	ldr	r3, [r6, #0]
   9214e:	9c05      	ldr	r4, [sp, #20]
   92150:	801c      	strh	r4, [r3, #0]
   92152:	e002      	b.n	9215a <_svfiprintf_r+0x2c0>
   92154:	6833      	ldr	r3, [r6, #0]
   92156:	9d05      	ldr	r5, [sp, #20]
   92158:	601d      	str	r5, [r3, #0]
   9215a:	460e      	mov	r6, r1
   9215c:	e6c3      	b.n	91ee6 <_svfiprintf_r+0x4c>
   9215e:	f047 0710 	orr.w	r7, r7, #16
   92162:	f017 0320 	ands.w	r3, r7, #32
   92166:	d008      	beq.n	9217a <_svfiprintf_r+0x2e0>
   92168:	3607      	adds	r6, #7
   9216a:	f026 0307 	bic.w	r3, r6, #7
   9216e:	f103 0608 	add.w	r6, r3, #8
   92172:	e9d3 4500 	ldrd	r4, r5, [r3]
   92176:	2300      	movs	r3, #0
   92178:	e075      	b.n	92266 <_svfiprintf_r+0x3cc>
   9217a:	f017 0110 	ands.w	r1, r7, #16
   9217e:	f106 0204 	add.w	r2, r6, #4
   92182:	d106      	bne.n	92192 <_svfiprintf_r+0x2f8>
   92184:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   92188:	d003      	beq.n	92192 <_svfiprintf_r+0x2f8>
   9218a:	8834      	ldrh	r4, [r6, #0]
   9218c:	2500      	movs	r5, #0
   9218e:	4616      	mov	r6, r2
   92190:	e7f1      	b.n	92176 <_svfiprintf_r+0x2dc>
   92192:	6834      	ldr	r4, [r6, #0]
   92194:	2500      	movs	r5, #0
   92196:	4616      	mov	r6, r2
   92198:	e065      	b.n	92266 <_svfiprintf_r+0x3cc>
   9219a:	f8d6 9000 	ldr.w	r9, [r6]
   9219e:	2300      	movs	r3, #0
   921a0:	459a      	cmp	sl, r3
   921a2:	f106 0604 	add.w	r6, r6, #4
   921a6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   921aa:	4648      	mov	r0, r9
   921ac:	db11      	blt.n	921d2 <_svfiprintf_r+0x338>
   921ae:	4619      	mov	r1, r3
   921b0:	4652      	mov	r2, sl
   921b2:	f8cd c004 	str.w	ip, [sp, #4]
   921b6:	f7fe ffc7 	bl	91148 <memchr>
   921ba:	f8dd c004 	ldr.w	ip, [sp, #4]
   921be:	2800      	cmp	r0, #0
   921c0:	f000 80e5 	beq.w	9238e <_svfiprintf_r+0x4f4>
   921c4:	ebc9 0000 	rsb	r0, r9, r0
   921c8:	4550      	cmp	r0, sl
   921ca:	bfb8      	it	lt
   921cc:	4682      	movlt	sl, r0
   921ce:	2500      	movs	r5, #0
   921d0:	e0de      	b.n	92390 <_svfiprintf_r+0x4f6>
   921d2:	f8cd c004 	str.w	ip, [sp, #4]
   921d6:	f7fa fe74 	bl	8cec2 <strlen>
   921da:	2500      	movs	r5, #0
   921dc:	4682      	mov	sl, r0
   921de:	f8dd c004 	ldr.w	ip, [sp, #4]
   921e2:	e0d5      	b.n	92390 <_svfiprintf_r+0x4f6>
   921e4:	f047 0710 	orr.w	r7, r7, #16
   921e8:	06bd      	lsls	r5, r7, #26
   921ea:	d507      	bpl.n	921fc <_svfiprintf_r+0x362>
   921ec:	3607      	adds	r6, #7
   921ee:	f026 0307 	bic.w	r3, r6, #7
   921f2:	f103 0608 	add.w	r6, r3, #8
   921f6:	e9d3 4500 	ldrd	r4, r5, [r3]
   921fa:	e00b      	b.n	92214 <_svfiprintf_r+0x37a>
   921fc:	f017 0f10 	tst.w	r7, #16
   92200:	f106 0304 	add.w	r3, r6, #4
   92204:	d103      	bne.n	9220e <_svfiprintf_r+0x374>
   92206:	067c      	lsls	r4, r7, #25
   92208:	d501      	bpl.n	9220e <_svfiprintf_r+0x374>
   9220a:	8834      	ldrh	r4, [r6, #0]
   9220c:	e000      	b.n	92210 <_svfiprintf_r+0x376>
   9220e:	6834      	ldr	r4, [r6, #0]
   92210:	2500      	movs	r5, #0
   92212:	461e      	mov	r6, r3
   92214:	2301      	movs	r3, #1
   92216:	e026      	b.n	92266 <_svfiprintf_r+0x3cc>
   92218:	4c15      	ldr	r4, [pc, #84]	; (92270 <_svfiprintf_r+0x3d6>)
   9221a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   9221e:	06b8      	lsls	r0, r7, #26
   92220:	940a      	str	r4, [sp, #40]	; 0x28
   92222:	d507      	bpl.n	92234 <_svfiprintf_r+0x39a>
   92224:	3607      	adds	r6, #7
   92226:	f026 0207 	bic.w	r2, r6, #7
   9222a:	f102 0608 	add.w	r6, r2, #8
   9222e:	e9d2 4500 	ldrd	r4, r5, [r2]
   92232:	e00b      	b.n	9224c <_svfiprintf_r+0x3b2>
   92234:	f017 0f10 	tst.w	r7, #16
   92238:	f106 0204 	add.w	r2, r6, #4
   9223c:	d103      	bne.n	92246 <_svfiprintf_r+0x3ac>
   9223e:	0679      	lsls	r1, r7, #25
   92240:	d501      	bpl.n	92246 <_svfiprintf_r+0x3ac>
   92242:	8834      	ldrh	r4, [r6, #0]
   92244:	e000      	b.n	92248 <_svfiprintf_r+0x3ae>
   92246:	6834      	ldr	r4, [r6, #0]
   92248:	2500      	movs	r5, #0
   9224a:	4616      	mov	r6, r2
   9224c:	07fa      	lsls	r2, r7, #31
   9224e:	d509      	bpl.n	92264 <_svfiprintf_r+0x3ca>
   92250:	ea54 0005 	orrs.w	r0, r4, r5
   92254:	d006      	beq.n	92264 <_svfiprintf_r+0x3ca>
   92256:	2230      	movs	r2, #48	; 0x30
   92258:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   9225c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   92260:	f047 0702 	orr.w	r7, r7, #2
   92264:	2302      	movs	r3, #2
   92266:	2200      	movs	r2, #0
   92268:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   9226c:	e005      	b.n	9227a <_svfiprintf_r+0x3e0>
   9226e:	bf00      	nop
   92270:	000b11df 	.word	0x000b11df
   92274:	000b11ce 	.word	0x000b11ce
   92278:	2301      	movs	r3, #1
   9227a:	f1ba 0f00 	cmp.w	sl, #0
   9227e:	bfa8      	it	ge
   92280:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   92284:	ea54 0105 	orrs.w	r1, r4, r5
   92288:	d102      	bne.n	92290 <_svfiprintf_r+0x3f6>
   9228a:	f1ba 0f00 	cmp.w	sl, #0
   9228e:	d05e      	beq.n	9234e <_svfiprintf_r+0x4b4>
   92290:	2b01      	cmp	r3, #1
   92292:	d01f      	beq.n	922d4 <_svfiprintf_r+0x43a>
   92294:	2b02      	cmp	r3, #2
   92296:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
   9229a:	d045      	beq.n	92328 <_svfiprintf_r+0x48e>
   9229c:	08e0      	lsrs	r0, r4, #3
   9229e:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
   922a2:	08e8      	lsrs	r0, r5, #3
   922a4:	f004 0207 	and.w	r2, r4, #7
   922a8:	9106      	str	r1, [sp, #24]
   922aa:	9007      	str	r0, [sp, #28]
   922ac:	3230      	adds	r2, #48	; 0x30
   922ae:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   922b2:	ea54 0105 	orrs.w	r1, r4, r5
   922b6:	4699      	mov	r9, r3
   922b8:	701a      	strb	r2, [r3, #0]
   922ba:	f103 33ff 	add.w	r3, r3, #4294967295
   922be:	d1ed      	bne.n	9229c <_svfiprintf_r+0x402>
   922c0:	07f8      	lsls	r0, r7, #31
   922c2:	4649      	mov	r1, r9
   922c4:	d54e      	bpl.n	92364 <_svfiprintf_r+0x4ca>
   922c6:	2a30      	cmp	r2, #48	; 0x30
   922c8:	d04c      	beq.n	92364 <_svfiprintf_r+0x4ca>
   922ca:	4699      	mov	r9, r3
   922cc:	2330      	movs	r3, #48	; 0x30
   922ce:	f801 3c01 	strb.w	r3, [r1, #-1]
   922d2:	e047      	b.n	92364 <_svfiprintf_r+0x4ca>
   922d4:	2d00      	cmp	r5, #0
   922d6:	bf08      	it	eq
   922d8:	2c0a      	cmpeq	r4, #10
   922da:	d205      	bcs.n	922e8 <_svfiprintf_r+0x44e>
   922dc:	3430      	adds	r4, #48	; 0x30
   922de:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   922e2:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
   922e6:	e03d      	b.n	92364 <_svfiprintf_r+0x4ca>
   922e8:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   922ec:	9203      	str	r2, [sp, #12]
   922ee:	4620      	mov	r0, r4
   922f0:	4629      	mov	r1, r5
   922f2:	220a      	movs	r2, #10
   922f4:	2300      	movs	r3, #0
   922f6:	f8cd c004 	str.w	ip, [sp, #4]
   922fa:	f000 ffc1 	bl	93280 <__aeabi_uldivmod>
   922fe:	9b03      	ldr	r3, [sp, #12]
   92300:	3230      	adds	r2, #48	; 0x30
   92302:	f803 2901 	strb.w	r2, [r3], #-1
   92306:	4620      	mov	r0, r4
   92308:	4629      	mov	r1, r5
   9230a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   9230e:	220a      	movs	r2, #10
   92310:	9303      	str	r3, [sp, #12]
   92312:	2300      	movs	r3, #0
   92314:	f000 ffb4 	bl	93280 <__aeabi_uldivmod>
   92318:	4604      	mov	r4, r0
   9231a:	460d      	mov	r5, r1
   9231c:	ea54 0005 	orrs.w	r0, r4, r5
   92320:	f8dd c004 	ldr.w	ip, [sp, #4]
   92324:	d1e3      	bne.n	922ee <_svfiprintf_r+0x454>
   92326:	e01d      	b.n	92364 <_svfiprintf_r+0x4ca>
   92328:	990a      	ldr	r1, [sp, #40]	; 0x28
   9232a:	f004 020f 	and.w	r2, r4, #15
   9232e:	5c8a      	ldrb	r2, [r1, r2]
   92330:	4699      	mov	r9, r3
   92332:	f803 2901 	strb.w	r2, [r3], #-1
   92336:	0922      	lsrs	r2, r4, #4
   92338:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   9233c:	0929      	lsrs	r1, r5, #4
   9233e:	9008      	str	r0, [sp, #32]
   92340:	9109      	str	r1, [sp, #36]	; 0x24
   92342:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   92346:	ea54 0205 	orrs.w	r2, r4, r5
   9234a:	d1ed      	bne.n	92328 <_svfiprintf_r+0x48e>
   9234c:	e00a      	b.n	92364 <_svfiprintf_r+0x4ca>
   9234e:	b93b      	cbnz	r3, 92360 <_svfiprintf_r+0x4c6>
   92350:	07f9      	lsls	r1, r7, #31
   92352:	d505      	bpl.n	92360 <_svfiprintf_r+0x4c6>
   92354:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   92358:	2330      	movs	r3, #48	; 0x30
   9235a:	f809 3d41 	strb.w	r3, [r9, #-65]!
   9235e:	e001      	b.n	92364 <_svfiprintf_r+0x4ca>
   92360:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   92364:	4655      	mov	r5, sl
   92366:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   9236a:	ebc9 0a0a 	rsb	sl, r9, sl
   9236e:	e00f      	b.n	92390 <_svfiprintf_r+0x4f6>
   92370:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   92374:	2b00      	cmp	r3, #0
   92376:	f000 8171 	beq.w	9265c <_svfiprintf_r+0x7c2>
   9237a:	2500      	movs	r5, #0
   9237c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   92380:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   92384:	f04f 0a01 	mov.w	sl, #1
   92388:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   9238c:	e000      	b.n	92390 <_svfiprintf_r+0x4f6>
   9238e:	4605      	mov	r5, r0
   92390:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   92394:	45aa      	cmp	sl, r5
   92396:	bfac      	ite	ge
   92398:	4654      	movge	r4, sl
   9239a:	462c      	movlt	r4, r5
   9239c:	b103      	cbz	r3, 923a0 <_svfiprintf_r+0x506>
   9239e:	3401      	adds	r4, #1
   923a0:	f017 0302 	ands.w	r3, r7, #2
   923a4:	9303      	str	r3, [sp, #12]
   923a6:	bf18      	it	ne
   923a8:	3402      	addne	r4, #2
   923aa:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   923ae:	930b      	str	r3, [sp, #44]	; 0x2c
   923b0:	d13b      	bne.n	9242a <_svfiprintf_r+0x590>
   923b2:	9804      	ldr	r0, [sp, #16]
   923b4:	1b03      	subs	r3, r0, r4
   923b6:	2b00      	cmp	r3, #0
   923b8:	dd37      	ble.n	9242a <_svfiprintf_r+0x590>
   923ba:	4aa6      	ldr	r2, [pc, #664]	; (92654 <_svfiprintf_r+0x7ba>)
   923bc:	2b10      	cmp	r3, #16
   923be:	f8cc 2000 	str.w	r2, [ip]
   923c2:	dd1b      	ble.n	923fc <_svfiprintf_r+0x562>
   923c4:	2210      	movs	r2, #16
   923c6:	f8cc 2004 	str.w	r2, [ip, #4]
   923ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   923cc:	3210      	adds	r2, #16
   923ce:	9211      	str	r2, [sp, #68]	; 0x44
   923d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   923d2:	3201      	adds	r2, #1
   923d4:	2a07      	cmp	r2, #7
   923d6:	9210      	str	r2, [sp, #64]	; 0x40
   923d8:	dc02      	bgt.n	923e0 <_svfiprintf_r+0x546>
   923da:	f10c 0c08 	add.w	ip, ip, #8
   923de:	e00b      	b.n	923f8 <_svfiprintf_r+0x55e>
   923e0:	4658      	mov	r0, fp
   923e2:	4641      	mov	r1, r8
   923e4:	aa0f      	add	r2, sp, #60	; 0x3c
   923e6:	9301      	str	r3, [sp, #4]
   923e8:	f7ff fcde 	bl	91da8 <__ssprint_r>
   923ec:	9b01      	ldr	r3, [sp, #4]
   923ee:	2800      	cmp	r0, #0
   923f0:	f040 813b 	bne.w	9266a <_svfiprintf_r+0x7d0>
   923f4:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   923f8:	3b10      	subs	r3, #16
   923fa:	e7de      	b.n	923ba <_svfiprintf_r+0x520>
   923fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   923fe:	f8cc 3004 	str.w	r3, [ip, #4]
   92402:	4413      	add	r3, r2
   92404:	9311      	str	r3, [sp, #68]	; 0x44
   92406:	9b10      	ldr	r3, [sp, #64]	; 0x40
   92408:	3301      	adds	r3, #1
   9240a:	2b07      	cmp	r3, #7
   9240c:	9310      	str	r3, [sp, #64]	; 0x40
   9240e:	dc02      	bgt.n	92416 <_svfiprintf_r+0x57c>
   92410:	f10c 0c08 	add.w	ip, ip, #8
   92414:	e009      	b.n	9242a <_svfiprintf_r+0x590>
   92416:	4658      	mov	r0, fp
   92418:	4641      	mov	r1, r8
   9241a:	aa0f      	add	r2, sp, #60	; 0x3c
   9241c:	f7ff fcc4 	bl	91da8 <__ssprint_r>
   92420:	2800      	cmp	r0, #0
   92422:	f040 8122 	bne.w	9266a <_svfiprintf_r+0x7d0>
   92426:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   9242a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   9242e:	b1db      	cbz	r3, 92468 <_svfiprintf_r+0x5ce>
   92430:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   92434:	f8cc 3000 	str.w	r3, [ip]
   92438:	2301      	movs	r3, #1
   9243a:	f8cc 3004 	str.w	r3, [ip, #4]
   9243e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   92440:	3301      	adds	r3, #1
   92442:	9311      	str	r3, [sp, #68]	; 0x44
   92444:	9b10      	ldr	r3, [sp, #64]	; 0x40
   92446:	3301      	adds	r3, #1
   92448:	2b07      	cmp	r3, #7
   9244a:	9310      	str	r3, [sp, #64]	; 0x40
   9244c:	dc02      	bgt.n	92454 <_svfiprintf_r+0x5ba>
   9244e:	f10c 0c08 	add.w	ip, ip, #8
   92452:	e009      	b.n	92468 <_svfiprintf_r+0x5ce>
   92454:	4658      	mov	r0, fp
   92456:	4641      	mov	r1, r8
   92458:	aa0f      	add	r2, sp, #60	; 0x3c
   9245a:	f7ff fca5 	bl	91da8 <__ssprint_r>
   9245e:	2800      	cmp	r0, #0
   92460:	f040 8103 	bne.w	9266a <_svfiprintf_r+0x7d0>
   92464:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   92468:	9b03      	ldr	r3, [sp, #12]
   9246a:	b1d3      	cbz	r3, 924a2 <_svfiprintf_r+0x608>
   9246c:	ab0e      	add	r3, sp, #56	; 0x38
   9246e:	f8cc 3000 	str.w	r3, [ip]
   92472:	2302      	movs	r3, #2
   92474:	f8cc 3004 	str.w	r3, [ip, #4]
   92478:	9b11      	ldr	r3, [sp, #68]	; 0x44
   9247a:	3302      	adds	r3, #2
   9247c:	9311      	str	r3, [sp, #68]	; 0x44
   9247e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   92480:	3301      	adds	r3, #1
   92482:	2b07      	cmp	r3, #7
   92484:	9310      	str	r3, [sp, #64]	; 0x40
   92486:	dc02      	bgt.n	9248e <_svfiprintf_r+0x5f4>
   92488:	f10c 0c08 	add.w	ip, ip, #8
   9248c:	e009      	b.n	924a2 <_svfiprintf_r+0x608>
   9248e:	4658      	mov	r0, fp
   92490:	4641      	mov	r1, r8
   92492:	aa0f      	add	r2, sp, #60	; 0x3c
   92494:	f7ff fc88 	bl	91da8 <__ssprint_r>
   92498:	2800      	cmp	r0, #0
   9249a:	f040 80e6 	bne.w	9266a <_svfiprintf_r+0x7d0>
   9249e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   924a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   924a4:	2b80      	cmp	r3, #128	; 0x80
   924a6:	d13f      	bne.n	92528 <_svfiprintf_r+0x68e>
   924a8:	9b04      	ldr	r3, [sp, #16]
   924aa:	1b1b      	subs	r3, r3, r4
   924ac:	2b00      	cmp	r3, #0
   924ae:	9303      	str	r3, [sp, #12]
   924b0:	dd3a      	ble.n	92528 <_svfiprintf_r+0x68e>
   924b2:	9b03      	ldr	r3, [sp, #12]
   924b4:	2b10      	cmp	r3, #16
   924b6:	4b68      	ldr	r3, [pc, #416]	; (92658 <_svfiprintf_r+0x7be>)
   924b8:	f8cc 3000 	str.w	r3, [ip]
   924bc:	dd1b      	ble.n	924f6 <_svfiprintf_r+0x65c>
   924be:	2310      	movs	r3, #16
   924c0:	f8cc 3004 	str.w	r3, [ip, #4]
   924c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   924c6:	3310      	adds	r3, #16
   924c8:	9311      	str	r3, [sp, #68]	; 0x44
   924ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   924cc:	3301      	adds	r3, #1
   924ce:	2b07      	cmp	r3, #7
   924d0:	9310      	str	r3, [sp, #64]	; 0x40
   924d2:	dc02      	bgt.n	924da <_svfiprintf_r+0x640>
   924d4:	f10c 0c08 	add.w	ip, ip, #8
   924d8:	e009      	b.n	924ee <_svfiprintf_r+0x654>
   924da:	4658      	mov	r0, fp
   924dc:	4641      	mov	r1, r8
   924de:	aa0f      	add	r2, sp, #60	; 0x3c
   924e0:	f7ff fc62 	bl	91da8 <__ssprint_r>
   924e4:	2800      	cmp	r0, #0
   924e6:	f040 80c0 	bne.w	9266a <_svfiprintf_r+0x7d0>
   924ea:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   924ee:	9b03      	ldr	r3, [sp, #12]
   924f0:	3b10      	subs	r3, #16
   924f2:	9303      	str	r3, [sp, #12]
   924f4:	e7dd      	b.n	924b2 <_svfiprintf_r+0x618>
   924f6:	9b03      	ldr	r3, [sp, #12]
   924f8:	9803      	ldr	r0, [sp, #12]
   924fa:	f8cc 3004 	str.w	r3, [ip, #4]
   924fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   92500:	4403      	add	r3, r0
   92502:	9311      	str	r3, [sp, #68]	; 0x44
   92504:	9b10      	ldr	r3, [sp, #64]	; 0x40
   92506:	3301      	adds	r3, #1
   92508:	2b07      	cmp	r3, #7
   9250a:	9310      	str	r3, [sp, #64]	; 0x40
   9250c:	dc02      	bgt.n	92514 <_svfiprintf_r+0x67a>
   9250e:	f10c 0c08 	add.w	ip, ip, #8
   92512:	e009      	b.n	92528 <_svfiprintf_r+0x68e>
   92514:	4658      	mov	r0, fp
   92516:	4641      	mov	r1, r8
   92518:	aa0f      	add	r2, sp, #60	; 0x3c
   9251a:	f7ff fc45 	bl	91da8 <__ssprint_r>
   9251e:	2800      	cmp	r0, #0
   92520:	f040 80a3 	bne.w	9266a <_svfiprintf_r+0x7d0>
   92524:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   92528:	ebca 0505 	rsb	r5, sl, r5
   9252c:	2d00      	cmp	r5, #0
   9252e:	dd34      	ble.n	9259a <_svfiprintf_r+0x700>
   92530:	4b49      	ldr	r3, [pc, #292]	; (92658 <_svfiprintf_r+0x7be>)
   92532:	2d10      	cmp	r5, #16
   92534:	f8cc 3000 	str.w	r3, [ip]
   92538:	dd19      	ble.n	9256e <_svfiprintf_r+0x6d4>
   9253a:	2310      	movs	r3, #16
   9253c:	f8cc 3004 	str.w	r3, [ip, #4]
   92540:	9b11      	ldr	r3, [sp, #68]	; 0x44
   92542:	3310      	adds	r3, #16
   92544:	9311      	str	r3, [sp, #68]	; 0x44
   92546:	9b10      	ldr	r3, [sp, #64]	; 0x40
   92548:	3301      	adds	r3, #1
   9254a:	2b07      	cmp	r3, #7
   9254c:	9310      	str	r3, [sp, #64]	; 0x40
   9254e:	dc02      	bgt.n	92556 <_svfiprintf_r+0x6bc>
   92550:	f10c 0c08 	add.w	ip, ip, #8
   92554:	e009      	b.n	9256a <_svfiprintf_r+0x6d0>
   92556:	4658      	mov	r0, fp
   92558:	4641      	mov	r1, r8
   9255a:	aa0f      	add	r2, sp, #60	; 0x3c
   9255c:	f7ff fc24 	bl	91da8 <__ssprint_r>
   92560:	2800      	cmp	r0, #0
   92562:	f040 8082 	bne.w	9266a <_svfiprintf_r+0x7d0>
   92566:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   9256a:	3d10      	subs	r5, #16
   9256c:	e7e0      	b.n	92530 <_svfiprintf_r+0x696>
   9256e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   92570:	f8cc 5004 	str.w	r5, [ip, #4]
   92574:	441d      	add	r5, r3
   92576:	9b10      	ldr	r3, [sp, #64]	; 0x40
   92578:	9511      	str	r5, [sp, #68]	; 0x44
   9257a:	3301      	adds	r3, #1
   9257c:	2b07      	cmp	r3, #7
   9257e:	9310      	str	r3, [sp, #64]	; 0x40
   92580:	dc02      	bgt.n	92588 <_svfiprintf_r+0x6ee>
   92582:	f10c 0c08 	add.w	ip, ip, #8
   92586:	e008      	b.n	9259a <_svfiprintf_r+0x700>
   92588:	4658      	mov	r0, fp
   9258a:	4641      	mov	r1, r8
   9258c:	aa0f      	add	r2, sp, #60	; 0x3c
   9258e:	f7ff fc0b 	bl	91da8 <__ssprint_r>
   92592:	2800      	cmp	r0, #0
   92594:	d169      	bne.n	9266a <_svfiprintf_r+0x7d0>
   92596:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   9259a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   9259c:	e88c 0600 	stmia.w	ip, {r9, sl}
   925a0:	4453      	add	r3, sl
   925a2:	9311      	str	r3, [sp, #68]	; 0x44
   925a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   925a6:	3301      	adds	r3, #1
   925a8:	2b07      	cmp	r3, #7
   925aa:	9310      	str	r3, [sp, #64]	; 0x40
   925ac:	dc02      	bgt.n	925b4 <_svfiprintf_r+0x71a>
   925ae:	f10c 0308 	add.w	r3, ip, #8
   925b2:	e007      	b.n	925c4 <_svfiprintf_r+0x72a>
   925b4:	4658      	mov	r0, fp
   925b6:	4641      	mov	r1, r8
   925b8:	aa0f      	add	r2, sp, #60	; 0x3c
   925ba:	f7ff fbf5 	bl	91da8 <__ssprint_r>
   925be:	2800      	cmp	r0, #0
   925c0:	d153      	bne.n	9266a <_svfiprintf_r+0x7d0>
   925c2:	ab1c      	add	r3, sp, #112	; 0x70
   925c4:	077a      	lsls	r2, r7, #29
   925c6:	d40a      	bmi.n	925de <_svfiprintf_r+0x744>
   925c8:	9d05      	ldr	r5, [sp, #20]
   925ca:	9804      	ldr	r0, [sp, #16]
   925cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   925ce:	4284      	cmp	r4, r0
   925d0:	bfac      	ite	ge
   925d2:	192d      	addge	r5, r5, r4
   925d4:	182d      	addlt	r5, r5, r0
   925d6:	9505      	str	r5, [sp, #20]
   925d8:	2b00      	cmp	r3, #0
   925da:	d035      	beq.n	92648 <_svfiprintf_r+0x7ae>
   925dc:	e02e      	b.n	9263c <_svfiprintf_r+0x7a2>
   925de:	9904      	ldr	r1, [sp, #16]
   925e0:	1b0d      	subs	r5, r1, r4
   925e2:	2d00      	cmp	r5, #0
   925e4:	ddf0      	ble.n	925c8 <_svfiprintf_r+0x72e>
   925e6:	4a1b      	ldr	r2, [pc, #108]	; (92654 <_svfiprintf_r+0x7ba>)
   925e8:	2d10      	cmp	r5, #16
   925ea:	601a      	str	r2, [r3, #0]
   925ec:	dd15      	ble.n	9261a <_svfiprintf_r+0x780>
   925ee:	2210      	movs	r2, #16
   925f0:	605a      	str	r2, [r3, #4]
   925f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   925f4:	3210      	adds	r2, #16
   925f6:	9211      	str	r2, [sp, #68]	; 0x44
   925f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   925fa:	3201      	adds	r2, #1
   925fc:	2a07      	cmp	r2, #7
   925fe:	9210      	str	r2, [sp, #64]	; 0x40
   92600:	dc01      	bgt.n	92606 <_svfiprintf_r+0x76c>
   92602:	3308      	adds	r3, #8
   92604:	e007      	b.n	92616 <_svfiprintf_r+0x77c>
   92606:	4658      	mov	r0, fp
   92608:	4641      	mov	r1, r8
   9260a:	aa0f      	add	r2, sp, #60	; 0x3c
   9260c:	f7ff fbcc 	bl	91da8 <__ssprint_r>
   92610:	2800      	cmp	r0, #0
   92612:	d12a      	bne.n	9266a <_svfiprintf_r+0x7d0>
   92614:	ab1c      	add	r3, sp, #112	; 0x70
   92616:	3d10      	subs	r5, #16
   92618:	e7e5      	b.n	925e6 <_svfiprintf_r+0x74c>
   9261a:	605d      	str	r5, [r3, #4]
   9261c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   9261e:	441d      	add	r5, r3
   92620:	9b10      	ldr	r3, [sp, #64]	; 0x40
   92622:	9511      	str	r5, [sp, #68]	; 0x44
   92624:	3301      	adds	r3, #1
   92626:	2b07      	cmp	r3, #7
   92628:	9310      	str	r3, [sp, #64]	; 0x40
   9262a:	ddcd      	ble.n	925c8 <_svfiprintf_r+0x72e>
   9262c:	4658      	mov	r0, fp
   9262e:	4641      	mov	r1, r8
   92630:	aa0f      	add	r2, sp, #60	; 0x3c
   92632:	f7ff fbb9 	bl	91da8 <__ssprint_r>
   92636:	2800      	cmp	r0, #0
   92638:	d0c6      	beq.n	925c8 <_svfiprintf_r+0x72e>
   9263a:	e016      	b.n	9266a <_svfiprintf_r+0x7d0>
   9263c:	4658      	mov	r0, fp
   9263e:	4641      	mov	r1, r8
   92640:	aa0f      	add	r2, sp, #60	; 0x3c
   92642:	f7ff fbb1 	bl	91da8 <__ssprint_r>
   92646:	b980      	cbnz	r0, 9266a <_svfiprintf_r+0x7d0>
   92648:	2300      	movs	r3, #0
   9264a:	9310      	str	r3, [sp, #64]	; 0x40
   9264c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   92650:	e449      	b.n	91ee6 <_svfiprintf_r+0x4c>
   92652:	bf00      	nop
   92654:	000b1370 	.word	0x000b1370
   92658:	000b1380 	.word	0x000b1380
   9265c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   9265e:	b123      	cbz	r3, 9266a <_svfiprintf_r+0x7d0>
   92660:	4658      	mov	r0, fp
   92662:	4641      	mov	r1, r8
   92664:	aa0f      	add	r2, sp, #60	; 0x3c
   92666:	f7ff fb9f 	bl	91da8 <__ssprint_r>
   9266a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   9266e:	9805      	ldr	r0, [sp, #20]
   92670:	f013 0f40 	tst.w	r3, #64	; 0x40
   92674:	bf18      	it	ne
   92676:	f04f 30ff 	movne.w	r0, #4294967295
   9267a:	b02d      	add	sp, #180	; 0xb4
   9267c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00092680 <__swbuf_r>:
   92680:	b570      	push	{r4, r5, r6, lr}
   92682:	460d      	mov	r5, r1
   92684:	4614      	mov	r4, r2
   92686:	4606      	mov	r6, r0
   92688:	b118      	cbz	r0, 92692 <__swbuf_r+0x12>
   9268a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   9268c:	b90b      	cbnz	r3, 92692 <__swbuf_r+0x12>
   9268e:	f7fe f8f3 	bl	90878 <__sinit>
   92692:	69a3      	ldr	r3, [r4, #24]
   92694:	60a3      	str	r3, [r4, #8]
   92696:	89a3      	ldrh	r3, [r4, #12]
   92698:	0719      	lsls	r1, r3, #28
   9269a:	d50d      	bpl.n	926b8 <__swbuf_r+0x38>
   9269c:	6923      	ldr	r3, [r4, #16]
   9269e:	b15b      	cbz	r3, 926b8 <__swbuf_r+0x38>
   926a0:	89a3      	ldrh	r3, [r4, #12]
   926a2:	b2ed      	uxtb	r5, r5
   926a4:	049a      	lsls	r2, r3, #18
   926a6:	d410      	bmi.n	926ca <__swbuf_r+0x4a>
   926a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   926ac:	81a3      	strh	r3, [r4, #12]
   926ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   926b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   926b4:	6663      	str	r3, [r4, #100]	; 0x64
   926b6:	e008      	b.n	926ca <__swbuf_r+0x4a>
   926b8:	4630      	mov	r0, r6
   926ba:	4621      	mov	r1, r4
   926bc:	f7fd f916 	bl	8f8ec <__swsetup_r>
   926c0:	2800      	cmp	r0, #0
   926c2:	d0ed      	beq.n	926a0 <__swbuf_r+0x20>
   926c4:	f04f 30ff 	mov.w	r0, #4294967295
   926c8:	bd70      	pop	{r4, r5, r6, pc}
   926ca:	6923      	ldr	r3, [r4, #16]
   926cc:	6820      	ldr	r0, [r4, #0]
   926ce:	1ac0      	subs	r0, r0, r3
   926d0:	6963      	ldr	r3, [r4, #20]
   926d2:	4298      	cmp	r0, r3
   926d4:	db05      	blt.n	926e2 <__swbuf_r+0x62>
   926d6:	4630      	mov	r0, r6
   926d8:	4621      	mov	r1, r4
   926da:	f7fe f884 	bl	907e6 <_fflush_r>
   926de:	2800      	cmp	r0, #0
   926e0:	d1f0      	bne.n	926c4 <__swbuf_r+0x44>
   926e2:	68a3      	ldr	r3, [r4, #8]
   926e4:	3001      	adds	r0, #1
   926e6:	3b01      	subs	r3, #1
   926e8:	60a3      	str	r3, [r4, #8]
   926ea:	6823      	ldr	r3, [r4, #0]
   926ec:	1c5a      	adds	r2, r3, #1
   926ee:	6022      	str	r2, [r4, #0]
   926f0:	701d      	strb	r5, [r3, #0]
   926f2:	6963      	ldr	r3, [r4, #20]
   926f4:	4298      	cmp	r0, r3
   926f6:	d004      	beq.n	92702 <__swbuf_r+0x82>
   926f8:	89a3      	ldrh	r3, [r4, #12]
   926fa:	07db      	lsls	r3, r3, #31
   926fc:	d507      	bpl.n	9270e <__swbuf_r+0x8e>
   926fe:	2d0a      	cmp	r5, #10
   92700:	d105      	bne.n	9270e <__swbuf_r+0x8e>
   92702:	4630      	mov	r0, r6
   92704:	4621      	mov	r1, r4
   92706:	f7fe f86e 	bl	907e6 <_fflush_r>
   9270a:	2800      	cmp	r0, #0
   9270c:	d1da      	bne.n	926c4 <__swbuf_r+0x44>
   9270e:	4628      	mov	r0, r5
   92710:	bd70      	pop	{r4, r5, r6, pc}

00092712 <__swbuf>:
   92712:	460a      	mov	r2, r1
   92714:	4902      	ldr	r1, [pc, #8]	; (92720 <__swbuf+0xe>)
   92716:	4603      	mov	r3, r0
   92718:	6808      	ldr	r0, [r1, #0]
   9271a:	4619      	mov	r1, r3
   9271c:	f7ff bfb0 	b.w	92680 <__swbuf_r>
   92720:	200702c8 	.word	0x200702c8

00092724 <_wcrtomb_r>:
   92724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   92728:	461d      	mov	r5, r3
   9272a:	4b10      	ldr	r3, [pc, #64]	; (9276c <_wcrtomb_r+0x48>)
   9272c:	b086      	sub	sp, #24
   9272e:	4604      	mov	r4, r0
   92730:	4690      	mov	r8, r2
   92732:	460e      	mov	r6, r1
   92734:	681f      	ldr	r7, [r3, #0]
   92736:	b939      	cbnz	r1, 92748 <_wcrtomb_r+0x24>
   92738:	f7fe fc80 	bl	9103c <__locale_charset>
   9273c:	9500      	str	r5, [sp, #0]
   9273e:	4603      	mov	r3, r0
   92740:	a903      	add	r1, sp, #12
   92742:	4620      	mov	r0, r4
   92744:	4632      	mov	r2, r6
   92746:	e006      	b.n	92756 <_wcrtomb_r+0x32>
   92748:	f7fe fc78 	bl	9103c <__locale_charset>
   9274c:	9500      	str	r5, [sp, #0]
   9274e:	4603      	mov	r3, r0
   92750:	4631      	mov	r1, r6
   92752:	4620      	mov	r0, r4
   92754:	4642      	mov	r2, r8
   92756:	47b8      	blx	r7
   92758:	1c43      	adds	r3, r0, #1
   9275a:	d103      	bne.n	92764 <_wcrtomb_r+0x40>
   9275c:	2300      	movs	r3, #0
   9275e:	602b      	str	r3, [r5, #0]
   92760:	238a      	movs	r3, #138	; 0x8a
   92762:	6023      	str	r3, [r4, #0]
   92764:	b006      	add	sp, #24
   92766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9276a:	bf00      	nop
   9276c:	20070b84 	.word	0x20070b84

00092770 <wcrtomb>:
   92770:	b530      	push	{r4, r5, lr}
   92772:	4613      	mov	r3, r2
   92774:	4a04      	ldr	r2, [pc, #16]	; (92788 <wcrtomb+0x18>)
   92776:	4605      	mov	r5, r0
   92778:	460c      	mov	r4, r1
   9277a:	6810      	ldr	r0, [r2, #0]
   9277c:	4629      	mov	r1, r5
   9277e:	4622      	mov	r2, r4
   92780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   92784:	f7ff bfce 	b.w	92724 <_wcrtomb_r>
   92788:	200702c8 	.word	0x200702c8

0009278c <__ascii_wctomb>:
   9278c:	b149      	cbz	r1, 927a2 <__ascii_wctomb+0x16>
   9278e:	2aff      	cmp	r2, #255	; 0xff
   92790:	d904      	bls.n	9279c <__ascii_wctomb+0x10>
   92792:	238a      	movs	r3, #138	; 0x8a
   92794:	6003      	str	r3, [r0, #0]
   92796:	f04f 30ff 	mov.w	r0, #4294967295
   9279a:	4770      	bx	lr
   9279c:	700a      	strb	r2, [r1, #0]
   9279e:	2001      	movs	r0, #1
   927a0:	4770      	bx	lr
   927a2:	4608      	mov	r0, r1
   927a4:	4770      	bx	lr

000927a6 <_wctomb_r>:
   927a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   927aa:	4698      	mov	r8, r3
   927ac:	4b08      	ldr	r3, [pc, #32]	; (927d0 <_wctomb_r+0x2a>)
   927ae:	4605      	mov	r5, r0
   927b0:	681c      	ldr	r4, [r3, #0]
   927b2:	460f      	mov	r7, r1
   927b4:	4616      	mov	r6, r2
   927b6:	f7fe fc41 	bl	9103c <__locale_charset>
   927ba:	f8cd 8000 	str.w	r8, [sp]
   927be:	4603      	mov	r3, r0
   927c0:	4639      	mov	r1, r7
   927c2:	4628      	mov	r0, r5
   927c4:	4632      	mov	r2, r6
   927c6:	47a0      	blx	r4
   927c8:	b002      	add	sp, #8
   927ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   927ce:	bf00      	nop
   927d0:	20070b84 	.word	0x20070b84

000927d4 <_write_r>:
   927d4:	b538      	push	{r3, r4, r5, lr}
   927d6:	4c07      	ldr	r4, [pc, #28]	; (927f4 <_write_r+0x20>)
   927d8:	4605      	mov	r5, r0
   927da:	2000      	movs	r0, #0
   927dc:	6020      	str	r0, [r4, #0]
   927de:	4608      	mov	r0, r1
   927e0:	4611      	mov	r1, r2
   927e2:	461a      	mov	r2, r3
   927e4:	f7f0 faba 	bl	82d5c <_write>
   927e8:	1c43      	adds	r3, r0, #1
   927ea:	d102      	bne.n	927f2 <_write_r+0x1e>
   927ec:	6823      	ldr	r3, [r4, #0]
   927ee:	b103      	cbz	r3, 927f2 <_write_r+0x1e>
   927f0:	602b      	str	r3, [r5, #0]
   927f2:	bd38      	pop	{r3, r4, r5, pc}
   927f4:	200768f8 	.word	0x200768f8

000927f8 <_calloc_r>:
   927f8:	b510      	push	{r4, lr}
   927fa:	4351      	muls	r1, r2
   927fc:	f7fa f84c 	bl	8c898 <_malloc_r>
   92800:	4604      	mov	r4, r0
   92802:	b320      	cbz	r0, 9284e <_calloc_r+0x56>
   92804:	f850 2c04 	ldr.w	r2, [r0, #-4]
   92808:	f022 0203 	bic.w	r2, r2, #3
   9280c:	3a04      	subs	r2, #4
   9280e:	2a24      	cmp	r2, #36	; 0x24
   92810:	d81a      	bhi.n	92848 <_calloc_r+0x50>
   92812:	2a13      	cmp	r2, #19
   92814:	d912      	bls.n	9283c <_calloc_r+0x44>
   92816:	2100      	movs	r1, #0
   92818:	2a1b      	cmp	r2, #27
   9281a:	6001      	str	r1, [r0, #0]
   9281c:	6041      	str	r1, [r0, #4]
   9281e:	d802      	bhi.n	92826 <_calloc_r+0x2e>
   92820:	f100 0308 	add.w	r3, r0, #8
   92824:	e00b      	b.n	9283e <_calloc_r+0x46>
   92826:	2a24      	cmp	r2, #36	; 0x24
   92828:	6081      	str	r1, [r0, #8]
   9282a:	60c1      	str	r1, [r0, #12]
   9282c:	bf11      	iteee	ne
   9282e:	f100 0310 	addne.w	r3, r0, #16
   92832:	6101      	streq	r1, [r0, #16]
   92834:	f100 0318 	addeq.w	r3, r0, #24
   92838:	6141      	streq	r1, [r0, #20]
   9283a:	e000      	b.n	9283e <_calloc_r+0x46>
   9283c:	4603      	mov	r3, r0
   9283e:	2200      	movs	r2, #0
   92840:	601a      	str	r2, [r3, #0]
   92842:	605a      	str	r2, [r3, #4]
   92844:	609a      	str	r2, [r3, #8]
   92846:	e002      	b.n	9284e <_calloc_r+0x56>
   92848:	2100      	movs	r1, #0
   9284a:	f7fa fa36 	bl	8ccba <memset>
   9284e:	4620      	mov	r0, r4
   92850:	bd10      	pop	{r4, pc}
	...

00092854 <_close_r>:
   92854:	b538      	push	{r3, r4, r5, lr}
   92856:	4c06      	ldr	r4, [pc, #24]	; (92870 <_close_r+0x1c>)
   92858:	2300      	movs	r3, #0
   9285a:	4605      	mov	r5, r0
   9285c:	4608      	mov	r0, r1
   9285e:	6023      	str	r3, [r4, #0]
   92860:	f7f1 fb1e 	bl	83ea0 <_close>
   92864:	1c43      	adds	r3, r0, #1
   92866:	d102      	bne.n	9286e <_close_r+0x1a>
   92868:	6823      	ldr	r3, [r4, #0]
   9286a:	b103      	cbz	r3, 9286e <_close_r+0x1a>
   9286c:	602b      	str	r3, [r5, #0]
   9286e:	bd38      	pop	{r3, r4, r5, pc}
   92870:	200768f8 	.word	0x200768f8

00092874 <_fclose_r>:
   92874:	b570      	push	{r4, r5, r6, lr}
   92876:	4605      	mov	r5, r0
   92878:	460c      	mov	r4, r1
   9287a:	b909      	cbnz	r1, 92880 <_fclose_r+0xc>
   9287c:	2000      	movs	r0, #0
   9287e:	bd70      	pop	{r4, r5, r6, pc}
   92880:	b118      	cbz	r0, 9288a <_fclose_r+0x16>
   92882:	6b83      	ldr	r3, [r0, #56]	; 0x38
   92884:	b90b      	cbnz	r3, 9288a <_fclose_r+0x16>
   92886:	f7fd fff7 	bl	90878 <__sinit>
   9288a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   9288e:	2b00      	cmp	r3, #0
   92890:	d0f4      	beq.n	9287c <_fclose_r+0x8>
   92892:	4628      	mov	r0, r5
   92894:	4621      	mov	r1, r4
   92896:	f7fd ffa6 	bl	907e6 <_fflush_r>
   9289a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   9289c:	4606      	mov	r6, r0
   9289e:	b133      	cbz	r3, 928ae <_fclose_r+0x3a>
   928a0:	4628      	mov	r0, r5
   928a2:	69e1      	ldr	r1, [r4, #28]
   928a4:	4798      	blx	r3
   928a6:	2800      	cmp	r0, #0
   928a8:	bfb8      	it	lt
   928aa:	f04f 36ff 	movlt.w	r6, #4294967295
   928ae:	89a3      	ldrh	r3, [r4, #12]
   928b0:	061b      	lsls	r3, r3, #24
   928b2:	d503      	bpl.n	928bc <_fclose_r+0x48>
   928b4:	4628      	mov	r0, r5
   928b6:	6921      	ldr	r1, [r4, #16]
   928b8:	f7fe f962 	bl	90b80 <_free_r>
   928bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   928be:	b141      	cbz	r1, 928d2 <_fclose_r+0x5e>
   928c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   928c4:	4299      	cmp	r1, r3
   928c6:	d002      	beq.n	928ce <_fclose_r+0x5a>
   928c8:	4628      	mov	r0, r5
   928ca:	f7fe f959 	bl	90b80 <_free_r>
   928ce:	2300      	movs	r3, #0
   928d0:	6323      	str	r3, [r4, #48]	; 0x30
   928d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   928d4:	b121      	cbz	r1, 928e0 <_fclose_r+0x6c>
   928d6:	4628      	mov	r0, r5
   928d8:	f7fe f952 	bl	90b80 <_free_r>
   928dc:	2300      	movs	r3, #0
   928de:	6463      	str	r3, [r4, #68]	; 0x44
   928e0:	f7fe f87c 	bl	909dc <__sfp_lock_acquire>
   928e4:	2300      	movs	r3, #0
   928e6:	81a3      	strh	r3, [r4, #12]
   928e8:	f7fe f879 	bl	909de <__sfp_lock_release>
   928ec:	4630      	mov	r0, r6
   928ee:	bd70      	pop	{r4, r5, r6, pc}

000928f0 <fclose>:
   928f0:	4b02      	ldr	r3, [pc, #8]	; (928fc <fclose+0xc>)
   928f2:	4601      	mov	r1, r0
   928f4:	6818      	ldr	r0, [r3, #0]
   928f6:	f7ff bfbd 	b.w	92874 <_fclose_r>
   928fa:	bf00      	nop
   928fc:	200702c8 	.word	0x200702c8

00092900 <_fstat_r>:
   92900:	b538      	push	{r3, r4, r5, lr}
   92902:	4c07      	ldr	r4, [pc, #28]	; (92920 <_fstat_r+0x20>)
   92904:	2300      	movs	r3, #0
   92906:	4605      	mov	r5, r0
   92908:	4608      	mov	r0, r1
   9290a:	4611      	mov	r1, r2
   9290c:	6023      	str	r3, [r4, #0]
   9290e:	f7f1 facb 	bl	83ea8 <_fstat>
   92912:	1c43      	adds	r3, r0, #1
   92914:	d102      	bne.n	9291c <_fstat_r+0x1c>
   92916:	6823      	ldr	r3, [r4, #0]
   92918:	b103      	cbz	r3, 9291c <_fstat_r+0x1c>
   9291a:	602b      	str	r3, [r5, #0]
   9291c:	bd38      	pop	{r3, r4, r5, pc}
   9291e:	bf00      	nop
   92920:	200768f8 	.word	0x200768f8

00092924 <_isatty_r>:
   92924:	b538      	push	{r3, r4, r5, lr}
   92926:	4c06      	ldr	r4, [pc, #24]	; (92940 <_isatty_r+0x1c>)
   92928:	2300      	movs	r3, #0
   9292a:	4605      	mov	r5, r0
   9292c:	4608      	mov	r0, r1
   9292e:	6023      	str	r3, [r4, #0]
   92930:	f7f1 fac0 	bl	83eb4 <_isatty>
   92934:	1c43      	adds	r3, r0, #1
   92936:	d102      	bne.n	9293e <_isatty_r+0x1a>
   92938:	6823      	ldr	r3, [r4, #0]
   9293a:	b103      	cbz	r3, 9293e <_isatty_r+0x1a>
   9293c:	602b      	str	r3, [r5, #0]
   9293e:	bd38      	pop	{r3, r4, r5, pc}
   92940:	200768f8 	.word	0x200768f8

00092944 <_lseek_r>:
   92944:	b538      	push	{r3, r4, r5, lr}
   92946:	4c07      	ldr	r4, [pc, #28]	; (92964 <_lseek_r+0x20>)
   92948:	4605      	mov	r5, r0
   9294a:	2000      	movs	r0, #0
   9294c:	6020      	str	r0, [r4, #0]
   9294e:	4608      	mov	r0, r1
   92950:	4611      	mov	r1, r2
   92952:	461a      	mov	r2, r3
   92954:	f7f1 fab0 	bl	83eb8 <_lseek>
   92958:	1c43      	adds	r3, r0, #1
   9295a:	d102      	bne.n	92962 <_lseek_r+0x1e>
   9295c:	6823      	ldr	r3, [r4, #0]
   9295e:	b103      	cbz	r3, 92962 <_lseek_r+0x1e>
   92960:	602b      	str	r3, [r5, #0]
   92962:	bd38      	pop	{r3, r4, r5, pc}
   92964:	200768f8 	.word	0x200768f8

00092968 <_read_r>:
   92968:	b538      	push	{r3, r4, r5, lr}
   9296a:	4c07      	ldr	r4, [pc, #28]	; (92988 <_read_r+0x20>)
   9296c:	4605      	mov	r5, r0
   9296e:	2000      	movs	r0, #0
   92970:	6020      	str	r0, [r4, #0]
   92972:	4608      	mov	r0, r1
   92974:	4611      	mov	r1, r2
   92976:	461a      	mov	r2, r3
   92978:	f7f0 f9d0 	bl	82d1c <_read>
   9297c:	1c43      	adds	r3, r0, #1
   9297e:	d102      	bne.n	92986 <_read_r+0x1e>
   92980:	6823      	ldr	r3, [r4, #0]
   92982:	b103      	cbz	r3, 92986 <_read_r+0x1e>
   92984:	602b      	str	r3, [r5, #0]
   92986:	bd38      	pop	{r3, r4, r5, pc}
   92988:	200768f8 	.word	0x200768f8

0009298c <__aeabi_drsub>:
   9298c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   92990:	e002      	b.n	92998 <__adddf3>
   92992:	bf00      	nop

00092994 <__aeabi_dsub>:
   92994:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00092998 <__adddf3>:
   92998:	b530      	push	{r4, r5, lr}
   9299a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   9299e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   929a2:	ea94 0f05 	teq	r4, r5
   929a6:	bf08      	it	eq
   929a8:	ea90 0f02 	teqeq	r0, r2
   929ac:	bf1f      	itttt	ne
   929ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   929b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   929b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   929ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   929be:	f000 80e2 	beq.w	92b86 <__adddf3+0x1ee>
   929c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   929c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   929ca:	bfb8      	it	lt
   929cc:	426d      	neglt	r5, r5
   929ce:	dd0c      	ble.n	929ea <__adddf3+0x52>
   929d0:	442c      	add	r4, r5
   929d2:	ea80 0202 	eor.w	r2, r0, r2
   929d6:	ea81 0303 	eor.w	r3, r1, r3
   929da:	ea82 0000 	eor.w	r0, r2, r0
   929de:	ea83 0101 	eor.w	r1, r3, r1
   929e2:	ea80 0202 	eor.w	r2, r0, r2
   929e6:	ea81 0303 	eor.w	r3, r1, r3
   929ea:	2d36      	cmp	r5, #54	; 0x36
   929ec:	bf88      	it	hi
   929ee:	bd30      	pophi	{r4, r5, pc}
   929f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   929f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   929f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   929fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   92a00:	d002      	beq.n	92a08 <__adddf3+0x70>
   92a02:	4240      	negs	r0, r0
   92a04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   92a08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   92a0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   92a10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   92a14:	d002      	beq.n	92a1c <__adddf3+0x84>
   92a16:	4252      	negs	r2, r2
   92a18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   92a1c:	ea94 0f05 	teq	r4, r5
   92a20:	f000 80a7 	beq.w	92b72 <__adddf3+0x1da>
   92a24:	f1a4 0401 	sub.w	r4, r4, #1
   92a28:	f1d5 0e20 	rsbs	lr, r5, #32
   92a2c:	db0d      	blt.n	92a4a <__adddf3+0xb2>
   92a2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   92a32:	fa22 f205 	lsr.w	r2, r2, r5
   92a36:	1880      	adds	r0, r0, r2
   92a38:	f141 0100 	adc.w	r1, r1, #0
   92a3c:	fa03 f20e 	lsl.w	r2, r3, lr
   92a40:	1880      	adds	r0, r0, r2
   92a42:	fa43 f305 	asr.w	r3, r3, r5
   92a46:	4159      	adcs	r1, r3
   92a48:	e00e      	b.n	92a68 <__adddf3+0xd0>
   92a4a:	f1a5 0520 	sub.w	r5, r5, #32
   92a4e:	f10e 0e20 	add.w	lr, lr, #32
   92a52:	2a01      	cmp	r2, #1
   92a54:	fa03 fc0e 	lsl.w	ip, r3, lr
   92a58:	bf28      	it	cs
   92a5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   92a5e:	fa43 f305 	asr.w	r3, r3, r5
   92a62:	18c0      	adds	r0, r0, r3
   92a64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   92a68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   92a6c:	d507      	bpl.n	92a7e <__adddf3+0xe6>
   92a6e:	f04f 0e00 	mov.w	lr, #0
   92a72:	f1dc 0c00 	rsbs	ip, ip, #0
   92a76:	eb7e 0000 	sbcs.w	r0, lr, r0
   92a7a:	eb6e 0101 	sbc.w	r1, lr, r1
   92a7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   92a82:	d31b      	bcc.n	92abc <__adddf3+0x124>
   92a84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   92a88:	d30c      	bcc.n	92aa4 <__adddf3+0x10c>
   92a8a:	0849      	lsrs	r1, r1, #1
   92a8c:	ea5f 0030 	movs.w	r0, r0, rrx
   92a90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   92a94:	f104 0401 	add.w	r4, r4, #1
   92a98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   92a9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   92aa0:	f080 809a 	bcs.w	92bd8 <__adddf3+0x240>
   92aa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   92aa8:	bf08      	it	eq
   92aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   92aae:	f150 0000 	adcs.w	r0, r0, #0
   92ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   92ab6:	ea41 0105 	orr.w	r1, r1, r5
   92aba:	bd30      	pop	{r4, r5, pc}
   92abc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   92ac0:	4140      	adcs	r0, r0
   92ac2:	eb41 0101 	adc.w	r1, r1, r1
   92ac6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   92aca:	f1a4 0401 	sub.w	r4, r4, #1
   92ace:	d1e9      	bne.n	92aa4 <__adddf3+0x10c>
   92ad0:	f091 0f00 	teq	r1, #0
   92ad4:	bf04      	itt	eq
   92ad6:	4601      	moveq	r1, r0
   92ad8:	2000      	moveq	r0, #0
   92ada:	fab1 f381 	clz	r3, r1
   92ade:	bf08      	it	eq
   92ae0:	3320      	addeq	r3, #32
   92ae2:	f1a3 030b 	sub.w	r3, r3, #11
   92ae6:	f1b3 0220 	subs.w	r2, r3, #32
   92aea:	da0c      	bge.n	92b06 <__adddf3+0x16e>
   92aec:	320c      	adds	r2, #12
   92aee:	dd08      	ble.n	92b02 <__adddf3+0x16a>
   92af0:	f102 0c14 	add.w	ip, r2, #20
   92af4:	f1c2 020c 	rsb	r2, r2, #12
   92af8:	fa01 f00c 	lsl.w	r0, r1, ip
   92afc:	fa21 f102 	lsr.w	r1, r1, r2
   92b00:	e00c      	b.n	92b1c <__adddf3+0x184>
   92b02:	f102 0214 	add.w	r2, r2, #20
   92b06:	bfd8      	it	le
   92b08:	f1c2 0c20 	rsble	ip, r2, #32
   92b0c:	fa01 f102 	lsl.w	r1, r1, r2
   92b10:	fa20 fc0c 	lsr.w	ip, r0, ip
   92b14:	bfdc      	itt	le
   92b16:	ea41 010c 	orrle.w	r1, r1, ip
   92b1a:	4090      	lslle	r0, r2
   92b1c:	1ae4      	subs	r4, r4, r3
   92b1e:	bfa2      	ittt	ge
   92b20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   92b24:	4329      	orrge	r1, r5
   92b26:	bd30      	popge	{r4, r5, pc}
   92b28:	ea6f 0404 	mvn.w	r4, r4
   92b2c:	3c1f      	subs	r4, #31
   92b2e:	da1c      	bge.n	92b6a <__adddf3+0x1d2>
   92b30:	340c      	adds	r4, #12
   92b32:	dc0e      	bgt.n	92b52 <__adddf3+0x1ba>
   92b34:	f104 0414 	add.w	r4, r4, #20
   92b38:	f1c4 0220 	rsb	r2, r4, #32
   92b3c:	fa20 f004 	lsr.w	r0, r0, r4
   92b40:	fa01 f302 	lsl.w	r3, r1, r2
   92b44:	ea40 0003 	orr.w	r0, r0, r3
   92b48:	fa21 f304 	lsr.w	r3, r1, r4
   92b4c:	ea45 0103 	orr.w	r1, r5, r3
   92b50:	bd30      	pop	{r4, r5, pc}
   92b52:	f1c4 040c 	rsb	r4, r4, #12
   92b56:	f1c4 0220 	rsb	r2, r4, #32
   92b5a:	fa20 f002 	lsr.w	r0, r0, r2
   92b5e:	fa01 f304 	lsl.w	r3, r1, r4
   92b62:	ea40 0003 	orr.w	r0, r0, r3
   92b66:	4629      	mov	r1, r5
   92b68:	bd30      	pop	{r4, r5, pc}
   92b6a:	fa21 f004 	lsr.w	r0, r1, r4
   92b6e:	4629      	mov	r1, r5
   92b70:	bd30      	pop	{r4, r5, pc}
   92b72:	f094 0f00 	teq	r4, #0
   92b76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   92b7a:	bf06      	itte	eq
   92b7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   92b80:	3401      	addeq	r4, #1
   92b82:	3d01      	subne	r5, #1
   92b84:	e74e      	b.n	92a24 <__adddf3+0x8c>
   92b86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   92b8a:	bf18      	it	ne
   92b8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   92b90:	d029      	beq.n	92be6 <__adddf3+0x24e>
   92b92:	ea94 0f05 	teq	r4, r5
   92b96:	bf08      	it	eq
   92b98:	ea90 0f02 	teqeq	r0, r2
   92b9c:	d005      	beq.n	92baa <__adddf3+0x212>
   92b9e:	ea54 0c00 	orrs.w	ip, r4, r0
   92ba2:	bf04      	itt	eq
   92ba4:	4619      	moveq	r1, r3
   92ba6:	4610      	moveq	r0, r2
   92ba8:	bd30      	pop	{r4, r5, pc}
   92baa:	ea91 0f03 	teq	r1, r3
   92bae:	bf1e      	ittt	ne
   92bb0:	2100      	movne	r1, #0
   92bb2:	2000      	movne	r0, #0
   92bb4:	bd30      	popne	{r4, r5, pc}
   92bb6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   92bba:	d105      	bne.n	92bc8 <__adddf3+0x230>
   92bbc:	0040      	lsls	r0, r0, #1
   92bbe:	4149      	adcs	r1, r1
   92bc0:	bf28      	it	cs
   92bc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   92bc6:	bd30      	pop	{r4, r5, pc}
   92bc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   92bcc:	bf3c      	itt	cc
   92bce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   92bd2:	bd30      	popcc	{r4, r5, pc}
   92bd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   92bd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   92bdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   92be0:	f04f 0000 	mov.w	r0, #0
   92be4:	bd30      	pop	{r4, r5, pc}
   92be6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   92bea:	bf1a      	itte	ne
   92bec:	4619      	movne	r1, r3
   92bee:	4610      	movne	r0, r2
   92bf0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   92bf4:	bf1c      	itt	ne
   92bf6:	460b      	movne	r3, r1
   92bf8:	4602      	movne	r2, r0
   92bfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   92bfe:	bf06      	itte	eq
   92c00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   92c04:	ea91 0f03 	teqeq	r1, r3
   92c08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   92c0c:	bd30      	pop	{r4, r5, pc}
   92c0e:	bf00      	nop

00092c10 <__aeabi_ui2d>:
   92c10:	f090 0f00 	teq	r0, #0
   92c14:	bf04      	itt	eq
   92c16:	2100      	moveq	r1, #0
   92c18:	4770      	bxeq	lr
   92c1a:	b530      	push	{r4, r5, lr}
   92c1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   92c20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   92c24:	f04f 0500 	mov.w	r5, #0
   92c28:	f04f 0100 	mov.w	r1, #0
   92c2c:	e750      	b.n	92ad0 <__adddf3+0x138>
   92c2e:	bf00      	nop

00092c30 <__aeabi_i2d>:
   92c30:	f090 0f00 	teq	r0, #0
   92c34:	bf04      	itt	eq
   92c36:	2100      	moveq	r1, #0
   92c38:	4770      	bxeq	lr
   92c3a:	b530      	push	{r4, r5, lr}
   92c3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   92c40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   92c44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   92c48:	bf48      	it	mi
   92c4a:	4240      	negmi	r0, r0
   92c4c:	f04f 0100 	mov.w	r1, #0
   92c50:	e73e      	b.n	92ad0 <__adddf3+0x138>
   92c52:	bf00      	nop

00092c54 <__aeabi_f2d>:
   92c54:	0042      	lsls	r2, r0, #1
   92c56:	ea4f 01e2 	mov.w	r1, r2, asr #3
   92c5a:	ea4f 0131 	mov.w	r1, r1, rrx
   92c5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   92c62:	bf1f      	itttt	ne
   92c64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   92c68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   92c6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   92c70:	4770      	bxne	lr
   92c72:	f092 0f00 	teq	r2, #0
   92c76:	bf14      	ite	ne
   92c78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   92c7c:	4770      	bxeq	lr
   92c7e:	b530      	push	{r4, r5, lr}
   92c80:	f44f 7460 	mov.w	r4, #896	; 0x380
   92c84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   92c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   92c8c:	e720      	b.n	92ad0 <__adddf3+0x138>
   92c8e:	bf00      	nop

00092c90 <__aeabi_ul2d>:
   92c90:	ea50 0201 	orrs.w	r2, r0, r1
   92c94:	bf08      	it	eq
   92c96:	4770      	bxeq	lr
   92c98:	b530      	push	{r4, r5, lr}
   92c9a:	f04f 0500 	mov.w	r5, #0
   92c9e:	e00a      	b.n	92cb6 <__aeabi_l2d+0x16>

00092ca0 <__aeabi_l2d>:
   92ca0:	ea50 0201 	orrs.w	r2, r0, r1
   92ca4:	bf08      	it	eq
   92ca6:	4770      	bxeq	lr
   92ca8:	b530      	push	{r4, r5, lr}
   92caa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   92cae:	d502      	bpl.n	92cb6 <__aeabi_l2d+0x16>
   92cb0:	4240      	negs	r0, r0
   92cb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   92cb6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   92cba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   92cbe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   92cc2:	f43f aedc 	beq.w	92a7e <__adddf3+0xe6>
   92cc6:	f04f 0203 	mov.w	r2, #3
   92cca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   92cce:	bf18      	it	ne
   92cd0:	3203      	addne	r2, #3
   92cd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   92cd6:	bf18      	it	ne
   92cd8:	3203      	addne	r2, #3
   92cda:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   92cde:	f1c2 0320 	rsb	r3, r2, #32
   92ce2:	fa00 fc03 	lsl.w	ip, r0, r3
   92ce6:	fa20 f002 	lsr.w	r0, r0, r2
   92cea:	fa01 fe03 	lsl.w	lr, r1, r3
   92cee:	ea40 000e 	orr.w	r0, r0, lr
   92cf2:	fa21 f102 	lsr.w	r1, r1, r2
   92cf6:	4414      	add	r4, r2
   92cf8:	e6c1      	b.n	92a7e <__adddf3+0xe6>
   92cfa:	bf00      	nop

00092cfc <__aeabi_dmul>:
   92cfc:	b570      	push	{r4, r5, r6, lr}
   92cfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   92d02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   92d06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   92d0a:	bf1d      	ittte	ne
   92d0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   92d10:	ea94 0f0c 	teqne	r4, ip
   92d14:	ea95 0f0c 	teqne	r5, ip
   92d18:	f000 f8de 	bleq	92ed8 <__aeabi_dmul+0x1dc>
   92d1c:	442c      	add	r4, r5
   92d1e:	ea81 0603 	eor.w	r6, r1, r3
   92d22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   92d26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   92d2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   92d2e:	bf18      	it	ne
   92d30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   92d34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   92d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   92d3c:	d038      	beq.n	92db0 <__aeabi_dmul+0xb4>
   92d3e:	fba0 ce02 	umull	ip, lr, r0, r2
   92d42:	f04f 0500 	mov.w	r5, #0
   92d46:	fbe1 e502 	umlal	lr, r5, r1, r2
   92d4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   92d4e:	fbe0 e503 	umlal	lr, r5, r0, r3
   92d52:	f04f 0600 	mov.w	r6, #0
   92d56:	fbe1 5603 	umlal	r5, r6, r1, r3
   92d5a:	f09c 0f00 	teq	ip, #0
   92d5e:	bf18      	it	ne
   92d60:	f04e 0e01 	orrne.w	lr, lr, #1
   92d64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   92d68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   92d6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   92d70:	d204      	bcs.n	92d7c <__aeabi_dmul+0x80>
   92d72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   92d76:	416d      	adcs	r5, r5
   92d78:	eb46 0606 	adc.w	r6, r6, r6
   92d7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   92d80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   92d84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   92d88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   92d8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   92d90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   92d94:	bf88      	it	hi
   92d96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   92d9a:	d81e      	bhi.n	92dda <__aeabi_dmul+0xde>
   92d9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   92da0:	bf08      	it	eq
   92da2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   92da6:	f150 0000 	adcs.w	r0, r0, #0
   92daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   92dae:	bd70      	pop	{r4, r5, r6, pc}
   92db0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   92db4:	ea46 0101 	orr.w	r1, r6, r1
   92db8:	ea40 0002 	orr.w	r0, r0, r2
   92dbc:	ea81 0103 	eor.w	r1, r1, r3
   92dc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   92dc4:	bfc2      	ittt	gt
   92dc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   92dca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   92dce:	bd70      	popgt	{r4, r5, r6, pc}
   92dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   92dd4:	f04f 0e00 	mov.w	lr, #0
   92dd8:	3c01      	subs	r4, #1
   92dda:	f300 80ab 	bgt.w	92f34 <__aeabi_dmul+0x238>
   92dde:	f114 0f36 	cmn.w	r4, #54	; 0x36
   92de2:	bfde      	ittt	le
   92de4:	2000      	movle	r0, #0
   92de6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   92dea:	bd70      	pople	{r4, r5, r6, pc}
   92dec:	f1c4 0400 	rsb	r4, r4, #0
   92df0:	3c20      	subs	r4, #32
   92df2:	da35      	bge.n	92e60 <__aeabi_dmul+0x164>
   92df4:	340c      	adds	r4, #12
   92df6:	dc1b      	bgt.n	92e30 <__aeabi_dmul+0x134>
   92df8:	f104 0414 	add.w	r4, r4, #20
   92dfc:	f1c4 0520 	rsb	r5, r4, #32
   92e00:	fa00 f305 	lsl.w	r3, r0, r5
   92e04:	fa20 f004 	lsr.w	r0, r0, r4
   92e08:	fa01 f205 	lsl.w	r2, r1, r5
   92e0c:	ea40 0002 	orr.w	r0, r0, r2
   92e10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   92e14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   92e18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   92e1c:	fa21 f604 	lsr.w	r6, r1, r4
   92e20:	eb42 0106 	adc.w	r1, r2, r6
   92e24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   92e28:	bf08      	it	eq
   92e2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   92e2e:	bd70      	pop	{r4, r5, r6, pc}
   92e30:	f1c4 040c 	rsb	r4, r4, #12
   92e34:	f1c4 0520 	rsb	r5, r4, #32
   92e38:	fa00 f304 	lsl.w	r3, r0, r4
   92e3c:	fa20 f005 	lsr.w	r0, r0, r5
   92e40:	fa01 f204 	lsl.w	r2, r1, r4
   92e44:	ea40 0002 	orr.w	r0, r0, r2
   92e48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   92e4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   92e50:	f141 0100 	adc.w	r1, r1, #0
   92e54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   92e58:	bf08      	it	eq
   92e5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   92e5e:	bd70      	pop	{r4, r5, r6, pc}
   92e60:	f1c4 0520 	rsb	r5, r4, #32
   92e64:	fa00 f205 	lsl.w	r2, r0, r5
   92e68:	ea4e 0e02 	orr.w	lr, lr, r2
   92e6c:	fa20 f304 	lsr.w	r3, r0, r4
   92e70:	fa01 f205 	lsl.w	r2, r1, r5
   92e74:	ea43 0302 	orr.w	r3, r3, r2
   92e78:	fa21 f004 	lsr.w	r0, r1, r4
   92e7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   92e80:	fa21 f204 	lsr.w	r2, r1, r4
   92e84:	ea20 0002 	bic.w	r0, r0, r2
   92e88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   92e8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   92e90:	bf08      	it	eq
   92e92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   92e96:	bd70      	pop	{r4, r5, r6, pc}
   92e98:	f094 0f00 	teq	r4, #0
   92e9c:	d10f      	bne.n	92ebe <__aeabi_dmul+0x1c2>
   92e9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   92ea2:	0040      	lsls	r0, r0, #1
   92ea4:	eb41 0101 	adc.w	r1, r1, r1
   92ea8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   92eac:	bf08      	it	eq
   92eae:	3c01      	subeq	r4, #1
   92eb0:	d0f7      	beq.n	92ea2 <__aeabi_dmul+0x1a6>
   92eb2:	ea41 0106 	orr.w	r1, r1, r6
   92eb6:	f095 0f00 	teq	r5, #0
   92eba:	bf18      	it	ne
   92ebc:	4770      	bxne	lr
   92ebe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   92ec2:	0052      	lsls	r2, r2, #1
   92ec4:	eb43 0303 	adc.w	r3, r3, r3
   92ec8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   92ecc:	bf08      	it	eq
   92ece:	3d01      	subeq	r5, #1
   92ed0:	d0f7      	beq.n	92ec2 <__aeabi_dmul+0x1c6>
   92ed2:	ea43 0306 	orr.w	r3, r3, r6
   92ed6:	4770      	bx	lr
   92ed8:	ea94 0f0c 	teq	r4, ip
   92edc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   92ee0:	bf18      	it	ne
   92ee2:	ea95 0f0c 	teqne	r5, ip
   92ee6:	d00c      	beq.n	92f02 <__aeabi_dmul+0x206>
   92ee8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   92eec:	bf18      	it	ne
   92eee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   92ef2:	d1d1      	bne.n	92e98 <__aeabi_dmul+0x19c>
   92ef4:	ea81 0103 	eor.w	r1, r1, r3
   92ef8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   92efc:	f04f 0000 	mov.w	r0, #0
   92f00:	bd70      	pop	{r4, r5, r6, pc}
   92f02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   92f06:	bf06      	itte	eq
   92f08:	4610      	moveq	r0, r2
   92f0a:	4619      	moveq	r1, r3
   92f0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   92f10:	d019      	beq.n	92f46 <__aeabi_dmul+0x24a>
   92f12:	ea94 0f0c 	teq	r4, ip
   92f16:	d102      	bne.n	92f1e <__aeabi_dmul+0x222>
   92f18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   92f1c:	d113      	bne.n	92f46 <__aeabi_dmul+0x24a>
   92f1e:	ea95 0f0c 	teq	r5, ip
   92f22:	d105      	bne.n	92f30 <__aeabi_dmul+0x234>
   92f24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   92f28:	bf1c      	itt	ne
   92f2a:	4610      	movne	r0, r2
   92f2c:	4619      	movne	r1, r3
   92f2e:	d10a      	bne.n	92f46 <__aeabi_dmul+0x24a>
   92f30:	ea81 0103 	eor.w	r1, r1, r3
   92f34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   92f38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   92f3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   92f40:	f04f 0000 	mov.w	r0, #0
   92f44:	bd70      	pop	{r4, r5, r6, pc}
   92f46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   92f4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   92f4e:	bd70      	pop	{r4, r5, r6, pc}

00092f50 <__aeabi_ddiv>:
   92f50:	b570      	push	{r4, r5, r6, lr}
   92f52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   92f56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   92f5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   92f5e:	bf1d      	ittte	ne
   92f60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   92f64:	ea94 0f0c 	teqne	r4, ip
   92f68:	ea95 0f0c 	teqne	r5, ip
   92f6c:	f000 f8a7 	bleq	930be <__aeabi_ddiv+0x16e>
   92f70:	eba4 0405 	sub.w	r4, r4, r5
   92f74:	ea81 0e03 	eor.w	lr, r1, r3
   92f78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   92f7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   92f80:	f000 8088 	beq.w	93094 <__aeabi_ddiv+0x144>
   92f84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   92f88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   92f8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   92f90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   92f94:	ea4f 2202 	mov.w	r2, r2, lsl #8
   92f98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   92f9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   92fa0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   92fa4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   92fa8:	429d      	cmp	r5, r3
   92faa:	bf08      	it	eq
   92fac:	4296      	cmpeq	r6, r2
   92fae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   92fb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   92fb6:	d202      	bcs.n	92fbe <__aeabi_ddiv+0x6e>
   92fb8:	085b      	lsrs	r3, r3, #1
   92fba:	ea4f 0232 	mov.w	r2, r2, rrx
   92fbe:	1ab6      	subs	r6, r6, r2
   92fc0:	eb65 0503 	sbc.w	r5, r5, r3
   92fc4:	085b      	lsrs	r3, r3, #1
   92fc6:	ea4f 0232 	mov.w	r2, r2, rrx
   92fca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   92fce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   92fd2:	ebb6 0e02 	subs.w	lr, r6, r2
   92fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   92fda:	bf22      	ittt	cs
   92fdc:	1ab6      	subcs	r6, r6, r2
   92fde:	4675      	movcs	r5, lr
   92fe0:	ea40 000c 	orrcs.w	r0, r0, ip
   92fe4:	085b      	lsrs	r3, r3, #1
   92fe6:	ea4f 0232 	mov.w	r2, r2, rrx
   92fea:	ebb6 0e02 	subs.w	lr, r6, r2
   92fee:	eb75 0e03 	sbcs.w	lr, r5, r3
   92ff2:	bf22      	ittt	cs
   92ff4:	1ab6      	subcs	r6, r6, r2
   92ff6:	4675      	movcs	r5, lr
   92ff8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   92ffc:	085b      	lsrs	r3, r3, #1
   92ffe:	ea4f 0232 	mov.w	r2, r2, rrx
   93002:	ebb6 0e02 	subs.w	lr, r6, r2
   93006:	eb75 0e03 	sbcs.w	lr, r5, r3
   9300a:	bf22      	ittt	cs
   9300c:	1ab6      	subcs	r6, r6, r2
   9300e:	4675      	movcs	r5, lr
   93010:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   93014:	085b      	lsrs	r3, r3, #1
   93016:	ea4f 0232 	mov.w	r2, r2, rrx
   9301a:	ebb6 0e02 	subs.w	lr, r6, r2
   9301e:	eb75 0e03 	sbcs.w	lr, r5, r3
   93022:	bf22      	ittt	cs
   93024:	1ab6      	subcs	r6, r6, r2
   93026:	4675      	movcs	r5, lr
   93028:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   9302c:	ea55 0e06 	orrs.w	lr, r5, r6
   93030:	d018      	beq.n	93064 <__aeabi_ddiv+0x114>
   93032:	ea4f 1505 	mov.w	r5, r5, lsl #4
   93036:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   9303a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   9303e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   93042:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   93046:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   9304a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   9304e:	d1c0      	bne.n	92fd2 <__aeabi_ddiv+0x82>
   93050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   93054:	d10b      	bne.n	9306e <__aeabi_ddiv+0x11e>
   93056:	ea41 0100 	orr.w	r1, r1, r0
   9305a:	f04f 0000 	mov.w	r0, #0
   9305e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   93062:	e7b6      	b.n	92fd2 <__aeabi_ddiv+0x82>
   93064:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   93068:	bf04      	itt	eq
   9306a:	4301      	orreq	r1, r0
   9306c:	2000      	moveq	r0, #0
   9306e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   93072:	bf88      	it	hi
   93074:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   93078:	f63f aeaf 	bhi.w	92dda <__aeabi_dmul+0xde>
   9307c:	ebb5 0c03 	subs.w	ip, r5, r3
   93080:	bf04      	itt	eq
   93082:	ebb6 0c02 	subseq.w	ip, r6, r2
   93086:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   9308a:	f150 0000 	adcs.w	r0, r0, #0
   9308e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   93092:	bd70      	pop	{r4, r5, r6, pc}
   93094:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   93098:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   9309c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   930a0:	bfc2      	ittt	gt
   930a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   930a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   930aa:	bd70      	popgt	{r4, r5, r6, pc}
   930ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   930b0:	f04f 0e00 	mov.w	lr, #0
   930b4:	3c01      	subs	r4, #1
   930b6:	e690      	b.n	92dda <__aeabi_dmul+0xde>
   930b8:	ea45 0e06 	orr.w	lr, r5, r6
   930bc:	e68d      	b.n	92dda <__aeabi_dmul+0xde>
   930be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   930c2:	ea94 0f0c 	teq	r4, ip
   930c6:	bf08      	it	eq
   930c8:	ea95 0f0c 	teqeq	r5, ip
   930cc:	f43f af3b 	beq.w	92f46 <__aeabi_dmul+0x24a>
   930d0:	ea94 0f0c 	teq	r4, ip
   930d4:	d10a      	bne.n	930ec <__aeabi_ddiv+0x19c>
   930d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   930da:	f47f af34 	bne.w	92f46 <__aeabi_dmul+0x24a>
   930de:	ea95 0f0c 	teq	r5, ip
   930e2:	f47f af25 	bne.w	92f30 <__aeabi_dmul+0x234>
   930e6:	4610      	mov	r0, r2
   930e8:	4619      	mov	r1, r3
   930ea:	e72c      	b.n	92f46 <__aeabi_dmul+0x24a>
   930ec:	ea95 0f0c 	teq	r5, ip
   930f0:	d106      	bne.n	93100 <__aeabi_ddiv+0x1b0>
   930f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   930f6:	f43f aefd 	beq.w	92ef4 <__aeabi_dmul+0x1f8>
   930fa:	4610      	mov	r0, r2
   930fc:	4619      	mov	r1, r3
   930fe:	e722      	b.n	92f46 <__aeabi_dmul+0x24a>
   93100:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   93104:	bf18      	it	ne
   93106:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   9310a:	f47f aec5 	bne.w	92e98 <__aeabi_dmul+0x19c>
   9310e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   93112:	f47f af0d 	bne.w	92f30 <__aeabi_dmul+0x234>
   93116:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   9311a:	f47f aeeb 	bne.w	92ef4 <__aeabi_dmul+0x1f8>
   9311e:	e712      	b.n	92f46 <__aeabi_dmul+0x24a>

00093120 <__gedf2>:
   93120:	f04f 3cff 	mov.w	ip, #4294967295
   93124:	e006      	b.n	93134 <__cmpdf2+0x4>
   93126:	bf00      	nop

00093128 <__ledf2>:
   93128:	f04f 0c01 	mov.w	ip, #1
   9312c:	e002      	b.n	93134 <__cmpdf2+0x4>
   9312e:	bf00      	nop

00093130 <__cmpdf2>:
   93130:	f04f 0c01 	mov.w	ip, #1
   93134:	f84d cd04 	str.w	ip, [sp, #-4]!
   93138:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   9313c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   93140:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   93144:	bf18      	it	ne
   93146:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   9314a:	d01b      	beq.n	93184 <__cmpdf2+0x54>
   9314c:	b001      	add	sp, #4
   9314e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   93152:	bf0c      	ite	eq
   93154:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   93158:	ea91 0f03 	teqne	r1, r3
   9315c:	bf02      	ittt	eq
   9315e:	ea90 0f02 	teqeq	r0, r2
   93162:	2000      	moveq	r0, #0
   93164:	4770      	bxeq	lr
   93166:	f110 0f00 	cmn.w	r0, #0
   9316a:	ea91 0f03 	teq	r1, r3
   9316e:	bf58      	it	pl
   93170:	4299      	cmppl	r1, r3
   93172:	bf08      	it	eq
   93174:	4290      	cmpeq	r0, r2
   93176:	bf2c      	ite	cs
   93178:	17d8      	asrcs	r0, r3, #31
   9317a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   9317e:	f040 0001 	orr.w	r0, r0, #1
   93182:	4770      	bx	lr
   93184:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   93188:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   9318c:	d102      	bne.n	93194 <__cmpdf2+0x64>
   9318e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   93192:	d107      	bne.n	931a4 <__cmpdf2+0x74>
   93194:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   93198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   9319c:	d1d6      	bne.n	9314c <__cmpdf2+0x1c>
   9319e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   931a2:	d0d3      	beq.n	9314c <__cmpdf2+0x1c>
   931a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   931a8:	4770      	bx	lr
   931aa:	bf00      	nop

000931ac <__aeabi_cdrcmple>:
   931ac:	4684      	mov	ip, r0
   931ae:	4610      	mov	r0, r2
   931b0:	4662      	mov	r2, ip
   931b2:	468c      	mov	ip, r1
   931b4:	4619      	mov	r1, r3
   931b6:	4663      	mov	r3, ip
   931b8:	e000      	b.n	931bc <__aeabi_cdcmpeq>
   931ba:	bf00      	nop

000931bc <__aeabi_cdcmpeq>:
   931bc:	b501      	push	{r0, lr}
   931be:	f7ff ffb7 	bl	93130 <__cmpdf2>
   931c2:	2800      	cmp	r0, #0
   931c4:	bf48      	it	mi
   931c6:	f110 0f00 	cmnmi.w	r0, #0
   931ca:	bd01      	pop	{r0, pc}

000931cc <__aeabi_dcmpeq>:
   931cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   931d0:	f7ff fff4 	bl	931bc <__aeabi_cdcmpeq>
   931d4:	bf0c      	ite	eq
   931d6:	2001      	moveq	r0, #1
   931d8:	2000      	movne	r0, #0
   931da:	f85d fb08 	ldr.w	pc, [sp], #8
   931de:	bf00      	nop

000931e0 <__aeabi_dcmplt>:
   931e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   931e4:	f7ff ffea 	bl	931bc <__aeabi_cdcmpeq>
   931e8:	bf34      	ite	cc
   931ea:	2001      	movcc	r0, #1
   931ec:	2000      	movcs	r0, #0
   931ee:	f85d fb08 	ldr.w	pc, [sp], #8
   931f2:	bf00      	nop

000931f4 <__aeabi_dcmple>:
   931f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   931f8:	f7ff ffe0 	bl	931bc <__aeabi_cdcmpeq>
   931fc:	bf94      	ite	ls
   931fe:	2001      	movls	r0, #1
   93200:	2000      	movhi	r0, #0
   93202:	f85d fb08 	ldr.w	pc, [sp], #8
   93206:	bf00      	nop

00093208 <__aeabi_dcmpge>:
   93208:	f84d ed08 	str.w	lr, [sp, #-8]!
   9320c:	f7ff ffce 	bl	931ac <__aeabi_cdrcmple>
   93210:	bf94      	ite	ls
   93212:	2001      	movls	r0, #1
   93214:	2000      	movhi	r0, #0
   93216:	f85d fb08 	ldr.w	pc, [sp], #8
   9321a:	bf00      	nop

0009321c <__aeabi_dcmpgt>:
   9321c:	f84d ed08 	str.w	lr, [sp, #-8]!
   93220:	f7ff ffc4 	bl	931ac <__aeabi_cdrcmple>
   93224:	bf34      	ite	cc
   93226:	2001      	movcc	r0, #1
   93228:	2000      	movcs	r0, #0
   9322a:	f85d fb08 	ldr.w	pc, [sp], #8
   9322e:	bf00      	nop

00093230 <__aeabi_d2iz>:
   93230:	ea4f 0241 	mov.w	r2, r1, lsl #1
   93234:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   93238:	d215      	bcs.n	93266 <__aeabi_d2iz+0x36>
   9323a:	d511      	bpl.n	93260 <__aeabi_d2iz+0x30>
   9323c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   93240:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   93244:	d912      	bls.n	9326c <__aeabi_d2iz+0x3c>
   93246:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   9324a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9324e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   93252:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   93256:	fa23 f002 	lsr.w	r0, r3, r2
   9325a:	bf18      	it	ne
   9325c:	4240      	negne	r0, r0
   9325e:	4770      	bx	lr
   93260:	f04f 0000 	mov.w	r0, #0
   93264:	4770      	bx	lr
   93266:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   9326a:	d105      	bne.n	93278 <__aeabi_d2iz+0x48>
   9326c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   93270:	bf08      	it	eq
   93272:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   93276:	4770      	bx	lr
   93278:	f04f 0000 	mov.w	r0, #0
   9327c:	4770      	bx	lr
   9327e:	bf00      	nop

00093280 <__aeabi_uldivmod>:
   93280:	b94b      	cbnz	r3, 93296 <__aeabi_uldivmod+0x16>
   93282:	b942      	cbnz	r2, 93296 <__aeabi_uldivmod+0x16>
   93284:	2900      	cmp	r1, #0
   93286:	bf08      	it	eq
   93288:	2800      	cmpeq	r0, #0
   9328a:	d002      	beq.n	93292 <__aeabi_uldivmod+0x12>
   9328c:	f04f 31ff 	mov.w	r1, #4294967295
   93290:	4608      	mov	r0, r1
   93292:	f000 b83b 	b.w	9330c <__aeabi_idiv0>
   93296:	b082      	sub	sp, #8
   93298:	46ec      	mov	ip, sp
   9329a:	e92d 5000 	stmdb	sp!, {ip, lr}
   9329e:	f000 f81d 	bl	932dc <__gnu_uldivmod_helper>
   932a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   932a6:	b002      	add	sp, #8
   932a8:	bc0c      	pop	{r2, r3}
   932aa:	4770      	bx	lr

000932ac <__gnu_ldivmod_helper>:
   932ac:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   932b0:	9e08      	ldr	r6, [sp, #32]
   932b2:	4614      	mov	r4, r2
   932b4:	461d      	mov	r5, r3
   932b6:	4680      	mov	r8, r0
   932b8:	4689      	mov	r9, r1
   932ba:	f000 f829 	bl	93310 <__divdi3>
   932be:	fb04 f301 	mul.w	r3, r4, r1
   932c2:	fba4 ab00 	umull	sl, fp, r4, r0
   932c6:	fb00 3205 	mla	r2, r0, r5, r3
   932ca:	4493      	add	fp, r2
   932cc:	ebb8 080a 	subs.w	r8, r8, sl
   932d0:	eb69 090b 	sbc.w	r9, r9, fp
   932d4:	e9c6 8900 	strd	r8, r9, [r6]
   932d8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000932dc <__gnu_uldivmod_helper>:
   932dc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   932e0:	9e08      	ldr	r6, [sp, #32]
   932e2:	4614      	mov	r4, r2
   932e4:	461d      	mov	r5, r3
   932e6:	4680      	mov	r8, r0
   932e8:	4689      	mov	r9, r1
   932ea:	f000 f961 	bl	935b0 <__udivdi3>
   932ee:	fb00 f505 	mul.w	r5, r0, r5
   932f2:	fba0 ab04 	umull	sl, fp, r0, r4
   932f6:	fb04 5401 	mla	r4, r4, r1, r5
   932fa:	44a3      	add	fp, r4
   932fc:	ebb8 080a 	subs.w	r8, r8, sl
   93300:	eb69 090b 	sbc.w	r9, r9, fp
   93304:	e9c6 8900 	strd	r8, r9, [r6]
   93308:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0009330c <__aeabi_idiv0>:
   9330c:	4770      	bx	lr
   9330e:	bf00      	nop

00093310 <__divdi3>:
   93310:	2900      	cmp	r1, #0
   93312:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   93316:	f2c0 80a1 	blt.w	9345c <__divdi3+0x14c>
   9331a:	2400      	movs	r4, #0
   9331c:	2b00      	cmp	r3, #0
   9331e:	f2c0 8098 	blt.w	93452 <__divdi3+0x142>
   93322:	4615      	mov	r5, r2
   93324:	4606      	mov	r6, r0
   93326:	460f      	mov	r7, r1
   93328:	2b00      	cmp	r3, #0
   9332a:	d13f      	bne.n	933ac <__divdi3+0x9c>
   9332c:	428a      	cmp	r2, r1
   9332e:	d958      	bls.n	933e2 <__divdi3+0xd2>
   93330:	fab2 f382 	clz	r3, r2
   93334:	b14b      	cbz	r3, 9334a <__divdi3+0x3a>
   93336:	f1c3 0220 	rsb	r2, r3, #32
   9333a:	fa01 f703 	lsl.w	r7, r1, r3
   9333e:	fa20 f202 	lsr.w	r2, r0, r2
   93342:	409d      	lsls	r5, r3
   93344:	fa00 f603 	lsl.w	r6, r0, r3
   93348:	4317      	orrs	r7, r2
   9334a:	0c29      	lsrs	r1, r5, #16
   9334c:	fbb7 f2f1 	udiv	r2, r7, r1
   93350:	fb01 7712 	mls	r7, r1, r2, r7
   93354:	b2a8      	uxth	r0, r5
   93356:	fb00 f302 	mul.w	r3, r0, r2
   9335a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   9335e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   93362:	42bb      	cmp	r3, r7
   93364:	d909      	bls.n	9337a <__divdi3+0x6a>
   93366:	197f      	adds	r7, r7, r5
   93368:	f102 3cff 	add.w	ip, r2, #4294967295
   9336c:	f080 8105 	bcs.w	9357a <__divdi3+0x26a>
   93370:	42bb      	cmp	r3, r7
   93372:	f240 8102 	bls.w	9357a <__divdi3+0x26a>
   93376:	3a02      	subs	r2, #2
   93378:	442f      	add	r7, r5
   9337a:	1aff      	subs	r7, r7, r3
   9337c:	fbb7 f3f1 	udiv	r3, r7, r1
   93380:	fb01 7113 	mls	r1, r1, r3, r7
   93384:	fb00 f003 	mul.w	r0, r0, r3
   93388:	b2b6      	uxth	r6, r6
   9338a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   9338e:	4288      	cmp	r0, r1
   93390:	d908      	bls.n	933a4 <__divdi3+0x94>
   93392:	1949      	adds	r1, r1, r5
   93394:	f103 37ff 	add.w	r7, r3, #4294967295
   93398:	f080 80f1 	bcs.w	9357e <__divdi3+0x26e>
   9339c:	4288      	cmp	r0, r1
   9339e:	f240 80ee 	bls.w	9357e <__divdi3+0x26e>
   933a2:	3b02      	subs	r3, #2
   933a4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   933a8:	2300      	movs	r3, #0
   933aa:	e003      	b.n	933b4 <__divdi3+0xa4>
   933ac:	428b      	cmp	r3, r1
   933ae:	d90a      	bls.n	933c6 <__divdi3+0xb6>
   933b0:	2300      	movs	r3, #0
   933b2:	461a      	mov	r2, r3
   933b4:	4610      	mov	r0, r2
   933b6:	4619      	mov	r1, r3
   933b8:	b114      	cbz	r4, 933c0 <__divdi3+0xb0>
   933ba:	4240      	negs	r0, r0
   933bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   933c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   933c4:	4770      	bx	lr
   933c6:	fab3 f883 	clz	r8, r3
   933ca:	f1b8 0f00 	cmp.w	r8, #0
   933ce:	f040 8088 	bne.w	934e2 <__divdi3+0x1d2>
   933d2:	428b      	cmp	r3, r1
   933d4:	d302      	bcc.n	933dc <__divdi3+0xcc>
   933d6:	4282      	cmp	r2, r0
   933d8:	f200 80e2 	bhi.w	935a0 <__divdi3+0x290>
   933dc:	2300      	movs	r3, #0
   933de:	2201      	movs	r2, #1
   933e0:	e7e8      	b.n	933b4 <__divdi3+0xa4>
   933e2:	b912      	cbnz	r2, 933ea <__divdi3+0xda>
   933e4:	2301      	movs	r3, #1
   933e6:	fbb3 f5f2 	udiv	r5, r3, r2
   933ea:	fab5 f285 	clz	r2, r5
   933ee:	2a00      	cmp	r2, #0
   933f0:	d13a      	bne.n	93468 <__divdi3+0x158>
   933f2:	1b7f      	subs	r7, r7, r5
   933f4:	0c28      	lsrs	r0, r5, #16
   933f6:	fa1f fc85 	uxth.w	ip, r5
   933fa:	2301      	movs	r3, #1
   933fc:	fbb7 f1f0 	udiv	r1, r7, r0
   93400:	fb00 7711 	mls	r7, r0, r1, r7
   93404:	fb0c f201 	mul.w	r2, ip, r1
   93408:	ea4f 4816 	mov.w	r8, r6, lsr #16
   9340c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   93410:	42ba      	cmp	r2, r7
   93412:	d907      	bls.n	93424 <__divdi3+0x114>
   93414:	197f      	adds	r7, r7, r5
   93416:	f101 38ff 	add.w	r8, r1, #4294967295
   9341a:	d202      	bcs.n	93422 <__divdi3+0x112>
   9341c:	42ba      	cmp	r2, r7
   9341e:	f200 80c4 	bhi.w	935aa <__divdi3+0x29a>
   93422:	4641      	mov	r1, r8
   93424:	1abf      	subs	r7, r7, r2
   93426:	fbb7 f2f0 	udiv	r2, r7, r0
   9342a:	fb00 7012 	mls	r0, r0, r2, r7
   9342e:	fb0c fc02 	mul.w	ip, ip, r2
   93432:	b2b6      	uxth	r6, r6
   93434:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   93438:	4584      	cmp	ip, r0
   9343a:	d907      	bls.n	9344c <__divdi3+0x13c>
   9343c:	1940      	adds	r0, r0, r5
   9343e:	f102 37ff 	add.w	r7, r2, #4294967295
   93442:	d202      	bcs.n	9344a <__divdi3+0x13a>
   93444:	4584      	cmp	ip, r0
   93446:	f200 80ae 	bhi.w	935a6 <__divdi3+0x296>
   9344a:	463a      	mov	r2, r7
   9344c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   93450:	e7b0      	b.n	933b4 <__divdi3+0xa4>
   93452:	43e4      	mvns	r4, r4
   93454:	4252      	negs	r2, r2
   93456:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   9345a:	e762      	b.n	93322 <__divdi3+0x12>
   9345c:	4240      	negs	r0, r0
   9345e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   93462:	f04f 34ff 	mov.w	r4, #4294967295
   93466:	e759      	b.n	9331c <__divdi3+0xc>
   93468:	4095      	lsls	r5, r2
   9346a:	f1c2 0920 	rsb	r9, r2, #32
   9346e:	fa27 f109 	lsr.w	r1, r7, r9
   93472:	fa26 f909 	lsr.w	r9, r6, r9
   93476:	4097      	lsls	r7, r2
   93478:	0c28      	lsrs	r0, r5, #16
   9347a:	fbb1 f8f0 	udiv	r8, r1, r0
   9347e:	fb00 1118 	mls	r1, r0, r8, r1
   93482:	fa1f fc85 	uxth.w	ip, r5
   93486:	fb0c f308 	mul.w	r3, ip, r8
   9348a:	ea49 0907 	orr.w	r9, r9, r7
   9348e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   93492:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   93496:	428b      	cmp	r3, r1
   93498:	fa06 f602 	lsl.w	r6, r6, r2
   9349c:	d908      	bls.n	934b0 <__divdi3+0x1a0>
   9349e:	1949      	adds	r1, r1, r5
   934a0:	f108 32ff 	add.w	r2, r8, #4294967295
   934a4:	d27a      	bcs.n	9359c <__divdi3+0x28c>
   934a6:	428b      	cmp	r3, r1
   934a8:	d978      	bls.n	9359c <__divdi3+0x28c>
   934aa:	f1a8 0802 	sub.w	r8, r8, #2
   934ae:	4429      	add	r1, r5
   934b0:	1ac9      	subs	r1, r1, r3
   934b2:	fbb1 f3f0 	udiv	r3, r1, r0
   934b6:	fb00 1713 	mls	r7, r0, r3, r1
   934ba:	fb0c f203 	mul.w	r2, ip, r3
   934be:	fa1f f989 	uxth.w	r9, r9
   934c2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   934c6:	42ba      	cmp	r2, r7
   934c8:	d907      	bls.n	934da <__divdi3+0x1ca>
   934ca:	197f      	adds	r7, r7, r5
   934cc:	f103 31ff 	add.w	r1, r3, #4294967295
   934d0:	d260      	bcs.n	93594 <__divdi3+0x284>
   934d2:	42ba      	cmp	r2, r7
   934d4:	d95e      	bls.n	93594 <__divdi3+0x284>
   934d6:	3b02      	subs	r3, #2
   934d8:	442f      	add	r7, r5
   934da:	1abf      	subs	r7, r7, r2
   934dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   934e0:	e78c      	b.n	933fc <__divdi3+0xec>
   934e2:	f1c8 0220 	rsb	r2, r8, #32
   934e6:	fa25 f102 	lsr.w	r1, r5, r2
   934ea:	fa03 fc08 	lsl.w	ip, r3, r8
   934ee:	fa27 f302 	lsr.w	r3, r7, r2
   934f2:	fa20 f202 	lsr.w	r2, r0, r2
   934f6:	fa07 f708 	lsl.w	r7, r7, r8
   934fa:	ea41 0c0c 	orr.w	ip, r1, ip
   934fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
   93502:	fbb3 f1f9 	udiv	r1, r3, r9
   93506:	fb09 3311 	mls	r3, r9, r1, r3
   9350a:	fa1f fa8c 	uxth.w	sl, ip
   9350e:	fb0a fb01 	mul.w	fp, sl, r1
   93512:	4317      	orrs	r7, r2
   93514:	0c3a      	lsrs	r2, r7, #16
   93516:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   9351a:	459b      	cmp	fp, r3
   9351c:	fa05 f008 	lsl.w	r0, r5, r8
   93520:	d908      	bls.n	93534 <__divdi3+0x224>
   93522:	eb13 030c 	adds.w	r3, r3, ip
   93526:	f101 32ff 	add.w	r2, r1, #4294967295
   9352a:	d235      	bcs.n	93598 <__divdi3+0x288>
   9352c:	459b      	cmp	fp, r3
   9352e:	d933      	bls.n	93598 <__divdi3+0x288>
   93530:	3902      	subs	r1, #2
   93532:	4463      	add	r3, ip
   93534:	ebcb 0303 	rsb	r3, fp, r3
   93538:	fbb3 f2f9 	udiv	r2, r3, r9
   9353c:	fb09 3312 	mls	r3, r9, r2, r3
   93540:	fb0a fa02 	mul.w	sl, sl, r2
   93544:	b2bf      	uxth	r7, r7
   93546:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   9354a:	45ba      	cmp	sl, r7
   9354c:	d908      	bls.n	93560 <__divdi3+0x250>
   9354e:	eb17 070c 	adds.w	r7, r7, ip
   93552:	f102 33ff 	add.w	r3, r2, #4294967295
   93556:	d21b      	bcs.n	93590 <__divdi3+0x280>
   93558:	45ba      	cmp	sl, r7
   9355a:	d919      	bls.n	93590 <__divdi3+0x280>
   9355c:	3a02      	subs	r2, #2
   9355e:	4467      	add	r7, ip
   93560:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   93564:	fba5 0100 	umull	r0, r1, r5, r0
   93568:	ebca 0707 	rsb	r7, sl, r7
   9356c:	428f      	cmp	r7, r1
   9356e:	f04f 0300 	mov.w	r3, #0
   93572:	d30a      	bcc.n	9358a <__divdi3+0x27a>
   93574:	d005      	beq.n	93582 <__divdi3+0x272>
   93576:	462a      	mov	r2, r5
   93578:	e71c      	b.n	933b4 <__divdi3+0xa4>
   9357a:	4662      	mov	r2, ip
   9357c:	e6fd      	b.n	9337a <__divdi3+0x6a>
   9357e:	463b      	mov	r3, r7
   93580:	e710      	b.n	933a4 <__divdi3+0x94>
   93582:	fa06 f608 	lsl.w	r6, r6, r8
   93586:	4286      	cmp	r6, r0
   93588:	d2f5      	bcs.n	93576 <__divdi3+0x266>
   9358a:	1e6a      	subs	r2, r5, #1
   9358c:	2300      	movs	r3, #0
   9358e:	e711      	b.n	933b4 <__divdi3+0xa4>
   93590:	461a      	mov	r2, r3
   93592:	e7e5      	b.n	93560 <__divdi3+0x250>
   93594:	460b      	mov	r3, r1
   93596:	e7a0      	b.n	934da <__divdi3+0x1ca>
   93598:	4611      	mov	r1, r2
   9359a:	e7cb      	b.n	93534 <__divdi3+0x224>
   9359c:	4690      	mov	r8, r2
   9359e:	e787      	b.n	934b0 <__divdi3+0x1a0>
   935a0:	4643      	mov	r3, r8
   935a2:	4642      	mov	r2, r8
   935a4:	e706      	b.n	933b4 <__divdi3+0xa4>
   935a6:	3a02      	subs	r2, #2
   935a8:	e750      	b.n	9344c <__divdi3+0x13c>
   935aa:	3902      	subs	r1, #2
   935ac:	442f      	add	r7, r5
   935ae:	e739      	b.n	93424 <__divdi3+0x114>

000935b0 <__udivdi3>:
   935b0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   935b4:	4614      	mov	r4, r2
   935b6:	4605      	mov	r5, r0
   935b8:	460e      	mov	r6, r1
   935ba:	2b00      	cmp	r3, #0
   935bc:	d143      	bne.n	93646 <__udivdi3+0x96>
   935be:	428a      	cmp	r2, r1
   935c0:	d953      	bls.n	9366a <__udivdi3+0xba>
   935c2:	fab2 f782 	clz	r7, r2
   935c6:	b157      	cbz	r7, 935de <__udivdi3+0x2e>
   935c8:	f1c7 0620 	rsb	r6, r7, #32
   935cc:	fa20 f606 	lsr.w	r6, r0, r6
   935d0:	fa01 f307 	lsl.w	r3, r1, r7
   935d4:	fa02 f407 	lsl.w	r4, r2, r7
   935d8:	fa00 f507 	lsl.w	r5, r0, r7
   935dc:	431e      	orrs	r6, r3
   935de:	0c21      	lsrs	r1, r4, #16
   935e0:	fbb6 f2f1 	udiv	r2, r6, r1
   935e4:	fb01 6612 	mls	r6, r1, r2, r6
   935e8:	b2a0      	uxth	r0, r4
   935ea:	fb00 f302 	mul.w	r3, r0, r2
   935ee:	0c2f      	lsrs	r7, r5, #16
   935f0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   935f4:	42b3      	cmp	r3, r6
   935f6:	d909      	bls.n	9360c <__udivdi3+0x5c>
   935f8:	1936      	adds	r6, r6, r4
   935fa:	f102 37ff 	add.w	r7, r2, #4294967295
   935fe:	f080 80fd 	bcs.w	937fc <__udivdi3+0x24c>
   93602:	42b3      	cmp	r3, r6
   93604:	f240 80fa 	bls.w	937fc <__udivdi3+0x24c>
   93608:	3a02      	subs	r2, #2
   9360a:	4426      	add	r6, r4
   9360c:	1af6      	subs	r6, r6, r3
   9360e:	fbb6 f3f1 	udiv	r3, r6, r1
   93612:	fb01 6113 	mls	r1, r1, r3, r6
   93616:	fb00 f003 	mul.w	r0, r0, r3
   9361a:	b2ad      	uxth	r5, r5
   9361c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   93620:	4288      	cmp	r0, r1
   93622:	d908      	bls.n	93636 <__udivdi3+0x86>
   93624:	1909      	adds	r1, r1, r4
   93626:	f103 36ff 	add.w	r6, r3, #4294967295
   9362a:	f080 80e9 	bcs.w	93800 <__udivdi3+0x250>
   9362e:	4288      	cmp	r0, r1
   93630:	f240 80e6 	bls.w	93800 <__udivdi3+0x250>
   93634:	3b02      	subs	r3, #2
   93636:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   9363a:	2300      	movs	r3, #0
   9363c:	4610      	mov	r0, r2
   9363e:	4619      	mov	r1, r3
   93640:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   93644:	4770      	bx	lr
   93646:	428b      	cmp	r3, r1
   93648:	d84c      	bhi.n	936e4 <__udivdi3+0x134>
   9364a:	fab3 f683 	clz	r6, r3
   9364e:	2e00      	cmp	r6, #0
   93650:	d14f      	bne.n	936f2 <__udivdi3+0x142>
   93652:	428b      	cmp	r3, r1
   93654:	d302      	bcc.n	9365c <__udivdi3+0xac>
   93656:	4282      	cmp	r2, r0
   93658:	f200 80dd 	bhi.w	93816 <__udivdi3+0x266>
   9365c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   93660:	2300      	movs	r3, #0
   93662:	2201      	movs	r2, #1
   93664:	4610      	mov	r0, r2
   93666:	4619      	mov	r1, r3
   93668:	4770      	bx	lr
   9366a:	b912      	cbnz	r2, 93672 <__udivdi3+0xc2>
   9366c:	2401      	movs	r4, #1
   9366e:	fbb4 f4f2 	udiv	r4, r4, r2
   93672:	fab4 f284 	clz	r2, r4
   93676:	2a00      	cmp	r2, #0
   93678:	f040 8082 	bne.w	93780 <__udivdi3+0x1d0>
   9367c:	1b09      	subs	r1, r1, r4
   9367e:	0c26      	lsrs	r6, r4, #16
   93680:	b2a7      	uxth	r7, r4
   93682:	2301      	movs	r3, #1
   93684:	fbb1 f0f6 	udiv	r0, r1, r6
   93688:	fb06 1110 	mls	r1, r6, r0, r1
   9368c:	fb07 f200 	mul.w	r2, r7, r0
   93690:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   93694:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   93698:	428a      	cmp	r2, r1
   9369a:	d907      	bls.n	936ac <__udivdi3+0xfc>
   9369c:	1909      	adds	r1, r1, r4
   9369e:	f100 3cff 	add.w	ip, r0, #4294967295
   936a2:	d202      	bcs.n	936aa <__udivdi3+0xfa>
   936a4:	428a      	cmp	r2, r1
   936a6:	f200 80c8 	bhi.w	9383a <__udivdi3+0x28a>
   936aa:	4660      	mov	r0, ip
   936ac:	1a89      	subs	r1, r1, r2
   936ae:	fbb1 f2f6 	udiv	r2, r1, r6
   936b2:	fb06 1112 	mls	r1, r6, r2, r1
   936b6:	fb07 f702 	mul.w	r7, r7, r2
   936ba:	b2ad      	uxth	r5, r5
   936bc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   936c0:	42af      	cmp	r7, r5
   936c2:	d908      	bls.n	936d6 <__udivdi3+0x126>
   936c4:	192c      	adds	r4, r5, r4
   936c6:	f102 31ff 	add.w	r1, r2, #4294967295
   936ca:	f080 809b 	bcs.w	93804 <__udivdi3+0x254>
   936ce:	42a7      	cmp	r7, r4
   936d0:	f240 8098 	bls.w	93804 <__udivdi3+0x254>
   936d4:	3a02      	subs	r2, #2
   936d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   936da:	4610      	mov	r0, r2
   936dc:	4619      	mov	r1, r3
   936de:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   936e2:	4770      	bx	lr
   936e4:	2300      	movs	r3, #0
   936e6:	461a      	mov	r2, r3
   936e8:	4610      	mov	r0, r2
   936ea:	4619      	mov	r1, r3
   936ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   936f0:	4770      	bx	lr
   936f2:	f1c6 0520 	rsb	r5, r6, #32
   936f6:	fa22 f705 	lsr.w	r7, r2, r5
   936fa:	fa03 f406 	lsl.w	r4, r3, r6
   936fe:	fa21 f305 	lsr.w	r3, r1, r5
   93702:	fa01 fb06 	lsl.w	fp, r1, r6
   93706:	fa20 f505 	lsr.w	r5, r0, r5
   9370a:	433c      	orrs	r4, r7
   9370c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   93710:	fbb3 fcf8 	udiv	ip, r3, r8
   93714:	fb08 331c 	mls	r3, r8, ip, r3
   93718:	fa1f f984 	uxth.w	r9, r4
   9371c:	fb09 fa0c 	mul.w	sl, r9, ip
   93720:	ea45 0b0b 	orr.w	fp, r5, fp
   93724:	ea4f 451b 	mov.w	r5, fp, lsr #16
   93728:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   9372c:	459a      	cmp	sl, r3
   9372e:	fa02 f206 	lsl.w	r2, r2, r6
   93732:	d904      	bls.n	9373e <__udivdi3+0x18e>
   93734:	191b      	adds	r3, r3, r4
   93736:	f10c 35ff 	add.w	r5, ip, #4294967295
   9373a:	d36f      	bcc.n	9381c <__udivdi3+0x26c>
   9373c:	46ac      	mov	ip, r5
   9373e:	ebca 0303 	rsb	r3, sl, r3
   93742:	fbb3 f5f8 	udiv	r5, r3, r8
   93746:	fb08 3315 	mls	r3, r8, r5, r3
   9374a:	fb09 f905 	mul.w	r9, r9, r5
   9374e:	fa1f fb8b 	uxth.w	fp, fp
   93752:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   93756:	45b9      	cmp	r9, r7
   93758:	d904      	bls.n	93764 <__udivdi3+0x1b4>
   9375a:	193f      	adds	r7, r7, r4
   9375c:	f105 33ff 	add.w	r3, r5, #4294967295
   93760:	d362      	bcc.n	93828 <__udivdi3+0x278>
   93762:	461d      	mov	r5, r3
   93764:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   93768:	fbac 2302 	umull	r2, r3, ip, r2
   9376c:	ebc9 0707 	rsb	r7, r9, r7
   93770:	429f      	cmp	r7, r3
   93772:	f04f 0500 	mov.w	r5, #0
   93776:	d34a      	bcc.n	9380e <__udivdi3+0x25e>
   93778:	d046      	beq.n	93808 <__udivdi3+0x258>
   9377a:	4662      	mov	r2, ip
   9377c:	462b      	mov	r3, r5
   9377e:	e75d      	b.n	9363c <__udivdi3+0x8c>
   93780:	4094      	lsls	r4, r2
   93782:	f1c2 0920 	rsb	r9, r2, #32
   93786:	fa21 fc09 	lsr.w	ip, r1, r9
   9378a:	4091      	lsls	r1, r2
   9378c:	fa20 f909 	lsr.w	r9, r0, r9
   93790:	0c26      	lsrs	r6, r4, #16
   93792:	fbbc f8f6 	udiv	r8, ip, r6
   93796:	fb06 cc18 	mls	ip, r6, r8, ip
   9379a:	b2a7      	uxth	r7, r4
   9379c:	fb07 f308 	mul.w	r3, r7, r8
   937a0:	ea49 0901 	orr.w	r9, r9, r1
   937a4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   937a8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   937ac:	4563      	cmp	r3, ip
   937ae:	fa00 f502 	lsl.w	r5, r0, r2
   937b2:	d909      	bls.n	937c8 <__udivdi3+0x218>
   937b4:	eb1c 0c04 	adds.w	ip, ip, r4
   937b8:	f108 32ff 	add.w	r2, r8, #4294967295
   937bc:	d23b      	bcs.n	93836 <__udivdi3+0x286>
   937be:	4563      	cmp	r3, ip
   937c0:	d939      	bls.n	93836 <__udivdi3+0x286>
   937c2:	f1a8 0802 	sub.w	r8, r8, #2
   937c6:	44a4      	add	ip, r4
   937c8:	ebc3 0c0c 	rsb	ip, r3, ip
   937cc:	fbbc f3f6 	udiv	r3, ip, r6
   937d0:	fb06 c113 	mls	r1, r6, r3, ip
   937d4:	fb07 f203 	mul.w	r2, r7, r3
   937d8:	fa1f f989 	uxth.w	r9, r9
   937dc:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   937e0:	428a      	cmp	r2, r1
   937e2:	d907      	bls.n	937f4 <__udivdi3+0x244>
   937e4:	1909      	adds	r1, r1, r4
   937e6:	f103 30ff 	add.w	r0, r3, #4294967295
   937ea:	d222      	bcs.n	93832 <__udivdi3+0x282>
   937ec:	428a      	cmp	r2, r1
   937ee:	d920      	bls.n	93832 <__udivdi3+0x282>
   937f0:	3b02      	subs	r3, #2
   937f2:	4421      	add	r1, r4
   937f4:	1a89      	subs	r1, r1, r2
   937f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   937fa:	e743      	b.n	93684 <__udivdi3+0xd4>
   937fc:	463a      	mov	r2, r7
   937fe:	e705      	b.n	9360c <__udivdi3+0x5c>
   93800:	4633      	mov	r3, r6
   93802:	e718      	b.n	93636 <__udivdi3+0x86>
   93804:	460a      	mov	r2, r1
   93806:	e766      	b.n	936d6 <__udivdi3+0x126>
   93808:	40b0      	lsls	r0, r6
   9380a:	4290      	cmp	r0, r2
   9380c:	d2b5      	bcs.n	9377a <__udivdi3+0x1ca>
   9380e:	f10c 32ff 	add.w	r2, ip, #4294967295
   93812:	2300      	movs	r3, #0
   93814:	e712      	b.n	9363c <__udivdi3+0x8c>
   93816:	4633      	mov	r3, r6
   93818:	4632      	mov	r2, r6
   9381a:	e70f      	b.n	9363c <__udivdi3+0x8c>
   9381c:	459a      	cmp	sl, r3
   9381e:	d98d      	bls.n	9373c <__udivdi3+0x18c>
   93820:	f1ac 0c02 	sub.w	ip, ip, #2
   93824:	4423      	add	r3, r4
   93826:	e78a      	b.n	9373e <__udivdi3+0x18e>
   93828:	45b9      	cmp	r9, r7
   9382a:	d99a      	bls.n	93762 <__udivdi3+0x1b2>
   9382c:	3d02      	subs	r5, #2
   9382e:	4427      	add	r7, r4
   93830:	e798      	b.n	93764 <__udivdi3+0x1b4>
   93832:	4603      	mov	r3, r0
   93834:	e7de      	b.n	937f4 <__udivdi3+0x244>
   93836:	4690      	mov	r8, r2
   93838:	e7c6      	b.n	937c8 <__udivdi3+0x218>
   9383a:	3802      	subs	r0, #2
   9383c:	4421      	add	r1, r4
   9383e:	e735      	b.n	936ac <__udivdi3+0xfc>

00093840 <__func__.7661>:
   93840:	5f5f 6567 5f74 736a 6e6f 625f 6f6f 5f6c     __get_json_bool_
   93850:	726f 6e5f 6c75 5f6c 6e65 0064               or_null_end.

0009385c <__func__.7707>:
   9385c:	534a 4e4f 645f 6365 646f 5f65 7261 6172     JSON_decode_arra
   9386c:	0079 0000                                   y...

00093870 <__func__.7608>:
   93870:	5f5f 6567 5f74 736a 6e6f 735f 7274 6e69     __get_json_strin
   93880:	5f67 6e65 0064 0000                         g_end...

00093888 <__func__.7675>:
   93888:	5f5f 6966 7372 5f74 6f6e 5f6e 7073 6361     __first_non_spac
   93898:	0065 0000                                   e...

0009389c <__func__.7681>:
   9389c:	5f5f 6567 5f74 656e 7478 655f 656c 006d     __get_next_elem.
   938ac:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   938bc:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   938cc:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   938dc:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   938ec:	6b72 622f 7361 6369 6577 2f62 6567 656e     rk/basicweb/gene
   938fc:	6972 2d63 736a 6e6f 7a2d 7265 2d6f 6f63     ric-json-zero-co
   9390c:	7970 632e 253a 3a73 6425 4520 5252 524f     py.c:%s:%d ERROR
   9391c:	2528 2964 203a 736a 6e6f 652d 7272 726f     (%d): json-error
   9392c:	5f3a 675f 7465 6a5f 6f73 5f6e 7473 6972     :__get_json_stri
   9393c:	676e 655f 646e 2928 6620 6961 656c 2064     ng_end() failed 
   9394c:	6f74 6620 6e69 2064 2260 0a27 0000 0000     to find `"'.....
   9395c:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   9396c:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   9397c:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   9398c:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   9399c:	6b72 622f 7361 6369 6577 2f62 6567 656e     rk/basicweb/gene
   939ac:	6972 2d63 736a 6e6f 7a2d 7265 2d6f 6f63     ric-json-zero-co
   939bc:	7970 632e 253a 3a73 6425 4520 5252 524f     py.c:%s:%d ERROR
   939cc:	2528 2964 203a 736a 6e6f 652d 7272 726f     (%d): json-error
   939dc:	6f3a 6666 6573 2074 3d3d 4520 5252 202c     :offset == ERR, 
   939ec:	6162 2064 5245 2052 6176 756c 2165 000a     bad ERR value!..
   939fc:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   93a0c:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   93a1c:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   93a2c:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   93a3c:	6b72 622f 7361 6369 6577 2f62 6567 656e     rk/basicweb/gene
   93a4c:	6972 2d63 736a 6e6f 7a2d 7265 2d6f 6f63     ric-json-zero-co
   93a5c:	7970 632e 253a 3a73 6425 4520 5252 524f     py.c:%s:%d ERROR
   93a6c:	2528 2964 203a 736a 6e6f 652d 7272 726f     (%d): json-error
   93a7c:	5f3a 675f 7465 6a5f 6f73 5f6e 7473 6e69     :__get_json_stin
   93a8c:	5f67 6e65 2864 2029 6166 6c69 6465 000a     g_end() failed..
   93a9c:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   93aac:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   93abc:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   93acc:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   93adc:	6b72 622f 7361 6369 6577 2f62 6567 656e     rk/basicweb/gene
   93aec:	6972 2d63 736a 6e6f 7a2d 7265 2d6f 6f63     ric-json-zero-co
   93afc:	7970 632e 253a 3a73 6425 4520 5252 524f     py.c:%s:%d ERROR
   93b0c:	2528 2964 203a 736a 6e6f 652d 7272 726f     (%d): json-error
   93b1c:	5f3a 675f 7465 6a5f 6f73 5f6e 626f 656a     :__get_json_obje
   93b2c:	7463 655f 646e 2928 6620 6961 656c 2064     ct_end() failed 
   93b3c:	6f74 6620 6e69 2064 7d60 0a27 0000 0000     to find `}'.....
   93b4c:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   93b5c:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   93b6c:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   93b7c:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   93b8c:	6b72 622f 7361 6369 6577 2f62 6567 656e     rk/basicweb/gene
   93b9c:	6972 2d63 736a 6e6f 7a2d 7265 2d6f 6f63     ric-json-zero-co
   93bac:	7970 632e 253a 3a73 6425 4520 5252 524f     py.c:%s:%d ERROR
   93bbc:	2528 2964 203a 736a 6e6f 652d 7272 726f     (%d): json-error
   93bcc:	5f3a 675f 7465 6a5f 6f73 5f6e 7261 6172     :__get_json_arra
   93bdc:	5f79 6e65 2864 2029 6166 6c69 6465 7420     y_end() failed t
   93bec:	206f 6966 646e 6020 275d 000a 2e2e 732f     o find `]'..../s
   93bfc:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   93c0c:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   93c1c:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   93c2c:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   93c3c:	7361 6369 6577 2f62 6567 656e 6972 2d63     asicweb/generic-
   93c4c:	736a 6e6f 7a2d 7265 2d6f 6f63 7970 632e     json-zero-copy.c
   93c5c:	253a 3a73 6425 4520 5252 524f 2528 2964     :%s:%d ERROR(%d)
   93c6c:	203a 736a 6e6f 652d 7272 726f 5f3a 675f     : json-error:__g
   93c7c:	7465 6a5f 6f73 5f6e 756e 626d 7265 655f     et_json_number_e
   93c8c:	646e 2928 6620 6961 656c 2064 6f74 6620     nd() failed to f
   93c9c:	6e69 2064 756e 626d 7265 6520 646e 000a     ind number end..
   93cac:	7274 6575 0000 0000 756e 6c6c 0000 0000     true....null....
   93cbc:	6166 736c 0065 0000 2e2e 732f 6372 412f     false...../src/A
   93ccc:	4653 742f 6968 6472 6170 7472 2f79 7266     SF/thirdparty/fr
   93cdc:	6565 7472 736f 642f 6d65 2f6f 776c 7069     eertos/demo/lwip
   93cec:	615f 7276 3233 755f 3363 655f 6178 706d     _avr32_uc3_examp
   93cfc:	656c 6e2f 7465 6f77 6b72 622f 7361 6369     le/network/basic
   93d0c:	6577 2f62 6567 656e 6972 2d63 736a 6e6f     web/generic-json
   93d1c:	7a2d 7265 2d6f 6f63 7970 632e 253a 3a73     -zero-copy.c:%s:
   93d2c:	6425 4520 5252 524f 2528 2964 203a 736a     %d ERROR(%d): js
   93d3c:	6e6f 652d 7272 726f 5f3a 675f 7465 6a5f     on-error:__get_j
   93d4c:	6f73 5f6e 6f62 6c6f 6f5f 5f72 756e 6c6c     son_bool_or_null
   93d5c:	655f 646e 2928 6220 6461 6a20 6f73 206e     _end() bad json 
   93d6c:	6176 756c 0a65 0000 656c 3d6e 6425 6f2c     value...len=%d,o
   93d7c:	6666 253d 2064 0000 7325 0000 725c 0000     ff=%d ..%s..\r..
   93d8c:	6e5c 000a 305c 0000 6325 0000 2e2e 732f     \n..\0..%c..../s
   93d9c:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   93dac:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   93dbc:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   93dcc:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   93ddc:	7361 6369 6577 2f62 6567 656e 6972 2d63     asicweb/generic-
   93dec:	736a 6e6f 7a2d 7265 2d6f 6f63 7970 632e     json-zero-copy.c
   93dfc:	253a 3a73 6425 4520 5252 524f 2528 2964     :%s:%d ERROR(%d)
   93e0c:	203a 736a 6e6f 652d 7272 726f 5f3a 675f     : json-error:__g
   93e1c:	7465 6e5f 7865 5f74 6c65 6d65 3128 0a29     et_next_elem(1).
   93e2c:	0000 0000 2e2e 732f 6372 412f 4653 742f     ....../src/ASF/t
   93e3c:	6968 6472 6170 7472 2f79 7266 6565 7472     hirdparty/freert
   93e4c:	736f 642f 6d65 2f6f 776c 7069 615f 7276     os/demo/lwip_avr
   93e5c:	3233 755f 3363 655f 6178 706d 656c 6e2f     32_uc3_example/n
   93e6c:	7465 6f77 6b72 622f 7361 6369 6577 2f62     etwork/basicweb/
   93e7c:	6567 656e 6972 2d63 736a 6e6f 7a2d 7265     generic-json-zer
   93e8c:	2d6f 6f63 7970 632e 253a 3a73 6425 4520     o-copy.c:%s:%d E
   93e9c:	5252 524f 2528 2964 203a 736a 6e6f 652d     RROR(%d): json-e
   93eac:	7272 726f 5f3a 675f 7465 6a5f 6f73 5f6e     rror:__get_json_
   93ebc:	7473 6972 676e 655f 646e 2928 000a 0000     string_end()....
   93ecc:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   93edc:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   93eec:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   93efc:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   93f0c:	6b72 622f 7361 6369 6577 2f62 6567 656e     rk/basicweb/gene
   93f1c:	6972 2d63 736a 6e6f 7a2d 7265 2d6f 6f63     ric-json-zero-co
   93f2c:	7970 632e 253a 3a73 6425 4520 5252 524f     py.c:%s:%d ERROR
   93f3c:	2528 2964 203a 736a 6e6f 652d 7272 726f     (%d): json-error
   93f4c:	5f3a 675f 7465 6e5f 7865 5f74 6c65 6d65     :__get_next_elem
   93f5c:	3228 0a29 0000 0000 2e2e 732f 6372 412f     (2)......./src/A
   93f6c:	4653 742f 6968 6472 6170 7472 2f79 7266     SF/thirdparty/fr
   93f7c:	6565 7472 736f 642f 6d65 2f6f 776c 7069     eertos/demo/lwip
   93f8c:	615f 7276 3233 755f 3363 655f 6178 706d     _avr32_uc3_examp
   93f9c:	656c 6e2f 7465 6f77 6b72 622f 7361 6369     le/network/basic
   93fac:	6577 2f62 6567 656e 6972 2d63 736a 6e6f     web/generic-json
   93fbc:	7a2d 7265 2d6f 6f63 7970 632e 253a 3a73     -zero-copy.c:%s:
   93fcc:	6425 4520 5252 524f 2528 2964 203a 736a     %d ERROR(%d): js
   93fdc:	6e6f 652d 7272 726f 5f3a 6567 5f74 736a     on-error:_get_js
   93fec:	6e6f 655f 656c 656d 746e 655f 646e 2928     on_element_end()
   93ffc:	000a 0000 2e2e 732f 6372 412f 4653 742f     ....../src/ASF/t
   9400c:	6968 6472 6170 7472 2f79 7266 6565 7472     hirdparty/freert
   9401c:	736f 642f 6d65 2f6f 776c 7069 615f 7276     os/demo/lwip_avr
   9402c:	3233 755f 3363 655f 6178 706d 656c 6e2f     32_uc3_example/n
   9403c:	7465 6f77 6b72 622f 7361 6369 6577 2f62     etwork/basicweb/
   9404c:	6567 656e 6972 2d63 736a 6e6f 7a2d 7265     generic-json-zer
   9405c:	2d6f 6f63 7970 632e 253a 3a73 6425 4520     o-copy.c:%s:%d E
   9406c:	5252 524f 2528 2964 203a 736a 6e6f 652d     RROR(%d): json-e
   9407c:	7272 726f 5f3a 675f 7465 6e5f 7865 5f74     rror:__get_next_
   9408c:	6c65 6d65 2928 000a 2e2e 732f 6372 412f     elem()..../src/A
   9409c:	4653 742f 6968 6472 6170 7472 2f79 7266     SF/thirdparty/fr
   940ac:	6565 7472 736f 642f 6d65 2f6f 776c 7069     eertos/demo/lwip
   940bc:	615f 7276 3233 755f 3363 655f 6178 706d     _avr32_uc3_examp
   940cc:	656c 6e2f 7465 6f77 6b72 622f 7361 6369     le/network/basic
   940dc:	6577 2f62 6567 656e 6972 2d63 736a 6e6f     web/generic-json
   940ec:	7a2d 7265 2d6f 6f63 7970 632e 253a 3a73     -zero-copy.c:%s:
   940fc:	6425 4520 5252 524f 2528 2964 203a 736a     %d ERROR(%d): js
   9410c:	6e6f 652d 7272 726f 5f3a 6567 5f74 736a     on-error:_get_js
   9411c:	6e6f 655f 656c 656d 746e 655f 646e 2928     on_element_end()
   9412c:	6f20 6176 756c 3d65 6c25 2c75 6f20 6176      ovalue=%lu, ova
   9413c:	756c 5f65 3d65 6c25 0a78 0000               lue_e=%lx...

00094148 <__func__.7619>:
   94148:	5f5f 6567 5f74 736a 6e6f 6f5f 6a62 6365     __get_json_objec
   94158:	5f74 6e65 0064 0000                         t_end...

00094160 <__func__.7631>:
   94160:	5f5f 6567 5f74 736a 6e6f 615f 7272 7961     __get_json_array
   94170:	655f 646e 0000 0000                         _end....

00094178 <__func__.7693>:
   94178:	534a 4e4f 645f 6365 646f 5f65 626f 656a     JSON_decode_obje
   94188:	7463 0000                                   ct..

0009418c <__func__.7642>:
   9418c:	5f5f 6567 5f74 736a 6e6f 6e5f 6d75 6562     __get_json_numbe
   9419c:	5f72 6e65 0064 0000                         r_end...

000941a4 <__func__.7621>:
   941a4:	656e 6374 6e6f 5f6e 7270 6e69 6674 0000     netconn_printf..
   941b4:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   941c4:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   941d4:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   941e4:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   941f4:	6b72 622f 7361 6369 6577 2f62 7468 7074     rk/basicweb/http
   94204:	752d 6974 736c 632e 253a 3a73 6425 4520     -utils.c:%s:%d E
   94214:	5252 524f 2528 2964 203a 7376 7270 6e69     RROR(%d): vsprin
   94224:	6674 2928 000a 0000 4b4f 0000 5448 5054     tf()....OK..HTTP
   94234:	312f 302e 2520 332e 2064 7325 0a0d 0000     /1.0 %.3d %s....
   94244:	6f43 746e 6e65 2d74 6e45 6f63 6964 676e     Content-Encoding
   94254:	203a 7a67 7069 0a0d 0000 0000 227b 6572     : gzip......{"re
   94264:	7573 746c 2022 203a 2e25 732a 7d20 0000     sult" : %.*s }..
   94274:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   94284:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   94294:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   942a4:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   942b4:	6b72 622f 7361 6369 6577 2f62 7468 7074     rk/basicweb/http
   942c4:	752d 6974 736c 632e 253a 3a73 6425 4520     -utils.c:%s:%d E
   942d4:	5252 524f 2528 2964 203a 725f 7065 796c     RROR(%d): _reply
   942e4:	685f 6165 2864 0a29 0000 0000 2e2e 732f     _head()......./s
   942f4:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   94304:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   94314:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   94324:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   94334:	7361 6369 6577 2f62 7468 7074 752d 6974     asicweb/http-uti
   94344:	736c 632e 253a 3a73 6425 4520 5252 524f     ls.c:%s:%d ERROR
   94354:	2528 2964 203a 725f 7065 796c 625f 646f     (%d): _reply_bod
   94364:	2879 0a29 0000 0000                         y().....

0009436c <__func__.7638>:
   9436c:	6572 6c70 5f79 6572 7571 7365 0074 0000     reply_request...

0009437c <__func__.7932>:
   9437c:	6572 6461 725f 7165 6575 7473 685f 6165     read_request_hea
   9438c:	0064 0000                                   d...

00094390 <__func__.7942>:
   94390:	6572 6461 725f 7165 6575 7473 625f 646f     read_request_bod
   943a0:	0079 0000                                   y...

000943a4 <webpage>:
   943a4:	8b1f 0808 62ee 5415 0302 6e69 6564 2e78     .....b.T..index.
   943b4:	696d 2e6e 7468 6c6d ec00 79fd db7b 9256     min.html...y{.V.
   943c4:	0e28 fdff 4fde a141 32d3 8111 a914 0bc5     (....OA..2......
   943d4:	8818 b137 b69d b267 ec4d ee9e 5a1e 07ed     ..7...g.M....Z..
   943e4:	4122 3111 3009 6800 1159 9f39 adfd b3aa     "A.1.0.hY.9.....
   943f4:	1c1f 9490 9ee2 bfb9 c9e7 da64 cf02 d4be     ..........d.....
   94404:	53a9 a755 af96 5e0e f8fc edfc 7e3f d97a     .SU....^....?~z.
   94414:	559a f98b 57c5 dffc 9e24 7c5c a555 3cd5     .U...W..$.\|U..<
   94424:	78b9 949b eb55 2acd 92ad 8eaf ca59 8b57     .x..U..*....Y.W.
   94434:	8aa4 e35b 5c59 4994 7915 6aab 79da 5dea     ..[.Y\.I.y.j.y.]
   94444:	557c 8b8e 5974 aab5 65db 7912 f255 3aa9     |U..tY...e.yU..:
   94454:	25fe 18fe 54b3 e2ef 5c63 e2b4 b2e5 d115     .%...T..c\......
   94464:	ebbf eb75 336e eaf8 e598 7c5e d075 b4e9     ..u.n3....^|u...
   94474:	0378 9317 bc7c 245a d559 29bd d3a0 23f6     x...|.Z$Y..)...#
   94484:	70d1 8c59 6f23 5556 f0cb f8f8 eb51 d5a8     .pY.#oVU....Q...
   94494:	e79e b8e3 f34a 3bac 61cb d088 23e4 994c     ....J..;.a...#L.
   944a4:	afe3 7e47 5cb7 d3ce fdaa 7c28 8fe4 977a     ..G~.\....(|..z.
   944b4:	fc50 7851 fe7a e4e4 f1d9 fd3c 1498 3cc9     P.Qxz.....<....<
   944c4:	278f 5fdd 61ca a599 f84b f51d 0261 ead4     .'._.a..K...a...
   944d4:	3e23 478a 1cbe ab5d 81d3 55d9 30b7 59f5     #>.G..]....U.0.Y
   944e4:	d771 49b9 3eae 55a4 2ae7 d4ff d329 d2df     q..I.>.U.*..)...
   944f4:	3aec e71c 0559 c603 4da4 2d9a d557 1688     .:..Y....M.-W...
   94504:	3c61 c64b 201f 32ed 12d0 788b e692 ae97     a<K.. .2...x....
   94514:	ae56 62f2 1492 3298 2ce8 dff2 59dc ff9b     V..b...2.,...Y..
   94524:	48bb 6926 6adc d22f 73ac 4e93 59aa e4f8     .H&i.j/..s.N.Y..
   94534:	d3f1 27e5 aeff 873b bb4d c29b b050 1256     ...'..;.M...P.V.
   94544:	f49e 9f97 5b36 4f8a 9de6 5e59 bfa4 8541     ....6[.O..Y^..A.
   94554:	de78 549a 5377 9358 9c2a d327 c06a f64a     x..TwSX.*.'.j.J.
   94564:	f71f 9f96 3906 0f2c dd64 b384 3274 b249     .....9,.d...t2I.
   94574:	18c1 29fa 3158 e4dc 3c4e af4f b0b3 af48     ...)X1..N<O...H.
   94584:	3c67 5641 e648 74f3 a659 e0e5 0666 d91b     g<AVH..tY...f...
   94594:	9729 38f1 b309 a6fc 9788 bb1b c9fb 22dd     )..8..........."
   945a4:	ae2e 9061 70d8 7fd8 c3da 7fc1 9ab8 0b98     ..a..p..........
   945b4:	8b35 d027 9a6e dc01 7ab5 0ead 10cc 14fe     5.'.n....z......
   945c4:	57d7 bb71 e017 dd7f 7393 6b1f 1ab5 666a     .Wq......s.k..jf
   945d4:	9679 596c dc12 38c7 92cd 8ee2 9fa7 dcf7     y.lY...8........
   945e4:	f86b d9ec b389 b3c2 0d27 fa15 bd27 b39e     k.......'...'...
   945f4:	bf46 54df 0d45 de6a 1729 7e9d bf20 ea7a     F..TE.j.)..~ .z.
   94604:	4b53 913d ea9f 54eb 9d7e afc9 f973 58f5     SK=....T~...s..X
   94614:	3d7e 5f91 e54f 33d7 200d aa36 3117 5eee     ~=._O..3. 6..1.^
   94624:	cfef b52a e62f efdf 663e f7ff cb44 f1ed     ..*./...>f..D...
   94634:	a7dc dda7 fe53 2a7f 99f7 6b5c f695 a794     ....S..*..\k....
   94644:	7e3d 68ec 09ee 3ccf ea7f ed68 c8b1 46d4     =~.h...<..h....F
   94654:	ce77 ced3 835c e33b a799 b1ae f29d 13cc     w...\.;.........
   94664:	6c6d 0172 635c eb13 1ae0 72da 9f35 fae3     mlr.\c.....r5...
   94674:	49d1 d731 658f 79f5 7396 5911 1e91 e22f     .I1..e.y.s.Y../.
   94684:	495c f22a 978c 97d0 3293 f29e e70c 529a     \I*......2.....R
   94694:	2789 c4bc e379 1fe8 128b d8f6 79cf 59c6     .'..y........y.Y
   946a4:	d0e3 78cf d389 91c6 f29f 2712 c8f6 92e5     ...x.......'....
   946b4:	8e35 ac5c e35c c5c0 c5ba 2aab 72d7 19ca     5.\.\......*.r..
   946c4:	086e 38c3 7ee6 4e60 e59f 6c34 9607 b1e8     n..8.~`N..4l....
   946d4:	0d12 01bb 9e25 02b1 66e6 fa40 9653 b0de     ....%....f@.S...
   946e4:	5017 09e0 d02b 15b0 e050 2f31 8f60 9cfa     .P..+...P.1/`...
   946f4:	9fa5 0e35 8cfa 3815 1c6d 29f3 702b 8f62     ..5....8m..)+pb.
   94704:	2c59 e354 f998 357a 990e 96af 07b1 74f9     Y,T...z5.......t
   94714:	b80a 771c 40c1 faff 8866 7d22 88a3 5773     ...w.@..f."}..sW
   94724:	d144 519e b9d4 bc3d 33e8 a4a3 4fbe c0bc     D..Q..=..3...O..
   94734:	a353 7380 78c3 27c9 4946 cee7 92f1 cd8f     S..s.x.'FI......
   94744:	f592 9eb9 051b b6ce f54c 28cc ba79 a665     ........L..(y.e.
   94754:	46a7 93c9 4cfa 2dad 32d8 7353 b627 d44c     .F...L.-.2Ss'.L.
   94764:	87dc f6de 749b 59de c44c 872d 3d5f a9f5     .....t.YL.-._=..
   94774:	9ea5 4fc8 75f5 bf2a e4ce b9d7 7afc bf2c     ...O.u*......z,.
   94784:	c89e a7af abf2 cb7e 2f51 5bb5 868e 78d1     ......~.Q/.[...x
   94794:	d1cb 1b78 396f c6ea e5ba 1070 b78d 8e1c     ..x.o9....p.....
   947a4:	f1b5 c396 d929 1cb7 b84e 96f1 75c3 bc69     ....)...N....ui.
   947b4:	70e5 ecf9 0e5b b717 96f1 a9c3 dd36 9072     .p..[.......6.r.
   947c4:	74d7 c9cb e6ac 4e5b 6916 e5be 9144 2dda     .t....[N.i..D..-
   947d4:	3227 6f9a 5139 f9a2 1396 6a25 9cb7 68c8     '2.o9Q....%j...h
   947e4:	e5be 8944 5be6 944e dda8 2272 f9a3 9396     ..D..[N...r"....
   947f4:	d2eb cb74 0289 5bf5 728e b79c cc9c bc69     ..t....[.r....i.
   94804:	64e5 c689 4e5b b094 396f de91 cb78 0289     .d..[N..o9..x...
   94814:	b78d 289c df60 2272 f1bd 1396 1a05 396f     ...(`.r"......o9
   94824:	c051 e5be 7a44 2de3 9727 e1a3 1396 b5f9     Q...Dz.-'.......
   94834:	0e5b 7632 72dd 915a b75d 569c d774 a72d     [.2v.rZ.]..Vt.-.
   94844:	368a 72dc c0aa 5bae 954e 75dc a9cb 0d92     .6.r...[N..u....
   94854:	9cb7 b02a 96eb 2553 dd77 aa72 c364 a72d     ..*...S%w.r.d.-.
   94864:	ec0a e5ba f5b4 7edd a9cb 7b82 72dc fb1a     .......~...{.r..
   94874:	ef37 afcc 35c5 5f87 f53d a5a9 c89e f54f     7....5._=.....O.
   94884:	2a75 cebf d7e4 fcb9 2c7a 9ebf afc8 f2a7     u*......z,......
   94894:	7eab 51cd b52f 8e6b d186 cd78 78d1 af1b     .~.Q/.k...x..x..
   948a4:	ea39 bac6 70e6 8d10 1cd7 b58e 9af1 29c3     9....p.........)
   948b4:	d7d9 4e1c f1b8 c39a 6975 e6bc f970 6bec     ...N....ui..p..k
   948c4:	170e f1b7 c39a 36a9 735d d790 cd74 acc9     .......6]s..t...
   948d4:	6be6 164e be69 44e6 da91 2735 9a32 39af     .kN.i..D..5'2..9
   948e4:	a251 9af9 2513 d76a c89c be68 44e6 e689     Q....%j...h..D..
   948f4:	4e6b a894 735d a322 9af9 eb93 74d2 89cd     kN..]s"......t..
   94904:	f502 8e6b 9c72 9cd7 69cc e6bc 8964 6bc6     ..k.r....i..d..k
   94914:	944e afb0 9139 78de 89cd 8d02 9cd7 6028     N...9..x......(`
   94924:	735f bd22 9af1 0513 af1a 5139 bec0 44e6     _s".......9Q...D
   94934:	e37a 2735 a397 9ae1 f913 6bb5 320e 5d76     z.5'.......k.2v]
   94944:	5a73 5d91 9cd7 7456 35d7 8aa7 5c36 aa73     sZ.]..Vt.5..6\s.
   94954:	aec0 4e6b dc95 cd75 92a9 d70d 2a9c ebb0     ..kN..u......*..
   94964:	539a 7725 735d 64aa 35c3 0aa7 baec b4e6     .S%w]s.d.5......
   94974:	ddf5 cd7e 82a9 d74d 395c 922e 6b24 d9c5     ..~...M.\9..$k..
   94984:	6e04 f8bc 9493 3e5e 0ba1 8aaf e6af a749     .n....^>......I.
   94994:	ca48 9e65 e995 44c7 71bb bc06 abbd aabc     H.e....D.q......
   949a4:	45f2 3fd8 84d7 9dcd 044f ea5a adf7 3f10     .E.?....O.Z....?
   949b4:	a90b ccae fe81 f9f3 a51c 55e4 1abe 06cf     ...........U....
   949c4:	459d 65a9 d4a2 c43e 6c24 9a0e 7280 c6bc     .E.e..>.$l...r..
   949d4:	5c55 980c 3d5c 3944 9972 d3cf eb49 934f     U\..\=D9r...I.O.
   949e4:	64c9 1b53 05f4 b94b 0733 6bdc 782c 5d51     .dS...K.3..k,xQ]
   949f4:	93e5 8bdb b8aa 26a8 1ec1 6685 0a5b f34d     .......&...f[.M.
   94a04:	dabc 92d9 b42c 25ad d47a d5d9 2c92 bb34     ....,..%z....,4.
   94a14:	4973 1bed 75ea 42d8 9326 be3b bda2 45dd     sI...u.B&.;....E
   94a24:	45f5 a70a 5169 9d56 2cf1 379d ce0f 7355     .E..iQV..,.7..Us
   94a34:	df76 6a9a 1f39 f35c 7dde 85aa 707f a34d     v..j9.\..}...pM.
   94a44:	be4f e2c8 de20 a56f f1e7 1703 7efa b515     O... .o......~..
   94a54:	7e75 c560 f6fb ada8 03f2 ea2b 8a3d 6635     u~`.......+.=.5f
   94a64:	c6a4 167d 6b59 db64 db51 7151 8f76 bab5     ..}.Ykd.Q.Qqv...
   94a74:	8f7f 8aae 3bb3 caf9 d1c8 96db a947 5e69     .....;......G.i^
   94a84:	3a2c 0669 3768 b169 d71f be45 de5a d24d     ,:i.h7i...E.Z.M.
   94a94:	3972 6f8f 9643 b9d5 e79a 0fe3 9e16 0def     r9.oC...........
   94aa4:	3900 e957 9e38 a7f3 05c3 f620 b279 b471     .9W.8..... .y.q.
   94ab4:	8f89 8065 ddaa b2ad d101 b12d 834f 04f4     ..e.......-.O...
   94ac4:	1eeb ad25 7dce 311b 1887 296c fda7 c4e8     ..%..}.1..l)....
   94ad4:	4993 ed9e f85b caaa d4ee 9b2c 7287 ae61     .I..[.....,..ra.
   94ae4:	ce96 19d3 7855 ce81 be3c e64a 0f77 15d9     ....Ux..<.J.w...
   94af4:	a2f1 cd6d de80 b7b4 7dee 2f95 8ba1 d3df     ..m......}./....
   94b04:	8b65 ed46 98ea dce5 612d f16d 1776 d158     e.F.....-am.v.X.
   94b14:	8add 79f3 d5de fd68 7ec9 9799 aa29 841b     ...y..h..~..)...
   94b24:	3245 2b8f 5738 9303 3220 995b 65c5 9a67     E2.+8W.. 2[..eg.
   94b34:	9324 78ab c1fc 1584 7c99 ab47 f3b2 6998     $..x.....|G....i
   94b44:	e4cf 16d6 298a 3b63 6e40 d6d5 7ed7 bf9f     .....)c;@n...~..
   94b54:	5757 54ea 1103 adb8 fee7 f759 fb74 f613     WW.T......Y.t...
   94b64:	b6b6 c5cb b6b6 631f ddc3 9149 272f 4df9     .......c..I./'.M
   94b74:	59d6 d924 bd4a c3eb 6212 d91b 33a4 a79e     .Y$.J....b...3..
   94b84:	50cb dbd4 25ae c591 811f 63f2 bd78 b565     .P...%.....cx.e.
   94b94:	91cc 40fd 6d63 14b6 7da7 78d7 41d1 fcb3     ...@cm...}.x.A..
   94ba4:	ecc7 de5c 002d ab57 3c32 bedb 7c78 7804     ..\.-.W.2<..x|.x
   94bb4:	254b 2e85 91c6 0383 7d3a 2f1e 64cb ae9b     K%......:}./.d..
   94bc4:	a684 712a 7e72 881e 75ff fefb aeee fb65     ..*qr~...u....e.
   94bd4:	ca1a 53e5 e760 41ba 62d3 6b60 d85e 760d     ...S`..A.b`k^..v
   94be4:	cb65 7702 d210 4838 cb17 a8bc ace2 cc1a     e..w..8H........
   94bf4:	b912 5abc daaa 0e69 52e8 e4e5 5a63 80a6     ...Z..i..R..cZ..
   94c04:	55cc 7ad9 699f a776 1571 82bc 362c 3f4d     .U.z.iv.q...,6M?
   94c14:	1325 70de aecb 981b 60a5 cdf2 ca45 700a     %..p.....`..E..p
   94c24:	d8c4 4659 b842 3780 750b 1da9 ec91 19d4     ..YFB..7.u......
   94c34:	c42a 8cf8 82c9 9473 1564 3e69 05c1 4d9e     *.....s.d.i>...M
   94c44:	71ca 4cbc 6ed4 defd dc19 af61 dd7c 6c49     .q.L.n....a.|.Il
   94c54:	d9b9 6347 33a6 af9d c9d2 bd45 a6bf 0c12     ..Gc.3....E.....
   94c64:	b59e 6dfc ad75 e25a 12ee b7eb fe53 016a     ...mu.Z.....S.j.
   94c74:	dab4 eb1b f628 4e36 a840 daaf 275d 54ef     ....(.6N@...]'.T
   94c84:	9c45 8895 42c9 82fa 213b 9d39 4530 3da4     E....B..;!9.0E.=
   94c94:	d50e f68e e36b d5da 85e0 2d5a a5b9 3057     ....k.....Z-..W0
   94ca4:	49ae 2f50 b6c0 2cc2 7066 1df7 c664 58f7     .IP/...,fp..d..X
   94cb4:	2ac8 bebf ab9e 4bd3 dc87 bd01 1842 6bc0     .*.....K....B..k
   94cc4:	9fc1 3756 265f 8d99 e57f cb0d 6836 90c0     ..V7_&......6h..
   94cd4:	a11d 0d12 18f5 8524 097e f3e4 60bc b17b     ......$.~....`{.
   94ce4:	0b8c 2238 bd82 3fbf 6a82 a11a 53f6 efc0     ..8"...?.j...S..
   94cf4:	1a8e f317 22f4 0716 843e 6d55 d2e1 f0b6     ....."..>.Um....
   94d04:	277f c6b8 d5fb 8227 9e4a 7dc9 85ab 7cd3     .'....'.J..}...|
   94d14:	2abc 1bf7 3862 a443 a778 672d 88ba 13af     .*..b8C.x.-g....
   94d24:	4b7b 009b fe01 fae8 6c83 908b 5226 d0f9     {K.......l..&R..
   94d34:	f18d 6108 a8e4 6235 0524 82ca 2c2c b7df     ...a..5b$...,,..
   94d44:	cb96 9ab8 ce75 40cd fb0e 3242 e5dd 786a     ....u..@..B2..jx
   94d54:	0b8e da84 45e3 5be8 b32b 71c7 3c07 d9f1     .....E.[+..q.<..
   94d64:	a538 9b7a 93bf 3253 7c1a a728 d4d4 cd88     8.z...S2.|(.....
   94d74:	3529 7397 4a70 15fb 39b6 a6a5 5b5a 2538     )5.spJ...9..Z[8%
   94d84:	caa3 3883 b325 c905 1929 9fc9 5399 7672     ...8%...)....Srv
   94d94:	3829 7aa5 0dc7 929c 15bb a737 68e4 01f4     )8.z......7..h..
   94da4:	929c cad1 3843 a6a5 a5ab cc76 85cc 0fdc     ....C8....v.....
   94db4:	6017 9d75 d5d6 5331 4eaf 6e7c 4623 7e1e     .`u...1S.N|n#F.~
   94dc4:	e105 3e20 8a2f 6e43 8eb0 79a4 8423 8d71     .. >/.Cn...y#.q.
   94dd4:	0337 dd1d d562 06fd cfb3 4d26 6992 9abc     7...b.....&M.i..
   94de4:	ad57 eefd 763e ffad c9e9 2793 079b 6035     W...>v.....'..5`
   94df4:	82dd abf7 6ecb 3e45 d384 d3d3 f4ad fdc6     .....nE>........
   94e04:	d7c7 c78d 3c78 e22e e1e0 1f55 3f3a 80d5     ....x<....U.:?..
   94e14:	c931 f3f3 faf3 ff24 3c94 ffc1 301e 4041     1.....$..<...0A@
   94e24:	7875 4c67 341e 5545 c1f9 d493 309a 39a6     uxgL.4EU.....0.9
   94e34:	8f1e efb7 6ee5 4e30 6833 4caf 19f6 4984     .....n0N3h.L...I
   94e44:	0a34 9ee2 a50f 14f7 dbff b7dc f859 7e99     4...........Y..~
   94e54:	274c d126 fbf6 6c9a 703c 6af7 dac0 fbab     L'&....l<p.j....
   94e64:	35d5 6936 9d3a 77ee f6e0 8adf 81da 7fbb     .56i:..w........
   94e74:	87d5 afce c0e1 2739 e0f9 741d b81d 5487     ......9'...t...T
   94e84:	f07e 9b24 dc0e d9d9 8ed9 d703 a78d ffc0     ~.$.............
   94e94:	e6ee f1ac f735 9a63 20dc cdf1 e9af f249     ....5.c.. ....I.
   94ea4:	1d31 ec27 6e98 b839 d85c f9d3 3654 9c09     1.'..n9.\...T6..
   94eb4:	4436 bae1 520a a6c6 1a2a 3af3 7e45 37a3     6D...R..*..:E~.7
   94ec4:	d134 064a acd5 deb9 9938 9dcf c4bc f196     4.J.....8.......
   94ed4:	9a33 71b1 fb16 c1b5 4fc8 1a8b 607d d62b     3..q.....O..}`+.
   94ee4:	f480 7dc4 24f8 7d5b d9e0 beb3 4fd1 d8b9     ...}.$[}.....O..
   94ef4:	c773 82b4 1db5 f3b3 779a 5cac 3be8 ab56     s........w.\.;V.
   94f04:	b8d7 f763 d59e fbde ff78 f796 dddf b687     ..c.....x.......
   94f14:	e0fd 673d ff4a 3f76 fefd 67b3 4746 c98b     ..=gJ.v?...gFG..
   94f24:	9b9e 15ae 6dac 9dba bcd7 8be9 be89 b5e9     .....m..........
   94f34:	bb7a 7d37 69ef 7fdd f7d7 fa6f db01 df7e     z.7}.i....o...~.
   94f44:	1fc6 efbc 0d52 3456 bf39 73de b587 b582     ....R.V49..s....
   94f54:	b61d 9af3 7877 ad7e 70ef dead 1dee 4c76     ....wx~..p....vL
   94f64:	fee0 e97b e46a bb01 dcd6 7dcc a7f7 dd86     ..{.j......}....
   94f74:	aa99 7e95 2153 fa6b 707b 6f07 c351 bba4     ...~S!k.{p.oQ...
   94f84:	dc5b 9601 49bc 9ced 6eee ae52 af19 81ac     [....I...nR.....
   94f94:	4340 65e5 6691 5a95 f663 3f73 3598 d6cb     @C.e.f.Zc.s?.5..
   94fa4:	d6c0 dd91 b90c 5854 5e07 ed57 f806 4d75     ......TX.^W...uM
   94fb4:	4f61 75a8 dd56 5617 54b7 1fbe f284 f886     aO.uV..V.T......
   94fc4:	999e b733 0db7 17fd 2330 69f8 48bc b7e7     ..3.....0#.i.H..
   94fd4:	0961 6404 4ca7 748a 9a4a f481 8e24 f1f6     a..d.L.tJ...$...
   94fe4:	789d cbf2 64aa a9ea 3852 cce3 a0dd ce7e     .x...d..R8....~.
   94ff4:	149d c769 8928 279b 5c41 f302 4c15 2a92     ..i.(..'A\...L.*
   95004:	e74e 3065 af4d f1c7 8512 f85e 2ab9 0092     N.e0M.....^..*..
   95014:	6c75 2292 efe0 3304 4712 8b05 cd38 2002     ul."...3.G..8.. 
   95024:	839e 1932 e153 b572 9680 cd6f d89d abc4     ..2.S.r...o.....
   95034:	9a49 e307 fb38 9718 b2c1 afc8 a48b 032c     I...8.........,.
   95044:	f6e4 841a 9687 f07c 2e2a cc13 0d65 22c1     ......|.*...e.."
   95054:	ed55 9711 95a9 be97 78b1 89e2 b7b5 b119     U........x......
   95064:	be05 aa0c b164 9a44 7cdb 89d7 3e35 ec33     ....d.D..|..5>3.
   95074:	60b5 4221 d0c6 8204 cfd2 1557 0a76 5d4d     .`!B......W.v.M]
   95084:	2505 95f4 b35d b89d 3d61 e93c 36f5 6993     .%..]...a=<..6.i
   95094:	5dc6 9014 6662 c15a c778 999b 4250 bb0d     .]..bfZ.x...PB..
   950a4:	9f8f 0b24 1b68 7e7e fbd0 2e03 37a9 ac10     ..$.h.~~.....7..
   950b4:	b411 ae53 8ba0 52d5 7773 e4f0 cffc fd03     ..S....Rsw......
   950c4:	a499 a837 214b 569b 5b09 e142 a75e 9e7b     ..7.K!.V.[B.^.{.
   950d4:	b02c 3bed dc2e 74eb 304f 5d25 2b5c c6c5     ,..;...tO0%]\+..
   950e4:	e3f2 2d35 5868 06c0 77fb 7b96 0d84 887a     ..5-hX...w.{..z.
   950f4:	bcb0 6837 21ee 0d06 72c9 9613 a245 249a     ..7h.!...r..E..$
   95104:	f661 0738 fb30 3570 3801 8248 5e32 93e8     a.8.0.p5.8H.2^..
   95114:	c3ee aee0 3056 8cd4 98b9 f208 c565 0d00     ....V0......e...
   95124:	0666 1610 4020 7b03 9825 34fa c19b a849     f... @.{%..4..I.
   95134:	d806 fc82 2121 b59b 6774 a63f 1e8b 9358     ....!!..tg?...X.
   95144:	7477 1446 4687 c1b0 e04b d3e1 c1c5 d92c     wtF..F..K.....,.
   95154:	7f74 9491 6549 c0a4 2f72 4ad2 c479 9788     t...Ie..r/.Jy...
   95164:	24cb e686 49c7 eac8 c60f a2ab c184 732f     .$...I......../s
   95174:	f838 c149 1b3b 4609 52f3 56ef de26 4af1     8.I.;..F.R.V&..J
   95184:	525c 2bc4 2185 0ded b6f1 8a80 3832 5498     \R.+.!......28.T
   95194:	9eaf f72e c85b 617b f67d ed74 76e1 e1e9     ....[.{a}.t..v..
   951a4:	266c 2d5b 92ae 12e2 e7ba a793 3bbe 12e5     l&[-.........;..
   951b4:	d645 beda 9436 0386 9667 d3be 25f4 7ef4     E...6...g....%.~
   951c4:	584a f1d1 ab4c 12c9 633a e65c a3b9 a6ab     JX..L...:c\.....
   951d4:	930a 9c64 a417 e07a 2fda 0582 7209 1826     ..d...z../...r&.
   951e4:	c80b a1ac a604 ad5a 6244 f6f4 8a1f a10f     ......Z.Db......
   951f4:	8268 c86a f96c 242a efd3 72d4 971a 97c4     h.j.l.*$...r....
   95204:	3c0c 8135 a6ba a236 87f0 6896 3522 c33d     .<5...6....h"5=.
   95214:	cc14 976b 0c4c 0f18 46cf 4c95 7758 556a     ..k.L....F.LXwjU
   95224:	6842 2927 ea18 cd1d 648a 197a d3c6 a48a     Bh').....dz.....
   95234:	7420 43d8 d5af 5af6 5571 6d15 f5cc 9e5b      t.C...ZqU.m..[.
   95244:	6def abe2 62ab ae44 9a75 534b 2f36 0d4e     .m...bD.u.KS6/N.
   95254:	33ff fef2 f1e4 81f2 524c 771e af42 98d6     .3......LR.wB...
   95264:	a1b7 e2cb 15d7 4c5c 4d88 eaee efea 9ecf     ......\L.M......
   95274:	033d bd48 6b86 7605 03f0 2380 725e fc61     =.H..k.v...#^ra.
   95284:	4f31 1b27 9452 48b5 760e b1bb 16b7 9344     1O'.R..H.v....D.
   95294:	5541 35dc 47d5 aa2c 71d1 b370 6b6a 3b3a     AU.5.G,..qp.jk:;
   952a4:	6609 c1a7 2ef2 962f 4033 e12d be29 e65a     .f..../.3@-.).Z.
   952b4:	f037 b2c1 56f4 5a69 51bc 948e abcc 5a62     7....ViZ.Q....bZ
   952c4:	be7f ef35 a632 db10 ca92 2db2 7ed4 c9ad     ..5.2......-.~..
   952d4:	ace0 ae86 ecaa 3ba2 d006 02ae 7a12 73e1     .......;.....z.s
   952e4:	4aa2 53bb 511a 171d 6da0 ecba adf1 e6be     .J.S.Q...m......
   952f4:	9f78 b775 029f 19bd 9753 cd57 4b41 dd9a     x.u.....S.W.AK..
   95304:	0d39 741b e93a 80cb 4e83 9578 1e00 1e4f     9..t:....Nx...O.
   95314:	90ec e068 5376 e8a4 7630 a151 2127 6549     ..h.vS..0vQ.'!Ie
   95324:	cbc5 0cce ffce 711c 4380 4812 96f4 977e     .......q.C.H..~.
   95334:	bbf7 2767 cf4f f49f 4ecf 6a07 cc6b cf8b     ..g'O....N.jk...
   95344:	efbe 1274 bf50 d8f5 4470 de8a 4f09 48db     ..t.P...pD...O.H
   95354:	7801 9c6f c69c 81e3 c27d 3119 e5c4 96a3     .xo.....}..1....
   95364:	b390 8aa1 1486 3d58 2a49 804d a0ce 4b1d     ......X=I*M....K
   95374:	81b3 1348 c4cb a36e df02 a91a 16f9 88b3     ..H...n.........
   95384:	a561 55b8 d84e 1e01 c369 4e28 a245 49e2     a..UN...i.(NE..I
   95394:	786b 0631 cd58 b057 ec58 b9a6 02e8 5b12     kx1.X.W.X......[
   953a4:	c45c 7817 dd74 9479 ff03 fa68 00e4 3370     \..xt.y...h...p3
   953b4:	8ab8 2032 5b7c aabc c04c 269f 3b31 cf30     ..2 |[..L..&1;0.
   953c4:	aebc b7d2 0d61 99e3 264b ca96 6a13 527e     ....a...K&...j~R
   953d4:	6cb6 e25a 987c a0f2 3c01 87ea e4f8 c4e4     .lZ.|....<......
   953e4:	e661 f673 ecf8 ecfc 507c c453 3054 f08a     a.s.....|PS.T0..
   953f4:	c8c8 78c7 6f3e 4f75 56ca e402 2c22 de0d     ...x>ouO.V..",..
   95404:	03ba a421 2e6e 23b1 41bb 6005 4afb d38d     ..!.n..#.A.`.J..
   95414:	ac62 04b0 351f 9c9a a4cd 1c4a b192 f9e8     b....5....J.....
   95424:	d2cb a020 4924 68d2 9bca 35b5 74d9 a2cb     .. .$I.h...5.t..
   95434:	6793 5bf3 8af5 5f1f 0941 3520 5b84 a5b0     .g.[..._A. 5.[..
   95444:	57a4 4755 3a21 52e3 8e44 6bc3 ba58 4204     .WUG!:.RD..kX..B
   95454:	5c7c 4f71 3d5d a07f 854c 8f78 e20c 9711     |\qO]=..L.x.....
   95464:	ce09 91c2 cec3 ad8f a629 d6bd ab6b 4926     ........)...k.&I
   95474:	9adb 2882 0f1b d95b 3f59 c2e8 d31d fb85     ...(..[.Y?......
   95484:	3ba7 833b 9dff ffc3 071e cc90 252e 8348     .;;..........%H.
   95494:	d9a4 0363 7ca7 5717 e079 4abd 1fe6 3c13     ..c..|.Wy..J...<
   954a4:	ad66 921f e255 f205 f077 9175 f3c6 6340     f...U...w.u...@c
   954b4:	753e e7b2 d7ac 00b3 3fb8 0830 1c74 ab54     >u.......?0.t.T.
   954c4:	2e5b 7200 fc02 5f14 2a27 44f1 9e26 c4aa     [..r..._'*.D&...
   954d4:	9953 a678 cf12 e264 4ab9 973c 8f89 e255     S.x...d..J<...U.
   954e4:	9e63 3aa8 7d97 aeab cf65 63aa afd9 56ea     c..:.}..e..c...V
   954f4:	aaf6 953a aa7d 452e 778f 575b 2047 207d     ..:.}..E.w[WG } 
   95504:	8c4e 12dd b43b f603 bdfb e92e fc32 25be     N...;.......2..%
   95514:	e87d 689a e097 b463 d4d3 4c21 9600 7e36     }..h..c...!L..6~
   95524:	d836 19a6 befc fd5d 9b5d 9823 da6c 6001     6.....].].#.l..`
   95534:	55d8 e9e2 1a33 ec1b 89c4 7a9e a942 b8a7     .U..3......zB...
   95544:	9a3f c253 6cc7 301e 9d04 603a c02d 9c5a     ?.S..l.0..:`-.Z.
   95554:	a9eb ce6c e58f 63d1 68a9 b06b 7794 aa1d     ..l....c.hk..w..
   95564:	f3b6 21d5 87ff b40e d5a7 227d 727e 3b50     ...!......}"~rP;
   95574:	1dad b3c4 387b 3c58 7ea1 7c37 ecb9 7ab5     ....{8X<.~7|...z
   95584:	f8fa 9bcf 5c31 baa1 23bc 8e03 9e39 ba6f     ....1\...#..9.o.
   95594:	de28 2c08 8719 3aa4 9f4f fb8d 1227 7695     (..,...:O...'..v
   955a4:	804f efc7 4512 3a41 9a8a 074d a3d3 04a4     O....EA:..M.....
   955b4:	9ca6 b358 60f7 e399 f904 3d66 a597 6cf0     ..X..`....f=...l
   955c4:	7414 d3a5 3d5b 279f 02f1 f8cc 6dd3 4a0f     .t..[=.'.....m.J
   955d4:	cae3 926f 0c62 9b97 1b2d 1990 e0bc 580a     ..o.b...-......X
   955e4:	6745 9941 4621 2f1c 3449 5bf4 a4ad e1ca     EgA.!F./I4.[....
   955f4:	1745 642b 34c3 110c 74b3 07e0 b051 d266     E.+d.4...t..Q.f.
   95604:	2767 cf4f e7fa a257 24c8 aece 02e1 12a2     g'O...W..$......
   95614:	4f01 b34b 6e69 94a6 f1ab 2938 334b 26f1     .OK.in....8)K3.&
   95624:	322e 1ddc f5a3 31e4 07fe c28c e8b5 fb7d     .2.....1......}.
   95634:	ff1b 93e9 f8f3 14c9 a346 d42a 70d5 91cd     ........F.*..p..
   95644:	5163 203e da97 ef47 fc6a cc74 341a ed86     cQ> ..G.j.t..4..
   95654:	fb2c d9f4 3663 9c58 a3b3 e9c4 b3d9 93a7     ,...c6X.........
   95664:	d62b 5a9a d716 fad8 264f 6c57 7c6c 1a5d     +..Z....O&Wll|].
   95674:	9ac1 66b5 5eae ecbd e9f8 6993 a62f d906     ...f.^.....i/...
   95684:	dd1e 34b9 ce92 a7c6 ae7c 46fa 8a3a 1e4e     ...4....|..F:.N.
   95694:	8c9f d0fb b11c 5c90 c705 e2d2 a67b dd61     .......\....{.a.
   956a4:	ecf0 8c84 3465 499a 6222 2d49 fce9 3e4a     ....e4.I"bI-..J>
   956b4:	560f bbf3 fa2d 1c9b e543 16f3 8514 577f     .V..-...C......W
   956c4:	a158 d545 ab5a dd79 7cac 969e 5870 c232     X.E.Z.y..|..pX2.
   956d4:	1319 5d4b 4073 0299 209d 4b2f 5c09 bf28     ..K]s@... /K.\(.
   956e4:	acbd e0a1 61d7 5348 4655 6d05 5927 346a     .....aHSUF.m'Yj4
   956f4:	6baa 7366 2207 ced0 eb64 c9fc ed15 1264     .kfs."..d.....d.
   95704:	aa4c b606 836e 67ee 516d c4f1 3872 fbf0     L...n..gmQ..r8..
   95714:	d95d 736e 6b5d ac13 d99f 2d95 78c9 7126     ].ns]k.....-.x&q
   95724:	7715 24a0 0264 c663 3e24 2681 11fd cb42     .w.$d.c.$>.&..B.
   95734:	3259 3a5f 8f20 8b33 0e8c 334a 8020 0261     Y2_: .3...J3 .a.
   95744:	42e5 73bb 019e d0d7 5a88 f095 7247 0c52     .B.s.....Z..GrR.
   95754:	5b30 d11a 3744 7daa 3e6d 3eed 5739 4167     0[..D7.}m>.>9WgA
   95764:	8180 37c5 e6a8 b201 1375 2d6c d963 be90     ...7....u.l-c...
   95774:	3b9a 4a14 79e5 0ad0 bbf2 4b56 cfe1 5a2c     .;.J.y....VK..,Z
   95784:	bb0a 4d88 541e 96bb 7f7b 6c1e 2d97 f2e0     ...M.T..{..l.-..
   95794:	bad6 62e4 7a92 8ecf bd0c 9482 3dbe 777a     ...b.z.......=zw
   957a4:	ebd2 b59f f5de 5f7a 1ef7 6a01 c593 b181     ......z_...j....
   957b4:	dd26 ad2a 2e85 b9f9 7761 79ba 0cd6 08c3     &.*.....aw.y....
   957c4:	c543 1d58 3746 cb8f d70b 8449 48fa 29ac     C.X.F7....I..H.)
   957d4:	4abb 7398 9577 5868 6d35 8d6a ab2b 6997     .J.sw.hX5mj.+..i
   957e4:	645a 8cbd bd7b 6d1f 1a9b 7d93 996d 7359     Zd..{..m...}m.Ys
   957f4:	bd01 ad81 daf3 c456 65e8 acdb 114c 23ee     ......V..e..L..#
   95804:	9f02 8116 23d2 480d 0d6b abd9 79e1 001b     .....#.Hk....y..
   95814:	7c1a 6c45 90a6 0a35 e1b5 3484 45bd 9e71     .|El..5....4.Eq.
   95824:	fbf8 9b24 c1e7 79f7 8f16 e0f3 9e79 1c01     ..$....y....y...
   95834:	65c6 3de0 57cf 9a45 c014 df22 c178 cf22     .e.=.WE...".x.".
   95844:	c272 d49e 2e96 69d2 199d 0748 9951 0720     r......i..H.Q. .
   95854:	9c9e 9f9c 0e25 6a02 6cfa 327a ab3d 714b     ....%..j.lz2=.Kq
   95864:	71c8 5ef8 374d 6610 e8a8 346d ba7a 34fc     .q.^M7.f..m4z..4
   95874:	bfb8 7207 0e25 25d1 d0a1 adbb 8ff4 78c2     ...r%..%.......x
   95884:	6113 0c29 a26d ce66 6a1f 9ded 4b35 6ec3     .a).m.f..j..5K.n
   95894:	0e60 664c 721e f9c9 ce7c f112 e2e2 f869     `.Lf.r..|.....i.
   958a4:	2c5b 69c7 ff0f e973 5f7f 7fe1 410e e91a     [,.i..s.._...A..
   958b4:	d751 1fd6 d3e6 f632 e7b7 be10 4f9a fa92     Q.....2......O..
   958c4:	0ac5 69d5 fb84 f758 1329 2ec9 6356 7dbe     ...i..X.)...Vc.}
   958d4:	b7b8 691e 7ac7 a67a b27b dcef ac86 46d8     ...i.zz.{......F
   958e4:	4499 0cd6 4d55 06b3 f0dd 5a50 9b87 b888     .D..UM....PZ....
   958f4:	a75f 888c fd83 d27f 7cdd c8b7 ea6f 9f16     _........|..o...
   95904:	8703 c95d 9eff c2cb 7fe0 29cf f070 e7bf     ..]........)p...
   95914:	9f75 7d7d 452a f8d7 53d5 5a9f 89ea 54fc     u.}}*E...S.Z...T
   95924:	a75f ebf2 7e4c cb9d c7af ebf2 fc89 2a7a     _...L~........z*
   95934:	9ebf ecb9 d2b6 a3ac 7ac9 02f7 fff8 09c5     .........z......
   95944:	4ed8 a92e 9a97 4b93 461a 93a3 1a4b a36f     .N.....K.F..K.o.
   95954:	4b93 c6ea 7272 8389 7468 8972 6d63 7274     .K..rr..htr.cmtr
   95964:	5389 9db2 e25c 1b84 5c9d bae2 3a34 c4b9     .S..\....\..4:..
   95974:	b3e5 5c9d e2e2 3a36 c4b9 36a9 b939 bc84     ...\..6:...69...
   95984:	2726 3297 d9ab a5c9 d22c e4ec 1452 39a9     &'.2....,...R..9
   95994:	14b9 cd19 2e4e 8945 2766 a297 cd44 a5c9     ....N.E.f'..D...
   959a4:	68c8 7276 4a29 3b34 14b9 6a25 2e4e 4645     .hvr)J4;..%jN.EF
   959b4:	93b3 b94b 4d2e 2e4e 8145 93ba ca4b 3a71     ..K..MN.E...K.q:
   959c4:	94b9 8d39 2e4e 8965 2746 a297 ed84 52e4     ..9.N.e.F'.....R
   959d4:	37a4 b93a 0514 9d1a 8a5c b602 4b93 de91     .7:.....\....K..
   959e4:	e4e8 1452 7468 2972 d80a 2e4e 7a45 93a3     ..R.htr)..N.Ez..
   959f4:	b94b 0d1c 2e4e 7e45 c9cd 6425 72ec a972     K...N.E~..%d.rr.
   95a04:	d915 e4e5 2b52 cbba a5c9 da2a e4e0 1552     ....R+....*...R.
   95a14:	e5d8 52e4 dc95 e4e5 9552 706c a972 ec0a     ...R....R.lpr...
   95a24:	7272 4aa9 72ee a972 364a b938 0554 3976     rr.J.rr.J68.T.v9
   95a34:	d4b9 77d6 93bb 554b b7b0 ccb7 8fe9 3cb0     ...w..KU.......<
   95a44:	847f f9e5 2c23 1fcf 7961 08fe f3cb 5847     ....#,..ay....GX
   95a54:	3f9e f2c2 11fc e796 b08f 7f3c e584 23f9     .?........<....#
   95a64:	cf2c 611f fe79 cb08 47f3 9e58 c23f fcf2     ,..ay....GX.?...
   95a74:	9611 8fe7 3cb0 847f f9e5 2c23 1fcf 7961     .....<....#,..ay
   95a84:	c7fe f2c3 4b70 6db2 96ae 99aa 8d43 aa98     ....pK.m....C...
   95a94:	d119 0c79 1463 4687 635f 1bb0 6847 471b     ..y.c..F_c..Gh.G
   95aa4:	1b20 d847 471a 1a90 2423 508d 7827 acda      .G..G..#$.P'x..
   95ab4:	60f3 3dd9 f955 8772 4bb9 17bd 4cdb a69c     .`.=U.r..K...L..
   95ac4:	0a2c 2b72 23ff 4151 cc0f 8da2 7b7a 3931     ,.r+.#QA....z{19
   95ad4:	d85f b21b dc9d dcd9 72f6 fae6 7999 4d4d     _........r...yMM
   95ae4:	2eee bb3a bdd3 1bbc 7ddb ff44 f9ea 0d27     ..:......}D...'.
   95af4:	db2b 36ea 2400 665a 6b09 71c6 4d9e ac92     +..6.$Zf.k.q.M..
   95b04:	4334 04d5 325b 8e67 7acc 24a4 a657 66ab     4C..[2g..z.$W..f
   95b14:	323d 2b92 a673 71bb edb6 8330 312d b677     =2.+s..q..0.-1w.
   95b24:	cde4 2d82 7391 e4b6 ea39 27d5 0ae1 7371     ...-.s..9..'..qs
   95b34:	64d7 270b 5426 4556 d4ba d2a3 d564 018c     .d.'&TVE....d...
   95b44:	3b44 4c9f ad7c 9df9 5d25 b536 c34c 7448     D;.L|...%]6.L.Ht
   95b54:	1a46 aadb fe01 f653 cee0 3576 e7cb 20c0     F.....S...v5... 
   95b64:	d20e e346 5c79 5f96 8846 2f2b f9b7 b715     ..F.y\._F.+/....
   95b74:	a83c f3e4 22d5 08db 60eb 95a3 5840 3f0a     <...."...`..@X.?
   95b84:	edb4 1504 4c8e 28fc 025c 31d6 cca7 d599     .....L.(\..1....
   95b94:	ea71 2ba4 e3cc d86a ced6 00e1 e8e3 cec7     q..+..j.........
   95ba4:	2171 86ea 1cd6 70fd 7300 63f4 b8e7 7d50     q!.....p.s.c..P}
   95bb4:	6b43 9faa 1de6 4277 af0a 03b5 ac9e b352     Ck....wB......R.
   95bc4:	50ad 0e67 2ad1 a6a3 adc0 1a44 cd4a 528c     .Pg..*....D.J..R
   95bd4:	d3ae ecf1 e9f4 d3e9 941a 5b70 170e c898     ..........p[....
   95be4:	272c f09c 175c d8a0 0259 1c1e d57d 9cb2     ,'..\...Y...}...
   95bf4:	d2b0 a0d0 2fab 1301 be8e 596a 784e 6869     ...../....jYNxih
   95c04:	eb50 d9ab c63a 0b0d b986 334c 58c8 76c5     P...:.....L3.X.v
   95c14:	8cc0 4c39 d007 b698 8d45 b350 96db 3e27     ..9L....E.P...'>
   95c24:	f27d 06ac 6836 e3b4 1982 ee96 1804 72cc     }...6h.........r
   95c34:	8b41 2e91 c1e0 df6e 774c 8902 9dab fb5a     A.....n.Lw....Z.
   95c44:	0602 f6ec 74cd 6027 dab8 ed11 9b37 b938     .....t'`....7.8.
   95c54:	5af7 3cd9 c335 5e83 0766 6830 7343 8240     .Z.<5..^f.0hCs@.
   95c64:	7766 08d6 db06 b08d 9fce 278e 1afd 700c     fw.........'...p
   95c74:	2b53 1817 2cc8 2427 5cf0 3017 59d8 df62     S+...,'$.\.0.Yb.
   95c84:	7d1d b2d5 509c d0d1 aba0 012f 8e03 6abe     .}...P..../....j
   95c94:	4e59 6908 5068 abeb 78d9 0dcd 8603 5b35     YN.ihP...x....5[
   95ca4:	a833 c558 4076 398b 074c 18c0 35cd ccc3     3.X.v@.9L....5..
   95cb4:	532e a4bb 34f7 5de9 c0d5 5986 b9d4 46a0     .S...4.]...Y...F
   95cc4:	38e4 8681 ba65 c660 11ca 5170 c7ef 71ce     .8..e.`...pQ...q
   95cd4:	8c02 35bb 3f47 2602 fdea 39d8 604e b771     ...5G?.&...9N`q.
   95ce4:	faa6 b669 744b 80c3 a86e 0cd8 6629 1da9     ..i.Kt..n...)f..
   95cf4:	6280 d10c 2701 9186 236b ec98 a0b0 ce4c     .b...'..k#....L.
   95d04:	9f4e 9c9c fe7f bf88 aecc 1eac d7e4 030e     N...............
   95d14:	fbfc fa62 4372 5da8 8391 88ff fbfb dc47     ..b.rC.]......G.
   95d24:	3fdf fee2 11fe f7f7 b88f d3bf 9934 ca4f     .?..........4.O.
   95d34:	d2a4 b7cc 27a4 e91d 4844 a33d 36f6 e4f3     .....'..DH=..6..
   95d44:	c93a 6f2c 03dd ef0d eddb f834 60e7 351e     :.,o......4..`.5
   95d54:	5e5c 0cb9 3d7b 8dcb 56d1 7cdb 74e6 1f6d     \^..{=...V.|.tm.
   95d64:	4b6f 48b5 0341 22db eebd f11f 7b73 db4d     oK.HA.."....s{M.
   95d74:	c3d3 f0a4 4053 87c6 07a6 ee13 4461 33ab     ....S@......aD.3
   95d84:	d14d dcb2 2ff4 346b 3709 65ff d6e3 0771     M..../k4.7.e..q.
   95d94:	a37b 6ac5 a55e b44b e757 b809 9761 fe4d     {..j^.K.W...a.M.
   95da4:	e526 b9e0 349b 387b 64f5 b336 897f 3477     &....4{8.d6...w4
   95db4:	8348 dc6e 95f6 51ec 32c0 3f77 7e6f b05d     H.n....Q.2w?o~].
   95dc4:	4f84 d8ce 356b e7e8 9ccd 6a9d b21e aed0     .O..k5.....j....
   95dd4:	4293 3e01 e3a4 d381 e157 19c0 6fbc 1f3f     .B.>....W....o?.
   95de4:	7a67 1a44 4fdd ab59 3fdb 032f ae65 cb5a     gzD..OY..?/.e.Z.
   95df4:	3cb3 3da1 9dbc d1cf b988 1c21 cc98 3b60     .<.=......!...`;
   95e04:	4eb8 4fca 59b1 399e 8581 1c3d b327 3e7c     .N.O.Y.9..=.'.|>
   95e14:	8e51 d05d 662b 0e8e ab48 b0db 556f 3a42     Q.].+f..H...oUB:
   95e24:	4594 7398 ac57 21f5 bd3d 5bee f347 6b74     .E.sW..!=..[G.tk
   95e34:	17a6 8170 77a1 cbb4 2040 556c 8ad4 c80b     ..p..w..@ lU....
   95e44:	4b1d 3964 fa3e 5ba1 499e 91b3 9aaf f0a9     .Kd9>..[.I......
   95e54:	68a6 b5b6 c7dd a36c 585f e8ad ae24 0312     .h....l._X..$...
   95e64:	61af 9542 922e 1c0e 789d 646e a02d 99d7     .aB......xnd-...
   95e74:	8291 2f05 470d 7422 dcb2 a707 aef5 eb57     .../.G"t......W.
   95e84:	4799 2c04 5b17 e086 c32c e2c6 a2cc c941     .G.,.[..,.....A.
   95e94:	631c a774 b1e8 61aa f30c ddeb 3063 18cb     .ct....a....c0..
   95ea4:	3063 f4b3 cc31 8daf 3c31 ab46 e6ec 78b8     c0..1...1<F....x
   95eb4:	6edc c653 642c 0a61 e6eb 96a0 4763 1c65     .nS.,da.....cGe.
   95ec4:	bbaa 635d cc6e 4e1c f4cc 443e c290 b8c6     ..]cn..N..>D....
   95ed4:	2784 473d 7340 4ddb e59c 7a19 f057 f142     .'=G@s.M...zW.B.
   95ee4:	8229 bbb4 354b 3544 19e4 ba8e d476 e943     )...K5D5....v.C.
   95ef4:	d12f b030 313e 7fe6 af64 11f6 745f 116d     /.0.>1..d..._tm.
   95f04:	c63b f0ae cd8e ec61 b0e1 b9c7 4e90 a0ef     ;.....a......N..
   95f14:	2f7b ef2f 68fc d8fb cc8e ba91 03fc 4d71     {//..h........qM
   95f24:	c714 6534 291c 6bb5 c932 9d80 797a b64a     ..4e.).k2...zyJ.
   95f34:	bb0b a430 8b05 8adb 0988 caba 2068 9cdc     ..0.........h ..
   95f44:	a5bf 2701 6e14 c72f d221 5355 842d 572b     ...'.n/.!.US-.+W
   95f54:	4bbb cd6a 6b39 acb2 5fba ed75 3126 2b6f     .Kj.9k..._u.&1o+
   95f64:	5c1e aefb 6046 e1d9 eb7c 1a8e ce7b 1496     .\..F`..|...{...
   95f74:	dbaa 0b92 d728 8af2 c563 e758 6b4d 9a7e     ....(...c.X.Mk~.
   95f84:	6c34 d508 20ed b2b5 0d59 4b89 ede2 d031     4l... ..Y..K..1.
   95f94:	cf6e d24c 7ead 9d03 5dd7 7088 da62 78dd     n.L..~...].pb..x
   95fa4:	caed 29b0 756f c8ef d97b 886e 7de9 9b6d     ...)ou..{.n..}m.
   95fb4:	fce9 3dda b853 b42f 42ab a991 d14f d43d     ...=S./..B..O.=.
   95fc4:	7313 cfae 736a f9ad 794b 4f6c 6ad6 76bf     .s..js..KylO.j.v
   95fd4:	3537 164c f623 9398 0d55 ef71 5aad d8f4     75L.#...U.q..Z..
   95fe4:	8dfa d9b5 5d12 72d6 74ad 4a7e c8d2 434d     .....].r.t~J..MC
   95ff4:	da04 763a ad27 9817 40e8 7e44 0dfd f90e     ..:v'....@D~....
   96004:	f924 9e14 5c0c 00ac 2911 044d 250b 1c38     $....\...)M..%8.
   96014:	8a34 1f39 8c35 eb8a 9ef0 a6a9 cbdd 212b     4.9.5.........+!
   96024:	7b65 a743 18da 40dd eb49 dfc9 ad23 ace5     e{C....@I...#...
   96034:	da11 0a5b 693b e173 d13f 55a8 098b 23bd     ..[.;is.?..U...#
   96044:	226e e47f 36c5 dbf8 7ec7 74c3 de16 4c39     n"...6...~.t..9L
   96054:	eb59 c39e 0f14 d84a 5246 c014 ece7 4835     Y.....J.FR....5H
   96064:	d147 439d 75e4 39ee f140 618c 1f1c e3ba     G..C.u.9@..a....
   96074:	4f84 ffe6 1ade b9aa 3e8b 5cec 8651 2a74     .O.......>.\Q.t*
   96084:	dcf1 2449 3eea 9bde afed 73a9 8b4e ae7d     ..I$.>.....sN.}.
   96094:	eab8 36f5 677f 755c c1a3 c687 6f55 c46a     ...6.g\u....Uoj.
   960a4:	e446 e5cd 711c f7d5 6c2b 55c7 aa6f 25b5     F....q..+l.Uo..%
   960b4:	baae e551 7141 cdd5 2416 6cd5 7f24 b8e6     ..Q.Aq...$.l$...
   960c4:	ceea 052e 59d9 b8ef ae21 bbba 3715 e1d3     .....Y..!....7..
   960d4:	f468 7101 8dd5 ee56 5711 4ebd 5832 eceb     h..q..V..W.N2X..
   960e4:	92ca 7f44 04ad b70d 7d29 3f1b f720 a6c5     ..D.....)}.? ...
   960f4:	ef1e 4237 49ce f629 3994 dea3 1742 e7ed     ..7B.I)..9..B...
   96104:	6b0b 3607 4632 4067 cd7a e8db f9ce 463a     .k.62Fg@z.....:F
   96114:	f7bb 0e7e f2f6 b63e 4a8b 6734 0fa0 e4f0     ..~...>..J4g....
   96124:	fbac 6cec c87b 5df9 76c4 e373 684f 88f2     ...l{..].vs.Oh..
   96134:	f678 e4c2 cb36 a35a 1aa1 5d58 b593 2add     x...6.Z...X]...*
   96144:	753a 2cbf 3c38 3ec1 b858 2cdb 5da2 1895     :u.,8<.>X..,.]..
   96154:	88fb 6368 2436 5112 523a 7acb 9da2 ab40     ..hc6$.Q:R.z..@.
   96164:	342a 7910 6778 0948 29eb 0aff bc29 986a     *4.yxgH..)..).j.
   96174:	51f5 818b 8ced a2b3 590d ac1f 350a b0d7     .Q.......Y...5..
   96184:	c673 8cbb b3e9 a811 16d8 497a 9dd5 f636     s.........zI..6.
   96194:	ce4f c1fd ca3d 71b2 9129 fc03 38d2 976b     O...=..q)....8k.
   961a4:	0010 da01 8421 f0e5 49d7 023e 9548 ec6c     ....!....I>.H.l.
   961b4:	fe42 7dda 3e7c a698 f273 3a13 ce5f 36e2     B..}|>..s..:_..6
   961c4:	88cf c31e 1d60 e413 6b20 967a 8ec4 3c3b     ....`... kz...;<
   961d4:	da08 8a76 74cf 6b17 743d ad68 dbe8 d221     ..v..t.k=th...!.
   961e4:	5742 da9a 996c b5c4 3050 f870 0a85 5e1c     BW..l...P0p....^
   961f4:	d7e5 f3d7 ff64 9e91 f18c 6b3f 27a4 f04f     ....d.....?k.'O.
   96204:	fdbf ba47 0c7b c84e 3b32 2030 96a0 eaea     ..G.{.N.2;0 ....
   96214:	665f 5b86 eb33 a76b f8f2 6a22 fa79 810b     _f.[3.k..."jy...
   96224:	d933 1235 1b95 cf6e 8fad cb45 8364 8069     3.5...n...E.d.i.
   96234:	5178 577e 18be 8ede e162 c59e 80d8 9577     xQ~W....b.....w.
   96244:	d26a da75 1cf7 6b40 e4f1 b93a e3db 8e65     j.u...@k..:...e.
   96254:	bbd5 4c47 ab00 1e77 4028 c56f 51d8 3c11     ..GL..w.(@o..Q.<
   96264:	95c0 eda6 119e 6063 09db 6bd8 2ca4 8122     ......c`...k.,".
   96274:	0a7d 4fcf e7c7 fb67 748f 18f7 9cb6 d142     }..O..g..t....B.
   96284:	7981 ed0a 5754 eeff 5853 accb 9daf 14f3     .y..TW..SX......
   96294:	3cf2 14fb 92d6 235d 3869 f585 fadc f658     .<....]#i8....X.
   962a4:	853e fcbc fcae a75d dad0 5dbb b6c5 c29f     >.....]....]....
   962b4:	f15d f62e 073d 29d6 d514 4f9a b0a1 d80f     ]...=..)...O....
   962c4:	8a43 f564 442e 5a4b c62b 0a8e 7d2d 9a57     C.d..DKZ+...-}W.
   962d4:	7bb6 ce96 f37f d809 a473 c618 36a3 27d2     .{......s....6.'
   962e4:	f3d3 ff64 ee91 c31e 5396 3a28 4f30 9da1     ..d......S(:0O..
   962f4:	eaea 7ddf 6b0a f599 73b5 429e 679e c29f     ...}.k...s.B.g..
   96304:	b25a 246b a70d 9eb0 1f5b decb 50a7 8318     Z.k$....[....P..
   96314:	c8ec 75df ad0a dbbd 6c55 29fb 6ddc b258     ...u....Ul.).mX.
   96324:	39df 4eb0 a8a1 7cd6 c90a 631e 45fb a648     .9.N...|...c.EH.
   96334:	3619 e002 1af6 09a2 2f63 3cc9 96a2 eda0     .6......c/.<....
   96344:	6e98 d163 f20c 87bb e2c6 d8dd 5f37 c9ef     .nc.........7_..
   96354:	ab93 7d93 b686 eba3 472d da8d cf35 9199     ...}....-G..5...
   96364:	eb54 7dd3 ccc2 6b1c 9c81 0b67 ec33 6583     T..}...k..g.3..e
   96374:	d5a6 6eba 5238 9656 f9d5 87de 8c89 b669     ...n8RV.......i.
   96384:	ee65 463a 8efa 2d6c fdb3 6d00 c935 0bd9     e.:F..l-...m5...
   96394:	ed84 8c0b 69d7 3a3e 4ac2 8f65 05f7 6bab     .....i>:.Je....k
   963a4:	e8f1 b5a0 6c62 b09b 7115 69a5 651b 9e59     ....bl...q.i.eY.
   963b4:	8334 5ef3 6523 9eb1 91ac 255e 9e4f 0052     4..^#e....^%O.R.
   963c4:	3da8 ba47 0c7b 4e5b e895 3cc0 7658 abaa     .=G.{.[N...<Xv..
   963d4:	f77f aaf1 d665 ced7 c879 9e78 ce7d c96a     ....e...y.x.}.j.
   963e4:	91ae 9c34 7ab6 7d6e 7b2c 399f 9261 23b4     ..4..zn},{.9a..#
   963f4:	d77f b3c9 6ef6 b157 e7ed 976f d379 e7be     .....nW...o.y...
   96404:	3ac0 a285 f35a e429 3ff6 bc7b 59a1 8b9d     .:..Z.)..?{..Y..
   96414:	3587 88d5 9cc9 4333 471c ce92 1b86 3d36     .5....3C.G....6=
   96424:	245b 7b19 920c 4705 06b3 9e39 c49c 67fd     [$.{...G..9....g
   96434:	0efb e772 b600 5249 eb58 2096 4cc5 f474     ..r...IRX.. .Lt.
   96444:	20dd b146 6af2 e64b a216 5650 864d a562     . F..jK...PVM.b.
   96454:	063a 24d1 b141 6b33 d8c3 7e5f 8cc2 b6bb     :..$A.3k.._~....
   96464:	ef67 9e94 bb18 a3b5 0ed4 c9d9 330e fdb1     g............3..
   96474:	de00 6c3a 56a2 61f3 a79b 07d9 c42b 76f6     ..:l.V.a....+..v
   96484:	b555 6c7a d118 204c 8cbf c33d dd84 5c12     U.zl..L ..=....\
   96494:	9036 41ad ee69 9725 31dd 1d20 e870 5f37     6..Ai.%..1 .p.7_
   964a4:	7d77 7579 875b 155d 0cf7 be52 ea35 c6ce     w}yu[.]...R.5...
   964b4:	5cb1 7776 837b 36b7 add6 8c45 a3e1 7632     .\vw{..6..E...2v
   964c4:	5be3 7c81 babf 5fc0 487c 77d7 439f 499d     .[.|..._|H.w.C.I
   964d4:	be6b 685c 2bcd b3d5 eb87 6985 7f6d b52a     k.\h.+.....im.*.
   964e4:	3fb6 6a95 ece8 e229 6d81 14bb f431 7a57     .?.j..)..m..1.Wz
   964f4:	e659 2b48 6a6e e86a cc2a ab57 caaa 4bb3     Y.H+njj.*.W....K
   96504:	d655 1950 604c 1b1f caf2 d5d5 d522 4d33     U.P.L`......".3M
   96514:	815d 9278 89dc 8fe7 cb9e 814e 9267 7fb6     ].x.......N.g...
   96524:	e70b 171e 0596 ab82 f6c4 d66c 376f eecd     ..........l.o7..
   96534:	1d34 31ff 9146 965a c14a 8196 4898 d2c6     4..1F.Z.J....H..
   96544:	49a6 554d 3338 4db9 7e56 21b3 af73 65ed     .IMU83.MV~.!s..e
   96554:	0818 5ec8 6e90 3fad f3f9 aecd 5887 2c77     ...^.n.?.....Xw,
   96564:	2b17 eadb 9e9e e8b3 d6f3 d55a b7b2 c1e4     .+........Z.....
   96574:	00a8 5401 34db 7a61 6c6a 1f86 0034 f753     ...T.4azjl..4.S.
   96584:	ac23 3ee6 4cea b1bc e19a cf0c 4f9c baaf     #..>.L.......O..
   96594:	a41d c4b3 5246 2e23 4095 528b 9eb1 7b3b     ....FR#..@.R..;{
   965a4:	815a 9245 1aad ff34 b2c8 eb87 0a9a 3fc5     Z.E...4........?
   965b4:	eb48 740d 1980 8168 3548 a3b7 8c14 7354     H..t..h.H5....Ts
   965c4:	d526 f692 2775 a4d2 0ccb 6adc 23bd de5b     &...u'.....j.#[.
   965d4:	9adb 81ec 44b6 d36b 8d52 4dc7 077a 7a6d     .....Dk.R..Mz.mz
   965e4:	d68d b12e 0b5e 5d91 c4ff 1c7e 627d a43e     ....^..]..~.}b>.
   965f4:	2d6e 0da6 9e7a 432e 20a5 c9fc 02da 1e3d     n-..z..C. ....=.
   96604:	50a6 d4b6 1cfc 651a 405b 7de3 d14c 469e     .P.....e[@.}L..F
   96614:	5b8b 57c5 a297 b6fc 27ea 41c7 9cc9 7fe3     .[.W.....'.A....
   96624:	d356 f317 22f4 886e 87d3 c52f 2a27 ecc6     V...."n.../.'*..
   96634:	5e55 06cd 835b d7da bb4c e8b8 19da b660     U^..[...L.....`.
   96644:	0a36 e571 723a 65d8 bae9 0721 697b 9a4e     6.q.:r.e..!.{iN.
   96654:	0a4d 4dbf d071 e194 8a1e deca a1eb e07f     M..Mq...........
   96664:	d07c 3edf 4132 3829 a6c6 1ab2 a746 b015     |..>2A)8....F...
   96674:	8b89 efcd cc6f c339 b1ed 9d0c 0c5a f5fc     ....o.9.....Z...
   96684:	597f d7e4 24e9 f17c d7f7 f598 8456 edf6     .Y...$|.....V...
   96694:	9f7e 8b8e ccbc 55a7 1af7 2b0f d3b4 324e     ~......U...+..N2
   966a4:	491a 8d34 65e7 0fe2 ca5c 16fa 46b7 ce28     .I4..e..\....F(.
   966b4:	cabc 9158 11b8 f223 a893 20e2 1d4a b37b     ..X...#.... J.{.
   966c4:	c518 e7ab 5228 0df7 4b2b 58f1 3bdc d44e     ....(R..+K.X.;N.
   966d4:	8a56 11c7 77bc 11fb 95c2 1fc6 ad0a d34f     V....w........O.
   966e4:	c94f 6064 138c 8b6d 82b9 d311 12a8 fe18     O.d`..m.........
   966f4:	33d9 338c b129 bd91 0d8e 09c8 2ad5 f6e9     .3.3)........*..
   96704:	ba0c fc59 2af1 3a2e 27d4 62d7 c96a 7846     ..Y..*.:.'.bj.Fx
   96714:	c329 a2ed e565 eeac 2d49 abb4 c4ec cd18     )...e...I-......
   96724:	cece b1cc 6f63 9bb4 1552 eeb7 63b0 42ab     ....co..R....c.B
   96734:	ef19 c78d 35c0 771b cac0 e296 904d d1a3     .....5.w....M...
   96744:	81c9 3246 e20b 8b62 9ac1 ad41 2834 d67d     ..F2..b...A.4(}.
   96754:	d41b 7128 e6ae 6a8a f53c 745e de27 ad0d     ..(q...j<.^t'...
   96764:	e218 4703 b87e 5f2b b1e3 d95c 3c9a 0d43     ...G~.+_..\..<C.
   96774:	deb5 4369 ee5f b42e ef96 6da4 66c3 11ef     ..iC_......m.f..
   96784:	385e c974 5a7a 6275 8ef0 25ac 8956 7db5     ^8t.zZub...%V..}
   96794:	a96e 674f 2d2d a9cb 29d4 a178 cf2a 51d1     n.Og--...)x.*..Q
   967a4:	998c 6e7b b6e5 21ec 74c8 8d5d dedb 5e78     ..{n...!.t]...x^
   967b4:	8348 3d1b d1c5 85dc 9cd1 b2e1 60d8 d90b     H..=.........`..
   967c4:	025a 6f1e 0eeb 7c41 a296 39bc 04b0 c09b     Z..o..A|...9....
   967d4:	eff5 e29c 7d10 3493 2327 4a96 7371 7bc9     .....}.4'#.Jqs.{
   967e4:	ce76 0870 ef3b 2472 0b1a e560 7ad4 1d56     v.p.;.r$..`..zV.
   967f4:	d7d5 80c1 9b3a afbc b695 8446 7533 c80e     ....:.....F.3u..
   96804:	b0c8 d3c7 0100 8176 f63d 618c 1d95 c45b     ......v.=..a..[.
   96814:	d35b f3fd ab5a ec12 c351 9a5a b4cf bc35     [...Z...Q.Z...5.
   96824:	cd27 48a9 a80d e77e b78a 9b6a 435a 4461     '..H..~...j.ZCaD
   96834:	d4b4 39ca cf11 c305 7631 4351 ff7d 2d69     ...9....1vQC}.i-
   96844:	edb6 fad3 2481 acc3 cdad e720 c763 3dc8     .....$.... .c..=
   96854:	1a31 8f72 495b ef1b 5023 f414 e383 9308     1.r.[I..#P......
   96864:	b746 5c4e 18f0 5c0e b5c1 68a7 2d88 7ba5     F.N\...\...h.-.{
   96874:	5e2d 9f7e d2cb 68cc b5be ec2f d5fb 0724     -^~....h../...$.
   96884:	7f35 8dba c9ce fb37 ab34 6a1a 7e2c 75b4     5.....7.4..j,~.u
   96894:	470a cf7b 68e3 a58f dc70 6453 adf3 c599     .G{..h..p.Sd....
   968a4:	50d6 75b0 eee1 2d46 b05b 7d8a 6f79 ebc1     .P.u..F-[..}yo..
   968b4:	4d77 0098 0365 a0fb d710 6fb1 ca1e 4436     wM..e......o..6D
   968c4:	05bf 6891 a983 aca3 907d 6b8c 3e97 fa03     ...h....}..k.>..
   968d4:	3676 6dbb b7b9 f620 b407 10f5 7f94 fdaf     v6.m.. .........
   968e4:	61aa faff 359a 07de dc0f 5fa8 6556 4e95     .a...5....._Ve.N
   968f4:	64d3 8a62 7550 c104 aa64 0590 0017 f0e7     .db.Pu..d.......
   96904:	bbd4 4909 c360 0132 3be6 12ae cb67 6c35     ...I`.2..;..g.5l
   96914:	e666 b718 837f 6fb3 9c31 6f3f 3476 acc3     f......o1.?ov4..
   96924:	dc03 cce8 be5d b981 8cda 7126 f315 e69d     ....].....&q....
   96934:	fa42 92f2 5e6a cd38 f6ce df2b dfe8 3042     B...j^8...+...B0
   96944:	9d05 40fe ed49 269d 3d0b 637f ba50 9ccd     ...@I..&.=.cP...
   96954:	db1a e6c9 d2bd 315a b11d 7b6b cbb1 4015     ......Z1..k{...@
   96964:	11a3 63a5 ca5c 5ba8 e593 ba36 330d a71b     ...c\..[..6..3..
   96974:	2877 b597 cabd 9875 6e66 822b 433b f2d0     w(....u.fn+.;C..
   96984:	352f 6fd6 7c18 9943 14fa 28f6 9ce8 bec8     /5.o.|C....(....
   96994:	015e 8eb6 4b6f a6e9 ee91 4559 d98c 4976     ^...oK....YE..vI
   969a4:	30d0 c69c f552 ec61 d455 325e 5f26 4bd2     .0..R.a.U.^2&_.K
   969b4:	bbe0 3364 61b8 0eee b370 d88b fe5d bc0b     ..d3.a..p...]...
   969c4:	3460 bc8c cca1 b05e d7b6 f62c b775 75b1     `4....^...,.u..u
   969d4:	5b7c df4a d613 c69a 06ec da8d 1a70 ed4b     |[J.........p.K.
   969e4:	6b09 96bb 06ac ad6b 802d 00e6 9d2c d7ae     .k....k.-...,...
   969f4:	61c3 b634 07b8 e5e1 f4e8 b5de 4a1e ef46     .a4..........JF.
   96a04:	5d31 fb71 0cbb 1b45 9024 1f75 3b0d 4a2d     1]q...E.$.u..;-J
   96a14:	beb7 3931 61ac 229b 6cb2 75b7 3dad 3a09     ..19.a.".l.u.=.:
   96a24:	5ac6 c4f3 84d3 1c20 0a2a 8d4d a3ed e1ba     .Z.... .*.M.....
   96a34:	d4d0 35a8 60d7 bf74 9cb5 6be1 8453 6a40     ...5.`t....kS.@j
   96a44:	5786 c3c3 1d6f 1b30 2db3 98ca 9dd3 4abb     .W..o.0..-.....J
   96a54:	8c68 8eed 16c2 5ffd 6d2f 6d89 be74 66c7     h......_/m.mt..f
   96a64:	764a fe56 8b57 b704 6bae 75cd f36f e966     JvV.W....k.uo.f.
   96a74:	55cc cdbd dca6 8de6 6068 7679 7757 3289     .U......h`yvWw.2
   96a84:	ac77 9ef1 b83b d947 aced bee1 ba42 eb6d     w...;.G.....B.m.
   96a94:	7b67 b6ac a471 29e3 1e45 9eee 1df3 79cf     g{..q..)E......y
   96aa4:	3949 3c74 e55c e448 78e2 7014 9595 4602     I9t<\.H..x.p...F
   96ab4:	2667 ea7f e670 ded5 3e4b 69d7 b3bf 523c     g&..p...K>.i..<R
   96ac4:	8638 40fe 7158 49ac 7f16 6bbc 5272 d9c1     8..@Xq.I...krR..
   96ad4:	4b2a 8547 5cea d3cc 6e5d 4523 8bb9 a778     *KG..\..]n#E..x.
   96ae4:	c983 edda eaa7 2d8a bf90 f3ef 2ef2 90a3     .......-........
   96af4:	dab1 03da d0be 7803 43dc 1005 0147 dfb3     .......x.C..G...
   96b04:	3d46 5602 707f 457f d700 3d8b d5f4 6fe2     F=.V.p.E...=...o
   96b14:	81f2 43fe 8b1b 6a4c 45b4 3351 e16e 9d3f     ...C..Lj.EQ3n.?.
   96b24:	a9cf 2325 e136 5d22 df5c d129 84ac f40a     ..%#6."]\.).....
   96b34:	546f 35de ebb9 c696 a2d5 0224 ae91 6538     oT.5......$...8e
   96b44:	a180 4f04 1451 cd36 1838 bb27 6cfc 4bec     ...OQ.6.8.'..l.K
   96b54:	b4e3 7fb8 ab6d 9737 ae16 0a6b e69a 2b8c     ....m.7...k....+
   96b64:	db55 7abc a99e dbaf 4d64 7277 d272 ed1c     U..z....dMwrr...
   96b74:	44c2 8de6 c680 d98d c8d5 43e9 d809 4934     .D.........C..4I
   96b84:	ed87 be26 8aa1 3dda ff73 a56b e360 f4ea     ..&....=s.k.`...
   96b94:	cd69 7b0b 0363 15bb 9419 6c5c d2ab c342     i..{c.....\l..B.
   96ba4:	b61c f40a 4db6 96ca ed08 5a55 9de9 28d4     .....M....UZ...(
   96bb4:	a6ed d7f9 abe1 84a9 6b0d e58d d074 61d6     .........k..t..a
   96bc4:	798a 7e86 32c8 0cc2 cf1b f73d bd37 c1c7     .y.~.2....=.7...
   96bd4:	1ffb ba9e 6a79 5028 1b29 32cb cf9d f42d     ....yj(P)..2..-.
   96be4:	6664 e9a8 3bda 4a28 411c 4b6d d63b 602c     df...;(J.AmK;.,`
   96bf4:	ae4d ac96 a8cf 599e b6d3 566b c3a7 ca06     M......Y..kV....
   96c04:	b20a 67dd 6556 4369 91e6 ed5e aa17 9c26     ...gVeiC..^...&.
   96c14:	d9b1 1a8d 8a1e fe11 8815 7ee0 7fe7 63ef     ...........~...c
   96c24:	2daf 234d 7d0e 5a38 7ed8 f62e 1339 1aff     .-M#.}8Z.~..9...
   96c34:	f054 402f ff03 5303 1e75 a87d e1d9 76ea     T./@...Su.}....v
   96c44:	5314 b3a5 338c 32db 28c0 bdc3 d554 5ee9     .S...3.2.(..T..^
   96c54:	841a a70d f3f6 43ef c71e 3698 cb9d a043     .......C...6..C.
   96c64:	82f2 b8f7 09ee 44fc d7f5 4010 9765 9fbe     .......D...@e...
   96c74:	df03 d6ed e411 9f8a 161a fa95 d280 42f0     ...............B
   96c84:	018b 31f6 532d 157c 14b2 ce29 dd35 a60a     ...1-S|...).5...
   96c94:	716d ac6e 235e 57a1 f3f3 27d5 2348 f50d     mqn.^#.W...'H#..
   96ca4:	f393 40f3 affc f7db 88f7 661a 9c0d 490c     ...@.......f...I
   96cb4:	4454 ddb3 c768 b598 53e6 d2d4 b502 3dd4     TD..h....S.....=
   96cc4:	5eec 066b 042b 0774 62e9 1799 0c55 d6d3     .^k.+.t..b..U...
   96cd4:	b924 aa5a 95e5 a35b f9fa aba2 bbb2 ca66     $.Z...[.......f.
   96ce4:	6c2b 6adc 56a7 4b5d 1539 d926 845c fa79     +l.j.V]K9.&.\.y.
   96cf4:	9676 e5d9 fbf5 0db3 d886 f11a 705c d3d6     v...........\p..
   96d04:	6115 bf25 f673 d214 167d 2f17 502f 9b1f     .a%.s...}..//P..
   96d14:	7d71 4873 c729 32f1 fb51 39fd 7387 ebd2     q}sH)..2Q..9.s..
   96d24:	cf91 c444 313e 3e30 6f50 4abe c101 9ad5     ..D.>10>Po.J....
   96d34:	2a6d 8ec1 96a3 adbf 55ae aeeb 27ee 5073     m*.......U...'sP
   96d44:	a673 e5b9 fc00 30bf 9eea cf45 ea6c 7790     s......0..E.l..w
   96d54:	d867 58f8 515a 4084 1f76 ad72 fb35 c141     g..XZQ.@v.r.5.A.
   96d64:	a709 3875 95b0 0dd6 737d 0edd d4e9 9eb2     ..u8....}s......
   96d74:	e943 6327 e0ff 485a 274e 10cc 1fc7 cb6c     C.'c..ZHN'....l.
   96d84:	3ddc 1da1 dd83 4931 622c b8a8 cb9b eae9     .=....1I,b......
   96d94:	4ee4 29a2 365b 3465 d7d1 0708 e26c e60a     .N.)[6e4....l...
   96da4:	d136 0a45 de5b e9c7 d446 4c2e 11b3 9e8d     6.E.[...F..L....
   96db4:	6950 a2cd 9da7 784b 20a1 65b4 1a34 0bd4     Pi....Kx. .e4...
   96dc4:	f030 8b37 fdd5 aad6 1655 88fa ea0d 86ea     0.7.....U.......
   96dd4:	da23 8dfa 3e1a 9943 cf5b eb0a 5a72 d8f7     #....>C.[...rZ..
   96de4:	4f4d f73a 6db7 efb9 937b a931 56ba 91b9     MO:..m..{.1..V..
   96df4:	eadd b0a6 1d6a 4ea4 265c 27af 6a27 4f8b     ....j..N\&.''j.O
   96e04:	2f6a fd48 6f5a b9aa d523 b6b0 672a 1cfb     j/H.Zo..#...*g..
   96e14:	be7e 061b 28d1 51fb d6d2 19f0 2145 7568     ~....(.Q....E!hu
   96e24:	b8a4 e793 8973 eea9 b827 88e7 d1aa 8073     ....s...'.....s.
   96e34:	e3b3 12aa 5ac1 fb55 5b2d d511 7db4 b864     .....ZU.-[...}d.
   96e44:	aeab 498d 8a94 cae1 3b79 a82c 7dd8 7a6e     ...I....y;,..}nz
   96e54:	69a6 2d24 6adb d828 c355 3058 7452 0bed     .i$-.j(.U.X0Rt..
   96e64:	d76d 6b13 b76d afd4 e5ad d55e 342c bdb1     m..km.....^.,4..
   96e74:	4d6c ab64 c8f9 0dd8 0857 353a a961 2276     lMd.....W.:5a.v"
   96e84:	50b8 12de 3458 1503 7f49 606b a945 4d7a     .P..X4..I.k`E.zM
   96e94:	7cc3 7f47 71f1 cdb8 3dde b209 51f7 7443     .|G..q...=...QCt
   96ea4:	9cd0 e4cc c34c 5a5c 7519 c055 2645 d1ce     ....L.\Z.uU.E&..
   96eb4:	aed3 463c bf0e 7bcc 0930 633b 6e4b 3273     ..<F...{0.;cKns2
   96ec4:	ccdc 0450 b95b cf8d d4d7 b71e ac37 67d6     ..P.[.......7..g
   96ed4:	9d0b 6f50 77f3 4e86 1a30 687c 84e8 46a6     ..Po.w.N0.|h...F
   96ee4:	ed6c e695 0e72 8f45 0afd a1db 9a13 6d6a     l...r.E.......jm
   96ef4:	9d09 5460 5079 04e8 05b3 30e9 48df ccfe     ..`TyP.....0.H..
   96f04:	13a1 5d9c d08a f509 1b8e 2742 5bb8 6b71     ...]......B'.[qk
   96f14:	3871 7d1a e840 a304 7b95 4e84 79d8 d6b7     q8.}@....{.N.y..
   96f24:	598e a05d dfb9 ad59 06cb c66c 6065 3571     .Y]...Y...l.e`q5
   96f34:	623a d5ef fd59 4dbd b44b dc41 ef0b 375b     :b..Y..MK.A...[7
   96f44:	b34d abd8 3bf7 5e64 5e6e ddda c3e5 df95     M....;d^n^......
   96f54:	d105 14ad 7008 74dc 58c9 e327 71a9 a255     .....p.t.X'..qU.
   96f64:	2615 12f7 d063 8ed1 2c8a 56b1 53f3 d469     .&..c....,.V.Si.
   96f74:	567c f7af a74c 8158 310b bbcb 627a f9d7     |V..L.X..1..zb..
   96f84:	9a6e 1b15 bfab 2ac4 5b59 7b8d c630 1fb1     n......*Y[.{0...
   96f94:	68ac a17c f3c3 16fa c077 bf86 b30f 8b05     .h|.....w.......
   96fa4:	d249 49fd 2b6d 9168 ee6d 7b32 cdbd 33ee     I..Im+h.m.2{...3
   96fb4:	5a36 de5d 93ce 4f27 cb1a 3a49 8f6d 3869     6Z]...'O..I:m.i8
   96fc4:	23d4 16b6 6cfb c193 4d16 fc99 52ce 8c7b     .#...l...M...R{.
   96fd4:	5ef1 5aef 21cc f6f9 ea11 233e 2bf6 cfb7     .^.Z.!....>#.+..
   96fe4:	9b28 40b4 ddc8 83ca c340 c850 6fda 3a7e     (..@....@.P..o~:
   96ff4:	1c67 28ec a4d4 b225 1757 771a e0dd adb3     g..(..%.W..w....
   97004:	7aa1 be4d 1769 5ba0 deee 9c67 40b6 8f53     .zM.i..[..g..@S.
   97014:	51d9 9f66 dd0d 4ca1 5dc3 bbdf 94e2 5135     .Qf....L.]....5Q
   97024:	8e01 b66e 9d70 9dfb bdf4 cff9 d5fb 9cfd     ..n.p...........
   97034:	c138 cddd 885e 4762 87d5 f14e a333 8694     8...^.bG..N.3...
   97044:	f64e 33c3 2b3b 783f 0f92 48c6 738d 7dd5     N..3;+?x...H.s.}
   97054:	6e30 4b83 bf87 a541 606f b054 3b3d 5b3a     0n.K..A.o`T.=;:[
   97064:	5db5 361a dfe6 cbab efba 3dc2 364a 32fb     .].6.......=J6.2
   97074:	31dc 7be8 b155 4bb7 224e 20cd 4ca3 f4f6     .1.{U..KN". .L..
   97084:	eed2 9f3a 85bc c4dd b391 b5a0 ee52 c632     ..:.........R.2.
   97094:	9be8 3182 33ec 4136 34a1 a7f6 4f53 c6db     ...1.36A.4..SO..
   970a4:	40de 3511 fb16 33ac 23a8 adba f6a5 e318     .@.5...3.#......
   970b4:	353d e27d 27d3 b6cf d08f a981 9476 67db     =5}..'......v..g
   970c4:	4d94 27f8 e38e ad87 93a6 6222 2fc1 d476     .M.'......"b./v.
   970d4:	31d9 1ddc d114 5d5e 4dec d911 6bd5 9114     .1....^].M...k..
   970e4:	a05d 114e 88c1 3d9e d27d bedf 16a9 b435     ].N....=}.....5.
   970f4:	cca5 9b3e 83b9 621a 7650 6a2f d1c8 d34d     ..>....bPv/j..M.
   97104:	6645 0af9 37bb db92 a0f2 35c0 1fa0 ba7a     Ef...7.....5..z.
   97114:	47ef ddbf 81ab bbdd 2fb2 f6fd 313b bed8     .G......./..;1..
   97124:	dbf4 abfd 743e 9f8a 0119 4fee 3dbf f2a4     ....>t.....O.=..
   97134:	2783 60f9 d9fc d738 4a26 55cb 05ce f542     .'.`..8.&J.U..B.
   97144:	db0a b7e8 a15a 95a6 d370 bb3d 6cba dfa4     ....Z...p.=..l..
   97154:	95b6 49dc 35bf fa0d 555e edec 74da 0aaf     ...I.5..^U...t..
   97164:	5d40 62e3 b8b5 af92 4f91 3bc5 4394 cf1b     @].b.....O.;.C..
   97174:	fd76 2bba 9d42 48fe baae 35d2 7558 be99     v..+B..H...5Xu..
   97184:	e655 9e68 5786 dc09 e832 9d8d 13fb 7e3c     U.h..W..2.....<~
   97194:	c707 e7a6 57c9 f233 33fa 7c30 abb2 8426     .....W3..30|..&.
   971a4:	a3aa 3fee 1973 9cc3 0948 fdc2 60ac 6ce9     ...?s...H....`.l
   971b4:	d709 f4b7 e596 959a af6a 2b3e 172b abcf     ........j.>++...
   971c4:	0099 6307 cbbb c73e 60eb f983 43c8 aa7d     ...c..>..`...C}.
   971d4:	d76e a875 5edb 1319 8c30 ecc1 19d9 3499     n.u..^..0......4
   971e4:	f353 603d 6f6f 5639 3d96 cd06 ac6a 0436     S.=`oo9V.=..j.6.
   971f4:	8f2d b046 c645 cdbe 4f45 57bd 3e85 64ed     -.F.E...EO.W.>.d
   97204:	ecee beb0 eed1 940a d7b3 316d 8ab9 b74f     ..........m1..O.
   97214:	51f0 b35a 15da 4ae8 0c75 bac4 9cb8 3879     .QZ....Ju.....y8
   97224:	c6d2 2d8c 6a6d 5433 4afe cf7e 6b5c 41e6     ...-mj3T.J~.\k.A
   97234:	a77a e5fa 4ee8 0d77 bed5 1ad2 eb72 604b     z....Nw.....r.K`
   97244:	6d64 796d 8dff d27e df3b 793d 08c3 754f     dmmy..~.;.=y..Ou
   97254:	8e88 6c39 c34c 18d3 d9b2 b161 6f5e f9ab     ..9lL.....a.^o..
   97264:	3b8c 1df2 4c87 bd3f 9b8f f60f 6763 4ddf     .;...L?.....cg.M
   97274:	bb67 bd9e 78eb de3f bc72 beed 45cb 0d7d     g....x?.r....E}.
   97284:	9a59 86b1 176e f502 b696 60ac 7f3d 0ac7     Y...n......`=...
   97294:	369e a0af efbb 15c6 65ac 5aef d3c1 2b2d     .6.......e.Z..-+
   972a4:	fa28 e006 7ade da81 43f4 a2cd b786 72d2     (....z...C.....r
   972b4:	a5df c194 c1e7 69be dbd0 722e 5ca6 e675     .......i...r.\u.
   972c4:	03d2 ebdc b406 eff4 e5ce 5b44 25d6 5220     ..........D[.% R
   972d4:	65ee cbeb 9d30 b168 419b 352d f63d 6693     .e..0.h..A-5=..f
   972e4:	e9a8 c916 cbc2 f922 e698 52ab 20ab b493     ......"....R. ..
   972f4:	4c4a 8aad b017 a3b0 6499 c64e 138d 0c8d     JL.......dN.....
   97304:	45ea 6a84 4c9a a89c a989 9850 243b a6f7     .E.j.L....P.;$..
   97314:	927b 5a2c c7dd cff8 b269 0ed0 93d2 3ff3     {.,Z....i......?
   97324:	de1b 9e43 bcd4 d887 db3e b30d ddac 4d5e     ..C.....>.....^M
   97334:	e2ae 6132 64f1 fd8c 9eed 279c 4d8b 46cc     ..2a.d.....'.M.F
   97344:	d7cd fc43 cfda bc57 eb19 cf87 4c3f cb16     ..C...W.....?L..
   97354:	d6ea ca32 9f21 5c98 a4c3 0246 7b0a de1b     ..2.!..\..F..{..
   97364:	96c0 67d7 dd61 946b cd1b 648a f92a 570f     ...ga.k....d*..W
   97374:	e356 11f3 2fc5 cd17 0239 5b1d 905c ce51     V..../..9..[\.Q.
   97384:	add5 b599 71eb d58f 4471 b576 e784 3946     .....q..qDv...F9
   97394:	b757 d666 092e ab1a 8763 b4b8 22a2 42aa     W.f.....c....".B
   973a4:	0eae f4b5 49c6 6c52 d14e 2390 9ffa 0315     .....IRlN..#....
   973b4:	28ce eae7 ccd3 ea6a 4596 9431 5210 7b0b     .(....j..E1..R.{
   973c4:	c566 d2c2 398b 48e1 69cf 93ea 6e45 f0db     f....9.H.i..En..
   973d4:	5a60 056e 152e 4473 390f ae82 9ff5 1dd4     `Zn...sD.9......
   973e4:	d8f3 40d8 873b 6226 3a68 0ee8 b09c 078f     ...@;.&bh:......
   973f4:	2722 db3f dd27 9a7b f35b 66d1 df53 b476     "'?.'.{.[..fS.v.
   97404:	0699 288d 2869 8942 4a90 8b80 3758 1702     ...(i(B..J..X7..
   97414:	5fb1 c30f ca45 572a fbd2 ac17 4441 7872     ._..E.*W....ADrx
   97424:	3335 40f5 a858 2885 9f71 d610 b1a6 a8b1     53.@X..(q.......
   97434:	73aa 447d fc27 bc02 5e79 9a15 a907 bad3     .s}D'...y^......
   97444:	1ff1 b125 d3c6 966c 6914 c5b5 8655 b16c     ..%...l..i..U.l.
   97454:	9dd5 03f5 e7ed 7fac b467 17a1 95b5 2cdd     ........g......,
   97464:	560f 3627 9dd4 f4f4 2e9e 8566 28ee 0f94     .V'6......f..(..
   97474:	ffa8 ff18 e8db 1386 b66a 670e da50 65c0     ........j..gP..e
   97484:	3b95 7fcb 1730 9758 22e3 3249 c066 5755     .;..0.X.."I2f.UW
   97494:	aa8a 29ad fe53 5a7f 9757 233e d15f 01ce     ...)S..ZW.>#_...
   974a4:	a41a 1e9b 8807 436b 9331 6d93 ad8b ef96     ......kC1..m....
   974b4:	93f1 532e abb3 5066 8b20 79d3 2843 938d     ...S..fP ..yC(..
   974c4:	4926 db93 c64b 1c83 384d 05c2 d169 80a4     &I..K...M8..i...
   974d4:	6956 4f75 2458 4029 9de3 557c b159 5ca8     ViuOX$)@..|UY..\
   974e4:	b625 6b67 6ef3 eb91 4091 7025 244f 54ea     %.gk.n...@%pO$.T
   974f4:	76e8 5a0a 8944 5558 c111 b412 8924 5411     .v.ZD.XU....$..T
   97504:	cb8a 07f9 a80b 0fa7 3ba7 978e ff24 8cd2     .........;..$...
   97514:	0c69 5a09 073c aa14 c538 fbf3 e61b 04ba     i..Z<...8.......
   97524:	d465 6b6a 6676 56aa a75a 1593 7f62 fc98     e.jkvf.VZ...b...
   97534:	c2d6 bcfb c5c8 e032 ab1f be9a 2cb1 b472     ......2......,r.
   97544:	a3b4 f1c4 0186 1710 4969 6c44 2660 8da1     ........iIDl`&..
   97554:	9de8 f409 eea7 b08a f38c 74bc e7d5 4d39     ...........t..9M
   97564:	1f98 9de1 a22b 3ad2 56ba 2760 e401 7a8c     ....+..:.V`'...z
   97574:	df5e 1944 dd02 ac89 03c4 5984 5f54 417c     ^.D........YT_|A
   97584:	3c19 ffc6 c144 54ad 3392 b4a0 6063 5d14     .<..D..T.3..c`.]
   97594:	39da 93aa a7f3 49e3 28df 73b7 bb48 2948     .9.....I.(.sH.H)
   975a4:	8c67 c75d 44a8 5dc0 c0e7 de92 a4d3 6577     g.]..D.]......we
   975b4:	dd17 b639 f41d 3396 a920 6863 3a3c 7ba9     ..9....3 .ch<:.{
   975c4:	6764 4fa7 ce4e 92ad 03cd bffb 0702 487e     dg.ON.........~H
   975d4:	a76e bc45 ca48 4616 2a71 f760 cc3b b414     n.E.H..Fq*`.;...
   975e4:	9748 7949 2d37 a8d0 8d51 025b 9a34 b718     H.Iy7-..Q.[.4...
   975f4:	9b7a 772a a2e6 e371 ffe6 0bfe eedb 168a     z.*w..q.........
   97604:	6cef 502f 342e 5f55 06f7 0e97 5daa 2c7a     .l/P.4U_.....]z,
   97614:	79af 9654 0411 e1c9 16d0 b2c7 b1da e06e     .yT...........n.
   97624:	1b4f 8875 58b7 74ed 7334 231a de20 25be     O.u..X.t4s.# ..%
   97634:	371d 4d1f 180c 6770 4600 b32b c731 375c     .7.M..pg.F+.1.\7
   97644:	c3be 4093 f2a5 9694 beb9 9b35 3132 163e     ...@......5.21>.
   97654:	b2f8 c323 9d86 4f9d eb92 61c0 7446 b7ee     ..#....O...aFt..
   97664:	ce4e 1cff f768 ed4e 79f7 cfef 350d 739b     N...h.N..y...5.s
   97674:	589e 586d fdbf cdba ac28 ffdb 06f7 fffd     .XmX....(.......
   97684:	11a5 39d3 cc23 de40 0c0d 9240 a471 2244     ...9#.@...@.q.D"
   97694:	b04f 4dc0 5740 c19c 09f4 5d8a a978 2275     O..M@W.....]x.u"
   976a4:	af02 e0b6 49e6 e033 f084 dc54 d2bf 6bbd     .....I3...T....k
   976b4:	9398 c51a 1a45 3e77 f3c6 0255 6abc f5e4     ....E.w>..U..j..
   976c4:	cbbd 6b60 1381 f2ef 714e a705 55b5 cbb2     ..`k....Nq...U..
   976d4:	a0f7 16bc ce95 faac 9330 cb69 c72e f79c     ........0.i.....
   976e4:	814e 76ce e16c e06a ac0f 07f1 a8d6 d88d     N..vl.j.........
   976f4:	bb82 121d 1dbd 6740 fed7 e203 80fe 5db8     ......@g.......]
   97704:	b710 aa5b 03bb 1ce8 fc0d 7701 c07f 2edd     ..[........w....
   97714:	dbb8 d629 01df f576 7ffa dd40 501f 80e7     ..)...v...@..P..
   97724:	923a 0746 0fec a9f0 db93 171a 5bfe d28e     :.F..........[..
   97734:	b374 8b64 31fd 7fac b049 c946 18ae 3c9f     t.d..1..I.F....<
   97744:	01a8 27eb fabf 1925 b657 42cf 8796 d7ca     ...'..%.W..B....
   97754:	3088 7785 5691 a5af be5a 0160 c991 8787     .0.w.V..Z.`.....
   97764:	1069 b3dc 30cb 1e2f 1986 2ab1 c1d3 91e7     i....0/....*....
   97774:	5dbb c64e 1bd5 258a 3c94 d9e9 00ee 1b7b     .]N....%.<....{.
   97784:	c5fb fee5 c71e de1d efa7 4311 bd43 9b1c     ...........CC...
   97794:	d8e3 162b 2eda 3d15 cdbb 81ba edb5 6b1d     ..+....=.......k
   977a4:	4e87 5b9e b04d 91d6 7478 1432 dc26 8e65     .N.[M...xt2.&.e.
   977b4:	f7cc 0629 ec16 cdc9 19de 9653 cb5e d96f     ..).......S.^.o.
   977c4:	1209 4526 abc5 d5f1 b8b3 515e 1869 e958     ..&E......^Qi.X.
   977d4:	945b 8c48 ecb1 9dd0 dfb7 84f4 46e6 98d0     [.H..........F..
   977e4:	9f23 9b7a 9bf2 7c1e 54b9 574d 6db5 a36a     #.z....|.TMW.mj.
   977f4:	b971 0d76 21eb 6915 bbbc 4836 df4a 1ff7     q.v..!.i..6HJ...
   97804:	ee32 fdcd bbc7 56a3 60c3 7375 e732 0aca     2......V.`us2...
   97814:	8811 bd3b 4f69 ee79 553d 1b33 1f9f 869a     ..;.iOy.=U3.....
   97824:	8f75 db5d e151 5ba2 e22e fcf9 f5fe 56b6     u.].Q..[.......V
   97834:	37bb ed6c 6d55 58c7 d577 5ede 3b79 3f50     .7l.Um.Xw..^y;P?
   97844:	dab0 11ae a8ef 954d 9d77 a6a7 728d 8b9f     ......M.w....r..
   97854:	4bed b5b5 1ece e927 b3e9 34e9 d7e9 28c6     .K....'....4...(
   97864:	4d45 f8fb 8f29 a8f7 5cdd 5f68 d4b4 40d8     EM..)....\h_...@
   97874:	fdd3 f321 37f7 6a43 436c 3d3d 2f6f 6bb0     ..!..7CjlC==o/.k
   97884:	262c d9ba 243a 354a ec5f 21f0 6ecc c498     ,&..:$J5_..!.n..
   97894:	5b33 e21b 9e72 5778 86d5 0f12 1fdf ddac     3[..r.xW........
   978a4:	20b8 b994 818f 7b3f 7509 d037 2dbc ee5a     . ....?{.u7..-Z.
   978b4:	21d6 fe7c 110d 8ba2 6ded 3131 bc48 ed47     .!|......m11H.G.
   978c4:	42e6 df0f de19 e340 88ca 3dfc 8556 083f     .B....@....=V.?.
   978d4:	b637 bcd1 6645 5d81 f963 1bfc 99c5 edfd     7...Ef.]c.......
   978e4:	63b3 8372 7778 c6e5 0f32 25df bf56 6171     .cr.xw..2..%V.qa
   978f4:	f678 7b3e 9ec4 9bc6 689a 22de 7f23 40c7     x.>{.....h."#..@
   97904:	ff3e 9906 ad3c c9d3 b9dd fb83 3c31 496c     >...<.......1<lI
   97914:	cb06 b08a ca8b 59e0 4dcd c9df 98fd adc7     .......Y.M......
   97924:	3eca 67ae e66c 120e a7ff 4bbf ccf7 ec17     .>.gl......K....
   97934:	42c6 cc7c de4c 6ba0 8926 b10c 8d60 34de     .B|.L..k&...`..4
   97944:	3ab7 dccb d662 c3b0 42da dbeb eb19 bb83     .:..b....B......
   97954:	b006 22c8 af56 ab4a 7279 d5b7 a18f 65a6     ..."V.J.yr.....e
   97964:	a4f0 2bae 35a4 ed23 adba 69cc 579e 28ca     ...+.5#....i.W.(
   97974:	5f43 1d96 ae9a f7a6 7751 a6e0 b5a6 db72     C_......Qw....r.
   97984:	f0ad 5d21 4b34 7a49 228e 1c35 5772 a6f7     ..!]4KIz."5.rW..
   97994:	a83d 4085 35ad 0ba3 5a35 4a7b b63c fe78     =..@.5..5Z{J<.x.
   979a4:	0bdb 8c30 95fe a400 4db5 6238 60c5 9df9     ..0......M8b.`..
   979b4:	ae0b 3a3a e032 3021 f721 db68 377a 8389     ..::2.!0!.h.z7..
   979c4:	52b8 9c8c 6b2b 3851 a08d 2450 5ea8 73c7     .R..+kQ8..P$.^.s
   979d4:	bf1d 453a 2e52 acf3 2d24 4a63 0469 bb07     ..:ER...$-cJi...
   979e4:	19bc 9084 cd72 a620 bd7a e4bd 7b59 e86e     ....r. .z...Y{n.
   979f4:	073d 5172 c221 5332 030a ab14 f349 3fc0     =.rQ!.2S....I..?
   97a04:	3f6b cfb3 0fd3 cc42 c4ff 767c 33f6 6fdb     k?....B...|v.3.o
   97a14:	7fc3 0edf be7c fe35 ab7c 7bf8 e9d6 7fee     ....|.5.|..{....
   97a24:	c409 a0f5 ffb5 0842 1cff ecdd 35b1 23ff     ......B......5.#
   97a34:	34dd e6cf adb3 67fe df5b b6cf bf82 8d63     .4.....g[.....c.
   97a44:	76ee a698 b7ba 8f49 cb38 d046 b438 4ba6     .v....I.8.F.8..K
   97a54:	a1fa d054 c6bd b7c2 4f47 7428 6292 b45f     ..T.....GO(t.b_.
   97a64:	bbfb 98fa 8e7d 903e f900 cf57 4763 db1f     ....}.>...W.cG..
   97a74:	f4d0 59e7 cff2 aab4 699f 1ee1 36bc ff77     ...Y.....i...6w.
   97a84:	903b 0fbc fd7e 809d fbfc d8bb 1db9 f2ff     ;...~...........
   97a94:	662e e0fb dfaa dcb1 679f 3f45 a2cf 743d     .f.......gE?..=t
   97aa4:	765d 6aa0 798b 49c1 591e 4aac 472d bfdb     ]v.j.y.I.Y.J-G..
   97ab4:	6dbb b2bc 3c79 b9f6 83a8 d6fb 1998 aacc     .m..y<..........
   97ac4:	1e75 5659 d932 74c5 82c9 9e22 5366 6c43     u.YV2..t..".fSCl
   97ad4:	3040 8b88 58ad 51da b67c 7157 d6dc b47b     @0...X.Q|.Wq..{.
   97ae4:	8b2e d7ef 123a f713 5d68 df16 d2ef e07b     ....:...h]....{.
   97af4:	ed5a c0d5 4743 d7b0 ee7a c0d5 4743 d7b0     Z...CG..z...CG..
   97b04:	ef9a 80d5 5af3 7a12 bb34 b5a1 1711 973b     .....Z.z4.....;.
   97b14:	8f7b dad2 deda f4a7 6d5e ab6b 9f76 7bd2     {.......^mk.v..{
   97b24:	6a5d 5b0f 3da5 f4c1 f541 59f7 3dc9 f481     ]j.[.=..A..Y.=..
   97b34:	f541 59f7 3ded b441 ed7e 2088 3b12 ce80     A..Y.=A.~.. .;..
   97b44:	f244 613b e2d4 7692 d716 caaf bdc9 cf4a     D.;a...v......J.
   97b54:	8176 9ef4 bb6d cf4a 8176 bef4 e2ab 3e2c     v...m.J.v.....,>
   97b64:	3fbb 6f08 efef 0dde 643c db04 f356 f5be     .?.o....<d..V...
   97b74:	f767 443f ee0f 9f7f ddfd 10e3 7c3d dc07     g.?D........=|..
   97b84:	5030 688f d0de 9de0 b21d aac8 d6e1 ece9     0P.h............
   97b94:	27ab 2e20 773a ac3d 7835 b48d 1d6b 9599     .' .:w=.5x..k...
   97ba4:	c5a5 bd7a 7ca4 72eb cecf f659 26a8 d79e     ..z..|.r..Y..&..
   97bb4:	d3de a0f6 cd62 f946 92a3 f883 9574 fbb3     ....b.F.....t...
   97bc4:	396e aefa 5e07 bb37 ee97 8c8f 53a7 9967     n9...^7......Sg.
   97bd4:	6b0b 1a95 5e1f a9f7 e7bd ddba c9a7 e596     .k...^..........
   97be4:	8551 b03f 3dba 38aa 721b eb2f e345 bab2     Q.?..=.8.r/.E...
   97bf4:	2747 3b5d 0699 dcfb 93ad 6651 92db 15ee     G'];......Qf....
   97c04:	690d 66af b9ef fbd6 d934 8fba 1af7 4367     .i.f....4.....gC
   97c14:	5d0f 736b d274 d17a 36a9 9469 d7b9 6f5a     .]kst.z..6i...Zo
   97c24:	c6d5 d6dc 3dec 7ad7 269f b5ad 8a6e a2cd     .....=.z.&..n...
   97c34:	b5af d0d5 d743 1cda 331d 73da a178 0bd0     ....C....3.sx...
   97c44:	0fdc 9ba2 5b3d 696c bef3 bce0 3dab 961b     ....=[li.....=..
   97c54:	a0f9 adb6 deaf 83ca d901 9718 4e34 f873     ............4Ns.
   97c64:	b0d3 dcca 896b b8b7 d8e9 ecde 573d 9f79     ....k.......=Wy.
   97c74:	ad26 1685 db43 d0b6 4356 5d0f 736b c274     &...C...VC.]kst.
   97c84:	cb22 1fe1 2cc4 af72 de95 75e2 6b64 f7ab     "....,r....udk..
   97c94:	e85c 5a3d d6b4 0c59 eb6c 6845 f3b4 65d0     \.=Z..Y.l.Eh...e
   97ca4:	6316 164b c957 a744 7702 e019 1d70 e52a     .cK.W.D..w..p.*.
   97cb4:	ada4 b037 9f6c 8dea 6ab6 a429 1155 0bd4     ..7.l....j).U...
   97cc4:	8252 3d23 3f25 8e2a 6e0c 2514 1d47 015f     R.#=%?*..n.%G._.
   97cd4:	b4ed 98aa a19f 40de d9ba 64e6 eea8 44bd     .......@...d...D
   97ce4:	17b9 281b 9fa9 41dd e47d c7fd b757 eecf     ...(...A}...W...
   97cf4:	872c e762 bb8f e727 de7f faa7 d5d9 a9ed     ,.b...'.........
   97d04:	fb5d 5609 49bd 73e6 5f72 3c20 e8a8 010e     ]..V.I.sr_ <....
   97d14:	511d 4f25 9f7a 594f f58d a2de fe1d 0575     .Q%Oz.OY......u.
   97d24:	6510 389d 6c74 a46a 7e58 5855 cefd e95c     .e.8tlj.X~UX..\.
   97d34:	9d9e d59c b6e2 163f 60fd 4dac efdd 5996     ......?..`.M...Y
   97d44:	448c ccd2 947b c066 3ba4 3ba5 9ee9 9c3b     .D..{.f..;.;..;.
   97d54:	3621 46ba a69d 3873 6122 5f3c e2ce be76     !6.F..s8"a<_..v.
   97d64:	c78c 7569 9d1b 7cf4 8bde 0cb0 3f61 e21e     ..iu...|....a?..
   97d74:	d054 c3dd f439 b570 ad82 84ca 2c2f 6079     T...9.p...../,y`
   97d84:	eaac 136a 70d1 854f 958e 3aee cb96 8624     ..j..pO....:..$.
   97d94:	1bed 130b 45bb 893e 1de7 4b8c 5771 7b3b     .....E>....KqW;{
   97da4:	6794 62b8 cfb4 40e7 161e cc0a 4fca 088a     .g.b...@.....O..
   97db4:	ab49 2634 d1d9 3611 fd31 b9de 911a b168     I.4&...61.....h.
   97dc4:	8e53 400b 3839 2aab 8d5f 8367 557c 3ee1     S..@98.*_.g.|U.>
   97dd4:	d190 0e22 3ba4 278d fc70 80d9 6927 cf3c     .."..;.'p...'i<.
   97de4:	efaf 1f0c 183c 873f 6bd9 b601 4e49 0027     ....<.?..k..IN'.
   97df4:	1d54 e1b4 f9ec 5d83 0ef9 3e5f a6b5 dd5b     T......].._>..[.
   97e04:	ee53 8e92 da1c f22d 8cdf f2e2 a3b7 e1ac     S.....-.........
   97e14:	4807 aafc d397 b90a 884b 4895 7bb3 43ae     .H......K..H.{.C
   97e24:	db6f 6022 0ea6 bc08 096d 9d0f 624f 65b7     o."`....m...Ob.e
   97e34:	2dca 740f 0c6d 8ea2 b5ee c620 9adc 9b94     .-.tm..... .....
   97e44:	5280 1e35 c284 ef51 461e e897 a56d aa96     .R5...Q..F..m...
   97e54:	94a3 bf13 3b8e 0adc a7b5 ffcc 51b8 d6db     .....;.......Q..
   97e64:	6da7 a32a 780d 2e9e 8543 3f94 e0d5 83b8     .m*..x..C..?....
   97e74:	5185 f5a1 81ee e787 e7ac 5d64 ed6a 81d3     .Q........d]j...
   97e84:	e3b9 0438 5f95 a85d 6d45 acbd 6696 52b2     ..8.._].Em...f.R
   97e94:	89f7 d6bb 5513 c78d 326a 1bdc 90ee 0c42     .....U..j2....B.
   97ea4:	abb4 ffa9 7bb8 aa76 8260 26b5 fe5c c269     .....{v.`..&\.i.
   97eb4:	f41b 27f3 e90a be8a 7d35 e16c 52da 8b4e     ...'....5}l..RN.
   97ec4:	9c54 206b 2f26 0d17 2d20 5ee5 15ba 6735     T.k &/.. -.^..5g
   97ed4:	ec63 d8f2 dd2e 1bd1 40a2 4731 2d5d 348c     c........@1G]-.4
   97ee4:	656d d0dd e7b8 27a8 3f24 26ce bb98 7adb     me.....'$?.&...z
   97ef4:	ba1d 8f74 e7d4 159d 9cf7 60d5 1688 149d     ..t........`....
   97f04:	002c acb1 a48a e481 c0e9 c2d9 953b e29d     ,...........;...
   97f14:	5c73 be0d f4ca af2d d602 96de d308 9606     s\....-.........
   97f24:	5960 7b8f 45ca f92d 6a48 08e9 6045 e706     `Y.{.E-.Hj..E`..
   97f34:	3d31 2ae7 5bd7 69cf 2143 04b9 c022 29fa     1=.*.[.iC!.."..)
   97f44:	c38e 9315 d9fd 13b3 ec6d 3173 67ee 7cac     ........m.s1.g.|
   97f54:	cab7 79f3 2e95 2b1d cea7 93e9 459e 7eef     ...y...+.....E.~
   97f64:	cb4c 2af4 e39d a2c1 79cf cdb2 1ded f280     L..*.....y......
   97f74:	8f60 cbc3 6247 da9c ee67 cfe2 f2f4 c3b0     `...Gb..g.......
   97f84:	f9c6 d53a c448 f273 2819 d68b f92d c2f5     ..:.H.s..(..-...
   97f94:	3ddc 2880 60cc 6f5a 4b7a bacb 011f d906     .=.(.`ZozK......
   97fa4:	2dcd bac3 de9a 4f7c b67a eb9f bba7 051c     .-....|Oz.......
   97fb4:	17ee 4046 9987 be67 c48b 4315 8b8a bf22     ..F@..g....C..".
   97fc4:	0071 e581 b0e1 1cd7 847e 3067 07af 4c84     q.......~.g0...L
   97fd4:	2d8c 596a 995d c2b7 f039 c61b 69ea 97c8     .-jY]...9....i..
   97fe4:	5a9f f6e6 65ba dea8 66bb f469 ad4a e8ed     .Z...e...fi.J...
   97ff4:	33fa 44f5 d5b0 95d8 2274 bbf0 72fb 43f6     .3.D....t"...r.C
   98004:	02af 86b0 6c46 760d 1a1c 34fb 65fa 300a     ....Fl.v...4.e.0
   98014:	7bdb ad76 e8a5 5c58 3bf6 ee7b be89 da07     .{v...X\.;{.....
   98024:	fd63 8e8e 2ad9 baba 1bde 6a7c 1add ff9c     c....*....|j....
   98034:	8ef6 4d3b 6f13 a082 d5df e359 36fe d102     ..;M.o....Y..6..
   98044:	bafd e65b 624b 76e7 0748 f614 ac7f 3fb0     ..[.Kb.vH......?
   98054:	1961 6f0d 793d b3ac 26e3 4191 520e e99b     a..o=y...&.A.R..
   98064:	2ddf e674 94bf a636 b4fb dd67 27a7 4bae     .-t...6...g..'.K
   98074:	51d7 0cc8 5015 e22c 5cb9 dacf c435 0418     .Q...P,..\..5...
   98084:	db91 43e4 e446 2fd7 331b 7ebf 18bf 36f9     ...CF../.3.~...6
   98094:	6925 ec84 333b 2683 72d8 3382 4e5b d4f0     %i..;3.&.r.3[N..
   980a4:	4329 7939 ff8a 5335 fdc4 fe31 6d67 c483     )C9y..5S..1.gm..
   980b4:	7833 8a57 4ab1 4976 3b89 9068 c4b2 9745     3xW..JvI.;h...E.
   980c4:	3ea0 7eb0 f187 72b4 ae02 9c49 befc cb2b     .>.~...r..I...+.
   980d4:	d2ec 29b2 d7eb c907 6507 6396 0a21 6478     ...).....e.c!.xd
   980e4:	cf42 1180 b0d1 6f1b fbf5 53b5 a62c 1753     B......o...S,.S.
   980f4:	3ea5 fc7e fb78 71b5 c442 7724 a401 5d8f     .>~.x..qB.$w...]
   98104:	081b bf1f 6d1c 1bcb bda8 d41d 6e20 c1ef     .....m...... n..
   98114:	0889 c60c 1001 3793 2bae 6936 e8e3 adf4     .......7.+6i....
   98124:	c1eb 46ea acbf 55f4 ba68 4ec4 7dce 40f7     ...F...Uh..N.}.@
   98134:	931c 6767 fa93 0be7 bbd7 60c7 59ec 46b3     ..gg.......`.Y.F
   98144:	dff6 cd73 ce7e cc89 d9f5 6236 dc79 b976     ..s.~.....6by.v.
   98154:	0d8e 7163 9ccc 8233 7bcd 73be f670 b1ec     ..cq..3..{.sp...
   98164:	7b09 b9cb fb87 7bad 96ce ead4 a34a f413     .{.....{....J...
   98174:	6855 1f20 2d8c c6d7 98e1 7737 75fb ee8f     Uh ..-....7w.u..
   98184:	0ca5 4147 a6c8 8e3b 5d01 ae96 4d98 8f2a     ..GA..;..]...M*.
   98194:	fe53 2675 96de 6a46 3e51 caac 5d17 75b2     S.u&..FjQ>...].u
   981a4:	6e35 7ae4 0e7b a031 caf0 e3cd b450 7ee8     5n.z{.1.....P..~
   981b4:	0536 ce7a 3b22 ddf2 bbe3 a1e0 9c2d 1879     6.z.";......-.y.
   981c4:	c2e5 70b8 6dea bf08 7645 467a 5dae 54ec     ...p.m..EvzF.].T
   981d4:	6e8c bb66 7380 78b7 0427 f708 b868 5089     .nf..s.x'...h..P
   981e4:	b6da d847 1ddc e6bf f95d b0d4 6138 0d4d     ..G.....]...8aM.
   981f4:	dc10 07ba e9c5 a689 b0d9 32c9 61a2 2f5b     ...........2.a[/
   98204:	9cbc 98d6 0e55 49cf cf91 7ef7 e24a 726b     ....U..I...~J.kr
   98214:	67fe f0c9 cf77 5f1b f402 8be7 5ede af0c     .g..w.._.....^..
   98224:	0de1 c4e0 cfa2 fb1e 81f5 25b3 dbd8 2577     ...........%..w%
   98234:	b82d 6829 f569 848c af5e f7d7 b85b fb4a     -.)hi...^...[.J.
   98244:	9639 9dfc da2d 55cd 8b79 eb36 4d41 c916     9...-..Uy.6.AM..
   98254:	c132 23a7 d3fa 24f9 05f6 7dbd 93a6 c5f0     2..#...$...}....
   98264:	5fdf 9763 856f bd6c 7dfb 2e3a 32f2 569f     ._c.o.l..}:..2.V
   98274:	d95d 597d 45c5 1cf5 a9b7 8aac d1e8 9e9f     ].}Y.E..........
   98284:	d8f6 3dff 5a0a 3649 32d1 2a7a 2fe3 f2bc     ...=.ZI6.2z*./..
   98294:	dbdb 1265 5df5 a47b 1f81 d849 e0a5 c1f8     ..e..]{...I.....
   982a4:	c6db a016 af67 efd2 b6d8 b5fb d7b8 edb6     ....g...........
   982b4:	e4db dfe7 5eb6 b6d3 bd3d b6c7 27c9 3b42     .....^..=....'B;
   982c4:	bd9d ca16 82c7 aec1 c377 84bd 767d ad2f     ........w...}v/.
   982d4:	f5ee 76fc 4b39 67e1 3c67 3e4b 3916 58a3     ...v9K.gg<K>.9.X
   982e4:	bd82 b24a 70cd a514 d652 605d 6e66 12b9     ..J..p..R.]`fn..
   982f4:	bc90 6c11 f9f3 1dc0 fcc7 ccf7 f543 40df     ...l........C..@
   98304:	1a48 c874 9bef 1dff 3597 3ea8 e104 d0d6     H.t......5.>....
   98314:	9ec9 272b 9e04 044a d27f 29b3 9ec1 5060     ..+'..J....)..`P
   98324:	f1a7 9d22 86df 5265 d3a4 b6cd ed66 f068     .."...eR....f.h.
   98334:	de8f f49d 9f4e da3d 4e3a 9d67 91f8 4971     ....N.=.:Ng...qI
   98344:	d24e 5c71 e1c1 6c70 60b8 7092 72b0 a43b     N.q\..pl.`.p.r;.
   98354:	e4d0 207c 075e 3dac 853a ed84 62ce a15d     ..| ^..=:....b].
   98364:	1d6f aa43 c207 e8ed 6fec 5b5f bee1 42f6     o.C......o_[...B
   98374:	8521 3834 9850 8775 8cbd 45d4 9a2e ac5a     !.48P.u....E..Z.
   98384:	db16 f9b0 de95 65e5 35d4 416c 4988 0551     .......e.5lA.IQ.
   98394:	ef1f 3689 13de 00a7 d482 d47d 8a86 6558     ...6......}...Xe
   983a4:	9db5 7461 b9cc 3560 4bf0 0ed7 8251 81ad     ..at..`5.K..Q...
   983b4:	111e 70cf abc4 ff97 54ac 1b09 bd34 dd71     ...p.....T..4.q.
   983c4:	75e9 8549 af61 7e78 6fff 4221 342d df08     .uI.a.x~.o!B-4..
   983d4:	d3bc 71da a336 9e27 8dee 76a4 41a3 fb13     ...q6.'....v.A..
   983e4:	7f9d ec46 e167 ab3c 0e69 d47a 89ef 69e4     ..F.g.<.i.z....i
   983f4:	b44f ada3 aac5 2374 0d14 36c2 f51b da4c     O.....t#...6..L.
   98404:	4111 2f4a 1a54 5963 1d83 1885 6336 50a5     .AJ/T.cY....6c.P
   98414:	7c76 1715 457a 2491 8d8a 40e7 4ca0 4fd3     v|..zE.$...@.L.O
   98424:	8ca2 2dfc 880b 9038 e99d 057c 8674 6728     ...-..8...|.t.(g
   98434:	d725 d78a ca0a 9322 6779 1796 6fe9 3198     %.....".yg...o.1
   98444:	4d6f 9364 74b5 0151 19c9 8b3d 1825 b26b     oMd..tQ...=.%.k.
   98454:	88ad 4668 5d7f f516 348c 3051 3f8b 7c8a     ..hF.]...4Q0.?.|
   98464:	d4fc f192 5989 11a8 456a 648c 38ab ff7b     .....Y..jE.d.8{.
   98474:	0ab7 44f3 a8b3 4659 5266 6d4c c791 a87e     ...D..YFfRLm..~.
   98484:	a12c a8c7 65f2 288a 8524 ec1d bad3 50ed     ,....e.($......P
   98494:	21f0 0fae 7a32 07b9 5a10 55e0 a503 901d     .!..2z...Z.U....
   984a4:	b8d3 7bef a9ec fb6b 2db4 d86b e71a 9826     ...{..k..-k...&.
   984b4:	6eab 73ac 517d 85b5 02e4 9c24 0874 78a7     .n.s}Q....$.t..x
   984c4:	e706 ee9b ae02 60a8 a2ca 08f7 a9e6 98fb     .......`........
   984d4:	74d7 0efb c5d2 2f32 18aa 51ef a9e5 c55e     .t....2/...Q..^.
   984e4:	d39e 67f3 24e9 2431 7a42 3966 6fcb 51cc     ...g.$1$Bzf9.o.Q
   984f4:	b9e9 c669 f01f b4ef 7d37 36a1 3747 3514     ..i.....7}.6G7.5
   98504:	f88e ec3b f71d f15a 2ea0 b746 b22f 511d     ..;...Z...F./..Q
   98514:	a4a2 295a a6eb e061 da83 f478 c761 0053     ..Z)..a...x.a.S.
   98524:	5b38 e8ed ebf7 fd8e cedf eca2 4c7c 1b93     8[..........|L..
   98534:	88ec 6e5f e493 3a63 d84e bc2d f2e9 ead5     .._n..c:N.-.....
   98544:	afcc ed03 ed9b 91bd 68c2 4732 5d92 3176     .........h2G.]v1
   98554:	bfd1 b9eb 96b5 9264 765d 0059 6651 74fd     ......d.]vY.Qf.t
   98564:	a996 a935 daa7 ca35 fe85 cf5d 35ad 9326     ..5...5...]..5&.
   98574:	b2ec 4a9f bbfd 5b9e 496b 5926 cb67 7102     ...J...[kI&Yg..q
   98584:	f3a9 1f22 9f26 7e3c c442 6a92 f1a8 1004     ..".&.<~B..j....
   98594:	73f2 6415 b158 1a2a 3af3 0d80 86f4 fa26     .s.dX.*..:....&.
   985a4:	ab44 7359 71bd 9f32 156b 1af7 0bbf dcbb     D.Ys.q2.k.......
   985b4:	0dbb 98b6 db16 c0f0 ac56 e901 ce89 2d16     ........V......-
   985c4:	9642 b793 9fb2 cf67 46fa e53f cf62 d31d     B.....g..F?.b...
   985d4:	d60a cc76 6bce 31de 7200 c76d f56a 771a     ..v..k.1.rm.j..w
   985e4:	deec dab3 1f7b dfef fef2 fbbb b6d0 bc1f     ....{...........
   985f4:	4ce7 cd07 a7ee 47df 53de 68eb d931 d373     .L.....G.S.h1.s.
   98604:	82b5 4db5 f3b7 379a 301d b6af b5e9 bb7a     ...M...7.0....z.
   98614:	7d37 69ef 7fdd f7d7 fa6f db01 df7e 1fc6     7}.i....o...~...
   98624:	efbc d27d d36c 9c9a ef5f c3b9 c15a 0eda     ..}.l..._...Z...
   98634:	79db 3bcd b70c b6b4 b5c3 bb7a d877 8131     .y.;......z.w.1.
   98644:	effb aba5 0791 5aec 3373 ddf7 1a9f 6776     .......Zs3....vg
   98654:	9604 537e 5759 bdec 0771 b16f dc5c c5a3     ..~SYW..q.o.\...
   98664:	601d 9bc9 ced4 eee9 e526 f19a 1aca 3408     .`......&......4
   98674:	2654 e852 a4ce f68c 5984 6cb3 6c0d d91d     T&R......Y.l.l..
   98684:	90cd 68cb 0d39 5d78 1bb5 d7e0 8535 a13d     ...h9.x]....5.=.
   98694:	59d6 5f75 dd58 f952 107e 1bca 7be2 ce66     .Yu_X.R.~....{f.
   986a4:	dedc ce36 99c0 380a 913d 2c2c 85e4 a149     ..6....8=.,,..I.
   986b4:	efdb 65ba cd9a 02ab 946b e814 6095 aa8f     ...e....k....`..
   986c4:	d2c2 5798 02bd 62d6 2ca2 9e09 a576 f716     ...W...b.,..v...
   986d4:	af49 c24b 5e24 1990 10c6 2b83 5a9e 041b     I.K.$^.....+.Z..
   986e4:	8d9f d815 cc3b c39d bc77 de64 ccbb c618     ....;...w.d.....
   986f4:	3df2 cc4e c87c b1c5 5d0e 7739 5ef4 f662     .=N.|....]9w.^b.
   98704:	2db8 607c 32fc c4cd 1ece 393f 4f8d 7979     .-|`.2....?9.Oyy
   98714:	cf6e 181d ccbf 62f2 d905 1113 7399 fa06     n......b.....s..
   98724:	b30f b0b4 a4d4 dc02 36c8 7e30 4659 dc6b     .........60~YFk.
   98734:	9680 be8b 79a7 3ea0 92cd acc2 4e99 2b58     .....y.>.....NX+
   98744:	5986 6d57 285c a83f d4a5 70c2 9ec1 0525     .YWm\(?....p..%.
   98754:	b642 dea8 1395 7fd1 62b6 c099 a287 687e     B........b....~h
   98764:	6a79 8cd1 5adf 3509 e371 9437 bb30 7bb7     yj...Z.5q.7.0..{
   98774:	3bd7 fb37 bab6 f5ae 756c f76c c7ab d07e     .;7.....lul...~.
   98784:	d59d 3f31 414a 692d 9326 b794 7aa7 2a92     ..1?JA-i&....z.*
   98794:	7ca5 d532 6693 bd41 7ac3 f57f eaee d5bd     .|2..fA..z......
   987a4:	ab3b 25f5 c2fc 33f0 e8d1 2b3a e2d8 2b16     ;..%...3..:+...+
   987b4:	e2d8 6af2 9e4b 5ea3 596d 6e9c 82a8 c32d     ...jK..^mY.n..-.
   987c4:	32dc 2dca dc83 c632 432d 1e6c 5de1 2863     .2.-..2.-Cl..]c(
   987d4:	34c2 ae5b 3ae0 f384 1716 7c49 f967 d12d     .4[..:....I|g.-.
   987e4:	61d1 1560 36d5 b06a 9237 e3ab d657 ff2c     .a`..6j.7...W.,.
   987f4:	8d16 d473 77bb b3b3 54b8 6a71 b3c6 fc64     ..s..w...Tqj..d.
   98804:	8a01 ee04 2964 310c d973 3a98 f8f3 992a     ....d).1s..:..*.
   98814:	795b a0fa d33b 9924 4de0 9562 2599 a5f3     [y..;.$..Mb..%..
   98824:	bc10 1918 c6f8 bb97 c4d2 6fed d221 9ec6     ...........o!...
   98834:	0cb7 77ea 172d 3fad 4f97 bdc3 679a ae0d     ...w-..?.O...g..
   98844:	b026 5252 7914 af61 95b0 ac68 c8af afab     &.RR.ya...h.....
   98854:	cf2e b2d9 bcb6 bd84 3cb2 5b59 3d57 5ac5     .........<Y[W=.Z
   98864:	7155 359d d8f4 9438 ac87 6f28 d766 ea7a     Uq.5..8...(of.z.
   98874:	9243 c951 15cc 25ad 6b1b 72aa abeb f32a     C.Q....%.k.r..*.
   98884:	acb6 2cab af63 ccac d6d0 4cd6 56b3 9057     ...,c......L.VW.
   98894:	8d16 6f3d d419 5643 3658 6bb4 c58d eac0     ..=o..CVX6.k....
   988a4:	2ce5 afca 1445 45dc e81c 843f 8e02 c49e     .,..E..E..?.....
   988b4:	7083 dd3a 4159 ceb9 9d32 cbcf 798b 9bca     .p:.YA..2....y..
   988c4:	00ea 162e e93f a3e9 3ea5 566a 1bff 239e     ....?....>jV...#
   988d4:	52a3 5aaa 925a 5518 833d abda 9467 38cb     .R.ZZ..U=...g..8
   988e4:	73bb 0199 e93f 039d 78fd 7805 3276 562e     .s..?....x.xv2.V
   988f4:	2b8b bc8b 8660 4eb5 a28d 83da 5484 3a31     .+..`..N.....T1:
   98904:	e2db 40df ea14 ba6f 3cf1 8029 a067 a83f     ...@..o..<).g.?.
   98914:	f61b 9b61 03f3 ea8d 8113 efb3 cd74 bd8b     ..a.........t...
   98924:	4761 36d4 7003 69df 1ba6 db3d b2b2 dc27     aG.6.p.i..=...'.
   98934:	ec47 a10f fec2 a767 3137 4de9 21ae d020     G.....g.71.M.! .
   98944:	fba6 9f3c df24 88a7 ee4f 7d74 459d e59e     ..<.$...O.t}.E..
   98954:	2364 74a3 6802 aa9c b738 55dc 1a8e 4bd8     d#.t.h..8..U...K
   98964:	5698 6700 4a59 ea0e 198c aa5b 607c 3511     .V.gYJ....[.|`.5
   98974:	11df 33ad f9ab 55eb 2f85 5372 7680 b904     ...3...U./rS.v..
   98984:	c75a 49c4 6651 bb13 6b55 34ac 775d 246a     Z..IQf..Uk.4]wj$
   98994:	f90a a901 f2b7 ff04 2cb3 6e86 788a 9b59     .........,.n.xY.
   989a4:	0666 adb0 6b19 d333 b27c 1a41 4128 db86     f....k3.|.A.(A..
   989b4:	5b84 7e85 6e65 681c d3b3 b0df fe19 cbd0     .[.~en.h........
   989c4:	aa0d c95c 498e 1b02 41f7 c967 8d7a 0065     ..\..I...Ag.z.e.
   989d4:	5dc9 3255 157e 3e0b 6dab 24cf a8fd 64d7     .]U2~..>.m.$...d
   989e4:	435a 7b86 6d5e ad01 ec7e 25ca b51c 026c     ZC.{^m..~..%..l.
   989f4:	e60c 56d6 74ca 11fe a555 c554 78ee f9d1     ...V.t..U.T..x..
   98a04:	dc90 e22e 0025 c566 d0c7 3230 bfcd f483     ....%.f...02....
   98a14:	a234 2079 d3f9 e493 06c9 8bdb 6033 6175     4.y ........3`ua
   98a24:	5543 ce83 d2aa 0949 4715 7124 5885 d5a4     CU....I..G$q.X..
   98a34:	f6ef 971e b2ad 964a bb65 b7ef e980 334a     ......J.e.....J3
   98a44:	0f80 79b6 16fb b3de 3e1c 4266 b0ab e402     ...y.....>fB....
   98a54:	a826 516c bbe9 9fde ecef 9d89 699b ab68     &.lQ.........ih.
   98a64:	4a85 b5a8 d072 9f22 67d7 f46d 3673 7b86     .J..r."..gm.s6.{
   98a74:	7704 9dda f95b db52 62f7 4f35 011a 3c72     .w..[.R..b5O..r<
   98a84:	0f1e 7a6a d465 a976 4a04 ba0c a06e 7105     ..jze.v..J..n..q
   98a94:	9e08 9ef4 0a3a 68c5 27d7 e86c cffa 251c     ....:..h.'l....%
   98aa4:	0238 65e0 8ffa 1ccf e065 1d5b a9cb c0a3     8..e....e.[.....
   98ab4:	b8c7 8948 3ab1 e591 e3ce e56d 654e a7b9     ..H..:....m.Ne..
   98ac4:	8ee7 e372 b17c 2340 5e3d 3e28 39ef 950a     ..r.|.@#=^(>.9..
   98ad4:	a155 15f9 fb8b c6fd 6a32 5358 4b67 a48b     U.......2jXSgK..
   98ae4:	6a02 96a2 ebfc d00a 34dd ab55 7e73 1aee     .j.......4U.s~..
   98af4:	d5ec 9d2a 6957 5ca6 ba67 7e66 0055 24b4     ..*.Wi.\g.f~U..$
   98b04:	bc5a 27ec 428e 2c55 d3a7 d27f 6e73 cc27     Z..'.BU,....sn'.
   98b14:	0ae7 41e0 c76d 51d8 3b8c d913 65ba a9cc     ...Am..Q.;...e..
   98b24:	2894 ccf2 dbd5 30ac 6c30 5f2d 4da7 40c4     .(.....00l-_.M.@
   98b34:	e4b2 8c9a 4480 e4fa 018c 8314 9568 f27e     .....D......h.~.
   98b44:	64ec 86a3 f01a cabd 3f61 2f2d 5452 592a     .d......a?-/RT*Y
   98b54:	4270 1484 d355 f60a 7585 4347 42d8 8d13     pB..U....uGC.B..
   98b64:	f5f1 23f0 9f14 678c e171 63d8 4862 a0f8     ...#...gq..cbH..
   98b74:	648a 31b2 7431 e90b fd43 02e4 1bee 00cf     .d.11t..C.......
   98b84:	aca2 eced 7b4d 6abb fd02 50d3 7a79 b272     ....M{.j...Pyzr.
   98b94:	f571 d081 e1a0 d218 3ceb 3f39 fa0f a4e7     q........<9?....
   98ba4:	79db 1bea 98b5 9528 1c21 c959 51c0 d3c9     .y....(.!.Y..Q..
   98bb4:	89e9 5d49 8698 8350 96dd 7a61 8673 ba00     ..I]..P...azs...
   98bc4:	22e7 4cb0 2cf7 5d1d 9339 36eb 3a9e 5ef4     .".L.,.]9..6.:.^
   98bd4:	0d4f e1e5 9fde e795 971f d9a9 23ef 903c     O............#<.
   98be4:	75b0 c459 d419 f916 a955 6cbb 2cfb 8f34     .uY.....U..l.,4.
   98bf4:	4a8b 499c 7132 f12b 6468 947e 5bb9 a97c     .J.I2q+.hd~..[|.
   98c04:	363c e94c 0d37 85f5 0c01 b1b3 eada 8abd     <6L.7...........
   98c14:	acbb 0f71 cefe bd76 55a4 9bb4 e4fa aa6a     ..q...v..U....j.
   98c24:	2d46 3edb 9a9d f3d7 32ce 730d d492 ca0d     F-.>.....2.s....
   98c34:	62db 2ee6 14b0 792b 68ea aef0 9f6e 806f     .b....+y.h..n.o.
   98c44:	fdf1 c5e1 0439 50fb baa1 4efa 8382 4e2f     ....9..P...N../N
   98c54:	7732 65f9 5ae4 1cf5 ca2b 9e39 5839 5e22     2w.e.Z..+.9.9X"^
   98c64:	1114 8d6e e221 33f3 9e42 ec6a 99a7 f0de     ..n.!..3B.j.....
   98c74:	9a5b 9abd f7fe fe74 478e d592 ba94 8a45     [.....t..G....E.
   98c84:	ea52 36d7 4602 4036 a932 dc83 d88f 1d16     R..6.F6@2.......
   98c94:	89ed 46da 5a9c 08b9 db27 2290 6b7f d634     ...F.Z..'..".k4.
   98ca4:	bb09 e5a1 9d50 10a2 43e1 7f07 23db 7ca3     ....P....C...#.|
   98cb4:	3c36 242a 3add 0b58 21af 46f4 35a0 ad8f     6<*$.:X..!.F.5..
   98cc4:	7b3c 2262 5abd b0a3 d7d6 cb89 9c6d 7b9a     <{b".Z......m..{
   98cd4:	8733 d34c c2dc 4b53 6174 6cde 8e8d 34b2     3.L...SKta.l...4
   98ce4:	9fcf 73d2 7d82 38f9 4474 6deb de33 b45c     ...s.}.8tD.m3.\.
   98cf4:	565f a530 1ef1 a1cc c4cb bb46 4802 2198     _V0.......F..H.!
   98d04:	775e 2d9d 7594 d615 f341 f6d2 a18d 3893     ^w.-.u..A......8
   98d14:	9928 76b4 ec37 b882 9932 e327 312a faef     (..v7...2.'.*1..
   98d24:	33c9 cffc cbd9 baee 264f 5367 5e13 a8d0     .3......O&gS.^..
   98d34:	9caf 69c5 3021 4c80 6460 1261 4417 dcb2     ...i!0.L`da..D..
   98d44:	0499 3c42 d170 f82f a03f ce5f aa7c cd3b     ..B<p./.?._.|.;.
   98d54:	b18b 9078 5e91 d958 77aa 83d1 f980 bf2a     ..x..^X..w....*.
   98d64:	236b db1d e1b0 6b94 b8bc d14a a763 798b     k#.....k..J.c..y
   98d74:	4f1a a7e2 9f8f 0ab9 0cea f3d4 9f6f fcbc     .O..........o...
   98d84:	59da 64ca 9ea2 7d3c edfe afd3 e55d 4634     .Y.d..<}....].4F
   98d94:	8e2a 8fc7 5393 2157 24c1 2129 d5d9 6793     *....SW!.$)!...g
   98da4:	dbe7 2a4a 26fe 2649 abfd adad d62a fd0b     ..J*.&I&....*...
   98db4:	4e1a 659c 4597 4cbe ea8a 7776 58ab 6d0e     .N.e.E.L..vw.X.m
   98dc4:	544a 4f9b 8f27 5763 8b49 03a5 6a56 26e0     JT.O'.cWI...Vj.&
   98dd4:	ade9 267a f797 fa74 a1ac 9b7d 03d3 3ff0     ..z&..t...}....?
   98de4:	e27d 116c 3db9 ea51 c9c5 4fd7 eebf 4abb     }.l..=Q....O...J
   98df4:	98d5 e9bf e7b4 672a 7f71 9ecf fb39 48b4     ......*gq...9..H
   98e04:	93fe e7b3 cf27 b89f 6a0a e02c 4934 a6ce     ....'....j,.4I..
   98e14:	3753 5a50 e06c 6fb3 9e9e 7b3f 2ae1 c4da     S7PZl..o..?{.*..
   98e24:	5a0a d573 c178 b1e6 7e49 0970 975c 80ab     .Zs.x...I~p.\...
   98e34:	10ce 0b7e f4cd 71be d4ee 1932 f1a7 165c     ..~....q..2...\.
   98e44:	f6fc 8bd9 739e 7569 ecde 5f4f 7b7f ebd2     .....siu..O_.{..
   98e54:	ad3f db15 378f 52db 076b d65f d15c 3b85     ?....7.Rk._.\..;
   98e64:	1c0d ff87 ae63 8d98 1e46 9382 ed1d 696e     ....c...F.....ni
   98e74:	cef6 7ff2 2c98 a304 f2f6 cbf1 8bfe 2ee7     .....,..........
   98e84:	4aff fc3d f5cf 905a 6566 a152 250b 93e6     .J=...Z.feR..%..
   98e94:	790a 8d3d 6d94 b32e 7b3d c2db 12ee 9f79     .y=..m..={....y.
   98ea4:	c0bd 0cff f45e 05f4 67fe d1ba bea2 f64e     ....^....g....N.
   98eb4:	50e9 8393 4dd7 f12a 7f7f 9b3a 7fe0 1562     .P...M*...:...b.
   98ec4:	fdfb edbe 715c 6cd7 d94c 1c76 fbc7 b156     ....\q.lL.v...V.
   98ed4:	dd44 7efd d77f ca4c fed6 efc2 cf27 f59e     D..~..L.....'...
   98ee4:	6e5f 543d c53b 750a ecd0 029d 3270 b17f     _n=T;..u....p2..
   98ef4:	5dca 2125 10fb 6d1d bcb5 56ef 74e3 a312     .]%!...m...V.t..
   98f04:	3f91 4310 f05e 992a 4c7f e4d0 f82b ae1a     .?.C^.*..L..+...
   98f14:	79a8 0250 dd8f b321 176b bea0 ffc0 dd36     .yP...!.k.....6.
   98f24:	472c 4f03 d823 a0cf 8c21 91b8 c461 34da     ,G.O#...!...a..4
   98f34:	9c88 612d cf65 ae6a 8ca7 ce66 1f4c 2e4d     ..-ae.j...f.L.M.
   98f44:	b687 aaf4 813b 6d1d 73d1 936b 5dd2 a7f8     ....;..m.sk..]..
   98f54:	b3b3 81b3 75bc a413 ff35 cf34 afaf e3b9     .....u..5.4.....
   98f64:	3232 5361 759e 9fa1 dd33 2c85 03bd f83c     22aS.u..3..,..<.
   98f74:	ebf0 65ef 8336 a2d6 ae67 ced6 fe99 61cf     ...e6...g......a
   98f84:	4190 1091 27f7 05cc 1f37 26ae aed2 d5bb     .A...'..7..&....
   98f94:	cc7f befd 16b9 55b0 e4e9 8ed5 d965 09fc     .......U....e...
   98fa4:	108e 7c0a 083a 4d6e 5085 00cf 2216 fd69     ...|:.nM.P..."i.
   98fb4:	f689 3f57 e242 f639 5924 be6c 263a e772     ..W?B.9.$Yl.:&r.
   98fc4:	2be2 9760 65d2 aad5 bfd0 8785 e748 97f8     .+`..e......H...
   98fd4:	63f8 52cc 8bbd e983 1b2a e723 4ed0 ca82     .c.R....*.#..N..
   98fe4:	f3bf 4858 2f05 b08a 3e7c 2d6d c9f2 9e6a     ..XH./..|>m-..j.
   98ff4:	1e1c 6436 9374 a84f 5aa1 cd0e 519f 9dd2     ..6dt.O..Z...Q..
   99004:	7dc0 5483 b0d8 9682 7a0f a87e f23a d2ef     .}.T.....z~.:...
   99014:	fb69 1540 abf1 9159 b4df 4f80 bd6c 69c4     i.@...Y....Ol..i
   99024:	bdb4 fe5f 9563 b714 22ad 75f9 c295 b7e2     .._.c....".u....
   99034:	d6e2 700d 5033 26e6 66ad 4bf0 f4d4 d87c     ...p3P.&.f.K..|.
   99044:	6a9b 6455 e82d dfc5 f484 db6f a943 14ec     .jUd-.....o.C...
   99054:	7f96 1de2 e188 fab2 f643 ac27 6966 9819     ........C.'.fi..
   99064:	1733 5abf 4034 6120 555b 9e84 b285 6aeb     3..Z4@ a[U.....j
   99074:	6416 ebd1 362e 5904 43bc 944f 1587 b289     .d...6.Y.CO.....
   99084:	faf5 3775 ff2d 8d46 9943 41e1 ec3f 7a43     ..u7-.F.C..A?.Cz
   99094:	b802 9263 67a0 c391 6ac3 d078 bd0b 28b8     ..c..g...jx....(
   990a4:	5be2 a55e 7f07 f5aa 63da 81f7 d95a 0a0a     .[^......c..Z...
   990b4:	f45f 9fe0 1f4e 708e d92b a1c8 3815 20d4     _...N..p+....8. 
   990c4:	f5a3 0ec3 15bf a833 9f7c c3af eeeb 9175     ......3.|.....u.
   990d4:	a12c 369c c2bb 63bf 07b9 5507 e017 8e77     ,..6...c...U..w.
   990e4:	4169 1fe2 30c0 fe36 1a00 e4ab b740 23b4     iA...06.....@..#
   990f4:	695a 3825 5570 63d9 b0f4 0136 e01a dd37     Zi%8pU.c..6...7.
   99104:	292a 632b cc68 49ed 0abb 9812 a0c4 f48a     *)+ch..I........
   99114:	7f14 47b3 3fcf e1b0 f163 a88b 86c7 96a0     ...G.?..c.......
   99124:	e527 093b 3410 2768 3251 2eaa c3fd fec3     '.;..4h'Q2......
   99134:	be81 0311 3109 bada 6ae6 ffcb 946d 465c     .....1...j..m.\F
   99144:	9b77 1c81 124c 678f a4ed 844b fb5b fe1f     w...L..g..K.[...
   99154:	3d7a d4ba 16d7 63b5 d947 7465 dbd0 41f8     z=.....cG.et...A
   99164:	9aa5 db8c ddfe 6eab 2c91 6300 fcbe a008     .......n.,.c....
   99174:	5dfa 565a 6009 b684 e2f7 efc7 339f dbc9     .]ZV.`.......3..
   99184:	3977 45f2 105e 0707 3f7d dc48 e7c5 4850     w9.E^...}?H...PH
   99194:	7914 45dd 912d b6db e936 3a12 91fa 66ce     .y.E-...6..:...f
   991a4:	0197 4ffd a39c 236a c390 8d7a 0967 084c     ...O..j#..z.g.L.
   991b4:	e0d8 ebbb 52a4 50a7 e9ac 66dd 2383 b2c7     .....R.P...f.#..
   991c4:	7870 9ae1 61cc f85b d1d7 71f7 eb35 dde2     px...a[....q5...
   991d4:	2f99 3ef4 02e7 710e 0acd 8184 398f 6620     ./.>...q.....9 f
   991e4:	e804 160c 80dc 1f7c 8b72 9bc8 55c4 f1dc     ......|.r....U..
   991f4:	2a8e c098 1e72 938f 5176 5e05 8be7 e7be     .*..r...vQ.^....
   99204:	ab77 bbfc 26fc 9e29 65c7 f6d2 a8e1 5d25     w....&)..e....%]
   99214:	e818 82d7 68ef 7e17 8350 5c30 e2f5 2ef6     .....h.~P.0\....
   99224:	8403 ac56 3a12 744f a6bc bcf1 3f14 21fb     ..V..:Ot.....?.!
   99234:	ac9c 9cf9 c2fd f0af 3b28 d8f2 a3cf cc2c     ........(;....,.
   99244:	062a 999f 7c3f 5ddd 45c6 fc99 9bdb 7f1f     *...?|.].E......
   99254:	9f80 b661 d319 a766 ddfe aaa6 70ba f01d     ..a...f......p..
   99264:	6ee9 6812 95bd 6c45 02b2 3244 2eb5 b92b     .n.h..El..D2..+.
   99274:	00aa 320e ac75 fb52 752a 66da e073 bcad     ...2u.R.*u.fs...
   99284:	fee2 5e42 13ce 6c44 087c 9600 551b c265     ..B^..Dl|....Ue.
   99294:	5be0 2682 f12e f10f b002 e052 3dd1 01e3     .[.&......R..=..
   992a4:	6bb8 7dc9 7d04 b475 5587 d408 c600 7c87     .k.}.}u..U.....|
   992b4:	214e 615e 3ced 487f cdab 2d7b b9bf 1b7d     N!^a.<.H..{-..}.
   992c4:	535f 8f5d 6354 7f3d bbd4 af5c 2e93 2146     _S].Tc=...\...F!
   992d4:	26c9 0f54 430e 037e f990 e382 eee0 6018     .&T..C~........`
   992e4:	12b2 9703 fd15 3b50 3360 7b1d 2610 da8d     ......P;`3.{.&..
   992f4:	25b8 3474 dd8d 30f6 6a13 791f dec7 2b11     .%t4...0.j.y...+
   99304:	681a 2d0d 49d5 58fd 9801 e326 2b36 2ea4     .h.-.I.X..&.6+..
   99314:	2182 a0ef f51a 432f a671 1d6a 8de8 2b5e     .!..../Cq.j...^+
   99324:	81bc 674d 2f51 2428 1fee 1714 20d9 3a3b     ..MgQ/($..... ;:
   99334:	13f2 0a0e da70 ef03 9e7a c55f 97f3 e31f     ....p...z._.....
   99344:	17b9 001c 8712 984c bb46 33b2 ed7d 7cd4     ......L.F..3}..|
   99354:	dd64 1750 7f80 20d3 5387 065d 60f3 2785     d.P.... .S]..`.'
   99364:	4f08 868d 1186 4283 b3a3 7cb8 2701 6607     .O.....B...|.'.f
   99374:	787d ced8 4823 4989 0ee7 8212 e238 aa43     }x..#H.I....8.C.
   99384:	dc82 560f de51 104d 9473 7fbe 0137 aec6     ...VQ.M.s...7...
   99394:	5a4a d431 26cf 24f3 7988 6216 9c36 8a66     JZ1..&.$.y.b6.f.
   993a4:	cb17 c7ca 364f d5db bd28 27b4 9afc ea55     ....O6..(..'..U.
   993b4:	0902 5d08 01a4 8196 f9f9 2878 718c 5195     ...]......x(.q.Q
   993c4:	8fa5 4e6b 0408 d7b0 0da4 a778 e404 8622     ..kN......x...".
   993d4:	8739 50e5 b1eb d6d0 7223 6183 7413 b5e2     9..P....#r.a.t..
   993e4:	a5f9 2007 fdd6 0915 3785 c7c4 c5e6 f3d7     ... .....7......
   993f4:	b0f9 249e 8f4b 052e 4890 0574 9559 6671     ...$K....Ht.Y.qf
   99404:	4870 1080 4916 9d71 e1b4 082e 2108 31c8     pH...Iq......!.1
   99414:	eadf ae63 3564 8713 3c0d cca2 863c 530e     ..c.d5...<..<..S
   99424:	688e 9c38 2b0e 46a6 4c9a ce60 2bfc 6b6c     .h8..+.F.L`..+lk
   99434:	6035 42b0 9aef e37e 130a c76e 9327 8cff     5`.B..~...n.'...
   99444:	abe7 a904 ed2b 06a7 5762 39da 9893 309e     ....+...bW.9...0
   99454:	40b5 07a1 951a 7b01 055f 8455 336b 4c20     .@.....{_.U.k3 L
   99464:	a41e 0c00 cc39 98cb 718e 0df7 d26c f323     ....9....q..l.#.
   99474:	8c09 4506 8f94 a3d2 cba3 ef81 e11d 0bb8     ...E............
   99484:	1cc0 c043 45fc 9cb7 80a7 fbef ed3e 0042     ..C..E......>.B.
   99494:	a807 8cb8 1ff0 ce6c aeef 72b2 4e96 0f11     ......l....r.N..
   994a4:	a1fb b79d 955c c833 60d0 13e6 c543 d248     ....\.3..`..C.H.
   994b4:	d768 c97e 6476 b62e 1f37 7895 0723 f6e2     h.~.vd..7..x#...
   994c4:	9f86 bdf6 abcd a2ac cdb2 13da 9d74 4ebd     ............t..N
   994d4:	f5ab 5e3a f3af ead1 1872 0f0f f3da e568     ..:^....r.....h.
   994e4:	0c87 427c 16dc 0438 5e78 394b 958f a41f     ..|B..8.x^K9....
   994f4:	0ff8 d75c af70 37ce 4bd8 178e 1c30 5857     ..\.p..7.K..0.WX
   99504:	5f96 312a 54c8 0eaf 058b 73eb 8f90 8960     ._*1.T.....s..`.
   99514:	012e da66 29b8 da6a 1637 80ea 1613 12ff     ..f..)j.7.......
   99524:	7a7f 5493 0c15 ecb6 e74e f571 3923 29eb     .z.T....N.q.#9.)
   99534:	6bd7 c67e 3c33 95e3 c6cf 178a 9c01 d85d     .k~.3<........].
   99544:	76f3 7f0a 4987 ac58 b0d7 773b df1b f247     .v...IX...;w..G.
   99554:	3305 0a25 f02d f044 0c13 88ab a404 2e8e     .3%.-.D.........
   99564:	8b9f 5fdb 4c20 cb89 a210 6519 6803 a10d     ..._ L.....e.h..
   99574:	4c54 006f 81d3 cfc9 9a61 7f03 65de e52b     TLo.....a....e+.
   99584:	f207 4218 6d8f b944 748b e841 4e0f 1e25     ...B.mD..tA..N%.
   99594:	9ffc e459 e4b4 4915 db16 271e 3a9b d96f     ..Y....I...'.:o.
   995a4:	811d 58b0 12f8 959f 6a48 8094 0ea4 f10f     ...X....Hj......
   995b4:	765f 0aea 86c0 b973 a939 a03f afd7 940d     _v....s.9.?.....
   995c4:	c1c4 ad40 cfcc b8d9 72f0 93bf 318d fb22     ..@......r...1".
   995d4:	ce60 3fef 1698 7f72 0149 1f2d 2d79 08ef     `..?..r.I.-.y-..
   995e4:	2e33 bbfd 4a3c 8b79 2400 38ed fd4a 1e4d     3...<Jy..$.8J.M.
   995f4:	00e5 8232 cd9a ed87 80fc fccd 50f0 040d     ..2..........P..
   99604:	7610 ca36 052f a928 fdc5 00a0 971c bb56     .v6./.(.......V.
   99614:	1024 c686 a2fa 83f2 cb45 8630 8ecb 2256     $.......E.0...V"
   99624:	9626 1b41 bfaf c51a 79e6 8cbe f98c 97c4     &.A......y......
   99634:	2e04 3479 fb16 c832 b807 7894 b277 fff5     ..y4..2....xw...
   99644:	4d36 93e6 c612 388b e463 0748 0200 9f88     6M.....8c.H.....
   99654:	1e1f 46c2 11b2 4b7e 3d84 aea2 4f48 d240     ...F..~K.=..HO@.
   99664:	ce5d c7c0 22bb b40f b19e 065b 392a 0b6e     ]...."....[.*9n.
   99674:	49ed a58b 22e1 0ac2 601e 6e16 0c4d d677     .I..."...`.nM.w.
   99684:	b69c 8722 5a1d c1c1 cfa1 20e0 b5f6 0e1b     .."..Z..... ....
   99694:	2221 bb4a 72e5 029e d269 7b82 84bf c295     !"J..r..i..{....
   996a4:	61f6 aa68 3c09 aa7f fa15 7005 4313 83b9     .ah..<.....p.C..
   996b4:	30de dba6 c431 0e7f 8130 626e 132c e58c     .0..1...0.nb,...
   996c4:	627e beab 5c06 9531 eec4 5863 9191 1c47     ~b...\1...cX..G.
   996d4:	e96e fa5d 1455 4b03 26c4 e486 fb1f c9cd     n.].U..K.&......
   996e4:	a9bd ca24 35f1 0931 a23d 0b4b 4e12 017b     ..$..51.=.K..N{.
   996f4:	09fd e1e3 f434 c87e 6c5b 4b07 2522 7c8b     ....4.~.[l.K"%.|
   99704:	2081 5309 72a9 055c e920 76cd a6b8 17be     . .S.r\. ..v....
   99714:	d2e0 9587 5086 58df 26f0 fbf0 c8d7 22a8     .....P.X.&....."
   99724:	c6f3 6871 6815 09f7 c650 4d70 24fd 362e     ..qh.h..P.pM.$.6
   99734:	887f 698c 87ea d8d0 3791 8ef2 35da 4169     ...i.....7...5iA
   99744:	443a f107 d540 7a5d 2c80 bbb0 2f8d 1777     :D..@.]z.,.../w.
   99754:	3caf 015e 8d96 da73 37c8 d612 c563 9ee4     .<^...s..7..c...
   99764:	be56 25e8 d6a5 d82a d616 8e20 6dff 6804     V..%..*... ..m.h
   99774:	7dfe 96f4 8d9d 3be0 82f8 8285 0dd5 87be     .}.....;........
   99784:	bc4f 824f e01f 9e83 7f46 069c f12f 7d50     O.O.....F.../.P}
   99794:	bd1d 0384 86f2 7ef0 02f0 007e f371 4de3     .......~..~.q..M
   997a4:	f826 e0a8 2c47 4af4 6913 bf04 de44 b749     &...G,.J.i..D.I.
   997b4:	3ddf ef41 ad6c b8ce 032c e7fc 0818 bfa5     .=A.l...,.......
   997c4:	d524 3cab f0ff ca7a c652 e2ab 9bf9 ec37     $..<..z.R.....7.
   997d4:	5f9b 2fd9 0298 4b05 cf63 ff86 9ec9 055a     ._./...Kc.....Z.
   997e4:	c2c9 2b5b 4b57 a594 1ff0 f137 7d92 2cc1     ..[+WK....7..}.,
   997f4:	e18f 4bef d0e2 1254 cb60 2837 29ef 5255     ...K..T.`.7(.)UR
   99804:	be5a e6a2 4a55 84c1 5a56 b642 645a b679     Z...UJ..VZB.Zdy.
   99814:	14fc 9274 14e9 2f7a c7e5 dbf1 049b 8aeb     ..t...z/........
   99824:	5c9f 7823 4622 7419 8026 33ac 4004 94a8     .\#x"F.t&..3.@..
   99834:	a74f e240 1d05 95bc 7f8e a129 fe49 724d     O.@.......).I.Mr
   99844:	2f26 1d78 d299 c116 253b 2837 c816 a8ba     &/x.....;%7(....
   99854:	4bc9 9b39 6fe0 f1d1 473f caef ab77 5f6f     .K9..o..?G..w.o_
   99864:	fb7e bbed 5f4f 2ef7 d68f efd6 8e2f 83af     ~...O_....../...
   99874:	a19f 7a18 3a31 be0e 8e8d ed3b bbd1 dc49     ...z1:....;...I.
   99884:	edf9 3fd2 4ebe 9f83 9ddc 5921 57f3 63e0     ...?.N....!Y.W.c
   99894:	1a38 0cdc 67b0 b700 9165 3957 0cb1 bf77     8....g..e.W9..w.
   998a4:	ed10 fe18 a012 0d8c 4b58 689c 3af8 f928     ........XK.h.:(.
   998b4:	019c 0384 2446 bd87 caa0 8ce9 39d4 d6ea     ....F$.......9..
   998c4:	2e7b 00a5 1a9e 63e6 dd70 3c8a ec63 324f     {......cp..<c.O2
   998d4:	5dec 6300 2506 c947 3111 ace1 cbfd a590     .].c.%G..1......
   998e4:	865d 6366 c108 aa6f fc78 68c1 3192 8244     ].fc..o.x..h.1D.
   998f4:	656a bf7c 009a b45c 7b1a 6e44 99b5 20c0     je|...\..{Dn... 
   99904:	3122 c558 ecee ec4f f8a7 5411 009b 7e0f     "1X...O....T...~
   99914:	5ce8 814a b014 db3e 45b5 74bc 92cd 949a     .\J...>..E.t....
   99924:	0683 02cc dae5 f4a6 488d c909 721b 4ef9     .........H...r.N
   99934:	8d86 b702 d010 7639 b1ac f0d5 e47b e750     ......9v....{.P.
   99944:	e64c 0011 d390 2d39 01b1 7862 1a9b 7e48     L.....9-..bx..H~
   99954:	f76d cca0 de3c a45a a403 905c eafc 7258     m...<.Z...\...Xr
   99964:	c76d 2c82 4a3a da8e 9db4 4f61 b7ad ce39     m..,:J....aO..9.
   99974:	22ec c942 45de 1c36 06d1 9767 c097 6096     ."B..E6...g....`
   99984:	d9f3 71a4 7296 80c3 b22c 16f7 88c1 45c3     ...q.r..,......E
   99994:	7df8 0250 08c2 f901 de21 3bc0 960f 6dee     .}P.....!..;...m
   999a4:	7d97 026c d341 7445 f8e2 d6b7 4e27 5f89     .}l.A.Et....'N._
   999b4:	8c06 8ba0 42e4 1512 cc84 d45c 2b87 265b     .....B....\..+[&
   999c4:	a98b a2af 3e83 1111 55de cf9e 3893 8853     .....>...U...8S.
   999d4:	ae1f f6bf 8a2a c68d de4a f018 4198 a6ed     ....*...J....A..
   999e4:	9988 552c 17f2 4fb1 1584 aa10 3bd0 00d1     ..,U...O.....;..
   999f4:	8bf0 b9b6 74ec c1fc a2fc 601c 7843 d08d     .....t.....`Cx..
   99a04:	6a89 4627 8c4f a93b 2a88 b3f2 1e28 9755     .j'FO.;..*..(.U.
   99a14:	dcc8 1fe3 a3bc 4291 1159 42d9 deb7 f34f     .......BY..B..O.
   99a24:	cd38 5ad8 e503 1d08 a523 2e2d 2043 fd25     8..Z....#.-.C %.
   99a34:	3b61 ff85 e987 d502 2192 2c99 3332 987f     a;.......!.,23..
   99a44:	4ee1 3286 6f5d 728b 0791 7e80 7715 82bc     .N.2]o.r...~.w..
   99a54:	8645 4346 a249 30e3 08a8 0aa4 8a00 c6d5     E.FCI..0........
   99a64:	efb5 5cb8 e42e 7202 69b8 317f 7465 94be     ...\...r.i.1et..
   99a74:	1daf 7bbf 5801 ee12 20dc 7f2d a146 8861     ...{.X... -.F.a.
   99a84:	3ca4 1091 1c3a a2db e077 8326 cf2c 3a97     .<..:...w.&.,..:
   99a94:	6e30 b502 8e1f 6e43 c288 9ca5 2b1c 0431     0n....Cn.....+1.
   99aa4:	ff49 858a 840a 7c98 4e0b 8a04 4489 4c88     I......|.N...D.L
   99ab4:	8f58 fd0d fb00 a459 4763 039d 05b5 8b28     X.....Y.cG....(.
   99ac4:	3a48 3244 8b7d 03ee e121 0fa8 0de7 d01b     H:D2}...!.......
   99ad4:	c336 8335 f51a f891 f548 690b 438c 9fbc     6.5.....H..i.C..
   99ae4:	a7e8 f0f0 e0f0 1705 ebac eac9 0966 183c     ............f.<.
   99af4:	f882 e3f1 a3d4 0e26 6468 172f eacb 31d6     ......&.hd/....1
   99b04:	4232 0330 780d 0885 2071 8c25 b601 b4d6     2B0..x..q %.....
   99b14:	b08e 4380 93a0 b0bc c276 3a60 96fa d489     ...C....v.`:....
   99b24:	cbe1 d7d1 127c a5fe c8a2 9142 370f 9499     ....|.....B..7..
   99b34:	396b e150 5b2b c80e 985f 41fc 2e45 a228     k9P.+[.._..AE.(.
   99b44:	7824 45d5 1115 9643 f958 a65d fce3 2c03     $x.E..C.X.]....,
   99b54:	9735 89d5 601c e277 3245 dbc7 35da 44c9     5....`w.E2...5.D
   99b64:	fa82 81cf 8407 a780 ff60 e0db 0227 2663     ........`...'.c&
   99b74:	719c 615f 1489 20de e2cb e416 4890 48ce     .q_a... .....H.H
   99b84:	5c71 1a8a 16ab 90f5 17cb b158 708c 8cb8     q\........X..p..
   99b94:	4549 a58e 8264 f892 7902 148f 665a 5657     IE..d....y..ZfWV
   99ba4:	fc02 7213 29d8 0cb2 607d 00be 299b 379a     ...r.)..}`...).7
   99bb4:	9b67 d50f 351d aa22 98c1 410e d74c 617a     g....5"....AL.za
   99bc4:	8a5b f255 ff00 d7ec a393 d696 7a9b 0943     [.U..........zC.
   99bd4:	6c80 6c5e 4183 4080 d7a4 ddb5 1bf9 2562     .l^l.A.@......b%
   99be4:	18a4 243e 0516 8525 051c e60a b894 e24e     ..>$..%.......N.
   99bf4:	7685 e6d6 1518 4798 a629 ea2b 040f 10c9     .v.....G).+.....
   99c04:	a769 0fc4 67bf c133 2ee7 283f c0e0 f565     i....g3...?(..e.
   99c14:	353e 8402 ba8d 761a a1fa 6b7a d142 407f     >5.....v..zkB..@
   99c24:	595d 5543 e312 4aa3 7aec 4001 2a90 71e9     ]YCU...J.z.@.*.q
   99c34:	5176 0a0c 1e94 7093 aa2c 8546 959c 1328     vQ.....p,.F...(.
   99c44:	01a5 2e1e 9e58 a8da 0934 320b 3536 3b00     ....X...4..265.;
   99c54:	70c8 69a3 8b23 a0e8 1be2 1306 1d85 0f2e     .p.i#...........
   99c64:	530f 4126 fda3 6293 9b27 db56 c109 e370     .S&A...b'.V...p.
   99c74:	b933 029f ea2d c011 4044 0008 db23 14a3     3...-...D@..#...
   99c84:	1c85 69d4 00ea 5dad f815 bf10 70e3 330e     ...i...].....p.3
   99c94:	da46 1ae6 eb9d 03f6 a640 5c9f 42b0 8ae4     F.......@..\.B..
   99ca4:	bd25 4c8b 2729 f75d 8188 2892 47c3 8d34     %..L)']....(.G4.
   99cb4:	00bc de6c 222e 644e c24b 3821 7841 d3af     ..l.."NdK.!8Ax..
   99cc4:	8963 3320 2519 1416 bb9c db6c f80d 7a48     c. 3.%....l...Hz
   99cd4:	5da6 3a1c b68a 1fd5 4abc eff0 11d1 cc32     .].:.....J....2.
   99ce4:	fa5c a803 26ea 017c 13c8 d0f0 c04d bf19     \....&|.....M...
   99cf4:	c7f0 2f8d 9824 37de ae8c fd6a 6f40 2dc5     .../$..7..j.@o.-
   99d04:	acc6 c4b6 5a2c d304 6c2d f5a1 7273 bc0d     ....,Z..-l..sr..
   99d14:	8b61 131d a976 ba7b c3fc c05c 2397 c46f     a...v.{...\..#o.
   99d24:	7d10 3bcb 90aa bea1 a1ac 263c fe1c d22d     .}.;......<&..-.
   99d34:	b90f 1f94 8d54 aaf2 1a60 82cc 7065 908d     ....T...`...ep..
   99d44:	aed3 9586 6af9 0b04 fe18 2f84 2fd0 0f0e     .....j....././..
   99d54:	06bf 0f64 03db 2f69 8a80 48ce 7b54 b780     ..d...i/...HT{..
   99d64:	2d94 958b d3af bd19 4098 7c6d 507b 268f     .-.......@m|{P.&
   99d74:	8787 10cf 79f0 0629 afb4 72e0 f866 8d37     .....y)....rf.7.
   99d84:	e216 88c9 4d04 9471 d4a2 b306 459e 0d58     .....Mq......EX.
   99d94:	50bf adfa 1c9e b9be 3d7d 0a01 3834 51c8     .P......}=..48.Q
   99da4:	ab38 555d 40c6 2ef2 6f6c c514 9132 3401     8.]U.@..lo..2..4
   99db4:	f8ca 5a24 a6b6 324f 2b24 dead 4c2f 67e8     ..$Z..O2$+../L.g
   99dc4:	dd7a 3c39 d5dc 4d07 7470 2972 fff2 438b     z.9<...Mptr)...C
   99dd4:	302a ee52 1427 87c4 7a34 875a 7c53 bf29     *0R.'...4zZ.S|).
   99de4:	4b31 073e a8b6 b2c4 db3b 2594 cc71 2030     1K>.....;..%q.0 
   99df4:	f568 fba6 896b ffb4 2fc1 72b0 08bf 9141     h...k..../.r..A.
   99e04:	6b4f 8b3c d1a6 c1b7 aa32 eb82 5688 6e1e     Ok<.....2....V.n
   99e14:	a0e0 3ecf 5234 e9ac 8579 c5a1 f455 7116     ...>4R..y...U..q
   99e24:	7b53 36ca 7b4c 4be0 1e27 0e5c 89d0 71bc     S{.6L{.K'.\....q
   99e34:	aaae 7bc0 eef7 438b 0fcf 29e9 2cca cc1c     ...{...C...).,..
   99e44:	60fc 7916 5823 47e0 d1de c8ec 747b 02d9     .`.y#X.G....{t..
   99e54:	3f3e 095a 3e1c 74ef fe06 346a 8cbf 4766     >?Z..>.t..j4..fG
   99e64:	b540 87c3 583f b746 fc52 7875 8638 d5fd     @...?XF.R.ux8...
   99e74:	0380 1b80 b6a6 feea a792 db59 e00b 83b6     ..........Y.....
   99e84:	5f59 dafb af73 ca5a fd65 eabd 169a 8991     Y_..s.Z.e.......
   99e94:	3f04 f902 4d3d 4033 b72e 5377 8b14 ded7     .?..=M3@..wS....
   99ea4:	7133 52ba d7e0 aefa e8ad 12a2 8da6 ec2f     3q.R........../.
   99eb4:	80fc 346e 1715 04ed ed27 694c a088 807c     ..n4....'.Li..|.
   99ec4:	5d1e 2c50 5fea 673c 03fa d1df 1c3a f21e     .]P,._<g....:...
   99ed4:	4567 a740 6042 097b 01c4 0595 659e 08c3     gE@.B`{......e..
   99ee4:	7541 9b6d 2b9a 890a be8e d7a5 c499 dcd0     Aum..+..........
   99ef4:	7410 0be4 8e9b a49c 911f 9488 776b 9070     .t..........kwp.
   99f04:	8928 a669 ad3f 65f3 b7d2 7802 66ed 1302     (.i.?..e...x.f..
   99f14:	0e70 425e 431b c411 d7bc 8113 d73a 8cb0     p.^B.C......:...
   99f24:	a3fa 8230 f3c4 6a2e bf47 27a2 51d6 3706     ..0....jG..'.Q.7
   99f34:	e03b 5d4e 4403 2a7f 1044 ea2f 11da 77ec     ;.N].D.*D./....w
   99f44:	fda5 ff6e 2c37 be6e c62a 6bc9 5214 d7ae     ..n.7,n.*..k.R..
   99f54:	f77f ed3b 4eff 34ec 5646 078a fc1b b195     ..;..N.4FV......
   99f64:	19db 2810 5505 937b 95a2 35f9 f249 ec33     ...(.U{....5I.3.
   99f74:	1783 f4ee f6e5 fb0c a761 6baf b892 0f1e     ........a..k....
   99f84:	3e77 f276 579b f27f d8ac 3c0b 744c 2863     w>v..W.....<Ltc(
   99f94:	3c8d 79bc 81eb 2014 e2bf 57aa 437e 2b77     .<.y... ...W~Cw+
   99fa4:	bbad ada2 2877 1d20 b688 cb40 8f61 7c8a     ....w( ...@.a..|
   99fb4:	91e7 4a14 0090 04c9 542d 83e1 2e7b 3ff6     ...J....-T..{..?
   99fc4:	fdc6 46cf 9469 e28f f64b 922c 5002 0bb7     ...Fi...K.,..P..
   99fd4:	83fc 70df fbff 6eba 58d2 003f 6430 a17e     ...p...n.X?.0d~.
   99fe4:	7139 e033 bfbe bc02 ba98 8622 881a 681a     9q3......."....h
   99ff4:	1405 a65b b628 f222 a03c ab39 8541 e124     ..[.(.".<.9.A.$.
   9a004:	5111 dd3e f88f 2c4a f71f ad0c 4d0c 078d     .Q>...J,.....M..
   9a014:	60b6 2292 09a1 e81b 33a9 6f43 b0b9 ff1a     .`.".....3Co....
   9a024:	7479 64a4 2488 1b54 22ea b83c 98a4 55e2     yt.d.$T.."<....U
   9a034:	68c5 bf5c d2a6 5eb0 02a7 135e 635e 1a13     .h\....^..^.^c..
   9a044:	c44d 246c b5ec f46b 905b 05d3 d71e 761b     M.l$..k.[......v
   9a054:	0cb4 c5eb f0db 7f25 e92c edcf c283 692b     ......%.,.....+i
   9a064:	050e 05be b7ae 7f8d d848 9404 1cc5 f8ea     ........H.......
   9a074:	98f8 c3d8 a317 f0df bd8b 891d ac79 c2e0     ............y...
   9a084:	4a8d 67f8 ef40 c589 b465 280a 3ead 8d96     .J.g@...e..(.>..
   9a094:	c3a5 f162 1700 737d 7535 5450 2758 a845     ..b...}s5uPTX'E.
   9a0a4:	dd23 8049 5e30 21ce 0817 1813 a9b1 62de     #.I.0^.!.......b
   9a0b4:	88b5 fcaf b202 f907 3a45 e600 47c4 0e52     ........E:...GR.
   9a0c4:	5741 863d c0eb b1f2 652d aa83 1425 c212     AW=.....-e..%...
   9a0d4:	2921 c1a1 02b9 55c2 68c4 4afb e74a 7550     !).....U.h.JJ.Pu
   9a0e4:	8505 4871 c010 cdf9 39da 83b5 63bf c849     ..qH.....9...cI.
   9a0f4:	08ac e359 528f 7f17 fa99 3022 a202 e531     ..Y..R...."0..1.
   9a104:	020a 7103 c290 11a6 bbb7 2e00 0fc2 f380     ...q............
   9a114:	c83d 5259 490e da58 4fd7 c17a 5448 01ae     =.YR.IX..Oz.HT..
   9a124:	8c10 5281 e09d 6634 cff8 8a32 3cc5 5116     ...R..4f..2..<.Q
   9a134:	5eb1 735f 91f5 54a0 548a 9530 0cb0 c046     .^_s...T.T0...F.
   9a144:	df14 4846 1ea8 a814 b9df 3f08 17b6 04c1     ..FH.......?....
   9a154:	45f8 3c6c 8ab8 61b2 8f8e c3ec 5c24 9c22     .El<...a....$\".
   9a164:	470d 6197 de1c ae12 3c3e dacc c1b7 2b15     .G.a....><.....+
   9a174:	fa99 a08c d8f9 42be 245a af6d 5c02 cc54     .......BZ$m..\T.
   9a184:	2b1a 642a 9b8c e40f 6ace a634 bc85 cd1a     .+*d.....j4.....
   9a194:	0be0 ce91 ff2d fa9a b49a ba01 5a66 b944     ....-.......fZD.
   9a1a4:	97a0 cda0 7471 3765 c577 5b9a 95b1 85bf     ....qte7w..[....
   9a1b4:	d05f 20ce 6927 cc2a 2a01 90ad c30b 9a26     _.. 'i*..*....&.
   9a1c4:	436b f9eb aab0 af04 f53d 09c3 5c66 fa74     kC......=...f\t.
   9a1d4:	b0f8 5a3f 28e1 fc63 4533 200d 973a 3857     ..?Z.(c.3E. :.W8
   9a1e4:	a45d 8768 5c57 dd42 065e 7da2 bc3f 6d82     ].h.W\B.^..}?..m
   9a1f4:	f21c c451 50b0 3f73 3414 fc13 5034 adeb     ..Q..Ps?.4..4P..
   9a204:	0f81 8819 602a a3cc 5de7 1461 c239 4183     ....*`...]a.9..A
   9a214:	c597 2225 f5f3 cb5a 1a42 0006 8739 114b     ..%"..Z.B...9.K.
   9a224:	7981 6ed6 7c52 a0dd 662e 150f 9cae c465     .y.nR|...f....e.
   9a234:	902a 2a8e af5c f4bc 1a38 5ae9 9aa3 2e4e     *..*\...8..Z..N.
   9a244:	69ca ce00 c032 dffa c8a3 0db9 8954 60af     .i..2.......T..`
   9a254:	ce6d 878b fe2b 6fe1 dd00 5268 736f 257e     m...+..o..hRos~%
   9a264:	9f9f 1d0f dace f6cb 4818 9f49 372b d2f0     .........HI.+7..
   9a274:	e74c 2b56 682b 5c51 4a6b 8525 a49f 1d44     L.V++hQ\kJ%...D.
   9a284:	6f85 d92f 16da d1d1 0951 a2fd d3ac b0e8     .o/.....Q.......
   9a294:	8de0 9490 9c43 45da bcbb ad80 eea7 0be9     ....C..E........
   9a2a4:	06b5 ba99 2f42 3b28 5f7d cdf0 7477 6137     ....B/(;}_..wt7a
   9a2b4:	1e94 bebc 6547 84e7 3735 1384 1187 35c5     ....Ge..57.....5
   9a2c4:	b681 66a4 1161 802e b853 4d95 b896 012a     ...fa...S..M..*.
   9a2d4:	ed8d f516 797e 4cb2 0bc4 0813 a946 c44e     ....~y.L....F.N.
   9a2e4:	8907 33a3 a754 55c4 4a98 78dc 8881 5132     ...3T..U.J.x..2Q
   9a2f4:	e23f 46c8 c122 d58a 2421 1802 07a4 c408     ?..F"...!$......
   9a304:	79eb fe40 c743 7870 7816 6e82 efa3 28e1     .y@.C.px.x.n...(
   9a314:	26c1 5ec3 fae3 9367 dbee ffaf 5a82 500d     .&.^..g......Z.P
   9a324:	f83d fd14 1476 c131 2dd3 9f40 cf21 af5f     =...v.1..-@.!._.
   9a334:	fdbb 46e0 3b9d c93a 3000 47df e331 639d     ...F.;:..0.G1..c
   9a344:	4560 ebe0 1006 7b0a 80fe 3a43 225a 0283     `E.....{..C:Z"..
   9a354:	41db 1fc7 13b8 85b6 a8d3 9837 22c0 494f     .A........7.."OI
   9a364:	0b4b 26b2 31ed 824e 6434 6d68 42c6 0183     K..&.1N.4dhm.B..
   9a374:	f8bb fa2d 7c04 6a0b 8d0c 83a3 b609 7872     ..-..|.j......rx
   9a384:	eb38 0274 d798 28b5 8c4e eccd 5a28 5006     8.t....(N...(Z.P
   9a394:	c710 d331 cabb 5778 f693 b075 9ea0 7a14     ..1...xW..u....z
   9a3a4:	d582 f464 12ea c931 0c35 bd79 d05e 6dbf     ..d...1.5.y.^..m
   9a3b4:	13fc 1bfd 453b 4073 0b69 14c0 7f0b 8e23     ....;Es@i.....#.
   9a3c4:	3cff d058 815d 7748 b721 c606 2476 ad77     .<X.].Hw!...v$w.
   9a3d4:	378f 2ac9 814b 7ab3 1793 b415 f622 4f9c     .7.*K..z...."..O
   9a3e4:	f82c ba3e 83f5 a96b 9de6 0b0e 33a0 98c2     ,.>...k......3..
   9a3f4:	9858 c14f f04d f83c bc10 de09 ef06 ef83     X.O.M.<.........
   9a404:	ef82 1f83 9782 d7c1 8bc1 c7e0 55e0 4bf0     .............U.K
   9a414:	3af0 5bf8 73f0 6df0 95e4 6fe9 cdbf ef13     .:.[.s.m...o....
   9a424:	83a8 27cf 7c28 7e09 b5d2 7e04 6003 4ff8     ...'(|.~...~.`.O
   9a434:	dff8 1117 5bf0 37c1 eff4 f4af 5fef 0fdc     .....[.7....._..
   9a444:	84d4 605e 2f80 7551 e824 826d 46bf 299a     ..^`./Qu$.m..F.)
   9a454:	f043 a8f7 d5ff a757 e0fd 81df b13e 1475     C.....W.....>.u.
   9a464:	81fe f660 d16f d03f 5deb 1ff0 17f8 1d55     ..`.o.?..]....U.
   9a474:	4bfe 247c 7c15 9531 0a88 b93f c3fe 6d7a     .K|$.|1...?...zm
   9a484:	74c8 920c 7b52 94da 2504 31ca d5f0 42b2     .t..R{...%.1...B
   9a494:	482a 058a 4684 221b acbb 3c8a d4ae 16b8     *H...F."...<....
   9a4a4:	85d6 b8eb cdbc 6bc6 18b4 2322 fa44 1d42     .......k.."#D.B.
   9a4b4:	3588 4ab7 d72a c730 58a4 570b 6b89 16a6     .5.J*.0..X.W.k..
   9a4c4:	4eb1 45cb 5cbc f3cf b97c ac5e 55e6 9cba     .N.E.\..|.^..U..
   9a4d4:	6b27 fff4 46b8 f825 9b3c aedf 81b9 f408     'k...F%.<.......
   9a4e4:	8635 580c 02a3 1ffa 7bbd e9f7 f7a4 5dee     5..X.....{.....]
   9a4f4:	eef5 f15d 5dee eef6 14dd 4e95 a320 0c3d     ..]..].....N .=.
   9a504:	c1df 75ff 50d7 a6e2 b973 fd1e 4a13 7af6     ...u.P..s....J.z
   9a514:	f81d ee37 fa5d 5e47 4390 77a9 46ef 51de     ..7.].G^.C.w.F.Q
   9a524:	1d51 5f79 bdb6 14a3 fafe 4f50 8ca4 fcbe     Q.y_......PO....
   9a534:	17e7 83eb beff 461c 48be 861a da8f e5aa     .......F.H......
   9a544:	e27f 47df fe97 fe97 f5a3 cf3b 78ce 61e7     ...G......;..x.a
   9a554:	3bce 2d6f f69a a2d7 779d 60ef 3194 1ff4     .;o-.....w.`.1..
   9a564:	dd6a 7bbe 6ed7 efb7 bcdf b6bf da73 cc3e     j..{.n......s.>.
   9a574:	f2f9 ed72 e51d f4d8 fe97 0bba df05 f761     ..r...........a.
   9a584:	0941 0e17 3000 1c13 bdb6 b27f 1d01 1b51     A....0........Q.
   9a594:	e4ff 2ff5 d17d d420 05e5 f0be ef02 f01a     .../}. .........
   9a5a4:	dcf1 ff59 80cb 85ff 2b12 8977 e8f6 e8e2     ..Y......+w.....
   9a5b4:	71bf f84c 57cb c7c5 f166 1648 a187 3e5c     .qL..W..f.H...\>
   9a5c4:	4982 397e 5634 468d 3531 c52a aec0 6a4d     .I~94V.F15*...Mj
   9a5d4:	e2bd 7eb2 6501 5567 f774 45fa e468 49fe     ...~.egUt..Eh..I
   9a5e4:	3b2c 3fe4 eeff 37eb cc6f 986c 56b9 b000     ,;.?...7o.l..V..
   9a5f4:	99b7 f3cd a3d6 2f2f ff31 b7eb 7f6f ad0e     ......//1...o...
   9a604:	73ce d218 6f4f fe5e c5f5 768f 0e0e f9f6     .s..Oo^....v....
   9a614:	d7ab 59df 0a23 04db c4e3 ad6b 4551 9d61     ...Y#.....k.QEa.
   9a624:	3355 5ffc 7f07 9df8 18f6 18e5 7ceb 21da     U3._.........|.!
   9a634:	62c5 2e06 ad62 7550 9d7b 264f 8bb0 23a3     .b..b.Pu{.O&...#
   9a644:	7580 fdbf ddee 4be4 5b3f 706b 73cb 0244     .u.....K?[kp.sD.
   9a654:	3814 8002 4b50 d04b a5e1 1f30 d67c 26b7     .8..PKK...0.|..&
   9a664:	678c c322 f8e5 9782 92c9 5264 673e 23da     .g".......dR>g.#
   9a674:	6ba1 d9bb 876e 686a afc9 6beb 1998 979b     .k..n.jh...k....
   9a684:	a69a 1335 05f8 7427 0fe2 0269 e0fa c3da     ..5...'t..i.....
   9a694:	f468 984f 17c1 987c 609b 4559 38c7 1234     h.O...|..`YE.84.
   9a6a4:	7016 b404 da16 6bd4 3526 bff0 4e38 6b83     .p.....k&5..8N.k
   9a6b4:	382c 377b efc1 f88f fa3d dde7 d1e5 bbbb     ,8{7....=.......
   9a6c4:	e577 ef97 1946 36d1 77ad c737 82c1 f837     w...F..6.w7...7.
   9a6d4:	f6a7 5108 ac06 fb4f 0ddd 0bfc c0d0 a013     ...Q..O.........
   9a6e4:	e0b9 4a16 608d c772 15c1 c17c 7cc9 7c77     ...J.`r...|..|w|
   9a6f4:	7c1d c132 4e8f 1c21 49c2 99dc de5e 83f5     .|2..N!..I..^...
   9a704:	1bc7 9536 9ae1 14cf 248e 03cd f981 8aa6     ..6......$......
   9a714:	a7ec c620 7ba3 4fbd 51de 79d5 7e7c fa7e     .. ..{.O.Q.y|~~.
   9a724:	3258 a869 0039 2404 9dea 145c f643 d036     X2i.9..$..\.C.6.
   9a734:	a545 e7c0 b8b3 eb40 76c0 4471 fc35 99d0     E.....@..vqD5...
   9a744:	7179 efd1 cfad 4fcf 3d9e fa0e 93bd c3d3     yq.....O.=......
   9a754:	7d62 f8fe a4f4 6fe7 ea48 ee26 7fdd b9a0     b}.....oH.&.....
   9a764:	5d01 3fca 0975 50f2 003a a234 ebf9 231f     .].?u..P:.4....#
   9a774:	b7fd 66d0 e492 172c 3ddb 4b87 bfef 3ba2     ...f..,..=.K...;
   9a784:	386a 07fc 352f 2f34 ffc5 af10 819d b7e8     j8../54/........
   9a794:	75f2 4189 524d 1ea7 06e0 9428 af64 446d     .u.AMR....(.d.mD
   9a7a4:	0c80 53e4 5e1b 9b52 4dcd 7554 2bf9 ea0b     ...S.^R..MTu.+..
   9a7b4:	bdf6 9f81 f969 eff7 8bbf cfea 28da 4b91     ....i........(.K
   9a7c4:	a7ec c48b b797 173c 28de 13eb d5ef efdb     ......<..(......
   9a7d4:	33bf d7c5 41e1 b51f 490c 2cf4 a91a 8577     .3...A...I.,..w.
   9a7e4:	9c62 bd61 f0ab 9427 4a1b ff85 b934 af91     b.a...'..J..4...
   9a7f4:	8ca2 4402 7a09 09a6 3310 6c7b f6c3 288b     ...D.z...3{l...(
   9a804:	7e0b 6a8c c119 e8ab 0de0 c410 d248 1011     .~.j........H...
   9a814:	e175 465e 046e 3e4d 2b0c 61b4 093d 2cad     u.^Fn.M>.+.a=..,
   9a824:	6999 f69a f64c be35 1f90 fdf4 40b0 68d1     .i..L.5......@.h
   9a834:	9e3c 1551 5d68 d9ff f2f6 a1ac 502e 37ec     <.Q.h].......P.7
   9a844:	e95d a272 528c 1727 1dd6 f78b 0886 7d8e     ].r..R'........}
   9a854:	6070 109b 6cc9 550f 6ff0 329c a6b6 75a6     p`...l.U.o.2...u
   9a864:	84e5 8b8c 9fa2 7f33 6d22 ee0f de6b c39b     ......3."m..k...
   9a874:	0a60 2e6e 650e 4ef5 03e5 5a09 312d b3b3     `.n..e.N...Z-1..
   9a884:	b7a6 5616 1f15 dc80 fc43 b4d1 f2c5 5df1     ...V....C......]
   9a894:	dbe8 c0e0 0f6a 5a9b 5daf eda9 ed6f 6261     ....j..Z.]..o.ab
   9a8a4:	c35f e736 5e4b b0bf 5368 f9a4 5bf8 f5aa     _.6.K^..hS...[..
   9a8b4:	c540 94c4 94af d704 bf7a 4a52 2887 d0ee     @.......z.RJ.(..
   9a8c4:	f0c4 51c3 5a86 9b6f 204d 5198 5bb3 7e65     ...Q.Zo.M .Q.[e~
   9a8d4:	782b 4fbf a015 d944 739c eae3 406f acc4     +x.O..D..s..o@..
   9a8e4:	fc6f cdb0 2d9f 0ce4 433f 7cb7 9aca 5714     o....-..?C.|...W
   9a8f4:	8e76 e433 dc12 3a5a 981b 2cb1 00c4 a1f3     v.3...Z:...,....
   9a904:	8a06 8c39 60dc 743b b66b 37d6 94c8 0f26     ..9..`;tk..7..&.
   9a914:	1f1b c501 b413 61fb b91d 610a d413 c0d0     .......a...a....
   9a924:	aa40 73ec 6216 4990 a04b 85be 0a9a 82c1     @..s.b.IK.......
   9a934:	f92b 30a2 d893 b988 ed13 3515 9f9d 43c3     +..0.......5...C
   9a944:	02e7 1abc be36 aa48 0629 71af bf3a 3fe0     ....6.H.)..q:..?
   9a954:	79ec 3b52 f68c 1c1b 2689 f3cd 0097 04d7     .yR;.....&......
   9a964:	0f78 7bd1 7de4 68c5 d68b 84a2 298b c1bf     x..{.}.h.....)..
   9a974:	d948 22ab 1e89 ba3d 2af8 a167 05cf 43f7     H.."..=..*g....C
   9a984:	c769 112c 583e 85f2 3817 d4ec 91bc dcd9     i.,.>X...8......
   9a994:	a13f a5ee 2ac4 8787 b0bf f3e5 0990 8cb9     ?....*..........
   9a9a4:	fe34 7903 7781 9844 5b3a 4315 6d51 d7ad     4..y.wD.:[.CQm..
   9a9b4:	2da2 db8d 8619 8b04 4e6b 35d7 16b4 f672     .-......kN.5..r.
   9a9c4:	d1ce ca96 a0da b314 b27e fb32 8f6d ea3d     ........~.2.m.=.
   9a9d4:	8aa0 5958 0237 3c0d 07c6 40d2 a52c b331     ..XY7..<...@,.1.
   9a9e4:	8678 3eb8 5ef0 2d34 e600 1347 52d7 4d52     x..>.^4-..G..RRM
   9a9f4:	9e4e d64a 69ae 49e6 ec46 6ba9 22e6 f02b     N.J..i.IF..k."+.
   9aa04:	c142 36c5 f2b4 1065 827e 512c e833 197e     B..6..e.~.,Q3.~.
   9aa14:	747a 01f1 724c 9bb9 2f28 f3e1 d16f 228f     zt..Lr..(/..o.."
   9aa24:	bd6f b1fe fccb 7c5e 166f 8cc6 fe45 239b     o.....^|o...E..#
   9aa34:	7735 2c95 44ad 7804 cb73 306e 0174 e870     5w.,.D.xs.n0t.p.
   9aa44:	c119 150e fe8f dc26 b007 d957 fd40 951e     ......&...W.@...
   9aa54:	0807 34ad d7b7 6e7c 1107 b472 0c08 44bf     ...4..|n..r....D
   9aa64:	c8bf d7a5 e288 f85f f90b 2f1a d7d6 6bd1     ......_..../...k
   9aa74:	9957 7ad7 4a99 c92e dd8f be71 2bc0 9045     W..z.J....q..+E.
   9aa84:	3f4a 0f71 7e78 33f0 926a e5e8 17c8 e947     J?q.x~.3j.....G.
   9aa94:	1d0f 8e28 0ff4 73d4 30ec 69b1 10a4 6d9f     ..(....s.0.i...m
   9aaa4:	f32b 7919 c9a0 606b 0f35 07da 6ff0 089f     +..y..k`5....o..
   9aab4:	f528 74ae e480 ef03 a87a db3e 4f85 a3ba     (..t....z.>..O..
   9aac4:	b1ce 1e1f 1ff6 361f 92e6 b202 a88d 7af1     .......6.......z
   9aad4:	c5f6 971b 463e d612 6268 039a b061 c48e     ....>F..hb..a...
   9aae4:	5fe8 6aa2 6b58 d127 895e 285b 0a83 cc7a     ._.jXk'.^.[(..z.
   9aaf4:	342c 683a 531c 3d07 b84a 24b3 1f8e 6116     ,4:h.S.=J..$...a
   9ab04:	88bb 545c 7434 aed8 05eb 4da1 d37a 5412     ..\T4t.....Mz..T
   9ab14:	d87e fa0f b887 37ea e6a4 22fe ba41 9932     ~......7..."A.2.
   9ab24:	0ee0 5535 8ea2 618a 1ec2 ad8f 4071 4fe2     ..5U...a....q@.O
   9ab34:	66a8 53f3 f890 f6a8 b157 5552 2953 5e18     .f.S....W.RUS).^
   9ab44:	fc3f 3e41 fc76 d500 ea3a 8c07 17af 1d9e     ?.A>v...:.......
   9ab54:	d816 df52 59b5 8b8d efcc 44d9 c3db 34a0     ..R..Y.....D...4
   9ab64:	14b6 f0f5 4b92 1a7c e8ad 91c1 9294 5f4a     .....K|.......J_
   9ab74:	c603 4e4c c600 e398 728f 60d7 7f49 5229     ..LN.....r.`I.)R
   9ab84:	534a 6d5c c061 fe64 ea00 d400 543a 1329     JS\ma.d.....:T).
   9ab94:	42c6 aa14 856a 7656 c1a1 df1c 23c5 a432     .B..j.Vv.....#2.
   9aba4:	c803 4f54 e9c9 6e30 1e63 9719 21fb f62f     ..TO..0nc....!/.
   9abb4:	0e13 257d fbbe 6a21 f9c8 8be1 504d 3409     ..}%..!j....MP.4
   9abc4:	9918 382e 1394 5218 e42b f8ff 055a 5389     ...8...R+...Z..S
   9abd4:	8acd 98f8 00ec a14c 9697 3fa0 4c8a 83d2     ......L....?.L..
   9abe4:	2ae3 a2f0 5f47 f1f4 0e56 d8e0 30d7 6c36     .*..G_..V....06l
   9abf4:	abc8 faf5 1a35 7000 12e7 4770 6de0 7fc3     ....5..p..pG.m..
   9ac04:	a4f9 c403 950e 9dc4 1319 af8b 0ed7 8b8c     ................
   9ac14:	3ae0 3a91 7d63 cbe6 2444 9cd4 14b6 e79a     .:.:c}..D$......
   9ac24:	b90a 5924 82f0 07ad 8f00 e52f 1be5 f76e     ..$Y....../...n.
   9ac34:	3883 29c9 de8d 2cb1 733f ad6b d88a ab35     .8.)...,?sk...5.
   9ac44:	ed85 0775 f30c da1a 9633 e1ce d325 f995     ..u.....3...%...
   9ac54:	b677 7a44 c0c9 e92a 990f e484 95e0 f3a0     w.Dz..*.........
   9ac64:	1b4c c47f 80ca 7480 12ae 6937 3168 700c     L......t..7ih1.p
   9ac74:	c814 b900 b046 7857 1631 725d 3824 934d     ....F.Wx1.]r$8M.
   9ac84:	7009 ecc2 8ac9 8734 3460 5264 6d11 a933     .p....4.`4dR.m3.
   9ac94:	def0 c2dc 7f3a 516a a0c9 cab5 648a 5f9c     ....:.jQ.....d._
   9aca4:	e967 c96f 95a4 5a7c fc62 341b 68ac 4779     g.o...|Zb..4.hyG
   9acb4:	2d09 7aa8 70b8 090a 9746 c75c ce98 a02e     .-.z.p..F.\.....
   9acc4:	0010 601b c66f 8bd5 3e15 02a3 5579 3f06     ...`o....>..yU.?
   9acd4:	1c44 be3d bf21 c820 f08a 37d7 4a24 a330     D.=.!. ....7$J0.
   9ace4:	17fd 783f 3529 122b b04e 85d3 1641 6dd4     ..?x)5+.N...A..m
   9acf4:	3a14 bd70 7e5c 4986 29e7 8f11 a8b5 14ef     .:p.\~.I.)......
   9ad04:	e5f4 cac3 110f 3e7b 04dc 181f f0af 7516     ......{>.......u
   9ad14:	5dfe f7e3 a93c 2d23 f29d f2a0 1d22 e446     .]..<.#-....".F.
   9ad24:	d218 faf5 fb19 a7d3 949f d751 26f0 02ab     ..........Q..&..
   9ad34:	116e 2bee 22df 912a 8d46 81cf e7ca 20c9     n..+."*.F...... 
   9ad44:	6019 a682 e51f 4767 07d1 5734 8a11 a79a     .`....gG..4W....
   9ad54:	ebac ea33 b0d9 2015 0b67 5286 c249 4be5     ..3.... g..RI..K
   9ad64:	86d4 1462 6033 4866 c3da 39ed 3ba3 8b4d     ..b.3`fH...9.;M.
   9ad74:	3c2e 05ef 0a8c a9fe 564c 3c93 022c 2242     .<......LV.<,.B"
   9ad84:	ace1 140a a398 10b1 43b2 57f8 b63c 7786     .........C.W<..w
   9ad94:	85de de17 d24d d422 73f5 85b8 da1b 7883     ....M."..s.....x
   9ada4:	472d 243e c91f 22e4 98f9 abe6 4f92 a8de     -G>$...".....O..
   9adb4:	dffb 854d 4f80 2487 bf66 de1d 6891 c5db     ..M..O.$f....h..
   9adc4:	a381 0c6e 63fe cf71 3241 bd3a db84 fe1f     ..n..cq.A2:.....
   9add4:	3405 3a30 7fa3 d1cf 44c0 0933 45e0 ffbd     .40:.....D3..E..
   9ade4:	d88e f03b 4209 5520 eb44 fc6c 7d20 40c4     ..;..B UD.l. }.@
   9adf4:	223d c19f 6151 f332 63ad 7d31 790b 3559     ="..Qa2..c1}.yY5
   9ae04:	1d63 9640 e968 1fd4 d1f2 c3f1 46dc 012d     c.@.h........F-.
   9ae14:	f71c 65d9 d474 3fc6 1c43 7e31 863e 7d52     ...et..?C.1~>.R}
   9ae24:	3c3f b2f9 a1ed 9b14 75b5 d64a 9332 f889     ?<.......uJ.2...
   9ae34:	63e5 73dd f756 25c9 fe8c ad69 8840 907f     .c.sV..%..i.@...
   9ae44:	3164 dc3a f788 d701 39b1 dec0 96d1 44fc     d1:......9.....D
   9ae54:	57ea aace 2d2e d701 c543 9846 23a3 cf9a     .W...-..C.F..#..
   9ae64:	2130 244d c563 4043 53aa f8e9 ac88 dff3     0!M$c.C@.S......
   9ae74:	05c2 d071 d9f3 4c8f 0cbc 81b6 93ff 6fba     ..q....L.......o
   9ae84:	ca9d 88ef 9f6f a636 0d87 d4f7 d21a 4336     ....o.6.......6C
   9ae94:	996f a296 d6ef aa29 047d 0e53 f842 b27a     o.....).}.S.B.z.
   9aea4:	ec5b 56e2 6433 8692 4d61 ff35 10c0 dc61     [..V3d..aM5...a.
   9aeb4:	cadb 6507 f451 53e8 d71f a317 1484 a55c     ...eQ..S......\.
   9aec4:	1788 c4b5 d10c fb7e ea9f 0b0d 72ca 3e79     ......~......ry>
   9aed4:	4b3e b2e0 e17e 6576 77c6 81c1 c6d7 d84a     >K..~.ve.w....J.
   9aee4:	fda1 f000 4974 5c9b 2692 012e 7cf5 643a     ....tI.\.&...|:d
   9aef4:	381b d629 d5a1 4ff5 5894 652b 4633 0f59     .8)....O.X+e3FY.
   9af04:	a222 aa76 0d99 f533 7c84 3c88 d21d 6197     ".v...3..|.<...a
   9af14:	6c36 47e7 cb88 963d 4430 1222 c790 f881     6l.G..=.0D".....
   9af24:	4079 ff3f 7fc9 8716 e887 23e7 f097 6c05     y@?........#...l
   9af34:	f790 caa5 33d4 802e f3f8 d0be 18f3 7518     .....3.........u
   9af44:	010a ac83 ffab 45e6 e4da 8204 8410 cadd     .......E........
   9af54:	1f5a 7adc 4b9d 1480 1d4d a9f5 23b1 e3af     Z..z.K..M....#..
   9af64:	2885 46b7 bd4d 5e1a 7a51 6c6f 087d 108d     .(.FM..^Qzol}...
   9af74:	a625 3be0 2388 1f0f f4af cef4 da19 7aac     %..;.#.........z
   9af84:	81fc 470e df22 fa09 e9cc ae09 3a49 5874     ...G".......I:tX
   9af94:	1e35 7ce8 a580 6926 ae2a 2331 088b 3bd7     5..|..&i*.1#...;
   9afa4:	7a1e cdda 39e6 fdd0 9347 58a1 c6a0 937d     .z...9..G..X..}.
   9afb4:	2de6 b6ea 0fcd 0f0f f24a a6ef 92ab ae0d     .-......J.......
   9afc4:	4207 03cd d92e 3a68 66ba 24fa 70e5 7cda     .B....h:.f.$.p.|
   9afd4:	16c4 11e4 6a71 acd3 fd07 32c1 86ba ca45     ....qj.....2..E.
   9afe4:	e4e6 1117 fe80 7960 6878 644c 8f23 7438     ......`yxhLd#.8t
   9aff4:	8cb2 f146 a3f0 a776 1f87 b8bb f4f0 197d     ..F...v.......}.
   9b004:	87c4 b787 706c e8e3 5323 fce9 5428 573a     ....lp..#S..(T:W
   9b014:	18d1 6068 2f32 0199 222b 3ab4 7057 041b     ..h`2/..+".:Wp..
   9b024:	2313 e4e1 9832 b346 c3c3 da8f d65b 7668     .#..2.F.....[.hv
   9b034:	9309 3a3d e482 fc29 4c3f da1a 449e a8b3     ..=:..).?L...D..
   9b044:	e707 896c 178a a580 8684 54e9 7a93 1d1e     ..l........T.z..
   9b054:	7701 253a efbe 070e aa80 b3ad 7260 75c9     .w:%........`r.u
   9b064:	246d 71e5 7a4b 6d74 114b 47d5 1db2 c4c7     m$.qKztmK..G....
   9b074:	e746 40e3 97fb b6ca d06a 35de 4428 5bd9     F..@....j..5(D.[
   9b084:	e6f6 f680 c0e6 1bd8 9120 d461 14d0 a98e     ........ .a.....
   9b094:	653d 9a23 236a 39c2 e04c 9ace 43e2 1017     =e#.j#.9L....C..
   9b0a4:	1288 4c51 513a 4c1a 71d8 fc9b 80b9 de8f     ..QL:Q.L.q......
   9b0b4:	e1e1 b8e4 3b40 8ddc 82e3 3a93 a457 b7a8     ....@;.....:W...
   9b0c4:	9224 a4a8 7a5d 428e 463e 4075 c582 a81f     $...]z.B>Fu@....
   9b0d4:	dacb 5603 3d93 01e5 cd39 33ea 5a52 8339     ...V.=..9..3RZ9.
   9b0e4:	f6fa 3512 fd09 5730 b6ca 14ed e978 0920     ...5..0W....x. .
   9b0f4:	8100 9765 de81 a595 d359 8db6 864f 229a     ..e.....Y...O.."
   9b104:	f1a9 8904 7c1c 134e 5c02 1a90 e28a 5445     .....|N..\....ET
   9b114:	c749 e99b 2628 a2e2 9d40 d448 8e4a 6528     I...(&..@.H.J.(e
   9b124:	bbe3 2fae 0f6c 6548 cdcc 0c91 cb63 de13     .../l.He....c...
   9b134:	7965 1615 010e 2a2b 33ac fd99 877b 881d     ey....+*.3..{...
   9b144:	01b2 25c4 e731 6a61 a308 6f5e 982a 82e9     ...%1.aj..^o*...
   9b154:	5d34 a54b 5c86 f292 1e67 5cc5 37a5 7721     4]K..\..g..\.7!w
   9b164:	305b f819 fb93 54e6 76a0 eeae 223c 821c     [0.....T.v..<"..
   9b174:	d114 b618 e39c 1d62 0c64 f14c 03fd ded6     ......b.d.L.....
   9b184:	979a 497d cc59 c6be 42d0 c175 bad0 48db     ..}IY....Bu....H
   9b194:	246a 5046 0b37 5768 0b3a 6081 5246 e47f     j$FP7.hW:..`FR..
   9b1a4:	d666 246b d5f2 c31d 3bf4 c9d1 9c57 bb5d     f.k$.....;..W.].
   9b1b4:	9cbb 1b08 ba21 1b89 9680 13aa 06c8 0ec9     ....!...........
   9b1c4:	282a 19a8 0c4e 3926 d0b9 f089 8409 b25a     *(..N.&9......Z.
   9b1d4:	a1cd 2d3e 21e6 b066 cdfe 963c 6d2e 80ca     ..>-.!f...<..m..
   9b1e4:	b37e 719d 4602 9e66 156a 9869 6de0 63e9     ~..q.Ff.j.i..m.c
   9b1f4:	9980 8279 aada e986 6d93 e2d0 a92b ba23     ..y......m..+.#.
   9b204:	8d19 c30b 8a1d fee6 9e6f 638f 0326 df55     ........o..c&.U.
   9b214:	1678 c667 996b 25f0 7d47 13a4 8e60 dcf2     x.g.k..%G}..`...
   9b224:	5ee9 c505 3f61 c902 0a89 4d67 2ff9 9f4c     .^..a?....gM./L.
   9b234:	a89b fe9c bb02 96fc d4b4 ead6 709b c1e8     .............p..
   9b244:	7701 87e1 9932 9159 d74c ffeb 304e 3d0c     .w..2.Y.L...N0.=
   9b254:	e4d9 0b90 920f bbfb 50c9 2af1 4640 9bd4     .........P.*@F..
   9b264:	fc40 5ddc 5818 e133 d025 3345 69ef 5394     @..].X3.%.E3.i.S
   9b274:	f8e1 bfa5 6441 9647 63c2 cf03 8f12 9b44     ....AdG..c....D.
   9b284:	7c40 c7b9 dba6 e956 64bf b403 811c cdfa     @|....V..d......
   9b294:	9127 9fa0 d083 37d6 c9dc 939e 321f 4c01     '......7.....2.L
   9b2a4:	3d5f 7976 6041 7063 86f9 1790 974a 277a     _=vyA`cp....J.z'
   9b2b4:	14af 4a2c 6b85 d76e 51d2 58a3 b454 c5e1     ..,J.kn..Q.XT...
   9b2c4:	7415 5e95 4aba 0d33 dfa3 51b9 759a 0093     .t.^.J3....Q.u..
   9b2d4:	2d38 daa9 a404 5561 15f7 3761 d4d5 f427     8-....aU..a7..'.
   9b2e4:	2d80 f6a8 7cd1 e889 727b e6d6 c774 9dca     .-...|..{r..t...
   9b2f4:	7a52 8f75 d208 cec5 5daa ca63 0cd0 67c5     Rzu......]c....g
   9b304:	75de 6d56 9097 5471 fa75 2458 d5f9 a02a     .uVm..qTu.X$..*.
   9b314:	ba84 dea3 3645 8ecc 30aa 82a3 75c0 dad7     ....E6...0...u..
   9b324:	1cd2 0eb7 722a 1a5e f89d fd89 9cd6 7540     ....*r^.......@u
   9b334:	c260 d4b7 efee 3da8 1caf 94a3 7fd7 0724     `......=......$.
   9b344:	e83a 9074 19de 5688 a30a eb95 5b7d 3a39     :.t....V....}[9:
   9b354:	be2a dcaa 908d 84ea 6d80 46e0 0d22 7fd2     *........m.F"...
   9b364:	b925 a7d7 9a56 51dd 7890 fbf4 0222 e3d7     %...V..Q.x.."...
   9b374:	7037 09e1 5dfe 8b02 8188 f089 5d3b d7c4     7p...]......;]..
   9b384:	b898 15f1 f60d 32e9 db2a 7c9f 5ad5 bab9     .......2*..|.Z..
   9b394:	a45a 2c28 8a0a e804 7aa5 39f1 1716 b617     Z.(,.....z.9....
   9b3a4:	56e6 a84b 945b 986a c906 cc45 34f4 4b78     .VK.[.j...E..4xK
   9b3b4:	f5a0 4121 68c9 a754 0d10 b98f 38c1 46fa     ..!A.hT......8.F
   9b3c4:	e5f0 fee8 5e50 c361 385e b296 1a4e 103b     ....P^a.^8..N.;.
   9b3d4:	e42e 00c1 ffc8 5de7 c829 941a c3c0 c3d0     .......]).......
   9b3e4:	901d 7382 176e 668e f8fb 4fee 6d3e 7f85     ...sn..f...O>m..
   9b3f4:	14c5 1d05 f19c af5c 004b 6e03 04b1 a26d     ......\.K..n..m.
   9b404:	115d 033a 3682 aa56 920d a69e cbd2 ce65     ].:..6V.......e.
   9b414:	73ca 8753 7982 a16d 7556 ad02 af45 aae6     .sS..ym.Vu..E...
   9b424:	c95b b2ec 9059 475f 90b1 01fe 3874 80ab     [...Y._G....t8..
   9b434:	946e a27d c2f3 12f8 3950 050e 50be 4b6c     n.}.....P9...PlK
   9b444:	3e1e 8c77 0e23 13f8 9846 7536 4f8f 054d     .>w.#...F.6u.OM.
   9b454:	32f7 9722 a859 85f6 50e5 b14a f0fc d81b     .2".Y....PJ.....
   9b464:	b9ae d72f 137f 8fbc b3d8 c01c b45c c345     ../.........\.E.
   9b474:	7c84 fc5b 6daa 01e8 3567 b099 2de5 56b3     .|[..m..g5...-.V
   9b484:	2a8f 90a9 148e 1e68 92dd 65c3 1998 b3d1     .*....h....e....
   9b494:	90c2 4c2c d7c5 1a00 de85 daae 5929 e488     ..,L........)Y..
   9b4a4:	2452 251b e29a 77c9 5652 d51b 6229 09db     R$.%...wRV..)b..
   9b4b4:	cba7 0e73 f6da 234e 47b4 8180 2b46 0bd9     ..s...N#.G..F+..
   9b4c4:	7b3e b590 f717 c069 4318 aebe d9cc 14c0     >{....i..C......
   9b4d4:	e229 26a9 c34a 7251 f692 1004 ebf5 8817     )..&J.Qr........
   9b4e4:	db72 9471 74a3 638f a96b c5b5 ff94 eb74     r.q..t.ck.....t.
   9b4f4:	57e1 6068 ad22 7273 8112 3992 3d10 4714     .Wh`".sr...9.=.G
   9b504:	cb4a 1dab b78b 1d2b 3910 5c59 ab91 f45f     J.....+..9Y\.._.
   9b514:	1dfd 541c d5ca 8ac1 8464 b906 2817 9b73     ...T....d....(s.
   9b524:	005c 7b1a 1120 24f3 31cb d684 aeae 2c20     \..{ ..$.1.... ,
   9b534:	473d 24f6 8657 8dd6 dce4 c72b 40f7 c8dd     =G.$W.....+..@..
   9b544:	8ca8 3e62 660b 39fd d88f 3834 51fb e200     ..b>.f.9..48.Q..
   9b554:	36d9 611b 9fa8 e30b a72f 3ec1 4df7 8b90     .6.a..../..>.M..
   9b564:	8df7 4034 fc97 2151 1275 6826 78a3 70e0     ..4@..Q!u.&h.x.p
   9b574:	8086 4cbe 2f04 99cf d588 fd7a c51e be7e     ...L./....z...~.
   9b584:	2edf 71e8 800a bb69 00bf f8b4 f40f 9b37     ...q..i.......7.
   9b594:	5be8 7a61 f9ee c5e2 ab86 9042 db6a 41b7     .[az......B.j..A
   9b5a4:	ddfd 3a27 7838 7c19 f6dd f303 dc6d 48ad     ..':8x.|....m..H
   9b5b4:	dfd8 69a2 36e0 afc2 f5ab aa48 5750 8a8d     ...i.6....H.PW..
   9b5c4:	485b 471d fe8f 8a84 f14f 1785 7f78 b462     [H.G....O...x.b.
   9b5d4:	2286 2cf4 0322 23cb 5bfa 73af 7146 89ac     .".,"..#.[.sFq..
   9b5e4:	66be 4cd1 14d6 d10c 9a0b f63c b90c 6637     .f.L......<...7f
   9b5f4:	45fb f02f d4a4 a4cd 8658 f0fd 2984 aa86     .E/.....X....)..
   9b604:	4137 f95b 39c5 a231 8eac 7749 9b4b a98a     7A[..91...IwK...
   9b614:	448a efb0 df91 6f35 acc7 5159 6d31 b15e     .D....5o..YQ1m^.
   9b624:	9669 8040 c231 a0ee b099 2b53 bba1 6f07     i.@.1.....S+...o
   9b634:	34da a0ee 1ac9 d294 625e cae3 c0aa 89a9     .4......^b......
   9b644:	a83e 3f2d 0ab3 e83a ad0d 7ee5 c3d0 c62a     >.-?..:....~..*.
   9b654:	c0d2 e2a7 74d7 a3d0 c8df de07 88b2 537e     .....t........~S
   9b664:	6aaf 693c 85e4 f31e b7a9 242c f175 3f9a     .j<i......,$u..?
   9b674:	42a2 f579 1a9a 66bc c88e 137e 93cf 09e4     .By....f..~.....
   9b684:	efe8 7fdf e007 890f 09f4 f249 fc55 f937     ..........I.U.7.
   9b694:	2f49 ffd6 3a29 4c21 6063 e0b3 e88b 9ff8     I/..):!Lc`......
   9b6a4:	915f 0065 101a 0f1c da2f f0c3 77ab efc7     _.e...../....w..
   9b6b4:	17fa b46b f80f b206 a3bb 867f 7a7f 7a37     ..k..........z7z
   9b6c4:	0dd7 bf2e e2fc 2078 9f42 e834 a3f9 44a4     ......x B.4....D
   9b6d4:	7c63 5ae1 c2f1 872c 8883 0c0f 9aa8 b8c7     c|.Z..,.........
   9b6e4:	816c 489b ac9c 98b4 aad8 cad9 e409 6b04     l..H...........k
   9b6f4:	2a38 f750 3436 408b 3ce7 4aec 7ae5 30ab     8*P.64.@.<.J.z.0
   9b704:	567d 5f90 cd4e 6487 8efb 2a5e 8f5d ba56     }V._N..d..^*].V.
   9b714:	4c7f d57e 9263 351e eea6 c7dc 19f6 4a8a     .L~.c..5.......J
   9b724:	3cce 8c4e 61c6 7510 4400 66b6 a69b 0ef6     .<N..a.u.D.f....
   9b734:	3688 f8f4 3e84 9553 3e09 a4a7 4af4 156c     .6...>S..>...Jl.
   9b744:	2a48 1957 ef76 cd51 676f 287f 0a80 2edf     H*W.v.Q.og.(....
   9b754:	e700 8a17 a09a e2c2 d0d7 45f8 a5ee d413     ...........E....
   9b764:	9322 5fef ddbb 16a4 b3dc f32a d484 c9f7     ".._......*.....
   9b774:	5d99 ef75 3d8a 4272 12e5 1c7f f01c f592     .]u..=rB........
   9b784:	a7e7 c3c3 94ff 3397 7d2e 4728 d421 b9c6     .......3.}(G!...
   9b794:	a843 835f 30bf 18db f900 57f6 77a3 ef37     C._..0.....W.w7.
   9b7a4:	76fe 7479 8fe1 79fe f971 9ae5 cbdb 497c     .vyt...yq.....|I
   9b7b4:	31e6 8d7f 8fa4 375f 4811 9f14 ffb1 b8ce     .1...._7.H......
   9b7c4:	cc42 3d9e 4c03 5ecc d152 baa5 c177 05be     B..=.L.^R...w...
   9b7d4:	01bd 24fc 9049 0918 9d15 470e 2f4c 0481     ...$I......GL/..
   9b7e4:	978e 5fe1 0384 00a8 10fd 641c 2c23 482e     ..._.......d#,.H
   9b7f4:	039c f792 1f31 43c0 3d24 f57f 7c39 61f8     ....1..C$=..9|.a
   9b804:	f1cd 256a 88f3 13c4 a49e 3e80 4a02 acbd     ..j%.......>.J..
   9b814:	ba30 0c1d f5f9 4f10 8872 46a8 e739 780d     0......Or..F9..x
   9b824:	19c0 56bc 66a8 8950 1867 a716 eea5 eb2a     ...V.fP.g.....*.
   9b834:	ed15 f066 7f05 c5ba eade 465e e62b 94ec     ..f.......^F+...
   9b844:	fe3b 0337 3144 b367 90fe 307f 99c2 8acd     ;.7.D1g....0....
   9b854:	fb1e c0b2 0108 1980 791b 5e18 aad9 19fd     .........y.^....
   9b864:	9a7a b322 4311 d41e ced6 d47b f3a7 f487     z."..C....{.....
   9b874:	c16d 0be3 3f09 afc3 e302 0088 a67f a777     m....?........w.
   9b884:	6369 8db6 a26a 5639 ecdc 0fc6 af6d ae6e     ic..j.9V....m.n.
   9b894:	6020 b2bf 49f0 fe43 a097 fdbb 6e1a a928      `...IC......n(.
   9b8a4:	942b 51c8 d989 51a8 4fca 3673 f889 c542     +..Q...Q.Os6..B.
   9b8b4:	e957 b0d4 709d b3f4 fc19 6355 f185 0420     W....p....Uc.. .
   9b8c4:	46bf dbaf d8af fa21 3b3b 6c42 cb11 3e35     .F....!.;;Bl..5>
   9b8d4:	c1d8 bfcf 5566 5f3a 1a93 31fa fb9a 23d2     ....fU:_...1...#
   9b8e4:	9414 5620 079e c058 146f 1194 0f2b 90d5     .. V..X.o...+...
   9b8f4:	1f1d 4f28 a8b1 d1c9 642c 4c20 272c 699d     ..(O....,d L,'.i
   9b904:	b2d1 599e b2d1 7bf8 6256 a646 0e01 d099     ...Y...{VbF.....
   9b914:	5a72 52a2 771b c909 0d9d 954a c020 2578     rZ.R.w....J. .x%
   9b924:	e293 1a35 8d6d 1d2e 3f22 43db be12 5771     ..5.m..."?.C..qW
   9b934:	4164 dac2 6a57 e436 4f20 87bb f9f0 e1c0     dA..Wj6. O......
   9b944:	5b17 85ec 41ce f8ea 7dd3 90b9 643b 2bba     .[...A...}..;d.+
   9b954:	8860 0bb5 b986 c6ce 39b7 82ed 04d9 79e3     `........9.....y
   9b964:	265e 33ba 7369 5cc2 49f3 16bf 8c51 c410     ^&.3is.\.I..Q...
   9b974:	4491 2eba 77b7 9a43 f282 4cfe 86d0 9bba     .D...wC....L....
   9b984:	b9dc 8b24 43e3 a3e7 1cb8 a0a0 971c 5c8c     ..$..C.........\
   9b994:	6941 065c 29a2 4a25 a3ed 8e6b 1878 b133     Ai\..)%J..k.x.3.
   9b9a4:	6c3e 3e23 db98 1b06 840d 1644 2b90 5cb7     >l#>......D..+.\
   9b9b4:	c90a e10c 7580 6927 6eaf 06f2 2605 273d     .....u'i.n...&='
   9b9c4:	2ae1 2846 d177 43dd 4787 ee4f 1390 4f01     .*F(w..C.GO....O
   9b9d4:	16a0 7a5f a4e9 4f6b 6ee0 1abc 8e42 e9b4     .._z..kO.n..B...
   9b9e4:	e096 ba1f 120d 79df cda0 6381 03c5 da84     .......y...c....
   9b9f4:	e2f9 0b8e 71c9 64c7 76e2 5b1d 6a73 67ce     .....q.d.v.[sj.g
   9ba04:	3865 c760 5070 9e00 9154 41bc 7342 d8df     e8`.pP..T..ABs..
   9ba14:	db8e 06f5 cc31 7092 6a9a fdf9 ad0e 02df     ....1..p.j......
   9ba24:	d162 85ad 1272 e779 8410 e90b 5d73 5d79     b...r.y.....s]y]
   9ba34:	93a8 f11a 98c1 2352 46c7 91ae 46be 511f     ......R#.F...F.Q
   9ba44:	efa8 29af f998 06b2 ade1 d726 aeaa a4aa     ...)......&.....
   9ba54:	9ba3 e2d9 196c 0720 eb0a 007a 86fe ba61     ....l. ...z...a.
   9ba64:	b2a6 bab6 6f03 361b eb76 1c54 ec5d d2aa     .....o.6v.T.]...
   9ba74:	d3d0 f37e fbd7 05a3 d6c0 5cf6 5b3a 03a1     ..~........\:[..
   9ba84:	73ab db24 5fb0 173c 9cd5 c2d5 ffa3 5f75     .s$.._<.......u_
   9ba94:	058f 8f87 f217 d996 8eda d0ce 2562 1d71     ............b%q.
   9baa4:	0db9 5935 a2ae 6464 ad64 20cb edd1 5186     ..5Y..ddd.. ...Q
   9bab4:	cc3b 6a38 d788 cf51 74c0 c6cf b3bc 5168     ;.8j..Q..t....hQ
   9bac4:	7004 c495 07c3 a12d 7fa1 ce73 43c4 c2cc     .p....-...s..C..
   9bad4:	86b5 0a51 1972 6325 9250 2a43 b49d 3740     ..Q.r.%cP.C*..@7
   9bae4:	ed22 277f 045d c479 3f53 bbf8 e312 40a4     "..'].y.S?.....@
   9baf4:	6047 1610 067c 2c09 90ac 82fa fe50 7447     G`..|..,....P.Gt
   9bb04:	eefc d1cd 75f1 6ff0 7e18 75ed 39f7 2c20     .....u.o.~.u.9 ,
   9bb14:	ee8c 1a5a b1ea e1c0 51d5 bfde ef51 9e18     ..Z......Q..Q...
   9bb24:	d432 aa63 1d71 e16a 9faa 9364 c24c 907d     2.c.q.j...d.L.}.
   9bb34:	7374 3ca0 f5c9 58cc 2fb5 a9a4 6218 5929     ts.<...X./...b)Y
   9bb44:	c5e4 e1ed 8e61 853a a0bd 6544 d257 8626     ....a.:...DeW.&.
   9bb54:	684b 78ae 83b5 60de 787e 2b18 433f 7473     Kh.x...`~x.+?Cst
   9bb64:	c40c 5e44 4828 500b e8b6 6bd3 6926 5717     ..D^(H.P...k&i.W
   9bb74:	f2f9 ecc7 0c5b e8bf 55df 0e18 5f80 2809     ....[....U..._.(
   9bb84:	471d fd9f e1ab 724a e3ab 4af6 fc06 ab09     .G....Jr...J....
   9bb94:	0e21 9c3d 478a f64f 14a2 19dd 97d8 68f9     !.=..GO........h
   9bba4:	8f13 62c5 8398 cd03 2371 4cc1 543d e48d     ...b....q#.L=T..
   9bbb4:	b9a8 7763 1700 5fc3 317d f84c 1ede 4e1e     ..cw..._}1L....N
   9bbc4:	c1f1 7497 e7f6 66e2 e90b 59d5 5c0c ccdd     ...t...f...Y.\..
   9bbd4:	bca8 3a85 7025 6be7 7f4e 6283 16a8 ac31     ...:%p.kN..b..1.
   9bbe4:	be08 60b2 864c 3aeb 1d61 3f30 8e94 0f80     ...`L..:a.0?....
   9bbf4:	0a73 85bd 50b3 88be 681b 4189 831b 7097     s....P...h.A...p
   9bc04:	d67f 5c18 e60f 978a 0538 e2d8 da3a c328     ...\....8...:.(.
   9bc14:	a0a4 1702 4ea8 771f 413a 5f49 3a18 4781     .....N.w:AI_.:.G
   9bc24:	dcfd 3604 24d5 60ef 3ad5 f54a 3e91 6838     ...6.$.`.:J..>8h
   9bc34:	cc1f 6d81 4b9a aee1 acfd 26ab c8c2 1e9a     ...m.K.....&....
   9bc44:	83ef ae6f e0b3 aa2a 2d38 166a 0476 38c4     ..o...*.8-j.v..8
   9bc54:	db80 9e69 97eb 6ca8 2567 58db 35af e260     ..i....lg%.X.5`.
   9bc64:	624d 6725 2b83 be7a fe4c 5696 50ee 3827     Mb%g.+z.L..V.P'8
   9bc74:	585f 83b0 3d15 9044 f257 42a0 a1dd 218a     _X...=D.W..B...!
   9bc84:	6199 c225 8570 4128 7218 6a3f 9e40 b6d1     .a%.p.(A.r?j@...
   9bc94:	eef3 0bb1 98c7 5da7 b7d1 b81d ab44 1ae7     .......]....D...
   9bca4:	01f5 bed0 a5f2 0f4d f110 1d02 14e9 5d4e     ......M.......N]
   9bcb4:	d181 2bc8 3292 7f9f f144 24e4 e0cf 868f     ...+.2..D..$....
   9bcc4:	d08b 7f28 b49c 7618 e140 2f25 f13b 032e     ..(....v@.%/;...
   9bcd4:	48ac 794e 6f03 031a dd8a ef51 7a17 a7f6     .HNy.o....Q..z..
   9bce4:	597a a55e 5bd3 2f0f fcae a0ba 5408 5d46     zY^..[./.....TF]
   9bcf4:	ed51 f512 3c96 f0b4 5ba4 88ad e078 faaa     Q....<...[..x...
   9bd04:	6592 4840 6fcd dbe2 91d2 7697 5a71 79da     .e@H.o.....vqZ.y
   9bd14:	e2ec db70 55b5 66ad 25fa 03c7 a89f 21a8     ..p..U.f.%.....!
   9bd24:	f62a 58af b6cd 7eae c2e4 3932 246b 4c8e     *..X...~..29k$.L
   9bd34:	942e 54b1 d909 d16b cc63 bb65 2dde 4b9c     ...T..k.c.e..-.K
   9bd44:	f077 419a 58c2 d57c 321e 8b92 5014 50ec     w..A.X|..2...P.P
   9bd54:	b67e 367d 3469 a252 e30d c693 b8df 4811     ~.}6i4R........H
   9bd64:	b2db 27a5 1fe2 03b7 da90 5108 91f8 9087     ...'.......Q....
   9bd74:	5de7 bf52 0a84 d533 0b2a 1d91 1b93 357d     .]R...3.*.....}5
   9bd84:	f424 8a69 d44e 4449 0aab 0923 9f43 02db     $.i.N.ID..#.C...
   9bd94:	491d c520 8278 0161 7e37 05aa 065a 31ee     .I .x.a.7~..Z..1
   9bda4:	e25d 0b73 4e6e 5f50 44e3 71ad ea8e 2599     ].s.nNP_.D.q...%
   9bdb4:	39fc 1cbd 6c14 a359 c918 a0e7 b5a4 4c9c     .9...lY........L
   9bdc4:	55f4 22ce f1dc ff51 c99f d425 8813 5201     .U."..Q...%....R
   9bdd4:	e84e 2237 3f06 6948 2e41 1e1d 53df 52e7     N.7".?HiA....S.R
   9bde4:	c3a5 7422 d89d b3ff cc09 300a 7130 37c4     .."t.......00q.7
   9bdf4:	3228 4b14 7406 5304 46ef 25e6 ca05 4823     (2.K.t.S.F.%..#H
   9be04:	c137 2ccd 5cc9 d462 1840 d607 ccbc 2e6b     7..,.\b.@.....k.
   9be14:	3169 0f36 00ea d7af c05b 2626 86df 6ae4     i16.....[.&&...j
   9be24:	987b 1a84 a380 ec72 fa1e 44e1 3192 f7cf     {.....r....D.1..
   9be34:	65f8 0207 1602 36af 30c4 500d 140b 79ae     .e.....6.0.P...y
   9be44:	7e0e ee84 a3c8 a761 e253 cb55 5701 03a6     .~....a.S.U..W..
   9be54:	436a afb7 7d17 ba16 b487 d803 1435 3993     jC...}......5..9
   9be64:	fe9e 30b3 0e7e ee62 34ca 1b27 6326 3015     ...0~.b..4'.&c.0
   9be74:	2d49 fe84 1c4b 15a1 133e 9803 13f1 af34     I-..K...>.....4.
   9be84:	209f 812c a991 e868 7202 736b 36c0 4950     . ,...h..rks.6PI
   9be94:	9e40 4e0e fe07 0507 631c a7a2 49c8 5363     @..N.....c...IcS
   9bea4:	3d96 44ac 2da0 e585 4465 7e9f 5540 16fe     .=.D.-..eD.~@U..
   9beb4:	55a7 0fd8 f966 c27c 0c32 72c2 1bc8 52c6     .U..f.|.2..r...R
   9bec4:	4747 88a1 7e21 ef80 45f3 38ad a859 f41e     GG..!~...E.8Y...
   9bed4:	9d86 568e a48d d46b 2a34 c815 e41f 9bc5     ...V..k.4*......
   9bee4:	44c7 ca34 f45f d8a0 187f f2ab 182a bebd     .D4._.......*...
   9bef4:	f2e4 a01a aea2 13af ea6e b144 da97 7caf     ........n.D....|
   9bf04:	b52b 51ed 686b 8e4e f999 2a74 7c53 f6c1     +..QkhN...t*S|..
   9bf14:	eb1a 3915 3c7c 07ff 230e e032 c3dc 4f37     ...9|<...#2...7O
   9bf24:	07f4 d482 2bdf c4d6 bc1b 866c 5265 4dbd     .....+....l.eR.M
   9bf34:	4917 aabe bcda 3f69 bf6c 3872 69be e00e     .I....i?l.r8.i..
   9bf44:	2f5e 45ab 076f e06a e43f 56e6 86f4 6d62     ^/.Eo.j.?..V..bm
   9bf54:	8138 7fc9 7061 0a57 18d7 4dd5 9810 5beb     8...apW....M...[
   9bf64:	92f2 f2ec 8bb9 3cb2 9c94 90cb 8a3f 05ec     .......<....?...
   9bf74:	1a12 7a89 88d2 0161 ff4e 9a8b 832d 280c     ...z..a.N...-..(
   9bf84:	00fb 1276 969b e8ca 4c46 94aa d305 4ed5     ..v.....FL.....N
   9bf94:	c153 72a2 1f91 9254 b523 82a5 2173 aafc     S..r..T.#...s!..
   9bfa4:	eac3 28ad 70c0 5703 d2bb 39e4 b919 e040     ...(.p.W...9..@.
   9bfb4:	6c02 36e9 22b8 62d5 a4f4 f80c 10b6 6931     .l.6.".b......1i
   9bfc4:	f44a 2b8d 7cb2 ab4d 5019 6ada c628 87e1     J..+.|M..P.j(...
   9bfd4:	21f3 8a33 db42 1ce1 2f19 d55c 8565 ab71     .!3.B..../\.e.q.
   9bfe4:	9da3 5c8f 06cc ff51 707d 3da4 0581 1765     ...\..Q.}p.=..e.
   9bff4:	7a63 e1f4 6b2f 8cb5 f6f4 5283 2a8f 21f8     cz../k.....R.*.!
   9c004:	8f31 be18 c876 287a e1c4 6023 e096 92e4     1...v.z(..#`....
   9c014:	628a 5096 39f8 f116 298b 64c5 9d74 2975     .b.P.9...).dt.u)
   9c024:	087c e6f9 ccaa 1142 edd7 2201 0b89 988a     |.....B...."....
   9c034:	9c08 b32b f4a7 27d0 e77d 8a03 ebb7 8167     ..+....'}.....g.
   9c044:	4b76 4143 a443 4647 a38c 8c8c f413 64df     vKCAC.GF.......d
   9c054:	915b dea1 1568 5f3a 8533 13c4 01d6 3af7     [...h.:_3......:
   9c064:	b48f e9ea f3a5 a7a9 1402 c15e 6478 508c     ..........^.xd.P
   9c074:	3e84 542d 7016 beb4 aa1c 9cd1 3111 60b4     .>-T.p.......1.`
   9c084:	214f aa39 ebd9 77a1 3b72 a32c a9e6 355f     O!9....wr;,..._5
   9c094:	0da6 11da 7c39 0198 551d 025d 4a3d 3587     ....9|...U].=J.5
   9c0a4:	fadc 6e4c 1c05 c577 91a9 3245 488c 6523     ..Ln..w...E2.H#e
   9c0b4:	3888 c0b4 65b0 b2d6 775e 8865 e42c e036     .8...e..^we.,.6.
   9c0c4:	f1c4 0b37 961e ab45 c199 2b78 cebf da7a     ..7...E...x+..z.
   9c0d4:	e931 ad8d f58a 60e5 a840 e266 791b cb48     1......`@.f..yH.
   9c0e4:	9791 3d61 ec7a 20b0 2ffd f572 915b 46d4     ..a=z.. ./r.[..F
   9c0f4:	311b 170e 2fe5 14fa 0a02 0676 3dc7 551a     .1.../....v..=.U
   9c104:	7a41 ba89 4803 143f 152c aedf 230b 391c     Az...H?.,....#.9
   9c114:	85a9 ba15 5c77 1ba6 5dc6 c53e 02a3 2c43     ....w\...]>...C,
   9c124:	886e c5c9 d983 4114 074e 6d2d d65a a421     n......AN.-mZ.!.
   9c134:	85b8 313e e3a8 30b8 2c99 a8ab 960c a5b1     ..>1...0.,......
   9c144:	2035 8874 6007 4e24 ae89 d959 c647 0ebd     5 t..`$N..Y.G...
   9c154:	bbbe cf63 5faa dbbe dfac c48d 25f7 a9be     ..c.._.......%..
   9c164:	5016 3da4 bafa 5ff3 f218 7b54 69f7 279e     .P.=..._..T{.i.'
   9c174:	a67a b9e6 bc2c fe9d c373 0322 6037 a86a     z...,...s.".7`j.
   9c184:	80c9 a79c 280b 617a 01d7 228c 9422 ff70     .....(za..."".p.
   9c194:	ef00 b5b7 d49b 7dda d8df 6270 6c36 fd3f     .......}..pb6l?.
   9c1a4:	ea4c 6c35 c6a0 20ab c0c6 b9cf f8a6 8063     L.5l... ......c.
   9c1b4:	c334 9acd 9008 5085 ab23 d409 eafe 0993     4......P#.......
   9c1c4:	7aa3 391e 7848 e056 a5f1 1d44 1297 9429     .z.9HxV...D...).
   9c1d4:	f63b 1326 1a1b 318b c10b 445e d1f8 df45     ;.&....1..^D..E.
   9c1e4:	0143 3f45 5657 38b7 8e8d c4c7 fa96 28c9     C.E?WV.8.......(
   9c1f4:	94b8 1ce1 6663 ef33 18f9 009c bf2e 7c84     ....cf3........|
   9c204:	d527 8086 c5ef 191b cbf2 730c 09a8 1918     '..........s....
   9c214:	2240 a5af 3eb1 6b15 bd92 a0a9 cf39 d97f     @"...>.k....9...
   9c224:	5b21 fa95 3ea6 f648 9e14 a86b e2ac f62f     ![...>H...k.../.
   9c234:	0962 39a1 230d 4119 b494 c542 4296 f26c     b..9.#.A..B..Bl.
   9c244:	db2c 8c59 3051 79ce 0471 bacf 5c61 3f8c     ,.Y.Q0.yq...a\.?
   9c254:	27d0 205b edae 2730 721b 684b 543b 8747     .'[ ..0'.rKh;TG.
   9c264:	c687 50f2 da9c 330d aa67 3a82 c443 3872     ...P...3g..:C.r8
   9c274:	edad 6d00 d82b 7d6c 3827 cbd0 e0cd 3e0f     ...m+.l}'8.....>
   9c284:	ec1c 5d7f ab25 fb64 83d5 e8cf 0511 9831     ...]%.d.......1.
   9c294:	c27e dc08 0554 2c65 781c 82e9 1d41 5423     ~...T.e,.x..A.#T
   9c2a4:	3686 9a02 1152 80ed cfea 40db 8578 9dd2     .6..R......@x...
   9c2b4:	f01b 8461 a58c b5a7 5249 181f 85ca 28f9     ..a.....IR.....(
   9c2c4:	07b8 d790 2a5d 46c5 4850 eba7 8218 2944     ....]*.FPH....D)
   9c2d4:	432d f7a9 0c54 6ae3 fa33 7745 8ec3 18f2     -C..T..j3.Ew....
   9c2e4:	1bde 0c43 d403 1393 26d2 d564 1499 3656     ..C......&d...V6
   9c2f4:	7458 3e3a 2b7a e36f 2240 b2fe dc2c e8d5     Xt:>z+o.@"..,...
   9c304:	fd75 6380 9cf0 dba4 2a41 dc08 7918 00c4     u..c....A*...y..
   9c314:	7dd5 9709 0490 b894 147c 6884 7563 1793     .}......|..hcu..
   9c324:	037c 84a8 5037 9088 456d 10c6 5cb3 2cf4     |...7P..mE...\.,
   9c334:	63b8 d612 9166 2d9b d0f0 e511 92a8 9dfb     .c..f..-........
   9c344:	b25d 3488 e236 6d74 1b14 89ea 5415 40ef     ]..46.tm.....T.@
   9c354:	11d3 b36a 7a68 86b8 8641 6a2b fe43 d957     ..j.hz..A.+jC.W.
   9c364:	6c50 c0af d2bd 1f13 4f51 1a98 396e 7aa6     Pl......QO..n9.z
   9c374:	3a6d 0366 1013 81f8 f808 c236 f498 c3cd     m:f.......6.....
   9c384:	4a93 bf2f 3a0a 09d4 8072 f6e7 e863 646c     .J/..:..r...c.ld
   9c394:	4f3c e2e2 b63f c3b6 92c1 7d01 7140 eb9e     <O..?......}@q..
   9c3a4:	3282 195d 1fbe 26a4 cab7 2e6e 8741 4949     .2]....&..n.A.II
   9c3b4:	368f 4eb6 ce07 6a5e dab0 8079 1f01 2c37     .6.N..^j..y...7,
   9c3c4:	7322 e6f3 2409 449a 847c aa3c 4091 180c     "s...$.D|.<..@..
   9c3d4:	28da 0c48 2578 9144 9031 3bc7 e8ea e028     .(H.x%D.1..;..(.
   9c3e4:	08bf b50a 2db8 0c25 d53e 5db9 042e 0149     .....-%.>..]..I.
   9c3f4:	1d17 dfa3 21e9 37d2 2f93 75df fed7 c9bb     .....!.7./.u....
   9c404:	fc11 2518 2f2f 0329 ae7e 63fd f01e 202a     ...%//).~..c..* 
   9c414:	4842 afd8 c9ac 05a2 383d eafb 47f1 528a     BH......=8...G.R
   9c424:	0845 f15a f8dc 116d 935f 32fa a472 0ba6     E.Z...m._..2r...
   9c434:	57c1 056e 2067 5f26 f935 cc28 3edc 690a     .Wn.g &_5.(..>.i
   9c444:	b844 5630 f0b6 1885 afc8 197a b7ee c2b0     D.0V......z.....
   9c454:	6d10 e7a6 3f59 91f8 eb19 9f3d 59e7 4482     .m..Y?....=..Y.D
   9c464:	fe34 c525 b859 ac4b d25f 5dfc f7d8 9505     4.%.Y.K._..]....
   9c474:	b7a1 1c2c 5f60 fa7c 58ea 7b7e 43d0 5396     ..,.`_|..X~{.C.S
   9c484:	cff3 ad59 e0e8 6aa0 d96c 28d0 92e6 f40a     ..Y....jl..(....
   9c494:	af96 acb4 3f06 c976 32da becd 5d59 cd5d     .....?v..2..Y]].
   9c4a4:	f413 907c 14f1 e30f 527f 189d 5b49 2ee0     ..|......R..I[..
   9c4b4:	d18e 3ced eded 5f22 c995 997a 59a7 1495     ...<.."_..z..Y..
   9c4c4:	ae6b 02dd bf4b d7f2 a063 3e79 a31c 7983     k...K...c.y>...y
   9c4d4:	c92a 631b 0441 dfe8 557c cd5d 0557 c412     *..cA...|U].W...
   9c4e4:	2a2b fa34 f767 4bf2 2072 6dde d177 399b     +*4.g..Kr .mw..9
   9c4f4:	daa9 d5a2 b018 2cd5 317e e1c5 54b6 0c3b     .......,~1...T;.
   9c504:	0eff c6ca f948 0857 ca3e d2eb fe67 8810     ....H.W.>...g...
   9c514:	03be 5a0a b088 6072 339e 0ea0 0a79 831a     ...Z..r`.3..y...
   9c524:	854b dc31 1679 b3fc 3ecd 1122 d404 da0f     K.1.y....>".....
   9c534:	e8f3 1b23 8960 1532 8bf5 a145 e18a 6b37     ..#.`.2...E...7k
   9c544:	4992 c45c 972f 8bb4 f09f 80d7 f2fc 1e8a     .I\./...........
   9c554:	b112 2121 4b57 a426 51ed 0531 9661 8c05     ..!!WK&..Q1.a...
   9c564:	92cc 99b4 ab85 4d6d cb6e 72ef 3b3c 3d44     ......mMn..r<;D=
   9c574:	4dc0 71a3 9e5e cf87 52cd 6a9d 9885 94a3     .M.q^....R.j....
   9c584:	5046 68d5 e975 4773 d70b 8611 0acd 5196     FP.hu.sG.......Q
   9c594:	231b b165 b886 4365 9857 f836 9201 d3da     .#e...eCW.6.....
   9c5a4:	8c48 b48b e3c2 68f9 22c6 cfc5 76a2 9c3a     H......h."...v:.
   9c5b4:	f176 be3e a386 96f9 5ec2 af77 4480 dee3     v.>......^w..D..
   9c5c4:	660a 6341 b1dd b78a 477e 4f16 20b3 0587     .fAc....~G.O. ..
   9c5d4:	36a1 19ae 53d7 7c04 c2d3 058c 659b 149b     .6...S.|.....e..
   9c5e4:	ed88 530b b9d3 4a7d eb6b 0556 ca67 2901     ...S..}Jk.V.g..)
   9c5f4:	38ec 6d9c dc58 1271 b92e 46d9 d517 8044     .8.mX.q....F..D.
   9c604:	688b 224f 9d1c 9e4f f01a 9f0b 274a 7672     .hO"..O.....J'rv
   9c614:	f3cf 8655 3821 88a6 562c 7c4b a696 290f     ..U.!8..,VK|...)
   9c624:	035f 8c78 0a7d 8ce1 c896 c8b6 5f11 6a15     _.x.}........_.j
   9c634:	c862 9719 4240 90a3 4b87 7f8d 8b45 3f63     b...@B...K..E.c?
   9c644:	0b18 15b8 6a70 4426 456c a030 70ce 5e22     ....pj&DlE0..p"^
   9c654:	ad97 c321 d05d a683 89c2 0e08 8813 611d     ..!.]..........a
   9c664:	0ee7 aa27 c1d1 390f 8a7f 855f 1a59 11c7     ..'....9.._.Y...
   9c674:	a4a6 239d eda1 27b0 a2dc 92eb 03df c2ba     ...#...'........
   9c684:	4a19 f433 3b16 97a0 01c1 5af5 4052 c339     .J3..;.....ZR@9.
   9c694:	2a05 183a c8c2 de1b 0091 8c25 3146 bb0c     .*:.......%.F1..
   9c6a4:	625f 0f80 891f 36fa a17e 21c3 70e4 89a3     _b.....6~..!.p..
   9c6b4:	ed0c d386 471b 0c13 7cba 6000 0d7b 3360     .....G...|.`{.`3
   9c6c4:	0aee a7f8 6d97 b3b6 ce94 beb6 9f44 0c2f     .....m......D./.
   9c6d4:	c78c 095d 30c5 ee4c 7e25 abac 7ac8 7e5f     ..]..0L.%~...z_~
   9c6e4:	b1e9 03f0 2a07 209d 405b 8e49 083a 1d7a     .....*. [@I.:.z.
   9c6f4:	6c0b 9d3a ca60 5609 7504 a5f6 d320 c41f     .l:.`..V.u.. ...
   9c704:	9e30 e289 a7c7 b430 98b8 37e4 cae8 7e4a     0.....0....7..J~
   9c714:	0a8b 40cb 4ba2 427e f35e 9926 f9eb c004     ...@.K~B^.&.....
   9c724:	9649 0410 9d3e e546 6dd8 c286 b9a6 762f     I...>.F..m..../v
   9c734:	1253 b3d3 8423 020d 8055 81e3 362d 239a     S...#...U...-6.#
   9c744:	ced7 145b 045d 313a 31ee f4e8 17c8 4716     ..[.].:1.1.....G
   9c754:	a6ca 9f67 33a6 8d10 8160 215f be44 c110     ..g..3..`._!D...
   9c764:	b8c5 f661 2190 b0f4 2002 7955 d772 80a8     ..a..!... Uyr...
   9c774:	a5fc 6ec1 82c8 c723 1951 b815 af7b 5382     ...n..#.Q...{..S
   9c784:	7fc3 e1ed 53e1 f7eb 9cc1 b6e3 51d9 62ed     .....S.......Q.b
   9c794:	99c1 14cf 0cc7 5fed dba0 f697 9a32 7d69     ......._....2.i}
   9c7a4:	f0c2 9297 5b0d d3f2 7143 54d4 d0d5 bff3     .....[..Cq.T....
   9c7b4:	61ea e014 3bcc 619a e84c 6bd1 2f29 b21b     .a...;.aL..k)/..
   9c7c4:	22b0 bbaf 2b6c 4167 9e4d 6a81 48f4 a54a     ."..l+gAM..j.HJ.
   9c7d4:	5be5 b436 1d28 849e 81a7 06b6 8691 218d     .[6.(..........!
   9c7e4:	50bd 5a19 e1a1 0f03 c85f 00c4 8c48 ad03     .P.Z...._...H...
   9c7f4:	1524 ba52 edcc ca05 f9cd aa27 67c4 c5e2     $.R.......'..g..
   9c804:	3866 d0aa 471e ade3 5403 681c d2be 3852     f8...G...T.h..R8
   9c814:	536d fab1 eda8 3fc2 2df9 005e 4917 cfc0     mS.....?.-^..I..
   9c824:	1a2c dcf1 a01f 1f6f 9646 0fc1 dc84 c1bf     ,.....o.F.......
   9c834:	e792 e837 9852 d790 323c 1411 2522 e1b1     ..7.R...<2.."%..
   9c844:	a3f3 a319 623d 9b5d 1078 ac0f 8e14 63f8     ....=b].x......c
   9c854:	2334 078e 4cf8 2ede 4b6c 5786 223e 1600     4#...L..lK.W>"..
   9c864:	51e4 698f 6801 3787 06c5 a686 64b3 9a39     .Q.i.h.7.....d9.
   9c874:	bd47 7401 180d e8ec 9508 0e29 7770 3df1     G..t......).pw.=
   9c884:	be23 1726 6f21 3580 225f 34ab 79f0 d818     #.&.!o.5_".4.y..
   9c894:	a2fc 9c3f 086b a716 8e32 fcda 88be 31d5     ..?.k...2......1
   9c8a4:	6124 88ee bad5 1794 8c4a 3482 bb3c 8818     $a......J..4<...
   9c8b4:	f0e8 2c70 0e83 1466 f18d 10f0 18e3 396a     ..p,..f.......j9
   9c8c4:	0b48 87a8 981f f23d 0257 8c02 32da 2995     H.....=.W....2.)
   9c8d4:	55cd d0a4 da8b 6c91 da19 798a 33e2 e199     .U.....l...y.3..
   9c8e4:	e34e 797c 9f89 7958 2d9c faee be7b 887e     N.|y..Xy.-..{.~.
   9c8f4:	c507 ef37 c26f ea5c 4008 7800 0631 1889     ..7.o.\..@.x1...
   9c904:	657a 8fbd 8817 6d04 20e0 7843 df8c aa88     ze.....m. Cx....
   9c914:	2c15 2390 ecbd 3505 0014 c583 da16 2cae     .,.#...5.......,
   9c924:	0e7e 1364 afa5 6316 d243 2274 4d42 ba71     ~.d....cC.t"BMq.
   9c934:	fe04 fa69 6da9 3c29 b0ca 75a3 8885 dcb9     ..i..m)<...u....
   9c944:	6669 64df 366e 77f3 2ec1 55da 78ed dcc9     if.dn6.w...U.x..
   9c954:	d23b e040 26c6 3a89 ec18 52ec 07c3 dc2b     ;.@..&.:...R..+.
   9c964:	17be e87c 9cb0 4ffa 275d 1f9d 3a45 b165     ..|....O]'..E:e.
   9c974:	92ec 5713 5ea5 e312 a27d 5a71 8d3b 51e2     ...W.^..}.qZ;..Q
   9c984:	c1c5 693d 7704 9f72 1dd2 0aaf 353c 687c     ..=i.wr.....<5|h
   9c994:	1769 ba86 d008 0611 9c9c 7654 e143 4470     i.........TvC.pD
   9c9a4:	af73 8b17 9264 03a2 6752 6dbb a428 22d0     s...d...Rg.m(.."
   9c9b4:	9892 17ea a437 c8d6 f202 c4ff 81fb 308b     ....7..........0
   9c9c4:	71ca f0bd 3585 3fa7 1141 dbb5 3af6 92e7     .q...5.?A....:..
   9c9d4:	6102 2a0f 3abc e7fa 03e3 39f6 f31c 94f9     .a.*.:.....9....
   9c9e4:	0bfa 7518 4fc8 2152 5034 c949 3cc5 014d     ...u.OR!4PI..<M.
   9c9f4:	4ad3 26d5 d6d9 8b1e bf61 b2f2 1b12 f146     .J.&....a.....F.
   9ca04:	b54f c6df 0606 8289 b155 cda0 0d4f 3402     O.......U...O..4
   9ca14:	932b a1cc 7ab7 fc86 b609 0f0e 7ae7 6fd0     +....z.......z.o
   9ca24:	7358 e2e6 8805 e24c 997a 331e ab59 37f3     Xs....L.z..3Y..7
   9ca34:	e471 d0de 6e32 cd1e 4d0d 326e 416d 58f5     q...2n...Mn2mA.X
   9ca44:	36e9 3488 1c32 f10d 9e40 24e4 37ac c928     .6.42...@..$.7(.
   9ca54:	c9d7 9f91 6847 65f9 abf0 b468 4818 5d59     ....Gh.e..h..HY]
   9ca64:	1dc1 a302 ee3f 60dc 8676 dbaf 3329 e1ad     ....?..`v...)3..
   9ca74:	2456 bc73 b9f8 296d e2cf a7be d2e7 b4f7     V$s...m)........
   9ca84:	b01f a506 86bf b281 e7b1 80c1 70ef c3d7     .............p..
   9ca94:	5ab9 62ed 1f23 ca33 2aaf 7177 4cea 10d6     .Z.b#.3..*wq.L..
   9caa4:	996a b3a8 c416 7724 965b 17a1 abcf 4f7f     j.....$w[......O
   9cab4:	5b6e 4c57 d142 a31a de99 171c 35ad 8aae     n[WLB........5..
   9cac4:	6639 0719 45aa f520 f013 281d ad6f 2c62     9f...E ....(o.b,
   9cad4:	6e40 9209 2f09 f440 260c bdb3 556d 22e9     @n.../@..&..mU."
   9cae4:	5379 8bc5 eb65 5c23 ad6b 599b 9e3a 8279     yS..e.#\k..Y:.y.
   9caf4:	4208 b617 ce80 7498 2e18 0ff2 2dc9 e6ff     .B.....t.....-..
   9cb04:	1bc3 30cf 2894 cc0f 82d5 fc6c 7e1f 4d5b     ...0.(....l..~[M
   9cb14:	7658 9aa4 8a6d eab0 8ea6 5ce9 97d0 c888     Xv..m......\....
   9cb24:	15dc 0f8d 27d5 15ac 05ef d07d 026e c812     .....'....}.n...
   9cb34:	e398 b062 62d9 607f e6d9 2c29 dfcb dff9     ..b..b.`..),....
   9cb44:	b47f e9f2 5814 bfd4 bff3 68ff 81c1 fe4b     .....X.....h..K.
   9cb54:	ff4e a3fe 8e55 248b fec9 ffce a3fe e555     N...U..$......U.
   9cb64:	b25c 7bb6 c64a 1e03 1f3f 6b03 d49e 0895     \..{J...?..k....
   9cb74:	8a7e 2be2 191a 347a e792 46ad b083 5a80     ~..+..z4...F...Z
   9cb84:	2c56 7c2c b823 27ca 01b7 536f 7635 26d4     V,,|#..'..oS5v.&
   9cb94:	4743 4098 9f3e 977f a14c 1489 ff75 84f5     CG.@>...L...u...
   9cba4:	df9e a561 1d58 94ad 409e b7de 5969 eb64     ..a.X....@..iYd.
   9cbb4:	30ff 7f5a 2f9b c68d b7e9 b6d5 a32a eefd     .0Z../......*...
   9cbc4:	bb91 da5d f5ea 9e5a 0c5c 2d3f a000 887f     ..]...Z.\.?-....
   9cbd4:	8da1 e04f d3df 0cf0 3dfe 7b09 bb6c 2001     ..O......=.{l.. 
   9cbe4:	ed6d 4494 baa3 0fa5 81ec 5e19 3119 c60a     m..D.......^.1..
   9cbf4:	102b 69b2 d701 d1a8 7741 509d d113 2232     +..i....Aw.P..2"
   9cc04:	37e0 84a4 bd84 6a3d 16c0 595b 74ea eaa0     .7....=j..[Y.t..
   9cc14:	d224 089a c28c 0a36 853e 0166 f1cf 9543     $.....6.>.f...C.
   9cc24:	4a85 1aaa 90af cde3 d52a 2a04 e626 d02e     .J......*..*&...
   9cc34:	9be6 5814 f872 a067 885c 6a0b 7c5d af46     ...Xr.g.\..j]|F.
   9cc44:	e0fc 7994 62cb a500 6e21 4659 ea66 51de     ...y.b..!nYFf..Q
   9cc54:	6e62 325c a58c 56c9 fb90 ea21 b10f 30bb     bn\2...V..!....0
   9cc64:	43bc 3105 e874 a8c8 7273 cdc5 d69c d5dd     .C.1t...sr......
   9cc74:	4458 71e3 1d01 a276 2f2f c6b6 8358 cb9b     XD.q..v.//..X...
   9cc84:	994e 3ac7 c30a dea6 34e3 83d9 8427 9bb2     N..:.....4..'...
   9cc94:	8500 bba7 8a3a 8ef4 02b0 07ef 773f 9377     ....:.......?ww.
   9cca4:	2aaf df0f e04a da26 91d2 0427 f4fc 8722     .*..J.&...'...".
   9ccb4:	33ad 374f 794c 2b02 b523 bc2a 705e 8ed2     .3O7Ly.+#.*.^p..
   9ccc4:	e60b 9585 9630 c6b2 a823 b762 9345 4e6c     ....0...#.b.E.lN
   9ccd4:	5d6c c5e0 f21e 57e6 0009 c270 d442 0a01     l].....W..p.B...
   9cce4:	e8d4 5302 573b 0d19 fa33 4500 486f a4d9     ...S;W..3..EoH..
   9ccf4:	3c59 81e7 daef 4a56 f597 624e 5974 47cf     Y<....VJ..NbtY.G
   9cd04:	a8cf ba65 cd58 9d0d d377 9107 6312 806a     ..e.X...w....cj.
   9cd14:	ef8d c483 27ff 5a41 e1be 902d 2f47 57a3     .....'AZ..-.G/.W
   9cd24:	4138 b81b 8766 6916 da8e c4ac 92b0 9175     8A..f..i......u.
   9cd34:	1029 a2e6 5404 764c 2032 8f64 516b 1b5c     )....TLv2 d.kQ\.
   9cd44:	d2a6 a528 352d bfc5 cf44 05d5 8e96 1264     ..(.-5..D.....d.
   9cd54:	c088 6266 f59b 0cd6 3508 ee0c e159 9b61     ..fb.....5..Y.a.
   9cd64:	abd4 652b 6e45 882c 21b0 3627 e38b 4a32     ..+eEn,..!'6..2J
   9cd74:	4fa8 9235 54de 9264 6186 99eb 3a6c 936a     .O5..Td..a..l:j.
   9cd84:	3e91 ae1d 31c2 4ec7 c7ac 8980 95e7 1afa     .>...1.N........
   9cd94:	6abe 7cb3 3f41 6c44 e202 0a27 32b2 c9e0     .j.|A?Dl..'..2..
   9cda4:	2518 decc 1554 4692 aac1 486f 9847 0df6     .%..T..F..oHG...
   9cdb4:	a5ff 232b 67d6 8e18 1703 418f 5bc9 0578     ..+#.g.....A.[x.
   9cdc4:	37c8 a001 526e 5f51 41f8 2ad3 98af bc3e     .7..nRQ_.A.*..>.
   9cdd4:	62d9 053d d89f aa2d 3efe d6dd 2167 b63a     .b=...-..>..g!:.
   9cde4:	751a 8924 5dae 724b 319f 596c 7d52 ae30     .u$..]Kr.1lYR}0.
   9cdf4:	db62 b8f2 93a9 d463 691b 4c20 2d97 77ae     b.....c..i L.-.w
   9ce04:	7a11 0df4 ae87 18f0 37c1 e24f 898f 0648     .z.......7O...H.
   9ce14:	1abc 17f0 5e39 ff9c 1562 0ff8 455e 1164     ....9^..b...^Ed.
   9ce24:	b7a6 38ad 0e2d 32fb 33ba 892e 102a 1a62     ...8-..2.3..*.b.
   9ce34:	64f8 7bc4 02cd 1f02 e9c6 a48c 3184 ea35     .d.{.........15.
   9ce44:	e29b 4925 93de e0df 83ed e814 c623 1e29     ..%I........#.).
   9ce54:	1668 64fb c9df 6c6e 1312 2649 7f54 73b6     h..d..nl..I&T..s
   9ce64:	e25b bc04 790e 42e9 0a0d a9fb 4f13 5b27     [....y.B.....O'[
   9ce74:	7662 cb77 962b b0dd 55fa d2e8 d0b4 2c67     bvw.+....U....g,
   9ce84:	8c97 7363 83c0 7ef2 4532 a422 3455 97b0     ..cs...~2E".U4..
   9ce94:	82b8 a625 22f7 261b 4eb9 eda9 845a ac2f     ..%..".&.N..Z./.
   9cea4:	39d4 1d41 01a8 a0ac e223 aa2b a0a3 b7c6     .9A.....#.+.....
   9ceb4:	3851 a368 a901 847f 5a98 e348 477f 9dd7     Q8h......ZH..G..
   9cec4:	20fe 9a1d a41d 42e8 79ca 6845 e203 7652     . .....B.yEh..Rv
   9ced4:	c26c d4df 5c94 9f0c b5ac 26e7 6553 395e     l....\.....&Se^9
   9cee4:	a99b 4ee9 c454 6057 b074 4840 3577 8cef     ...NT.W`t.@Hw5..
   9cef4:	5309 8588 622e 22ea fd41 d489 a974 3a82     .S...b."A...t..:
   9cf04:	4c6c cbea 1678 e8d4 6d45 745f 214d 0c5a     lL..x...Em_tM!Z.
   9cf14:	0679 af3e f4d4 b184 3e34 8b34 fcb2 36a7     y.>.....4>4....6
   9cf24:	9f20 6dec e6e0 a22c 54b1 3e9f 0c28 3aef      ..m..,..T.>(..:
   9cf34:	ca9a 4a7b d76f 5045 4d38 da52 f2cc b502     ..{Jo.EP8MR.....
   9cf44:	ddb6 6347 f013 c217 bc5c e61c 0bd6 c737     ..Gc....\.....7.
   9cf54:	754b 1a9d b706 37a8 e5c2 055f d719 6ea0     Ku.....7.._....n
   9cf64:	9e4d e8b9 5d20 46b5 48db 3c84 6418 ee93     M... ].F.H.<.d..
   9cf74:	ee39 c36e 22dd 8751 a00c e3a5 7413 60de     9.n.."Q......t.`
   9cf84:	fec9 6ad8 da14 414b d121 91c8 f5d7 b48e     ...j..KA!.......
   9cf94:	50ac 6965 a2be 53e0 b8c8 e902 c8e8 7b01     .Pei...S.......{
   9cfa4:	35e4 8751 e82a 8537 a179 bb8a 4bcb 9b4f     .5Q.*.7.y....KO.
   9cfb4:	9589 9151 e6a7 b2a0 09f2 356e 2118 dec7     ..Q.......n5.!..
   9cfc4:	3724 a2cb 8ef1 320d 1014 0ee5 48d5 9af9     $7.....2.....H..
   9cfd4:	8c83 f6a6 f104 bb89 b244 ad23 6e39 d3fb     ........D.#.9n..
   9cfe4:	98a8 7baf 1b45 1aba 7c24 e820 ae7f 3472     ...{E...$| ...r4
   9cff4:	a2ae afe3 c3da 1603 1e03 4c55 ebe6 7164     ..........UL..dq
   9d004:	7405 acdc a758 eb8b 8b35 3f16 b34f 6b0f     .t..X...5..?O..k
   9d014:	f214 81ac 8b83 7e17 5d1b 8558 4797 a3cc     .......~.]X..G..
   9d024:	ff95 f8ee f8e2 0d3a d4a6 cf18 0e39 f826     ......:.....9.&.
   9d034:	7d73 a7f8 bbe1 a39b 71c1 6330 855d bdc0     s}.......q0c]...
   9d044:	cba7 5d6a b756 84f3 f61a 538f 4e0a 15cf     ..j]V......S.N..
   9d054:	d074 d665 1c30 33fd 5cba f047 f42d ba76     t.e.0..3.\G.-.v.
   9d064:	08be ff4d fac5 31dd f894 fe25 af18 f193     ..M....1..%.....
   9d074:	f622 8b59 5a22 557d 12ac d028 d2fd 21e7     ".Y."Z}U..(....!
   9d084:	a1ea af91 500e 65ed fcf4 d7c5 bf6f 377e     .....P.e....o.~7
   9d094:	775a fe3a 131a df2e e25d 05f7 f894 f8e2     Zw:.....].......
   9d0a4:	431a dfd5 df31 e1df 1fa8 38a8 70b6 d222     .C..1......8.p".
   9d0b4:	3ce5 1e89 af89 e847 51b8 abc5 6f45 096a     .<....G..Q..Eoj.
   9d0c4:	43b0 8954 541c 7cb2 79fe c019 86aa 13a3     .CT..T.|.y......
   9d0d4:	f999 fc15 06be 609a 8ac9 5fc9 8d5a 30aa     .......`..._Z..0
   9d0e4:	542a 7d28 8de1 a7d2 145e 3e3a 8bb5 557e     *T(}....^.:>..~U
   9d0f4:	bc15 7178 a8e1 9923 51bf c30f 783c e5de     ..xq..#..Q..<x..
   9d104:	7066 755b f261 9234 7d88 42c3 6790 ac4e     fp[ua.4..}.B.gN.
   9d114:	498d 34d5 2bcf 10fc a623 98ef 520a ae3e     .I.4.+..#....R>.
   9d124:	d502 d198 89cf 8ca6 ba4b 4d53 8868 90f9     ........K.SMh...
   9d134:	6f45 ba51 5586 8f30 1234 0ac5 179b e530     EoQ..U0.4.....0.
   9d144:	8386 adb6 c5a9 8da2 3eea fa92 0266 e453     .........>..f.S.
   9d154:	ae65 d10d c8c0 af67 8b0f 8976 852a c40b     e.....g...v.*...
   9d164:	cce7 9113 be72 5dca a109 8777 32e2 5188     ....r..]..w..2.Q
   9d174:	7cbb c140 f145 f2ca 53d9 be5c 2f5e 5998     .|@.E....S\.^/.Y
   9d184:	8c48 655f 2b63 f51f e856 fa0e cb08 4a51     H._ec+..V.....QJ
   9d194:	45c4 0943 063c a8d4 20b4 38c3 1e1c c35e     .EC.<.... .8..^.
   9d1a4:	89f5 6781 f816 2e64 f84a 8941 d5de f9d3     ...g..d.J.A.....
   9d1b4:	2844 85f5 d1cd 4c2b d13f b355 e056 3494     D(....+L?.U.V..4
   9d1c4:	606f 330a dc15 7662 1931 984c 0bcb 4da0     o`.3..bv1.L....M
   9d1d4:	9346 7c4b a384 3d38 d3be 2eb2 4345 e624     F.K|..8=....EC$.
   9d1e4:	64d4 bc0a 74b2 03a6 3a78 7d4c 0179 a44f     .d...t..x:L}y.O.
   9d1f4:	8b70 938d 7316 866c 6e35 49d0 a38c 94f6     p....sl.5n.I....
   9d204:	a72b 4ca4 0585 d981 87af 2b37 2201 e681     +..L......7+."..
   9d214:	af58 3001 f405 b907 0aa6 da88 472c 11a9     X..0........,G..
   9d224:	f2ce 2fab 70fa be68 b938 fcf0 5423 093c     .../.ph.8...#T<.
   9d234:	1156 d961 f315 9cb0 152b 81c0 669a bbae     V.a.....+....f..
   9d244:	016e 1a80 aeeb 7264 803d e446 5c79 82b1     n.....dr=.F.y\..
   9d254:	45fb 73e0 f744 749b 4406 c174 55b1 b70b     .E.sD..t.Dt..U..
   9d264:	9065 d346 84d1 ec22 dba1 d45f ef4f 69f4     e.F..."..._.O..i
   9d274:	85e5 0a5f ebf2 ba4c ba3f 47ef 14eb 0ca5     .._...L.?..G....
   9d284:	cde6 86c5 0544 737e ba84 9f1c 094b 57d0     ....D.~s....K..W
   9d294:	75d4 5a3e d751 2c22 2a40 f17c be7b 4674     .u>ZQ.",@*|.{.tF
   9d2a4:	a8a6 31bb 0853 6ace fdea 2802 dbe5 fda5     ...1S..j...(....
   9d2b4:	88ec 325e 5206 8496 6b72 078c 8833 0601     ..^2.R..rk..3...
   9d2c4:	c8ef 4df0 b87b 98a5 696d 8d94 4a92 fef2     ...M{...mi...J..
   9d2d4:	cca4 215e 2d19 e04c 2bb8 4ae3 43a8 4b29     ..^!.-L..+.J.C)K
   9d2e4:	9138 a782 6873 f05d 9264 6a6d e0cb c588     8...sh].d.mj....
   9d2f4:	255b 9a59 1e88 75a4 9693 11b6 4f06 2922     [%Y....u.....O")
   9d304:	551b 6e95 64ec e513 8355 27df dadb e544     .U.n.d..U..'..D.
   9d314:	b128 90cb 72f9 336d 7fdf de8c 10a0 7e0f     (....rm3.......~
   9d324:	ee8d ff20 5475 6142 bec7 ed23 9d99 0be4     .. .uTBa..#.....
   9d334:	8017 643a ca26 23dc 29a9 a3bd 2f97 b182     ..:d&..#.).../..
   9d344:	5106 776a 2f92 8fbe 74b3 f4e9 22ee 6003     .Qjw./...t...".`
   9d354:	683e dcb0 87cb a620 a631 0eba 09ef 606a     >h.... .1.....j`
   9d364:	ab93 ffa9 c677 8707 2935 6faa da48 588a     ....w...5).oH..X
   9d374:	f0dc 852c 65a3 d882 0e07 3d96 6806 29de     ..,..e.....=.h.)
   9d384:	84ad f75a 1682 a78d a355 fc30 d15f e1a9     ..Z.....U.0._...
   9d394:	70fc 64d3 a9a2 10fb 1e64 f97e 827b 023a     .p.d....d.~.{.:.
   9d3a4:	1314 bd96 b584 7a33 f5b6 1bc9 c542 85e8     ......3z....B...
   9d3b4:	20cc 240f 6ab6 c82f 2782 3cb3 a279 5280     . .$.j/..'.<y..R
   9d3c4:	d4a2 42cc 88a9 ae87 a2b1 437e 2deb 3470     ...B......~C.-p4
   9d3d4:	b422 4dd9 a58e 34ee fa48 245b 0805 053e     "..M...4H.[$..>.
   9d3e4:	4426 5543 f228 6bd5 85bb 9b6c 4873 8298     &DCU(..k..l.sH..
   9d3f4:	626b 23dd cf56 1275 8b4d 2408 efbc f41d     kb.#V.u.M..$....
   9d404:	84c3 b0db a5a3 8a0a d8a6 555b acbc 38c7     ..........[U...8
   9d414:	bd69 1466 699d 360f 16ab 3df3 1b71 173b     i.f..i.6...=q.;.
   9d424:	bb9c fd21 0cae 9228 b742 30f8 148d 216b     ..!...(.B..0..k!
   9d434:	a496 90d6 e9bc eedd 0f73 0f0f 9a66 fa13     ........s...f...
   9d444:	a003 2416 9165 a36c 2e2c 1f51 6927 1ba2     ...$e.l.,.Q.'i..
   9d454:	12c8 459d e608 052a 3a7c 9b19 df4e 518a     ...E..*.|:..N..Q
   9d464:	6d60 c55c 4e36 5937 ec40 f510 60b4 9bd6     `m\.6N7Y@....`..
   9d474:	9f8a 8124 19e4 236a d5c3 5c66 c7cc fa6b     ..$...j#..f\..k.
   9d484:	aa76 fbb9 78d1 9dca 1c27 50ed eb23 0748     v....x..'..P#.H.
   9d494:	74d6 ebc8 932b f2e3 7001 4ef2 9860 bd80     .t..+....p.N`...
   9d4a4:	b21b a261 8d7e 48dc 28cd 5f8a 64ca 84ac     ..a.~..H.(._.d..
   9d4b4:	fc5e 6d1b a48c 297a 56e9 c18b c6db d1b3     ^..m..z).V......
   9d4c4:	5c77 837c f78e 0478 40ee a88b 1002 32b7     w\|...x..@.....2
   9d4d4:	8c6c 4cc6 3ae4 568d 3e9d 62d0 47e4 dae1     l..L.:.V.>.b.G..
   9d4e4:	6f74 2134 e106 bd7a a15e bca7 b81a 004d     to4!..z.^.....M.
   9d4f4:	74c2 9623 43c3 3211 e269 cdfb 0282 b0e9     .t#..C.2i.......
   9d504:	dc6d 7e4d 7745 d76d e222 44ec cad3 50c9     m.M~Ewm."..D...P
   9d514:	028e 0c67 7a55 53e0 19ee 7f3b ae38 0915     ..g.Uz.S..;.8...
   9d524:	5e37 0d77 81a6 4ba3 0574 226a 03b4 46ee     7^w....Kt.j"...F
   9d534:	5498 3403 9662 4439 d455 d2ae ce43 8750     .T.4b.9DU...C.P.
   9d544:	a853 0a4f 849f 4606 660c 7848 48ca ab80     S.O....F.fHx.H..
   9d554:	f98b 0e60 2387 b28e 9500 a679 ec14 6042     ..`..#....y...B`
   9d564:	188f 703d 4320 2398 65e2 7684 2c1a 1d50     ..=p C.#.e.v.,P.
   9d574:	6251 3c58 7224 4609 e073 82af 3339 f5b9     QbX<$r.Fs...93..
   9d584:	a059 749b 2a94 d837 0cd6 00d9 60d3 3c89     Y..t.*7......`.<
   9d594:	6f67 cb90 a4d1 92d8 7220 9d63 3dc8 7250     go...... rc..=Pr
   9d5a4:	1858 d306 7fe2 31f9 7b9e 71be 9439 2901     X......1.{.q9..)
   9d5b4:	c63d b2dd c318 f4c5 813e 7f22 c82d 9d93     =.......>.".-...
   9d5c4:	66f8 4899 aa5e b056 852f 25aa 5972 1854     .f.H^.V./..%rYT.
   9d5d4:	c13c 9872 39a7 6539 ff27 1e6d ec7a 13cb     <.r..99e'.m.z...
   9d5e4:	0d34 f126 2f4f afd0 d0d9 7463 4884 9afd     4.&.O/....ct.H..
   9d5f4:	77ee ae8f 4f79 0920 f8f4 69e9 c308 e9db     .w..yO ....i....
   9d604:	3290 ef31 7264 fca9 f99a 50b7 40bb 7dc4     .21.dr.....P.@.}
   9d614:	117e 44c5 67cf 8c51 195a 31da 9b67 fb8f     ~..D.gQ.Z..1g...
   9d624:	bafe 714d e120 43ba afeb 95ef 2f2e 24f3     ..Mq ..C...../.$
   9d634:	dc6b ba63 77c7 d165 f409 7c77 351b 6ddc     k.c..we...w|.5.m
   9d644:	e250 5213 9f0d ed90 2648 c42c 4266 1cf7     P..R....H&,.fB..
   9d654:	ca37 340d 4593 0bb7 cd45 0e41 26c9 7a32     7..4.E..E.A..&2z
   9d664:	d26c 118d 26c9 9452 1829 d711 a668 5b67     l....&R.)...h.g[
   9d674:	c1d8 6a50 4c59 e4fc d731 5bcd f80d 4078     ..PjYL..1..[..x@
   9d684:	b43b 6788 358f a74a d840 fdd2 c188 49e7     ;..g.5J.@......I
   9d694:	424e 526e 1920 bd2a 6111 32ea b119 a82e     NBnR .*..a.2....
   9d6a4:	0454 383e 5495 85ec c84c 6664 65b0 bc2e     T.>8.T..L.df.e..
   9d6b4:	c88f 3cab 7af1 4dc4 a105 fa3d 4ff8 1f91     ...<.z.M..=..O..
   9d6c4:	11c9 c309 abba a02a 35d8 e222 8a84 3f0b     ......*..5"....?
   9d6d4:	3830 4c28 1377 ff33 1c25 63cd a411 1c4a     08(Lw.3.%..c..J.
   9d6e4:	e9a6 d292 dafc 666c 1897 5557 b26a af4a     ......lf..WUj.J.
   9d6f4:	cb8d 8390 fee9 05c5 1e7c a21e 41fd ccce     ........|....A..
   9d704:	e00e c9cf 9d01 5713 6bc4 413c 8015 ea32     .......W.k<A..2.
   9d714:	f0f9 43b6 4b62 a672 2cd1 5ea5 63cc 25a3     ...CbKr..,.^.c.%
   9d724:	4123 058f 9cb4 92a4 5d54 3b92 cd2b eb96     #A......T].;+...
   9d734:	cf2a 0ce7 5615 10fe d3f8 742b a8e2 66b9     *....V....+t...f
   9d744:	4741 30b2 341a 2c68 da84 0459 bff8 b690     AG.0.4h,..Y.....
   9d754:	fef4 0d30 5fb9 6cd9 9cc2 33eb 7b13 2722     ..0.._.l...3.{"'
   9d764:	1153 252f ef65 073c d1a2 3652 64aa d801     S./%e.<...R6.d..
   9d774:	f32c 92e5 8689 d313 1484 7f66 b184 3266     ,.........f...f2
   9d784:	f42e 7636 4687 9523 9c61 6d7b d9a8 8f91     ..6v.F#.a.{m....
   9d794:	0a39 2045 a60c 3fb8 cb07 3c03 b373 7182     9.E ...?...<s..q
   9d7a4:	489a 8240 8a4b f19b fa6d 4889 2cbe 5868     .H@.K...m..H.,hX
   9d7b4:	8cd1 8b05 c8c5 7db7 55a6 462b 26c4 0e83     .......}.U+F.&..
   9d7c4:	e440 84de b14c aee5 f9ac 41e9 a891 867e     @...L......A..~.
   9d7d4:	f160 c9d8 d662 bafc 8f62 1254 7152 e946     `...b...b.T.RqF.
   9d7e4:	29a0 2f65 4d97 f72f 2087 308e eeaa 366f     .)e/.M/.. .0..o6
   9d7f4:	bf24 54f8 7745 372e e247 30c0 0f6d 136b     $..TEw.7G..0m.k.
   9d804:	6f60 7eac 3432 c807 c3d4 7d7c 98bd 33f1     `o.~24....|}...3
   9d814:	87df 77e3 4737 d7c7 f3be f8e9 22a6 d620     ...w7G......." .
   9d824:	6da0 4940 eea6 0a8d 2664 2dfd 4be2 ab1d     .m@I....d&.-.K..
   9d834:	b01d 290a 40aa 4412 3a8a 48b5 443e b36a     ...).@.D.:.H>Dj.
   9d844:	39d2 2c7a 0fe4 cf2c 7db9 7b2e 6147 7458     .9z,..,..}.{GaXt
   9d854:	0c2d d78d 6f4c 6d13 4db6 85e4 b320 7903     -...Lo.m.M.. ..y
   9d864:	9161 c85d 27eb 99b3 c8ed f34b 33c9 4052     a.]..'....K..3R@
   9d874:	574b a5e1 c48d 6e78 e778 bc01 a17b e487     KW....xnx...{...
   9d884:	b7e6 15f0 e378 5c79 9096 7f42 d011 a63c     ....x.y\..B...<.
   9d894:	bc5f f44d 8cdf 62f4 f486 8662 e2f4 6c21     _.M....b..b...!l
   9d8a4:	770b 78e4 a060 a433 db0c 7695 70d6 2bdf     .w.x`.3....v.p.+
   9d8b4:	1872 2980 a102 2e19 529f 5885 1d52 50b1     r..).....R.XR..P
   9d8c4:	4058 b10d 2c14 537c a686 02ad a5bd bd0a     X@...,|S........
   9d8d4:	7161 de85 6158 5885 ef64 6470 3479 f0dc     aq..Xa.Xd.pdy4..
   9d8e4:	74ce a5af 04b9 c59f 7ea5 e2e0 d22b 471c     .t.......~..+..G
   9d8f4:	8d03 f5e7 aa88 d422 50ee da05 d745 5cfc     ......"..P..E..\
   9d904:	4307 bdbb 8d09 81cb d8a8 b5b3 6c71 8875     .C..........qlu.
   9d914:	995f 9ba2 e8e6 e4b6 5500 a511 4f23 0e8c     _........U..#O..
   9d924:	021d f124 47e4 668c 781f f88b 77d3 af04     ..$..G.f.x...w..
   9d934:	3408 7cc9 66fe 8f19 c1c9 fd2d 29fa 309e     .4.|.f....-..).0
   9d944:	b777 915e 40df 8656 f9e9 7f9c caad fbe4     w.^..@V.........
   9d954:	8978 772e 580b 6f89 62f2 1092 31ec f972     x..w.X.o.b...1r.
   9d964:	24e5 87a5 ef2e 3032 66ee 1b09 b724 7834     .$....20.f..$.4x
   9d974:	6278 f8e8 fd89 2700 f476 7aae bc57 decb     xb.....'v..zW...
   9d984:	2f4d 81c9 4e94 4c56 cf26 b411 7c9b f291     M/...NVL&....|..
   9d994:	2ca7 8097 a921 92b3 ee03 4dbd ce0b 85b2     .,..!......M....
   9d9a4:	43fd 9b4a d0f1 315d 768c 31a2 5c7e 2314     .CJ...]1.v.1~\.#
   9d9b4:	9e8f d9cf 92bd 0b3b a1e5 0db6 6127 f592     ......;.....'a..
   9d9c4:	6e62 3886 54f3 7644 8bb4 a676 1dda 5ea2     bn.8.TDv..v....^
   9d9d4:	91fa 8096 1136 e4be 3e52 88b0 219d 23fe     ....6...R>...!.#
   9d9e4:	741e d1f0 22a0 353b 13b8 4995 3423 5293     .t...";5...I#4.R
   9d9f4:	3465 6c6c 4717 fb11 4035 0fde 7016 26d1     e4ll.G..5@...p.&
   9da04:	00f7 1fb2 0a86 a1f4 b144 7bd3 3ef8 845b     ........D..{.>[.
   9da14:	8b34 3b8d 8055 7f91 c6d5 e369 7ffb ef7a     4..;U.....i...z.
   9da24:	5bdc 24c7 8e59 a3fd be90 5445 86c8 5664     .[.$Y.....ET..dV
   9da34:	37c0 9e94 d825 4296 f7eb d5dc bf2a 9ebe     .7..%..B....*...
   9da44:	76d7 d355 e07f 257b f2bc 9d20 c490 6199     .vU...{%.. ....a
   9da54:	aafd 1676 3f90 b1f3 1da3 5f23 2d17 6999     ..v..?....#_.-.i
   9da64:	0c9c 4331 1928 af5e def9 a36a f634 b336     ..1C(.^...j.4.6.
   9da74:	96f6 5a14 8dfd c2e5 1f5f af9f c65e 2bd8     ...Z...._...^..+
   9da84:	ef32 1882 0304 2a04 3520 f60b 880c 07d7     2......* 5......
   9da94:	1ceb f3c8 98d4 854a 5f81 64e5 17b9 76c8     ......J.._.d...v
   9daa4:	ec46 4602 96d0 15cb f265 4765 970e 3fcc     F..F....e.eG...?
   9dab4:	57a5 ef2f 7bfd f399 bdfe 8367 f5ad 323b     .W/..{....g...;2
   9dac4:	c27f c59d 40c8 0bcf 530d b344 9f51 9d60     .....@...SD.Q.`.
   9dad4:	c564 4a7c 67ee 88c3 c802 9411 e5d5 42c2     d.|J.g.........B
   9dae4:	aae0 cc3d 6790 7539 b02c 48b6 7ede 241e     ..=..g9u,..H.~.$
   9daf4:	57c4 e908 aa32 0891 deb4 d417 1bde 3bb8     .W..2..........;
   9db04:	15de 9df6 a401 a372 6aeb 734b 46c7 4348     ......r..jKs.FHC
   9db14:	75f2 8067 d05e 182c 074c e7b5 7a26 c513     .ug.^.,.L...&z..
   9db24:	0e40 383a 800a 4945 7013 8941 bfe4 08d2     @.:8..EI.pA.....
   9db34:	c636 56cb 2b8b 50b8 e1e5 f481 cc23 0e50     6..V.+.P....#.P.
   9db44:	52d0 c79f 6107 b372 08e6 b49a c0d1 9185     .R...ar.........
   9db54:	5b07 0f28 723d 4c62 7c28 8113 266e 23bb     .[(.=rbL(|..n&.#
   9db64:	5278 3824 b141 1a55 a6c5 6701 881a a1c8     xR$8A.U....g....
   9db74:	c2c2 b186 2929 53a2 0338 b6c3 8831 31d4     ....)).S8...1..1
   9db84:	7482 f76b f5d7 11ee 12f5 ab24 fdce 1661     .tk.......$...a.
   9db94:	7242 65ca b529 253b 661b c212 90de 2f4c     Br.e).;%.f....L/
   9dba4:	f614 b0ee 995e 69af 6969 b744 6218 9428     ....^..iiiD..b(.
   9dbb4:	1a94 3808 bb93 6316 181a e72e ff01 1c85     ...8...c........
   9dbc4:	f31f 62d7 978a ddc4 d4ba 365b ea5e 0701     ...b......[6^...
   9dbd4:	11b1 b530 9363 cbfc 2e23 ea98 1860 4885     ..0.c...#...`..H
   9dbe4:	5818 d7ae 8bbd 1d14 0c70 0071 9921 e681     .X......p.q.!...
   9dbf4:	5700 50fd 1e98 25e1 917b cb0e 9210 3443     .W.P...%{.....C4
   9dc04:	d4c1 b6ee 2f02 83b6 81f6 4392 1e1d f522     ...../.....C..".
   9dc14:	c29d 1b36 a822 92a1 4940 4211 1463 0057     ..6."...@I.Bc.W.
   9dc24:	e312 4e5d 18e4 b27c 225e 84f0 9486 f427     ..]N..|.^"....'.
   9dc34:	0008 6733 20fc b905 0124 b106 7508 ee21     ..3g. ..$....u!.
   9dc44:	b8b1 03ee 90d8 d291 8a4a cd55 dd23 01e5     ........J.U.#...
   9dc54:	f539 a293 f272 0643 074c d02a 0bb6 cd45     9...r.C.L.*...E.
   9dc64:	c52b 1e0f 162c 8386 8ab8 f1c4 93e8 4543     +...,.........CE
   9dc74:	6dcb 7b5b 7516 30fa cdf8 a0c6 b9da 4e40     .m[{.u.0......@N
   9dc84:	0a49 6a2d 38da 97b2 4391 2116 00df 9f35     I.-j.8...C.!..5.
   9dc94:	89b7 e750 c6d3 d14b d8f2 120a 957a afc0     ..P...K.....z...
   9dca4:	9364 c2c4 3d98 aee2 8d46 a788 bb16 9f97     d....=..F.......
   9dcb4:	2182 cf7a 8508 d148 1357 50f6 bd19 ba45     .!z...H.W..P..E.
   9dcc4:	2de8 a0ae 12de e99a 342d 6a76 4915 fe99     .-......-4vj.I..
   9dcd4:	b496 f198 8b61 4059 c8b5 aab2 b935 b39a     ....a.Y@....5...
   9dce4:	b20f 4010 6f2d b5f6 b25a 78bf b711 51a4     ...@-o..Z..x...Q
   9dcf4:	4b41 11d8 94b4 41cd d94b a019 6b8d 0d76     AK.....AK....kv.
   9dd04:	311d c3ed 7572 48b5 b42b a575 e176 12ef     .1..ru.H+.u.v...
   9dd14:	f8bd 07e1 4f34 e5d1 9a5b 3063 72d3 2eb4     ....4O..[.c0.r..
   9dd24:	37a5 1fa5 3c4a 9353 f422 4286 b897 cf12     .7..J<S."..B....
   9dd34:	9988 d3b0 4ae1 0ea5 b357 9c33 16e0 57c5     .....J..W.3....W
   9dd44:	6335 74dc 6935 46f4 0f84 5796 b466 535c     5c.t5i.F...Wf.\S
   9dd54:	2482 9b75 47b9 9451 ad89 5ab2 ab15 aa02     .$u..GQ....Z....
   9dd64:	0b68 2e5b 8665 5bb7 ba85 580a 07ac a3ec     h.[.e..[...X....
   9dd74:	96a1 1fe1 76bd 6b75 a3dd 202b 78be 5098     .....vuk..+ .x.P
   9dd84:	1461 4c5a 29c3 d270 2de1 6e22 c566 1ef4     a.ZL.)p..-"nf...
   9dd94:	88a9 3a21 a367 a850 f6ff c7e6 5c1f 8e90     ..!:g.P......\..
   9dda4:	ace9 1b44 58af 6932 9fa2 ff7f bbfe 41c8     ..D..X2i.......A
   9ddb4:	b06f b248 18ae be8a 7676 c5e8 459a 7892     o.H.....vv...E.x
   9ddc4:	e3f1 3ff7 7b61 3e05 b3f8 bfa6 f22d 1bc5     ...?a{.>....-...
   9ddd4:	8eaa 42b3 3ba0 b4fe 7b98 dbba ae74 2d47     ...B.;...{..t.G-
   9dde4:	af74 e059 1558 b523 e6fc 6df6 4d7c d5a8     t.Y.X.#....m|M..
   9ddf4:	26a3 820b 4f61 c09a f593 2617 bdb5 19d7     .&..aO.....&....
   9de04:	539c 0c68 1426 a522 c287 5a46 efac 8560     .Sh.&."...FZ..`.
   9de14:	d4fe f2fd e38b 7be0 f5f2 3c3c f4bc 47df     .......{..<<...G
   9de24:	7fa3 5e1e 797e fc1c 2240 eeb7 4397 1c3f     ...^~y..@"...C?.
   9de34:	deb5 9755 b65f ff47 6e44 f2fe ff4b e38b     ..U._.G.Dn..K...
   9de44:	45eb 92f0 e48b 2be2 8338 78eb c4b9 75ff     .E.....+8..x...u
   9de54:	2aca e22f 64eb 3ddd 10ea 9730 78b0 69eb     .*/..d.=..0..x.i
   9de64:	4f3a 70d6 30dc 3ace b8aa d087 d7e3 fabc     :O.p.0.:........
   9de74:	5e5f 5dbe 7abf f5f9 740b f7b0 f482 8f8c     _^.].z...t......
   9de84:	1ddf 071f 323f 7b5f 6eef a1a0 a3cb fc90     ....?2_{.n......
   9de94:	1ded c293 8c32 78e2 a7f8 2fcb efff 6fda     ....2..x.../...o
   9dea4:	efb3 f990 0be3 efdb e826 6f8f 1fed af07     ........&..o....
   9deb4:	c5c8 2ffd eff4 206b bf70 f63c 2984 07af     .../..k p.<..)..
   9dec4:	1430 adfc e68a 98f9 97cc fa48 fc13 455c     0.........H...\E
   9ded4:	723f 853d 59bf 4932 21c6 4f68 000f 1f11     ?r=..Y2I.!hO....
   9dee4:	0c13 1273 d597 f9f7 6284 a38b 7dad c552     ..s......b...}R.
   9def4:	e4d7 effa f897 9bd3 aaa4 6228 ddde 98aa     ..........(b....
   9df04:	7f87 be03 0c94 6156 5eb6 9690 41df f3df     ......Va.^...A..
   9df14:	25f0 4697 5cfd a061 80b3 0efb 60a4 39ab     .%.F.\a......`.9
   9df24:	893e a292 fc1f cb8c 6cdb 05ac 6566 afb6     >........l..fe..
   9df34:	7af8 b297 1c29 ea7f dcdc 74dc 1ee0 745c     .z..)......t..\t
   9df44:	bba0 1b24 2dc3 193b 9990 5c3f d128 df5f     ..$..-;...?\(._.
   9df54:	db7e ea79 3c05 401c 0778 104b 86be a121     ~.y..<.@x.K...!.
   9df64:	1c76 be83 c625 f5f8 4e98 4b09 4fc1 f82f     v...%....N.K.O/.
   9df74:	bf84 9e8d f316 25a0 3601 a5f8 0204 28ca     .......%.6.....(
   9df84:	2980 04bc 96aa 97f3 2d65 df8a b61d b589     .)......e-......
   9df94:	598f d477 31d3 896b 1f6a f8a3 5ca1 0dc2     .Yw..1k.j....\..
   9dfa4:	7c9e 269b 09f3 e2af 4489 6300 8f8f 245d     .|.&.....D.c..]$
   9dfb4:	aea1 18a7 488c 73c3 facd 5c05 a15a 06c3     .....H.s...\Z...
   9dfc4:	3798 cc0d d90b 63d9 af27 3345 e5c5 3f65     .7.....c'.E3..e?
   9dfd4:	15b1 d224 d225 e9e0 df38 a150 4d86 9d30     ..$.%...8.P..M0.
   9dfe4:	d5c7 8c8f 60d4 2cbb 8876 e622 246e ac1c     .....`.,v.".n$..
   9dff4:	641a d5d0 a6f0 437d f61e 8075 dbc1 bc3b     .d....}C..u...;.
   9e004:	9b69 1489 113c 7e13 5802 7e65 ae0c afda     i...<..~.Xe~....
   9e014:	a290 b481 45b7 c19c 8b94 d20a e17e 3669     .....E......~.i6
   9e024:	2485 d882 3c09 23cd cc7c 7183 08b0 836e     .$...<.#|..q..n.
   9e034:	c14f 544d 500d 7c38 8405 55ce 8274 749e     O.MT.P8|...Ut..t
   9e044:	978c d256 e05b 765e 9472 7b1c f05e 0b46     ..V.[.^vr..{^.F.
   9e054:	126d 7025 9dd5 ec51 e49f 3a22 f5e9 0f0e     m.%p..Q...":....
   9e064:	7b4f 0bbd 93c0 bda7 2433 e824 e3bd 7a36     O{......3$$...6z
   9e074:	9ede 6f06 0b50 b836 3e8d f7c0 fc2d fb9a     ...oP.6..>..-...
   9e084:	7cc1 9ed8 d376 38a9 504d 53f4 06f4 ddd1     .|..v..8MP.S....
   9e094:	7ccf 5f37 4f41 ec18 3be4 7338 511d 0e0c     .|7_AO...;8s.Q..
   9e0a4:	27f2 f652 4fd1 3a22 f801 1904 faee 4678     .'R..O":......xF
   9e0b4:	3565 c1fc fb8a 09c1 261b 0c4c 11b1 dc52     e5.......&L...R.
   9e0c4:	6653 7bdb 7913 ce59 d7a1 f90b 586c b56a     Sf.{.yY.....lXj.
   9e0d4:	0310 db09 d137 976d 8a22 6305 22f8 34c7     ....7.m."..c.".4
   9e0e4:	f80b 1420 8b0c b072 58c0 8b04 26e8 1140     .. ...r..X...&@.
   9e0f4:	c1d4 120d d094 4306 01da 142c 06be 9d01     .......C..,.....
   9e104:	2309 4379 aced 584a f133 f089 ae4d 6f06     .#yC..JX3...M..o
   9e114:	b87c 60a2 96b5 3786 49de 1a30 3707 9bc1     |..`...7.I0..7..
   9e124:	3f4b f25c 4290 fd22 a40d 2e2f a355 83e8     K?\..B".../.U...
   9e134:	fda3 0fd1 8a3e 5ccd 1e1d 24ce 3229 7a1f     ....>..\...$)2.z
   9e144:	7604 522b 00c9 161e bd7f 6364 a684 d0a6     .v+R......dc....
   9e154:	38f3 e6c4 55ae 3958 c9d6 8b25 a2d2 a29a     .8...UX9..%.....
   9e164:	cfaa 2045 aa1c 650d 8430 c30f 649f 68cf     ..E ...e0....d.h
   9e174:	d718 aeb0 9cab 82b8 dd4d a962 55e6 f498     ........M.b..U..
   9e184:	ee0a 55d8 29a6 311a 7697 3c91 ab41 0625     ...U.).1.v.<A.%.
   9e194:	84b4 3183 2d81 07e5 bd74 069e f533 dd13     ...1.-..t...3...
   9e1a4:	69ea 8baa 1e13 17e5 d3c3 a44f 7ae5 34b0     .i........O..z.4
   9e1b4:	271d aea3 6352 ba90 d08f 5ab8 5271 5b52     .'..Rc.....ZqRR[
   9e1c4:	65e0 8b74 5cff 3d45 7038 731e 830d 7c0e     .et..\E=8p.s...|
   9e1d4:	44df ea77 c128 aa21 6e01 3f9d 3245 04e4     .Dw.(.!..n.?E2..
   9e1e4:	f140 bd8a c656 fedc 9602 8aa3 e07e 5937     @...V.......~.7Y
   9e1f4:	63ee 8040 aeaa 176c 6c61 2832 8f18 f66c     .c@...l.al2(..l.
   9e204:	637c ffd0 6315 2b33 658a f5f2 6e7c ca0e     |c...c3+.e..|n..
   9e214:	2015 868f cc34 9879 12df 01e7 594b b556     . ..4.y.....KYV.
   9e224:	2869 a3a9 0435 61c1 215d 1587 a2dd 8cf3     i(..5..a]!......
   9e234:	7a5b 4df4 0582 06c5 c113 90aa 2e46 49d2     [z.M........F..I
   9e244:	3df2 28a0 f1e6 4eb2 61dc d323 82ee 8897     .=.(...N.a#.....
   9e254:	a064 b52b ee35 a595 d650 1727 4c57 cc6c     d.+.5...P.'.WLl.
   9e264:	e48c 223e 3fd5 c8fa 7a5c 9754 cc97 e2f0     ..>".?..\zT.....
   9e274:	974d 0b05 276c 7123 2cc6 b9eb 2800 c2a4     M...l'#q.,...(..
   9e284:	44f9 e704 3e59 a296 15f7 882a 6a8c eed6     .D..Y>....*..j..
   9e294:	7309 167d 6caa fd29 bf5c bbf1 bc22 7454     .s}..l).\...".Tt
   9e2a4:	214d a0e9 765b 015e 61e3 2f38 2048 02b4     M!..[v^..a8/H ..
   9e2b4:	313f 58ca ed30 e5c2 b514 ef11 e7d0 fd7a     ?1.X0.........z.
   9e2c4:	0ab7 88d1 cf12 477d 13c2 f3f9 1545 4910     ......}G....E..I
   9e2d4:	e472 1f1d fb23 2dc3 bb93 a48b e59a a413     r...#..-........
   9e2e4:	9943 6228 532a 1158 8928 0f78 ba57 2f14     C.(b*SX.(.x.W../
   9e2f4:	2a0f 4909 cf75 f737 76da ca9b 0ea0 658e     .*.Iu.7..v.....e
   9e304:	0391 93f9 802f 2128 0bd3 9a41 f8d1 ea2d     ..../.(!..A...-.
   9e314:	302c 478a 7e2c 1ce8 0f86 4890 38d3 9c3c     ,0.G,~.....H.8<.
   9e324:	b403 5fb3 f6e8 3db4 9d1f 52a2 3786 aaab     ..._...=...R.7..
   9e334:	8865 1e98 0f4b a7bd 403d 6778 a767 7e80     e...K...=@xgg..~
   9e344:	b1d0 9420 8ab6 6b51 3946 1dea 8827 f20e     .. ...QkF9..'...
   9e354:	aa34 8f4d cae3 97d1 c728 2457 4a22 1622     4.M.....(.W$"J".
   9e364:	840b 8c8b 02a2 9004 0e78 7ecd eb82 f01d     ........x..~....
   9e374:	156d 81bc 89ab 398e 9407 0337 55e9 3b0e     m......9..7..U.;
   9e384:	4465 e223 1ede ad99 e430 747a f354 2ccd     eD#.....0.ztT..,
   9e394:	6bd0 545c 4f6a 1fd9 d058 2ebf 5297 857f     .k\TjO..X....R..
   9e3a4:	d462 f50a 83e6 39af ca91 fa8a 1a41 26d1     b......9....A..&
   9e3b4:	a518 90e8 e9f1 fcf1 a8a3 5efd db39 0ef1     ...........^9...
   9e3c4:	c961 9e86 c47f cb67 c91f 2fd9 41da e734     a.....g..../.A4.
   9e3d4:	0610 0ca3 bf60 d557 3d95 f7d1 a900 f45f     ....`.W..=...._.
   9e3e4:	47df d1de 545b 0ed8 23d3 3767 2c9e 8d81     .G..[T...#g7.,..
   9e3f4:	741b 8d45 3858 7c3c b5d3 14f1 4cf0 4953     .tE.X8<|.....LSI
   9e404:	7465 a4de a780 ac31 55a8 a493 8c1e 6884     et....1..U.....h
   9e414:	e46c 3807 9d90 11ef 3dca 1a55 d546 7056     l..8.....=U.F.Vp
   9e424:	d6a3 7f11 3469 773e 58ac 69e9 bbbe de27     ....i4>w.X.i..'.
   9e434:	e740 692d 1897 d0ad 5fdd f0ab f135 9e02     @.-i....._..5...
   9e444:	647e 9829 54c1 0d04 991b 9739 c6c3 239c     ~d)..T....9....#
   9e454:	a964 db50 48d4 7a1e f001 af9a 23ab d06f     d.P..H.z.....#o.
   9e464:	35fa 75ea 7d7b 9f0f 42c3 0cd5 bad4 96e4     .5.u{}...B......
   9e474:	8859 6160 d821 e2ad c63b 0e3b f664 cc68     Y.`a!...;.;.d.h.
   9e484:	06cc 5da7 73a6 06f9 3298 1a02 93f5 e949     ...].s...2....I.
   9e494:	3301 5306 db9f b32c 2433 110f b547 00fe     .3.S..,.3$..G...
   9e4a4:	61ae f4fa 40e4 38ee 0d36 01fb 51a1 2bf8     .a...@.86....Q.+
   9e4b4:	6e10 dfd8 6ff8 ffa0 54f6 a20c 3e88 cd01     .n...o...T...>..
   9e4c4:	0fcd 7faa 5067 7dc4 b693 e762 548f 3947     ....gP.}..b..TG9
   9e4d4:	0431 814b 1d9c 1939 6466 1a36 b627 5d4b     1.K...9.fd6.'.K]
   9e4e4:	520b 61bb a0c5 5e3d 4518 b215 cfa6 e474     .R.a..=^.E....t.
   9e4f4:	a0af 9457 0266 ba9f a940 9308 bc27 3465     ..W.f...@...'.e4
   9e504:	5d02 7e68 2b35 9bf2 dbd6 d641 f4ee b783     .]h~5+....A.....
   9e514:	86fe cf19 2fd1 87ef 25bc 09b9 eb25 437e     ...../...%..%.~C
   9e524:	3fd7 42b2 d1cd afe3 3c45 c0b0 0623 a7ca     .?.B....E<..#...
   9e534:	6f3a fb88 126b b268 c23a ad85 42d2 0436     :o..k.h.:....B6.
   9e544:	f8a8 1054 e878 4921 9d17 4932 2d9c 6386     ..T.x.!I..2I.-.c
   9e554:	172e 8134 b7e9 65ea 5087 3a13 089d ef0c     ..4....e.P.:....
   9e564:	9c06 6afb 0313 0497 d3dc 00b1 30e4 ee65     ...j.........0e.
   9e574:	b3db 0040 2145 7874 de84 3bb1 66cc 4dad     ..@.E!tx...;.f.M
   9e584:	f9c6 76cb 5cc5 6f05 97df 3fdc 02ec 50ed     ...v.\.o...?...P
   9e594:	2c89 86e9 51a4 609a a6f0 9788 47a8 275c     .,...Q.`.....G\'
   9e5a4:	5c5a e6b3 feea cfcd bce8 f339 1d09 791f     Z\........9....y
   9e5b4:	1142 8552 0429 2935 fbb5 40a8 822f 9045     B.R.).5)...@/.E.
   9e5c4:	b18e 6628 b96a 2618 bc49 aa08 5b9a 2ee6     ..(fj..&I....[..
   9e5d4:	46d2 b987 4ca1 9a98 973c 3178 510b ad1f     .F...L..<.x1.Q..
   9e5e4:	ea44 42c9 67f7 ed23 b836 0491 8833 7008     D..B.g#.6...3..p
   9e5f4:	afa2 f8d1 bb63 571e f3e3 b5b4 d466 6d54     ....c..W....f.Tm
   9e604:	6cd5 900b be4a 6737 4491 65e2 b51b b99a     .l..J.7g.D.e....
   9e614:	336c 3b53 87e0 6695 c272 ec87 967c 8632     l3S;...fr...|.2.
   9e624:	d838 e66a ef60 6573 60be 21fa 6aeb 9995     8.j.`.se.`.!.j..
   9e634:	999d c32b d2b6 f661 7358 8697 ee16 66f8     ..+...a.Xs.....f
   9e644:	b4a8 a434 3bb2 0c7f 3657 b0bd 3853 2957     ..4..;..W6..S8W)
   9e654:	fdb8 8ab6 ff8e d27c be3b 7e0e b942 e8ed     ......|.;..~B...
   9e664:	e5dd c717 6fc1 10f4 7c3c 4197 7ff2 8172     .....o..<|.A..r.
   9e674:	9321 73e4 bf9d ba75 6940 3023 49c3 6245     !..s..u.@i#0.IEb
   9e684:	5446 0c02 d8be 2daa 21f8 bdb9 324e 949f     FT.....-.!..N2..
   9e694:	8905 8b06 91dc 4872 dedd 2f0e 2c65 057f     ......rH.../e,..
   9e6a4:	abe7 1e2d 2b1d 747c 82ac 2462 e25e 232e     ..-..+|t..b$^..#
   9e6b4:	8826 ebfb afcf 0f91 1386 d682 4021 009c     &...........!@..
   9e6c4:	e26d c1c8 52c0 f046 ae43 a78b 81cb 13c8     m....RF.C.......
   9e6d4:	f6b4 20db 031a 44f5 d4c4 18da cb13 2e1d     ... ...D........
   9e6e4:	84ff 3e12 47ee a13e 96c8 9bb8 fe89 951a     ...>.G>.........
   9e6f4:	4db2 a0a2 ea71 17d5 6835 e3a4 8cfa 42b1     .M..q...5h.....B
   9e704:	da6f b919 2435 39d7 be2a 7336 7e5e b1a8     o...5$.9*.6s^~..
   9e714:	df12 5a02 f23f 2c6c c806 8d20 e9e7 2e6f     ...Z?.l,.. ...o.
   9e724:	4bbb 1741 28f3 bc93 9b20 8f96 b1fe a48c     .KA..(.. .......
   9e734:	9826 10b5 430b 5c2a 9ba1 6d7b 72e6 7574     &....C*\..{m.rtu
   9e744:	a1cd 8d6a 2e7a 6ae4 002b dca6 d20c 7fed     ..j.z..j+.......
   9e754:	d2ab 2db4 eae5 92e1 23f3 9690 2f6d 6f54     ...-.....#..m/To
   9e764:	87a5 5f87 7270 78d5 47a2 984b d4ff e6ec     ..._pr.x.GK.....
   9e774:	69c4 aee1 0e18 9952 e787 98c6 c69c 1b48     .i....R.......H.
   9e784:	08fa 17a6 8cd3 f231 ec46 a635 9076 d439     ......1.F.5.v.9.
   9e794:	ee0e 1270 f321 1f56 78b0 caaf ef34 d837     ..p.!.V..x..4.7.
   9e7a4:	7c52 a007 3a7b 1474 dccd 9945 0991 3cbb     R|..{:t...E....<
   9e7b4:	180d 34fe 742b 0f03 6324 d8c4 1b93 b47c     ...4+t..$c....|.
   9e7c4:	0578 180c 0727 4139 a093 dec1 ffe0 b4e0     x...'.9A........
   9e7d4:	c1bf 2640 92bf ffa0 f02f 2f6f e93c 82f5     ..@&..../.o/<...
   9e7e4:	c9fe 29c9 9c7c 826d dabf 0847 6bbb 05a3     ...)|.m...G..k..
   9e7f4:	d7c7 29c4 9dfd 091d 5838 92f8 0306 d8f0     ...)....8X......
   9e804:	a493 b817 25ee fe84 2b5f d7ff 946a b65c     .....%.._+..j.\.
   9e814:	d27d 1d10 45e7 1d19 fc1c d515 6e1a d100     }....E.......n..
   9e824:	2f3d 0992 15c0 68c0 2a89 7f0e a0ad f60c     =/.....h.*......
   9e834:	c11f b048 9f18 24bd dab3 578d 6b39 bd7b     ..H....$...W9k{.
   9e844:	a6c6 120f c99d de1d 8695 7585 69a6 c35f     ...........u.i_.
   9e854:	48f5 0c33 e8e2 e8e8 121b e466 1cdd 15ee     .H3.......f.....
   9e864:	95ee 482c 7d88 184b 89ed e0bf d144 a1ee     ..,H.}K.....D...
   9e874:	6ac6 de59 c5e4 3504 a1e7 2611 f77d 9f95     .jY....5...&}...
   9e884:	2d20 a311 479b 025a 64fa a44d 05a0 d683      -...GZ..dM.....
   9e894:	e2d9 5719 5b5a c155 b53e ae29 d9d7 fbc8     ...WZ[U.>.).....
   9e8a4:	877b 3b6f 6130 d82c 863d 7237 47a5 099e     {.o;0a,.=.7r.G..
   9e8b4:	1e27 2c63 1652 3a86 33af 6914 9190 b2f1     '.c,R..:.3.i....
   9e8c4:	f1f3 875b 1546 e371 f457 117c e854 8dd6     ..[.F.q.W.|.T...
   9e8d4:	8440 983e 85a4 45de 2339 e241 5ce1 1830     @.>....E9#A..\0.
   9e8e4:	1721 52f1 d16a b9ce 2888 35c8 aec9 161f     !..Rj....(.5....
   9e8f4:	bfed 2354 7491 5e89 1dca eac5 300a 5779     ..T#.t.^.....0yW
   9e904:	007f 3219 0777 e266 1426 fb42 53ae d784     ...2w.f.&.B..S..
   9e914:	48a6 81e7 139c 4405 f394 6602 3f83 c22b     .H.....D...f.?+.
   9e924:	69bc 98fe e6c4 18c9 9c8e 1b31 c189 32c5     .i........1....2
   9e934:	ecff 85b0 c8e8 1f9f 92d9 7a29 f670 dca3     ..........)zp...
   9e944:	c4d4 b462 84d6 5421 285c 8643 9f2b 18af     ..b...!T\(C.+...
   9e954:	cced a9df 23d4 d053 de32 1aa1 d1d2 91d5     .....#S.2.......
   9e964:	fd2b 4753 18e5 55cf 37bc afa7 eb24 8979     +.SG...U.7..$.y.
   9e974:	89de 1378 876e 9ab0 226d 8573 272d 5f29     ..x.n...m"s.-')_
   9e984:	da76 3792 7ba8 2582 0c8d 9592 f190 9308     v..7.{.%........
   9e994:	309a 174b 6453 ec26 90c1 f0eb 1f65 e90a     .0K.Sd&.....e...
   9e9a4:	fb38 b940 dea7 7a8e e6f2 82d7 7589 d988     8.@....z.....u..
   9e9b4:	1a42 fbd7 b58a 0176 3f17 b0dd ea77 92c5     B.....v..?..w...
   9e9c4:	40bd 75a2 150a ce79 077e 3165 090e 6d11     .@.u..y.~.e1...m
   9e9d4:	d218 2d25 fe10 6218 2b3a ce94 4443 1338     ..%-...b:+..CD8.
   9e9e4:	6db4 db4e b1da cf62 6734 33bd fd42 11dc     .mN...b.4g.3B...
   9e9f4:	cc3d 15f9 0c49 ff4c c837 3877 0f20 e55d     =...I.L.7.w8 .].
   9ea04:	e421 edb1 27a0 b23e b712 ddd9 9efd 9dfe     !....'>.........
   9ea14:	b37a 3bdc 6e1a bd16 bc5b cf62 d116 c217     z..;.n..[.b.....
   9ea24:	1e38 cd88 1803 48c7 312a c316 ed91 a7af     8......H*1......
   9ea34:	87c0 0a62 6d59 1d5b 85c3 3014 ba5f b6e8     ..b.Ym[....0_...
   9ea44:	985b bf10 a76e 5abe 613f 0bf4 6d84 93a1     [...n..Z?a...m..
   9ea54:	3ee2 427b 3bf9 bce9 6f01 7b02 9031 ae5f     .>{B.;...o.{1._.
   9ea64:	7035 7c45 7bfc d625 efe0 db95 9f8f 4efe     5pE|.{%........N
   9ea74:	4cc3 4bbf 083d 4b6e 6251 8b25 53ed 2108     .L.K=.nKQb%..S.!
   9ea84:	2272 ed3d 2853 fe49 17ab 6fe0 209b bd37     r"=.S(I....o. 7.
   9ea94:	85d0 2d78 623b b4f8 c8d3 e9fb 37c7 2d6f     ..x-;b.......7o-
   9eaa4:	50c7 c60e d53d 7698 26f6 124e 0a81 1700     .P..=..v.&N.....
   9eab4:	ed85 f5c6 2b9d 15ed 9668 c78c 218b 8f9e     .....+..h....!..
   9eac4:	fa49 0f11 e707 34ef 4308 8e8a 3285 1828     I......4.C...2(.
   9ead4:	2633 fb85 0c6d 653e 7910 2331 b3d9 5f20     3&..m.>e.y1#.. _
   9eae4:	47af 8189 d1e5 1f6b 5f06 afe5 521b a278     .G....k.._...Rx.
   9eaf4:	be44 7a81 0b5d a7ac fd39 cf91 fe78 940b     D..z]...9...x...
   9eb04:	eac8 a772 9412 f14b 2947 a136 57ce 40d4     ..r...K.G)6..W.@
   9eb14:	b3ab e7e5 422c 4d9c 24de 29f3 c483 3278     ....,B.M.$.)..x2
   9eb24:	26f9 7f1e 1c08 070e 4859 7448 8412 bb7f     .&......YHHt....
   9eb34:	62f1 be22 1edb 7be3 1a30 e06a 2fe0 bf38     .b"....{0.j../8.
   9eb44:	eff9 a268 cbf3 607f e0c9 f81f c5fd 7340     ..h....`......@s
   9eb54:	0ddb d957 8014 72ac 40c5 a284 6a28 2c27     ..W....r.@..(j',
   9eb64:	45fb 0ff4 a77c 2bc1 b58f 7325 cff8 877f     .E..|..+..%s....
   9eb74:	d7ec 409b 5e40 e2c4 aa26 6c7c 35e2 f116     ...@@^..&.|l.5..
   9eb84:	2703 4183 4561 03df 03ea b6fa 8888 5776     .'.AaE........vW
   9eb94:	96ae 6501 f230 4b55 23ca 1a71 c4b4 6238     ...e0.UK.#q...8b
   9eba4:	30a1 c4e0 30f1 c1df be1c 4698 b04c d28a     .0...0.....FL...
   9ebb4:	956e 9d73 3188 74c5 7f29 c9bc ecd0 ae0d     n.s..1.t).......
   9ebc4:	dbb6 0a60 8145 7a9a 3009 4c15 3422 5c22     ..`.E..z.0.L"4"\
   9ebd4:	3306 5232 ac98 a5a0 fca5 39fc 9ebd c155     .32R.......9..U.
   9ebe4:	1635 aba7 f82c 9f08 47c9 e25c 7605 039c     5...,....G\..v..
   9ebf4:	7995 62ab 0791 e857 3f30 ab2e fcd7 27f7     .y.b..W.0?.....'
   9ec04:	413e a4ce 3704 7a62 b2c0 c197 2073 50b8     >A...7bz....s .P
   9ec14:	2d4b e0f8 bb02 7744 fdd1 3d01 58aa bb6e     K-....Dw...=.Xn.
   9ec24:	0c3f 5ba5 eeeb 947b a077 e437 b984 feb4     ?..[..{.w.7.....
   9ec34:	3280 8197 6916 6154 4fb6 5f78 c396 2bb6     .2...iTa.Ox_...+
   9ec44:	9173 564f ee18 fd8a f2ed b8b2 ecbd 322b     s.OV..........+2
   9ec54:	a233 800f d8be f767 fc3d 1b80 fe10 1f04     3.....g.=.......
   9ec64:	ffba f2f9 37e7 7faf 21fc faf2 c7dd 1edd     .....7...!......
   9ec74:	5d8b 26fd 40fa 18a7 f0fe afb5 5bd9 4f4a     .].&.@.......[JO
   9ec84:	89af a08a 8280 8471 5146 8a27 bea6 d5fc     ......q.FQ'.....
   9ec94:	6ac6 5fd2 f09c 020f 8e65 b7c4 e1e6 4c8e     .j._....e......L
   9eca4:	a575 bacf 22fc 4725 e43f 8bf4 4844 3905     u...."%G?...DH.9
   9ecb4:	050a 9e74 91f8 8e8a 62ae 51dc 5628 3d18     ..t......b.Q(V.=
   9ecc4:	1dee debb 7348 7b64 3183 8934 fd4e 4bd2     ....Hsd{.14.N..K
   9ecd4:	59b3 e025 7c1b f840 7683 f9c7 e51c 913a     .Y%..|@..v....:.
   9ece4:	22d3 5232 a8d7 a150 422f 9c72 958e 68a3     ."2R..P./Br....h
   9ecf4:	a432 36af ed33 a37e 41cb bc12 00a1 a4ac     2..63.~..A......
   9ed04:	3937 5b1c b016 c464 05b1 2fbf 46df cfde     79.[..d..../.F..
   9ed14:	f604 842d f413 d31a 118a 5b6c 06c8 b2b6     ..-.......l[....
   9ed24:	801c 452f b03e 94c5 6166 ece0 d094 ce8e     ../E>...fa......
   9ed34:	7327 9bf8 bf66 a7d4 fca0 d7f1 49b4 064f     's..f........IO.
   9ed44:	cf6a 6149 7464 7149 134d 74d1 cd14 f57c     j.IadtIqM..t..|.
   9ed54:	dca2 a0ae 3c0f b432 18f1 5359 6414 5713     .....<2...YS.d.W
   9ed64:	e8bf c331 865a b51c d284 c921 d92e e0fe     ..1.Z.....!.....
   9ed74:	602a 6a2a 23e5 41f2 307f 707e 7290 1ea2     *`*j.#.A.0~p.r..
   9ed84:	124f 945e 9774 dfb4 112a 26c4 a0f8 0863     O.^.t...*..&..c.
   9ed94:	00be efc5 f79c cd52 359b 451b bdcb 4f26     ......R..5.E..&O
   9eda4:	cda5 e015 3c49 b0e8 7b02 9ee4 e00f e47c     ....I<...{....|.
   9edb4:	686c 3c1a 140f 6f2c b5ec 2523 ff14 1e6e     lh.<..,o..#%..n.
   9edc4:	c3c5 d478 e4e9 2197 13fc 4bd8 ca89 58f8     ..x....!...K...X
   9edd4:	568e 7f13 6fdc 9141 806a 4ce1 0ee0 3a6f     .V...oA.j..L..o:
   9ede4:	a205 7bfc 7c17 8f0b 064e a37c 4ca1 3ba2     ...{.|..N.|..L.;
   9edf4:	05b8 6770 219d 873e 98ee f530 871e 9aee     ..pg.!>...0.....
   9ee04:	11b0 1eab d745 f143 cb63 b3d1 24c6 38e3     ....E.C.c....$.8
   9ee14:	fc25 11f4 fd34 1ae2 ef06 83fd 5d72 95a6     %...4.......r]..
   9ee24:	1ed0 0e87 2eb4 7930 4a43 1fd0 5dd8 b305     ......0yCJ...]..
   9ee34:	bc84 b61a e0a5 788a 4966 53bc f2dd e360     .......xfI.S..`.
   9ee44:	b491 925f 4e93 8fc3 6938 58d6 7d14 f21c     .._..N..8i.X.}..
   9ee54:	026f d0c4 cc79 96b8 8a6f b2be 3a15 3ca4     o...y...o....:.<
   9ee64:	b85f c873 3410 3600 f618 8f79 019b 2a17     _.s..4.6..y....*
   9ee74:	368e ddbb b47f fafd 1768 f4e4 db1f a28a     .6......h.......
   9ee84:	90c5 ee7d 6b1c 8d0b d246 36a8 4cd8 0e41     ..}..k..F..6.LA.
   9ee94:	ec1b e907 87c6 de10 be78 249a b6d1 52c0     ........x..$...R
   9eea4:	1ce8 16ed c487 04c9 d518 b0ed 3fd3 98d0     .............?..
   9eeb4:	ca85 4d0f d698 d0dc 8900 a1b8 4ccd 8fb3     ...M.........L..
   9eec4:	87f9 25c4 8fdc 2b4a 5fa8 8270 8dea 4c1f     ...%..J+._p....L
   9eed4:	6256 a120 6f09 570a 406f 57dd 52cc 465d     Vb ..o.Wo@.W.R]F
   9eee4:	ceb7 d67c 72f9 1abe 707f 534f f7b4 9881     ..|..r...pOS....
   9eef4:	a465 dab0 7af8 bf04 666f 9149 5534 2092     e....z..ofI.4U. 
   9ef04:	81fd cd69 a524 86a8 e098 db6f a2ab a688     ..i.$.....o.....
   9ef14:	715e 7f11 b272 40b8 7ea1 ded0 6012 d02f     ^q..r..@.~...`/.
   9ef24:	1639 0992 22f4 b028 57e3 cf8f 4fcf 05cf     9...."(..W...O..
   9ef34:	fdca ae3e d866 5f22 fc0a fc29 1580 a751     ..>.f."_..)...Q.
   9ef44:	8c7f 97f6 47f8 2abe 403b 0b0b 6897 a555     .....G.*;@...hU.
   9ef54:	278e 37dd a0c9 48bc 2389 6bc4 3c87 119c     .'.7...H.#.k.<..
   9ef64:	5a5a d9a4 9ee7 9a40 2739 c6c0 e0ff a7e1     ZZ....@.9'......
   9ef74:	a517 f863 6ce5 9d35 81ea 95d6 0195 61d9     ..c..l5........a
   9ef84:	7c2a c6fa 3f82 da3c 7a05 5d3d d1b4 3338     *|...?<..z=]..83
   9ef94:	4628 a759 c97f 4de2 3fe1 2251 88fb cf91     (FY....M.?Q"....
   9efa4:	c26b fc94 6ae9 cebd 9286 3c1e e8d0 ba41     k....j.....<..A.
   9efb4:	3f6c 87b0 bc20 80f5 1d80 9ec9 e913 ca83     l?.. ...........
   9efc4:	f4bf 3943 141d 0ba4 5d0e 0500 b3e9 cc71     ..C9.....]....q.
   9efd4:	5df5 c5b4 51d0 ac61 83f0 18f5 849b 89da     .]...Qa.........
   9efe4:	0849 60b3 df80 6e6f 46a3 295f a1df 1d32     I..`..on.F_)..2.
   9eff4:	8c3f faed d639 84af fe3b 11ce 8e10 8b09     ?...9...;.......
   9f004:	5c60 15a4 35be f685 b15d 61e1 ddb9 8cba     `\...5..]..a....
   9f014:	1aa2 d19a 1fca be44 bc60 4610 5fb4 5a14     ......D.`..F._.Z
   9f024:	1f7c e241 fab6 50a4 9172 7969 a422 a742     |.A....Pr.iy".B.
   9f034:	91bf 27cc af8d b153 b0bf c2cb 8b26 ee2d     ...'..S.....&.-.
   9f044:	5bf7 d9e5 9506 b775 5791 2c01 e654 6f07     .[....u..W.,T..o
   9f054:	a774 1a5c 6740 c702 82a3 5a2d b73d a0d3     t.\.@g....-Z=...
   9f064:	8b84 4379 5a0e 1b60 96c8 f60f fbe1 bdb6     ..yC.Z`.........
   9f074:	1f13 9790 05a4 221a 649e 38f7 5dd2 4ba4     .......".d.8.].K
   9f084:	5d99 7c6e d442 1330 7567 32e6 0a84 318d     .]n|B.0.gu.2...1
   9f094:	65c4 50ad 87ad 23a3 76d6 2a9f 3ee1 eb09     .e.P...#.v.*.>..
   9f0a4:	3abc c9b1 3da6 1c50 9c8f 8568 e226 723d     .:...=P...h.&.=r
   9f0b4:	22a9 05ec f22f 5881 fc8f be28 b8b8 0fe8     ."../..X..(.....
   9f0c4:	c532 94b7 fe97 e957 8f30 a3ca 187e 2247     2.....W.0...~.G"
   9f0d4:	4262 c72b 5813 84e5 9c87 eb4c 4750 4353     bB+..X....L.PGSC
   9f0e4:	2d7e 4825 d697 b379 baa1 e438 1ead 676a     ~-%H..y...8...jg
   9f0f4:	1c33 d25d 3781 2d44 13f5 73d6 2e37 423e     3.]..7D-...s7.>B
   9f104:	e149 c14a 07cc 70a6 7801 0500 f0aa 8aa7     I.J....p.x......
   9f114:	ec3f 28c0 2489 145a 4182 1bdc 2ef6 e1aa     ?..(.$Z..A......
   9f124:	32e8 3314 7a0d 4e64 3086 bc40 5352 5aab     .2.3.zdN.0@.RS.Z
   9f134:	8979 da75 db5a 90fd 695f 4e28 c878 14d0     y.u.Z..._i(Nx...
   9f144:	d32e 2706 97b1 adcc 9e82 09cf 5a50 a010     ...'........PZ..
   9f154:	906b 9b8f ba14 ba93 a186 c35b 10dd 2f50     k.........[...P/
   9f164:	f196 f9d8 6506 f85c bf72 21d9 a1ff e311     .....e\.r..!....
   9f174:	bde1 68c7 aa4d 40c6 1fcb f9ce 069d ac38     ...hM..@......8.
   9f184:	d446 11e1 f5d2 d806 4e2f 9118 d10a d630     F......./N....0.
   9f194:	ffab 3c20 65a2 551a 119e 463a 988b c92a     .. <.e.U..:F..*.
   9f1a4:	64dc ab08 ba37 9464 b00e f9c8 61aa 93e2     .d..7.d......a..
   9f1b4:	3a74 a8c5 6350 af74 2355 fad5 036c 7196     t:..Pct.U#..l..q
   9f1c4:	9151 83e6 c093 1143 96f7 b3eb 4f8d 40e9     Q.....C......O.@
   9f1d4:	16aa 36be 1187 0520 413a 2cab 35fd 7f62     ...6.. .:A.,.5b.
   9f1e4:	8956 6f03 7458 5d22 22ec ce42 5f41 da50     V..oXt"]."B.A_P.
   9f1f4:	3c99 e4af 1cf6 7325 aa30 18d8 6695 4ff3     .<....%s0....f.O
   9f204:	b72d 742b 16d4 628f 8d05 4378 8a84 a686     -.+t...b..xC....
   9f214:	df38 2b14 e05d 20d2 73e7 48c0 3808 9c8f     8..+].. .s.H.8..
   9f224:	41cf 1a5f 756d 5a71 b96d da57 1ec2 d070     .A_.muqZm.W...p.
   9f234:	50a6 655b b632 5716 2028 3639 6064 2cc3     .P[e2..W( 96d`.,
   9f244:	25ef 03f1 06e7 6e0b 21c8 d55c 5a66 b731     .%.....n.!\.fZ1.
   9f254:	347f 0526 8e12 cd11 27a5 174b 0cb0 31b6     .4&......'K....1
   9f264:	9285 ac21 0bf7 febd 1a96 27ae 7a95 911a     ..!........'.z..
   9f274:	6dce 5841 eea8 b63c 9e6d 8c2f 7b0d b0e4     .mAX..<.m./..{..
   9f284:	f901 7178 28c0 7230 bc22 a318 8375 19a3     ..xq.(0r"...u...
   9f294:	28ef 9a53 385d f612 1184 bcd5 99d4 3ff2     .(S.]8.........?
   9f2a4:	d1b8 2da5 133c f718 20c8 0ade 519d b30d     ...-<.... ...Q..
   9f2b4:	4211 9a0b 1481 2197 81fb bc9a 7d11 2ff4     .B.....!.....}./
   9f2c4:	390d e083 1cc2 b674 7bd9 cfa7 6569 53b3     .9....t..{..ie.S
   9f2d4:	ed8c 8f41 dc46 861f 9e94 2a66 9224 5371     ..A.F.....f*$.qS
   9f2e4:	5f33 e486 0fc4 aab5 108a 861a 2f46 a1b2     3_..........F/..
   9f2f4:	4d46 47a6 8188 f250 b362 be8a 2949 b721     FM.G..P.b...I)!.
   9f304:	f018 5e5b 00ae a005 ed65 41cb 240c c5a9     ..[^....e..A.$..
   9f314:	91af f7d7 389e 6df7 7387 22be 432e 456b     .....8.m.s.".CkE
   9f324:	e153 3f47 5a22 9096 1944 3a49 5259 a600     S.G?"Z..D.I:YR..
   9f334:	eb52 8e89 680b a9fc fe31 18d4 817f efb6     R....h..1.......
   9f344:	91b5 72db afb5 3ea2 aa33 af5a 5ee1 288d     ...r...>3.Z..^.(
   9f354:	9368 5a72 727d 5eb9 e5f7 8a30 ae48 7d3e     h.rZ}r.^..0.H.>}
   9f364:	938c de74 576e c49d 063f d41c f213 055d     ..t.nW..?.....].
   9f374:	05ea f040 3a45 99f0 470f dc34 8a3a 1ca4     ..@.E:...G4.:...
   9f384:	6737 d917 fd4b e178 820d 3af2 3ab7 2e1e     7g..K.x....:.:..
   9f394:	73ea 545c 122a cf45 c4c5 4b9f dbde fa79     .s\T*.E....K..y.
   9f3a4:	1d91 38b4 9709 4d74 c291 d96e e980 e864     ...8..tM..n...d.
   9f3b4:	6da0 2ebf be14 3b82 fafe ce89 1899 b016     .m.....;........
   9f3c4:	c49b f120 b52f 9988 fa89 9716 8c07 a5ed     .. ./...........
   9f3d4:	8651 965e 7485 8792 dfae 83de 2350 3a62     Q.^..t......P#b:
   9f3e4:	b97f 7e4f f381 4810 7176 c67d fbf3 77e1     ..O~...Hvq}....w
   9f3f4:	2e07 0ee4 3883 27c3 a0a0 a5b0 05fc d683     .....8.'........
   9f404:	220f bbc8 3282 8340 0adc 9060 657d 2803     ."...2@...`.}e.(
   9f414:	397a cba3 2ecd af6f be35 a194 e033 8180     z9....o.5...3...
   9f424:	d7d0 7df3 0667 499b 96ca fde2 8143 1306     ...}g..I....C...
   9f434:	7aba b9bc 62d6 5655 abad 85a4 523a a4c9     .z...bUV....:R..
   9f444:	2ca5 316a 9b18 2ba6 5d6f c46b 708c 7439     .,j1...+o]k..p9t
   9f454:	a642 e463 9d9e 1784 22c9 6937 4575 28bf     B.c......"7iuE.(
   9f464:	acde c826 ea0b 0f91 de1b e5db 87c5 121c     ..&.............
   9f474:	17d2 f780 df09 9717 d251 6b10 2e8f 875b     ........Q..k..[.
   9f484:	e797 b946 7c99 77b3 2cda fb58 fa44 281b     ..F..|.w.,X.D..(
   9f494:	656a efe4 8d04 1b29 4068 031c f5af 1821     je....).h@....!.
   9f4a4:	4125 b2ff d609 98f1 7353 77b8 e555 7610     %A......Ss.wU..v
   9f4b4:	8ae8 3407 1284 4043 2ea0 2c19 a334 e6d7     ...4..C@...,4...
   9f4c4:	09fa 9647 0e77 4eac 5d9a 3f33 3d5b c0a0     ..G.w..N.]3?[=..
   9f4d4:	5398 de09 3a80 2884 8012 c013 9b1c 1c6e     .S...:.(......n.
   9f4e4:	0527 5f5b bc45 a0fe 6744 bc39 6e6d d3df     '.[_E...Dg9.mn..
   9f4f4:	a32e 0f15 1723 9d55 aaf6 b6a3 464e 5525     ....#.U.....NF%U
   9f504:	ed93 445d 61e3 b0db 8ecd 357d 55af d0d3     ..]D.a....}5.U..
   9f514:	10fc b215 6150 9d38 798b 1921 1ba9 cc9b     ....Pa8..y!.....
   9f524:	b183 2e4f 686c ae6f e380 6f1e 4c5d eb72     ..O.lho....o]Lr.
   9f534:	34df 4ed5 a83c 562e c2c3 a0ec acea 4458     .4.N<..V......XD
   9f544:	8249 9a04 18bc ce6e 28c2 e1f1 aefa ccb5     I.....n..(......
   9f554:	ebeb cb11 65a5 67bd 8787 8507 82ee 1ed6     .....e.g........
   9f564:	cf80 952c fa9b 4a0d 7e9a 24ee e135 547e     ..,....J.~.$5.~T
   9f574:	f402 983a c367 242a 4137 6af4 10df 35e7     ..:.g.*$7A.j...5
   9f584:	4e12 8854 2a0f 65e2 d493 a396 4668 728f     .NT..*.e....hF.r
   9f594:	3166 932f 39a8 c4ce 3c16 695d 964b 8a45     f1/..9...<]iK.E.
   9f5a4:	1ddb e864 3073 74eb 2afc a11a b74a ec3e     ..d.s0.t.*..J.>.
   9f5b4:	57ca 2b71 3e80 11a4 4f93 f77b 6b90 d20b     .Wq+.>...O{..k..
   9f5c4:	24e9 f55f 0d87 49e8 27f9 1262 c887 4552     .$_....I.'b...RE
   9f5d4:	5ba3 295b b3ac 8116 8279 1bac d771 b4de     .[[)....y...q...
   9f5e4:	80b9 42b6 4ab6 49de 494c 485d d086 a7f6     ...B.J.ILI]H....
   9f5f4:	dc12 4192 3355 49d1 76e4 a78a ae5e 7933     ...AU3.I.v..^.3y
   9f604:	a03d 90ed 7024 9f32 c345 afd1 4038 f8f1     =...$p2.E...8@..
   9f614:	2d82 8fe1 b55d f169 3b59 3ea1 de02 d995     .-..].i.Y;.>....
   9f624:	4a57 88da 9d0d dc51 d517 2323 b3d4 771a     WJ....Q...##...w
   9f634:	6080 dc80 65c1 7f84 058c ed13 53e2 b30e     .`...e.......S..
   9f644:	2dfd f71d 6bac 742b 0c02 cca0 25b9 ac4c     .-...k+t.....%L.
   9f654:	1eca c8e2 c052 3575 71bc 7fe1 cae3 3525     ....R.u5.q....%5
   9f664:	6353 9500 7d8f 1546 3813 e5d2 4cbb 1fc7     Sc...}F..8...L..
   9f674:	431c 25a7 8fda 7c9f aba3 03ce 645e 4553     .C.%...|....^dSE
   9f684:	1a7a a2fb a249 1642 9321 5a45 b03d c933     z...I.B.!.EZ=.3.
   9f694:	8805 5485 9301 9482 f3dc b031 43d3 f2b6     ...T......1..C..
   9f6a4:	15ab f363 9f95 096f 0695 4c2a bc8d f3ac     ..c...o...*L....
   9f6b4:	9525 0d04 8159 afb9 ed73 9b24 4f22 cca1     %...Y...s.$."O..
   9f6c4:	9287 614c b21e 3141 b513 3558 c761 a98a     ..La..A1..X5a...
   9f6d4:	d2cf ffd9 21da 41a2 4906 8ee7 c3d0 c620     .....!.A.I.... .
   9f6e4:	3b11 d486 71fe a9a5 3013 652d 28ad 1bd5     .;...q...0-e.(..
   9f6f4:	ea98 f444 920c b548 d821 3b56 c31b c800     ..D...H.!.V;....
   9f704:	4e6c afc4 3884 bb17 0f4b efc4 204a b833     lN...8..K...J 3.
   9f714:	ca4a 949b 2007 c71a e265 188d df9f ba62     J.... ..e.....b.
   9f724:	9758 a85e c4c6 45dd 6301 9468 81fc 6a98     X.^....E.ch....j
   9f734:	e4ad 7441 0c94 f82b 0ab7 287b 14ec 0e53     ..At..+...{(..S.
   9f744:	cfe1 6551 7e56 5711 5409 d235 61be abba     ..QeV~.W.T5..a..
   9f754:	c5b2 4723 9fbd eb93 9f97 5a96 dca7 3c99     ..#G.......Z...<
   9f764:	9139 2fa4 d464 ae98 a633 2fb1 bed2 d0c1     9../d...3../....
   9f774:	40af 507f f951 3883 ebf8 2f2c 3412 c741     .@.PQ..8..,/.4A.
   9f784:	f52c a36b c485 5a54 eb59 2d75 52ad 2aab     ,.k...TZY.u-.R.*
   9f794:	3720 d857 e72d 736c ca36 352f a985 7e82      7W.-.ls6./5...~
   9f7a4:	0356 dca6 e091 2ae9 62ab 6145 4b94 b466     V......*.bEa.Kf.
   9f7b4:	7e27 26e3 00c6 2546 1810 036d 61a1 9a6c     '~.&..F%..m..al.
   9f7c4:	0758 9888 3f3d 02ca 1425 b830 4c45 b4f0     X...=?..%.0.EL..
   9f7d4:	3db6 3a86 24ec 4a6d d852 081a 24c5 b741     .=.:.$mJR....$A.
   9f7e4:	82f6 ea31 e020 8932 a1fd 75d3 61e9 5140     ..1. .2....u.a@Q
   9f7f4:	093c 7973 43df b9d1 ecc6 d710 ef35 0074     <.sy.C......5.t.
   9f804:	c77e d7d1 526d a942 1ff0 433c c0fe 901f     ~...mRB...<C....
   9f814:	9736 41bc 0ca6 4107 e28b 9d6a 6452 a3cc     6..A...A..j.Rd..
   9f824:	e0a3 1a00 8960 2515 6362 6c53 ca6c f31b     ....`..%bcSll...
   9f834:	abfd 8922 e03f c730 4eec 329a 22b4 635b     ..".?.0..N.2."[c
   9f844:	0f15 3860 28bc 6b4c 91be 48fe cbba d97c     ..`8.(Lk...H..|.
   9f854:	d9a6 dfd3 4a31 d20b e5f2 2baf d1eb a240     ....1J.....+..@.
   9f864:	af88 bcb9 8859 a19c ea30 d968 8664 ca29     ....Y...0.h.d.).
   9f874:	0b61 1759 0b88 6d67 cb92 aa67 1cf8 e4b8     a.Y...gm..g.....
   9f884:	5b15 205b acfd 1e8b 60f8 4a98 03b7 1e5d     .[[ .....`.J..].
   9f894:	8e90 19b9 976d 80cf 243d 5a7d ebaf eab5     ....m...=$}Z....
   9f8a4:	2f9b 0fd1 fbab 2da3 3442 2674 7a24 04de     ./.....-B4t&$z..
   9f8b4:	da6f 4f23 003e 8178 c027 3e18 32d9 07c0     o.#O>.x.'..>.2..
   9f8c4:	3b43 81f0 0428 30fe 608c 09a8 77fb 461f     C;..(..0.`...w.F
   9f8d4:	5a5e 477a 447a b523 123d 4619 1c91 793a     ^ZzGzD#.=..F..:y
   9f8e4:	be21 36f4 55ec 7b50 5085 2354 78dc 5646     !..6.UP{.PT#.xFV
   9f8f4:	fae3 881d f02d 9fb0 dd04 e2c9 a963 24d4     ....-.......c..$
   9f904:	7816 b8e3 0c7b ac30 571f 9347 050e 84e4     .x..{.0..WG.....
   9f914:	f20f 7c5b 72b9 7ade 8f22 c245 cb4b e21f     ..[|.r.z".E.K...
   9f924:	da1f fbcc 3cdf 998f 1f2d 00b5 4de9 2697     .....<..-....M.&
   9f934:	665b c1a6 8880 559d 28e0 69ba 0f2b c27a     [f.....U.(.i+.z.
   9f944:	343f c960 5a1a c1af 0fc5 f9ab 9b7c 5007     ?4`..Z......|..P
   9f954:	ea56 42af 35fb 1ada 1534 c30b bbb2 e44f     V..B.5..4.....O.
   9f964:	bc58 3184 dfee 65a5 49ad de0c 1547 6757     X..1...e.I..G.Wg
   9f974:	c257 e70f 1994 446f 75c8 3597 ac97 d1b2     W.....oD.u.5....
   9f984:	6fb4 bfb6 2b98 6392 3094 880e d12b aaec     .o...+.c.0..+...
   9f994:	6e46 0d6d 62cc c511 c424 2ecd f5d1 5232     Fnm..b..$.....2R
   9f9a4:	7551 413c 1014 ae30 8d65 5707 5942 a686     Qu<A..0.e..WBY..
   9f9b4:	c134 ea38 a468 c4f4 71a0 520c 4185 d6b3     4.8.h....q.R.A..
   9f9c4:	62e5 49e2 d8be 8da6 4955 5baf 203d 8eb8     .b.I....UI.[= ..
   9f9d4:	a3a8 3ce9 fe87 93e9 826b 5ff8 24a2 88f8     ...<....k.._.$..
   9f9e4:	cd3f 3b01 211e c05e 0d0f 4955 29ad 8a72     ?..;.!^...UI.)r.
   9f9f4:	f909 1264 9c8a 9b79 6bbf 88be 92ee 1c72     ..d...y..k....r.
   9fa04:	4c63 721e 72e5 2f18 0396 bf8c df8e 0af3     cL.r.r./........
   9fa14:	2f3f f3f0 3f1a 791f e08f d7f3 4e55 8fe9     ?/...?.y....UN..
   9fa24:	fd30 9f4f 9e4e 000c 0c7d 745e 1957 296b     0.O.N...}.^tW.k)
   9fa34:	3c12 fb51 9745 b0a5 f37b d947 8e15 a186     .<Q.E...{.G.....
   9fa44:	b82f bd40 ce23 c91f dcd2 19a8 ca9d 425c     /.@.#.........\B
   9fa54:	e83f 4e3c 6db4 6d54 556b 0145 7951 b58d     ?.<N.mTmkUE.Qy..
   9fa64:	567d ef1b 6e2d c19d 610a 0e20 be5e 3f86     }V..-n...a .^..?
   9fa74:	a8dd b353 8737 1d81 ca55 fadc 3447 7203     ..S.7...U...G4.r
   9fa84:	78d4 e901 8aa3 9fc7 c7a1 206b 76bd 26bd     .x........k .v.&
   9fa94:	63f1 e03d 2d9a 7f50 a1a0 cd26 c6b5 9330     .c=..-P...&...0.
   9faa4:	0b7a d319 faca 9a94 e9d8 5b4d 1de3 678d     z.........M[...g
   9fab4:	2941 fc5a 5a40 d84b 07c9 f525 4c36 844c     A)Z.@ZK...%.6LL.
   9fac4:	63b8 a864 2bf0 ef9f 1df2 9340 fcb6 bbac     .cd..+....@.....
   9fad4:	903b 44e2 d272 61cd 15ee 159c d6f1 7afb     ;..Dr..a.......z
   9fae4:	e0e2 8ed2 5e8e 791d 329e 4f12 b280 1626     .....^.y.2.O..&.
   9faf4:	4aab b016 55ea 2c22 018b 50a2 80a0 dc1e     .J...U",...P....
   9fb04:	bf8e 73fa f47b 7cae e6f7 68f2 ffe8 e2f9     ...s{..|...h....
   9fb14:	3af8 47a0 65d5 e73e 91b9 cd95 0a01 3a72     .:.G.e>.......r:
   9fb24:	0e66 e41b d12f bb71 ffeb 38f3 1d78 11dd     f.../.q....8x...
   9fb34:	3fa8 a802 f779 3e0e 1fe0 b1b4 2f86 8dbc     .?..y..>...../..
   9fb44:	65df 77e8 3e1e 7ffe 17f0 7e8d adde 7a4e     .e.w.>.....~..Nz
   9fb54:	4f27 07e1 cbfb 9e13 84f1 de67 f826 745b     'O........g.&.[t
   9fb64:	eefc fadd fad1 b15d 977e dfad 6b55 8556     ......].~...UkV.
   9fb74:	79fd 7c76 503d 6d13 3250 22ce 6ec5 f322     .yv|=P.mP2.".n".
   9fb84:	3996 c6d6 ded7 f835 1989 33b5 c67e ebd6     .9....5....3~...
   9fb94:	7c5f 37ce 9004 2da8 9595 d623 4b57 d4be     _|.7...-..#.WK..
   9fba4:	d88f 0bfa 427e f299 f78e fdfe 28f2 e47a     ....~B.......(z.
   9fbb4:	940d 7af1 981a 50ba 1a41 ca94 f379 b491     ...z...PA...y...
   9fbc4:	cb2d e503 a2be 37fd 83c7 2e31 d1fc bc6b     -......7..1...k.
   9fbd4:	5812 2f24 eba8 3a3d 977a dbb5 dfef 1157     .X$/..=:z.....W.
   9fbe4:	8320 88ec 88fc 91e1 3e1a 147a e7be c573      ........>z...s.
   9fbf4:	df6c 8287 608f 8598 62ab 5561 f284 78bc     l....`...baU...x
   9fc04:	8a2a 600f 319f c82c 8cbb 10cf 5c67 491e     *..`.1,.....g\.I
   9fc14:	5201 8305 0592 ee01 ed61 7453 4040 5ef2     .R......a.St@@.^
   9fc24:	52b2 036f 8059 094e 3bfd 2a6c f23e 6836     .Ro.Y.N..;l*>.6h
   9fc34:	8fa5 466b c5ba abef 5a00 1e8e 823d bf3f     ..kF.....Z..=.?.
   9fc44:	56d8 b447 c1e2 2812 e341 a6e2 40a1 5b71     .VG....(A....@q[
   9fc54:	f0b4 11e8 11f0 de03 508d 7f48 c4bf b214     .........PH.....
   9fc64:	6620 2ed2 4e85 d1b4 8f22 3b07 defa 620b      f...N.."..;...b
   9fc74:	8ccd 5b98 0b10 339e ca0e c90d c42b 06c5     ...[...3....+...
   9fc84:	fb3b 26a1 57d4 7477 a1a1 0484 4a4a b339     ;..&.Wwt....JJ9.
   9fc94:	8908 4916 0f6a a376 1e3e e544 d572 60bc     ...Ij.v.>.D.r..`
   9fca4:	e44e 2cc7 9d4e 18f4 161a 5cb1 c771 dcfd     N..,N......\q...
   9fcb4:	3368 9ef7 0dca 2af5 b321 4177 da7c e0fe     h3.....*!.wA|...
   9fcc4:	6513 24be 3e0b 0164 1029 47d4 d554 af80     .e.$.>d.)..GT...
   9fcd4:	9672 f14e a3c0 0d08 a0ff 3361 5abb ce58     r.N.......a3.ZX.
   9fce4:	23a5 7420 e001 606b a4db 6d86 3c59 891c     .# t..k`...mY<..
   9fcf4:	956c 4ea8 0428 b869 8f96 00e1 344d 00c4     l..N(.i.....M4..
   9fd04:	e80e 996d 07c2 d088 dc40 3e9a 70c3 06bf     ..m.....@..>.p..
   9fd14:	a67a 09cb c8a7 79de f060 6808 1938 ea6a     z......y`..h8.j.
   9fd24:	3301 a3e0 7bd5 85d1 72d1 da5a f82c c90d     .3...{...rZ.,...
   9fd34:	5145 d35a 1dc1 49ed c393 b611 2479 27fa     EQZ....I....y$.'
   9fd44:	959a 9369 1536 fde6 0c6e 648e db2f b446     ..i.6...n..d/.F.
   9fd54:	2b42 31ca 9ac5 da75 7e37 8b80 cd4d 0fd7     B+.1..u.7~..M...
   9fd64:	6a0e fcb7 3d5e bcfa 91c3 a3d1 ad34 b8f4     .j..^=......4...
   9fd74:	9b1d 2bbe fddc d256 9b45 2bcd 0514 6456     ...+..V.E..+..Vd
   9fd84:	41d1 dfde d995 16d9 3b2b 7301 f245 2aeb     .A......+;.sE..*
   9fd94:	cc2d fad9 6c03 178d 6044 f6a1 ceac 7450     -....l..D`....Pt
   9fda4:	7dd8 081f 4aeb 8274 5ff3 b2c9 f1ca c123     .}...Jt.._....#.
   9fdb4:	f0b6 0be3 637f 4887 cd37 548f 42a3 ab67     .....c.H7..T.Bg.
   9fdc4:	74cd d0ac 031d a2c2 c83f 0cbb 01c0 349e     .t......?......4
   9fdd4:	bde3 f77e 83c4 2f94 22a2 76a8 37b1 dc72     ..~..../.".v.7r.
   9fde4:	8729 aa98 2c9b 7856 bde9 fb7a a7f6 a308     )....,Vx..z.....
   9fdf4:	8b45 f204 7f5c 94c0 504c f528 23f2 be71     E...\...LP(..#q.
   9fe04:	7977 ba16 df94 dc57 0dc3 ec72 3049 f482     wy....W...r.I0..
   9fe14:	604b 0f9b 3d2a d6b2 c180 7921 2c88 9045     K`..*=....!y.,E.
   9fe24:	fe17 be53 f289 4040 993c 1862 adb6 3414     ..S...@@<.b....4
   9fe34:	52c4 7ffe 3048 3775 3ee6 c371 ba4a cec3     .R..H0u7.>q.J...
   9fe44:	7182 29f5 d6cc e66b 4752 7038 c6cd 2856     .q.)..k.RG8p..V(
   9fe54:	c280 019e 30e2 439a 98e1 db03 2a2d 928a     .....0.C....-*..
   9fe64:	2c3e bfad a73d 6a3c ee40 0d07 504f 391b     >,..=.<j@...OP.9
   9fe74:	1cf6 300e 361f 3b67 5cbb 1fad 8ded 9da0     ...0.6g;.\......
   9fe84:	21b0 25d8 3977 0e3c c1a6 7484 cc4d 5585     .!.%w9<....tM..U
   9fe94:	9953 d54e 8c4c 9059 814f 43c3 59b4 2838     S.N.L.Y.O..C.Y8(
   9fea4:	e88c 6267 843f 3c87 cd2c 70a2 4327 fb58     ..gb?..<,..p'CX.
   9feb4:	6330 86fc 965e 6f22 e307 2a48 8c50 fc55     0c..^."o..H*P.U.
   9fec4:	2497 1162 edbd 655d aaac afb5 0229 b57e     .$b...]e....).~.
   9fed4:	175e 2424 429c 13a3 bb65 b939 0e98 d0a6     ^.$$.B..e.9.....
   9fee4:	1e68 28c5 6be0 e3a3 8c0e dba6 6b15 ff68     h..(.k.......kh.
   9fef4:	ab56 2d0b 1e1e 2c16 0193 8f87 0b0e 7208     V..-...,.......r
   9ff04:	7f72 da90 84d7 2e35 9e2b 7319 18ad 2fda     r.....5.+..s.../
   9ff14:	c687 d88a 5310 3cc1 7a9c 7220 78af b8b3     .....S.<.z r.x..
   9ff24:	955f ab5f d99f 17eb e798 8d04 a4c7 d136     _._...........6.
   9ff34:	e1e1 8db8 2ff1 d491 b71b fd0b 14ba 888e     ...../..........
   9ff44:	e5f3 6977 b709 900d 6ec9 e320 cfad a945     ..wi.....n ...E.
   9ff54:	39b7 368d 8dad 8f2c 1018 0a0d 7897 9e9c     .9.6..,......x..
   9ff64:	d9c2 809d 54af 346d f000 8947 f868 04f5     .....Tm4..G.h...
   9ff74:	2fd8 def5 f284 56ec 27ea 422c c24e 6de3     ./.....V.',BN..m
   9ff84:	3c14 7d84 473b 025d 512e 276d ad72 bc7d     .<.};G]..Qm'r.}.
   9ff94:	b442 d37d 0cc6 18cd 915e 0037 c7a9 caef     B.}.....^.7.....
   9ffa4:	e3a3 e560 bf7e c839 990c cd6c 838b 0626     ..`.~.9...l...&.
   9ffb4:	6ee1 c87e 40c2 8130 e623 47e1 8d6a f214     .n~..@0.#..Gj...
   9ffc4:	eee5 8fa0 a2f4 180c 9aac 2441 c2c2 ccbe     ..........A$....
   9ffd4:	1491 61ee 256c f201 05e5 af8b f66e b381     ...al%......n...
   9ffe4:	f772 84a0 e3bd f706 9d72 a6be 8926 9151     r.......r...&.Q.
   9fff4:	2091 c382 ea39 5063 7227 cdd0 875f bca4     . ..9.cP'r.._...
   a0004:	1e9e 5a89 90bd f6e4 4747 57c5 c0e9 e327     ...Z....GG.W..'.
   a0014:	c051 ea29 31ac 4f51 3017 18ae bd0f b4de     Q.)..1QO.0......
   a0024:	7bfa 03d7 6994 3cd4 47b9 204d 8dd5 a7ba     .{...i.<.GM ....
   a0034:	aaf7 481b 97dd 6701 7729 e754 2874 97d5     ...H...g)wT.t(..
   a0044:	7b26 5c00 e8d3 018e dbdf a43c 509b fafc     &{.\......<..P..
   a0054:	2f11 761d 6cb3 1906 69f7 7968 28b7 b90d     ./.v.l...ihy.(..
   a0064:	c543 1ae8 2106 b835 7796 96a2 2786 b70b     C....!5..w...'..
   a0074:	9d52 2c2d 7ea5 9c01 8109 db43 7b9b 4dea     R.-,.~....C..{.M
   a0084:	2739 4b0f ea41 bf38 3305 a4b7 47e3 c7ee     9'.KA.8..3...G..
   a0094:	7790 3fe5 3ce9 41f9 74c9 f123 82ea 166f     .w.?.<.A.t#...o.
   a00a4:	27d2 50a2 8139 bdf4 0557 179c c09f bef0     .'.P9...W.......
   a00b4:	e1cf 3ab4 b3c0 c888 fd63 e980 dd9e 446d     ...:....c.....mD
   a00c4:	c238 1cd4 d8f9 19e3 08b1 8510 43b4 0950     8............CP.
   a00d4:	7cd3 5368 b2ba 2993 9e91 378d 8933 49c4     .|hS...)...73..I
   a00e4:	5e87 9b78 132c c132 fe21 9514 0c21 42e9     .^x.,.2.!...!..B
   a00f4:	6411 7e5c b1c5 c8b5 b8f4 4fb7 630a 0857     .d\~.......O.cW.
   a0104:	e9f7 165d 6a06 0342 dfc3 d0dc fd24 49ad     ..]..jB.....$..I
   a0114:	6e03 d720 a26a ff51 d125 d8ff 0b12 4d51     .n .j.Q.%.....QM
   a0124:	7511 73c8 e914 b209 74c4 4322 8565 3a5e     .u.s.....t"Ce.^:
   a0134:	02f1 99d5 0ace 2060 d34e ae9b ed12 5771     ......` N.....qW
   a0144:	d6aa a2b2 43df a8f4 e0e4 ba27 d198 9530     .....C....'...0.
   a0154:	21a0 b244 3ad5 abde 0242 7ae5 1008 0ba2     .!D..:..B..z....
   a0164:	46aa 7b4e 167d 3253 786c 3836 b488 f5a2     .FN{}.S2lx68....
   a0174:	6d88 f275 2289 0c36 12ea 4148 d520 4183     .mu.."6...HA ..A
   a0184:	0c60 04eb 5e6f 6c3f ece7 c326 c393 be14     `...o^?l..&.....
   a0194:	6e10 1138 f7c0 2509 853a 16f6 0e87 8051     .n8....%:.....Q.
   a01a4:	4e35 f22a 5283 73a6 ef8c 2250 c3cd d3e3     5N*..R.s..P"....
   a01b4:	a7be 46dd 2887 4fe6 f0e4 f256 2fcc 0181     ...F.(.O..V../..
   a01c4:	f34f 0a95 4d37 72c6 1dce a1b4 07d1 6514     O...7M.r.......e
   a01d4:	8195 a2ab 59a9 bb0e be0a c6f0 c5cb 82e9     .....Y..........
   a01e4:	9973 ec8f 9712 0b9a dcbc 00c7 e9a7 9065     s.............e.
   a01f4:	3789 f6d3 7f14 21e2 192b 95f1 5afa 98e6     .7.....!+....Z..
   a0204:	0e65 cbf5 0f9c 721d eb42 ac37 2c7b 628a     e......rB.7.{,.b
   a0214:	e1b3 1294 4a89 0399 5536 a4b6 7a7c b870     .....J..6U..|zp.
   a0224:	2970 450b 4c6e b6e0 299d 75aa 3176 4c19     p).EnL...).uv1.L
   a0234:	1750 8f49 e693 1eb1 ef43 1ca8 2e4d c603     P.I.....C...M...
   a0244:	8dc2 fbf0 a912 e874 556d ac23 ece7 db8d     ......t.mU#.....
   a0254:	17e8 fee3 0919 3981 642c 1cbd b2fd ad18     .......9,d......
   a0264:	40e8 a0c5 edd1 1a5a f4a4 8d39 8047 25b6     .@....Z...9.G..%
   a0274:	5ab6 fba9 cec1 3534 2a98 63b8 d175 3413     .Z....45.*.cu..4
   a0284:	241c fad2 5d0c 448a 4d4a 5e9f 2dd5 43d8     .$...].DJM.^.-.C
   a0294:	0f33 45ce ec0c 2b8e c7a3 eac4 bd11 71fa     3..E...+.......q
   a02a4:	b7b4 a4c5 40f0 82d1 683a 89a0 bd18 6bec     .....@..:h.....k
   a02b4:	a469 c8cb 15bf d778 7828 0303 d574 da28     i.....x.(x..t.(.
   a02c4:	d8f4 0ea0 ec98 b389 18c7 f7e8 1fa0 d6a4     ................
   a02d4:	1e21 9d36 d0ab 2a5a 3aa5 dec2 d4e8 4891     !.6...Z*.:.....H
   a02e4:	3947 7f3a e04c 3e0f b742 a625 51f1 a485     G9:.L..>B.%..Q..
   a02f4:	dfd2 44d5 cd37 11e8 629d 8c37 71a8 c4a8     ...D7....b7..q..
   a0304:	51f1 1554 34c7 dc76 8e24 d0e6 7c79 d402     .QT..4v.$...y|..
   a0314:	31a5 04c8 5336 4c54 8c7c a665 1df9 1714     .1..6STL|.e.....
   a0324:	ff35 68a2 0c98 d8fe 40c1 39e1 1cf3 d4a6     5..h.....@.9....
   a0334:	45f3 1264 515d dd4e 085c fc7e 47c2 42d3     .Ed.]QN.\.~..G.B
   a0344:	fff8 1b61 43d9 cd92 6fc3 5cea 608b 5781     ..a..C...o.\.`.W
   a0354:	179d 4cb0 f2dc f04d cb9e c571 0fd5 da05     ...L..M...q.....
   a0364:	fa1e e7e0 95a7 9fae 63f8 edb2 b1fe b0d1     .........c......
   a0374:	1ca1 bae6 5279 f379 daa4 13cd 9119 e98a     ....yRy.........
   a0384:	c1d2 0453 a19d fee0 e8a0 c4de a569 a7f1     ..S.........i...
   a0394:	c525 d5ba a52e 908d d990 9757 6a51 a290     %.........W.Qj..
   a03a4:	143f 4b6c d3e0 bf58 d47c 2e51 6881 d5f5     ?.lK..X.|.Q..h..
   a03b4:	15fe d08a f6b2 ce6f 6ff6 1785 b9a1 457f     ......o..o.....E
   a03c4:	ff7d 4800 7ae6 828f 9ea7 108b 1a8a 5482     }..H.z.........T
   a03d4:	54c3 4b03 1429 2a12 6761 294a 22b0 1fc5     .T.K)..*agJ)."..
   a03e4:	8e8e 1f0a 801d 57b4 8787 36ab cb86 f82c     .......W...6..,.
   a03f4:	e624 1c36 4cb0 025f 8141 20af 16ec 7f2c     $.6..L_.A.. ..,.
   a0404:	6e48 5500 cc78 a27b e217 0194 87d6 fd1e     Hn.Ux.{.........
   a0414:	d7c1 e5af 2984 b0ae 3404 a18d c195 9599     .....)...4......
   a0424:	ea51 290b 0109 2e54 7f30 6db0 e1ed 8f8a     Q..)..T.0..m....
   a0434:	3031 5966 f915 f6ed d553 6c70 7774 e8e3     10fY....S.pltw..
   a0444:	4705 97ce 8a37 afa0 cf53 dd08 ac14 79c8     .G..7...S......y
   a0454:	20cc 4719 f18a f843 a07a a5a4 a24d 7908     . .G..C.z...M..y
   a0464:	64c2 451e 71f5 339d 3641 26f3 93ec ed0d     .d.E.q.3A6.&....
   a0474:	4c01 63ca d038 24b8 1876 5d19 8f20 42a3     .L.c8..$v..] ..B
   a0484:	6c0d 3870 1ca0 c8ae 1e62 1ed6 2d7a 1f42     .lp8....b...z-B.
   a0494:	fcca e79c 4795 86f1 1cb5 457d 10b0 7816     .....G....}E...x
   a04a4:	36db 69af 1101 23ba 63eb 1f0a 8979 2781     .6.i...#.c..y..'
   a04b4:	2fbd c7fa ef9e caf4 a8ce 582a 8206 d0ef     ./........*X....
   a04c4:	80ad 7b42 42eb c9c2 270d 949e 9f62 b683     ..B{.B...'..b...
   a04d4:	d1a7 abd5 881f afcb d36d 5476 3fe7 3f11     ........m.vT.?.?
   a04e4:	9234 0af7 e07d ac93 7e38 122c 8199 e8a0     4...}...8~,.....
   a04f4:	c904 da84 c16b d541 9915 8028 6ee5 e9e1     ....k.A...(..n..
   a0504:	92b7 24cf e606 c9b1 c4da 2710 9c5b 9193     ...$.......'[...
   a0514:	5098 4cb7 5725 41b9 9b6d 58e4 c2ca 0a99     .P.L%W.Am..X....
   a0524:	4c7a 6de7 6cef acb6 88c0 07e9 9f7d 3202     zL.m.l......}..2
   a0534:	61b2 a2cc 8791 5372 7b8f 28ce 0b09 05a4     .a....rS.{.(....
   a0544:	65fe 22aa 9098 3f8e 1fc0 dc54 2ef6 9885     .e."...?..T.....
   a0554:	6660 40bc b64d 9c3e a5d5 9a8c 3b9e 947f     `f.@M.>......;..
   a0564:	f3ab 1908 24b4 d69f 192a 611b 4c09 73f3     .....$..*..a.L.s
   a0574:	41c5 315b 1409 de93 205d 2f43 1370 88fd     .A[1....] C/p...
   a0584:	a278 09b8 d028 b93b 281d 0062 c546 8b9f     x...(.;..(b.F...
   a0594:	2314 5f9b efab be29 db42 8fdf 0e83 7504     .#._..).B......u
   a05a4:	6ac3 1a25 c981 2d18 16ba 5fc9 75c3 1774     .j%....-..._.ut.
   a05b4:	264f 28e8 3998 c5a9 f22f 4b51 3e45 72d6     O&.(.9../.QKE>.r
   a05c4:	1afb be77 b934 9a73 3865 9bd9 4ee5 04b6     ..w.4.s.e8...N..
   a05d4:	d00c f3e8 ab2e 63c7 3c72 0988 39c7 22ec     .......cr<...9."
   a05e4:	d5fe f112 f7e9 fa91 88ff c46b eee7 d292     ..........k.....
   a05f4:	dd10 142d e155 1610 59fc 5c40 8135 8d84     ..-.U....Y@\5...
   a0604:	4681 30ef d0b6 deed 24b1 0253 7d8d 30a7     .F.0.....$S..}.0
   a0614:	a557 8272 e0ce eae1 f5f6 8464 e918 7032     W.r.......d...2p
   a0624:	8fa5 8331 a0df 08c2 705b b4c0 254f 3e7f     ..1.....[p..O%.>
   a0634:	c76b 7968 79a0 ed81 0074 198a 9094 8cc8     k.hy.y..t.......
   a0644:	e36a bf13 fe3a 3d6c 80bc c4f1 4a44 2008     j...:.l=....DJ. 
   a0654:	8cc5 139f 3be1 f282 1614 f721 8923 7e2b     .....;....!.#.+~
   a0664:	657c 9889 e0aa 175a 254c 60ba 9e8a 0604     |e....Z.L%.`....
   a0674:	cb4d decf 4665 1efa 1c0c 0e92 d8b4 80ac     M...eF..........
   a0684:	55df 120b 232c 1ceb 1e1e 60f2 6878 8329     .U..,#.....`xh).
   a0694:	faaf 2d64 6708 5322 c8ea 1556 ed1e 2547     ..d-.g"S..V...G%
   a06a4:	a930 02d4 1ac5 f8b7 15cf c14a 613e 93ef     0.........J.>a..
   a06b4:	4609 657c a0fe e783 7091 1db2 887c 960e     .F|e.....p..|...
   a06c4:	8787 0e9f 9f0f 97a3 ae16 df4a 2b00 b55c     ..........J..+\.
   a06d4:	201c 2e84 3895 eb9a ee2a 6193 cd19 f9c3     . ...8..*..a....
   a06e4:	a668 8e29 3768 5018 29d6 15ba 295e 8b58     h.).h7.P.)..^)X.
   a06f4:	ff7d 4639 1d9f 08ad 9080 0d3e 286e 1ffc     }.9F......>.n(..
   a0704:	a1ea 4396 551d 7386 836d d1e6 ef8a 370e     ...C.U.sm......7
   a0714:	a3ef 8543 e8df f223 0c60 a494 42ce f47e     ..C...#.`....B~.
   a0724:	df49 dd1d 905d d30b 2568 a6df d13f f4a4     I...]...h%..?...
   a0734:	8043 139c c006 5121 6b29 a0f3 f1f4 2ae9     C.....!Q)k.....*
   a0744:	56cd 60c9 84c1 0227 dfb8 c2c3 009a 29b8     .V.`..'........)
   a0754:	d5a3 5d7a 0706 e01f 94f6 c874 e1e1 3b15     ..z]......t....;
   a0764:	a83e 2e5d e05a 3049 9430 3c65 ef67 6c12     >.].Z.I00.e<g..l
   a0774:	b5ed 4213 7fcb 9474 57fa 76a3 41a9 4610     ...B..t..W.v.A.F
   a0784:	f060 e169 ebd6 d15b e0e6 ca56 385e 2646     `.i...[...V.^8F&
   a0794:	e057 38b7 e830 2163 db5f a03e 02c5 657f     W..80.c!_.>....e
   a07a4:	70c0 6293 f485 79b3 8914 01f2 62e3 bea7     .p.b...y.....b..
   a07b4:	e11a 86c2 c70e 9f61 a51e e001 b277 2255     ......a.....w.U"
   a07c4:	82c3 c60f 2555 89fa 5f38 26f2 3582 685b     ....U%..8_.&.5[h
   a07d4:	f810 5b66 341f 37e3 36d8 6cce 27cc 164c     ..f[.4.7.6.l.'L.
   a07e4:	da65 83b5 4172 5f8e f5f4 8dad 961e c696     e...rA._........
   a07f4:	45a9 9b6f 344c 339c 8f68 45cd fde3 1229     .Eo.L4.3h..E..).
   a0804:	f49a 7870 4de9 090d d5d1 3618 e45c cf9a     ..px.M.....6\...
   a0814:	9e85 6510 2b18 6ca4 9cf5 4f88 8a07 52e2     ...e.+.l...O...R
   a0824:	8b3d d0b4 344f 0393 3810 e01b dd63 1cf4     =...O4...8..c...
   a0834:	c1e9 b7ac e05c ae1a 6736 ad4f e9c8 75a3     ....\...6gO....u
   a0844:	6e18 96cf d05b 27ee 42ae 37c3 5138 cb0b     .n..[..'.B.78Q..
   a0854:	15dc 8b10 5113 fd6d e916 d49b 073f 8afb     .....Qm.....?...
   a0864:	1e38 c792 f921 bf75 08e1 c592 6aae a30f     8...!.u......j..
   a0874:	b5b7 526b 711f 1050 aeb1 c496 6437 410f     ..kR.qP.....7d.A
   a0884:	e5be 4ad1 84bb 5951 ff43 90c9 918d b882     ...J..QYC.......
   a0894:	d002 f376 010b 2107 1d7c cf20 ee94 d305     ..v....!|. .....
   a08a4:	81de 57d1 1f14 88ca 8949 d547 43d0 93ef     ...W....I.G..C..
   a08b4:	72c0 ef33 de3b 41a5 3566 c4ab 95d3 b990     .r3.;..Af5......
   a08c4:	67cc 7250 3c25 365e 9d8e dc06 5726 b0b6     .gPr%<^6....&W..
   a08d4:	76ea 5dfc 6429 2ed1 9acf 87e7 71e7 e596     .v.])d.......q..
   a08e4:	0b55 b72b f462 d06f 5ee2 e0ab aa97 c5a7     U.+.b.o..^......
   a08f4:	a28f c580 8848 b96f d7a2 3eeb 17da a99a     ....H.o....>....
   a0904:	07c2 b69b 91ea 5f44 dcdf 8dda 67b0 d0bf     ......D_.....g..
   a0914:	b0c0 e788 ee32 d8ee 1a55 8443 cfb8 86aa     ....2...U.C.....
   a0924:	64a9 6478 4872 7ee4 620b 555e 400d 3165     .dxdrH.~.b^U.@e1
   a0934:	931a 29cf 5451 1132 20c6 976e 0a28 2db5     ...)QT2.. n.(..-
   a0944:	3b42 8e43 427d ff0f a01d 03fd 2e93 7852     B;C.}B........Rx
   a0954:	8299 3dc9 5b0a 51d8 6170 3ec7 4502 5526     ...=.[.Qpa.>.E&U
   a0964:	b3aa 15ca cbc6 6216 9a57 81eb 1e20 324d     .......bW... .M2
   a0974:	8882 0548 95d9 d410 d428 e953 332c 01de     ..H.....(.S.,3..
   a0984:	68b6 72ae e688 0150 e2ac a9e2 3642 1144     .h.r..P.....B6D.
   a0994:	c841 190b dd9a 02c0 80c6 b88f 020f ccc2     A...............
   a09a4:	559f c1ae 0240 d217 e2ba 6f50 5537 bc57     .U..@.....Po7UW.
   a09b4:	0cce aa90 c491 704c a082 beb6 f55e 3695     ......Lp....^..6
   a09c4:	73ac ca27 7dfb 077d e32a 59e9 ca68 9d30     .s'..}}.*..Yh.0.
   a09d4:	3563 b604 52e2 696c 1149 0876 ec20 44e2     c5...RliI.v. ..D
   a09e4:	f623 b0fd 6980 f4e8 b1a0 35c6 1c4c 9c25     #....i.....5L.%.
   a09f4:	42aa 2d54 ca9f f214 588e 2c84 1939 3644     .BT-.....X.,9.D6
   a0a04:	dcf6 04b0 2d6a f3c7 c7b9 3457 68cf 4909     ....j-....W4.h.I
   a0a14:	5065 c304 09b4 da86 58c0 2198 11ed 339f     eP.......X.!...3
   a0a24:	8979 7c21 9d24 9da0 e97d 6189 d15d 1187     y.!|$...}..a]...
   a0a34:	0756 d7e4 b05d cc76 3b56 78e3 a912 2975     V...].v.V;.x..u)
   a0a44:	8d01 28a2 6931 1459 5318 0e00 52c8 842f     ...(1iY..S...R/.
   a0a54:	ce95 386b 57b9 0b45 8db5 fec2 df25 aa87     ..k8.WE.....%...
   a0a64:	0fb6 ed15 6483 3938 b83c 7ed9 bb29 ee01     .....d89<..~)...
   a0a74:	e3cb 17e1 6d50 fd96 c459 c4a8 17cd f493     ....Pm..Y.......
   a0a84:	d1b8 3d09 507c 0060 4412 a2fd 90e7 7a7b     ...=|P`..D....{z
   a0a94:	8d9e 1e76 a574 eaa2 c543 f14a 35bb 98f0     ..v.t...C.J..5..
   a0aa4:	767b c7aa 201b 7b5f ca18 f705 43c9 ded7     {v... _{.....C..
   a0ab4:	23f8 a5bb c84e 3719 848d 1539 2260 c030     .#..N..7..9.`"0.
   a0ac4:	34ef 4fc6 2ff8 6069 1773 d8a6 fa40 8d1b     .4.O./i`s...@...
   a0ad4:	1d13 c282 19df 4661 1d0f 5282 925d 50bd     ......aF...R]..P
   a0ae4:	94f7 ee8d 7131 059c ad29 83a3 f833 6fc3     ....1q..)...3..o
   a0af4:	4c51 5e97 a8fd 0932 480a 9d97 08fc 1af3     QL.^..2..H......
   a0b04:	65af a73a 7033 a8bc 8d6c c925 b1b9 d092     .e:.3p..l.%.....
   a0b14:	0c2d dd09 33f2 e849 4e38 926b 01ce ed6b     -....3I.8Nk...k.
   a0b24:	0f71 b4b8 e494 96a7 e2ab 737f 662b 5f06     q..........s+f._
   a0b34:	9872 7bb7 530d 00d3 eccc a3a8 7c4e 244d     r..{.S......N|M$
   a0b44:	a553 1a0c bc70 45c6 929d 2c8f ea36 002b     S...p..E...,6.+.
   a0b54:	fff0 934c a89b 9586 356c 8f9f ca50 d403     ..L.....l5..P...
   a0b64:	91a2 4237 cae0 aacc 5850 270a 46fa 624a     ..7B....PX.'.FJb
   a0b74:	ac92 155c 6832 bed5 4362 852a f507 231a     ..\.2h..bC*....#
   a0b84:	7d5e b164 5172 715e cffc bbf6 4737 bbfe     ^}d.rQ^q....7G..
   a0b94:	cbf2 f776 144b dfd7 8ac0 94d3 21d4 f662     ..v.K........!b.
   a0ba4:	94c9 9882 53d9 02a2 032c 5470 9c62 024d     .....S..,.pTb.M.
   a0bb4:	6bc9 c5fe 1674 aed9 f9b0 995c 4522 345e     .k..t.....\."E^4
   a0bc4:	3804 e8fd 5f05 d234 5f9a 7324 62ee e51d     .8..._4.._$s.b..
   a0bd4:	0df2 c7f2 f482 1bcf 022c 52ea 7abe 320f     ........,..R.z.2
   a0be4:	178c 4c23 bd74 b6d1 26d4 444d e458 24d0     ..#Lt....&MDX..$
   a0bf4:	ac0b 38c6 450a 7af5 b973 5103 3222 d8ae     ...8.E.zs..Q"2..
   a0c04:	fbaa 4605 e9d4 d17e 8416 c251 0d5e 28b1     ...F..~...Q.^..(
   a0c14:	2dea 2466 e29d 3acd dd1b 6604 fd72 1fc9     .-f$...:...fr...
   a0c24:	2afd 1ed4 f87d f926 5d7e bd7b 7a3e 10db     .*..}.&.~]{.>z..
   a0c34:	285f a1b3 2155 ea3e a7ea 4908 ae71 3673     _(..U!>....Iq.s6
   a0c44:	02c2 be97 70a6 6ccb db7c c89f 142f 642a     .....p.l|.../.*d
   a0c54:	f0c6 e4e7 8072 bc8f 6344 450b fcd8 f228     ....r...Dc.E..(.
   a0c64:	f9ac e5c2 4fc3 e051 7de1 0f15 16e5 5b92     .....OQ..}.....[
   a0c74:	82ed ee53 2132 53a6 4069 3d83 6db5 4170     ..S.2!.Si@.=.mpA
   a0c84:	70b7 18e3 e2c4 679b 3432 19dd 1df2 85f5     .p.....g24......
   a0c94:	5a40 5c9c 2f7b 1ee6 3651 784c de23 d4e8     @Z.\{/..Q6Lx#...
   a0ca4:	8fbb 5c55 823b 9d18 3d9e 1161 4fb5 c608     ..U\;....=a..O..
   a0cb4:	0b28 5667 0f60 5879 c7c9 3b0c debb 5da5     (.gV`.yX...;...]
   a0cc4:	1d41 2969 458e f4f0 f2be ac8e e292 fbc0     A.i).E..........
   a0cd4:	1e47 60c5 5183 58a1 9ed6 816b a333 8000     G..`.Q.X..k.3...
   a0ce4:	9a4c d91f e26e cbd9 da26 0ee4 7134 8b31     L...n...&...4q1.
   a0cf4:	8182 f158 334e 08df 630d 408e e3b3 0d08     ..X.N3...c.@....
   a0d04:	0eab 8b8e e8e3 628e e5cd ac5a 5fb9 c04a     .......b..Z.._J.
   a0d14:	f468 9bbc 9c62 f244 0bf8 d57f 143a 63fa     h...b.D.....:..c
   a0d24:	cfa7 9689 4794 3cde 1540 fe70 cdfa 2b89     .....G.<@.p....+
   a0d34:	e4fe 7fcd 77b1 466f 4169 3ccb e5dc 0a5b     .....woFiA.<..[.
   a0d44:	691a d184 61c4 3104 1b35 90e1 2cbb 5ff6     .i...a.15....,._
   a0d54:	bd3a 8185 73d1 7af9 885d 9257 47d4 73eb     :....s.z].W..G.s
   a0d64:	867d b268 dcd8 a7fa cdce 4dcd 4e07 a2ed     }.h........M.N..
   a0d74:	7303 cf61 13af 1dd9 33fb 4fe4 ec3b 26d7     .sa......3.O;..&
   a0d84:	b5c4 f54e 45e5 f0fa bfa7 a5be 7c47 f598     ..N..E......G|..
   a0d94:	978b bddf fb7c fc52 e9fa b7eb 5fcf 0fd1     ....|.R......_..
   a0da4:	231f b1e8 98a8 f914 31cf ec4e fba0 399e     .#.......1N....9
   a0db4:	82b6 dc0a 26e0 5eed e051 0c7a 3784 7fd0     .....&.^Q.z..7..
   a0dc4:	bd38 d411 cd43 7f7a e0ef 3b30 53df 9dbb     8...C.z...0;.S..
   a0dd4:	791f 5c0c 0d0f 4853 bdaa 3bd5 851a 44f0     .y.\..SH...;...D
   a0de4:	4234 5f63 8daf 3351 d03f 8e45 e08c 5c0b     4Bc_..Q3?.E....\
   a0df4:	0c32 a92f cce6 1cea 3e1e d9a7 7159 3596     2./......>..Yq.5
   a0e04:	ce56 8508 f6dc 4fbe 0831 3e68 baad 5418     V......O1.h>...T
   a0e14:	8617 218e b944 48aa cd4a 2c54 a24e fc3c     ...!D..HJ.T,N.<.
   a0e24:	ea31 289a 49fe 0393 68b2 70bc e682 65e8     1..(.I...h.p...e
   a0e34:	ce6f 1f54 479e ba07 9819 add4 01b9 8ad4     o.T..G..........
   a0e44:	032e d80e 1987 79a2 e6bd 66a9 5fa4 ac8c     .......y...f._..
   a0e54:	0b59 ed13 2777 4969 4e20 d0f8 3e0f 7744     Y...w'iI N...>Dw
   a0e64:	6b9c 9be7 4ecf 4843 1380 c950 af90 205b     .k...NCH..P...[ 
   a0e74:	1654 0142 014a fff2 6d21 66c4 a6c0 8aee     T.B.J...!m.f....
   a0e84:	d865 82fd c4b2 767e 30bf 8ab4 4499 f1db     e.....~v.0...D..
   a0e94:	c78a bc25 b770 4ec0 d265 8969 09e6 bd08     ..%.p..Ne.i.....
   a0ea4:	6964 1dbf 4197 f4da 28f6 8877 c5b4 7a85     di...A...(w....z
   a0eb4:	cd86 6b94 478d 46c5 44d9 ef29 a9b3 1946     ...k.G.F.D)...F.
   a0ec4:	ba15 5a57 fa58 a03c 8b81 b48e 2492 7968     ..WZX.<......$hy
   a0ed4:	beff 2d5c e293 7bfd 91b3 60cd bc22 2dbc     ..\-...{...`"..-
   a0ee4:	c7c5 f895 c378 ac03 0319 c535 8f73 6ebe     ....x.....5.s..n
   a0ef4:	fe11 096b 1e37 bcad 5e50 8559 d6b7 9972     ..k.7...P^Y...r.
   a0f04:	d38c 9a69 1e4c 2f21 f4ea 0a69 9908 001c     ..i.L.!/..i.....
   a0f14:	bff3 4caa e3c1 22c2 47fe 8951 6b02 a81e     ...L...".GQ..k..
   a0f24:	6596 946c 56ab 883d f523 d750 131e 0221     .el..V=.#.P...!.
   a0f34:	461d dc98 71ea 0568 040d 2f4c 21cc b8af     .F...qh...L/.!..
   a0f44:	20cd 79dc 5ee1 9c56 6943 29c5 5eab 2e06     . .y.^V.Ci.).^..
   a0f54:	bc5d 8676 9196 26c2 ffd1 1b3f 5220 f2da     ].v....&..?. R..
   a0f64:	cd67 d25e 93bf 5d2b bf29 181e e74d 97f1     g.^...+])...M...
   a0f74:	feed e191 c41a f75f 197c b25e 7fdd 77ec     ......_.|.^....w
   a0f84:	d5cb c955 f97f e51b 5748 4a3b ff6d ff08     ..U.....HW;Jm...
   a0f94:	75e7 adbc f97f 54ff 051b 765b 9ce5 3e58     .u.....T..[v..X>
   a0fa4:	665a 6dd2 a676 cdbb c196 0ebb aafa d495     Zf.mv...........
   a0fb4:	c56a 2172 62a8 4a11 ff9c 0e5d e49c 381b     j.r!.b.J..]....8
   a0fc4:	f13e 1275 3471 3f85 c893 4fa1 6243 ad30     >.u.q4.?...OCb0.
   a0fd4:	9302 7b3c b562 bc8d f5b0 fb32 1698 8679     ..<{b.....2...y.
   a0fe4:	ba07 c935 b293 3245 d5e9 8112 a5a3 ed17     ..5...E2........
   a0ff4:	8c7a 41a6 c487 2251 214c c60a 148b 7718     z..A..Q"L!.....w
   a1004:	4ee2 74fe 32b1 0def 7d27 55d6 1ccf 4df2     .N.t.2..'}.U...M
   a1014:	ad92 002d 51e8 fe35 8e52 4327 9833 c7d3     ..-..Q5.R.'C3...
   a1024:	26da 2fd7 abaf d164 6396 24e6 9159 f38c     .&./..d..c.$Y...
   a1034:	5262 1fa2 6157 058d 1928 1ca8 6e8c 3b02     bR..Wa..(....n.;
   a1044:	ac63 6eb5 6d9e 79aa 710a d9a3 6969 1a77     c..n.m.y.q..iiw.
   a1054:	7de8 5772 8112 bbe7 bc84 15da 4e9f fa48     .}rW.........NH.
   a1064:	6486 9b6c eb04 29a8 0ba1 0291 25fc da08     .dl....).....%..
   a1074:	636d 9f78 27c2 a792 df54 77b7 7d4d ec52     mcx..'..T..wM}R.
   a1084:	6325 ccb0 1c1f 52d4 4b87 c05a 8ac4 e451     %c.....R.KZ...Q.
   a1094:	298c 67f1 711b d5ed fe78 36cf 2946 37bf     .).g.q..x..6F).7
   a10a4:	35c6 be50 b419 9029 57aa 3ebb caa9 8698     .5P...)..W.>....
   a10b4:	1e73 abf8 1f91 c6d7 41a6 7b6c 1427 135a     s........Al{'.Z.
   a10c4:	f9f5 d343 73d7 3743 4651 4081 2611 340b     ..C..sC7QF.@.&.4
   a10d4:	4802 2be4 1a63 e91c 13e0 7f2d e000 f439     .H.+c.....-...9.
   a10e4:	1b1e ae7d fa51 ee92 f0af 08b4 80bf 7a2a     ..}.Q.........*z
   a10f4:	4b83 d51b 01d5 2d93 af34 6284 edac a59d     .K.....-4..b....
   a1104:	1670 7399 99f6 a078 7316 9867 8a57 596f     p..s..x..sg.W.oY
   a1114:	ae61 901b d605 2d9b 6187 3ac0 3e06 d3ac     a......-.a.:.>..
   a1124:	7a3e dc36 96f1 848d 4b1e 9ad9 0f35 21cc     >z6......K..5..!
   a1134:	381c 93fd cd33 1688 86f0 c9f1 8c6d 2eb9     .8..3.......m...
   a1144:	4f0c 8f59 9596 24b0 f165 6548 cc8d 68c4     .OY....$e.He...h
   a1154:	e9f2 0603 b259 bc31 a4b1 4644 6c54 8773     ....Y.1...DFTls.
   a1164:	43c4 dcb8 4699 17e8 3fe3 904a b599 25f0     .C...F...?J....%
   a1174:	b671 05fa 52c5 a5c4 f063 babd 044f 3ae6     q....R..c...O..:
   a1184:	18dd 6a14 2ae1 9be1 4591 dd81 00bf f5aa     ...j.*...E......
   a1194:	ee8b 7c0b 2864 0a12 abbd a17e 1367 4b23     ...|d(....~.g.#K
   a11a4:	9065 184f f861 ddca d2a2 5bfb 4698 8542     e.O.a......[.FB.
   a11b4:	0331 1c18 0cc6 6425 c87e e0be 4298 ee6d     1.....%d~....Bm.
   a11c4:	123a 096b efe5 0514 f4bd 5b8d 15a2 1ce0     :.k........[....
   a11d4:	1531 df60 0156 08c1 0160 947e e8da 84a6     1.`.V...`.~.....
   a11e4:	a2b9 a399 f23f 1393 e980 1779 d719 c3c3     ....?.....y.....
   a11f4:	f11e fa5c a2ee fa12 454f 11fa 6eda c15d     ..\.....OE...n].
   a1204:	5f2d a1c2 a569 6b65 f195 1c2b 9fd8 de70     -_..i.ek..+...p.
   a1214:	005d 86ff 2be0 79c8 0666 9e21 90f8 edc1     ]....+.yf.!.....
   a1224:	9f75 fb75 7a3d 10ff 271e b286 3a00 4376     u.u.=z...'...:vC
   a1234:	92b9 404a 7fd5 47a8 983a 1cf9 124e a024     ..J@...G:...N.$.
   a1244:	1ca1 8006 7ef0 8026 fd6c 8400 b7c4 0af9     .....~&.l.......
   a1254:	125f 37a8 6aa2 fb9b 6ca2 3e8c 7acf 3f62     _..7.j...l.>.zb?
   a1264:	d573 8f0f c132 cbf4 1865 fd7b 6d1b a8cc     s...2...e.{..m..
   a1274:	dc30 8bda 44b4 6fb7 9f00 6314 019e c221     0....D.o...c..!.
   a1284:	4062 6c62 604c 72fc d4e4 34ca d101 38b4     b@blL`.r...4...8
   a1294:	9aad 72c0 81a8 a879 a63a 5147 e417 72eb     ...r..y.:.GQ...r
   a12a4:	3575 8020 9d00 1adb e151 9a4b 7e8a 38d4     u5 .....Q.K..~.8
   a12b4:	8cc7 ec68 32eb 7f62 6bd6 f397 2c93 98fe     ..h..2b..k...,..
   a12c4:	735e 3f95 d9f1 945d a06f 8fca 8fc5 24cb     ^s.?..].o......$
   a12d4:	66fb 5f9e cb6d 2263 9949 9bef 41ee 55bd     .f._m.c"I....A.U
   a12e4:	7c09 a010 e06b 0643 ffa6 a895 0436 bde0     .|..k.C.....6...
   a12f4:	bf8f f37f 65fa d46b 3cef 7cbb 3dd7 b8e6     .....ek..<.|.=..
   a1304:	f64d 8d0d 5f15 235f 2d4f 515e ee92 1f24     M....__#O-^Q..$.
   a1314:	c313 6419 4f4e 7f27 f9fd 643b 6e2e ab92     ...dNO'...;d.n..
   a1324:	690f 7ec5 786c 4474 943c 005c c3f7 b69b     .i.~lxtD<.\.....
   a1334:	0337 3e0e 3e3c b9be e9b9 9cde f376 fae2     7..><>......v...
   a1344:	ffb8 d9ec e3b3 b34f 816a fd82 7d18 4560     ......O.j....}`E
   a1354:	0907 8971 1645 5fcf c8e5 7bff cc80 79b2     ..q.E.._...{...y
   a1364:	280e d002 1171 35e4 00d5 2fad 0694 bdb4     .(..q..5.../....
   a1374:	73ef 0698 9497 adc2 4f43 2a13 edad e78d     .s......CO.*....
   a1384:	fea4 d07d 0e0b 01fa 9cc6 ff13 4fc1 fff9     ..}..........O..
   a1394:	80bd 0bc5 4cc8 4359 1d1b a086 612b 5f36     .....LYC....+a6_
   a13a4:	902e 36f8 279d 6e6f c04b 84dd 0b1b 753b     ...6.'onK.....;u
   a13b4:	8ebd 8d71 f916 f56f 730a 08e3 89b4 7cdc     ..q...o..s.....|
   a13c4:	58bd 9324 7494 e9f2 8f37 e06f 6bb7 731c     .X$..t..7.o..k.s
   a13d4:	09b5 0550 6566 de0a 71f2 5495 801d 248a     ..P.fe...q.T...$
   a13e4:	785e 38c1 05ea 2453 2665 70ee 5357 a571     ^x.8..S$e&.pWSq.
   a13f4:	c827 f145 9f7d 24a2 63d4 822c a482 986a     '.E.}..$.c,...j.
   a1404:	3d11 8f81 8c88 809b c71d f8b7 3e4a 6c60     .=..........J>`l
   a1414:	daa6 3855 39ab 4395 f1ff a5c2 a542 c2eb     ..U8.9.C....B...
   a1424:	9255 92ac 48a3 64a3 d684 47fd e168 3248     U....H.d...Gh.H2
   a1434:	077e 9c5b 78fa a4a5 0c32 2c1f f099 9626     ~.[..x..2..,..&.
   a1444:	77fb f873 b367 04d9 fd4b cff8 f359 6093     .ws.g...K...Y..`
   a1454:	5c19 1f07 1299 02c6 4006 c69c ea2d 5ee1     .\.......@..-..^
   a1464:	fdd5 e212 19c4 e998 9713 1931 03a4 04e7     ..........1.....
   a1474:	b4df dab4 f6b3 c0c7 c1bb a148 1565 5303     ..........H.e..S
   a1484:	d807 1af1 76d0 a2d9 f634 026f 5a58 4370     .....v..4.o.XZpC
   a1494:	e22d 6e4f 26f4 b7da 7070 f827 3e52 ae89     -.On.&..pp'.R>..
   a14a4:	c1d0 b078 2e1c d909 1211 159c 34c9 849a     ..x..........4..
   a14b4:	defc 01cf b46d 8127 fef7 1e6a 1f67 4ce0     ....m.'...j.g..L
   a14c4:	ec7d 05e2 fb7b 42a6 7f1f bb1f 7e2f e1fc     }...{..B..../~..
   a14d4:	f065 9109 f3f3 dcfd eaa9 81f5 673e 0c2d     e...........>g-.
   a14e4:	9d93 1f61 4ca4 0e0e f25a 3c69 955f 5729     ..a..L..Z.i<_.)W
   a14f4:	77f2 0c34 becd e1fe dbf5 2500 f3e1 9d48     .w4........%..H.
   a1504:	0c79 ceec 1d67 7c14 f0a6 f221 79a3 b790     y...g..|..!..y..
   a1514:	f70b 691c 3024 b851 9319 18ee 0b4e 39be     ...i$0Q.....N..9
   a1524:	e02c 61ff 1812 e422 c45a c235 861b e71d     ,..a..".Z.5.....
   a1534:	cc37 53e9 cd74 6c5d fc61 8a4a 19b8 7cac     7..St.]la.J....|
   a1544:	8c04 1f9e 3ac4 8246 e696 22e4 9f1b d489     .....:F...."....
   a1554:	db90 b80b 575c e870 cb71 a896 51da db0e     ....\Wp.q....Q..
   a1564:	a3e3 b788 0345 612b 6f50 7e5f d3ff 3f8f     ....E.+aPo_~...?
   a1574:	fd7f 3ff3 7182 bcf0 e86d 7555 3c8b 2527     ...?.q..m.Uu.<'%
   a1584:	17b9 1029 8098 6f9a 1edb 32de 9b70 b07f     ..)....o...2p...
   a1594:	32ca 5c26 37db d1ba c310 e7b4 c2b5 8709     .2&\.7..........
   a15a4:	bfe1 e851 b6da 8996 0e31 79ba e026 c0d1     ..Q.....1..y&...
   a15b4:	364a 25b0 22c0 fc20 81fb 7b82 16d7 d828     J6.%." ....{..(.
   a15c4:	0847 0d27 ec25 92c3 29c4 3083 aa26 884b     G.'.%....).0&.K.
   a15d4:	22de d907 7f5f e3f3 6fcf bfdf f9fc c3e7     .".._....o......
   a15e4:	1bc3 d904 072d be29 4d42 ed37 7514 5eb9     ....-.).BM7..u.^
   a15f4:	3186 8cff 9421 32e4 28fa e8be 9bc9 40da     .1..!..2.(.....@
   a1604:	fb20 a5d8 f486 65d1 a92c 9ced c6e3 fc4e      ......e,.....N.
   a1614:	cfdb dfaf febe 2fe1 ead0 cf8d 19fe 1be8     ......./........
   a1624:	0f22 b005 b5b9 173d c06f 4ee8 afd0 1cef     ".....=.o..N....
   a1634:	0aac 6d51 fc3f f6f8 b7fd fe3f 87f5 b817     ..Qm?.....?.....
   a1644:	8832 4391 1c5c 57df f27d 8873 7d26 8668     2..C\..W}.s.&}h.
   a1654:	1ba3 7cd3 f06c 0c07 d2bc 3992 166f f3e7     ...|l......9o...
   a1664:	beba 8a14 22db 49f6 3b4e fb11 c09d 4e3d     .....".IN;....=N
   a1674:	811b eafd ae25 7ce9 4dc3 2d74 2856 c3ea     ....%..|.Mt-V(..
   a1684:	5637 4e8b 83e0 c4c1 80b5 da40 fa62 b629     7V.N......@.b.).
   a1694:	e559 17d1 da1b 84b5 6ba6 761d ff49 412d     Y........k.vI.-A
   a16a4:	391d b4ba 4bd9 8a3a 5776 88ec 1306 0e7c     .9...K:.vW....|.
   a16b4:	9d84 bf63 19f5 484e c3e4 6276 655b f7d8     ..c...NH..vb[e..
   a16c4:	c6cd ede9 4cae 53e6 8320 5fe1 4137 f0c8     .....L.S .._7A..
   a16d4:	0034 7f34 110e 7a32 437c 07f3 1aae 644c     4.4...2z|C....Ld
   a16e4:	4ccc e046 b058 b69f 9920 a0d1 aba1 90be     .LF.X... .......
   a16f4:	f31c e6fa 874f 421b e7a7 d641 fa3e 2470     ....O..B..A.>.p$
   a1704:	409a fbb3 1580 ff2f 5696 afb3 5bb3 8137     .@..../..V...[7.
   a1714:	7b61 2518 6bac e76b c108 9549 977f 24df     a{.%.kk...I....$
   a1724:	0605 6887 75fb 4451 cba2 801f e822 49f4     ...h.uQD...."..I
   a1734:	589d 21d8 18a1 1037 44a4 2287 711e 7e15     .X.!..7..D.".q.~
   a1744:	4887 9258 6ff0 e481 64e4 fb3c 69d4 e96c     .HX..o...d<..il.
   a1754:	af7a 2942 44ab ddfe 53ea c1e5 32a0 e5dc     z.B).D...S...2..
   a1764:	da6a ea79 4905 1684 9e98 7ca7 1ecb 2bbf     j.y..I.....|...+
   a1774:	ef86 e3b2 746b 4be2 582e 2ad9 1e1e 6122     ....kt.K.X.*.."a
   a1784:	c82f 3c57 f87a 8dbb c6de 53d8 87b1 d3ae     /.W<z......S....
   a1794:	a18e 348d 8c1b 2867 ad70 ef22 5328 ed1e     ...4..g(p.".(S..
   a17a4:	3b58 11cc 41ce c36f 25a8 014e 0b4c 5a0c     X;...Ao..%N.L..Z
   a17b4:	2247 b796 aa9f 51bf f322 0629 51d7 091a     G".....Q".)..Q..
   a17c4:	de7a d024 5edb f54a c6f0 d145 67a7 c754     z.$..^J...E..gT.
   a17d4:	d4e7 bab2 7005 6a43 e318 79c7 3e19 0437     .....pCj...y.>7.
   a17e4:	b1b2 7cab 0b72 00bb 43fc 0df5 a13d fc62     ...|r....C..=.b.
   a17f4:	a242 b7a0 2b8e 83e0 89d2 0f17 c29d 8ba2     B....+..........
   a1804:	d261 9b26 2500 efd9 82f5 8259 725a 89f8     a.&..%....Y.Zr..
   a1814:	0a6a 52a9 e119 e355 ba39 f701 e4de 7145     j..R..U.9.....Eq
   a1824:	b41b 2ec4 a6b5 7680 e35b 357c 909f fd68     .......v[.|5..h.
   a1834:	7e0a b4d0 5d27 76d2 4fe0 a966 72e4 3906     .~..'].v.Of..r.9
   a1844:	841f 01da 7852 fda3 4f44 5dbc 1fb1 ba19     ....Rx..DO.]....
   a1854:	5470 dfa0 baf6 c8c0 d940 f12e fe33 9db0     pT......@...3...
   a1864:	aaa3 422a 5431 cbe2 7803 d5e4 efdb 8bbf     ..*B1T...x......
   a1874:	3818 3c60 0604 6117 6edb a10b e48b 48a7     .8`<...a.n.....H
   a1884:	d05b 680f dd85 0952 828d 2d35 0c34 c072     [..h..R...5-4.r.
   a1894:	c903 79f8 58be c0c4 7a2c 086f bc3c 2b80     ...y.X..,zo.<..+
   a18a4:	0f02 43e4 18a2 4c51 07ba 9607 ce96 0796     ...C..QL........
   a18b4:	3b2d 6187 df1f 4242 34d0 1f53 dbd9 2911     -;.a..BB.4S....)
   a18c4:	991f 3cc2 a5e2 39e0 76dc a7df db84 ab91     ...<...9.v......
   a18d4:	e8d8 8fbc f4c1 87ca a49d 9d2d d5cb 7802     ..........-....x
   a18e4:	d0aa 781e 58da d649 be4f 2164 8aaf 20a8     ...x.XI.O.d!... 
   a18f4:	b743 798f 45fb 901c 48be c4b0 a730 4a3c     C..y.E...H..0.<J
   a1904:	0b2b 5627 8967 fc18 ab62 8959 1cbe 1b48     +.'Vg...b.Y...H.
   a1914:	884f 01b5 a2aa b754 179a 87c7 9414 c799     O.....T.........
   a1924:	bcfe fccb 16c5 94fa ac89 731e af27 d9c2     ...........s'...
   a1934:	d16b 70c5 7f3a d2c3 0430 bda1 9bca ad94     k..p:...0.......
   a1944:	dd48 8019 969c b26a f983 95e8 1bba aaaf     H.....j.........
   a1954:	0a7c 8ee0 6ea1 4056 becf dacd d3ca 1c18     |....nV@........
   a1964:	bc73 efae 243e dfb7 cbc7 8432 811d b09b     s...>$....2.....
   a1974:	0e80 1be8 f727 2497 7b0b 4a94 08f0 4ca4     ....'..$.{.J...L
   a1984:	cd40 1325 44fc 17c9 d7de 272f 5569 c262     @.%..D..../'iUb.
   a1994:	8632 f40b 3675 17ce 03e8 1211 abc6 ff4a     2...u6........J.
   a19a4:	2939 6be2 e2f4 9882 7f17 e0cf cf9c acf1     9).k............
   a19b4:	0393 79fe 09be 23fe 3c3f f7ec fe2f c72b     ...y...#?<../.+.
   a19c4:	f56b cfff bfdc b7ae 2c6d a28b efe8 9f39     k.......m,....9.
   a19d4:	c242 344c b080 9329 1db2 a0db 2e40 7647     B.L4..).....@.Gv
   a19e4:	2762 25be 2e56 ac8e 05e1 a091 1888 1802     b'.%V...........
   a19f4:	d400 1225 b7d7 effe 5897 7edf fd80 eb10     ..%......X.~....
   a1a04:	ce29 fdef a724 7d2e 4005 19d9 ee73 b673     )...$..}.@..s.s.
   a1a14:	08c7 3405 defa d5d5 d555 d175 fec1 0ace     ...4....U.u.....
   a1a24:	6dff 4ace 48da ef98 7fc1 d52f 1e48 be17     .m.J.H..../.H...
   a1a34:	19da ac44 7964 8ee3 b513 a645 f2ab 12f5     ..D.dy....E.....
   a1a44:	c4a9 f269 c933 d107 d3fb 94ab 1dd4 d35a     ..i.3.........Z.
   a1a54:	7374 0873 a275 cb63 5f34 eaae db89 ef91     tss.u.c.4_......
   a1a64:	1173 1753 1fc2 6031 6690 c96b d391 38eb     s.S...1`.fk....8
   a1a74:	1d78 cde3 ebff fc8b bc8d a6ce 1fa0 63af     x..............c
   a1a84:	e154 6004 c443 0cff 5d8a 65da 386b eaef     T..`C....].ek8..
   a1a94:	9ffd 5bb4 5ece 0eaf 8a7e 6a8f 8128 cad6     ...[.^..~..j(...
   a1aa4:	15d6 7dad cddd 274e ee72 7465 3051 8b22     ...}..N'r.etQ0".
   a1ab4:	e701 6c49 3f40 b2de 28a8 7abc 7408 5573     ..Il@?...(.z.tsU
   a1ac4:	ab64 193a 2d6d 5e81 35c2 1ad9 b68c ef08     d.:.m-.^.5......
   a1ad4:	5b86 e5c3 68e5 318b bc2f 6724 2da3 3018     .[...h.1/.$g.-.0
   a1ae4:	6102 45b8 1ff8 7b76 828c 3a4a 181a 7b57     .a.E..v{..J:..W{
   a1af4:	a180 cb07 f44b 01ca a473 ccef 8f7c 8fe0     ....K...s...|...
   a1b04:	a55d 4802 e4c7 8390 020b 3729 4a4b b928     ]..H......)7KJ(.
   a1b14:	dcbc ce82 e100 bc0a f4eb 0123 5bab ae07     ..........#..[..
   a1b24:	14c9 3c30 3f2b 5573 799d 65e2 d35a cb8d     ..0<+?sU.y.eZ...
   a1b34:	6cc6 32d5 b2c9 22e9 4f21 f300 9018 4796     .l.2..."!O.....G
   a1b44:	3da6 6f38 d24f 9a73 d23a c50c 1d4b 349e     .=8oO.s.:...K..4
   a1b54:	f904 5679 845c 8b5b 3674 724b 3298 8d3d     ..yV\.[.t6Kr.2=.
   a1b64:	9265 a8c5 a2ce eea7 3dae 3075 2321 beaa     e........=u0!#..
   a1b74:	969a fa05 2c36 599f e80d 6b27 f481 0fa4     ....6,.Y..'k....
   a1b84:	5f06 b68e af60 75f4 4c0a 706e 3c2c 6b6b     ._..`..u.Lnp,<kk
   a1b94:	742f 6eb5 bf23 a27c ac11 acd6 b374 f3d6     /t.n#.|.....t...
   a1ba4:	b50d 2702 6703 e46d 6856 d417 fb39 ca73     ...'.gm.Vh..9.s.
   a1bb4:	c54a 574f 7035 9f9c cb2c ecd9 0882 ce6e     J.OW5p..,.....n.
   a1bc4:	b482 20ca c463 4c5d 60a4 9db8 09bf 66f6     ... c.]L.`.....f
   a1bd4:	febd 13ea 08f1 4053 0075 a856 f28a 0d13     ......S@u.V.....
   a1be4:	9e52 f28a 259f aa31 de5e 5b92 d0e6 7983     R....%1.^..[...y
   a1bf4:	b7f9 bc4b 025d 61f1 a5ad d56e b1ad 0331     ..K.]..a..n...1.
   a1c04:	60f6 3ccc df1e 1532 cd8d a38d 9843 82ef     .`.<..2.....C...
   a1c14:	23a2 67ab d82e 7260 05e5 db9b a5e1 b522     .#.g..`r......".
   a1c24:	6705 d848 5b94 6515 eca2 fc0c 22df 2eae     .gH..[.e....."..
   a1c34:	b13f 06b2 a9a1 e31d 66f5 cf55 fdc3 a168     ?........fU...h.
   a1c44:	0b35 ab28 c24f a563 e297 7a3b 0197 e56e     5.(.O.c...;z..n.
   a1c54:	689e 840c dd7a b3e8 eb69 63b8 58ab 2bfb     .h..z...i..c.X.+
   a1c64:	e269 3aa9 213e 091b 52c0 867d 7950 3bd0     i..:>!...R}.Py.;
   a1c74:	2a6d e5b4 18a0 1507 77b4 6370 5a53 705d     m*.......wpcSZ]p
   a1c84:	08fa e26d fc01 ce90 5f5f 438f eee2 a8bf     ..m.....__.C....
   a1c94:	e873 d6ee 011e 927d 09e7 b759 7c60 0721     s.....}...Y.`|!.
   a1ca4:	cbe7 02c3 0a4f b860 8c63 6cd6 13ca 8049     ....O.`.c..l..I.
   a1cb4:	1941 e448 c456 aed4 a21a 40ac 03f2 6878     A.H.V......@..xh
   a1cc4:	a278 55f5 4381 29e4 6870 c30e 934c 022c     x..U.C.)ph..L.,.
   a1cd4:	f0c8 d719 4f69 f99b abf8 de3c 721e 5197     ....iO....<..r.Q
   a1ce4:	09fe fb24 22c1 66cd e713 d7cd 144b 8984     ..$..".f....K...
   a1cf4:	82f5 3aa1 e4d2 dbe2 38b2 f88b 10f1 c2a8     ...:.....8......
   a1d04:	325d 91b6 50df 9f4a 0beb b910 67ad da0a     ]2...PJ......g..
   a1d14:	c730 f9eb 991c f40f 8824 33e6 0b78 4079     0.......$..3x.y@
   a1d24:	7c6f f9c5 4002 c394 558a 54aa 49c6 7ddc     o|...@...U.T.I.}
   a1d34:	fafd 791c 4691 01da 3672 18aa 4fda 273d     ...y.F..r6...O='
   a1d44:	c222 f9c3 c385 14f4 e0a7 0134 7f32 571b     ".........4.2..W
   a1d54:	097b 0433 fbcb f42d 24c2 4c44 21b3 89ea     {.3...-..$DL.!..
   a1d64:	70e1 619d aa95 4e15 3241 cf4f 2733 61bd     .p.a...NA2O.3'.a
   a1d74:	7940 9aa6 f34e 0a78 8b98 cc02 0328 6a38     @y..N.x.....(.8j
   a1d84:	2ce1 c4be aa01 f27c 85f5 3a32 29d4 17d2     .,....|...2:.)..
   a1d94:	1704 58ba 4924 e4f6 48b7 bd3d 4f53 516f     ...X$I...H=.SOoQ
   a1da4:	f4c6 f39b 4ef6 6c6f 0fb4 f2e2 5280 0f61     .....Nol.....Ra.
   a1db4:	b01f f33b 4997 e2be e058 6696 5a1b 23f7     ..;..I..X..f.Z.#
   a1dc4:	4fa9 7fa4 d244 b43e 038a 4e9e 1732 7cc2     .O..D.>....N2..|
   a1dd4:	bd7e cf64 25b8 f29a 9ad8 286d c3e1 244c     ~.d..%....m(..L$
   a1de4:	7597 7f05 9244 c63f ccc8 5fa4 5e6f 4c65     .u..D.?...._o^eL
   a1df4:	84eb b481 5f92 91f1 90bf 0086 3a56 d12f     ....._......V:/.
   a1e04:	45a5 4652 95f2 ee40 2902 a047 b82f 8c02     .ERF..@..)G./...
   a1e14:	25e8 fba9 0f5e 116d 3a91 d9de 6259 1c1f     .%..^.m..:..Yb..
   a1e24:	39e5 91ec 971c 8fc3 fc4c 8597 349f 11d9     .9......L....4..
   a1e34:	db07 1649 64c4 58aa a8c5 c5b1 1f90 f17e     ..I..d.X......~.
   a1e44:	7599 482d 2a75 a646 ba98 be2a e0a5 ddb1     .u-Hu*F...*.....
   a1e54:	eaf1 c8cf 0786 6c87 5446 2318 77ff 69b5     .......lFT.#.w.i
   a1e64:	a033 da38 e35d f244 677a c747 bb64 0f6f     3.8.].D.zgG.d.o.
   a1e74:	2147 69b0 2696 4d79 b9c3 bdf3 6b5d 6eff     G!.i.&yM....]k.n
   a1e84:	0ad0 cde3 3c61 d473 837e 41c5 6b5d 8515     ....a<s.~..A]k..
   a1e94:	7252 038e 13b6 e0b8 a7dd f723 f0c6 de21     Rr........#...!.
   a1ea4:	e9d7 4f8a 3f40 3ae6 28f1 963e 1298 a380     ...O@?.:.(>.....
   a1eb4:	45e8 1f1d 468c a4d1 71e8 b7dc 9269 d066     .E...F...q..i.f.
   a1ec4:	0220 acbc 0ef5 b6d9 5f07 61d5 abd1 66d7      ........_.a...f
   a1ed4:	62f6 7b33 fbdc 2a3c fec8 0da2 9cc7 a72b     .b3{..<*......+.
   a1ee4:	68af ab07 f5ba 159a 6d32 a696 f932 00bf     .h......2m..2...
   a1ef4:	491e 032f a533 14c7 9b4d 6680 6c94 7f66     .I/.3...M..f.lf.
   a1f04:	5ba3 59be ba02 abea 59e9 2a1f 8b3e fd97     .[.Y.....Y.*>...
   a1f14:	6ff7 287b f3ab 9e82 4f9f 2dbc c1f3 e5eb     .o{(.....O.-....
   a1f24:	2421 1e9b 7266 fec3 3457 595e 9aed d6b1     !$..fr..W4^Y....
   a1f34:	c48b eace f3ff 7de6 4685 9872 8b71 794a     .......}.Fr.q.Jy
   a1f44:	d812 af4d d856 a9ab 0bd9 bbdd 84e0 c176     ..M.V.........v.
   a1f54:	bd9e a609 32ce 8eca 83cb d9de 3208 746d     .....2.......2mt
   a1f64:	b850 b7b7 23a8 1b97 d54e 3698 f722 a784     P....#..N..6"...
   a1f74:	7d9c 7e3e da8a 8202 0d0d 9a0e 6544 e7ce     .}>~........De..
   a1f84:	061a 25be a74c 69fa 6591 c605 b170 8be8     ...%L..i.e..p...
   a1f94:	2e46 0c75 2822 4123 2b08 375a 9ae4 c625     F.u."(#A.+Z7..%.
   a1fa4:	93dd cdc2 33b9 f3b9 e65b cd08 60b4 a9b2     .....3..[....`..
   a1fb4:	d1f2 f406 9716 69a7 22fe 6381 a6a5 5bb6     .......i.".c...[
   a1fc4:	c378 45a2 cc32 6666 9e7d 265e 1e33 84e2     x..E2.ff}.^&3...
   a1fd4:	870b d303 99b1 de94 4061 b568 35a7 d106     ........a@h..5..
   a1fe4:	04d2 465a 476b 6ba3 51ca fd1d a250 cb8c     ..ZFkG.k.Q..P...
   a1ff4:	c698 d691 00d5 2a25 12a3 05b0 1c1c 3467     ......%*......g4
   a2004:	2275 a9ef e9d7 0fa2 01b8 a105 ac6b eb9d     u"..........k...
   a2014:	b779 9eb9 1fbc 7695 7dcb 8f5d 26c0 26a0     y......v.}]..&.&
   a2024:	40d5 1b33 a237 1e15 88f5 1d17 414b 03e3     .@3.7.......KA..
   a2034:	340c 35aa f099 f534 3873 e9c0 23b4 79ff     .4.5..4.s8...#.y
   a2044:	bd0e f330 8a75 51f5 0e93 4e48 e274 3cb0     ..0.u..Q..HNt..<
   a2054:	09c2 e51f 46e3 2885 6b8f 9134 7a9b c4a3     .....F.(.k4..z..
   a2064:	70c1 334b 0582 749e af6a 826d 60f9 1fd4     .pK3...tj.m..`..
   a2074:	7692 a265 1900 2793 60ba 9fa4 7294 d1c5     .ve....'.`...r..
   a2084:	aaa6 838e 1eb0 87f7 3b3b 4edb b45d daa5     ........;;.N]...
   a2094:	71b5 3cc0 11a2 1274 74eb 18d6 dec1 e88c     .q.<..t..t......
   a20a4:	d1d4 dea1 2270 e132 efd7 8e42 f3e6 acfe     ....p"2...B.....
   a20b4:	dfea 1535 779f 3bed af55 bb3c edae 61f2     ..5..w.;U.<....a
   a20c4:	54ed 7027 f15f 8e87 f71d 9b8b d397 1f69     .T'p_.........i.
   a20d4:	3543 9bd6 8eb0 dd74 7f00 bc59 9555 c61d     C5....t...Y.U...
   a20e4:	931f 588a 10e2 03a7 e65b 9d02 dd5b 03ae     ...X....[...[...
   a20f4:	5700 91f6 2bad 7150 e98f b901 7ba3 6c1f     .W...+Pq.....{.l
   a2104:	2232 8eb0 33e0 bfdb b9d4 d2d6 adce 51ad     2"...3.........Q
   a2114:	af46 5f0b 0d0b f202 a238 045b 98e6 b430     F.._....8.[...0.
   a2124:	d835 33b1 51c0 4e41 ccea fde7 f9c8 03de     5..3.QAN........
   a2134:	2a58 03c7 720c dbb4 1735 7948 e9a0 149a     X*...r..5.Hy....
   a2144:	a6c8 7763 287d faf2 efc4 ba60 5df4 49d3     ..cw}(....`..].I
   a2154:	a056 ae98 cb23 5149 c0d7 154e 9293 a2d1     V...#.IQ..N.....
   a2164:	6837 a364 4fcd 8ec7 37cb 315a d375 dbbe     7hd..O...7Z1u...
   a2174:	1ea1 63ec 330d 07a8 01bb 0258 8679 b784     ...c.3....X.y...
   a2184:	fdf6 fb33 e1e3 56b5 e931 4c62 996f 9506     ..3....V1.bLo...
   a2194:	a4a5 e23a b30d acf0 2add 8f1f aace ddf6     ..:......*......
   a21a4:	e545 9049 65c7 01be bb6e e066 add9 b033     E.I..e..n.f...3.
   a21b4:	2fb1 013c 3b3b 282e 68b0 d3e2 e113 5be4     ./<.;;.(.h.....[
   a21c4:	d8b4 e778 b733 ca57 7fae 31b2 7b0f ce65     ..x.3.W....1.{e.
   a21d4:	29e2 a98a 2cf8 057e d587 a161 de21 65ce     .)...,~...a.!..e
   a21e4:	d89f 2bbe d967 9838 4c8e 2472 d7dc 2cee     ...+g.8..Lr$...,
   a21f4:	9217 eebb 44a0 08f4 6b6f 13de 8adb 23fd     .....D..ok.....#
   a2204:	7869 7b32 f7cd d63d dcb8 31fd 281e 2372     ix2{..=....1.(r#
   a2214:	7492 155e 634d fed8 3c71 86f1 047b 2480     .t^.Mc..q<..{..$
   a2224:	1925 26dd b948 0255 3553 7c03 8202 904b     %..&H.U.S5.|..K.
   a2234:	dce4 8476 3033 ade3 67c4 3b3b bc2b 7fb5     ..v.30...g;;+...
   a2244:	0792 2de4 ab23 ed9c bc29 5433 c505 61fb     ...-#...).3T...a
   a2254:	004f ecef 7e7e f8d6 febc d4c4 37a0 8347     O...~~.......7G.
   a2264:	af89 c89c 64b9 44e3 162a 1039 cb32 8589     .....d.D*.9.2...
   a2274:	2871 9501 8de4 8cc4 0e1e 258b 5d50 1456     q(.........%P]V.
   a2284:	b2ee 587f 8c6b da9e 3235 9be2 87a8 04b0     ...Xk...52......
   a2294:	a1d6 30eb d405 47fe 6eca 6274 4a7e 1c29     ...0...G.ntb~J).
   a22a4:	191a b160 00d7 86b5 ddea fa22 9332 c928     ..`.......".2.(.
   a22b4:	2c34 8c5b dc55 6bb5 1acc a256 422e fbaa     4,[.U..k..V..B..
   a22c4:	ea79 4d3f 0a29 b051 3fa1 d3ec e79c cd22     y.?M).Q..?....".
   a22d4:	e5d1 c926 90b1 f244 6083 c51c cd4e a54e     ..&...D..`..N.N.
   a22e4:	1059 37f4 8a54 c81d 9794 2e05 605a 9e9a     Y..7T.......Z`..
   a22f4:	58f3 bd14 7da1 9e6a 9374 3590 d909 8bb0     .X...}j.t..5....
   a2304:	23b5 42f2 411d c3b5 020c b0db ede3 ee08     .#.B.A..........
   a2314:	0007 fd84 b9ba c8d0 f406 78f8 0937 2c74     ...........x7.t,
   a2324:	6c77 5863 8942 9800 cfe3 4e1d 431f 11a9     wlcXB......N.C..
   a2334:	4f33 5257 70b6 eac6 2c11 e636 9539 be2f     3OWR.p...,6.9./.
   a2344:	66f5 1c73 28da be9e f8d3 0a51 d38b c461     .fs..(....Q...a.
   a2354:	190e 2274 d7db 06e2 3f0c 9188 9d07 d67a     ..t".....?....z.
   a2364:	7a1b d7e1 f10d 6531 312f 31da 6371 7d66     .z....1e/1.1qcf}
   a2374:	b52e 10e3 0847 8923 e355 cd5d 3d95 f85c     ....G.#.U.]..=\.
   a2384:	2589 a373 ea85 d6b1 7f65 9018 7e33 d4b9     .%s.....e...3~..
   a2394:	30ec 8784 1db0 8e95 5404 3131 22a5 ba98     .0.......T11."..
   a23a4:	5799 46eb 382d 40de 6fb8 6fb5 92b6 46ac     .W.F-8.@.o.o...F
   a23b4:	1867 73a8 9d62 f684 0372 6489 f7bf 630b     g..sb...r..d...c
   a23c4:	6f7a 5d58 ecf7 44f4 21d9 d5d8 5fd0 a708     zoX]...D.!..._..
   a23d4:	5da8 1c79 a298 aa5c a6a3 2c5e 29dc caea     .]y...\...^,.)..
   a23e4:	5134 19f3 87f6 6362 dd57 18c6 91ac 46b3     4Q....bcW......F
   a23f4:	a62d adb6 85ee a3a3 5528 6cc1 e5b6 a2db     -.......(U.l....
   a2404:	8b3c 11b1 f71f 4d13 11a8 db81 c9ec eb81     <......M........
   a2414:	41c5 476d dbd8 20df 0dad 1ef5 4210 09f9     .AmG... .....B..
   a2424:	5ced 8202 7ecb 1922 dbf8 9932 3e16 d8ba     .\...~"...2..>..
   a2434:	80df bb1a 07c0 82b4 323a fe2a 79e8 a55a     ........:2*..yZ.
   a2444:	c178 e571 2c97 d5a3 cd21 5992 175a f3e5     x.q..,..!..YZ...
   a2454:	19ea e86d 4308 488b 6794 0903 c1bb 0fe4     ..m..C.H.g......
   a2464:	d0f2 bb2c 000f 72d6 66c9 a8bf 87bb 5f52     ..,....r.f....R_
   a2474:	3843 0edf f90b b0e5 e9d0 e56f 293c e8c8     C8........o.<)..
   a2484:	7012 034a bc4e 8ae6 a972 92f6 559e 63d1     .pJ.N...r....U.c
   a2494:	7a47 d6f2 52d6 39b0 6613 09da bae1 5723     Gz...R.9.f....#W
   a24a4:	8c32 1273 6165 1468 570a 0d40 4921 6722     2.s.eah..W@.!I"g
   a24b4:	4e90 71ab ee64 ec56 756f afb1 5aaf ed10     .N.qd.V.ou...Z..
   a24c4:	4391 8ed5 12bb 70a4 895b 5d63 2034 afe3     .C.....p[.c]4 ..
   a24d4:	ec4b c188 973c c3a4 73e1 6af7 6633 31a3     K...<....s.j3f.1
   a24e4:	f8c4 64a7 efad 6cc2 b747 7def e183 9014     ...d...lG..}....
   a24f4:	24bc 9159 9528 22e8 f48e 9981 7b0a bd74     .$Y.(..".....{t.
   a2504:	654d 9183 9099 187d d17a deb7 06f7 92c4     Me....}.z.......
   a2514:	fee9 ce94 141d 0966 65d4 61d5 8e31 5291     ......f..e.a1..R
   a2524:	e7e0 cc7e 9d65 e8fe 0a49 79c4 154c 4a27     ..~.e...I..yL.'J
   a2534:	5d94 a450 f515 0716 78ea b629 f5ad b9ba     .]P......x).....
   a2544:	b789 4cf5 42e3 7be8 f42d e7d2 f880 84e8     ...L.B.{-.......
   a2554:	f6a3 81c6 1b7b 14c6 3c82 ec04 1841 9bbe     ....{....<..A...
   a2564:	976e 2625 e202 b22b 13cb 9216 2714 322d     n.%&..+......'-2
   a2574:	5a81 8b45 119e 2b5b ee81 075f f720 5ac0     .ZE...[+.._. ..Z
   a2584:	a845 a44c d323 ef8f 8dd1 bca4 efa0 b454     E.L.#.........T.
   a2594:	c40c 7213 dc59 436a 1e42 b210 d7b7 3502     ...rY.jCB......5
   a25a4:	76ac b076 6dd9 7eb4 4958 f264 0a4c 57e1     .vv..m.~XId.L..W
   a25b4:	a4bb e4ea e207 2500 5a05 406f dbbe 056a     .......%.Zo@..j.
   a25c4:	301c bec0 6c7e 12ac 2c5f 1bdd 080c 368a     .0..~l.._,.....6
   a25d4:	4bdc 5b6e cc02 a6c3 075f e139 4664 e0a6     .Kn[...._.9.dF..
   a25e4:	6d1a 06c3 51a3 928a 2404 520c f89b f572     .m...Q...$.R..r.
   a25f4:	eae2 ea16 8eda bf6e 09a4 b630 f6bb 4f13     ......n...0....O
   a2604:	8db7 a2a5 d1b5 d1fd 2292 5e58 43c3 21a8     ........."X^.C.!
   a2614:	b37f a674 ab3f 9ffa 8110 aa09 2035 547f     ..t.?.......5 .T
   a2624:	28e6 7830 6191 b4b9 4b3e 673c ddea ef84     .(0x.a..>K<g....
   a2634:	1cdc 7b00 f26c 208a 48cd 2658 f2bc 4075     ...{l.. .HX&..u@
   a2644:	941f 8d1a e8ce ece2 8705 3ed4 3fa3 bceb     ...........>.?..
   a2654:	8d40 157e 094e fb3e f6ed 9771 c75a 9a0b     @.~.N.>...q.Z...
   a2664:	b9ac b01d 1032 e52a d54a 1eba f0c8 897b     ....2.*.J.....{.
   a2674:	5768 5a2d 3163 f340 3ec1 f050 f9d6 bb23     hW-Zc1@..>P...#.
   a2684:	8579 be71 af25 c178 21f5 95fd c3fe 631a     y.q.%.x..!.....c
   a2694:	792c a58c 734d e0be 372a 4f5e 73ca 7cd6     ,y..Ms..*7^O.s.|
   a26a4:	35b7 2c3c 62dc d70b 921a 977e 6dfa a2ca     .5<,.b....~..m..
   a26b4:	82ac e5c2 01b9 58a4 62d6 fb7a bbb2 36b7     .......X.bz....6
   a26c4:	7fff 3deb fec5 5bed 2502 fec4 7a7f 482a     ...=...[.%...z*H
   a26d4:	e3c1 e353 ce6f b597 afca 1bc8 e58d c09e     ..S.o...........
   a26e4:	d566 aa14 41e3 f301 9cac 1035 d8b4 1a6e     f....A....5...n.
   a26f4:	9994 c4bb 4727 5925 6e13 9a17 826b a537     ....'G%Y.n..k.7.
   a2704:	c21d 5199 3aa5 e207 54dd 73de 9412 32ec     ...Q.:...T.s...2
   a2714:	fb8a 7439 5e26 af6b 9579 b92a 6c81 3284     ..9t&^k.y.*..l.2
   a2724:	e495 fbda ee68 5cb0 c9f3 fcc3 9cb5 7e93     ....h..\.......~
   a2734:	1d8a 1bdc 76b3 bbf1 ac9a fcfe bc6c 183b     .....v......l.;.
   a2744:	6f0c fa6e 67f8 219c f1f9 f53a fde5 1a49     .on..g.!..:...I.
   a2754:	a788 19f2 c415 47d1 a06b b699 4c15 6acc     .......Gk....L.j
   a2764:	539f c4d5 60ac b062 a604 ad1d d18e 524e     .S...`b.......NR
   a2774:	fbcf c953 257e 5bad 5667 4d4b b79a a8ce     ..S.~%.[gVKM....
   a2784:	aa9d 3113 f68a 4142 9588 9ad6 d33f e3e0     ...1..BA....?...
   a2794:	0bcd ee8d f135 66c7 0d8f 24eb 7ee8 261c     ....5..f...$.~.&
   a27a4:	dd35 93cd 384b 4e91 2b50 f445 457a 1f90     5...K8.NP+E.zE..
   a27b4:	2eb5 8f2e e38a cd63 115e 5dd3 227e 8b13     ......c.^..]~"..
   a27c4:	95c0 0164 d999 4537 2215 2f5b fb38 5161     ..d...7E."[/8.aQ
   a27d4:	fac7 a0c6 7d8b 34e7 2c6c e5cc 670b 852f     .....}.4l,...g/.
   a27e4:	373c 6955 7e97 54a7 4d6b 289e c306 1b52     <7Ui.~.TkM.(..R.
   a27f4:	fcb1 595c d7a3 8c3e 1e80 c943 d99c 707f     ..\Y..>...C....p
   a2804:	97b0 3558 bc6a 021c 08a5 53c4 4f54 4eea     ..X5j......STO.N
   a2814:	239a 18a4 682c 8dbc c6cb 5126 03cc d8c3     .#..,h....&Q....
   a2824:	b5f3 cf0e 2d6e 1156 b275 c4eb cad2 2add     ....n-V.u......*
   a2834:	28aa 97b6 9d0f e1ce 149e f92b 8840 0a7f     .(........+.@...
   a2844:	3a8b cfdd 7414 d54d 9e1e d947 94d1 ef36     .:...tM...G...6.
   a2854:	ed5c 7d5d cf6c be09 8a18 d546 c476 a3ef     \.]}l.....F.v...
   a2864:	b800 5f55 c587 d42e 8eb1 cf44 7f18 56e7     ..U_......D....V
   a2874:	474f 1973 1473 9c49 e145 57eb f1e1 79c2     OGs.s.I.E..W...y
   a2884:	5d01 f99d f233 f7c5 561a 2e64 7856 08d8     .]..3....Vd.Vx..
   a2894:	7df4 8079 4c25 686d 691e 1cde 4229 08c3     .}y.%Lmh.i..)B..
   a28a4:	9507 70a2 7d96 805b 0ab1 03d0 254c 61c7     ...p.}[.....L%.a
   a28b4:	afaf 3641 e88b dd2f 5187 1aec 2ce0 1544     ..A6../..Q...,D.
   a28c4:	57ac 283d c88f cd7b a2d3 c3a6 d580 e36b     .W=(..{.......k.
   a28d4:	dbae 292c 296c a340 f072 2e3a 5a89 c405     ..,)l)@.r.:..Z..
   a28e4:	f2a3 51db 3c7a 1522 2f73 8a8a afc9 2674     ...Qz<".s/....t&
   a28f4:	6a85 30b2 5be9 7d5d bd28 627d 4fea 3468     .j.0.[]}(.}b.Oh4
   a2904:	31ee f06a 3c28 1be3 5212 75ae 0dc5 ab2d     .1j.(<...R.u..-.
   a2914:	0e67 9eff 2993 df24 d367 4531 9f09 f1a7     g....)$.g.1E....
   a2924:	0a4b 7448 6ccf 1ba0 48b7 4923 5ea9 7af0     K.Ht.l...H#I.^.z
   a2934:	0b71 20b2 4056 624b a8af 64fa 1929 5cca     q.. V@Kb...d)..\
   a2944:	a28e 5ee4 4aa0 b19b 61fd 22cb e04f 80b0     ...^.J...a."O...
   a2954:	9a59 a7e8 b79e f5e5 d0a4 a543 9591 e859     Y.........C...Y.
   a2964:	11a6 8d0f b622 dd86 e607 ff41 a770 a974     ....".....A.p.t.
   a2974:	a348 af37 3d41 5fb1 052d 1a96 a6cd 2fad     H.7.A=._-....../
   a2984:	501b 5381 5399 ab35 e9a0 a9dd d531 0a33     .P.S.S5.....1.3.
   a2994:	e5a7 7464 d6e1 465d 35c4 be16 e9b0 e7b5     ..dt..]F.5......
   a29a4:	329d 9685 a4fa 6fd6 4642 6716 9223 c3b4     .2.....oBF.g#...
   a29b4:	dfc4 885c 94b9 ab5a db77 d72a ab27 0334     ..\...Z.w.*.'.4.
   a29c4:	3df0 8a93 ba4b bf3f 8eba 0907 f4a0 c284     .=..K.?.........
   a29d4:	c619 1dfd 17f1 44ec a04e f3e7 c603 2d70     .......DN.....p-
   a29e4:	9449 2b70 5224 992e 6549 a2e6 53c0 5048     I.p+$R..Ie...SHP
   a29f4:	8a40 435b 2b0a e855 fd74 f132 a675 9748     @.[C.+U.t.2.u.H.
   a2a04:	5614 c886 292a c370 6106 bd4e 0775 e516     .V..*)p..aN.u...
   a2a14:	14d6 84fc fca0 f907 6041 c4e0 8d23 c39b     ........A`..#...
   a2a24:	7775 a414 efdc ef21 ed8a aee6 8ab6 cc00     uw....!.........
   a2a34:	796b 19af f586 6cec 9d15 6cea 9d16 4a3a     ky.....l...l..:J
   a2a44:	e39a eb40 8b4e 36be eb88 36ba 7392 2b5e     ..@.N..6...6.s^+
   a2a54:	34f7 5f94 3571 8d4e b87a 0392 ac31 2fc9     .4._q5N.z...1../
   a2a64:	e32f 23f2 4fea 6911 71d5 de52 68dc c45f     /..#.O.i.qR..h_.
   a2a74:	7ccf fc92 3ae8 db8b 4976 0987 2485 bc26     .|...:..vI...$&.
   a2a84:	dd6e 9478 865d 5b3c 775d e596 26ae fa75     n.x.].<[]w...&u.
   a2a94:	6ee5 d093 d791 0abe 470a e51b 30f4 9d9c     .n.......G...0..
   a2aa4:	749d 2ab3 450a 3401 a3f9 5bb8 6ed4 8a9f     .t.*.E.4...[.n..
   a2ab4:	f079 64f7 c2ed 4353 e355 4a40 736c 1c97     y..d..SCU.@Jls..
   a2ac4:	0143 d7af 2052 a4b3 34e2 e809 5912 c713     C...R ...4...Y..
   a2ad4:	1c15 d59c 8b7e 34a0 b244 5cbc dac8 752a     ....~..4D..\..*u
   a2ae4:	d547 9131 0d40 313b f224 a3d3 78ec dab4     G.1.@.;1$....x..
   a2af4:	d9d9 3b30 bb40 ad77 2dff cf83 a39a 5f54     ..0;@.w..-....T_
   a2b04:	5c69 33f2 21fa 90b1 1bed 6ec5 6bea da21     i\.3.!.....n.k!.
   a2b14:	faa2 c24d 16bc 90e2 9768 8af6 de41 12a3     ..M.....h...A...
   a2b24:	ac7d 0c2b 3a59 6b24 4173 6d34 da50 c33e     }.+.Y:$ksA4mP.>.
   a2b34:	f693 03f6 e1a2 0697 fe22 6ccb de5d cf83     ........"..l]...
   a2b44:	109d 1230 4a69 9bb4 ee12 154c a406 ae3d     ..0.iJ....L...=.
   a2b54:	a2f0 454e 68ab 3a8d 1234 9954 73f4 7840     ..NE.h.:4.T..s@x
   a2b64:	1852 21d4 917e 4c21 471a 2ffe 63da 17e8     R..!~.!L.G./.c..
   a2b74:	5f12 2c09 3db2 ef60 c003 19ba 1869 bd9b     ._.,.=`.....i...
   a2b84:	9cdb da1b 63be e239 f2dc 2e63 7b6a fd5b     .....c9...c.j{[.
   a2b94:	4cc2 2740 9713 7632 d601 9d89 f119 51e7     .L@'..2v.......Q
   a2ba4:	6fb1 1b59 ea16 385e 7e06 c808 0374 156f     .oY...^8.~..t.o.
   a2bb4:	a60d e77d 9725 182c 5861 7ce3 2596 2796     ..}.%.,.aX.|.%.'
   a2bc4:	f426 b2eb a00b a802 138b b4c8 1be3 a31f     &...............
   a2bd4:	2266 8353 b6f2 1d0a 9c4e 9327 c5d4 9974     f"S.....N.'...t.
   a2be4:	abc6 c614 311a 984e 5b3a fd01 1534 1550     .....1N.:[..4.P.
   a2bf4:	53c6 e329 e70b f122 c69b e454 33c5 0d16     .S)..."...T..3..
   a2c04:	d706 6e7e 97c0 500c 300c 1d1f 8107 b8f6     ..~n...P.0......
   a2c14:	e4a8 36f9 36b7 9daa 4c1b 2e8d c095 52c7     ...6.6...L.....R
   a2c24:	4113 f21f 02a8 c4d9 a2a2 0d76 5e65 4d70     .A........v.e^pM
   a2c34:	6ccd d71a d7da 7c68 ba61 da76 b021 8874     .l....h|a.v.!.t.
   a2c44:	fbcd 09a6 0f6d c9a3 6160 05cd e1e1 9e96     ....m...`a......
   a2c54:	7f6a 6753 482c d3fb cba2 62cf cb0d c540     j.Sg,H.....b..@.
   a2c64:	995b 73be f1ae 62ae dd7a 4c1f d0ea 12da     [..s...bz..L....
   a2c74:	6f3f 94c8 9684 e098 a937 46ec 179e 4f99     ?o......7..F...O
   a2c84:	5e90 975e 7a65 a3c6 b2b6 60ff 8f65 e9f3     .^^.ez.....`e...
   a2c94:	8d02 39c9 863b b1b6 be73 6873 0c49 9129     ...9;...s.shI.).
   a2ca4:	d870 4eb5 296f 3bd8 c812 9fa2 f949 c240     p..No).;....I.@.
   a2cb4:	d25c 44e6 cc5e 0068 470c f1a5 615a 5184     \..D^.h..G..Za.Q
   a2cc4:	08d0 46a9 9fc3 90fe 5a38 b4a8 add8 1f0b     ...F....8Z......
   a2cd4:	8d71 72ac 0d1c 3894 67ea 28f8 d45b 819f     q..r...8.g.([...
   a2ce4:	fc39 94ce 3fc1 4081 5241 0142 82fb ca89     9....?.@ARB.....
   a2cf4:	e118 82b9 ce5e 9d0b 5050 a8c2 471e 3700     ....^...PP...G.7
   a2d04:	7efd 368d ac20 d9d7 97ef 4f62 44a0 07f5     .~.6 .....bO.D..
   a2d14:	9b3f 6154 b22c 1c49 cc52 cb23 fe84 06b7     ?.Ta,.I.R.#.....
   a2d24:	fdca e5be e64d ff37 2b88 3049 3150 5e46     ....M.7..+I0P1F^
   a2d34:	35b2 7fce f274 096b 3ca8 842d b296 c763     .5..t.k..<-...c.
   a2d44:	1ef8 512d f8f7 2d56 9bbf 6ce8 7804 32fb     ..-Q..V-...l.x.2
   a2d54:	6073 2443 38d7 6a30 6e91 e67d c054 c61a     s`C$.80j.n}.T...
   a2d64:	04f9 e50a 29e2 5505 6c0b 6485 21a0 e86b     .....).U.l.d.!k.
   a2d74:	7d0f cce1 67ee add3 76a4 9339 62e9 84e4     .}...g...v9..b..
   a2d84:	cc74 6e6f 71f2 313d 05fb da30 5b80 0996     t.on.q=1..0..[..
   a2d94:	c083 1ade ed75 b106 ab1c ec41 d4ec eefb     ....u.....A.....
   a2da4:	2c78 a4bb 79ba 62ad d9bc e0da 2a88 11fa     x,...y.b.....*..
   a2db4:	244d 583c 65ee 948d 6ea9 d0a0 19e9 c41e     M$<X.e...n......
   a2dc4:	33d3 1c23 6b46 1429 b3fc 7783 05a3 7bce     .3#.Fk)....w...{
   a2dd4:	810e 54bb ed64 4c55 0f6e 07f6 62a3 5f1b     ...Td.ULn....b._
   a2de4:	7a4a a099 050f 3401 1041 3272 b6b6 778f     Jz.....4A.r2...w
   a2df4:	988d 0366 0fde e578 48d8 1401 0b9b 0d9b     ..f...x..H......
   a2e04:	ad49 4f2e 0229 0337 0d24 5d05 65ea 2f84     I..O).7.$..].e./
   a2e14:	f2e2 370a 2930 0c70 4230 658c 5416 696b     ...70)p.0B.e.Tki
   a2e24:	de9b 30c9 2c7f e119 ca1a 7096 a304 4611     ...0.,.....p...F
   a2e34:	1b56 12a5 c091 a6dc 106c aeab de5c bdd1     V.......l...\...
   a2e44:	eabf 2108 60ae 5d44 9c2d c491 9375 7196     ...!.`D]-...u..q
   a2e54:	571a d9ea 14a3 1650 20cc f0d5 a60e 59a8     .W....P.. .....Y
   a2e64:	33b7 aab8 3d39 fbdf 067c 16db 0e2e 5f0c     .3..9=..|......_
   a2e74:	7b73 e7e8 e58f 4d61 d357 a40d 747c 723c     s{....aMW...|t<r
   a2e84:	9809 edba 9837 2727 8e3f 1178 0419 63f3     ....7.''?.x....c
   a2e94:	3409 d081 8809 02a9 13cb 94ff 2862 48a8     .4..........b(.H
   a2ea4:	f21d d266 23dc 14e5 0f4a 1460 c1f3 e6c3     ..f..#..J.`.....
   a2eb4:	f8ac 4731 02f9 05f7 63d9 9a7e f3bc a255     ..1G.....c~...U.
   a2ec4:	6afe cfa2 07da aad2 aa6e c07d d0d8 db5f     .j......n.}..._.
   a2ed4:	acee a140 347c 0747 2375 8364 dd54 797e     ..@.|4G.u#d.T.~y
   a2ee4:	ea54 8eca 5aa3 55cc 411d 5538 968f 8e6d     T....Z.U.A8U..m.
   a2ef4:	4481 24f5 49be 8c15 20d1 b426 d91b 459f     .D.$.I... &....E
   a2f04:	0b3a 7707 4e06 ba0d b5dc 171f a79b c02e     :..w.N..........
   a2f14:	8c1d 86f3 6e99 b799 ef00 ea1d 0248 ba88     .....n......H...
   a2f24:	235f cae9 1a49 a523 fb07 36b7 8c1b afd6     _#..I.#....6....
   a2f34:	ebb9 5178 e361 87f7 30e1 cd18 b2b0 f725     ..xQa....0....%.
   a2f44:	14b3 bc14 5d9b 13c4 1279 5ba1 9bf0 6d9b     .....]..y..[...m
   a2f54:	d5ec cdcd 4955 b3dd 3806 b093 ef5a 7f26     ....UI...8..Z.&.
   a2f64:	e2ae 22ac 9a2f 4059 dc6e 8c2b 2565 c201     ..."/.Y@n.+.e%..
   a2f74:	e6b7 0189 2d98 ad5c cae4 2c1d 8219 3c14     .....-\....,...<
   a2f84:	011f 9951 bd18 6e83 29c7 497c 018a 12eb     ..Q....n.)|I....
   a2f94:	48fb e05a e315 19b5 af0f df12 a379 194b     .HZ.........y.K.
   a2fa4:	f45b acba 643b 74af 51a1 d7ec fc0d 2852     [...;d.t.Q....R(
   a2fb4:	21ca 50d6 748a 1579 629d b125 35dc 74cc     .!.P.ty..b%..5.t
   a2fc4:	2a64 6691 7c9e 60dd 2328 7000 ef95 26e6     d*.f.|.`(#.p...&
   a2fd4:	17c3 045a 62bc 38a2 7547 ab03 d408 48e9     ..Z..b.8Gu.....H
   a2fe4:	15a1 43b9 542b 34c1 8c5e 91df 8a32 3141     ...C+T.4^...2.A1
   a2ff4:	b6f6 6d38 ada1 21ed bf5e 9fa1 9be9 219b     ..8m...!^......!
   a3004:	f8fa f38b 7d1a c0c4 1187 11e0 4e14 148f     .....}.......N..
   a3014:	41c7 ac47 cabc e522 a443 3f4a b326 cbb7     .AG...".C.J?&...
   a3024:	6f38 222b df5a f70c 7d22 ae7c e722 b03b     8o+"Z..."}|.".;.
   a3034:	62b6 ad1a 8938 25ce d2a9 22b1 08c2 6166     .b..8..%..."..fa
   a3044:	4bba 1371 57d1 d225 13c0 b0fe a11f 5225     .Kq..W%.......%R
   a3054:	5f28 99f0 8136 5b2a 6e17 3249 9f79 fa60     (_..6.*[.nI2y.`.
   a3064:	1558 4784 462e 2867 ead2 9d80 6aa6 1d8b     X..G.Fg(.....j..
   a3074:	4410 cd3d 86e9 4c41 9fd1 2c12 5a41 5767     .D=...AL...,AZgW
   a3084:	e807 3cf0 7199 7731 ae1e fdfb a46c d562     ...<.q1w....l.b.
   a3094:	e9af 1f52 a383 4f6f e377 38ba a74b 8e26     ..R...oOw..8K.&.
   a30a4:	df3d 4c9c 51a5 38d6 9b96 958e 61b8 ceb3     =..L.Q.8.....a..
   a30b4:	de05 d3cb 476d 8a2f fe05 9d85 8f39 faf8     ....mG/.....9...
   a30c4:	2c62 8c29 2209 2064 3851 0915 10b1 2027     b,).."d Q8....' 
   a30d4:	ecc4 cae3 8526 2eb0 7859 49bf 4d6e 0d74     ....&...Yx.InMt.
   a30e4:	21bd 3992 c26c 3dbc 11e7 81a6 a60e dbee     .!.9l..=........
   a30f4:	3230 0e10 1729 1a84 d0c0 0cc2 4355 9cc4     02..).......UC..
   a3104:	aba0 af1f 688b a7ae 2b65 54d1 616b 8531     .....h..e+.Tka1.
   a3114:	f5e7 ebe6 a946 c17a 8e37 54a5 a985 6e9a     ....F.z.7..T...n
   a3124:	9ed3 d7c8 cb6f 54f8 41c6 fd44 8d39 3e3e     ....o..T.AD.9.>>
   a3134:	bf23 e6d2 d36d b112 ebda 94a8 116d 3112     #...m.......m..1
   a3144:	e1f2 2295 47ef 867e 5b18 91c9 45aa c171     ...".G~..[...Eq.
   a3154:	f470 22eb 25c9 ced2 614f af61 ae70 8a2a     p..".%..Oaa.p.*.
   a3164:	74d0 7373 2fc2 b045 6476 e490 1ed7 2191     .tss./E.vd.....!
   a3174:	20ba 6ae3 0ed4 93fa a808 f40e 482d 001e     . .j........-H..
   a3184:	6af0 8034 5d36 e37a e8ea fafb 174d 28e3     .j4.6]z.....M..(
   a3194:	3e6f 962c 6db6 e18e 3a03 1b95 c3fb c081     o>,..m...:......
   a31a4:	b5bd cdec b7f1 253f 1aad 000a db4d b3f7     ......?%....M...
   a31b4:	92aa 0eea 1358 f332 39bd 7f6b e94e 418f     ....X.2..9k.N..A
   a31c4:	a578 7265 3b55 5736 a2a4 3e2f 16da c6eb     x.erU;6W../>....
   a31d4:	4af1 20ad 91a8 f1c3 52d4 579b f31d 2781     .J. .....R.W...'
   a31e4:	51c3 68c2 b938 5d60 ca13 d4d6 6933 24e4     .Q.h8.`]....3i.$
   a31f4:	4521 272d a9a5 7163 20d5 6861 6bbd 856b     !E-'..cq. ah.kk.
   a3204:	fbad 4b34 8bcc eece 8933 78b9 de35 2524     ..4K....3..x5.$%
   a3214:	535b 4862 4ed3 a551 bff7 97ff e1d7 0749     [SbH.NQ.......I.
   a3224:	fca3 8991 23bb c952 5f54 f3b5 1c41 2930     .....#R.T_..A.0)
   a3234:	b94e 6dc9 ae93 2952 b058 d59a 9657 8ef9     N..m..R)X...W...
   a3244:	5fd5 a5ae 2ddc 45ea f9a2 bf93 73d7 e85b     ._...-.E.....s[.
   a3254:	255c 7580 b066 cc3d 8aa0 630e 7722 d490     \%.uf.=....c"w..
   a3264:	35b6 c2d4 2a19 d57f 2e03 01dc 3eef ffbc     .5...*.......>..
   a3274:	af95 e932 eb01 5232 c861 79b2 3ba8 0834     ..2...2Ra..y.;4.
   a3284:	31f4 183d edd3 7a21 916a c973 8856 79e8     .1=...!zj.s.V..y
   a3294:	7ed9 fa07 faa2 734c 066e 746a 7c5a 1deb     .~....Lsn.jtZ|..
   a32a4:	c244 68d2 aed4 b783 21ba 569b 974a 6993     D..h.....!.VJ..i
   a32b4:	093f 80f3 1abf 3ed7 d97e 83af 5896 252a     ?......>~....X*%
   a32c4:	ff2f 35a9 c2d2 bdb7 7ffe f353 4659 34d4     /..5......S.YF.4
   a32d4:	7ef7 ec8e 210f 915d ba01 8a7a e08e ec60     .~...!]...z...`.
   a32e4:	3833 acc8 4da3 20f1 16bf affe 3fa9 d00f     38...M. .....?..
   a32f4:	38e1 8afb a28f 3274 530b 4627 8898 daa5     .8....t2.S'F....
   a3304:	5882 b3a0 88f1 47c8 b61c 0047 378f c191     .X.....G..G..7..
   a3314:	3a3c 8b15 1968 129d 6814 89f7 c873 f80c     <:..h....h..s...
   a3324:	784d db64 5807 2bd6 cceb 228b e359 7479     Mxd..X.+..."Y.yt
   a3334:	3a3a e68d d1d0 f5f3 9642 2f45 6ce7 b80a     ::......B.E/.l..
   a3344:	7396 2a46 28ac 5fa8 2b44 46d4 1c40 8a79     .sF*.(._D+.F@.y.
   a3354:	e3bf a8bb e8d1 042f f1bd 9dca 184a a00a     ....../.....J...
   a3364:	2b3b b6fd 673f 47fd ccce 9c69 2e7f ad91     ;+..?g.G..i.....
   a3374:	fc1c 4ece 451d f233 3d78 840d 0dbf 008c     ...N.E3.x=......
   a3384:	be55 4a4f f24e 8a25 ae2a 7b8e 664c 8024     U.OJN.%.*..{Lf$.
   a3394:	a164 1014 58b2 4e0a b9a8 656c c99c 9307     d....X.N..le....
   a33a4:	c184 f838 f509 6836 90a8 fe8b 1d62 0459     ..8...6h....b.Y.
   a33b4:	b20b 0dea 0bc7 6435 35ec 53f5 fb2c 24f8     ......5d.5.S,..$
   a33c4:	8847 3d01 c5c9 5870 8009 b463 e21d 6fdd     G..=..pX..c....o
   a33d4:	8108 1258 9f02 f273 d167 c70b c875 ca2a     ..X...s.g...u.*.
   a33e4:	4178 52a6 8bab 60ec bb1d d90b 3a6b a517     xA.R...`....k:..
   a33f4:	6f58 1886 f51a 4982 8597 aa2f 4c67 a704     Xo.....I../.gL..
   a3404:	8132 3348 4331 7242 e964 1080 ceac eaa5     2.H31CBrd.......
   a3414:	92d7 655f 0049 1fba 1261 0882 2cff 7103     .._eI...a....,.q
   a3424:	b91e 9d75 164e 7836 86f7 904c 37a1 7152     ..u.N.6x..L..7Rq
   a3434:	7906 1ab9 36c8 0fa0 f6dc cd2e 08dd 505d     .y...6........]P
   a3444:	d39e 9f12 6411 01ed 0b6b 3c09 73b0 5803     .....d..k..<.s.X
   a3454:	1ae7 4ab0 257f 2f28 d2fc 9d04 4fa9 d841     ...J.%(/.....OA.
   a3464:	ca2c fa39 5126 d4e5 dc8f 822c 4ae6 71a7     ,.9.&Q....,..J.q
   a3474:	678b 5dac e2eb 9b72 baf3 b5ac 1b82 f81b     .g.]..r.........
   a3484:	0f49 2d96 b09b 4511 7a1c 948e 79f9 e19c     I..-...E.z...y..
   a3494:	10d5 07cc 0ef0 9a4a 3db8 d518 b4e6 f897     ......J..=......
   a34a4:	d499 d371 980c c443 cdf8 e7c3 ac1b 27e1     ..q...C........'
   a34b4:	7468 983c fae8 0c22 a0fb b15a 3cc3 56dc     ht<..."...Z..<.V
   a34c4:	6a39 e72a 7901 60ac 2865 bd6f 35b9 02bc     9j*..y.`e(o..5..
   a34d4:	f0df 0489 b76d 430f 6fd6 acdf d45c 035a     ....m..C.o..\.Z.
   a34e4:	3a55 6237 20b8 df87 74a4 7966 da1e aa6f     U:7b. ...tfy..o.
   a34f4:	62f2 9e06 ed7a 93f0 ad22 4c01 fe14 ed41     .b..z..."..L..A.
   a3504:	d532 7507 cfc3 1b0c e88c 6bca 0e25 12b5     2..u.......k%...
   a3514:	6b95 602d ac2e 71d4 3f5b c95a 7ab8 e5c8     .k-`...q[?Z..z..
   a3524:	813e 591e 1556 4517 11f9 a85d 11c0 06f8     >..YV..E..].....
   a3534:	1a85 4a38 96f1 2409 2555 c932 f028 3e92     ..8J...$U%2.(..>
   a3544:	cc6f 9b07 b4e4 d16d 6a5a bdcd e8fb 4985     o.....m.Zj.....I
   a3554:	7aaf 2521 9bda 4cfa 0dc6 4b5a 1d95 013e     .z!%...L..ZK..>.
   a3564:	5a9e d710 e2cc 4513 5479 d491 55b5 b516     .Z.....EyT...U..
   a3574:	9d32 2b6e 8c51 c917 cc90 6190 7135 463f     2.n+Q......a5q?F
   a3584:	10ab 1ba3 1234 6bdd 69de 1db4 dcdf dac4     ....4..k.i......
   a3594:	4e92 2b35 4813 80cc 16c1 af10 af6f d5e0     .N5+.H......o...
   a35a4:	a8a8 8cac 4a8a ab66 aca8 ebec 39d4 48f0     .....Jf......9.H
   a35b4:	53db f640 cdf6 3ce4 4698 d1f1 d8fc 0734     .S@....<.F....4.
   a35c4:	a32f 8a29 f8d8 ceca 0d2c 4c91 5dda 5996     /.).....,..L.].Y
   a35d4:	3842 49ea e931 2594 d80d 68a2 1ee6 9144     B8.I1..%...h..D.
   a35e4:	e9a9 fbcb bb13 2134 4943 f40b d67a 6b92     ......4!CI..z..k
   a35f4:	1a20 13e7 82ff 4005 3036 493d 84e8 2580      ......@60=I...%
   a3604:	a152 f032 46ea cdb1 5219 1d0d d43e e959     R.2..F...R..>.Y.
   a3614:	e556 d51b 1fc0 629e 9456 0afa bf56 f743     V......bV...V.C.
   a3624:	9622 5a31 7c5b 522d cf52 4b24 a01c faa6     ".1Z[|-RR.$K....
   a3634:	b0c3 fbee ded6 ef25 e8d4 6cb7 4c32 86ee     ......%....l2L..
   a3644:	17e4 8aac 51ea 8e35 fd47 c57e 07f2 8394     .....Q5.G.~.....
   a3654:	1738 f22c 0255 1c17 853c faa8 5a2c 5cc8     8.,.U...<...,Z.\
   a3664:	65bf 40db 7128 bd79 946d 732f 1369 5673     .e.@(qy.m./si.sV
   a3674:	0cf9 4208 effa aed7 e290 3413 0134 5786     ...B.......44..W
   a3684:	1a92 3737 78e5 7245 a8ab 6342 3843 b5e9     ..77.xEr..BcC8..
   a3694:	ca58 3932 896b c966 96bd 046b 5dba 3136     X.29k.f...k..]61
   a36a4:	7197 2f14 8263 a96b ec2b 71b6 30a9 8c0d     .q./c.k.+..q.0..
   a36b4:	14b5 8c05 1ad5 22a6 e30e 4628 e168 81aa     ......."..(Fh...
   a36c4:	0c06 52ff c82f 129a 2896 4aa0 f63b 0106     ...R/....(.J;...
   a36d4:	ce62 8fc3 9db5 4014 7f60 0408 1466 5f15     b......@`...f.._
   a36e4:	bfde 29b9 96c6 ec8e 4ece 9fb1 044a 9682     ...).....N..J...
   a36f4:	06f6 2b70 71b7 cd9a af5e 9358 154c bdad     ..p+.q..^.X.L...
   a3704:	8614 fb44 cb2c a70c 7476 9b2c 0b74 9970     ..D.,...vt,.t.p.
   a3714:	f596 9b85 ad97 6cab eecd bb7e a682 f7ca     .......l..~.....
   a3724:	730b bb06 007e 5d03 9baf 952e 88bf 568d     .s..~..].......V
   a3734:	78da 7cc8 4b2c f374 0c8b 9a00 b300 f83b     .x.|,Kt.......;.
   a3744:	a4d3 283e 80ce 4e09 6f66 4511 364c 73a4     ..>(...Nfo.EL6.s
   a3754:	22f0 16a9 294d fa28 ce21 0284 c29d ec99     ."..M)(.!.......
   a3764:	f6e7 3d0d 20ac 1eb1 afed 493f 76fb 8905     ...=. ....?I.v..
   a3774:	abd5 95f8 bccf 705d a373 995e 2558 74d1     ......]ps.^.X%.t
   a3784:	fbc3 e021 4b1f f0c6 05b2 9dbd e8ce a8d2     ..!..K..........
   a3794:	f5b4 bbbb 392c e1a4 32a4 6666 09d6 0315     ....,9...2ff....
   a37a4:	72d1 a548 b05e 5499 146a 1b7c f1f9 e384     .rH.^..Tj.|.....
   a37b4:	bc7b a146 1d28 8f19 5274 d039 6cb2 09c6     {.F.(...tR9..l..
   a37c4:	42d7 341e 6330 a91d df58 8c80 252a caed     .B.40c..X...*%..
   a37d4:	ab00 1693 fc14 0de9 478f 7c74 bb02 2be8     .........Gt|...+
   a37e4:	bfa2 52bf e044 0f78 9fc0 bdb1 dafe 4923     ...RD.x.......#I
   a37f4:	7050 af67 fecf d615 996b 3943 d049 c6e9     Ppg.....k.C9I...
   a3804:	a4bc e2b6 243b 394a b954 3820 978b 86a1     ....;$J9T. 8....
   a3814:	5db4 1378 62b4 1a56 afbd 7e1b 5cd0 9d5d     .]x..bV....~.\].
   a3824:	8d92 a5f4 4eb2 7c79 fd5b 4014 b3b4 fc0d     .....Ny|[..@....
   a3834:	59f2 3ced 4d4b c153 ff38 9b17 2c12 0e96     .Y.<KMS.8....,..
   a3844:	f71d 4f16 d495 590b 5a89 c011 60d0 98ed     ...O...Y.Z...`..
   a3854:	77d6 d2a8 91c2 9338 7306 db34 6923 1e05     .w....8..s4.#i..
   a3864:	5ae5 86b7 6a74 5223 2da9 58ed a8f3 c5a8     .Z..tj#R.-.X....
   a3874:	5a1a f48e f6cc 9c7a deb2 b5ac 1e77 b75b     .Z....z.....w.[.
   a3884:	b20f 67aa f498 479a 1f40 bb2c da8a 1168     ...g...G@.,...h.
   a3894:	306c 6bb0 af51 cb41 15d3 15d9 b19d c89a     l0.kQ.A.........
   a38a4:	e8f1 e86f d724 e563 1581 921b 3d8f 2376     ..o.$.c......=v#
   a38b4:	c93c 9515 d460 9df5 597b fb35 0634 d89c     <...`...{Y5.4...
   a38c4:	9d9d 9e6d 09b5 a16b 1c86 51af 3519 a6bc     ..m...k....Q.5..
   a38d4:	e778 20b9 6543 aa81 6549 d4f4 c8be 234b     x.. Ce..Ie....K#
   a38e4:	13d8 5ca5 8625 721d 0d09 180c 300c 052c     ...\%..r.....0,.
   a38f4:	5efa 23e7 6105 b52a 45b6 f0ca 60a3 dd27     .^.#.a*..E...`'.
   a3904:	07e5 88b1 462b 18fd c00e a782 7a67 5095     ....+F......gz.P
   a3914:	5350 eccb e574 97df a2de 2e28 0f69 f7ef     PS..t.....(.i...
   a3924:	f751 2b57 506a 4d3b c94d 9838 5d90 7e02     Q.W+jP;MM.8..].~
   a3934:	8a3b 318f 06a4 95f6 9b54 41f0 7eda 8231     ;..1....T..A.~1.
   a3944:	20da 4682 1e6d 5dd3 ca28 9858 540d 1ab8     . .Fm..](.X..T..
   a3954:	0b37 283b fe8e 0030 c147 4e3e 1557 abb5     7.;(..0.G.>NW...
   a3964:	133a 4de1 9f1a 052a be33 887c 9214 45b9     :..M..*.3.|....E
   a3974:	57d1 e40a 8977 050f bfb1 afd2 a50b e7ca     .W..w...........
   a3984:	e242 f5b1 5bbf 03b6 57dd 2288 9516 10c8     B....[...W."....
   a3994:	c38b b0f2 57f1 ec66 a2be 0cbb d33f 4328     .....Wf.....?.(C
   a39a4:	51e5 aa34 f559 0958 8a69 2b74 05eb 010e     .Q4.Y.X.i.t+....
   a39b4:	4b55 5561 e738 bce4 c48f ba23 0952 55fd     UKaU8.....#.R..U
   a39c4:	a914 fb2a 6f77 f26e 9a28 0103 150b 3ddd     ..*.won.(......=
   a39d4:	631e 5cb4 8e3f 90e6 88bd 7462 3d0e afc6     .c.\?.....bt.=..
   a39e4:	543e c528 4a59 cdcc 4ebc 3d4a c3d8 39cb     >T(.YJ...NJ=...9
   a39f4:	57cc 9146 94af e900 8e16 11bb c2aa 1354     .WF...........T.
   a3a04:	354c 4727 0478 8922 3744 a883 0b28 f595     L5'Gx.".D7..(...
   a3a14:	00f7 e2d3 bbdf fcc7 3c3e 2ab6 051c a2d8     ........><.*....
   a3a24:	eabf 4cc3 b360 a06a 6314 1b90 5aa1 0081     ...L`.j..c...Z..
   a3a34:	3183 7ac8 cdf7 d570 a940 de89 683d 1b62     .1.z..p.@...=hb.
   a3a44:	ee1f b577 33d1 706d 1ccd 9683 4e25 6c33     ..w..3mp....%N3l
   a3a54:	2ef1 67ea 4aa1 e1e5 52d5 2fd9 7f01 597c     ...g.J...R./..|Y
   a3a64:	ad48 a926 bea8 4b88 6c40 1ed3 d2c0 e828     H.&....K@l....(.
   a3a74:	0bf7 0e3a f346 b4f1 6f17 8cce f746 af41     ..:.F....o..F.A.
   a3a84:	8f17 85a4 23e3 4d32 9019 4dc9 a3cc 219b     .....#2M...M...!
   a3a94:	3582 06d6 6e9b 9467 c721 c58f cb26 40eb     .5...ng.!...&..@
   a3aa4:	a38a 312e 0a10 e95a 0eb7 d1ff 5a2c 49c8     ...1..Z.....,Z.I
   a3ab4:	2c9c cc8e 4f4c 9a16 081c c707 01e1 539b     .,..LO.........S
   a3ac4:	cd6e aadc baba 7375 3323 175f 82e8 e10e     n.....us#3_.....
   a3ad4:	c342 a118 0590 b9b4 50c9 07dc a5e2 47d5     B........P.....G
   a3ae4:	8d15 3c79 adbc e98b 0ea6 9dad de89 3b46     ..y<..........F;
   a3af4:	eda0 c619 a46f 0f7d 3329 0249 6cf2 5b2d     ....o.}.)3I..l-[
   a3b04:	ef93 e674 7068 fd0c 4e5f 4524 e36a 7e0e     ..t.hp.._N$Ej..~
   a3b14:	39e9 85ee 9109 6d2c b1fc 3854 2703 0ad5     .9....,m..T8.'..
   a3b24:	e2a4 a2cf 56e7 4d49 db4f c0e1 a34f c919     .....VIMO...O...
   a3b34:	18f5 51f1 e7ad 2490 2989 f52b f22c 7b4f     ...Q...$.)+.,.O{
   a3b44:	40e7 8979 852b 1b65 a3d4 41c4 7a57 610e     .@y.+.e....AWz.a
   a3b54:	fc22 fdb3 b42b 253b 5443 ab5a 6893 b935     "...+.;%CTZ..h5.
   a3b64:	bda2 0e1a 65c4 5f84 85c5 c6a4 becd 26ac     .....e._.......&
   a3b74:	0a72 9e43 40d3 c575 1c9a a15f cc06 e54c     r.C..@u..._...L.
   a3b84:	b4d5 993b ba71 d44e 5d54 d26a 8b9d dcdc     ..;.q.N.T]j.....
   a3b94:	32c8 ca80 182f 47a9 a0ac c9fd 302b 812a     .2../..G....+0*.
   a3ba4:	3cc8 153a 0a17 477f 81e7 b0b8 97ac d90c     .<:....G........
   a3bb4:	2db1 1399 dea0 0493 0395 cd89 b7e5 acdd     .-..............
   a3bc4:	4d38 71a7 dbf6 3793 81cf 6e83 e9a5 b37c     8M.q...7...n..|.
   a3bd4:	3ce4 269d 6d9c 79fb 7c61 6c95 92d5 691c     .<.&.m.ya|.l...i
   a3be4:	be17 2ad3 b40b 9b84 5ded 1b2b 68a6 00da     ...*.....]+..h..
   a3bf4:	96a7 f327 5cab 7dce b3cd ef06 bd38 2104     ..'..\.}....8..!
   a3c04:	955f 926a 096b 5f3e 1695 f025 e1ab 2504     _.j.k.>_..%....%
   a3c14:	d0dc a7b5 9643 7de2 d27c 4a62 a4a4 35c0     ....C..}|.bJ...5
   a3c24:	5676 ca26 7936 228c 1693 5ba1 431f 96ad     vV&.6y."...[.C..
   a3c34:	52f1 7aed 6e75 6d10 d8dc 06c1 b432 b819     .R.zun.m....2...
   a3c44:	a5c7 ed0c fc6e 375a 28bc 3f40 722c 7c94     ....n.Z7.(@?,r.|
   a3c54:	5f3a 5f53 412c d361 7e9d 8bf3 56e5 f9bf     :_S_,Aa..~...V..
   a3c64:	75c9 dfaf 0b8d 1f89 b8d5 e9a0 d70a 48ee     .u.............H
   a3c74:	562b 6580 5222 709b 1281 97a2 69f1 1bf2     +V.e"R.p.....i..
   a3c84:	597b 2681 4df4 7a8a c190 60e7 d9a7 e471     {Y.&.M.z...`..q.
   a3c94:	cb02 9a29 d465 5dd1 bbfb b57f 4776 f19e     ..).e..]....vG..
   a3ca4:	ab8b 5ae3 5877 b04c 6c49 eccb 0d3d fcec     ...ZwXL.Il..=...
   a3cb4:	e947 1b31 2831 ba3e 9d48 e88f 0797 73af     G.1.1(>.H......s
   a3cc4:	0c23 2091 d6d9 c0a8 c333 89c3 83c5 0746     #.. ....3.....F.
   a3cd4:	1b2a 7931 51ee 7354 b94f 7d4f 148e d13f     *.1y.QTsO.O}..?.
   a3ce4:	9c29 478e dc53 0e8b 63ed 8c20 0dfb 863e     )..GS....c ...>.
   a3cf4:	4927 3878 5863 0804 9e6a cf43 e272 2ee8     'Ix8cX..j.C.r...
   a3d04:	8b32 366e 0351 24d0 e4dd 7cf5 a2ab 20c9     2.n6Q..$...|... 
   a3d14:	55c4 a40a 9038 f72f 399a 50de 9c8e 45bf     .U..8./..9.P...E
   a3d24:	6c18 d081 3c05 a56a 9e5e d8a2 a29a 5858     .l...<j.^.....XX
   a3d34:	c90a d85f 3b5c de5d 5146 22ee 8e3b 2d27     .._.\;].FQ.";.'-
   a3d44:	ea7d 6d41 6134 f072 b590 611f 442f 8fda     }.Am4ar....a/D..
   a3d54:	b2fe 1b49 a53d 8380 73b7 84b5 274d 1b18     ..I.=....s..M'..
   a3d64:	57d5 917a ee24 7c53 9e52 e21d 35bf 36af     .Wz.$.S|R....5.6
   a3d74:	2d5e b1fb a639 7852 2ac1 cb2d 8716 527f     ^-..9.Rx.*-....R
   a3d84:	332c 74b3 1bca d492 0f53 0104 2978 f31e     ,3.t....S...x)..
   a3d94:	241f 5110 c81f 12d6 d3fd 4eaa d614 39cd     .$.Q.......N...9
   a3da4:	92de 0ac7 8846 4b69 66f1 227b e40f 8f90     ....F.iK.f{"....
   a3db4:	285a c5a2 139f 795e 0000 113e 5fe4 1009     Z(....^y..>.._..
   a3dc4:	2faa d395 657c b5b3 ca19 31b5 598c 9c96     ./..|e.....1.Y..
   a3dd4:	d927 7b97 a1da 1441 54fd c8f8 d45d cc64     '..{..A..T..].d.
   a3de4:	5f8b 21f7 5233 f4f7 f132 70b1 0fbf 93c5     ._.!3R..2..p....
   a3df4:	5be8 dacc 75f7 002d e47c 1005 ef85 d350     .[...u-.|.....P.
   a3e04:	b2b7 4326 0fd7 4a9d aa7b 6252 b349 5ea3     ..&C...J{.RbI..^
   a3e14:	6a8f 0ea5 75f4 58a5 90df 97cc 8892 7d3c     .j...u.X......<}
   a3e24:	c3c2 a738 dd3b ec49 9aa3 185c a3b3 8a19     ..8.;.I...\.....
   a3e34:	d830 195c aac1 c497 97d5 e77a 9afc 9aa2     0.\.......z.....
   a3e44:	8ac5 eccc 7c49 2997 8ef0 15fd 9a67 7f46     ....I|.)....g.F.
   a3e54:	7e16 8186 e7a9 e551 c4af b034 0c6d a3b6     .~....Q...4.m...
   a3e64:	1567 f469 3691 6508 5678 1801 2dcc 1ca3     g.i..6.exV...-..
   a3e74:	9047 1030 1a35 4801 744f 8da3 44a7 391e     G.0.5..HOt...D.9
   a3e84:	e704 3557 45dd 96f3 8f6b b10d 1955 1cf4     ..W5.E..k...U...
   a3e94:	e4e4 b880 19a2 5698 3548 dbd7 e52b 6f11     .......VH5..+..o
   a3ea4:	fbc1 2dcf d29d d8b3 ebb1 774b 7f2f b24a     ...-......Kw/.J.
   a3eb4:	24a8 7731 5bba eaac 9d2a 0c71 eb21 e05a     .$1w.[..*.q.!.Z.
   a3ec4:	aeb7 016b 07f2 ebd9 9a46 2d03 c346 282e     ..k.....F..-F..(
   a3ed4:	6967 dbe8 285e 4539 ae8a 4b55 23bc 1a28     gi..^(9E..UK.#(.
   a3ee4:	df7e e4fa 2eb7 171d 2aed 0e74 77c1 8e09     ~........*t..w..
   a3ef4:	0935 0ed6 1b95 1ca5 c84b d94a c0d3 cbe8     5.......K.J.....
   a3f04:	40fe beda 2db4 d473 7846 fa57 6931 0021     .@...-s.FxW.1i!.
   a3f14:	6a9f e27b 4827 d402 57e6 b2a8 52b9 f86e     .j{.'H...W...Rn.
   a3f24:	ac81 5f84 04a5 8f0b 8a68 5387 1e39 9758     ..._....h..S9.X.
   a3f34:	2934 9b0a d262 e576 b5e5 e696 0707 5915     4)..b.v........Y
   a3f44:	373a a97a 94fe 370a 2224 b3e1 0a0e 4cac     :7z....7$".....L
   a3f54:	5b40 e154 c78c 72a9 9b6c edf2 167f 8462     @[T....rl.....b.
   a3f64:	7413 cb9f bd09 f42c fe29 bf10 1206 a6c3     .t....,.).......
   a3f74:	3a7d 0516 ca7d bda2 36af 9879 c367 55bb     }:..}....6y.g..U
   a3f84:	24a4 5381 6adc ab35 da27 3fb3 de8b 67a0     .$.S.j5.'..?...g
   a3f94:	b161 fe88 bfa2 a8cb 67f0 4ca8 0151 540b     a........g.LQ..T
   a3fa4:	8bf8 7800 b21e 2ee2 e7c7 cad6 62e6 ce21     ...x.........b!.
   a3fb4:	dd70 3e94 4a33 2654 b530 01c0 efc2 50cf     p..>3JT&0......P
   a3fc4:	9897 f7c1 3870 168e 99fd d911 455c 31cb     ....p8......\E.1
   a3fd4:	8760 7ef3 8e39 feca 3272 170b 04e2 fc9e     `..~9...r2......
   a3fe4:	282b 593b e786 88c1 7c38 b99b 62bf fed6     +(;Y....8|...b..
   a3ff4:	208a 32f0 e6a2 04af 3815 cf0d 3600 27c7     . .2.....8...6.'
   a4004:	cb78 0277 2c8c acb0 a67a 692f 2ece 1322     x.w..,..z./i..".
   a4014:	65e9 677e 102f d107 47ac 6f8e c1a7 3c35     .e~g/....G.o..5<
   a4024:	706b 08fb cf84 f8c5 5023 1f3a 0383 c11e     kp......#P:.....
   a4034:	8c01 2a80 0b79 7153 8c10 8ede 09cb d2b0     ...*y.Sq........
   a4044:	3007 6f35 0f85 4313 117e d17b b930 338b     .05o...C~.{.0..3
   a4054:	117b c084 1e6d 1cc0 a5be 9c09 21f7 02c9     {...m........!..
   a4064:	779e fa8a c467 b495 da28 7de6 f990 9232     .w..g...(..}..2.
   a4074:	a2a5 04e8 a84e 3893 d752 2e41 7e35 d1ef     ....N..8R.A.5~..
   a4084:	26b8 450f f127 7967 e161 a4bb b693 f5bd     .&.E'.gya.......
   a4094:	6909 fdf5 5a9d ced6 d56d ac49 e6c4 8750     .i...Z..m.I...P.
   a40a4:	2b7d e776 40fe 6fa3 cdd2 3a4a 65c2 cc05     }+v..@.o..J:.e..
   a40b4:	687c fe37 49a8 596f 75e0 a34f 1966 b39a     |h7..IoY.uO.f...
   a40c4:	3fa8 6bc8 1c35 b55f 318c f1dc fea5 d1e7     .?.k5._..1......
   a40d4:	9a95 63ba 4643 e465 480c 57bb 28db 8552     ...cCFe..H.W.(R.
   a40e4:	4043 7add e5f5 d865 a19d 6c1e 178a 7e39     C@.z..e....l..9~
   a40f4:	4bab 4a51 e307 92d0 ff7b 9928 3233 88d3     .KQJ....{.(.32..
   a4104:	a7ae 6167 2242 c969 50a5 59e8 c3bc a135     ..gaB"i..P.Y..5.
   a4114:	b41e 3e77 c561 c578 967c 07e9 b24b abeb     ..w>a.x.|...K...
   a4124:	8aa5 4b4d bdb5 f93e e2a3 ae2f c7a9 b233     ..MK..>.../...3.
   a4134:	2e6a bf3b c41d 0659 18dd a688 8905 f169     j.;...Y.......i.
   a4144:	f325 d455 cd55 70e0 9a5d 7125 d15f 02ff     %.U.U..p].%q_...
   a4154:	a425 b0b3 7bd7 af1b c7c5 f278 4011 5967     %....{....x..@gY
   a4164:	d5f1 9c96 d40f 61ed 95fb 22e2 beaf 8b2b     .......a..."..+.
   a4174:	32d5 18fa d747 4605 95f0 8e9f 0cc5 0f75     .2..G..F......u.
   a4184:	9660 f463 3e5d 88fd 7d01 6dad bbf8 63ab     `.c.]>...}.m...c
   a4194:	c8d3 e14b 67d7 0b05 9b27 5ce6 f947 1fb1     ..K..g..'..\G...
   a41a4:	6eb4 b0a7 1d93 af66 2e98 b01d bba5 f3dd     .n....f.........
   a41b4:	02cb e6d7 9e57 fde1 854d 5b54 a6c1 470c     ....W...M.T[...G
   a41c4:	15dd 7af6 d8c7 3391 4940 b017 139f 8cdf     ...z...3@I......
   a41d4:	36ce cce9 d9ed 09a1 1f25 7a74 09be 0515     .6......%.tz....
   a41e4:	7975 0d75 8913 6d84 439a 57f5 b0d7 a40c     uyu....m.C.W....
   a41f4:	d22b 958c 98d4 5c9d 8b4e 44b6 52e2 2a35     +......\N..D.R5*
   a4204:	5807 548b 4de7 05c3 2628 4c3a f2ec c7dc     .X.T.M..(&:L....
   a4214:	0965 336e 2bc3 233f f14f 7919 cfe2 53c8     e.n3.+?#O..y...S
   a4224:	3cc9 7d96 3baa 67a3 9d34 334a d923 b675     .<.}.;.g4.J3#.u.
   a4234:	cecc 1a0e a3e2 67fc d555 5832 b273 6d6b     .......gU.2Xs.km
   a4244:	347f b084 3976 d08b 0910 8dea 3985 6dac     .4..v9.......9.m
   a4254:	b1c5 ccf2 71bb bf7a bb6f 75a6 48f3 c7ca     .....qz.o..u.H..
   a4264:	ebf2 7e8a 5d5f 0971 1fb9 baed 57a9 8a43     ...~_]q......WC.
   a4274:	51ec c300 ae41 6b2b a6e1 ab92 ab51 82f7     .Q..A.+k....Q...
   a4284:	f0bd 4e87 507f 6620 da0d 278e 2328 7207     ...N.P f...'(#.r
   a4294:	b38b 5227 dcfd e36d 5b2d a9f9 b65c ebf1     ..'R..m.-[..\...
   a42a4:	2ce7 aa8d 6775 15e7 8439 cd6b 76c3 49bd     .,..ug..9.k..v.I
   a42b4:	9eec c6ec 3fb3 27a0 eb84 8b0f 31e8 fdaa     .....?.'.....1..
   a42c4:	0ae9 93cc 5e63 bccd 5e23 5f5e d5be 33d8     ....c^..#^^_...3
   a42d4:	a272 d82a 301e 8ba5 a77d dea1 eaac dde7     r.*..0..}.......
   a42e4:	600e 77d9 a955 7d44 38e7 bf24 5439 8782     .`.wU.D}.8$.9T..
   a42f4:	7a06 d80f 5153 a172 24cd f0f1 d0af a42a     .z..SQr..$....*.
   a4304:	55b6 e318 9cc6 148e 3a84 243d c60d a35b     .U.......:=$..[.
   a4314:	3623 2487 3f0d 599c afd9 a11b 7605 fe76     #6.$.?.Y.....vv.
   a4324:	5342 4b7a b11f 30a5 c562 6821 16d4 3db0     BSzK...0b.!h...=
   a4334:	c766 7720 ce76 026a d6dd 4097 c1b4 05e4     f. wv.j....@....
   a4344:	3565 bc93 8269 29cd cdbe 41ae 5055 6833     e5..i..)...AUP3h
   a4354:	55ae 7b45 7641 2e76 ea71 f5c9 a585 8bd9     .UE{Avv.q.......
   a4364:	5697 c1d6 e00f cecf f805 b7ec 1105 00b7     .V..............
   a4374:	793f 9624 62ec 807b 5487 dca1 424d 8af9     ?y$..b{..T..MB..
   a4384:	62b6 2a8d bec9 b1b5 1dd9 49a1 d5e2 76da     .b.*.......I...v
   a4394:	39f6 26f9 3db9 a964 4eba 6b75 88ee e22f     .9.&.=d..Nuk../.
   a43a4:	5164 7267 9597 ab54 d4b0 caeb 3837 b634     dQgr..T.....784.
   a43b4:	0dab 5d46 374d eae2 64ea 4b3b b6ba 5808     ..F]M7...d;K...X
   a43c4:	467b 2ef2 7548 2933 dd79 8d67 b586 bbf0     {F..Hu3)y.g.....
   a43d4:	8191 6a70 18ed 610c 371e 8d80 7749 1532     ..pj...a.7..Iw2.
   a43e4:	04e2 d0a3 a2b0 59b9 a551 bbbd 012c 7e64     .......YQ...,.d~
   a43f4:	5767 8d00 28b3 48e8 8baf 91a0 2672 bdbd     gW...(.H....r&..
   a4404:	a9bb c569 5277 b714 ddcb 8b04 a492 6b79     ..i.wR........yk
   a4414:	f125 8b3d 4eaf 7612 2fb8 937d 4c89 ff25     %.=..N.v./}..L%.
   a4424:	2f9c 0fec 186e be10 b3d0 e104 a0ab 5a3a     ./..n.........:Z
   a4434:	131d 37aa bfea cad3 c8af 153f 94d4 d1b0     ...7......?.....
   a4444:	d64b 22a8 abb3 9ac8 9055 3f15 2969 ab78     K.."....U..?i)x.
   a4454:	565c 3792 2222 2728 bee6 490d 511b 021c     \V.7""('...I.Q..
   a4464:	0768 4276 a95f a6fe eb13 0765 31de 4e6f     h.vB_.....e..1oN
   a4474:	34e8 83e7 5405 7f88 8bba 6fec 822a d581     .4...T.....o*...
   a4484:	4fb6 897d 08f8 1b05 84fe a626 9e16 ed54     .O}.......&...T.
   a4494:	6941 fd8a f6d9 90e4 8beb c546 282e 3959     Ai........F..(Y9
   a44a4:	ed50 57c4 908d 356e 9a89 2578 d7aa 3f22     P..W..n5..x%.."?
   a44b4:	ae57 1c1b 534b a3b9 6472 3392 898c 3004     W...KS..rd.3...0
   a44c4:	0c4a d572 5ad5 ae47 f366 2f96 dc84 3b52     J.r..ZG.f../..R;
   a44d4:	5b75 9f27 4e12 1207 3559 697e 01f4 9c93     u['..N..Y5~i....
   a44e4:	6c6e 6bc8 84f7 d8ca 999d e86f 1f0c dc1d     nl.k......o.....
   a44f4:	339f be56 c744 9f55 b7dd ddbf a731 b357     .3V.D.U.....1.W.
   a4504:	895c a937 a407 28d2 8083 7de0 f468 e97b     \.7....(...}h.{.
   a4514:	48ab 4823 445f cbfa 59e4 cfea 5f0b 07bf     .H#H_D...Y..._..
   a4524:	3f41 0def 21c3 25e7 6957 44f4 792a 36cc     A?...!.%Wi.D*y.6
   a4534:	2393 0e25 9253 9d37 2e61 0ef2 740d a174     .#%.S.7.a....tt.
   a4544:	4452 28f5 171f 42a3 3c5d aec5 e082 2b53     RD.(...B]<....S+
   a4554:	047a 29de 4544 662f 09b3 dea9 771f 7b29     z..)DE/f.....w){
   a4564:	732f 1c23 13e6 0595 56a7 6bc0 247d 3c93     /s#......V.k}$.<
   a4574:	fadf 22a0 a131 b98e 89d4 281b aeb9 2ca3     ..."1......(...,
   a4584:	318e b401 b5ce ffb6 bb4f 41c2 2474 c98e     .1......O..At$..
   a4594:	ad46 43e3 ac44 f30d 16ef 834f d112 695a     F..CD.....O...Zi
   a45a4:	037c 81af 35d1 6874 3a8d 3ab0 3142 4c48     |....5th.:.:B1HL
   a45b4:	82f8 4b7d 9c4b e94a 1c10 af79 c60c e3e6     ..}KK.J...y.....
   a45c4:	0a84 be86 e949 b045 ca4a 052a c816 6fb8     ....I.E.J.*....o
   a45d4:	77dd cf54 bb73 4e5f 4eeb ed46 07f4 2757     .wT.s._N.NF...W'
   a45e4:	e6c7 3851 4c5a 8b64 a732 37f4 0e81 c92e     ..Q8ZLd.2..7....
   a45f4:	8d55 2f29 e7cd 395e 0a7d c1a9 1eb5 d5ae     U.)/..^9}.......
   a4604:	bb15 0039 927a 6fcf 6d68 1a20 01ed 221f     ..9.z..ohm ...."
   a4614:	b35b 905b 6a10 28d7 c6aa 6078 ab86 8d4d     [.[..j.(..x`..M.
   a4624:	b2c4 1511 9596 45b6 472c 7d25 0665 abfa     .......E,G%}e...
   a4634:	b853 4592 ae83 f3d1 513d 56da a52c 2adb     S..E....=Q.V,..*
   a4644:	543c e6b1 fc89 050b 5ac3 f625 0232 8275     <T.......Z%.2.u.
   a4654:	4ec5 b7b7 584e bd57 bb8d 7421 88d4 6476     .N..NXW...!t..vd
   a4664:	57db 3bb4 71c7 083b b5a8 abc6 ec7c aaa5     .W.;.q;.....|...
   a4674:	e557 5e86 1da1 7ed7 3169 e8e7 ccbc e235     W..^...~i1....5.
   a4684:	2152 8c8c ae22 2726 e90b 5c1d 4d99 73c9     R!..".&'...\.M.s
   a4694:	7613 7ebb af46 147f 7767 f851 c0b1 c1bb     .v.~F...gwQ.....
   a46a4:	2a58 3b90 f618 773c 44d5 b034 9536 6d84     X*.;..<w.D4.6..m
   a46b4:	d31c f9b0 4442 75d8 14d9 1259 b3cf b37c     ....BD.u..Y...|.
   a46c4:	b25e 40d1 3126 6611 77e9 2ea8 c18b 76b8     ^..@&1.f.w.....v
   a46d4:	1a32 8d09 599b 4234 4b78 726d 14a8 83dd     2....Y4BxKmr....
   a46e4:	fa31 eab5 74b2 afad c6f2 1cad 7820 73d9     1....t...... x.s
   a46f4:	3711 a15a f0c3 263c d165 f80d 5e57 120e     .7Z...<&e...W^..
   a4704:	87e4 2085 08d0 a373 5efa 0345 5022 239b     ... ..s..^E."P.#
   a4714:	151d 8ae3 092c 1eb2 1159 6d50 6e44 1302     ....,...Y.PmDn..
   a4724:	3ec9 6457 cadc 8a22 f18c 3b81 518b 43d6     .>Wd.."....;.Q.C
   a4734:	9767 2d7c 8b57 d7a2 5893 ca26 f5fa eea8     g.|-W....X&.....
   a4744:	2945 c185 5766 1aea e715 8018 a472 f6ea     E)..fW......r...
   a4754:	6307 72d4 9ab0 da70 28c0 5fd7 2341 ca7d     .c.r..p..(._A#}.
   a4764:	f787 7232 7176 af73 8c37 32de cfe1 4437     ..2rvqs.7..2..7D
   a4774:	2319 255f c734 3c03 1491 6dfd 116d f598     .#_%4..<...mm...
   a4784:	2b7d d7f6 e7c4 48e7 d41f 7cc2 2984 7d0b     }+.....H...|.).}
   a4794:	3af3 27ae 666e 49f3 2ea3 0a4e f342 9f69     .:.'nf.I..N.B.i.
   a47a4:	7249 572a 88da 824d e047 28b6 4754 f3f7     Ir*W..M.G..(TG..
   a47b4:	5b89 46ca 3a9d 1944 cb7a 2f52 7ce3 4b43     .[.F.:D.z.R/.|CK
   a47c4:	4103 e56d 6981 b60c a5a5 724a 6f99 0470     .Am..i....Jr.op.
   a47d4:	bbc3 ef02 3bc5 e65c ff29 2476 96c6 1014     .....;\.).v$....
   a47e4:	f91e cfec 3b7b c835 d7a5 3bcb 97e2 345f     ....{;5....;.._4
   a47f4:	c830 5812 e001 be33 ab8d 0eda 839f 64c9     0..X..3........d
   a4804:	6b13 e36e 4931 0999 86db 1f82 5673 6b17     .kn.1I......sV.k
   a4814:	7b70 90d4 771d 80fc abc7 c9c5 02be aa24     p{...w........$.
   a4824:	3500 728e 2bdb d5ba bc31 a559 30ea 2fda     .5.r.+..1.Y..0./
   a4834:	2692 fd1d 7afc cb80 96ba d196 e5e8 b3a9     .&...z..........
   a4844:	cea2 7bb2 8703 fc7c 7798 fd85 b726 c226     ...{..|..w..&.&.
   a4854:	5e46 32cb 2739 8e81 4a1d bb6e 1131 3737     F^.29'...Jn.1.77
   a4864:	2b4f a362 08d0 05f1 6cd6 ce3b aa81 e7d0     O+b......l;.....
   a4874:	d52b e262 a974 962a 65d0 36f8 ce2d 1388     +.b.t.*..e.6-...
   a4884:	35d4 1fc7 d993 188b 9cad f662 0abc b22b     .5........b...+.
   a4894:	224a 77f9 5ab7 549d ae1c 2070 9a54 08c6     J".w.Z.T..p T...
   a48a4:	b3a2 1d16 3b23 b555 79d0 0449 8e2b 38a8     ....#;U..yI.+..8
   a48b4:	804b cee2 df4f af4a be1a 5515 2a4c ff1d     K...O.J....UL*..
   a48c4:	8c5e 47a3 3db6 4d18 b3d8 d2b8 b9d2 cc88     ^..G.=.M........
   a48d4:	3127 c828 a39d abf7 83f9 a0c1 7f8f f3e6     '1(.............
   a48e4:	3be3 d940 4057 6882 f57c 0556 e3de 7593     .;@.W@.h|.V....u
   a48f4:	125b a800 fe9a 4363 913b 401c 8422 dc3c     [.....cC;..@".<.
   a4904:	dc1b 8edd 0368 e894 e408 ed71 020f 41f4     ....h.....q....A
   a4914:	255f 1399 2b84 bec9 202d 8e47 c4dc 24cb     _%...+..- G....$
   a4924:	015f 91e0 8976 7ff7 cfff c3ff 95b3 061d     _...v...........
   a4934:	6e40 6259 791c af3f 5c30 f680 28a9 b21d     @nYb.y?.0\...(..
   a4944:	8c1a dfc9 93a9 2ac0 8af0 6266 40dc 121a     .......*..fb.@..
   a4954:	2aaf 1e74 e53c 96cb 4b0d b65e 343d 318d     .*t.<....K^.=4.1
   a4964:	c806 3421 187c feef 4051 bcc7 b9f7 cd07     ..!4|...Q@......
   a4974:	9366 9a29 770d f894 30f2 12d6 658d 6501     f.)..w...0...e.e
   a4984:	abc5 082a 3257 b3ad fa08 8b08 ef20 72ca     ..*.W2...... ..r
   a4994:	a229 cdf8 e4a3 1d78 aa58 f3da 0aae c3fa     ).....x.X.......
   a49a4:	7cd1 d80c de6b f3ef 9a56 b939 e68e 62c7     .|..k...V.9....b
   a49b4:	cd11 fb94 2589 7b69 6aa3 269f 2603 540b     .....%i{.j.&.&.T
   a49c4:	59b1 0bb0 0588 694c af5f 3f40 280e 3180     .Y....Li_.@?.(.1
   a49d4:	184d 7f5a 945e 5e29 cc2a 7794 862a aed9     M.Z.^.)^*..w*...
   a49e4:	f4f9 5897 92eb d56b 4b4b 2d4a b6cb 555b     ...X..k.KKJ-..[U
   a49f4:	9b48 7a2e 98c0 94ae 7e62 d520 4ea4 45d5     H..z....b~ ..N.E
   a4a04:	2d9c 15d7 11e7 ffc7 605d dffc c0a5 c29a     .-......]`......
   a4a14:	64e9 347a 72ff cb2a 871f 512b e994 9a69     .dz4.r*...+Q..i.
   a4a24:	9d87 9c3d f478 e9ea d3af 6d55 c1be 178b     ..=.x.....Um....
   a4a34:	3d7a 58da 051e 8e33 494b 9c08 072b f481     z=.X..3.KI..+...
   a4a44:	a7f1 9e24 3ba1 484a 36cd 864f 4341 43b4     ..$..;JH.6O.AC.C
   a4a54:	74cb 9a4a f6b5 ea87 2e2c 746b 97b1 38d7     .tJ.....,.kt...8
   a4a64:	e8bf 0997 b41d 070d ef68 3db0 bb97 2f4b     ........h..=..K/
   a4a74:	ea2a 51c2 9c1e edca 6668 245e 8c91 ea84     *..Q....hf^$....
   a4a84:	5269 e4bf c1cd 49df 7732 f6e6 d6c1 194e     iR.....I2w....N.
   a4a94:	ae8c 1bf6 d59f 7881 a4c5 c662 cadc 56eb     .......x..b....V
   a4aa4:	9635 caba 7018 f5df fa25 b21c 257a 1a3c     5....p..%...z%<.
   a4ab4:	6c20 697a a317 3b18 0f53 e6a3 366b 7811      lzi...;S...k6.x
   a4ac4:	fb1c c1e7 f1a8 7191 c117 89d0 430d 0c8a     .......q.....C..
   a4ad4:	9138 fb2e 3636 d6be e27e bdd0 e1a4 6dc7     8...66..~......m
   a4ae4:	9137 3aa7 2f95 f00d 4b24 4635 ee48 0922     7..:./..$K5FH.".
   a4af4:	26a0 1081 8c02 a277 860e 238e f22b c610     .&....w....#+...
   a4b04:	c9da 4529 779c 744e 6a07 0ea2 44c0 6be4     ..)E.wNt.j...D.k
   a4b14:	54c7 9b7c da5b a87d 6596 c74e a3ee bae4     .T|.[.}..eN.....
   a4b24:	83bb f912 aea7 b7fb 1e51 ae3d 37c8 6204     ........Q.=..7.b
   a4b34:	f60c a807 4b7c 15f3 4029 0927 0852 f4d4     ....|K..)@'.R...
   a4b44:	63e9 d75b 7724 4a95 3e73 faf1 585e 99e2     .c[.$w.Js>..^X..
   a4b54:	66ec 351e 320e 9539 9b71 39d0 9aa9 d26e     .f.5.29.q..9..n.
   a4b64:	1238 3c8f fd10 4edb 58c4 12ca 476a de09     8..<...N.X..jG..
   a4b74:	424c 2777 ef3c 1bb3 9e60 19da 3c4c 4005     LBw'<...`...L<.@
   a4b84:	1182 9958 432c 427c 5ef4 485e 6247 6591     ..X.,C|B.^^HGb.e
   a4b94:	04c0 645b 3af6 aecf 6e6e 3156 f3c7 9a8c     ..[d.:..nnV1....
   a4ba4:	b41d 4849 b1ee ed8c 9969 4bef b402 2541     ..IH....i..K..A%
   a4bb4:	d4f9 f8b2 c89e cb3c 3f50 8c77 dbfd 615d     ......<.P?w...]a
   a4bc4:	4dfe 6b79 6cb4 dbd8 66d4 e56b b3d0 7a40     .Myk.l...fk...@z
   a4bd4:	1496 daab 833f 3173 28c7 b693 70a3 2d72     ....?.s1.(...pr-
   a4be4:	169c cd04 3737 d215 6b71 0037 46da 3e90     ....77..qk7..F.>
   a4bf4:	1b8c 57e0 9f91 8ef4 27d9 8859 f60d d9dd     ...W.....'Y.....
   a4c04:	f158 86d0 e702 17fc 8500 73f2 fd20 3533     X..........s .35
   a4c14:	6f9c f893 bd13 4abb b78e f9e5 f2d1 daf2     .o.....J........
   a4c24:	82cc a98c 5bc1 7455 9ecd 435c 4b38 f463     .....[Ut..\C8Kc.
   a4c34:	4d5e de0e 85f1 6afc 47ae cb25 2a2e 9abc     ^M.....j.G%..*..
   a4c44:	ba97 3042 3f17 5d61 f2be 2f86 e52a 995c     ..B0.?a].../*.\.
   a4c54:	35ce 7874 a802 992d ade0 3daa 256d e4bb     .5tx..-....=m%..
   a4c64:	5658 2c24 4d6c 9994 7c8f 74d3 5808 dc8c     XV$,lM...|.t.X..
   a4c74:	856d 3055 88da c06c 841c 7b2d b0cd 7526     m.U0..l...-{..&u
   a4c84:	238f 33bc 2b8c 2b31 722e d04f c48d 0c13     .#.3.+1+.rO.....
   a4c94:	a6c0 db8d 8d26 b3dc 6c93 c70a 47c0 d999     ....&....l...G..
   a4ca4:	5976 bc8d 8482 a52d fd08 d738 4471 ee91     vY....-...8.qD..
   a4cb4:	95fe e15f 69e9 c56e c567 45fc aca5 cbe0     .._..in.g..E....
   a4cc4:	b0e8 fb64 b4eb b496 a940 b866 19e4 f386     ..d.....@.f.....
   a4cd4:	0805 8da6 733d a53a 9d80 581a f903 a580     ....=s:....X....
   a4ce4:	e9b4 1c00 b459 7430 ee4f b439 53e1 c78c     ....Y.0tO.9..S..
   a4cf4:	709c e449 c4fb be32 69b9 39b4 9a65 0cfb     .pI...2..i.9e...
   a4d04:	6e68 d9b7 79df aaa4 533d 9f82 9b3c 4cdd     hn...y..=S..<..L
   a4d14:	2fbb 6181 df45 5b90 ce9a b73b 3abf 913f     ./.aE..[..;..:?.
   a4d24:	01c6 68aa 57b3 d56f 1258 7a34 9782 7fc6     ...h.Wo.X.4z....
   a4d34:	2faf 574e 3bdc 76e7 cfdd 5efe 7fdd ea35     ./NW.;.v...^..5.
   a4d44:	6fb6 3b80 90a6 9600 ecee 39dd 65ff 9cd3     .o.;.......9.e..
   a4d54:	793f 92fd a782 6dbc 69f6 2153 821e 31b5     ?y.....m.iS!...1
   a4d64:	8eea ebd9 2cf8 526f 8c37 dd5e 5ab3 f417     .....,oR7.^..Z..
   a4d74:	348d e5ba a81e 30be ee7f 4c7d 56ae b74b     .4.....0..}L.VK.
   a4d84:	3fd3 8b00 6716 d399 9973 499b bb69 cfe1     .?...g..s..Ii...
   a4d94:	6563 e73f 15d4 2c07 6901 cf76 1e42 233f     ce?....,.iv.B.?#
   a4da4:	68f2 067c 570c f255 bbfb 77e6 ba3a 743c     .h|..WU....w:.<t
   a4db4:	f653 9e3d ee56 93c7 556c b7d2 f91f 259b     S.=.V...lU.....%
   a4dc4:	2866 d3e3 2527 7479 a26d f801 dcd2 30cd     f(..'%ytm......0
   a4dd4:	df65 026e cc0e 909f 68af f752 7f6f 7e44     e.n......hR.o.D~
   a4de4:	fbac b15b a394 09fa 6265 efcd f7cc 9d38     ..[.....eb....8.
   a4df4:	9420 fd22 74d5 a291 0240 d133 c070 8344      ."..t..@.3.p.D.
   a4e04:	1b3b 0acd b0f9 2d8e a876 4721 f6d9 ff95     ;......-v.!G....
   a4e14:	beac 81ca c671 a65f 59b3 3c96 4581 dfdb     ....q._..Y.<.E..
   a4e24:	b8c3 52e2 a430 1ece 02ad 1a44 2231 7f6f     ...R0.....D.1"o.
   a4e34:	9a78 46cf 49ce 8bd5 2fbc e1cc e765 728b     x..F.I.../..e..r
   a4e44:	5dd1 b92f ef91 db94 d60c 271b 0ba7 f0fe     .]/........'....
   a4e54:	2410 ed37 5a76 bcb1 c4a2 6602 9787 b505     .$7.vZ.....f....
   a4e64:	e4bf 759e 5376 cd70 9f64 8b2c cf6e bbb8     ...uvSp.d.,.n...
   a4e74:	7b08 e140 361c 7e85 baaf 6964 baa3 74a5     .{@..6.~..di...t
   a4e84:	b75d ce75 0deb a436 1e48 ff40 9a6c 69f2     ].u...6.H.@.l..i
   a4e94:	8cde 9237 e9a0 28c4 b947 448f c01a e437     ..7....(G..D..7.
   a4ea4:	b996 f23b 288d cb92 c89d f850 f26e 6a90     ..;..(....P.n..j
   a4eb4:	4e14 cec5 d50e ae44 b4a6 2e8f e7cb de4b     .N....D.......K.
   a4ec4:	940e fb61 32f9 7ce6 3485 2ca0 0a70 f60d     ..a..2.|.4.,p...
   a4ed4:	5384 49d3 a5f8 f099 8a6d 44bb 72a6 2460     .S.I....m..D.r`$
   a4ee4:	b24e fc05 906c ce42 d237 30cf c3f7 7e9b     N...l.B.7..0...~
   a4ef4:	9af4 a7c4 6fcb e97d b437 49d2 20ef cd09     .....o}.7..I. ..
   a4f04:	a6fe 3d71 1d45 ebd8 5b66 312b 7e8d fb63     ..q=E...f[+1.~c.
   a4f14:	2a9f 9790 c3d4 9a28 0192 e00f 959a cb31     .*....(.......1.
   a4f24:	5a9a 719c 25a0 534f 8d64 7065 33dd 1434     .Z.q.%OSd.ep.34.
   a4f34:	4253 0ea9 6c0f 95fd c88e 328b a99c c32d     SB...l.....2..-.
   a4f44:	0a31 ec57 d827 fb8f 578e a954 effb 8f98     1.W.'....WT.....
   a4f54:	fd05 71b9 3db0 5cb5 e4f2 96d2 a901 5233     ...q.=.\......3R
   a4f64:	487d 5b02 c2b1 4851 4a45 4a4d 1320 fbfe     }H.[..QHEJMJ ...
   a4f74:	7243 0025 091c cb03 d1ca 0e8d 1e60 a552     Cr%.........`.R.
   a4f84:	67d3 e23a 53ca f78a 2a85 86f9 b111 5ab6     .g:..S...*.....Z
   a4f94:	ee77 5ac1 83a0 763c 8d5b 6234 3bad 2258     w..Z..<v[.4b.;X"
   a4fa4:	8905 a3af 22ea 35c5 b693 92ca 1307 5935     .....".5......5Y
   a4fb4:	5fe6 634f 38e0 6187 7939 b94d a5d1 8260     ._Oc.8.a9yM...`.
   a4fc4:	a25f b4c8 b3b8 7443 cb1c 4645 6254 942f     _.....Ct..EFTb/.
   a4fd4:	4a7a b85d 78d1 24b0 447b 45a0 a66b 0345     zJ]..x.${D.Ek.E.
   a4fe4:	e2d1 e0b2 dffc d743 cd35 ee06 4b86 e068     ......C.5....Kh.
   a4ff4:	1e77 dac2 f6be ad7c 9eaf cadc 483e 6d96     w.....|.....>H.m
   a5004:	74a4 743c 462f 5017 45d5 5bbc e643 da71     .t<t/F.P.E.[C.q.
   a5014:	87bf 2b02 380e 8900 02cb 3fed 6527 d5e4     ...+.8.....?'e..
   a5024:	ba65 12cc bc2f 3744 5d26 2fb9 6e75 8734     e.../.D7&]./un4.
   a5034:	159e 582b 4f03 c45c 35d1 0de6 b153 3344     ..+X.O\..5..S.D3
   a5044:	3589 595e 1e45 64fb c4f0 eb65 48f3 f39b     .5^YE..d..e..H..
   a5054:	5f32 e225 1a68 d04f 599b 031d a0c4 b81b     2_%.h.O..Y......
   a5064:	ccba 69e0 75d4 bf68 e0ac 2274 784e 4767     ...i.uh...t"NxgG
   a5074:	c235 623e 7ef0 8eaa 6053 7293 0e8e 745d     5.>b.~..S`.r..]t
   a5084:	a371 6793 410a 41c5 87f8 5646 8ba8 3c67     q..g.A.A..FV..g<
   a5094:	6d22 61c6 37c0 dcba 0c4b 74bc 7c4c 276b     "m.a.7..K..tL|k'
   a50a4:	1b38 11d1 42a5 1057 23ab 039c 2a14 258b     8....BW..#...*.%
   a50b4:	74eb 0229 d0fc 1626 5d20 61bb 6833 562a     .t)...&. ].a3h*V
   a50c4:	414f f5af 9df5 fafe d82e a21f 128c 2c80     OA.............,
   a50d4:	c526 cd1a e51d 94f2 a622 51ed a114 9247     &......."..Q..G.
   a50e4:	fdee 98e7 ebee c44d 1c47 3042 741c 5ba3     ......M.G.B0.t.[
   a50f4:	61e6 61b0 0a1e c8d1 8bcf 91dc d3e8 dd39     .a.a..........9.
   a5104:	633d f759 598c 99de 0df2 9176 7bcc 280e     =cY..Y....v..{.(
   a5114:	d5d4 7229 f093 0a76 8604 be87 d849 df26     ..)r..v.....I.&.
   a5124:	1e78 a920 0b41 0319 02f8 06ba bee4 b912     x. .A...........
   a5134:	d885 de05 6085 2ae7 d9fd 560e a6c6 d8df     .....`.*...V....
   a5144:	7377 82ab 8727 1858 59bd 5f7a b73a 142e     ws..'.X..Yz_:...
   a5154:	4ca4 f55a 9b9e 8c2f 5081 c995 cc0f e031     .LZ.../..P....1.
   a5164:	87e6 377d 968e a5a3 6c92 459c a9d4 eca5     ..}7.....l.E....
   a5174:	55cf 2ab4 33fc a191 57ae 4516 898b f2d4     .U.*.3...W.E....
   a5184:	90e2 7833 2051 02ae ff21 0b02 a67d 8804     ..3xQ ..!...}...
   a5194:	da57 6bdf 5647 13aa 09c7 d6ff 3ae6 29dc     W..kGV.......:.)
   a51a4:	5390 76dc 8638 e257 3f9d c66b 99be a51b     .S.v8.W..?k.....
   a51b4:	009c c45e bcb5 f032 22be f008 8da4 ba16     ..^...2.."......
   a51c4:	3334 b94a f3cf f8ba 4d25 902e d76f 43da     43J.....%M..o..C
   a51d4:	d127 5c54 2746 204a 1170 d991 c2a2 db21     '.T\F'J p.....!.
   a51e4:	2951 18fd 5e30 b5c3 52c7 2c07 a853 66a5     Q)..0^...R.,S..f
   a51f4:	2715 91e9 2ad6 9c4c 1df8 6a5d 04ab fd12     .'...*L...]j....
   a5204:	8cc0 5403 a81d 2ef6 f183 e260 445f 1c07     ...T......`._D..
   a5214:	e1d1 fa32 3fd9 7751 2a3e 5e13 62ea 550e     ..2..?Qw>*.^.b.U
   a5224:	fa24 f20e 5850 03c1 2025 5062 759c 1e04     $...PX..% bP.u..
   a5234:	9b9b 5e08 682b 5c4d 49e8 714d 4ee2 5b2b     ...^+hM\.IMq.N+[
   a5244:	3483 8136 7bc0 33bd 2d38 dd24 a406 81b2     .46..{.38-$.....
   a5254:	ba7d 0cf7 06f4 c549 9c29 2498 14b3 7c05     }.....I.)..$...|
   a5264:	de90 af51 fcc8 247d 2365 f263 8147 4c4b     ..Q...}$e#c.G.KL
   a5274:	3c46 8952 41da ab2b 7786 33dd 5aba 598d     F<R..A+..w.3.Z.Y
   a5284:	32c8 3fbc d6b0 6a6c b008 727d 3e47 efe9     .2.?..lj..}rG>..
   a5294:	420d 369d ee56 27c6 3a90 d740 9fc3 066c     .B.6V..'.:@...l.
   a52a4:	e1fd 84b6 3d22 8d00 ec98 0244 ed81 eedb     ...."=....D.....
   a52b4:	6a10 392c 33bc 2410 9206 b2f8 bc8d 1e91     .j,9.3.$........
   a52c4:	c4f6 b049 af01 7ac3 74ac 3248 acdc 2270     ..I....z.tH2..p"
   a52d4:	26bd 8e48 0934 e969 88d3 bc95 3027 adc2     .&H.4.i.....'0..
   a52e4:	98a9 598b c2b4 5313 6fea d76d cc9a f89a     ...Y...S.om.....
   a52f4:	fe73 1f64 4082 ce91 eaf1 e563 365e d686     s.d..@....c.^6..
   a5304:	0bb6 b2a7 1598 6f86 ce37 cab0 1d00 2178     .......o7.....x!
   a5314:	9024 846b 6469 d66f 02dc c417 f3ed 3fa8     $.k.ido........?
   a5324:	de34 ac3b 241d 913d b129 34dc 9a4a 0ac1     4.;..$=.)..4J...
   a5334:	3257 e158 44a4 9d58 858a fe02 4305 b87c     W2X..DX......C|.
   a5344:	17d0 8a51 d142 2f15 46cd 9bcc 311b 3677     ..Q.B../.F...1w6
   a5354:	67e2 bc34 0d54 652f 4bc3 786e c91a 280c     .g4.T./e.Knx...(
   a5364:	9c56 84d0 98c6 8730 53a4 c414 99aa 2477     V.....0..S....w$
   a5374:	6ac8 39eb 249f 3b22 1e9a 2a33 a8d3 344b     .j.9.$";..3*..K4
   a5384:	1a90 28ca dea1 d701 8322 4e26 3829 3422     ...(....".&N)8"4
   a5394:	c0a9 5d40 e6bf 1470 9f64 fc8c 0673 9dd5     ..@]..p.d...s...
   a53a4:	8834 2017 89ee 460e 190f 2841 9585 9c97     4.. ...F..A(....
   a53b4:	b809 6c98 9433 1b67 dca0 abf2 9ce5 c8b9     ...l3.g.........
   a53c4:	2960 b68f 6692 8611 7ae1 e4d7 00ab 239b     `)...f...z.....#
   a53d4:	3867 23e6 9e6e 4515 0969 5499 ef38 430d     g8.#n..Ei..T8..C
   a53e4:	8e55 b4dd 0656 f053 42b5 6658 9197 9c6f     U...V.S..BXf..o.
   a53f4:	444f c243 659b 042b 76c6 91cc 1565 f343     ODC..e+..v..e.C.
   a5404:	f93b 8a01 11fb 87f1 cafd 2252 b91c 1606     ;.........R"....
   a5414:	84b7 5f23 3f29 e690 14db da6d 86c9 68eb     ..#_)?....m....h
   a5424:	1ec5 7721 a676 8fb7 1c78 8a15 fc81 f143     ..!wv...x.....C.
   a5434:	319a 4b42 c83b 5439 74a9 49b7 3683 e441     .1BK;.9T.t.I.6A.
   a5444:	cc82 0d08 66c7 7e37 4d75 e40d 7aaa d15c     .....f7~uM...z\.
   a5454:	4b01 01cd e40b b936 93f5 e825 3640 a471     .K....6...%.@6q.
   a5464:	4838 4891 be09 e4b1 584a 2f82 5069 43ff     8H.H....JX./iP.C
   a5474:	716c 234f 157d ac80 2219 521a 8a2e f8eb     lqO#}....".R....
   a5484:	7610 3554 d04f 0783 d4fa 9797 2f04 5450     .vT5O......../PT
   a5494:	3016 5def ed6a c90d 7df8 390b 1751 f900     .0.]j....}.9Q...
   a54a4:	2b39 f2c9 a52c 008a f795 2cb8 2be3 38a4     9+..,......,.+.8
   a54b4:	f158 8ac5 a325 34bd 2f61 9d4d 6aa3 c8b7     X...%..4a/M..j..
   a54c4:	22b3 e19e a9e6 921b 02b6 0dfd 3693 2aff     ."...........6.*
   a54d4:	45ab 17af e847 39e0 7e8f 8c97 b4a1 4fde     .E..G..9.~.....O
   a54e4:	caa4 3a04 c161 541f 7899 f955 7585 1397     ...:a..T.xU..u..
   a54f4:	4c68 22c1 f5bd 2e28 2565 2a78 4e29 7bf3     hL."..(.e%x*)N.{
   a5504:	d3c0 718f 634f 4eb8 138c 7784 8f84 242b     ...qOc.N...w..+$
   a5514:	89b9 c760 7d90 38e9 f8a3 957c 625f be38     ..`..}.8..|._b8.
   a5524:	d02c 6f21 0eea 1d4a 984d 3dd4 cb98 1967     ,.!o..J.M..=..g.
   a5534:	933b 2976 565c 9c72 81bb 1def b419 58d0     ;.v)\Vr........X
   a5544:	0057 0074 d881 0ef7 a9c9 c93e 8289 9dcd     W.t.......>.....
   a5554:	f6db 8581 344c 990b 1628 0832 ff78 5921     ....L4..(.2.x.!Y
   a5564:	3956 9017 dd14 9ec5 3c2f 56d7 a08d 2b86     V9....../<.V...+
   a5574:	903b 4ce1 b4cd 89e7 4c15 3a99 e82f 4659     ;..L.....L.:/.YF
   a5584:	82e9 414e d167 21b5 f700 dcd4 fa58 f085     ..NAg..!....X...
   a5594:	9262 78c7 1a4a a44b ee04 4635 b07d 1c61     b..xJ.K...5F}.a.
   a55a4:	ff36 a35b 4c75 631b 8bbb ba7f d1b9 a59b     6.[.uL.c........
   a55b4:	21ff 27de 8859 6825 a2d9 da6b 7591 d6bb     .!.'Y.%h..k..u..
   a55c4:	3fbe 4b63 7b57 2bea ea67 4b45 4073 e474     .?cKW{.+g.EKs@t.
   a55d4:	3e87 3f3d 4f8b eb49 d632 7877 b0e8 3d22     .>=?.OI.2.wx.."=
   a55e4:	b53b 9703 0159 28a8 bb54 3e8a 9035 a771     ;...Y..(T..>5.q.
   a55f4:	2306 2c32 caab e469 2b61 8a61 ded5 4d39     .#2,..i.a+a...9M
   a5604:	a3e7 b893 be4a 27be 1a7e df64 7ebd 2d92     ....J..'~.d..~.-
   a5614:	ff1e f8f8 c79b eff8 d9e0 6ffd 3f1e e1fd     ...........o.?..
   a5624:	e3f1 8fa7 505f a602 853f cf3f 0e0f efe1     ...._P..?.?.....
   a5634:	8beb f228 8944 69bc 3d2e e7a5 722a 50d7     ..(.D..i.=..*r.P
   a5644:	1db4 d8d4 452e 2828 87ed 6c9a b526 fdf7     .....E((...l&...
   a5654:	275b 0000 4069 8c31 1b49 f2ce 5a28 d9d2     ['..i@1.I...(Z..
   a5664:	aaa9 16b5 8dfa 685c c0cd 9627 f0d1 ba21     ......\h..'...!.
   a5674:	0cfd f7f6 2558 4ec2 2606 07f5 b320 403f     ....X%.N.&.. .?@
   a5684:	3261 af52 8ed7 6022 c187 ed69 d45c d874     a2R..."`..i.\.t.
   a5694:	d685 1aed ebdc eeba 1a3a a466 cb50 000f     ........:.f.P...
   a56a4:	1fb0 ef70 e053 820d cb4a a07f 5f96 f9f9     ..p.S...J...._..
   a56b4:	56a4 e80a 2396 ce8e c089 342f 0113 fac5     .V...#..../4....
   a56c4:	e273 6f92 1218 969b eede 9f93 ec46 0234     s..o........F.4.
   a56d4:	7af3 50d2 ecaa 7832 75bd b932 ce9e 7cd9     .z.P..2x.u2....|
   a56e4:	c9f6 9a5a ac76 f58e 2ffa 3ab6 8611 c47b     ..Z.v..../.:..{.
   a56f4:	ccbb 4927 c756 91bf b44d 7f79 d237 5656     ..'IV...M.y.7.VV
   a5704:	ae00 1780 0cd3 e29f b4cb 8bc2 67ff 7faf     .............g..
   a5714:	fe7a ebfb 8757 5f8f 787c dbfc b7f3 8a64     z...W.._|x....d.
   a5724:	f2a5 0329 b2ad e8bb 4f2f 3a7f 7e7c 0b20     ..)...../O.:|~ .
   a5734:	4a4e 2c5d a5d4 b77c 2d2b 2e1b 4451 5e46     NJ],..|.+-..QDF^
   a5744:	0f23 c2ef deb1 ec2c a245 0910 6385 acfe     #.....,.E....c..
   a5754:	4833 44cf 9832 ea2b 26d3 c071 6c71 2475     3H.D2.+..&q.qlu$
   a5764:	b884 0c04 a706 9b38 8cef ede2 18a8 51c5     ......8........Q
   a5774:	5f6c 3480 d963 b44a b19f 1d4e abc6 cb65     l_.4c.J...N...e.
   a5784:	0c3b e6fb 9744 1ac4 c57e 1e91 2b52 cc51     ;...D...~...R+Q.
   a5794:	dc42 64ad 692d dc12 db0b 0d84 fcc8 65e5     B..d-i.........e
   a57a4:	6dac e437 78cd 9997 6174 a6b1 57e5 632f     .m7..x..ta...W/c
   a57b4:	8ee1 dfbe 7d18 2f20 6ff5 8aab 30fc 76e4     .....} /.o...0.v
   a57c4:	bc5d 0a3f fdd7 2042 5cd9 d392 aea7 3bb5     ].?...B .\.....;
   a57d4:	1c45 e692 6a77 3230 2936 7275 351a 1470     E...wj026)ur.5p.
   a57e4:	85f0 5ed3 19da 7431 1834 26af db53 7c46     ...^..1t4..&S.F|
   a57f4:	5bda 81f5 0ef7 b6e7 cb58 1e76 5bd4 e0f5     .[......X.v..[..
   a5804:	d0bb 6f18 bcaa cdd4 c1d7 6f7a 7e30 5b11     ...o......zo0~.[
   a5814:	80a6 c756 8d27 d871 2233 c752 df84 779a     ..V.'.q.3"R....w
   a5824:	e5f5 6fc9 1174 cfc9 a2ef c372 84fd 6fb6     ...ot.....r....o
   a5834:	da72 e9e2 9c49 fb26 0e4e db51 3a8d dedf     r...I.&.N.Q..:..
   a5844:	ede1 0a0a 64d7 b0db ef07 97e8 9b9b 7cc4     .....d.........|
   a5854:	0dfa 5ea0 fa7f e46d 370e 396d 2029 7cbf     ...^..m..7m9) .|
   a5864:	e32f fe08 eafb dc45 83cb 3e3b 19fc 4006     /.....E...;>...@
   a5874:	be99 e188 1268 b774 fa1b c6ba 3d9e 6805     ....h.t......=.h
   a5884:	66fc 5f9f e45f 17b6 5650 47b6 a2dd 65ab     .f.__...PV.G...e
   a5894:	cc52 d8b7 f3fa 1897 491d db6e 593c 4da7     R........In.<Y.M
   a58a4:	cec2 47ce ec96 b46f 087d 869a cc6e 0bce     ...G..o.}...n...
   a58b4:	6c0c d44d 0be4 015d 4b93 6ad5 5a49 a804     .lM...]..K.jIZ..
   a58c4:	c711 a37e 855d a505 8f32 b20e 5e90 8edd     ..~.]...2....^..
   a58d4:	9516 eab1 646d c52b 6a86 1d87 b0a6 38df     ....md+..j.....8
   a58e4:	bdd7 ec5c 7263 32f5 5a5e bb62 3696 d01f     ..\.cr.2^Zb..6..
   a58f4:	255c b0d2 a215 a95c d62f 86fa 4824 1be3     \%....\./...$H..
   a5904:	0cd7 2c1f a24f 61ce a2f1 c8ec be8d e33d     ...,O..a......=.
   a5914:	5d55 7870 053d afd7 ba62 dab8 33fe 6b26     U]px=...b....3&k
   a5924:	780d ba8f bea1 4eab b296 9335 8231 4c33     .x.....N..5.1.3L
   a5934:	84e9 f8ff 7d7c 841d 9db0 5d48 a501 ea6e     ....|}....H]..n.
   a5944:	f898 1d0e 729d 073c a8b6 4ed8 d80d 5230     .....r<....N..0R
   a5954:	86ff 64ad ec64 c8ab 8392 037d eb74 7c5b     ...dd.....}.t.[|
   a5964:	7be9 54bd 8ec4 850e ffcc 1285 055d 206b     .{.T........].k 
   a5974:	be26 b941 5766 0ebe 9e58 f9dc 69e7 f471     &.A.fW..X....iq.
   a5984:	ffb8 32bb a0d2 45a0 0567 0bc5 709e 26bd     ...2...Eg....p.&
   a5994:	589e b1b8 d96a 1405 14b6 2f7c 1803 b997     .X..j.....|/....
   a59a4:	5625 875c 6339 596f b9a4 8a8e 901f 72d3     %V\.9coY.......r
   a59b4:	da19 3eb0 41c3 c3ff e5eb f83d 3415 9f37     ...>.A....=..47.
   a59c4:	f71a 1cc8 9f42 de6c 8d54 b0dd 0e4c ee7f     ....B.l.T...L...
   a59d4:	f360 603f 428b fb31 42ac 5d24 efdd 403d     `.?`.B1..B$]..=@
   a59e4:	0f62 3eea f320 8a2c 838f f89d 3485 d516     b..> .,......4..
   a59f4:	ced6 9e4d dd51 7ed8 afc3 25c9 b9b0 965d     ..M.Q..~...%..].
   a5a04:	e0c8 794f 4bd3 fe44 38d3 272a bb39 db6b     ..Oy.KD..8*'9.k.
   a5a14:	f186 7c3d 96c8 a43b bd28 4b81 bdc4 62d6     ..=|..;.(..K...b
   a5a24:	3cd9 4915 f517 6044 c3e4 db87 fad8 f79d     .<.I..D`........
   a5a34:	7627 e1f8 a8b2 45aa 969c 4fef 4c14 5e38     'v.....E...O.L8^
   a5a44:	5186 44b2 fd81 c55e a867 f811 f31b c67c     .Q.D..^.g.....|.
   a5a54:	6a0b 3553 de17 21b0 a26b 2912 0590 f7c2     .jS5...!k..)....
   a5a64:	4605 f5cf 9aba 1af7 6782 faa9 7755 a3c9     .F.......g..Uw..
   a5a74:	2d59 58c9 2588 1ecd 5e8f d6de d64e 4edd     Y-.X.%...^..N..N
   a5a84:	b1b6 cb1d 293f 168d d197 0406 5ff2 84a0     ....?)......._..
   a5a94:	160b d63e 072a 8f96 2eca 92c9 a12f 210d     ..>.*......./..!
   a5aa4:	ae43 6928 a936 2369 50aa baad 4e66 0f75     C.(i6.i#.P..fNu.
   a5ab4:	a848 cca4 8894 41be 2d6a 9e8a 526a 29ed     H......Aj-..jR.)
   a5ac4:	8efb 5163 5f06 53d5 04bb d06f c5d0 4522     ..cQ._.S..o..."E
   a5ad4:	adef 01f2 70d8 fd54 e18c fb67 5b4f 2125     .....pT...g.O[%!
   a5ae4:	de8d 4612 2ba1 0391 a0d9 58a4 6410 60cb     ...F.+.....X.d.`
   a5af4:	1df4 ba8b e452 6c72 f6b5 73fa ec14 4570     ....R.rl...s..pE
   a5b04:	d02d befa bea1 ddbe bea1 1d6e 4694 9cfb     -.........n..F..
   a5b14:	4035 7aa5 db5d 119c a9d5 da5e f7de eeb5     5@.z].....^.....
   a5b24:	05a2 3230 a7af 382d 6d6c 96f8 59d5 b464     ..02..-8lm...Yd.
   a5b34:	a001 367d c378 64db 6c57 36f4 5297 1440     ..}6x..dWl.6.R@.
   a5b44:	b3e9 2411 2da3 400b ec7e a8d2 8dc7 634f     ...$.-.@~.....Oc
   a5b54:	ad62 aec0 0d21 8bc5 1ecf 2052 60dc a6b4     b...!.....R .`..
   a5b64:	0a98 bb4a 4881 4f6c 0775 b21d 2be6 e330     ..J..HlOu....+0.
   a5b74:	520f 73e9 4d19 877c ecdc 9152 c8b3 b68e     .R.s.M|...R.....
   a5b84:	8406 97a5 4d27 d028 afd6 d7e7 2713 c439     ....'M(......'9.
   a5b94:	4f50 92b6 4d79 6e01 ef31 c526 e1bc 4506     PO..yM.n1.&....E
   a5ba4:	633e d82d 795e f0bd db6b 809c 11a3 6571     >c-.^y..k.....qe
   a5bb4:	1026 92ae e11d 54c5 d716 de29 e845 2916     &......T..).E..)
   a5bc4:	b4c7 2122 9467 1309 c5fb d6ef 8e3d b4ba     .."!g.......=...
   a5bd4:	81a3 93bf 7580 f4fb dbfa 163f 3737 0daa     .....u....?.77..
   a5be4:	3f38 4ad0 ba46 05b9 e27c 2eaa 02df a4ed     8?.JF...|.......
   a5bf4:	d35a c8dd 6e84 7e61 6589 63f2 e4d8 4978     Z....na~.e.c..xI
   a5c04:	f753 807a 6060 80a9 c6e9 6adc e165 4dbb     S.z.``.....je..M
   a5c14:	95a4 6302 86d9 95b4 a3d6 e74f 9246 bd7f     ...c......O.F...
   a5c24:	9236 5742 3d41 d6e8 93e5 a94a 6c88 4b4b     6.BWA=....J..lKK
   a5c34:	bf79 ca50 22fb 9cee 1264 12e6 6c57 1e22     y.P.."..d...Wl".
   a5c44:	c418 5b64 bc3c adce 1b69 01c1 5e8e 9221     ..d[<...i....^!.
   a5c54:	20b6 571a a680 5a6b f207 e3e2 487b 4344     . .W..kZ....{HDC
   a5c64:	6d09 da6d 2601 dba3 2c81 a93e 6c8a 6f55     .mm..&...,>..lUo
   a5c74:	b204 2cb6 c493 e18b ddd6 f2c1 b472 7cc5     ...,........r..|
   a5c84:	7aab e923 ee26 ad32 739e 403f 81a7 004a     .z#.&.2..s?@..J.
   a5c94:	7d6a 4dfa fa7f cfab 082e 86b6 c183 b460     j}.M..........`.
   a5ca4:	1e85 4f60 8a49 f94c 2c7f 5e26 7a79 fb12     ..`OI.L..,&^yz..
   a5cb4:	f77b 8bef f32d 3bb3 1fb8 4ec0 51ad c93e     {...-..;...N.Q>.
   a5cc4:	0e32 ea0f 6d1b 4ac1 0c53 adb9 c8bc a813     2....m.JS.......
   a5cd4:	28ad 4967 97d9 1e7d beb4 f1e3 cf3d 8b8a     .(gI..}.....=...
   a5ce4:	8b70 eb2d 6521 4f19 fad3 c42a 4616 e630     p.-.!e.O..*..F0.
   a5cf4:	100c b860 6715 45cb cbec d16f 60fd 1804     ..`..g.E..o..`..
   a5d04:	9636 7772 5013 9607 1dfe f7ce 46a1 ceee     6.rw.P.......F..
   a5d14:	c3b7 7982 5582 de20 8b2a 36bb 42ea fd1f     ...y.U .*..6.B..
   a5d24:	ea0e 8c72 b660 e0bc 1476 1c23 a72e 536b     ..r.`...v.#...kS
   a5d34:	d638 396a e35a 8c02 e656 de0e d9de 5840     8.j9Z...V.....@X
   a5d44:	10f1 0bac a9d0 fa83 5b71 eec1 3acb f233     ........q[...:3.
   a5d54:	72ed cb63 aaba 727e 2957 9e02 1e6e cdd5     .rc...~rW)..n...
   a5d64:	199b 179f 1a4c 72b7 37d6 ce81 ab94 d500     ....L..r.7......
   a5d74:	0c63 5991 abea ab85 8558 3ed0 f60b da07     c..Y....X..>....
   a5d84:	d62b 7cc8 8baa 3f60 5fd2 c71e e226 c724     +..|..`?._..&.$.
   a5d94:	ece9 0e39 fbdb 1be8 dd9d f4f7 e36b 35cb     ..9.........k..5
   a5da4:	e8a0 48c0 8d65 b89c 64b6 c482 51d9 d86a     ...He....d...Qj.
   a5db4:	a88b 347e a670 e9f4 5022 eabe 432d b2b4     ..~4p..."P..-C..
   a5dc4:	dfa9 264c ec5d b8eb c96d b8e5 b63c 20f4     ..L&]...m...<.. 
   a5dd4:	e3ca 6e51 216b a4c1 eaa4 0746 731d 2be1     ..Qnk!....F..s.+
   a5de4:	ea5d 78a0 714d eff7 9750 eb55 3c4b b727     ]..xMq..P.U.K<'.
   a5df4:	d640 55b1 b62a 35ac fc48 313b 0a6a 0f09     @..U*..5H.;1j...
   a5e04:	ba71 a1e8 5896 1a10 057d fd19 afb4 bc94     q....X..}.......
   a5e14:	a730 44d5 b65a 79bc f0e1 0439 8a83 8088     0..DZ..y..9.....
   a5e24:	739c 378a a397 f8d8 88cb 3cd5 5154 147d     .s.7.......<TQ}.
   a5e34:	8b1f 822c b2ee 0e76 19c5 2b11 804c aff9     ..,...v....+L...
   a5e44:	7a02 9f67 a807 83cb 8f2a f6fa c30a c8b6     .zg.....*.......
   a5e54:	6abb 3a67 0c63 785f aa85 34c8 5369 d0a5     .jg:c._x...4iS..
   a5e64:	0fb4 82eb 1781 9279 93e7 9855 f989 0b24     ......y...U...$.
   a5e74:	1257 adfe 998f f4c8 b344 43ca cb79 1764     W.......D..Cy.d.
   a5e84:	cba5 5f03 a14f 24c5 3f63 74df ca8d 87f0     ..._O..$c?.t....
   a5e94:	a977 4c08 9d7c c0ca 2eaa eb51 7e5d 5c10     w..L|.....Q.]~.\
   a5ea4:	b436 3736 8dbb 5593 a2a2 daf1 150a 97ea     6.67...U........
   a5eb4:	87ca 61b0 b5b3 83a2 6862 71b0 e50c 5c41     ...a....bh.q..A\
   a5ec4:	ae73 eb52 d282 b2f0 d4b1 7869 9498 a6f2     s.R.......ix....
   a5ed4:	b074 040d fa81 ddc2 528b 1494 0a48 8296     t........R..H...
   a5ee4:	b273 27df f48f 1195 ce44 0bc8 7921 6d49     s..'....D...!yIm
   a5ef4:	c0e6 8c34 ac68 3307 70a1 7ca4 5cd3 29ea     ..4.h..3.p.|.\.)
   a5f04:	f52a 9514 14ce b295 b60f 58ea 04e9 9deb     *..........X....
   a5f14:	b19e 7886 5da2 2b66 8164 3227 1f36 8197     ...x.]f+d.'26...
   a5f24:	312c 2592 84ba b268 d114 3e20 3aa3 2867     ,1.%..h... >.:g(
   a5f34:	decc 48c1 5bf1 a47b 5f01 490c 40b0 b94f     ...H.[{.._.I.@O.
   a5f44:	320a d14e 05ce e016 5297 3ae3 6bc6 471c     .2N......R.:.k.G
   a5f54:	7db9 8fff 42b1 5fd0 bf43 069f 1615 9392     .}...B._C.......
   a5f64:	4185 f4a5 e17c 9a8b 74b2 e472 c779 b812     .A..|....tr.y...
   a5f74:	52d6 b053 3c62 eb65 1992 3bbc 76dc 5d03     .RS.b<e....;.v.]
   a5f84:	6060 9555 3474 be38 61b9 3b8d b7bb 6f8a     ``U.t48..a.;...o
   a5f94:	f895 f46f 2a4b 6bf5 3270 6626 77f6 59d3     ..o.K*.kp2&f.w.Y
   a5fa4:	b838 8683 727c c49d a5b7 5815 f116 e8c5     8...|r.....X....
   a5fb4:	ea65 0168 5ae1 37e6 7d37 d5e8 a0a2 275d     e.h..Z.77}....]'
   a5fc4:	d535 0d88 5545 f912 988e 54b1 4792 c795     5...EU.....T.G..
   a5fd4:	84b4 b807 6c6a 8f6d b33c 8641 0520 e378     ....jlm.<.A. .x.
   a5fe4:	808d 78e0 342a 176d 718c b100 8079 0a89     ...x*4m..q..y...
   a5ff4:	cb94 1921 b40c 984a 62ee 990a dae3 38df     ..!...J..b.....8
   a6004:	e431 824c 76ef fb8c bf0f 628c 7cd4 27c8     1.L..v.....b.|.'
   a6014:	a5db 6344 c3e8 f921 1573 b867 5099 2ac3     ..Dc..!.s.g..P.*
   a6024:	5f54 ba02 920b ac8e 1d54 d3dc f494 a4f9     T_......T.......
   a6034:	5f32 a1da 37dc f12a 89b2 9854 7555 a6ec     2_...7*...T.Uu..
   a6044:	4fea 93f4 1150 d876 346e 5cec 4fe3 5039     .O..P.v.n4.\.O9P
   a6054:	35d3 2f91 253f 82b3 5db4 73d1 9b23 e09e     .5./?%...].s#...
   a6064:	4292 055d 25d6 1203 4b5c 47d7 4ae1 269c     .B]..%..\K.G.J.&
   a6074:	5279 44c6 62a7 4cb4 b2f5 6246 bcc9 a546     yR.D.b.L..Fb..F.
   a6084:	82f5 930e a430 e5f0 3a77 2b49 4d33 7fa3     ....0...w:I+3M..
   a6094:	7361 71e2 bca3 9931 965d 2ef1 94cb 92d6     as.q..1.].......
   a60a4:	02ce 42cb 19fa 010a 62d6 318a 113c e68a     ...B.....b.1<...
   a60b4:	d140 d6b8 6a24 d035 e459 478a 2dff b7c1     @...$j5.Y..G.-..
   a60c4:	f884 9459 684d ccd3 7083 a05e 9a17 5729     ..Y.Mh...p^...)W
   a60d4:	1334 717f 2072 33b6 1114 00e1 2a18 2d5d     4..qr .3.....*]-
   a60e4:	b9e2 610c b5da 3075 b710 3ade 5b8b ceb6     ...a..u0...:.[..
   a60f4:	103c 0d8b 675b 5bce f547 ed66 8152 832b     <...[g.[G.f.R.+.
   a6104:	0636 caea fd98 b1b5 5c25 4592 5c7c 0b2e     6.......%\.E|\..
   a6114:	3edf 3b93 d5dc 696c c97d 1e44 92d0 1386     .>.;..li}.D.....
   a6124:	5dfa 5cd2 b189 a771 d2af 09db c869 0f36     .].\..q.....i.6.
   a6134:	c265 8040 969f f2b9 af64 ed5c dfd1 8d7e     e.@.....d.\...~.
   a6144:	cae8 78f6 3307 1c6c 1b79 ff37 f8e4 7d8e     ...x.3l.y.7....}
   a6154:	1183 76d9 eb2a 152b eb61 38d9 a345 52b7     ...v*.+.a..8E..R
   a6164:	441f f524 74db 4d0a 29d5 5824 59b1 9e53     .D$..t.M.)$X.YS.
   a6174:	b2fb ce9f e396 7749 db48 26e1 56e2 034a     ......IwH..&.VJ.
   a6184:	a4ad adb1 1f90 bd48 1325 40d9 a835 97fc     ......H.%..@5...
   a6194:	9b35 13d1 3567 a232 a51e 9940 2d4a 9731     5...g52...@.J-1.
   a61a4:	83e2 8923 cfb4 ff65 a97a 14d0 1d34 4751     ..#...e.z...4.QG
   a61b4:	1573 28b6 6e38 3f92 021c d119 e9ab 48f4     s..(8n.?.......H
   a61c4:	3557 6726 b2f8 4351 4153 056b 88f9 046d     W5&g..QCSAk...m.
   a61d4:	52cc e9ed acb3 5cdd 2140 51bc 661d 3d16     .R.....\@!.Q.f.=
   a61e4:	1b4e b287 ff60 f253 6394 9ad8 4bcc c35e     N...`.S..c...K^.
   a61f4:	ed1a 0eb3 e0f9 a203 4e66 d6d1 cb91 ddb7     ........fN......
   a6204:	9701 711d 6cc5 9877 77a4 0d4a c456 007e     ...q.lw..wJ.V.~.
   a6214:	426e 9c73 bd88 6e81 b90e c2b6 5bc0 963f     nBs....n.....[?.
   a6224:	ddec 9626 8f4b 3d28 d005 57f4 8bd2 6f68     ..&.K.(=...W..ho
   a6234:	b5d8 12ef f294 68c8 130a 8b3f 6f58 5f5a     .......h..?.XoZ_
   a6244:	6115 8e2d c340 119e 65b6 3542 715d 7298     .a-.@....eB5]q.r
   a6254:	784c c641 9b6b 8863 3eea 1dc5 9a3c 3fd3     LxA.k.c..>..<..?
   a6264:	5996 c8cd f41b 7758 85f1 223a 4a75 6684     .Y....Xw..:"uJ.f
   a6274:	cef6 a8d7 2936 a796 9c5c e0cc d7df 6ce4     ....6)..\......l
   a6284:	77c9 f7bd 20c8 1122 3185 d220 af33 a4d3     .w... "..1 .3...
   a6294:	f734 26fd cd4d 6b2f dd10 0c1b ff14 e0dd     4..&M./k........
   a62a4:	7936 fde4 7158 a399 ba58 e25b 370f 6d37     6y..Xq..X.[..77m
   a62b4:	eb42 71ad 3bdd 1a59 b02f f966 41a6 6a78     B..q.;Y./.f..Axj
   a62c4:	7ba5 6b35 f220 c511 9f67 f672 e68d 763a     .{5k ...g.r...:v
   a62d4:	2b0a 422a 7323 a0a5 dbce c626 531d 2c39     .+*B#s....&..S9,
   a62e4:	dc88 a100 0ade 6dad 8232 c805 caed dc81     .......m2.......
   a62f4:	025f 5bd0 6af3 8cfc 2c93 99b9 8e88 0354     _..[.j...,....T.
   a6304:	733e c096 dd6f 7f22 0377 cec8 5b4a 1b75     >s..o.".w...J[u.
   a6314:	64a9 21f2 0794 6802 0c52 b7af d03f 5e7e     .d.!...hR...?.~^
   a6324:	b881 45c9 151e 0deb ff57 2aaf 9972 1b1e     ...E....W..*r...
   a6334:	9a3a 5bd4 394b 6a19 a9d4 286d 28bd 8bed     :..[K9.j..m(.(..
   a6344:	c4eb 2c39 8d6e 09fd 5cdb 61fb e0a5 c8a5     ..9,n....\.a....
   a6354:	2cd6 07f7 1493 4e80 3cc7 d4e6 b2b1 4d08     .,.....N.<.....M
   a6364:	a073 5871 c52b 510a 08db eb5e dc2a cee0     s.qX+..Q..^.*...
   a6374:	3ba0 292a 8625 a783 d58a a094 23d6 4306     .;*)%........#.C
   a6384:	2c15 6f2b 3daa a92a 2da2 4412 f1cd d2dc     .,+o.=*..-.D....
   a6394:	ef1c 913b a51a 5030 13c9 84a9 fe0e a38d     ..;...0P........
   a63a4:	559c 510d 0722 e55d 2934 dbdf 6783 76cf     .U.Q".].4)...g.v
   a63b4:	647e a28c 8d6d 7447 ddf6 7f24 66d2 61dc     ~d..m.Gt..$..f.a
   a63c4:	662e 346b 3616 5e06 275a 1e33 b6fb d85e     .fk4.6.^Z'3...^.
   a63d4:	8740 c44b 0409 fe9a 5acf 8a89 b273 af2c     @.K......Z..s.,.
   a63e4:	9427 0792 9021 d1b3 e979 b627 132e 6559     '...!...y.'...Ye
   a63f4:	3473 c0d6 c74e e7e8 9714 e835 4697 aa0d     s4..N.....5..F..
   a6404:	3f33 f3a5 c1f4 7e17 7a08 06e8 a5a0 b4be     3?.....~.z......
   a6414:	296a 1a27 c63f 1d95 83e1 addd b654 9597     j)'.?.......T...
   a6424:	ea8d 599c 5e40 530b 8346 656e 631c ffc3     ...Y@^.SF.ne.c..
   a6434:	aecb 85ed 7be9 52a7 cae4 4fa9 4aeb 156c     .....{.R...O.Jl.
   a6444:	8ad6 3a9c 9a1b f4c1 4edc 291b cce7 a0d6     ...:.....N.)....
   a6454:	4c68 3d85 3726 0e93 6368 b172 15db a1e3     hL.=&7..hcr.....
   a6464:	a3b9 fb59 7e18 c4e7 1d23 d98c fc23 d8c0     ..Y..~..#...#...
   a6474:	1069 5342 66da bf0a 0ee9 5a4d 6129 71d1     i.BS.f....MZ)a.q
   a6484:	00dd 5b0b fb74 e98f 2acf e358 b5eb 5cd6     ...[t....*X....\
   a6494:	2de3 fbd6 e350 003e 3f64 c5ce 4a2c d3c7     .-..P.>.d?..,J..
   a64a4:	4c7e 3741 79c6 b2b0 8aee 93e6 9841 b36b     ~LA7.y......A.k.
   a64b4:	74a7 f55c 6532 64f0 366c 3f85 4c9b 34c3     .t\.2e.dl6.?.L.4
   a64c4:	7580 2d1f a560 15d1 5580 82c7 e12f b797     .u.-`....U../...
   a64d4:	160f 75e7 4ed2 0f6a 7497 4eda e3db 5d65     ...u.Nj..t.N..e]
   a64e4:	59bf ce85 0b93 636d 2ac2 1ccd a56b f0dc     .Y....mc.*..k...
   a64f4:	d681 7ce2 a143 e8b3 37bc 8c1c 256b 5b1b     ...|C....7..k%.[
   a6504:	cef6 80c7 cf44 fe26 0c99 2a97 b656 ab2e     ....D.&....*V...
   a6514:	eea5 f757 8387 39fe 0f3a 9f1e 96f6 bbfd     ..W....9:.......
   a6524:	bcd6 f870 a816 7fb8 e50a 472d a5dc 1cd1     ..p.......-G....
   a6534:	49a6 55aa 317c 11f4 527e 6b9a dabb 233a     .I.U|1..~R.k..:#
   a6544:	3aad 157d a7e3 6e63 4a1b edc8 413c 56af     .:}...cn.J..<A.V
   a6554:	e7d5 eaad 2971 6b3b 3067 3075 d840 11ca     ....q);kg0u0@...
   a6564:	ecf4 cc08 f8e4 9af0 3386 d752 70b8 71de     .........3R..p.q
   a6574:	1928 beba 2745 f5bb b16d 5181 3cb4 e631     (...E'..m..Q.<1.
   a6584:	f8a9 018a b190 9b9c 1bda c606 a2c7 ba15     ................
   a6594:	7226 6a8e 6e8e 9a13 5906 80a3 229d a4bd     &r.j.n...Y..."..
   a65a4:	428f bac5 5109 6a56 64fc ad97 7d70 3376     .B...QVj.d..p}v3
   a65b4:	5074 971b 76f6 e807 671c 8002 2423 68cb     tP...v...g..#$.h
   a65c4:	a53c 457a 215e 1c6d 1c10 5ccd cd94 8203     <.zE^!m....\....
   a65d4:	9922 928b 880f 465a b1eb a50d 7ec9 c84a     ".....ZF.....~J.
   a65e4:	98f8 098e 3cb5 4a29 527d 1dd4 7ec1 15f4     .....<)J}R...~..
   a65f4:	d4b3 b529 5c1c 3e59 cbae 87b6 3676 b4f2     ..)..\Y>....v6..
   a6604:	61e3 f178 b50c a426 4c3f 2d4e cf76 84d0     .ax...&.?LN-v...
   a6614:	2520 a3df 5413 6123 334d 8dc8 5fd7 263a      %...T#aM3..._:&
   a6624:	db7d bd36 2342 82ef 73d4 0cd0 92bd e9a6     }.6.B#...s......
   a6634:	9248 c1c4 62a8 dbf1 79e3 468d be51 2afd     H....b...y.FQ..*
   a6644:	7db5 6795 2e13 2308 5347 3b95 7cff 7d5f     .}.g...#GS.;.|_}
   a6654:	2775 de00 c46e e1b4 f79d a56f 13f2 0be7     u'..n.....o.....
   a6664:	2ea4 35a8 5584 0ce4 4fc2 6545 067b 6a9d     ...5.U...OEe{..j
   a6674:	51ee 00d6 3978 005a bb55 a31a 0436 0dcb     .Q..x9Z.U...6...
   a6684:	8395 9197 b71a 51f4 8aba b006 bc29 a8bc     .......Q....)...
   a6694:	11bd 807f 2736 08ab c4b5 4189 b09e 7e05     ....6'.....A...~
   a66a4:	4881 7027 20a6 841c e134 205c 99eb e419     .H'p. ..4.\ ....
   a66b4:	fe7e a79c e875 ab55 ba93 c98c 9a28 f5b2     ~...u.U.....(...
   a66c4:	b3bb 14e5 c446 c010 ee3c 360c 8c37 42c6     ....F...<..67..B
   a66d4:	2b7d 4cc5 1e78 2f1c 1603 bb8a fe15 d69a     }+.Lx../........
   a66e4:	438b ee38 74b5 617a 425b eeae e2c0 462d     .C8..tza[B....-F
   a66f4:	fefd 9822 a2f5 cc58 917b 6ff7 d61e 1ab3     .."...X.{..o....
   a6704:	b2a3 bc0b 0b4f d57f 619f f1a4 68ed a68a     ....O....a...h..
   a6714:	854b 9398 3a7d 0b0a afe8 7299 45e5 0a57     K...}:.....r.EW.
   a6724:	4dae 8393 62d1 e8bf 53b8 a85b a4bb 6465     .M...b...S[...ed
   a6734:	3e7f 105a 2c40 e88d a288 2cbf abb5 dd5c     .>Z.@,.....,..\.
   a6744:	f4a4 ec82 63f6 c314 2bb1 8216 5465 3133     .....c...+..eT31
   a6754:	b40b da2b 6416 3e5a 9bdc 0abb 23b0 b686     ..+..dZ>.....#..
   a6764:	5061 ad69 3d49 c829 8f11 91f8 0be5 8521     aPi.I=).......!.
   a6774:	d6d3 6931 be52 f11d be71 40d2 04c9 2095     ..1iR...q..@... 
   a6784:	a52a e2c8 1bb6 d6f7 645d 5bd3 90a4 73f7     *.......]d.[...s
   a6794:	cab0 aa26 8a43 a7f3 40ca fd67 28fc 0e3d     ..&.C....@g..(=.
   a67a4:	c646 1164 2cd8 e376 e62a bb18 5e5b 8ec2     F.d..,v.*...[^..
   a67b4:	4b94 92ca c9a5 96f2 e636 859c c5be e6bd     .K......6.......
   a67c4:	88c7 a83f 9439 7b72 7ee8 30d6 378c f76e     ..?.9.r{.~.0.7n.
   a67d4:	1bad 1a90 b365 bf75 b08f 2893 b7b3 a8f2     ....e.u....(....
   a67e4:	5796 f420 1754 3b00 24b3 d04b 6d9c e744     .W .T..;.$K..mD.
   a67f4:	cd96 7dc6 372c dd78 2750 d542 15cb 50e5     ...},7x.P'B....P
   a6804:	a12b c518 484a 4074 640a 26f7 6073 3015     +...JHt@.d.&s`.0
   a6814:	38de 0b00 9e2f d11b 1cd1 7e31 f93a 08b9     .8../.....1~:...
   a6824:	2b7f 7f02 322a 5868 5b06 8197 5888 784e     .+..*2hX.[...XNx
   a6834:	b373 685d ed97 585b 28f5 7583 81f7 9cfc     s.]h..[X.(.u....
   a6844:	55fc 6f84 30b0 05e0 9b78 82da 7083 c8c0     .U.o.0..x....p..
   a6854:	d326 05b0 9d07 4fbc f3e5 a334 1763 7ab6     &......O..4.c..z
   a6864:	baae 2159 b911 1b4d 791c 92f8 d72c df63     ..Y!..M..y..,.c.
   a6874:	e904 a6f1 0ac0 e59e 1d32 ab7b 5cbf 2514     ........2.{..\.%
   a6884:	25a2 aec0 aa1e 2c7c 8f29 295a c48e 1622     .%....|,).Z)..".
   a6894:	f991 8826 5484 ec02 8c53 96c6 132d 328c     ..&..T..S...-..2
   a68a4:	5547 0b91 0f68 a723 7f43 71b6 c1b0 0dcd     GU..h.#.C..q....
   a68b4:	7934 8c1a 67d0 4f31 79e0 7534 9b22 9067     4y...g1O.y4u".g.
   a68c4:	cd07 814e bbce fc2a b173 260c 85de 0217     ..N...*.s..&....
   a68d4:	6280 146a 4f9d dcbc b70b 7817 5402 04f2     .bj..O.....x.T..
   a68e4:	0f38 0b78 4b79 4842 11f8 9268 2033 ce4b     8.x.yKBH..h.3 K.
   a68f4:	0f22 007b 6a08 1db6 059d 8ad7 1fde 980a     ".{..j..........
   a6904:	b512 d1d5 34df 02a4 806e 392d 001e 4d63     .....4..n.-9..cM
   a6914:	0c9d 2bf8 c13b 953e ec31 912b 6601 45a5     ...+;.>.1.+..f.E
   a6924:	ab56 cd09 ed5c d22e 6dfa 633a 33af 9657     V...\....m:c.3W.
   a6934:	e62b e74d 092f 3304 ddc9 cb79 d4f8 3172     +.M./..3..y...r1
   a6944:	3950 28d6 b19d 65ec c5e0 5d7f 309a 1122     P9.(...e...].0".
   a6954:	f030 f9f1 7e57 27d5 1c40 deee 770f 07ef     0...W~.'@....w..
   a6964:	395f 121c 995f 087b ec6c 08f2 3e98 a398     _9.._.{.l....>..
   a6974:	9689 dc6b 590d 7094 04d7 67be 27ed 98e9     ..k..Y.p...g.'..
   a6984:	652c 7549 5bb6 eaac 660a 6788 d315 cdb0     ,eIu.[...f.g....
   a6994:	38c1 c34a 0c74 5d28 f9c6 cebc a9ac eb54     .8J.t.(]......T.
   a69a4:	8bd3 7fee 63a5 5869 f878 29b0 41b3 5787     .....ciXx..).A.W
   a69b4:	0db8 d772 4def bbca fc84 2c00 06f8 3b56     ..r..M.....,..V;
   a69c4:	ddda b504 2023 d159 da8d 80fe bebc 2c29     ....# Y.......),
   a69d4:	f805 9d39 fbf4 d869 15eb 6056 529a 6f81     ..9...i...V`.R.o
   a69e4:	548a 000f 056e fd07 43a4 7b28 c285 38b5     .T..n....C({...8
   a69f4:	8758 7a06 aeab e68c e033 b0b7 7dfd cedb     X..z....3....}..
   a6a04:	1000 f58b d2a2 821d e66f ee9b 0c60 519a     ........o...`..Q
   a6a14:	1d00 d5e6 f629 c20d b2b7 0115 4985 d628     ....)........I(.
   a6a24:	2bcd 891b d266 f8c0 4199 3ac7 3796 d2e9     .+..f....A.:.7..
   a6a34:	21a8 e460 79f0 cabc 0aea 3510 2460 9684     .!`..y.....5`$..
   a6a44:	68d7 0385 cea8 bdbe aba2 eddf 59e8 b3bc     .h...........Y..
   a6a54:	b8a3 75ab ab68 bcdb cd28 5b40 be22 f264     ...uh...(.@[".d.
   a6a64:	7c45 1c94 8987 6be5 25ba a43b 0dc8 b630     E|.....k.%;...0.
   a6a74:	a664 ee90 472b f0f4 9739 2f37 e5cd 488d     d...+G..9.7/...H
   a6a84:	0795 ba31 8af5 56f9 a624 72eb 62a9 4d00     ..1....V$..r.b.M
   a6a94:	e39e 763d 7781 2285 031e 0cd8 28a2 1f26     ..=v.w.".....(&.
   a6aa4:	7861 fa85 22eb 9fc9 7862 ed84 7108 129f     ax..."..bx...q..
   a6ab4:	9098 a25e 03b2 2198 4609 37b4 e8e0 5e2c     ..^....!.F.7..,^
   a6ac4:	c54a 02e7 884d 4e01 25c9 4a22 aafa 0c65     J...M..N.%"J..e.
   a6ad4:	f208 2dc8 ec77 0e28 0973 650f 0bde ab32     ...-w.(.s..e..2.
   a6ae4:	9720 cab2 a2c9 576f 38e9 2460 5604 4602      .....oW.8`$.V.F
   a6af4:	92a9 96b2 21a2 b337 c2fe 1fc2 afab f534     .....!7.......4.
   a6b04:	f3df 1625 7b73 6b78 6010 4400 9016 52e7     ..%.s{xk.`.D...R
   a6b14:	8aeb e4f2 9e76 5ea0 c594 c105 53dd bfec     ....v..^.....S..
   a6b24:	3def 76a7 e560 74b7 5bfd 1467 748c 096b     .=.v`..t.[g..tk.
   a6b34:	7e24 b68a a452 982e 0f31 15ba 5be7 65c9     $~..R...1....[.e
   a6b44:	515a 2291 884f 4141 9a25 1762 ed88 e2c3     ZQ."O.AA%.b.....
   a6b54:	5f19 ee7f 90ec 830e 59bc a762 ca07 01bd     ._.......Yb.....
   a6b64:	4f56 e7f6 be6b 146e d2a8 72c0 3a21 a968     VO..k.n....r!:h.
   a6b74:	2bbf e08e 004c 1744 991e bbc8 612e ec56     .+..L.D......aV.
   a6b84:	4e1d 1d76 6d00 21b5 e8be 258f feb9 695b     .Nv..m.!...%..[i
   a6b94:	7f4c e2a6 fb9e 1abc 354e 6828 b390 1af8     L.......N5(h....
   a6ba4:	0207 9fdf 6cd3 ccc2 46bd 320a aad3 885f     .....l...F.2.._.
   a6bb4:	d8ec 8524 1162 5a53 d2ae b402 cbbc 8dd6     ..$.b.SZ........
   a6bc4:	e5da e490 db50 02e3 2b5c 3d83 f352 d848     ....P...\+.=R.H.
   a6bd4:	1573 e108 f3af 39a7 7531 8559 07ae 65e4     s......91uY....e
   a6be4:	313c 4fe8 63d9 45ad c9ff 3e32 b797 034c     <1.O.c.E..2>..L.
   a6bf4:	714e 84d1 afb9 3d26 7d0a 6291 5992 c2cf     Nq....&=.}.b.Y..
   a6c04:	e560 2b84 cb94 07ec 918d 8461 59c1 ebd4     `..+......a..Y..
   a6c14:	80fd a8b6 1c31 e95c 2694 4577 cb40 b212     ....1.\..&wE@...
   a6c24:	f70d 0e46 2f88 ed73 4d54 8fcf a0a1 630a     ..F../s.TM.....c
   a6c34:	0377 c6a7 9d6e 19d6 903d df87 a8b7 8bc8     w...n...=.......
   a6c44:	496f a33e c0e7 37a8 8d70 e9a3 5cbe d1a8     oI>....7p....\..
   a6c54:	ef94 d1a2 9007 0cba fd52 d9de d459 5bd0     ........R...Y..[
   a6c64:	ec38 76c8 256a de3c 8f17 3367 9e34 215a     8..vj%<...g34.Z!
   a6c74:	a0b7 b1e5 11c6 83ac cb23 9108 5d15 1201     ........#....]..
   a6c84:	8c96 a874 239f 9907 031e 2b92 e980 7816     ..t..#.....+...x
   a6c94:	19c4 a02c 9f68 6286 7042 915d 9aa2 ae85     ..,.h..bBp].....
   a6ca4:	982a 5811 7c27 25f6 20be 8096 615a 354d     *..X'|.%. ..ZaM5
   a6cb4:	cac1 d469 b99e 67b3 19cd 4cd2 98fc 6ccc     ..i....g...L...l
   a6cc4:	189f f5b4 1938 a46d ead3 e90d 2b1b 3d46     ....8.m......+F=
   a6cd4:	808e 297f ae10 4f70 c3bc 632b cfdb d3e2     ...)..pO..+c....
   a6ce4:	09d2 3068 0a07 630a 571c 7bbe 4db7 78c1     ..h0...c.W.{.M.x
   a6cf4:	6f97 990a df6e 77ac b5de c34a 9b6e 7915     .o..n..w..J.n..y
   a6d04:	62dc 06d4 dca3 4728 8ae6 2da1 faa3 3f28     .b....(G...-..(?
   a6d14:	20a6 d86e 3f1b 1a20 3551 4a9f 5419 a4ec     . n..? .Q5.J.T..
   a6d24:	4d49 2bb2 9d1e 1b26 45b1 4048 297d adf6     IM.+..&..EH@})..
   a6d34:	9e65 edc8 f23e 0c7b 952c 108e c950 47ae     e...>.{.,...P..G
   a6d44:	ada5 f200 74a4 a383 5f01 afb6 db76 56a8     .....t..._..v..V
   a6d54:	075d 0ba2 6c8d df81 75cc 003b a497 e2b1     ]....l...u;.....
   a6d64:	b8a4 2673 5255 26d0 68d0 31c2 aab7 677a     ..s&UR.&.h.1..zg
   a6d74:	ad73 e4f2 df55 6f80 9155 e11a a5b8 407d     s...U..oU.....}@
   a6d84:	5bfb 830e 8dad 4575 5380 d851 f693 62fb     .[....uE.SQ....b
   a6d94:	dae8 bd2a 9d2e b968 205c 844a a4d1 b194     ..*...h.\ J.....
   a6da4:	6b73 6c27 33dc 1aa3 7663 af30 626d d4c0     sk'l.3..cv0.mb..
   a6db4:	02a8 dac0 7d12 1aa0 ac88 8a48 b796 26c8     .....}....H....&
   a6dc4:	68b0 62f5 655d 2419 e547 0b31 599a c161     .h.b]e.$G.1..Ya.
   a6dd4:	b55c 17e2 91cd 9d58 2e7d 4dab f5b8 5bd9     \.....X.}..M...[
   a6de4:	1ca0 f438 7eb7 389b da6f 585f 1c7d b884     ..8..~.8o._X}...
   a6df4:	b5b6 37ec 9f20 9e3a 682e d813 71d6 3abf     ...7 .:..h...q.:
   a6e04:	999a ad81 8746 6a2b dff5 c75c 0ac0 5e22     ....F.+j..\..."^
   a6e14:	3591 160b 46bc 8b11 6010 1864 7538 ad9a     .5...F...`d.8u..
   a6e24:	f4aa 213c 3949 d87f f08f 81f2 d89e 4cc1     ..<!I9.........L
   a6e34:	c885 1694 e70a 3bc4 8a29 588f 87a3 1e41     .......;)..X..A.
   a6e44:	9065 f409 bd30 1aad 68b2 4097 2971 65aa     e...0....h.@q).e
   a6e54:	1f74 b768 13fb 2372 4c13 531f f0b3 1a17     t.h...r#.L.S....
   a6e64:	9795 66d2 e5de 1bb1 494b c888 1198 482d     ...f....KI....-H
   a6e74:	5279 1587 ecb2 7f57 affa ae9c ebcf e7f4     yR....W.........
   a6e84:	d4cf 4ce7 dfd4 a258 b3cd a7a5 b309 6bf6     ...L..X........k
   a6e94:	0661 e664 5faf cf77 b7e0 d30e 1b57 3d39     a.d.._w.....W.9=
   a6ea4:	7c73 3b3b d34f 9246 df0d 8b78 64a1 8df9     s|;;O.F...x..d..
   a6eb4:	2a02 cec1 eece 51c3 d255 e489 74a9 a8a8     .*.....QU....t..
   a6ec4:	c90d 9259 13e6 c06a 4d47 5a2d 3158 25d8     ..Y...j.GM-ZX1.%
   a6ed4:	48b9 33d1 165a 0801 9b20 3140 86e8 ab91     .H.3Z... .@1....
   a6ee4:	822a 13ee d2b5 4c94 f9eb 49ab b21a c954     *......L...I..T.
   a6ef4:	6708 18e7 6ddc f2df 36e7 1257 f44e 68b7     .g...m...6W.N..h
   a6f04:	5024 d818 dd4d 3e10 6a43 2675 3917 2d18     $P..M..>Cju&.9.-
   a6f14:	2b26 7b14 7e10 bca3 bd0b f800 9bd4 2106     &+.{.~.........!
   a6f24:	4c7d 48c9 6b2b 9d34 3475 599d 6f4d d353     }L.H+k4.u4.YMoS.
   a6f34:	81b2 345e e255 0e4e 673a a975 bbb2 1004     ..^4U.N.:gu.....
   a6f44:	19c3 a9a2 dec0 b321 eb62 cc94 44a4 8b62     ......!.b....Db.
   a6f54:	f573 6636 575b 4044 81bf 03fa 0c52 f8ca     s.6f[WD@....R...
   a6f64:	3422 a4c3 aa4c 2e69 a3a3 3a8a 2dbc e1bd     "4..L.i....:.-..
   a6f74:	8a9d 86f3 cfba 7e1e 473e fab6 b9d6 b1e7     .......~>G......
   a6f84:	d4e1 a0f3 4ef1 b4ec fa0d 4194 63ee a0ed     .....N.....A.c..
   a6f94:	89ca 37e5 9d18 e78f e554 4b92 069e f923     ...7....T..K..#.
   a6fa4:	4c64 9615 2b96 dba7 ea0e af5e 0fb6 796a     dL...+....^...jy
   a6fb4:	9ee3 d4d3 afa1 4628 3909 5975 991d ec5d     ......(F.9uY..].
   a6fc4:	c52a e4be b483 83a6 6d74 4dac 5a38 1260     *.......tm.M8Z`.
   a6fd4:	22ba bff2 5d9c 1bfa 0d33 f9b0 eee4 6e95     ."...]..3......n
   a6fe4:	d5f9 1eee 57d9 5b2d 8b79 682a c523 919c     .....W-[y.*h#...
   a6ff4:	aa22 4bc4 3ed3 05db 054f 2ae5 76ad e50d     "..K.>..O..*.v..
   a7004:	052c 8cef 0462 f60b 588f fed8 c910 de6b     ,...b....X....k.
   a7014:	58ea d41f 0299 544b 4b91 55f3 95b2 0a8c     .X....KT.K.U....
   a7024:	14bd 8504 fee4 fa05 9910 f4c0 e9d6 4bfb     ...............K
   a7034:	2d43 e950 7d09 cd8a a44a a976 8885 e682     C-P..}..J.v.....
   a7044:	db0a 7667 6ac7 dfdb 6c51 23ce 6d19 56e7     ..gv.j..Ql.#.m.V
   a7054:	aee8 6d12 a51b 3dfa 668a f8db 3c9a 35f9     ...m...=.f...<.5
   a7064:	9f70 9be5 e6da d7a2 bc2a 6955 53ba c604     p.......*.Ui.S..
   a7074:	5227 5479 1720 3311 3b8d a408 7c6a 536a     'RyT ..3.;..j|jS
   a7084:	d2f6 4fb1 552a b7b1 be91 a15d bfc4 f752     ...O*U....]...R.
   a7094:	370c 9437 9ac4 a494 a8a8 8222 a34c 4ca3     .77.......".L..L
   a70a4:	a50c 9045 c1ce f3b4 322c 2115 ece5 c60f     ..E.....,2.!....
   a70b4:	f473 e9aa 619e e580 01e7 bc3a 6564 1a76     s....a....:.dev.
   a70c4:	4adb 9eeb 5d72 1d30 0cfe 3b65 cddb 1763     .J..r]0...e;..c.
   a70d4:	cf4a a59a 92c9 ca09 d362 faa4 7bce 9508     J.......b....{..
   a70e4:	b29f 3f2b cb45 0cbd 9830 00be 7759 7478     ..+?E...0...Ywxt
   a70f4:	c2f9 cdb9 1c6e 9b4d 0bb9 40a4 ad91 9b50     ....n.M....@..P.
   a7104:	dd1a 6965 6dea 92e4 b483 2d73 321f c086     ..ei.m....s-.2..
   a7114:	fcfd 1dfa b0ea 7f51 556d a7fe 7ecb 44b9     ......Q.mU...~.D
   a7124:	7f44 5a18 3d51 dbbe 9590 1ca9 eb27 0dcf     D..ZQ=......'...
   a7134:	3041 286e f3ad 3b5f 23af 6956 0dcf 51b2     A0n(.._;.#Vi...Q
   a7144:	bb2a f992 73a2 f15d a861 287b d5ed 9618     *....s].a.{(....
   a7154:	6e6e 0468 3ffd 154b 4449 d456 e42f 3885     nnh..?K.IDV./..8
   a7164:	a915 c9d1 8d7c 2fb2 451a 3bff aeca 2a6c     ....|../.E.;..l*
   a7174:	7127 ef58 b3a6 0c3e 666a e5b9 9d28 8db0     'qX...>.jf..(...
   a7184:	39d1 90bb 5770 b2dc ea1d 6fda ef29 54b3     .9..pW.....o)..T
   a7194:	72e3 0123 13e1 2c8a 09ee a938 927f fbf0     .r#....,..8.....
   a71a4:	c899 8513 f6ee 0107 925d 84e8 c60e 07e2     ........].......
   a71b4:	717b e7a8 b6db 8103 ed77 43cf f3eb 1df7     {q......w..C....
   a71c4:	5a4a 92f2 900d 39fa 4d49 031b 838f 90db     JZ.....9IM......
   a71d4:	41bb 64ec d32e be1a 2d42 8bfa 42c2 0b53     .A.d....B-...BS.
   a71e4:	e45d babc ed1a 22e3 03a3 8d78 4a3d 4f5e     ]......"..x.=J^O
   a71f4:	e193 cc3b a8c0 3a6a 308e c568 0238 02cc     ..;...j:.0h.8...
   a7204:	d3bf 1d9d bf8c 138b 6fc9 971a 01e5 8fe2     .........o......
   a7214:	90cc 2eda 4916 3ddd 2d01 cd72 e9be 4967     .....I.=.-r...gI
   a7224:	b088 035d b123 51b4 1065 8898 d639 fc46     ..].#..Qe...9.F.
   a7234:	a5d1 461b 4475 3a4b 120a ff05 8c7d ca2a     ...FuDK:....}.*.
   a7244:	3d21 05b5 e5ad c222 2f2d a872 5de1 06a3     !=....".-/r..]..
   a7254:	8153 7368 5dac 9550 f6a4 7e3e a9aa e806     S.hs.]P...>~....
   a7264:	6e6c a3f2 92e7 7c3a fa96 9df6 9d41 ac1a     ln....:|....A...
   a7274:	9ae5 a842 dedb da91 b258 a65e 5241 aff2     ..B.....X.^.AR..
   a7284:	326b 35d1 8e49 0143 0fb8 fb50 31b7 d514     k2.5I.C...P..1..
   a7294:	6a0d 67bf 3899 4ee7 11e7 eb88 1026 2de7     .j.g.8.N....&..-
   a72a4:	cf86 6da1 7f70 6533 7653 b040 e926 2319     ...mp.3eSv@.&..#
   a72b4:	55e9 e265 1549 b230 f237 50f3 5a4a dcaf     .Ue.I.0.7..PJZ..
   a72c4:	2d00 32a5 b06c c480 1718 16a7 2ab3 8615     .-.2l........*..
   a72d4:	3b34 6a51 8c89 4335 c7da 4d13 2f2b 903d     4;Qj..5C...M+/=.
   a72e4:	fcf8 f0e4 aa61 c630 c068 3e20 b61b b603     ....a.0.h. >....
   a72f4:	e0d7 cc91 9bc0 b0a8 a6ee 8a8a ec80 9d8a     ................
   a7304:	9baf e4b0 da76 9135 43a9 6b29 7f87 731c     ....v.5..C)k...s
   a7314:	2ea0 4914 481d 85eb 44f6 5c63 ceab 0611     ...I.H...Dc\....
   a7324:	097a a0d2 b223 aa55 e057 6a39 ec8c 5afb     z...#.U.W.9j...Z
   a7334:	b365 d0a5 42a7 1ab1 b03d 1d9d 5ed2 3e64     e....B..=....^d>
   a7344:	36c3 4e63 8525 d4a9 e53e abdd 6a3e 9df9     .6cN%...>...>j..
   a7354:	eae0 e16d 613b 4458 4e42 7529 2644 c94b     ..m.;aXDBN)uD&K.
   a7364:	f95c 1947 7079 4ffe 6af1 3be6 df52 ad44     \.G.yp.O.j.;R.D.
   a7374:	5ecc b1e4 5b06 d59f fbc5 4f5e 0ce9 2670     .^...[....^O..p&
   a7384:	4979 07ed aeb6 2927 7b93 f881 06c8 e67e     yI....').{....~.
   a7394:	2486 ab89 9955 ad08 7ef5 bdc4 e63a d6b1     .$..U....~..:...
   a73a4:	c581 489f bbaf 419c ce56 e077 3696 da47     ...H...AV.w..6G.
   a73b4:	e7d4 7641 fbed 2c98 cc7d 97f1 1d42 58cf     ..Av...,}...B..X
   a73c4:	d101 e771 6717 69e9 2bfe 0b81 d8df 285c     ..q..g.i.+....\(
   a73d4:	15f5 52bc 8be6 e738 450e 527b 32e5 4468     ...R..8..E{R.2hD
   a73e4:	9eac 4311 e61a 953d 9892 f5c7 3a44 480e     ...C..=.....D:.H
   a73f4:	3083 ac57 a398 c882 a414 8eed 14d3 0606     .0W.............
   a7404:	8078 9617 1f1c aa23 a105 693d a290 3376     x.....#...=i..v3
   a7414:	5803 8603 7446 53cb 252b 8065 949c c8ad     .X..Ft.S+%e.....
   a7424:	640d 0aa5 b47c 274e cb6c f269 1b33 03ab     .d..|.N'l.i.3...
   a7434:	6b30 86a8 580e c986 9cd6 6c27 ae8e ec63     0k...X....'l..c.
   a7444:	e529 a4c0 1ca5 3948 b2ae 92a4 f15f 7e51     ).....H9...._.Q~
   a7454:	c051 1e4c d846 201b c93e 44af 8b46 646f     Q.L.F.. >..DF.od
   a7464:	084c 7b69 c13d 70c4 4a38 26cd d790 a96a     L.i{=..p8J.&..j.
   a7474:	5db5 94b2 3bdd f2d9 aa65 32ce 4c97 321b     .]...;..e..2.L.2
   a7484:	a561 c106 189c 3029 93fa 9ff0 ef37 5eab     a.....)0....7..^
   a7494:	d640 be43 abf1 0fd2 fe26 b7fb e0bd e28e     @.C.....&.......
   a74a4:	598a 0243 86c3 80ab 3934 16c7 7a0f 492a     .YC.....49...z*I
   a74b4:	f426 a3f2 b1c1 65d6 5893 68f9 3c78 4ef1     &......e.X.hx<.N
   a74c4:	0f4e 26f0 5d0a c0b2 f2d4 d4b3 acf9 ca8f     N..&.]..........
   a74d4:	09e3 40fe 3dd6 cc8e 53f1 fa72 72f4 7be9     ...@.=...Sr..r.{
   a74e4:	c7d4 f02a f87a 87a5 5faf 6be0 bd20 a1cc     ..*.z...._.k ...
   a74f4:	1990 1581 f6fe f5d0 6509 7b33 b2cd 4c93     .........e3{...L
   a7504:	757d 606c c268 ff38 6788 f1b1 aeda fc93     }ul`h.8..g......
   a7514:	da5c 9245 0b0a a586 2637 3a74 ef89 d5d8     \.E.....7&t:....
   a7524:	c2c9 9d2a 86ba 3349 0e01 821b 6d1a 66e9     ..*...I3.....m.f
   a7534:	e999 6da5 164f d183 3070 5d2e 1d97 f175     ...mO...p0.]..u.
   a7544:	c931 cdf5 8d7e 79ee 35c6 e25f 9a05 6b43     1...~..y.5_...Ck
   a7554:	58dd 5763 10b7 e5af 59f1 f3d2 e6b6 9a71     .XcW.....Y....q.
   a7564:	b325 baad 8ad8 e767 08e8 ab61 61aa cf65     %.....g...a..ae.
   a7574:	3d76 720b a966 9fd2 8ba0 4d1b c2ca 0aa1     v=.rf......M....
   a7584:	b4d8 724e 1da6 e578 9232 d55f 22fa ced9     ..Nr..x.2._.."..
   a7594:	f462 0766 b140 9012 08ce fd8d 931c 4c3a     b.f.@.........:L
   a75a4:	9c33 1d1f 1e9e ca6b f802 d14e 0fca 1a75     3.....k...N...u.
   a75b4:	d182 6cf6 2937 3f32 7b60 99f1 bd1c 0f2a     ...l7)2?`{....*.
   a75c4:	e5b8 6c19 0c94 0b37 e51b 6d91 50e1 96c0     ...l..7....m.P..
   a75d4:	e53c a4c1 0a82 fc05 b8c7 62e2 af93 5c20     <..........b.. \
   a75e4:	d045 1ce0 9c1b 9371 f756 d9e2 e70c 0091     E.....q.V.......
   a75f4:	c956 6d08 c050 f24e e382 a32c 9ab9 82bf     V..mP.N...,.....
   a7604:	05b3 13ce 357f 0381 1603 1560 c9a2 cc30     .....5....`...0.
   a7614:	3cd5 568a 5ae8 7f6e 6bc6 5c07 2f85 d11f     .<.V.Zn..k.\./..
   a7624:	7a32 e91a 6897 9d85 97a5 3a88 a6bd 8c4d     2z...h.....:..M.
   a7634:	e125 a465 4f14 c235 64a5 ed31 4fdd 05ee     %.e..O5..d1..O..
   a7644:	c2a3 725f 4b75 d40b ad16 e523 7948 c362     .._ruK....#.Hyb.
   a7654:	7fde e497 2f28 5eb9 668f 36a9 95fa c17e     ....(/.^.f.6..~.
   a7664:	3bf1 7414 bded f465 f22a 20ee 1390 1919     .;.t..e.*.. ....
   a7674:	0ad1 5cfa 9551 46b3 95c4 fd45 0e58 dcaf     ...\Q..F..E.X...
   a7684:	ec2c 6591 9248 bb30 1517 60f7 d07b 82e8     ,..eH.0....`{...
   a7694:	0491 a364 bc64 a91a 4a9d 9ae2 4c72 9264     ..d.d....J..rLd.
   a76a4:	993c 3132 8f44 4782 6f59 4c78 4ed1 d17b     <.21D..GYoxL.N{.
   a76b4:	d69e 4e47 a439 9ac5 0be4 d328 c586 ff8f     ..GN9.....(.....
   a76c4:	255c 2e81 8b9e 8fac f77e e9bc 5f59 16f6     \%......~...Y_..
   a76d4:	cc0d 6650 f794 8cf6 f0c6 1b28 a3e7 ea1c     ..Pf......(.....
   a76e4:	3c56 7a64 4394 238b 13fe c5f9 40a4 4088     V<dz.C.#.....@.@
   a76f4:	72af 46bd eb5d b9b5 bf26 73e6 4c24 dd05     .r.F]...&..s$L..
   a7704:	c3de b153 f12b dd27 2be2 3a04 c229 a886     ..S.+.'..+.:)...
   a7714:	6964 fef0 f4b6 55d4 baa1 3f0b 6e01 8ede     di.....U...?.n..
   a7724:	ab1a 8eae 0905 b51f c27d 8a91 693d 0706     ........}...=i..
   a7734:	0b68 4ead f937 c180 b8dd 137b edf9 5f80     h..N7.....{...._
   a7744:	fd23 7421 c83f 9160 4e76 7fdc 2b6b 0678     #.!t?.`.vN..k+x.
   a7754:	6c56 6c99 1da5 0831 4415 0a16 d49b c11d     Vl.l..1..D......
   a7764:	0941 a51a 439e d054 2fb6 0f81 8816 6060     A....CT../....``
   a7774:	01df 4176 e63d 76d1 a8c1 f905 c87b 6fb3     ..vA=..v....{..o
   a7784:	0f59 f1b4 28ca 6398 82b1 a014 aaed 632d     Y....(.c......-c
   a7794:	6b2f 93fe 1b9b 1232 42f8 c5ab aeb5 906c     /k....2..B....l.
   a77a4:	b2e6 cc11 a604 f7ec f358 4795 31c9 a932     ........X..G.12.
   a77b4:	27f0 944a 956a 077f e68e a73b 8a04 ec5f     .'J.j.....;..._.
   a77c4:	b678 dbea c399 19ef 2cbd 7813 8922 de27     x........,.x".'.
   a77d4:	a392 f6e7 364b dca4 2e1d 3d2f c0d6 4e01     ....K6..../=...N
   a77e4:	7af4 2659 9621 bf84 c540 c7e6 4680 42d0     .zY&!...@....F.B
   a77f4:	af36 1cc3 b29e 4070 2c01 6207 167a eb26     6.....p@.,.bz.&.
   a7804:	ad51 5f28 1c44 8cae f23c a8d1 aab7 fc27     Q.(_D...<.....'.
   a7814:	2b47 0710 15d6 ba3a 93c6 8fdf fed2 9d10     G+....:.........
   a7824:	30c7 4b43 35eb b8c0 a8f5 0529 5f67 9274     .0CK.5....).g_t.
   a7834:	1f0a 0dbd 3126 d6a9 6500 7afa 0ec9 6d6a     ....&1...e.z..jm
   a7844:	25e5 202f 0f75 ea5d b532 80de fc4e 76c3     .%/ u.].2...N..v
   a7854:	296f 4ebb f577 afd1 1fa9 8d07 17d2 6976     o).Nw.........vi
   a7864:	09d4 2e23 8978 ecba 211f 9c3b b491 62dd     ..#.x....!;....b
   a7874:	ecb4 c26d 9bb9 76a0 d52f 9f2f 57a3 86c5     ..m....v/./..W..
   a7884:	a25c bb34 f3dd b55a fd9b d54f b7e9 0a8e     \.4...Z...O.....
   a7894:	37f5 e561 4ae3 0281 6647 c61c f5a3 f92f     .7a..J..Gf..../.
   a78a4:	d08d 40fa ece0 a5cb 6c77 9f63 4d75 d721     ...@....wlc.uM!.
   a78b4:	4e96 0d7c 3410 5451 30a1 1469 19be 2540     .N|..4QT.0i...@%
   a78c4:	7d08 2737 1c73 8276 9825 5aa1 e102 ea37     .}7's.v.%..Z..7.
   a78d4:	cb71 9270 0a55 315a 7cc1 6bc9 1014 40cb     q.p.U.Z1.|.k...@
   a78e4:	237e 8645 e446 aef2 d503 9251 ff80 5d18     ~#E.F.....Q....]
   a78f4:	f6a9 36c4 b432 d3e7 09f6 957d 111a d9b9     ...62.....}.....
   a7904:	de86 fdff ff3f 8f4f 6df6 9f9a 8b03 2336     ....?.O..m....6#
   a7914:	786d 474d acd6 159d ef79 afdf 1988 be95     mxMG....y.......
   a7924:	1f71 fed7 8d00 d81f ae6d fc3f 71da 7e6f     q.......m.?..qo~
   a7934:	1a92 a5c1 9428 5c8c 12e9 8b03 d0aa b559     ....(..\......Y.
   a7944:	a64c 9c69 3291 a8b1 53a4 58f1 f079 62b6     L.i..2...S.Xy..b
   a7954:	683f 7aee b40a 9d61 913c dfaf f196 3329     ?h.z..a.<.....)3
   a7964:	74c4 c33e 1b61 4c93 bc8b 449f e92b 2099     .t>.a..L...D+.. 
   a7974:	4dde 932e 9a29 cc92 e9a3 ca64 414c 157f     .M..).....d.LA..
   a7984:	dbea 15cb b4b9 d751 8db3 50b6 91d7 b314     ......Q....P....
   a7994:	4594 4ad4 7aac c1e8 7326 5040 1c79 589d     .E.J.z..&s@Py..X
   a79a4:	a7aa e3b3 9c20 3721 41a6 9c98 0a58 edfa     .... .!7.A..X...
   a79b4:	05cd 037d d604 e68b 2d32 939a ad97 d1a9     ..}.....2-......
   a79c4:	5eff 5a41 286f 7fbc 3383 0a62 a567 f721     .^AZo(...3b.g.!.
   a79d4:	79ac 4654 cb65 c308 40aa 5f8d 802e 75ae     .yTFe....@._...u
   a79e4:	683b 35fa 5a05 a02c 8735 0072 2325 89d9     ;h.5.Z,.5.r.%#..
   a79f4:	89a5 38ee b8db 6f4e df10 8a2f a00c a7d6     ...8..No../.....
   a7a04:	fcfe 799d 66a0 eb86 130d e432 c109 1ec7     ...y.f....2.....
   a7a14:	4577 d096 29f7 c09d 1660 af88 3a54 d66a     wE...)..`...T:j.
   a7a24:	038a 8dd2 74a4 5b3f f0c9 34b7 2af3 090f     .....t?[...4.*..
   a7a34:	6eda 306e ef18 8dcd aea4 d14f b8bd 61e7     .nn0......O....a
   a7a44:	3ab8 14ff 2cc3 9488 a49f f3c6 adb9 9c70     .:...,........p.
   a7a54:	8b1d e353 1f02 9df2 4dcb f054 b414 d7d1     ..S......MT.....
   a7a64:	ba39 e880 90fa 5639 698a 21db b9b9 04ef     9.....9V.i.!....
   a7a74:	4e0a fab8 fd55 be3d ea7f f945 7b97 a213     .N..U.=...E..{..
   a7a84:	fef0 fff7 f4f2 26ce 54de 2321 c34d 4c3a     .......&.T!#M.:L
   a7a94:	d216 a598 e339 aeb7 8aef 1df5 c60c b3ab     ....9...........
   a7aa4:	dd58 48bb 971d dd98 a635 8f80 a053 0136     X..H....5...S.6.
   a7ab4:	48f6 d1fe 5767 d0a7 66b5 a58a 98e2 4ad3     .H..gW...f.....J
   a7ac4:	bda2 be9e 19c5 a199 2b03 2c07 0688 a991     .........+.,....
   a7ad4:	c83a c0e7 4fc2 b3a5 baaa 2318 23a7 6fb5     :....O.....#.#.o
   a7ae4:	40b2 b45b 27d0 6be0 7314 f4ee c476 d7e3     .@[..'.k.s..v...
   a7af4:	6ef1 dd51 e326 13b1 52e1 dde1 3d17 9195     .nQ.&....R...=..
   a7b04:	a6ca 6532 3e11 57d9 0709 b22d 7d11 e7e0     ..2e.>.W..-..}..
   a7b14:	beb6 4a68 9902 086e e916 e826 0349 c303     ..hJ..n...&.I...
   a7b24:	8996 da57 b674 cb63 8995 277f 8267 e56c     ..W.t.c....'g.l.
   a7b34:	2e68 60cc 22e0 a813 8b51 4d41 c5d5 58b3     h..`."..Q.AM...X
   a7b44:	e500 04b3 e836 4d14 cf23 d719 caa2 1447     ....6..M#.....G.
   a7b54:	822d 2aeb a2ca 3455 4fc5 a992 c73e acb8     -..*..U4.O..>...
   a7b64:	097a 90cf b93a 4282 f657 dc3d 2055 ff83     z...:..BW.=.U ..
   a7b74:	4796 c757 ff14 5e57 9fbf 75c8 685a f221     .GW...W^...uZh!.
   a7b84:	0909 f191 bc77 2608 2252 427b e662 31f3     ....w..&R"{Bb..1
   a7b94:	85ff 9cae cbb0 3820 c4f8 73a5 566c 872c     ...... 8...slV,.
   a7ba4:	12b1 8731 3751 d9de 9139 6ba2 94e2 6e55     ..1.Q7..9..k..Un
   a7bb4:	0193 2bb3 647d 8ccc f6d2 1473 a833 5aac     ...+}d....s.3..Z
   a7bc4:	1959 d232 df66 d9d9 ebc6 69ac df24 4ba9     Y.2.f......i$..K
   a7bd4:	a296 f6f5 ee9c e713 cd4a 52e5 27de a3ce     ........J..R.'..
   a7be4:	2093 b908 e33b 0f05 ef8f 6826 7c80 6f53     . ..;.....&h.|So
   a7bf4:	a6ab 4a5d 34d5 046b 8e97 fe54 818c 92e9     ..]J.4k...T.....
   a7c04:	4958 5174 9733 69da 8083 7bc7 f280 3908     XItQ3..i...{...9
   a7c14:	08d1 93b4 6f59 e218 d043 885f adb9 8387     ....Yo..C._.....
   a7c24:	b9df 2607 e2b7 481f 372a e6c7 a0a4 2d4d     ...&...H*7....M-
   a7c34:	af3e 99fb eebd e2d4 9c40 bac1 af53 e316     >.......@...S...
   a7c44:	2668 3c4f ea55 12c2 8823 40f3 db82 8329     h&O<U...#..@..).
   a7c54:	41cc e8b4 5a9d d537 f2db feec 1d18 2f8c     .A...Z7......../
   a7c64:	a726 c77a f45e 4117 3a78 35aa 0cbd 7ecd     &.z.^..Ax:.5...~
   a7c74:	f114 ee24 2155 1420 e8b1 547d ea1e f3a2     ..$.U! ...}T....
   a7c84:	0649 301c ff7a 0a85 c60f 45d1 7d70 a91a     I..0z......Ep}..
   a7c94:	b0aa d822 1702 d4d2 116a 001d f23a f5bc     ..".....j...:...
   a7ca4:	7a29 a6d1 e81c 358b 5a3f 7af6 74c7 9b37     )z.....5?Z.z.t7.
   a7cb4:	fcfa a682 fafc 0d18 55a4 1ab4 ec23 d1a7     .........U..#...
   a7cc4:	dcd2 2d6d 4591 fa77 a8da aa1c 1596 1b0f     ..m-.Ew.........
   a7cd4:	5b15 d6fc 175b 0f0d a322 4780 5d57 0552     .[..[..."..GW]R.
   a7ce4:	676f 9907 a34e c745 12e1 fbd0 73a3 5ff0     og..N.E......s._
   a7cf4:	49c0 209f ca75 ea82 c86f c15a ed6a 42d0     .I. u...o.Z.j..B
   a7d04:	e66a c63a 6b76 4137 b14e f6a1 7144 f15a     j.:.vk7AN...DqZ.
   a7d14:	bb4e 18e2 29a7 3f4a 0e9a 6a95 bff6 76d1     N....)J?...j...v
   a7d24:	2609 3005 be2b 54a1 a8ee 6194 7ca7 e39d     .&.0+..T...a.|..
   a7d34:	32d8 6a54 fd49 0b4c 71fe 1d11 54c7 3d08     .2TjI.L..q...T.=
   a7d44:	c672 89cc 04b2 875c 695a 38b0 28a6 ee00     r.....\.Zi.8.(..
   a7d54:	3832 6a35 3f6a 7ec6 4b06 5222 a5a4 00ca     285jj?.~.K"R....
   a7d64:	5c05 c153 9a46 c648 902c 6421 3c3f 74be     .\S.F.H.,.!d?<.t
   a7d74:	0557 7420 d9aa 651a a422 9e3e 3a06 f298     W. t...e".>..:..
   a7d84:	080a 943d 0cf8 b751 6e4a 3426 5860 66d9     ..=...Q.Jn&4`X.f
   a7d94:	03f9 f818 1174 e6f4 273d 22b9 72bf 1933     ....t...='.".r3.
   a7da4:	5431 080d 2307 da18 c6fe dc80 dd6f 610d     1T...#......o..a
   a7db4:	b146 73b1 da19 a444 80fe 280e bc67 eb40     F..s..D....(g.@.
   a7dc4:	2359 acfe 6291 bd65 bb69 aa0f 677e a1b2     Y#...be.i...~g..
   a7dd4:	85fe 849c e9cf ae1d bcdd f2ab 9199 f220     .............. .
   a7de4:	f7e9 a177 3162 b61e 0120 873b d8b0 2739     ..w.b1.. .;...9'
   a7df4:	db1d 98c0 d211 22ce 7b6d d652 6a51 d6f8     ......."m{R.Qj..
   a7e04:	cb9d d2c8 2380 b07a e7a1 0a88 2a8e c53f     .....#z......*?.
   a7e14:	c970 a47b a8f4 336e 3ea9 1b79 a968 bc1c     p.{...n3.>y.h...
   a7e24:	2d30 f853 2863 251f b6cd 94ba 95f1 0c84     0-S.c(.%........
   a7e34:	7abd c903 4299 55f1 11fe 1599 97f4 0982     .z...B.U........
   a7e44:	8832 6a5c 6af7 2d4d 85a1 b2b9 502e 6a5d     2.\j.jM-.....P]j
   a7e54:	d80d 6fb2 f734 2616 455c 39a2 6550 130d     ...o4..&\E.9Pe..
   a7e64:	4534 4dc2 19db 144b ed2c 6267 2322 1229     4E.M..K.,.gb"#).
   a7e74:	76ce aa94 07cb 3a20 692a 8418 54f6 d223     .v.... :*i...T#.
   a7e84:	ca11 6c28 e72b 6e45 94a3 098f a0bc 855d     ..(l+.En......].
   a7e94:	10be 1474 5e81 6a59 e819 b3b1 6b75 0872     ..t..^Yj....ukr.
   a7ea4:	dea3 7c52 16cf c73c 6a19 5e28 a56d d6f9     ..R|..<..j(^m...
   a7eb4:	4aaa d976 587f c531 82e9 000a 6230 b9f2     .Jv..X1.....0b..
   a7ec4:	fec3 bbfa d1bd dc2c 288f c4be 7fdb c3f8     ......,..(......
   a7ed4:	2c52 ccb1 eb9d a7bb 2756 91fb 02b6 2b1a     R,......V'.....+
   a7ee4:	00c7 5cb8 3d5d ca4f 7b04 179c d85b 393e     ...\]=O..{..[.>9
   a7ef4:	eb49 3f29 c09b c00a ea08 a245 8707 b143     I.)?......E...C.
   a7f04:	369c 2ea0 c126 28fa 6fb0 6ca3 cad8 4835     .6..&..(.o.l..5H
   a7f14:	9002 0051 0b4b 48c6 6cf9 168c 5179 4f2a     ..Q.K..H.l..yQ*O
   a7f24:	e86f 31bc e5e1 61ca 5803 4916 ca0d bc99     o..1...a.X.I....
   a7f34:	d444 86ae a7cf 5355 4f95 9aad 59a2 da44     D.....US.O...YD.
   a7f44:	d3aa d02f 8733 b1be c744 50ad 36bd b457     ../.3...D..P.6W.
   a7f54:	d73e 51fc 877b bd10 ba5e 4476 4f3a 3d5a     >..Q{...^.vD:OZ=
   a7f64:	766d b9d0 3121 4536 e67c 95bb 76bd b504     mv..!16E|....v..
   a7f74:	df75 7056 34b0 6072 d049 60b3 f729 5060     u.Vp.4r`I..`).`P
   a7f84:	5baa c76f c7fa 9dd6 c740 4b4b f8db ab6c     .[o.....@.KK..l.
   a7f94:	a881 67d4 21c0 428b 2a4e 9706 b8a2 fca9     ...g.!.BN*......
   a7fa4:	da09 18c4 567f b6bb b760 1034 a290 0fe9     .....V..`.4.....
   a7fb4:	09a9 7201 d271 a81d 1d50 d5e9 880c 8996     ...rq...P.......
   a7fc4:	ea51 492a e7d2 1251 0ace 3ae7 d114 aa9c     Q.*I..Q....:....
   a7fd4:	0bbc b5df d260 264c 6381 e002 1468 09a6     ....`.L&.c..h...
   a7fe4:	1926 5a1d 34bd d2ba 5017 8259 1a04 8d4d     &..Z.4...PY...M.
   a7ff4:	20d9 e11a aada ba9b b11b f1d2 3ec4 52a0     . ...........>.R
   a8004:	e9b1 0543 607d 1b82 ae5a 4374 0b3d 9e1e     ..C.}`..Z.tC=...
   a8014:	85f3 447e 702a 540d 57af 3b8c 6f90 40e8     ..~D*p.T.W.;.o.@
   a8024:	e51a 03ba b51c 5220 0d9e 836a d7fa dfc6     ...... R..j.....
   a8034:	8a8a 3ccb 462a 4479 6f54 b973 c1b9 f362     ...<*FyDTos...b.
   a8044:	a3dc 9009 f735 5024 d0c4 ba08 3559 fa0d     ....5.$P....Y5..
   a8054:	c782 d2b2 6d4a 622d 4392 2c8c a590 1a4b     ....Jm-b.C.,..K.
   a8064:	7f5f fe8a d4a8 724e 9fa4 993f 12b3 6f8d     _.....Nr..?....o
   a8074:	7f11 0bd0 e2db af3a 924f f025 c01e 732a     ......:.O.%...*s
   a8084:	8a12 5f2e 3316 3b0c e912 b784 4649 5609     ..._.3.;....IF.V
   a8094:	d79e e64b 4db2 7482 6dc6 b195 9cbc 3e73     ..K..M.t.m....s>
   a80a4:	a1cb b4b8 b3e4 887c e847 d590 1eb2 3672     ......|.G.....r6
   a80b4:	ab01 ff69 2be9 5f47 1175 3452 7610 da14     ..i..+G_u.R4.v..
   a80c4:	13f2 e3ac 7c31 d4c7 65bd 6464 87ec a830     ....1|...edd..0.
   a80d4:	cb69 f62e 0513 14d6 cc62 3342 526f 0325     i.......b.B3oR%.
   a80e4:	691b 43a2 dfad 50bc e0c1 e56a 5e28 8c6a     .i.C...P..j.(^j.
   a80f4:	8bb0 4b1e f332 cb97 d532 ff13 2b0d 10fe     ...K2...2....+..
   a8104:	5123 c7a8 4c20 336c 546b d784 64df 1313     #Q.. Ll3kT...d..
   a8114:	e293 4666 702a 539b 9c8e fd0f 63bd 5655     ..fF*p.S.....cUV
   a8124:	9496 e8fe 76ed 8aa5 b186 e898 81b8 1694     .....v..........
   a8134:	a3df b5d4 46f9 194b ab79 03a5 e3d2 28ac     .....FK.y......(
   a8144:	f8df 724b e364 ca38 948f 5b9f cd54 4f54     ..Krd.8....[T.TO
   a8154:	d7be ccf3 e517 6311 1da0 a531 f036 e38e     .......c..1.6...
   a8164:	c3be ca45 91be 84ef 4927 5f16 dcdd 5f78     ..E.....'I._..x_
   a8174:	5675 f017 d7c5 785f 69a5 30f5 c6d0 68bb     uV...._x.i.0...h
   a8184:	acb5 d17c a307 15b6 f119 26b8 2c8d 2619     ..|........&.,.&
   a8194:	9c64 204a ea1b 96c2 fa3b 5a5a 494b 6eba     d.J ....;.ZZKI.n
   a81a4:	4e8e 68e3 09e6 a1eb 9451 420e 67f0 8eca     .N.h....Q..B.g..
   a81b4:	85dc 81cc 09da 9fca 91ff ecac a378 7f5f     ............x._.
   a81c4:	4a59 e81d d4a3 9101 a0d4 5184 3f20 ec51     YJ.........Q ?Q.
   a81d4:	5439 67b7 19d0 eb1c b89e d619 cd76 2379     9T.g........v.y#
   a81e4:	407e 622b 7080 cb56 4644 b7a0 4cd8 297c     ~@+b.pV.DF...L|)
   a81f4:	8d6e a0a0 b483 7740 36f8 2e4b db34 5bd8     n.....@w.6K.4..[
   a8204:	e3a4 2d17 ad80 9acd 872b 0860 2911 0640     ...-....+.`..)@.
   a8214:	5a02 928a c751 19b5 0bde 093a a398 1023     .Z..Q.....:...#.
   a8224:	e615 48eb dc86 fa12 c6fb 823b ec35 c8fd     ...H......;.5...
   a8234:	d137 363a 6dc2 a188 2cdb 901b fbcd 0010     7.:6.m...,......
   a8244:	dc83 f0ab c10c 1669 59a9 b9bd d429 3176     ......i..Y..).v1
   a8254:	1953 3471 7b3c dc55 5165 7445 9bfe 9a1b     S.q4<{U.eQEt....
   a8264:	42d4 7018 4045 7196 8e37 d01c 0fea a38f     .B.pE@.q7.......
   a8274:	fc3a 2533 1291 7567 5cd7 06a3 ecd1 6158     :.3%..gu.\....Xa
   a8284:	81a0 d55c c348 0c37 2175 de6d 5700 9c2a     ..\.H.7.u!m..W*.
   a8294:	4d63 9fcd 09ce 7282 60a6 9b94 c545 1527     cM.....r.`..E.'.
   a82a4:	8355 9f5c 5b28 6377 d2d7 9906 ba23 a961     U.\.([wc....#.a.
   a82b4:	e03e 6445 633a 2a4b e849 856a c54e e496     >.Ed:cK*I.j.N...
   a82c4:	8f96 d749 1967 a7b9 97d7 c013 d818 7182     ..I.g..........q
   a82d4:	0558 c53f 6658 d6ad 86f0 3838 8e2a 2723     X.?.Xf....88*.#'
   a82e4:	123f 85e5 ceed 67e0 f945 276e d4dd e8ae     ?......gE.n'....
   a82f4:	8230 2c4f a113 12e4 7bb5 3ad2 3abb 89c0     0.O,.....{.:.:..
   a8304:	664e 9a93 e7c2 6a58 708e d422 0626 ea35     Nf....Xj.p".&.5.
   a8314:	e843 9d4b ba89 9907 24d4 b373 fffd e6fc     C.K......$s.....
   a8324:	f812 f18d b6b9 4e86 819f 02e6 0516 8b99     .......N........
   a8334:	477d 9cc5 2e88 72a9 33f5 260a e3cb a8c0     }G.....r.3.&....
   a8344:	5b01 3056 0a5d aa85 b6c6 a0b4 6960 bb01     .[V0].......`i..
   a8354:	61fc 2f44 c91b bf27 2eed a2cb 502e bde4     .aD/..'......P..
   a8364:	4b3b e592 b141 e2bc d5b8 e005 2976 31f1     ;K..A.......v).1
   a8374:	2064 fa3b 1bc3 51f8 88da 52be 9bad 345e     d ;....Q...R..^4
   a8384:	b6e2 9d91 5298 1a20 fee6 932d a9b5 7836     .....R ...-...6x
   a8394:	ea9b 4350 1953 4863 6218 8e75 edcc f034     ..PCS.cH.bu...4.
   a83a4:	d157 3b5c e4e8 f749 cfdf c17a 7717 b8f0     W.\;..I...z..w..
   a83b4:	9643 bc47 6722 fe88 68ea 5308 6148 7c05     C.G."g...h.SHa.|
   a83c4:	33d8 7055 3f34 a68e 23f0 97d8 16df 933e     .3Up4?...#....>.
   a83d4:	a118 c935 acef 92fd 964b 2260 c103 6545     ..5.....K.`"..Ee
   a83e4:	cb58 ba24 9261 cdfa a4c8 3644 fb3e 753e     X.$.a.....D6>.>u
   a83f4:	83dd c51b 5b99 ee2c b4d9 2f42 fa15 29ac     .....[,...B/...)
   a8404:	2996 50c5 3ce5 12b0 a96a 767c 8313 f19f     .).P.<..j.|v....
   a8414:	75ea 1ae4 152b 670d 5596 17af b0c0 f254     .u..+..g.U....T.
   a8424:	7551 c3ac 51c0 451f 23e3 8507 4fa3 476b     Qu...Q.E.#...OkG
   a8434:	a9fe 77aa dcc3 36d8 fa51 b49b ca8d 33f7     ...w...6Q......3
   a8444:	34cb 9f9e 29d1 95a6 2bda a645 eb24 3c01     .4...)...+E.$..<
   a8454:	8902 1941 bd14 525a 7e1a 8ed4 ea6f 48fd     ..A...ZR.~..o..H
   a8464:	0f7f 63ae 77d4 2e90 6320 128a 1520 60fb     ...c.w.. c.. ..`
   a8474:	f46f ea28 c0fd c4f1 a3f1 7fbb 222d 34b9     o.(.........-".4
   a8484:	fac1 3344 8968 f65f 0c73 f0bf 22bd a569     ..D3h._.s...."i.
   a8494:	993d 04a0 9c19 9389 b32c 4725 2f84 c655     =.......,.%G./U.
   a84a4:	dba5 37b2 8265 21e7 a620 5276 8838 2722     ...7e..! .vR8."'
   a84b4:	b878 b465 3854 8a76 5c75 269e 4535 2f0c     x.e.T8v.u\.&5E./
   a84c4:	d2a7 c1ac 5332 6c2a 8c46 3762 19b7 21b1     ....2S*lF.b7...!
   a84d4:	9e90 ab27 2eba 49f2 0d1d 3dc3 f5fb 786e     ..'....I...=..nx
   a84e4:	bf4f cf12 87b6 7d11 54c8 c750 1ea1 7e2a     O......}.TP...*~
   a84f4:	aeee bec3 0091 8dd6 9bea 6fb4 51b5 9dd5     ...........o.Q..
   a8504:	540d c389 2f42 eafb f59e bb03 2b12 6c2b     .T..B/.......++l
   a8514:	bf4d 61a0 f1b9 87a9 38b6 cb8f be32 f0b2     M..a.....8..2...
   a8524:	e119 4677 3066 2439 ab0c 5ec4 fa30 4f18     ..wFf09$...^0..O
   a8534:	e8d2 0c63 0d93 4814 3b32 3188 ee5e 63f4     ..c....H2;.1^..c
   a8544:	ce15 f82b af30 1f42 917f b4af 5643 1816     ..+.0.B.....CV..
   a8554:	b98b fea1 da5a 4e42 5385 0c7d 17f4 fcd8     ....Z.BN.S}.....
   a8564:	a950 80fc 5026 68ef b55e cb04 425d df65     P...&P.h^...]Be.
   a8574:	858e 3458 2dc2 7512 e398 8f39 1523 cfec     ..X4.-.u..9.#...
   a8584:	5508 3138 5a69 92cc f233 f6c7 5c9c 59ac     .U81iZ..3....\.Y
   a8594:	44f7 180e cf74 f4ab fd78 4a18 a79c 15f5     .D..t...x..J....
   a85a4:	fbdb 213a 388d 86f4 eb93 2c99 c76c e8e6     ..:!.8.....,l...
   a85b4:	80cc 5bba c852 9ce1 d27a 0eb3 aaf0 e878     ...[R...z.....x.
   a85c4:	3521 9343 6f49 c596 e14c 92ca 4336 8986     !5C.Io..L...6C..
   a85d4:	a860 1a24 8b63 abdf 690a a15b 0561 7aa8     `.$.c....i[.a..z
   a85e4:	ed57 0818 0e29 4ec9 cfaa d64e bcf9 7791     W...)..N..N....w
   a85f4:	e765 2cb5 0a38 5d15 9d31 4435 abeb fba2     e..,8..]1.5D....
   a8604:	1f04 0b28 228e ff62 97d1 e7af f7be 1e6f     ..(.."b.......o.
   a8614:	5e6a 14e3 c415 25cd ed8e 9c05 7dcc 6572     j^.....%.....}re
   a8624:	4450 7191 9659 e2f6 e5b1 a7f3 89a7 58b7     PD.qY..........X
   a8634:	7dd4 1eb6 7b4d 1258 6370 f794 2fd3 44d1     .}..M{X.pc.../.D
   a8644:	e8b1 450d ee3a 1576 2d34 6cb4 eb40 ef79     ...E:.v.4-.l@.y.
   a8654:	c947 b828 2792 9c39 57af 9d18 cb63 bb68     G.(..'9..W..c.h.
   a8664:	555d 8947 0825 3b9e eb28 a2c8 2da6 f60d     ]UG.%..;(....-..
   a8674:	cba2 957d dd43 dde1 1003 9669 234b 5be5     ..}.C.....i.K#.[
   a8684:	6fb7 5c89 c596 c12d ad53 a988 6548 3545     .o.\..-.S...HeE5
   a8694:	32b9 9d12 c736 36a7 e1d0 bdbc f93e 9803     .2..6..6....>...
   a86a4:	a920 152c 91e4 4ef3 e876 688a c272 af63      .,....Nv..hr.c.
   a86b4:	e351 4155 0451 97db 9b34 2d4b 2336 8e4f     Q.UAQ...4.K-6#O.
   a86c4:	6844 8d5b 6b9f 6140 f5aa a2da 4ab2 86a4     Dh[..k@a.....J..
   a86d4:	6092 781b b8a4 7d7a bf91 8b29 5265 57d6     .`.x..z}..).eR.W
   a86e4:	1a3e 030c 434b 44dc f5dd f691 e455 6f78     >...KC.D....U.xo
   a86f4:	10b2 99f6 2585 0b3e 0ea7 578d 335a 7d5c     .....%>....WZ3\}
   a8704:	5932 dd58 1ed9 4557 4a43 0354 b99f a72a     2YX...WECJT...*.
   a8714:	e016 7fbf e17f f531 8076 cd7c 2284 48db     ......1.v.|..".H
   a8724:	eb35 9290 1d2c c2c9 dfd1 b9e2 6ba1 c6aa     5...,........k..
   a8734:	e004 3cdd 5822 f765 1c38 0db5 2f20 c3dd     ...<"Xe.8... /..
   a8744:	d1d5 1cd2 0f47 7ebe b3b8 b1f3 8ed2 8d52     ....G..~......R.
   a8754:	56ca e4d1 1ab1 75aa deca 2590 3969 a8f1     .V.....u...%i9..
   a8764:	875a a306 950e c41c 09dd 5dbe 8fa2 66fc     Z..........]...f
   a8774:	21c4 6e38 9d6c cda5 7c2a b516 1814 30c1     .!8nl...*|.....0
   a8784:	addb b6da 4eaa 3575 6630 9c5d 81c7 c93b     .....Nu50f]...;.
   a8794:	2c4a 4d8f 2a69 1eb0 a463 3843 9cc4 39b0     J,.Mi*..c.C8...9
   a87a4:	6792 97a4 c3a0 fbb0 0ba3 d40d db90 5b25     .g............%[
   a87b4:	a327 8630 3a6f 9892 2431 b135 a4c5 e077     '.0.o:..1$5...w.
   a87c4:	df5a 907b 185a 4582 a28d f6f3 1fc2 0616     Z.{.Z..E........
   a87d4:	f574 c69c 8878 2d25 eaa2 d143 3708 eca8     t...x.%-..C..7..
   a87e4:	ded9 3fbf 2601 87b0 df7f afbf b2be 3705     ...?.&.........7
   a87f4:	9c2f ec13 b303 12f1 2c90 2a6d ba8e 01a1     /........,m*....
   a8804:	7ac3 dad6 b983 1cf0 80bb b297 aa66 5db3     .z..........f..]
   a8814:	9f23 eacc d595 ecac 7d29 b455 bbfd f923     #.......)}U...#.
   a8824:	fb5c 6c14 df5c b84b 7388 6767 da1b 4623     \..l\.K..sgg..#F
   a8834:	2955 4b19 5bbb d332 c6eb 4f2f c90b 3bd2     U).K.[2.../O...;
   a8844:	be26 eda8 a72f fab8 eae6 7740 00dc e7db     &.../.....@w....
   a8854:	f764 6f2d 5eb4 6e20 7e77 6bb8 a2f2 6a26     d.-o.^ nw~.k..&j
   a8864:	9682 d6fd 25b5 c282 240b 9e69 93c0 4178     .....%...$i...xA
   a8874:	adca 5dd6 26a1 ecea e7a8 8265 1122 e7c7     ...].&....e."...
   a8884:	bca8 c3b2 8d25 822c a6d2 f97c e156 132d     ....%.,...|.V.-.
   a8894:	0286 e7e6 0e55 c744 3070 20a0 5694 27f5     ....U.D.p0. .V.'
   a88a4:	cad9 6875 790a cc7f 571d aff4 c70b facc     ..uh.y...W......
   a88b4:	dead 6f17 91ab 5651 fb27 6365 e232 d0c9     ...o..QV'.ec2...
   a88c4:	f759 7607 2df8 437e a5f3 5679 f45c c32f     Y..v.-~C..yV\./.
   a88d4:	b62d 35d0 bc07 b5dc 4968 ec67 61a7 6fa4     -..5....hIg..a.o
   a88e4:	b951 b6c8 ee7a 1c37 c381 6f60 ac6e f77d     Q...z.7...`on.}.
   a88f4:	70ac 382e ab0f cd4e fffa 5a03 26a6 ed2d     .p.8..N....Z.&-.
   a8904:	5ae0 c26c de7d 17a5 a31c c2d1 6476 1f63     .Zl.}.......vdc.
   a8914:	5fa7 d7d0 d343 ea57 7efe c744 9da6 bc6b     ._..C.W..~D...k.
   a8924:	8007 9a4e 0fd8 bfc7 c617 e0e4 9ab0 fb34     ..N...........4.
   a8934:	5a17 ff09 7ffb 98a9 d268 2294 5384 9489     .Z......h..".S..
   a8944:	4ea5 62b2 51fa 2c07 e21b 4b34 7543 b069     .N.b.Q.,..4KCui.
   a8954:	47d3 1d83 556b 70ff f557 5e83 0fd5 556a     .G..kU.pW..^..jU
   a8964:	5e69 4e36 e3c5 cfff f5ff ed18 f217 b2e8     i^6N............
   a8974:	5d22 61c1 29b0 1cb2 4c9d 24e4 2f1e 4bd9     "].a.)...L.$./.K
   a8984:	46cb 7a5f 2d6b 8eb9 f021 1b52 d0eb 8bbd     .F_zk-..!.R.....
   a8994:	a464 be99 6aac aeff 2375 0eea 89ea d41e     d....j..u#......
   a89a4:	6713 d650 5e8c 18f2 8dea f151 cfca 9f18     .gP..^....Q.....
   a89b4:	246e a1d2 78c6 7dbc 4d19 6c67 9191 16bf     n$...x.}.Mgl....
   a89c4:	ec4e 2355 6485 0065 ab2f cf4b 27f6 914a     N.U#.de./.K..'J.
   a89d4:	f0de 4d74 d3ec 5d55 c31f 3ab1 5192 f62c     ..tM..U]...:.Q,.
   a89e4:	f4e1 c98f 2257 6cf0 0f64 b31b 09d3 4fb2     ....W".ld......O
   a89f4:	0232 1958 c2f3 f18e b313 1743 8c31 3e28     2.X.......C.1.(>
   a8a04:	79f3 4d92 b2bc bcce 7b90 2823 da40 bd3a     .y.M.....{#(@.:.
   a8a14:	b1b9 68fb a7dd c4ba 550d e5f0 04de 900d     ...h.....U......
   a8a24:	84c3 4dfd 8b99 4dcb 4979 876c ac45 43db     ...M...MyIl.E..C
   a8a34:	6e8b 9ba4 235f 8545 3126 6a40 7b60 fa4f     .n.._#E.&1@j`{O.
   a8a44:	736b 6876 2495 78dc 67e9 5ec9 0bac a2bb     ksvh.$.x.g.^....
   a8a54:	b1e9 ba45 3015 5b5e 7638 1d55 c391 6514     ..E..0^[8vU....e
   a8a64:	ff7b be2b faa0 24c0 1365 1e76 5fce 95e8     {.+....$e.v.._..
   a8a74:	7c38 bf43 d503 0a0d 62d9 4087 a2f9 3b68     8|C......b.@..h;
   a8a84:	b54b be9a 7dd5 a88b cb23 e385 6e86 0770     K....}..#....np.
   a8a94:	33b8 23a5 3618 925d 9ae2 0d09 742b f83b     .3.#.6].....+t;.
   a8aa4:	d14d 5150 95d7 a9eb 2745 4036 9345 9b33     M.PQ....E'6@E.3.
   a8ab4:	61ed 8f98 73ad 4ff9 be39 0d67 4501 29fe     .a...s.O9.g..E.)
   a8ac4:	343d 25e4 fba5 bc4d 2156 9fff 8fb6 e53d     =4.%..M.V!....=.
   a8ad4:	a4c7 bf66 2a25 893e 680a b326 ef52 ee53     ..f.%*>..h&.R.S.
   a8ae4:	20af 3e09 063d 5913 9b7e 9f5c 9ac0 ff62     . .>=..Y~.\...b.
   a8af4:	1950 ec30 80f8 af7a 12b8 bae5 31c3 77de     P.0...z......1.w
   a8b04:	bd8d 3dac d5cc 7cbd 2b34 84d0 1f23 6ab1     ...=...|4+..#..j
   a8b14:	8d48 17ae 0b91 a270 9084 6c89 a09b b9f9     H.....p....l....
   a8b24:	f645 3c33 1b63 483a 6fe1 d326 d0c8 30e1     E.3<c.:H.o&....0
   a8b34:	29e7 9fbb d94a 9d53 63ec 81ac 9fa2 5487     .)..J.S..c.....T
   a8b44:	1586 abb6 2c71 d7d5 17d1 ad55 80dc 916d     ....q,....U...m.
   a8b54:	9f9f 922a 7081 6e6e d1e8 a67c aa66 8a20     ..*..pnn..|.f. .
   a8b64:	498a fa15 18d4 f58c e318 688e 021c 616d     .I.........h..ma
   a8b74:	9091 08ab d158 6543 8edc 9b9d 2a8c 946a     ....X.Ce.....*j.
   a8b84:	6ea4 5e13 0fea 6971 3be4 2ea1 b04c aae8     .n.^..qi.;..L...
   a8b94:	5adf 85b3 afd3 266d 9838 6b44 d1ea 7749     .Z....m&8.Dk..Iw
   a8ba4:	a280 350a 83ff 2031 74b8 20ec f608 9a22     ...5..1 .t. ..".
   a8bb4:	e492 87f0 ba22 9a73 3f4c ef16 bcef dd9f     ....".s.L?......
   a8bc4:	9949 cd3c f3e3 34f4 8bae 7772 2555 e3e5     I.<....4..rwU%..
   a8bd4:	d453 1184 20ef cbe7 cfb7 6e9f be41 b25b     S.... .....nA.[.
   a8be4:	0f7d 0ed9 14cb 5663 47bd 1ab7 0f47 8ffa     }.....cV.G..G...
   a8bf4:	6f8e cfde f7ae 3ac4 bf78 fbbb 7955 d21e     .o.....:x...Uy..
   a8c04:	c435 361d eb8f e4ac 22c7 577a dcdc 5f7c     5..6....."zW..|_
   a8c14:	df88 088b 0a09 5dff 6931 4ec5 5341 9be1     .......]1i.NAS..
   a8c24:	af9b efc3 bc0b 10bf 1c49 f9dd 3935 21f9     ........I...59.!
   a8c34:	8685 eb6f 0d61 4c27 b3bc e773 1ac7 dcc7     ..o.a.'L..s.....
   a8c44:	bf7b 3f0b e5b7 a1cf 83de 2c05 7251 bd7b     {..?.......,Qr{.
   a8c54:	e425 0d7b 73cc 7b7c 14b6 3db2 6606 013f     %.{..s|{...=.f?.
   a8c64:	edee b96c 93aa 95b2 1cfb b9d8 5102 641f     ..l..........Q.d
   a8c74:	e1fd e1d9 17cb d7b7 4318 97b6 74f1 f5eb     .........C...t..
   a8c84:	addb b6df ef86 ef67 f89f 0f47 d679 cfdf     ......g...G.y...
   a8c94:	f782 6e4f 5b2b d941 8b37 af38 b38b dfef     ..On+[A.7.8.....
   a8ca4:	96de 5331 e6dd be29 2b25 ed4c e2cb d004     ..1S..).%+L.....
   a8cb4:	4c03 c5ef 33ad 8abb 2ca3 b9be f3b9 9f38     .L...3...,....8.
   a8cc4:	4595 bb3a 48b9 5e4e bdbf 06f9 b718 df8f     .E:..HN^........
   a8cd4:	6524 7579 d343 f5b9 cd32 f553 1508 3cdf     $eyuC...2.S....<
   a8ce4:	ca7f dff5 ae0a 5953 4c37 ab4c 400b d664     ......SY7LL..@d.
   a8cf4:	89b0 02ce 8731 0151 d0d7 c9ae 9964 51c5     ....1.Q.....d..Q
   a8d04:	e009 d1d2 ba88 fb5c 2925 d82b 00b2 efee     ......\.%)+.....
   a8d14:	5f67 3821 857d 62ee e866 147e cb0a b63b     g_!8}..bf.~...;.
   a8d24:	4c59 6c97 9302 f167 1a38 47de 0602 632f     YL.l..g.8..G../c
   a8d34:	7010 65b7 8b2c 1c45 75e1 5f81 d743 58cb     .p.e,.E..u._C..X
   a8d44:	221b e0cd b875 3bb7 8e1c 6867 bd61 a38c     ."..u..;..gha...
   a8d54:	601f e07b f8c6 18bd 8f47 29c4 73d5 bf4e     .`{.....G..).sN.
   a8d64:	a867 877f 1301 e95d c2ab a8c7 0bd1 7f4c     g.....].......L.
   a8d74:	3e8d 8a4f 9c39 1395 6b5f 4776 4089 1f9d     .>O.9..._kvG.@..
   a8d84:	2a5f 475c 5a48 c720 5e8e 49f6 7bc0 86c5     _*\GHZ ..^.I.{..
   a8d94:	cbb4 d58d 25f3 f49f 48ea 1d46 e2e8 ba71     .....%...HF...q.
   a8da4:	8f58 2bac b454 27ac f3e7 5b61 4610 cb4d     X..+T..'..a[.FM.
   a8db4:	35bb b9d6 ac86 5764 bc7b 7c16 1f75 5d36     .5....dW{..|u.6]
   a8dc4:	46b1 59a4 b8e6 4b5c b94c c8ed 07ad e57b     .F.Y..\KL.....{.
   a8dd4:	f85c 0cc9 9a4e e521 fbdd 7687 db4e bedf     \...N.!....vN...
   a8de4:	79d3 a314 e626 ba4d bcb6 da02 5d44 9627     .y..&.M.....D]'.
   a8df4:	21f2 1e00 7e4f bba1 92c4 68fe 638f 7fc3     .!..O~.....h.c..
   a8e04:	5e37 849a d2ba 3b0c b5c2 92b1 6ddf 4cfd     7^.....;.....m.L
   a8e14:	f628 c50f fa0f 77d3 ab7b 22fa 1f5a 33b8     (......w{.."Z..3
   a8e24:	4b23 f382 af9b 002c a4d4 6c02 b4b4 ba5f     #K....,....l.._.
   a8e34:	38bb 2518 bd5d a04b a477 6735 9db5 ef1c     .8.%].K.w.5g....
   a8e44:	e826 d8e5 ce37 94d7 7210 16b8 7c4a ba15     &...7....r..J|..
   a8e54:	2880 16d5 6d6c 126e b46e b49b 1cc5 ab56     .(..lmn.n.....V.
   a8e64:	111c 8280 b107 3e7f 9e68 3c9c c55e 36e4     .......>h..<^..6
   a8e74:	c6af 7160 d1fb 9f40 6bf4 552d 8b5f 6c1f     ..`q..@..k-U_..l
   a8e84:	2728 bfe2 e20d f33f ab04 653b 3336 2980     ('....?...;e63.)
   a8e94:	e35e 7ec5 fb3b 1b77 d3b3 6ce4 43da c876     ^..~;.w....l.Cv.
   a8ea4:	5345 5e5e 9bc6 b01c 9dcb b0ef d755 8984     ES^^........U...
   a8eb4:	624e 1971 8b8b 1c58 d1c4 f935 1b85 e608     Nbq...X...5.....
   a8ec4:	07ba e302 0f94 c704 0318 455e 8c7c 68a5     ..........^E|..h
   a8ed4:	8e26 e206 be50 c07c 1797 f3f8 5392 3f46     &...P.|......SF?
   a8ee4:	1316 ec78 deef 1bbf 40fe c38f 61fb 731e     ..x......@...a.s
   a8ef4:	83da 4530 8774 c3cf 773b 1919 8abe 53c5     ..0Et...;w.....S
   a8f04:	d959 4263 743c fe57 9f34 9d45 3e41 c290     Y.cB<tW.4.E.A>..
   a8f14:	7099 10a0 597d d0ee 403d cd73 c115 fc64     .p..}Y..=@s...d.
   a8f24:	0fb7 c8a3 8ea5 7512 1ebd 980e 2ab5 a3d6     .......u.....*..
   a8f34:	5ec4 8057 aabc 572e 3853 c20c aa04 ae9c     .^W....WS8......
   a8f44:	7b2a 6415 37dc 074a fb5e a730 0c05 81c4     *{.d.7J.^.0.....
   a8f54:	587c 85e3 db29 343a d760 22c2 1752 230c     |X..).:4`.."R..#
   a8f64:	c3dc 183e e391 8a13 ec6f a5a1 8784 5962     ..>.....o.....bY
   a8f74:	6ef2 1c9d b547 1d78 a537 f8f7 c575 c1ed     .n..G.x.7...u...
   a8f84:	c857 f015 3933 5c93 d38b 0e8e e0b8 db23     W...39.\......#.
   a8f94:	8bc7 cc29 a4fd 6e98 3402 c6a0 22d6 cd9e     ..)....n.4..."..
   a8fa4:	487e 5eae cbc6 6ee6 8324 f21a f3b1 be91     ~H.^...n$.......
   a8fb4:	4603 7899 1178 6c06 2af8 3527 ef42 6f18     .F.xx..l.*'5B..o
   a8fc4:	0407 c18b b55b 72d8 76f4 a26d f3c3 8a31     ....[..r.vm...1.
   a8fd4:	e9ad 0be2 200e 2375 adb0 046f 0be0 3fc0     ..... u#..o....?
   a8fe4:	4df2 a3e8 88ca d1b7 8ee3 7072 0c34 e204     .M........rp4...
   a8ff4:	185a 6bd4 4a76 4e14 2373 b489 c758 bd9a     Z..kvJ.Ns#..X...
   a9004:	4d91 3c30 cc34 fb12 b343 8f97 991d ca96     .M0<4...C.......
   a9014:	17a6 c26f a65a b22a 0a8d d98e adab a8bc     ..o.Z.*.........
   a9024:	4eb7 19d0 6419 af9d 3432 b14b ad46 481d     .N...d..24K.F..H
   a9034:	52b1 8210 4602 8663 6f3f c997 f914 725c     .R...Fc.?o....\r
   a9044:	14d6 85d2 3f2e 66a3 a990 3a40 ea3a d0f5     .....?.f..@::...
   a9054:	86ca 31a1 3390 35df 4dd4 afb3 d1fa fd35     ...1.3.5.M....5.
   a9064:	e4b6 f558 268c 59c1 1310 0e31 fb95 5d6e     ..X..&.Y..1...n]
   a9074:	ce8a 93ee b26e 031e 2f7a 30a4 68b9 ea33     ....n...z/.0.h3.
   a9084:	808e fd39 1c36 ecec 50a8 76b0 5f9a 4a47     ..9.6....P.v._GJ
   a9094:	6074 e3af 452e 7e2e e1ce 6596 e318 2390     t`...E.~...e...#
   a90a4:	870b 8090 8301 a0ad d0c0 dae5 7b57 e043     ............W{C.
   a90b4:	bc56 f52c 37d5 fb3a bd54 93e5 b712 ede1     V.,..7:.T.......
   a90c4:	de93 2088 479b 3dc8 daba 9601 bc8b 0b5a     ... .G.=......Z.
   a90d4:	d41b 99e9 d39a 4280 aa6c 58ee 22e9 2d61     .......Bl..X."a-
   a90e4:	c8f7 2b4e b723 7d7d c3dc c861 0455 35d6     ..N+#.}}..a.U..5
   a90f4:	616e 1a42 d2e7 b723 481f d8bb 8498 3e0f     naB...#..H.....>
   a9104:	1cca 7cb4 9b4e b00d 602b 5269 f7db 4cd1     ...|N...+`iR...L
   a9114:	3272 8708 d041 5a1b 5aaa 28c5 571f 3ca4     r2..A..Z.Z.(.W.<
   a9124:	baa5 c68f 6b3a 7b5c 7ad8 bb64 b8fc 8cde     ....:k\{.zd.....
   a9134:	3150 76ac fd12 5d0e 6c4b 9643 b5b7 195c     P1.v...]KlC...\.
   a9144:	7f29 1722 6ae3 d2cc 16b5 acc5 f44c a448     )."..j......L.H.
   a9154:	2da7 3df6 1c26 d130 b71e f262 95a0 c590     .-.=&.0...b.....
   a9164:	76f3 5dac c5f6 53d2 7d16 491e 72d5 3a54     .v.]...S.}.I.rT:
   a9174:	918f d7f9 cf0e 4b20 b328 600a 4305 2eca     ...... K(..`.C..
   a9184:	8418 65e1 2aba f64b 833e 1b80 1c56 5ef4     ...e.*K.>...V..^
   a9194:	16d0 cb09 5af5 c7cf 7c21 e676 2f04 7e51     .....Z..!|v../Q~
   a91a4:	41b7 a473 4394 2997 c3cf d4d3 ccfa a643     .As..C.)......C.
   a91b4:	2d6b 1698 93cb 7069 8f67 60e3 c7b1 28f6     k-....ipg..`...(
   a91c4:	822a 1c9a 5a56 dfee 704c 5ee2 1e3a 8b93     *...VZ..Lp.^:...
   a91d4:	3f1d 409e afa6 7462 856f c437 12e8 663d     .?.@..bto.7...=f
   a91e4:	2200 dd37 b1f4 3c37 2fde 3802 223a 857e     ."7...7<./.8:"~.
   a91f4:	594a ad5b e08c 5adb d885 d49d 02e6 f6dc     JY[....Z........
   a9204:	171e fd84 11a1 547e 9a80 7ba1 8b15 8c3c     ......~T...{..<.
   a9214:	6e29 1fd5 31f2 92f8 abee 0ec3 b007 1036     )n...1........6.
   a9224:	e268 38d7 9c3b 8ed8 730f eb65 e0a2 2f10     h..8;....se..../
   a9234:	d917 25d1 0f95 6a73 638c 8699 191b 1333     ...%..sj.c....3.
   a9244:	b4ef 6fa2 8347 ab63 d55c dc09 ac47 fb42     ...oG.c.\...G.B.
   a9254:	dc6d c0be e857 dbf4 5e58 7c48 f18b 153e     m...W...X^H|..>.
   a9264:	eb80 4bc1 5c19 330b 74a7 7ffb 7f84 b58e     ...K.\.3.t......
   a9274:	91aa 377c e5d7 cb94 31bd 24c7 9785 850a     ..|7.....1.$....
   a9284:	2897 081c 387c 8e2a 478f aeb1 562f d8e6     .(..|8*..G../V..
   a9294:	7680 9070 e487 0255 5ab2 c7ef d313 9db8     .vp...U..Z......
   a92a4:	841c 8098 8767 3fd3 b14e 87c5 89ec c3ff     ....g..?N.......
   a92b4:	5669 c49c ab59 7867 22f9 e1bf 03c5 3572     iV..Y.gx."....r5
   a92c4:	0cc9 8de5 df88 0a30 d487 aab9 cf76 cce3     ......0.....v...
   a92d4:	5d28 abf1 9f91 42e2 d5bd 02fe 476f 8a44     (].....B....oGD.
   a92e4:	8d66 847e e57a e7cd 9724 e2fa e939 f78b     f.~.z...$...9...
   a92f4:	2187 1b60 9e8d 437a c062 5d59 a0ec ca28     .!`...zCb.Y]..(.
   a9304:	2759 8838 8db2 63b1 b88c fc68 abb3 98e6     Y'8....c..h.....
   a9314:	0ccb 82bd 72f4 10ec 0eae 0886 2731 f2e3     .....r......1'..
   a9324:	9990 f11f eca7 4014 1c3d 14e8 191e 46bb     .......@=......F
   a9334:	1fda 1d1d 8253 596b a9ca addd 4a81 b7a3     ....S.kY.....J..
   a9344:	eea7 921a 8be8 9f5a baa3 f89c a0cd 6070     ......Z.......p`
   a9354:	0453 ec12 a84b 710d 63d7 3379 a9f9 aefa     S...K..q.cy3....
   a9364:	a391 0449 39b3 ab6b ac72 fc4b e361 1ec4     ..I..9k.r.K.a...
   a9374:	4a3f 6fa7 69e7 f172 ae9a a140 be45 7e10     ?J.o.ir...@.E..~
   a9384:	44cc d748 6ffa ed0f e1f5 36d5 45cb ae8b     .DH..o.....6.E..
   a9394:	63b8 619d 3492 844a 98c9 283c 2547 6da0     .c.a.4J...<(G%.m
   a93a4:	3725 234a 7107 e5eb 45fe 300e 21e5 360e     %7J#.q...E.0.!.6
   a93b4:	b10c e7e7 dd13 0f0a ffa3 dd1c 0349 469a     ............I..F
   a93c4:	0399 dba9 35e2 7369 f53a be5c 1453 0c8f     .....5is:.\.S...
   a93d4:	ad4d e14b d272 7185 a147 5bef 2a85 72e5     M.K.r..qG..[.*.r
   a93e4:	25fc 2599 9174 b272 45ec 8d69 7857 54a7     .%.%t.r..Ei.Wx.T
   a93f4:	6bca 42d9 0ca3 d4e6 91aa 2f75 149d 16d2     .k.B......u/....
   a9404:	1753 1c31 191c 8aa3 e09d 1305 9869 b9b8     S.1.........i...
   a9414:	3dd9 7a24 06cc 83ca 52ac c7b8 1a4d d0ce     .=$z.....R..M...
   a9424:	746f cb15 afe1 1ee5 e51f 3f6c 1ae2 3884     ot........l?...8
   a9434:	20ed 719e 8e12 cb10 edf9 6644 4f90 2f91     . .q......Df.O./
   a9444:	f529 043c 9dc0 f337 ed06 91e2 368e d25b     ).<...7......6[.
   a9454:	8070 4590 65e0 e977 4cb7 9c7e e836 6659     p..E.ew..L~.6.Yf
   a9464:	ac21 0eb2 a1cd c9c3 a6d2 9e7c 8bcf 0ca6     !.........|.....
   a9474:	d14f 06e2 490b adbf 210e f2dd 5a19 6447     O....I...!...ZGd
   a9484:	9855 a034 b85f 3056 cac6 ee8e 1339 87cb     U.4._.V0....9...
   a9494:	63bb ae1b 3008 24ec 52f0 28ac 680b ec81     .c...0.$.R.(.h..
   a94a4:	a42c 2ae3 fa67 06c2 086c 07ed 6651 7f67     ,..*g...l...Qfg.
   a94b4:	d293 2581 29a4 96a7 2f18 a55e 67e9 bd21     ...%.).../^..g!.
   a94c4:	63cc 3f1a 2931 0bf7 98e0 5165 ec76 193a     .c.?1)....eQv.:.
   a94d4:	a9e2 9089 95be 2246 0fad c587 b89a d6da     ......F"........
   a94e4:	351a bdc3 25d8 6a81 b3fe 750b b52b 44da     .5...%.j...u+..D
   a94f4:	9b06 e417 02b9 0bd0 e5bb e566 153c 2080     ..........f.<.. 
   a9504:	e2f2 aa93 56c8 e275 bba1 4058 6575 6d43     .....Vu...X@ueCm
   a9514:	784d c248 1861 20fb 2f26 4bdf 624d 5940     MxH.a.. &/.KMb@Y
   a9524:	e6f8 c991 97a8 2403 2e51 4269 79a1 828e     .......$Q.iB.y..
   a9534:	7266 3149 8cd2 8d0a a068 40b5 3a7b 22a6     frI1....h..@{:."
   a9544:	13dc 402e 4a58 3db0 dbc3 3c65 ec4d 60f4     ...@XJ.=..e<M..`
   a9554:	74e4 0d43 d7ba 80d0 c8c9 1532 3f3a 3f76     .tC.......2.:?v?
   a9564:	e44c fa98 726e a1b8 7d9e 26f2 e66e 1036     L...nr...}.&n.6.
   a9574:	cf55 bed1 5319 bd5c d568 5277 b583 779a     U....S\.h.wR...w
   a9584:	0a68 65a8 796f 09e9 4495 2aaa 85ea 7924     h..eoy...D.*..$y
   a9594:	38e8 a3cd 8f27 961c 5156 84c7 2db8 4688     .8..'...VQ...-.F
   a95a4:	0305 bfd4 7d09 2b0f 4aa7 68aa 7a10 e967     .....}.+.J.h.zg.
   a95b4:	760c db0e 4253 fead ab27 7e05 7022 5a3b     .v..SB..'..~"p;Z
   a95c4:	e751 2181 d9dd d539 5eec 9cdc 1106 2637     Q..!..9..^....7&
   a95d4:	850e d0a8 d3b5 7ca4 ff9d 5c90 293d 882e     .......|...\=)..
   a95e4:	feb7 0f39 f49c 6537 7b02 3e0f 6bbc f87c     ..9...7e.{.>.k|.
   a95f4:	1979 00fe debc 3265 283d cece 0100 0974     y.....e2=(....t.
   a9604:	7ec8 10e9 4db7 417e 1b29 c4f3 70ca a05a     .~...M~A)....pZ.
   a9614:	c376 a29b d67a 69da 558a 8e1f 6306 3a94     v...z..i.U...c.:
   a9624:	c8a4 d7d1 bf51 a876 e056 5d35 ad66 171e     ....Q.v.V.5]f...
   a9634:	1604 ad1f 2fb3 b386 ac9d 8092 5ccd f5a4     ...../.......\..
   a9644:	74db 1906 9951 0746 5ab4 c40b cfcd e89a     .t..Q.F..Z......
   a9654:	26dc e14a 023c 856c e4de 4494 faa2 cae6     .&J.<.l....D....
   a9664:	2ee4 fe8d c6a6 2427 c3ba 29c8 b7b8 f0b8     ......'$...)....
   a9674:	4dcd 44a9 130e 62e8 67ce df1e d069 35c0     .M.D...b.g..i..5
   a9684:	5c9f d9d6 e84b 2fd3 b569 50c2 40f1 8c66     .\..K../i..P.@f.
   a9694:	645b 5ae6 939c 8a74 d04d ed6e 22be 2d77     [d.Z..t.M.n.."w-
   a96a4:	6aea 69d4 3ba5 6ed1 f525 7d40 694f f59f     .j.i.;.n%.@}Oi..
   a96b4:	25b8 e780 0903 f671 ccf1 f60b c311 e683     .%....q.........
   a96c4:	4866 46db 1ba9 c087 3908 98a5 947b 1d69     fH.F.....9..{.i.
   a96d4:	9272 022c e9e9 4e9a 095a bf1a 066c 340d     r.,....NZ...l..4
   a96e4:	dde5 1e0c 5728 5aaf 11e0 3f1b 9942 dac6     ....(W.Z...?B...
   a96f4:	2095 463d d4eb 262b 7905 02be 9052 44ff     . =F..+&.y..R..D
   a9704:	5405 56f6 3a8e 8843 d0c2 0ad3 249c 2dfb     .T.V.:C......$.-
   a9714:	2855 9c18 b97e 3d6d 75ac 7b20 184b 76ca     U(..~.m=.u {K..v
   a9724:	7203 6a30 04ab 141b 2200 d2af 5eb1 3c2c     .r0j....."...^,<
   a9734:	0dbd 6334 13a2 06b4 2e07 ac42 28e0 9166     ..4c......B..(f.
   a9744:	f313 3078 b91b 7988 e419 b07c 4d66 7bbc     ..x0...y..|.fM.{
   a9754:	c45a 01d9 4e1c 2867 ab1b 4278 54ec 5b34     Z....Ng(..xB.T4[
   a9764:	2c96 291f 49be b07f 316f 1b2e b39b 5b28     .,.).I..o1....([
   a9774:	a272 c9a8 2bbe 8326 9b70 a303 2cb0 edcc     r....+&.p....,..
   a9784:	6f89 33b0 ec99 9d07 150b 2d71 2322 17a8     .o.3......q-"#..
   a9794:	d369 a19b a432 5232 c540 c6c6 c6c0 e9da     i...2.2R@.......
   a97a4:	f147 d5b1 28f5 7785 0114 a717 19a7 7889     G....(.w.......x
   a97b4:	4a2f 3ca0 ac1d bca6 c0e5 b6a9 14dd 52f2     /J.<...........R
   a97c4:	246e fd1c 0fae 76d1 f667 cbc9 a1c2 a5eb     n$.....vg.......
   a97d4:	d391 f493 585c c77a 5d7d 7600 8bdc 5bbf     ....\Xz.}].v...[
   a97e4:	4c42 35a5 a791 0f13 8c69 e09e 8e8b 8eae     BL.5....i.......
   a97f4:	8f21 5716 36df 6c2f 9a94 816a fc66 374e     !..W.6/l..j.f.N7
   a9804:	7cd2 aab9 2b81 1191 da77 af30 34a2 08b1     .|...+..w.0..4..
   a9814:	9b6e 12d4 a44f 5468 bd05 a941 5d32 5ba8     n...O.hT..A.2].[
   a9824:	a121 ec30 9454 2ca8 5775 4396 c238 59c9     !.0.T..,uW.C8..Y
   a9834:	ca12 2815 25c5 959c 9cad 61d3 9a2e 8094     ...(.%.....a....
   a9844:	662d 48d5 b3d1 d1b8 ab13 ba65 4bc0 3b4c     -f.H......e..KL;
   a9854:	7392 49d5 194a b059 ade6 964a b707 e9b0     .s.IJ.Y...J.....
   a9864:	30ab c871 fd2d 57f5 d259 f239 6ad7 9f2a     .0q.-..WY.9..j*.
   a9874:	75e7 6481 7b6d 8d42 a6f3 af89 50ae 25bb     .u.dm{B......P.%
   a9884:	1a1a 12a3 2ee9 4f6c 8e39 964c 8941 f067     ......lO9.L.A.g.
   a9894:	6925 070f d841 37e6 aa26 5235 1876 ba04     %i..A..7&.5Rv...
   a98a4:	50e6 9339 fe92 5550 44be 08e7 e648 8c40     .P9...PU.D..H.@.
   a98b4:	5d65 8cc8 7eec 24bb 157f 6b18 5941 1ab3     e]...~.$...kAY..
   a98c4:	5eeb 260d 2b1d fa8f 8915 ac91 d1e7 c4b9     .^.&.+..........
   a98d4:	b6cd 0173 49aa 3c49 3318 beb5 f8a3 3e82     ..s..II<.3.....>
   a98e4:	7623 abe9 092e 6fdb 6601 6a23 338e 26b2     #v.....o.f#j.3.&
   a98f4:	2b73 a487 29f1 a48b 7b49 3aaa 4575 3b25     s+...)..I{.:uE%;
   a9904:	070f 05bf b96a f315 650c 40f5 a1aa bc88     ....j....e.@....
   a9914:	f2bd 865d edaf a265 1238 9eb3 238a 1d21     ..]...e.8....#!.
   a9924:	c3c1 9ed6 4424 8631 dac9 e95c cc8f 2c0e     ....$D1...\....,
   a9934:	16f5 5c51 1302 049b 11e1 6936 c66f b94d     ..Q\......6io.M.
   a9944:	3b95 1440 02ae d365 e0e5 676e 27e7 773e     .;@...e...ng.'>w
   a9954:	2075 16ab 366f 092a 499a 9002 b28a a2c1     u ..o6*..I......
   a9964:	23b5 4b0d b06e 6515 a658 0adb 761e 947e     .#.Kn..eX....v~.
   a9974:	eac2 6898 f5c1 8e69 79f1 cc74 40b3 d54a     ...h..i..yt..@J.
   a9984:	77a5 ceb7 60e8 6488 b44b 98d6 bd03 60bc     .w...`.dK......`
   a9994:	8acc 0918 dea9 d378 71f5 af26 f99d 974e     ......x..q&...N.
   a99a4:	3a4a dd8b b789 6428 ccc1 9848 ea46 cf6a     J:....(d..H.F.j.
   a99b4:	1dde ce8d 5b7d 59db f434 6c19 e161 373b     ....}[.Y4..la.;7
   a99c4:	610d cc51 6965 fc73 3d69 a4f7 14df 0567     .aQ.eis.i=....g.
   a99d4:	dde3 80fb 63da 4659 3e1f a9ad 2ea9 25e2     .....cYF.>.....%
   a99e4:	965e 146f d906 5ff2 99f2 0448 2bc1 5025     ^.o...._..H..+%P
   a99f4:	cc09 deb0 9de6 73e3 7910 8f62 2f28 af64     .......s.yb.(/d.
   a9a04:	2764 51d4 7688 74e6 3c8c e3c7 dbec c934     d'.Q.v.t.<....4.
   a9a14:	1b66 f32f 83dd ca0f cafc 401b 111a aa7d     f./........@..}.
   a9a24:	dc9c 6b2e 6873 767d 7551 5174 2759 e0ee     ...ksh}vQutQY'..
   a9a34:	4aa7 0cb2 a506 6425 4cb1 eefb 6c49 075c     .J....%d.L..Il\.
   a9a44:	84a0 bc4f 758e 1b3c 656d c90d 30cf 79f9     ..O..u<.me...0.y
   a9a54:	d69e b5d1 2b0a 6ed1 a2ce 2841 b7af 8f5e     .....+.n..A(..^.
   a9a64:	943e 77be be8e 8006 f687 c11a d098 5357     >..w..........WS
   a9a74:	8e4d d008 8f1e 562e 3b31 6e69 0130 ccd8     M......V1;in0...
   a9a84:	2eaf 589a 232b c9aa a685 c929 c5d7 633f     ...X+#....)...?c
   a9a94:	62d3 b80f 3704 d7fd 5eb4 021c 7adc 8ec8     .b...7...^...z..
   a9aa4:	ba50 5d75 e9ed f2cc d272 f713 e75c 3e8c     P.u]....r...\..>
   a9ab4:	1d03 2efc 56dd 30ed 9e19 73b8 bef4 bf7e     .....V.0...s..~.
   a9ac4:	c01a 3ebf 19fe c23e 78df 7ef6 37b5 9c18     ...>..>..x.~.7..
   a9ad4:	efe0 43de 85fa 79f4 9f32 df1f 6d39 b28d     ...C...y2...9m..
   a9ae4:	fe2b 6446 0499 d32a 9ed6 ed2f bd57 f37f     +.Fd..*.../.W...
   a9af4:	8982 85e7 0dde 083c d4ef 8f63 b4bb fce7     ......<...c.....
   a9b04:	9eee 815a 3c22 9571 570a d910 9651 8ad8     ..Z."<q..W..Q...
   a9b14:	9d32 61ca e4aa 8b06 1f0a 31e6 e97f 4e74     2..a.......1..tN
   a9b24:	4d6d 02f3 1680 4280 9f02 922b 70ce 579a     mM.....B..+..p.W
   a9b34:	2cce 26b3 5d8b 92a0 bb1d cbac 87f8 aae4     .,.&.]..........
   a9b44:	9862 44e1 c227 ac0f 6037 5574 dc91 9e06     b..D'...7`tU....
   a9b54:	8600 6ecb e973 99eb b66f 4f3d 932f 77d9     ...ns...o.=O/..w
   a9b64:	7452 8ade 9629 7734 2398 9a49 981c 37e0     Rt..).4w.#I....7
   a9b74:	9f01 debd ebc0 1f5e e02b 2be8 d618 c161     ......^.+..+..a.
   a9b84:	e1b8 2e24 0c69 3a67 0e23 158f 0966 3f9a     ..$.i.g:#...f..?
   a9b94:	1c7f ab25 7011 4f59 c50c a3aa 6fce f28b     ..%..pYO.....o..
   a9ba4:	6e2c 13df 3368 ab5b b550 2e28 880e fc72     ,n..h3[.P.(...r.
   a9bb4:	9175 92e4 94f7 7e53 1b56 4928 9e90 9c51     u.....S~V.(I..Q.
   a9bc4:	ebe9 00fc 2503 d65c 932f 657c 1281 aa10     .....%\./.|e....
   a9bd4:	73af a182 6361 bd8a 60bc 14fa 9c49 ff89     .s..ac...`..I...
   a9be4:	f4a3 eb9c e1a0 345d f467 64ed 1bf8 649f     ......]4g..d...d
   a9bf4:	ccec f426 d2bb 7887 f3c1 c896 359a 4277     ..&....x.....5wB
   a9c04:	a37e a023 23a3 bb2a d399 1959 3e9f 8b29     ~.#..#*...Y..>).
   a9c14:	19a5 f707 1bf4 4ef4 53fc 928c fbdc 9d77     .......N.S....w.
   a9c24:	362f ed8d e709 9f13 b8ea d62e 55e4 a130     /6...........U0.
   a9c34:	7259 6560 a378 1262 2c01 195a 8a2f 23f2     Yr`ex.b..,Z./..#
   a9c44:	841a 647a a9ec c893 9a37 6695 5c47 2aa4     ..zd....7..fG\.*
   a9c54:	5d4a 1d83 8c58 6f46 2d3e 1f99 4a49 e6c0     J]..X.Fo>-..IJ..
   a9c64:	6556 29da 601e c1dc 13a0 2b61 6e7f a5c6     Ve.).`....a+.n..
   a9c74:	2d66 bb27 c1e5 2a0d bbde 6b2f 973e 7cf2     f-'....*../k>..|
   a9c84:	5135 c1c3 91a7 3b54 1b00 4b94 59ee 40c3     5Q....T;...K.Y.@
   a9c94:	0ca1 2e2d 069e a73c 5b1d 26ba c52e 2f01     ..-...<..[.&.../
   a9ca4:	b260 a12d c6f1 b48f 07e9 9a0a 2ce0 ed21     `.-..........,!.
   a9cb4:	4d8b 99c7 bf03 9990 2323 a5e1 27a3 886b     .M......##...'k.
   a9cc4:	7557 2a41 1292 d1bb fda9 9e07 78c6 d20e     WuA*.........x..
   a9cd4:	fcd9 de9c dd60 ca5f 1194 e91d 2000 1098     ....`._...... ..
   a9ce4:	0ab9 4479 aaf9 9f03 c0ea 02cb d9a8 8b23     ..yD..........#.
   a9cf4:	e6aa 08c7 26ed 6b94 e506 64fb 6f0f 66e1     .....&.k...d.o.f
   a9d04:	5e09 244b 34f9 18a5 965a d0ae a8de 6fdc     .^K$.4..Z......o
   a9d14:	2196 2f2b 90b7 6c54 1950 37c9 1fcb 5d31     .!+/..TlP..7..1]
   a9d24:	a22c 148b 8239 2fe7 369f e854 c79f cda4     ,...9../.6T.....
   a9d34:	26b9 5a14 d915 7379 7c98 d653 71f2 b3b0     .&.Z..ys.|S..q..
   a9d44:	bcf3 f94b 8ea3 639e c6a3 c1af 4ece 2cbb     ..K....c.....N.,
   a9d54:	4ae9 5674 5f40 2502 c3d5 58aa 62af aad4     .JtV@_.%...X.b..
   a9d64:	a504 7966 8d74 c35f 651c d14d b929 41a8     ..fyt._..eM.)..A
   a9d74:	3e89 f629 f4e5 bb47 efdd c11a 7f9d bd1e     .>)...G.........
   a9d84:	78bf 3fdf bdee a3bf 7a1e 6797 6299 8cf3     .x.?.....z.g.b..
   a9d94:	8b2e 3733 4500 544b 2414 e45e e40e 26d7     ..37.EKT.$^....&
   a9da4:	edd7 2636 c1dc 1d7a 3402 33f0 c783 271a     ..6&..z..4.3...'
   a9db4:	2a5c 44c3 256d 3ccf 9b72 9b44 08ba 3396     \*.Dm%.<r.D....3
   a9dc4:	d397 58e1 59c8 a05a 6282 defb 6d81 7b00     ...X.YZ..b...m.{
   a9dd4:	f35c 3a82 ed6e adaf cf19 19ed a22f 4d5f     \..:n......./._M
   a9de4:	5a13 8808 3ade a08a 9668 398c 79b4 ea67     .Z...:..h..9.yg.
   a9df4:	f791 ebc1 c7c5 0724 040c 46fe 3e05 49ae     ......$....F.>.I
   a9e04:	d041 1e5a 6a92 0d1b df1c b4d6 ec89 016f     A.Z..j........o.
   a9e14:	8746 2187 4362 2786 bea5 1fd9 29a8 012b     F..!bC.'.....)+.
   a9e24:	d9bd 4f6b c219 c8de af3e 6883 6f5f 7292     ..kO....>..h_o.r
   a9e34:	e36d b92a 98fa 0f2e a78b ccf9 dd67 7b3f     m.*.........g.?{
   a9e44:	f943 9cf6 ae0b a796 57fe 5885 a29e 192c     C........W.X..,.
   a9e54:	75ad 3e24 d961 bbb2 96f6 fb34 aed7 9eab     .u$>a.....4.....
   a9e64:	715f 86a3 8bf4 4895 347f 5066 8dba 3806     _q.....H.4fP...8
   a9e74:	4a59 0de4 006c 5acc 2147 47ea 595e 14a5     YJ..l..ZG!.G^Y..
   a9e84:	e07e 9252 f859 d250 7f10 118a a95b c86f     ~.R.Y.P.....[.o.
   a9e94:	3ca6 8a2b 8e8f fcaa b14f 7876 4549 8dbe     .<+.....O.vxIE..
   a9ea4:	b429 2936 f197 9474 29c9 5d1c c949 671a     ).6)..t..).]I..g
   a9eb4:	ff4e 6af1 4ba2 0ccb 2b70 95e9 3c51 e887     N..j.K..p+..Q<..
   a9ec4:	6a5a 8552 2847 a676 a80f 5d8b 5632 cae3     ZjR.G(v....]2V..
   a9ed4:	a3bf 9d1c e04d 7415 17b3 b61c 5658 b5a6     ....M..t....XV..
   a9ee4:	58b8 1a03 b555 52c2 d1c0 a61d 396b 37aa     .X..U..R....k9.7
   a9ef4:	2b64 2c50 48af 2b1b c96a 6b17 f9f4 cda3     d+P,.H.+j..k....
   a9f04:	ea37 7491 228f dbf3 51fe 9264 452f b9fe     7..t."...Qd./E..
   a9f14:	d91d dc93 d50a ceae 6dad 4558 812e eee8     .........mXE....
   a9f24:	4526 2b4f a380 0c7c 28c8 91c8 6a52 8da9     &EO+..|..(..Rj..
   a9f34:	15fd 1873 a95a 1e1f 506d b0b9 4cf3 17ec     ..s.Z...mP...L..
   a9f44:	ad82 7b70 cb80 35a7 a312 7476 fb60 15b3     ..p{...5..vt`...
   a9f54:	dd00 e40a 432d e39c 1ea5 911d 6bc6 c53a     ....-C.......k:.
   a9f64:	45b9 ad3f dc89 bad2 80ff 494b 31c1 ea91     .E?.......KI.1..
   a9f74:	b5a7 1f34 85f9 8117 50ee b601 222a 1f91     ..4......P..*"..
   a9f84:	5967 3773 d45b cfb3 1bb6 948a 8a07 4817     gYs7[..........H
   a9f94:	4a1b 4a33 c0c2 92a3 0501 8e51 7d46 96fa     .J3J......Q.F}..
   a9fa4:	094a 3325 043d 05c7 b919 1710 a569 20a2     J.%3=.......i.. 
   a9fb4:	93d9 7f35 b34c a1ac 15bf 1f5c b694 70c7     ..5.L.....\....p
   a9fc4:	3015 6943 b757 ebcc 068d d075 9e65 1b5e     .0CiW.....u.e.^.
   a9fd4:	1bcb 75f2 73ad dbef 9523 8977 16b5 a373     ...u.s..#.w...s.
   a9fe4:	bda1 dbc9 c21b a8ec c5db 994d 2b10 1dad     ..........M..+..
   a9ff4:	1155 3579 da46 7c21 bacb 5526 bc2d fcf8     U.y5F.!|..&U-...
   aa004:	b0f4 aaed 94ce 6bb3 e3a9 452d bfe6 49cb     .......k..-E...I
   aa014:	cfa0 80d8 ade9 0b6e 421b d5e9 8d2d ad25     ......n..B..-.%.
   aa024:	92c6 c68e 9a54 98aa 5565 cfb3 dfa8 8ef2     ....T...eU......
   aa034:	f467 e516 59d4 72d7 fbbd c464 1467 7d13     g....Y.r..d.g..}
   aa044:	0a65 3785 b028 e579 a24d d7dd 2792 6377     e..7(.y.M....'wc
   aa054:	7ecf 286a fe24 7717 10cd 38df 4851 5bbf     .~j($..w...8QH.[
   aa064:	12fa 603d 6e6f bae9 1e0d 7525 591d c69b     ..=`on....%u.Y..
   aa074:	c2ee 9f24 bb64 4fad e498 52cb 369b f3a7     ..$.d..O...R.6..
   aa084:	d54d 29b3 f3b3 330d 169f 5470 25be 7905     M..)...3..pT.%.y
   aa094:	6737 8ee3 0bb8 a897 4fe2 5a1b 1b1d 5b0a     7g.......O.Z...[
   aa0a4:	8748 e24a 67f3 ecb4 4edc 5d1b 7653 61c5     H.J..g...N.]Sv.a
   aa0b4:	8661 b8b5 2766 a1dd 43d7 cdde 2713 5c69     a...f'...C...'i\
   aa0c4:	c385 dbb5 dbd8 bfb3 22dd 4f43 41ab 1702     ........."CO.A..
   aa0d4:	7ac0 3558 404b 5cfd 917e 36ae 13d8 cdc3     .zX5K@.\~..6....
   aa0e4:	860d d62f 313e a682 c76d c640 05fb 1b34     ../.>1..m.@...4.
   aa0f4:	6897 fcfe edfe 8c1d 1ccb b6d5 a1cd 3b8a     .h.............;
   aa104:	91a3 3edd 657a 6fd4 abb6 de0e f1d1 1064     ...>ze.o......d.
   aa114:	b616 f53a a6a7 93e7 b8cb 2561 f8be 95cc     ..:.......a%....
   aa124:	5be8 b56d ecf7 ae67 a7c2 f0f6 a2c8 fe36     .[m...g.......6.
   aa134:	1b73 d599 6465 5b7f efd8 f9ff deee 9dd6     s...ed.[........
   aa144:	979f ce8d 0690 df89 0a1f ce12 3a79 e923     ............y:#.
   aa154:	756b 7565 be72 4f89 ab6f a952 7393 dbc6     kueur..Oo.R..s..
   aa164:	34aa 7139 1d20 4693 538a 2954 a7c7 5956     .49q ..F.ST)..VY
   aa174:	e0bb f381 59ba 0749 f6e3 297a 9d8b f6fd     .....YI...z)....
   aa184:	adba bfec 0ac2 5adc 05f7 e064 dfac c595     .......Z..d.....
   aa194:	796a c56b 98a7 cac3 6b7c 56c5 ec66 adc4     jyk.....|k.Vf...
   aa1a4:	ab15 c04e 8821 c733 f2d2 6646 e2a9 4ce5     ..N.!.3...Ff...L
   aa1b4:	ccb4 34df b0a6 bbb3 b1b9 9f27 ddac 0dea     ...4......'.....
   aa1c4:	ffe6 ed44 6e56 949a 564f 27af 9546 44f8     ..D.Vn..OV.'F..D
   aa1d4:	3a03 5f3f 3ce4 d55e 23cd 61b5 2828 76af     .:?_.<^..#.a((.v
   aa1e4:	914c ed97 b50e a08a a279 f02e 3502 3f1f     L.......y....5.?
   aa1f4:	86d5 64b6 52c4 2b18 30f0 693e cd1d 3d4d     ...d.R.+.0>i..M=
   aa204:	7fba d933 16df 56f3 7311 7d7b 4c74 9cb1     ..3....V.s{}tL..
   aa214:	b4b2 8d32 3e56 501f d0cd ece2 5e07 547b     ..2.V>.P.....^{T
   aa224:	954c 0ed1 2646 8f4d bd15 4712 9567 4faf     L...F&M....Gg..O
   aa234:	5f37 3aba a747 0bef 0a74 9b54 8948 96c4     7_.:G...t.T.H...
   aa244:	65f9 fe3f ecb2 830d 3fdd 348a d727 188d     .e?......?.4'...
   aa254:	bb0a a439 6e8a 94ef 43f5 066b f4ba 370b     ..9..n...Ck....7
   aa264:	7ecd ec98 4a5a 78a5 2771 d567 8d23 38d5     .~..ZJ.xq'g.#..8
   aa274:	96af 9545 15d0 d394 964a a4db eba1 b453     ..E.....J.....S.
   aa284:	7f35 ef96 4dde a176 d28c c30b a4ac 9f16     5....Mv.........
   aa294:	de42 0391 0c12 7321 e852 2788 c4c0 374a     B.....!sR..'..J7
   aa2a4:	a920 f6f4 7e8e 863d 4218 1e0e 83c6 eba0      ....~=..B......
   aa2b4:	6f7b 97c8 3475 3fa7 6ea1 871a 21d0 4537     {o..u4.?.n...!7E
   aa2c4:	be5c 26e7 11ec 67bb b137 6187 bdaf 9e9e     \..&...g7..a....
   aa2d4:	cf20 3bb2 7363 c4d6 c618 3b28 c6b3 a0d8      ..;cs....(;....
   aa2e4:	1e1d cc5d 3111 fabb 0833 de7a dcfb c5eb     ..]..1..3.z.....
   aa2f4:	212a 62b6 eab7 c13e ef0e 474c 6523 93a7     *!.b..>...LG#e..
   aa304:	dceb dc00 180f 8852 cbc0 4b66 9f2b 51dc     ......R...fK+..Q
   aa314:	c80a 7641 f94a 6f8c ff6b c5e5 0157 29b3     ..AvJ..ok...W..)
   aa324:	e6f6 b738 5b9d 33b4 8fa3 c68b e054 b5f0     ..8..[.3....T...
   aa334:	1243 b4a5 f5eb 8048 71ef 50cc 5f65 97ed     C.....H..q.Pe_..
   aa344:	2b36 ac06 0a9d 292c f0ae 992e 86f8 f4db     6+....,)........
   aa354:	f10d c1a2 8af9 926c 02f8 0605 177c 628a     ......l.....|..b
   aa364:	2f96 dde2 b893 a74a 35d1 449d 399e 3da2     ./....J..5.D.9.=
   aa374:	e7c1 678d c51d 009e c07a c453 2786 d0e8     ...g....z.S..'..
   aa384:	0cf7 e14d a409 3d16 384d e27a 8159 e002     ..M....=M8z.Y...
   aa394:	a126 09ed 5b49 8a78 e0ca 5514 7a9f 1686     &...I[x....U.z..
   aa3a4:	8908 9e87 4c7d e279 741b 8f90 03a6 83fa     ....}Ly..t......
   aa3b4:	1dba def6 d6a2 5f6b f067 395a c110 0678     ......k_g.Z9..x.
   aa3c4:	e8d9 f822 7a1c 80e6 b1c0 a1e0 35e2 c761     .."..z.......5a.
   aa3d4:	cf13 ab09 5e84 7e63 44a1 0d35 86bd c4d0     .....^c~.D5.....
   aa3e4:	39c3 5ddf 9f4e 9370 b5d1 5077 5997 31ff     .9.]N.p...wP.Y.1
   aa3f4:	b25a 692b 740d 1282 709f a577 4090 fea5     Z.+i.t...pw..@..
   aa404:	3e4e 661c ee85 4eaa be45 e54d d77a c778     N>.f...NE.M.z.x.
   aa414:	f799 3270 2715 3ea7 64c0 2577 72e3 74c9     ..p2.'.>.dw%.r.t
   aa424:	395a 23d9 855c 3276 0801 6b26 4622 617d     Z9.#\.v2..&k"F}a
   aa434:	d138 249f 78d8 b38f 14da c0d2 3f20 3298     8..$.x...... ?.2
   aa444:	6e1a b2b8 32c6 c45a ee81 eb1f 9b92 12cf     .n...2Z.........
   aa454:	f842 5beb e49c 5cf8 fee7 de16 2351 bd5c     B..[...\....Q#\.
   aa464:	277f f1df dcb2 5d9d 05f5 5f63 5fb8 a5be     .'.....]..c_._..
   aa474:	a679 ed2d f87e 7cc9 96b0 48f4 1503 0452     y.-.~..|...H..R.
   aa484:	f52a a758 b4be f306 5cb3 0368 4e3b 3f03     *.X......\h.;N.?
   aa494:	15cb 3fb6 f4e3 a475 e3cf 432c 1807 d3ab     ...?..u...,C....
   aa4a4:	e845 06d1 3067 8b3c 386d 9b3c c1b5 d210     E...g0<.m8<.....
   aa4b4:	50da 8908 206d 8994 e60a f5e0 fb9d 09da     .P..m ..........
   aa4c4:	9081 01de 9080 86da ec3f 0b4a 1cfc b240     ........?.J...@.
   aa4d4:	cfa1 2405 f807 26b0 f807 c014 ba42 7b0b     ...$...&....B..{
   aa4e4:	b836 1a7e 36f8 52e5 8830 37df 2803 6e34     6.~..6.R0..7.(4n
   aa4f4:	27c3 dabc 09e0 ddaf 69d0 907d 49c0 08eb     .'.......i}..I..
   aa504:	754d 6642 9bfb e859 6c36 6242 341b b121     MuBf..Y.6lBb.4!.
   aa514:	ca31 0086 2d50 3596 a6d4 4e20 fd2d 0866     1...P-.5.. N-.f.
   aa524:	5f97 016f 23e4 c909 4bc2 8e00 2bab 98ef     ._o..#...K...+..
   aa534:	9a60 145f fd5e 6bd6 589c 9312 ee78 c6d9     `._.^..k.X..x...
   aa544:	6fa9 fb3c e334 57b4 7b9e 79a2 fa6a 262c     .o<.4..W.{.yj.,&
   aa554:	414c 4e88 2bb5 dc7d 71c2 5f8c 10bb 2fdc     LA.N.+}..q._.../
   aa564:	7b9e d9dc dddb 337c 7b9d 35e2 428f ec89     .{....|3.{.5.B..
   aa574:	e7db 431c 5c9f c50d 7583 b683 e961 7d54     ...C.\...u..a.T}
   aa584:	c03f 2507 57a2 8769 e690 d092 5384 b48e     ?..%.Wi......S..
   aa594:	d542 3471 278d 920e ed09 8f93 2bee a1be     B.q4.'.......+..
   aa5a4:	b5a8 f145 b571 21fc 6ab9 c25d a158 51bd     ..E.q..!.j].X..Q
   aa5b4:	228b 517a 4baa a421 13ab 6615 da36 061e     ."zQ.K!....f6...
   aa5c4:	02fa 58ba 237a bfed 2315 a20b 4e77 49db     ...Xz#...#..wN.I
   aa5d4:	bd5d 179b 1c16 25b9 21a5 aee6 c195 e032     ]......%.!....2.
   aa5e4:	fe31 f0e9 fd42 6d88 99f8 39b9 b6f6 ac55     1...B..m...9..U.
   aa5f4:	130d 4290 36e9 a0aa c665 733d 8cd1 53d6     ...B.6..e.=s...S
   aa604:	8474 8724 786c 4c69 53de 2fb5 b5d5 c5f6     t.$.lxiL.S./....
   aa614:	06e6 aaed 823b c176 0174 c6bb b161 719d     ....;.v.t...a..q
   aa624:	476e 9368 27fa 7ece bd5a 662c 3ce9 4a4d     nGh..'.~Z.,f.<MJ
   aa634:	0577 f694 ebec 88ea 4428 c654 7754 04c9     w.......(DT.Tw..
   aa644:	ac01 81e1 2400 089f e558 d433 4f89 f16b     .....$..X.3..Ok.
   aa654:	249d 2930 4054 52eb 9d10 de2d 17bd ba45     .$0)T@.R..-...E.
   aa664:	8c05 c17e 85e2 d763 77af d9de 1911 2a20     ..~...c..w.... *
   aa674:	d347 38d0 bfab 3403 80b3 a061 60f7 529f     G..8...4..a..`.R
   aa684:	f628 9f93 0447 5ee7 0f2f bf84 8188 045f     (...G..^/....._.
   aa694:	121e fc95 1d42 2a21 6ce0 da04 3e56 35f9     ....B.!*.l..V>.5
   aa6a4:	25d4 3e54 4fc0 6d94 46bb 86fe ab8c 5b74     .%T>.O.m.F....t[
   aa6b4:	6bbc 33e9 1bf0 be23 412f eb2d 65c7 3712     .k.3..#./A-..e.7
   aa6c4:	a76e 102d 0807 25df d6dd 8568 353c b26b     n.-....%..h.<5k.
   aa6d4:	ca92 8c00 750f d63d 04a8 39c0 4e64 9db1     .....u=....9dN..
   aa6e4:	2aef 20a5 f394 679a 7cdf 4c88 807a 9605     .*. ...g.|.Lz...
   aa6f4:	5746 0293 da0b beaf 39f3 be72 d206 23da     FW.......9r....#
   aa704:	d5df 445a c98a 243d 4327 3d26 094a a40c     ..ZD..=$'C&=J...
   aa714:	3f6a e68e 0d71 e13b 5564 b627 120e 264c     j?..q.;.dU'...L&
   aa724:	7464 2742 69ac a287 500f 0ce8 39c6 67a2     dtB'.i...P...9.g
   aa734:	c281 3391 c3d4 692d 5908 c702 5be4 7a4a     ...3..-i.Y...[Jz
   aa744:	d499 628b 38f6 e0a3 d7b9 ff7a 2162 0b0c     ...b.8....z.b!..
   aa754:	e5c8 7546 2579 9537 b24a dfa3 1494 4eaa     ..Fuy%7.J......N
   aa764:	c7a6 d1fa ad4e ebd6 f929 cd1d eb82 36b5     ....N...)......6
   aa774:	95f8 e2b2 cbc8 79a1 1ec6 28ab 7471 edd0     .......y...(qt..
   aa784:	1ee0 2cbb 6080 4ae4 f0f2 a01c 6de2 027a     ...,.`.J.....mz.
   aa794:	c51c f229 daa5 71ac 8bb5 4084 0a54 8502     ..)....q...@T...
   aa7a4:	ec36 9518 35ec a964 ce8b 781c 64a5 6eb7     6....5d....x.d.n
   aa7b4:	3c87 7aa1 2d5d bc73 6de7 0c0d 992d 6ae5     .<.z]-s..m..-..j
   aa7c4:	3aac c357 2d53 fada 984d ce4b 9a1c d906     .:W.S-..M.K.....
   aa7d4:	51ef 178c 2b3b afbe 19fe 03b1 48e3 4df8     .Q..;+.......H.M
   aa7e4:	b3e2 c3a8 1d91 301c 40da acae 6855 566c     .......0.@..UhlV
   aa7f4:	8a35 4ba4 294c 42b8 7ba0 2268 b365 f768     5..KL).B.{h"e.h.
   aa804:	2a8d 926f 6f68 20e9 eadb 8e6c eb06 cfd1     .*o.ho. ..l.....
   aa814:	edb1 3073 b229 6a4d d0f0 71ab f564 b944     ..s0).Mj...qd.D.
   aa824:	1781 add5 a465 9ba9 736e 962d f249 5371     ....e...ns-.I.qS
   aa834:	5901 f2b5 2df0 08eb 6e6e ad94 c233 2dcf     .Y...-..nn..3..-
   aa844:	edad 3bb7 b938 e2a5 cf5e 5158 b127 162b     ...;8...^.XQ'.+.
   aa854:	bc71 75d1 aaf6 9dd3 1251 0348 48d5 569a     q..u....Q.H..H.V
   aa864:	c96d f277 81f1 666a 4493 9b69 1c85 4812     m.w...jf.Di....H
   aa874:	f6a1 df89 a9eb 01ca ec18 fd9e 7e8a 6fd0     .............~.o
   aa884:	5773 8e88 e8be 3201 71a3 f182 ae8c aed6     sW.....2.q......
   aa894:	8aa6 e3c8 b740 54cb cf5d a39d 15f7 dd69     ....@..T].....i.
   aa8a4:	8e0f 6295 2ddc 00b3 996d b76e 4d5a 3e00     ...b.-..m.n.ZM.>
   aa8b4:	2a94 dd95 136c 5dd0 a288 9f12 0d58 96e5     .*..l..]....X...
   aa8c4:	f94b c588 5105 8fad c3fb 6f89 409a 91a9     K....Q.....o.@..
   aa8d4:	4d9e 2e8c b8d8 51d6 fb39 8251 81ee c370     .M.....Q9.Q...p.
   aa8e4:	826c 6731 ed97 5d9b 4caa 9b2b ee5b b2ac     l.1g...].L+.[...
   aa8f4:	4f27 0298 36ce d8ee a2c1 baab e360 a756     'O...6......`.V.
   aa904:	833a 42ce df7d 81dd ae93 e93e 4eaf d8bf     :..B}.....>..N..
   aa914:	0f31 43b3 4b0d 3d2c 8d2d 38da 98b4 c75d     1..C.K,=-..8..].
   aa924:	ba7f f27d 1d7f 6936 6b65 6df3 ee5b 2c5c     ..}...6iek.m[.\,
   aa934:	bb4f 5012 19d8 069b e912 db4e 2f38 b8a2     O..P......N.8/..
   aa944:	04cf e34d 3b01 f370 4e91 0190 0da0 88ae     ..M..;p..N......
   aa954:	be4a 26ad 698b a474 a4c7 8740 7f8a e14e     J..&.it...@...N.
   aa964:	5e3b 1714 7949 5710 d340 0084 8557 a9db     ;^..Iy.W@...W...
   aa974:	09d5 e93c 85ca 2289 b4a8 8117 8d82 7422     ..<...."......"t
   aa984:	0323 dc90 8bee efce b6c0 d974 09f7 6aec     #.........t....j
   aa994:	884d 8a05 3738 b16b 6748 b7c9 9d1c 6e27     M...87k.Hg....'n
   aa9a4:	82b9 5773 3a0a 6441 6a86 6301 a664 5a39     ..sW.:Ad.j.cd.9Z
   aa9b4:	34b1 e232 92b6 5afa e1bf 87f9 3767 b2bb     .42....Z....g7..
   aa9c4:	3689 4fd4 3ef1 1019 58f0 9632 5075 a8d3     .6.O.>...X2.uP..
   aa9d4:	fc2a e2df fc40 1d66 ec5c c7f9 05a6 93b4     *...@.f.\.......
   aa9e4:	56e7 69c4 30d7 98b0 4eee 44cf c68d db9b     .V.i.0...N.D....
   aa9f4:	5832 88e6 98b5 247f a55b 1958 51bb 5e0b     2X.....$[.X..Q.^
   aaa04:	f8e0 a083 22b0 f91c cddb 6406 052b c85b     .....".....d+.[.
   aaa14:	ea31 dac3 76a8 e6d3 f948 0c8f a6fb dc87     1....v..H.......
   aaa24:	a111 7cc6 70e4 cf14 3f4a e3b6 b373 e039     ...|.p..J?..s.9.
   aaa34:	fb08 f6ce 458b c596 2acb 4d99 714e 9f46     .....E...*.MNqF.
   aaa44:	3ea5 13cc ab29 d5e2 7490 bef3 551d a01c     .>..)....t...U..
   aaa54:	8d23 8328 4832 94ad 71e5 d329 55d1 d5a6     #.(.2H...q)..U..
   aaa64:	f458 b347 4af5 c811 a8aa 09db 55e8 f96e     X.G..J.......Un.
   aaa74:	424b 6145 c3e8 a86b bc5b 2dab 1ea3 f8a2     KBEa..k.[..-....
   aaa84:	8e93 49d2 e5a7 336b de6e 09e6 30cc 8cfa     ...I..k3n....0..
   aaa94:	8733 96e8 0667 ed14 3568 7a36 670f 25f1     3...g...h56z.g.%
   aaaa4:	724b 2de4 eb54 944b 0d89 a3b9 fb55 01cb     Kr.-T.K.....U...
   aaab4:	8fb9 a326 3599 6ccf 0349 0e6f ad0f 50e0     ..&..5.lI.o....P
   aaac4:	b513 7ca7 dacf 5083 5aa4 7a0b 22d1 1d95     ...|...P.Z.z."..
   aaad4:	d769 59c5 953a 12d5 c718 fd79 9674 93ea     i..Y:.....y.t...
   aaae4:	4ec8 f723 3bff 8b3b af9a 60ac 1369 d982     .N#..;;....`i...
   aaaf4:	7844 981c d65d 09ee 8a3e 47a0 67d0 12b2     Dx..]...>..G.g..
   aab04:	dc62 3440 6cb5 5f8c b3b4 b5ad 13bb 4f71     b.@4.l._......qO
   aab14:	7534 558b 35cc a4ef 3e28 8362 a49e 6b0a     4u.U.5..(>b....k
   aab24:	0256 a24f 6061 b807 d791 5db1 eb4b 8efa     V.O.a`.....]K...
   aab34:	75e2 40a5 b0dd 8a37 bd8e 25a1 2a23 0b52     .u.@..7....%#*R.
   aab44:	95f0 34a8 2938 67c2 6288 5865 4094 ffa0     ...48).g.beX.@..
   aab54:	cb45 97f5 905d 4b76 2cd9 3b06 385b 7465     E...].vK.,.;[8et
   aab64:	50f0 07c0 1dd2 d48b 6b70 2ae0 2009 a6dd     .P......pk.*. ..
   aab74:	84ca fa53 ab14 1848 6ebf 5706 6ee1 0687     ..S...H..n.W.n..
   aab84:	dcb2 45cf 06a3 83be 28a3 e8d9 4c7f 4edd     ...E.....(...L.N
   aab94:	4f47 0dd0 4708 c599 fc91 e35a 7200 0be5     GO...G....Z..r..
   aaba4:	0940 151b e6dc 669d a6d0 8ac0 5e92 adca     @......f.....^..
   aabb4:	e001 bb48 9d9c a0f0 4adb 02c9 3f4b 0a58     ..H......J..K?X.
   aabc4:	c993 51f7 8dad 95db 3573 50e0 5631 3f72     ...Q....s5.P1Vr?
   aabd4:	551e 1d84 5af8 f310 2af4 e5be 6673 ae2f     .U...Z...*..sf/.
   aabe4:	78eb a0ba 1bb6 ec16 2ddb b178 c777 d359     .x.......-x.w.Y.
   aabf4:	1a3a 2492 c7be 1b08 2757 b3c9 0674 8e74     :..$....W'..t.t.
   aac04:	8bf6 1fd7 a36e ce43 8fae 5b0c 0118 3f80     ....n.C....[...?
   aac14:	9cfe ec2f 1bcf 603f e5bc c640 2652 6e43     ../...?`..@.R&Cn
   aac24:	c7ab 634a 1dde 2ced 34d9 ab5a f4a8 bd62     ..Jc...,.4Z...b.
   aac34:	ac28 3444 46f1 e2ff eaff 749c db8e ec0c     (.D4.F.....t....
   aac44:	add9 e2c3 feb3 7407 f41e 188e 05de 9722     .......t......".
   aac54:	8fdb 33fd 9759 f215 2e21 a2af 747a ec4b     ...3Y...!...ztK.
   aac64:	8a61 c54b 88e8 4086 c1b4 383b def3 cbfd     a.K....@..;8....
   aac74:	c1b4 ac46 ea3b 2d88 fb21 ba6c 6e84 4dd7     ..F.;..-!.l..n.M
   aac84:	463a 9096 7258 20d4 1010 be6d 04fb 74da     :F..Xr. ..m....t
   aac94:	2958 0e9e 0ec6 2414 a685 7bf8 5d9c 0ee3     X).....$...{.]..
   aaca4:	ea31 91a0 c0f3 2531 83c8 1dbc 5883 191e     1.....1%.....X..
   aacb4:	3268 61c0 f942 3aac 8b53 9391 1b25 eecd     h2.aB..:S...%...
   aacc4:	30f7 dfbb 3adf 16bb 232e 4aca a043 1872     .0...:...#.JC.r.
   aacd4:	f0a1 f499 0dfd 2aa8 f0b7 9234 86de ed2b     .......*..4...+.
   aace4:	f510 84a2 8f97 140f 49e6 4fd8 7dfb 7c0c     .........I.O.}.|
   aacf4:	eb5c db88 ae7e 8b9a dd8c 415f 86a8 85ce     \...~....._A....
   aad04:	d2a6 9a43 0c62 d177 cc07 ca78 b307 60f6     ..C.b.w...x....`
   aad14:	5e21 63a3 4b6e 3531 be57 314b 24f8 e4ae     !^.cnK15W.K1.$..
   aad24:	9ff7 de8f d217 a05d 209e 326b 5646 830e     ......].. k2FV..
   aad34:	4b1f e9dd 827e 5181 f1d1 dd85 baf3 6ddb     .K..~..Q.......m
   aad44:	0c05 ad88 b869 aafb bdcf 5032 2c06 2a3f     ....i.....2P.,?*
   aad54:	69e0 0d81 cd9f ed18 1138 48df 3097 b98a     .i......8..H.0..
   aad64:	dd54 489b 11b7 90e1 e2e0 8047 1f8b 69ed     T..H......G....i
   aad74:	7320 a2e8 8043 4cf7 868e f13b 8c7b 9826      s..C..L..;.{.&.
   aad84:	766c 21f9 c275 2c5f f956 f247 b2e1 1589     lv.!u._,V.G.....
   aad94:	b0b7 8a9a f0eb cd1c c24c 55b6 d48a 453b     ........L..U..;E
   aada4:	afdd 3d5e c72a 89b9 9021 a4da 7e44 2f6c     ..^=*...!...D~l/
   aadb4:	9f42 d4dc 82d3 e865 16a6 5f5d c2a4 0e53     B.....e...]_..S.
   aadc4:	d6dc 1c6d f1cc 148b d795 47d0 0c41 0329     ..m........GA.).
   aadd4:	2770 c916 d5a7 dad9 d79d 218b 2f17 adca     p'.........!./..
   aade4:	9172 bcdd 3874 049e 0aca 36a8 cd4f e86c     r...t8.....6O.l.
   aadf4:	d354 748a eb6f a171 2999 7029 58d9 a055     T..to.q..))p.XU.
   aae04:	990b ad57 998e 782a 134e 8042 91b8 a26d     ..W...*xN.B...m.
   aae14:	393b b736 b051 5e55 bdfc 4635 8e87 adb7     ;96.Q.U^..5F....
   aae24:	cead 6fd4 149d ba32 9a54 60cd 5d24 2391     ...o..2.T..`$].#
   aae34:	efec f0b0 7d02 e8e8 b10e b853 9c74 8ab8     .....}....S.t...
   aae44:	18e9 404f 7da4 d072 c8af f614 671e 11f5     ..O@.}r......g..
   aae54:	56ba bb38 1fa5 7dc5 1b95 419a 7515 eddf     .V8....}...A.u..
   aae64:	0a9e 4144 0c68 2008 fd39 90ec 1061 3e45     ..DAh.. 9...a.E>
   aae74:	01d4 86d8 a4ed 04e0 2b62 1857 ba75 b456     ........b+W.u.V.
   aae84:	cd00 bd42 77bf 55bf 34b9 1e3b dcde bb6c     ..B..w.U.4;...l.
   aae94:	8e5f c706 2996 87d9 0834 4dd4 91dc 07dc     _....)..4..M....
   aaea4:	920a ed7d 4722 8d16 508e eceb 0a43 8e1f     ..}."G...P..C...
   aaeb4:	b345 0752 367a 876c 808e ed57 aac5 b703     E.R.z6l...W.....
   aaec4:	faea f4d8 f928 7d9c 9383 8bd2 7814 770b     ....(..}.....x.w
   aaed4:	352f 4137 1f77 074a e84d 94ae 6ee8 6d30     /57Aw.J.M....n0m
   aaee4:	4c02 8e31 3c98 774b bead 2ec9 4d49 0ac1     .L1..<Kw....IM..
   aaef4:	72c3 c8da 7c6b 207f e76d e95a ba3a ea41     .r..k|. m.Z.:.A.
   aaf04:	19e2 6337 ef7f d8be 1fbb f608 f272 b901     ..7c........r...
   aaf14:	51f7 61aa 1ccf 5d3a 5720 d1a2 b214 95f2     .Q.a..:] W......
   aaf24:	6ab3 8e92 5201 edef cd32 e032 d8f3 138f     .j...R..2.2.....
   aaf34:	1c80 a4de 2f9a 8361 eab0 bd84 68fd 0838     ...../a......h8.
   aaf44:	73ec 3470 ae2b a09d 56f5 928f e966 7dfe     .sp4+....V..f..}
   aaf54:	1f71 4ed5 7071 522f 4069 c898 92ee 2c8a     q..Nqp/Ri@.....,
   aaf64:	0021 6876 122f 703d e675 63c9 5174 42e8     !.vh/.=pu..ctQ.B
   aaf74:	05ba 67f4 4ad9 a774 0f26 638c 54e7 c1f5     ...g.Jt.&..c.T..
   aaf84:	11f4 5a67 1c4e 6db6 47f6 002a 24a7 41b0     ..gZN..m.G*..$.A
   aaf94:	fd73 3e5d 39ac 69aa ded2 03a1 37ab e4ce     s.]>.9.i.....7..
   aafa4:	1a7f ff07 41d7 a270 ce60 7942 9f45 59dd     .....Ap.`.ByE..Y
   aafb4:	e4a7 ec4e 8615 8513 1de6 0335 a589 2ee2     ..N.......5.....
   aafc4:	552c f928 901f 3063 e8a3 f9c2 3149 22ed     ,U(...c0....I1."
   aafd4:	1957 6c7e d70b 32bc 395c 7e4c c95e 23dc     W.~l...2\9L~^..#
   aafe4:	3979 2c4b f03d 70a7 90b2 01d6 2b51 3b0a     y9K,=..p....Q+.;
   aaff4:	dfd1 631f 7de5 3835 ff86 c909 9767 ad55     ...c.}58....g.U.
   ab004:	53ce 15cb 79a2 e725 5289 62da 520b 0138     .S...y%..R.b.R8.
   ab014:	dec8 bbfc 9724 ca1e 9922 6c0c 5e7f c0a7     ....$..."..l.^..
   ab024:	e4e1 e812 f2d0 0c48 eb94 24ba be8b 60c7     ......H....$...`
   ab034:	8cc3 d887 077b 267b 7d4a f5c6 25f4 459d     ....{.{&J}...%.E
   ab044:	fb80 15e4 e380 a9af ae2b 9f91 af44 f22a     ........+...D.*.
   ab054:	772c dd28 597b 8216 74a5 8e2b e44e a3a5     ,w(.{Y...t+.N...
   ab064:	ea56 5a01 8ea1 a36c f46f 60a6 ce1f 89c2     V..Z..l.o..`....
   ab074:	963f 0457 2d80 93f8 fcfe 5025 cdf4 8acc     ?.W..-....%P....
   ab084:	8fba a176 f5a1 fed9 1fa8 1a7b 0b4d d083     ..v.......{.M...
   ab094:	1237 0370 41d1 e4af a53d ce73 0612 d16a     7.p..A..=.s...j.
   ab0a4:	be46 b74e 84c8 0f9e 2eeb c25a c639 829d     F.N.......Z.9...
   ab0b4:	c81c 6e85 3a54 a66e c89e ffa9 20c4 1303     ...nT:n...... ..
   ab0c4:	0393 fa45 3a93 d9ac 0038 88dd 27bc 9b8b     ..E..:..8....'..
   ab0d4:	374a e5d2 eddb b62c 91e7 2942 b575 1fd3     J7....,...B)u...
   ab0e4:	e28e 06d2 5a86 ed9a 2ae6 0ef4 83cc 356d     .....Z...*....m5
   ab0f4:	301c 109c 0920 a765 baa6 b1e2 1887 4003     .0.. .e........@
   ab104:	c075 f8de 668d 8777 e183 fa5a 460d 01d6     u....fw...Z..F..
   ab114:	b790 f78c 4041 6621 a476 bc2a c14b edb9     ....A@!fv.*.K...
   ab124:	48aa 6b51 538f 37db 4a3c 7437 56e5 11d0     .HQk.S.7<J7t.V..
   ab134:	d39a 2c32 4e79 3d73 d2a7 6362 8dd3 6ba2     ..2,yNs=..bc...k
   ab144:	68ae 3ec5 1527 9813 5d17 6703 0ce9 a767     .h.>'....].g..g.
   ab154:	83c2 9304 daa7 9ecb 98be c591 3fd9 5754     .............?TW
   ab164:	0a71 d018 8668 829d 8db5 3741 ad39 5424     q...h.....A79.$T
   ab174:	1a60 8607 148c 29e5 c21a b141 e5ba 885e     `......)..A...^.
   ab184:	6ca8 c66d 29ba 651b ea80 cfe2 66c8 e283     .lm..).e.....f..
   ab194:	9d1a 62b5 d730 81ae 6eff 38dc 5b6a f6f9     ...b0....n.8j[..
   ab1a4:	293a ef30 360c 82a3 e1a9 221e 7b23 730e     :)0..6....."#{.s
   ab1b4:	71c3 a467 3e2d f127 e84b 3925 8265 75fc     .qg.->'.K.%9e..u
   ab1c4:	0fc1 3f72 64e6 1e4c cae6 5aae 36b8 1b0d     ..r?.dL....Z.6..
   ab1d4:	5027 45fb 44fe d280 a166 e30e c21e 6a00     'P.E.D..f......j
   ab1e4:	da1e 31a1 272a 8248 f0e8 cb30 7461 6e6f     ...1*'H...0.aton
   ab1f4:	4106 5d28 72ff 0cf0 30db 33e4 b66a 18b6     .A(].r...0.3j...
   ab204:	4f4c 75c0 cc34 bb3b 49aa d55b 36c0 30b2     LO.u4.;..I[..6.0
   ab214:	4741 5535 9eb3 bae0 c150 4c7f 9e28 aba0     AG5U....P..L(...
   ab224:	37e4 9b57 2ecb 40a5 8ad4 8769 69bd 45ce     .7W....@..i..i.E
   ab234:	39d5 a40a 2530 b46a 2ca9 3472 270e 6250     .9..0%j..,r4.'Pb
   ab244:	3e5b 24a5 2339 1c2b 6a35 903c a854 3b5b     [>.$9#+.5j<.T.[;
   ab254:	464d b5b9 08dd ce5b 7574 5100 d807 f439     MF....[.tu.Q..9.
   ab264:	c1ad efbf 4a38 4e7d 6e8e d9e3 cbed df61     ....8J}N.n....a.
   ab274:	1b87 deaf 5e52 5b00 36c8 ea21 795e 65a7     ....R^.[.6!.^y.e
   ab284:	ce94 db1b 5ca4 8e39 34ee d7ac 9e2c 7bbd     .....\9..4..,..{
   ab294:	42e5 39f0 779e 8fd8 4c29 048f 32aa a3bc     .B.9.w..)L...2..
   ab2a4:	8a67 3b88 29aa 9b26 6d14 41a4 7da8 6c9c     g..;.)&..m.A.}.l
   ab2b4:	513e 934f 2dce 36dc fc16 eb2f a264 ec2e     >QO..-.6../.d...
   ab2c4:	2dd1 d38b 801b c73f 4b33 16bd 7b4d 5bc0     .-....?.3K..M{.[
   ab2d4:	fc88 63a3 6afb edac 1da5 16ed 944b 4a8f     ...c.j......K..J
   ab2e4:	6259 d4db c4b0 a12a ca2f aae4 7cdd 76e7     Yb....*./....|.v
   ab2f4:	7468 3541 2f2f d3b1 3746 68ac ea6c 8613     htA5//..F7.hl...
   ab304:	2b3c 47e1 b57a 2d8e 1017 3fec d0df 741f     <+.Gz..-...?...t
   ab314:	2b4f 9049 bd7c a136 d119 18b5 6e62 9e72     O+I.|.6.....bnr.
   ab324:	4a9c a20a adc4 4450 2a06 c047 4383 faa7     .J....PD.*G..C..
   ab334:	40fd 4051 6ed8 aa30 2b26 a915 9240 d3a5     .@Q@.n0.&+..@...
   ab344:	1d33 1260 42ef 9400 0fd9 e385 3845 9593     3.`..B......E8..
   ab354:	f5b0 9307 9b3d 9133 87f9 a9aa 5f7b ab36     ....=.3.....{_6.
   ab364:	d244 d64a c9fa 6c02 c25d 0005 9185 a733     D.J....l].....3.
   ab374:	e399 364b 57d1 f818 f509 4e99 f33b 47b9     ..K6.W.....N;..G
   ab384:	e711 ed46 620f 9a49 b912 8e86 cc98 3185     ..F..bI........1
   ab394:	85c0 c9a1 66f1 7739 22d0 e0a7 60ae b818     .....f9w."...`..
   ab3a4:	01b9 a6ae 7421 4f61 cd1d 9c72 96e6 95cc     ....!taO..r.....
   ab3b4:	110f a45a 979a 4721 12f1 40de e33c b53e     ..Z...!G...@<.>.
   ab3c4:	cc54 4c1a 9d96 d286 c37c 91c1 519e 11f9     T..L....|....Q..
   ab3d4:	7c2f 56f2 4d2d 4f6e d232 37d8 ea93 bac3     /|.V-MnO2..7....
   ab3e4:	3bfc a805 9273 88bb ed1e 5fac 0575 aa69     .;..s......_u.i.
   ab3f4:	cbd7 9da8 db46 b220 4378 f5f5 3754 5c00     ....F. .xC..T7.\
   ab404:	d553 76e8 ca23 bb72 f00c 80ea ba91 c6c6     S..v#.r.........
   ab414:	b2f8 3a63 ece5 c2e3 3f84 6634 1312 e619     ..c:.....?4f....
   ab424:	3e3b 3272 30ca 8eaa 5d8a fc4a 97f3 546b     ;>r2.0...]J...kT
   ab434:	ab53 0fd1 866c 100b cea4 6334 5a28 b6cb     S...l.....4c(Z..
   ab444:	9339 b404 b656 8ab5 c647 b2a1 9fe6 058a     9...V...G.......
   ab454:	7187 a6e0 e1ec 1db3 8e06 6db5 cbd0 a7aa     .q.........m....
   ab464:	7323 6879 3683 88fd f856 7744 37c2 a119     #syh.6..V.Dw.7..
   ab474:	be0b b8e8 645c 81c5 cf30 76d7 5dc6 e7b1     ....\d..0..v.]..
   ab484:	c24f de7f 7fbc 055f 2f5e e1ef 17db 16fc     O....._.^/......
   ab494:	72b0 9526 c631 f803 8bda 2dbc 2cc8 2fe5     .r&.1......-.,./
   ab4a4:	9d44 b48c de10 a40d fff6 41e7 61c3 c892     D..........A.a..
   ab4b4:	c240 a9db 6e63 c522 013b 1f77 c36f 10ac     @...cn".;.w.o...
   ab4c4:	a9c0 e2d4 9aeb 9ea6 4f3b 1af0 cfb0 c299     ........;O......
   ab4d4:	b0b5 6d40 5279 ebfb 4615 8fb1 0fa6 57aa     ..@myR...F.....W
   ab4e4:	2a17 4b32 f3d0 d3e5 4ece 1dbc c0a9 1329     .*2K.....N....).
   ab4f4:	e698 f3d0 9e82 102a 6c07 b004 6676 111b     ......*..l..vf..
   ab504:	a1cb b8a3 ceec cbf1 2372 0b73 b1dc 3847     ........r#s...G8
   ab514:	8a50 be06 1a91 9d34 1f81 e5af 3e59 e743     P.....4.....Y>C.
   ab524:	61ac 152d 60be e9ee 1706 2abd e902 d7c4     .a-..`.....*....
   ab534:	219a 2086 2126 1909 133e 6ba7 19de a2a7     .!. &!..>..k....
   ab544:	e24b e8a7 2c7d 1edc 8a8a f0ee 2339 af3f     K...},......9#?.
   ab554:	2c8d 74c3 a5fc 1706 4ebc 0a35 013f a987     .,.t.....N5.?...
   ab564:	fbc2 6aff ac43 1d60 9827 3189 c8cd d74a     ...jC.`.'..1..J.
   ab574:	9601 cf6e bdc8 76d7 34a9 de4b 1489 48d9     ..n....v.4K....H
   ab584:	01ce 8a47 b9be bfe1 24fb 0e77 0cf4 14a5     ..G......$w.....
   ab594:	0359 c77f 8bea e6f4 ca90 7cdb 9629 4cc5     Y..........|)..L
   ab5a4:	109c 2458 1e9c 6b5a ed85 b1b9 2204 8b23     ..X$..Zk....."#.
   ab5b4:	e298 3a01 d39a b314 c541 568a eff6 6aba     ...:....A..V...j
   ab5c4:	1fad 3458 2527 0c0e 34b5 5518 cafb c08f     ..X4'%...4.U....
   ab5d4:	52a8 5914 c516 1547 b76c 3648 c68b d33c     .R.Y..G.l.H6..<.
   ab5e4:	38c5 f1a3 5cf3 5264 2a53 96dd 6079 08cc     .8...\dRS*..y`..
   ab5f4:	9c43 bf9d 518e 0e5a 5005 cfc7 d4cf 608c     C....QZ..P.....`
   ab604:	2e64 b49a 39ac 3a69 0a8b 4104 cca7 7263     d....9i:...A..cr
   ab614:	fce3 6ab1 9b47 3a39 cf6e 4747 e4f0 05bf     ...jG.9:n.GG....
   ab624:	ac14 a05f 7629 391c 3ef3 a298 07ba e61c     .._.)v.9.>......
   ab634:	181a 0ac7 6803 df10 59b5 c116 3621 7737     .....h...Y..!67w
   ab644:	8353 6961 da0b 3a7a 746c 4e3a 3e26 1ade     S.ai..z:lt:N&>..
   ab654:	7bb0 7eed 5294 79b8 a2bc 6b5c 400c 3b22     .{.~.R.y..\k.@";
   ab664:	7d64 0b49 12fb d5bb a414 f7b4 624f beb9     d}I.........Ob..
   ab674:	25e2 37dc 463d b1d3 62e9 307f 8419 e9be     .%.7=F...b.0....
   ab684:	25b5 9454 e770 9490 70a8 0cec 1d62 9bc8     .%T.p....p..b...
   ab694:	65ee 59d7 052e 9ff5 142b 0a6d adba 465c     .e.Y....+.m...\F
   ab6a4:	d3c8 a42d b0c7 b542 b02d 086f f1f0 9263     ..-...B.-.o...c.
   ab6b4:	8619 56a5 3194 446b f7a2 b6a9 ed7b f526     ...V.1kD....{.&.
   ab6c4:	c942 9354 5fa2 1d7c 5b47 23be 5c97 a893     B.T.._|.G[.#.\..
   ab6d4:	e00d 2311 3873 842b a18e fe29 45ab f0ea     ...#s8+...)..E..
   ab6e4:	747c 6f8b 7647 1f1c 5404 73de 2e24 8150     |t.oGv...T.s$.P.
   ab6f4:	547f d416 c44e 7ddf 09be 47c1 5e85 cb9a     .T..N..}...G.^..
   ab704:	7780 8990 5a74 9add 2372 969a 1df8 4687     .w..tZ..r#.....F
   ab714:	6a41 5114 cf66 204b 25f4 0c3f 1518 ccc3     Aj.Qf.K .%?.....
   ab724:	a59b 060f e2e4 2c34 a985 b430 a76b 3088     ......4,..0.k..0
   ab734:	0caa e565 c228 1bd5 1b42 f6e1 6360 63c9     ..e.(...B...`c.c
   ab744:	18f1 e463 953d 8dd1 a308 72ac cbac 7c99     ..c.=......r...|
   ab754:	44e9 bed3 4a4f 7638 e913 0ac1 d7ab 8741     .D..OJ8v......A.
   ab764:	00fa d97f 3ca4 5fc0 6751 3484 5000 3d3d     .....<._Qg.4.P==
   ab774:	b4b2 b1d8 baa4 c7d7 7d5b 46a4 0765 c465     ........[}.Fe.e.
   ab784:	2795 afa5 2007 e4e3 39b0 9aa0 7771 25ca     .'... ...9..qw.%
   ab794:	393a 9382 767a 7a3c da99 407a eb78 752c     :9..zv<z..z@x.,u
   ab7a4:	e108 74ab 5ee9 b86f 7263 f6e8 8ba8 4798     ...t.^o.cr.....G
   ab7b4:	b847 8375 8f82 09ba c87b af2a 5f27 e028     G.u.....{.*.'_(.
   ab7c4:	f177 cbd3 11d4 a2f1 d813 7c4d f928 257c     w.........M|(.|%
   ab7d4:	758e d696 1cb6 cdd8 3d36 c943 7d97 b57b     .u......6=C..}{.
   ab7e4:	289b 4935 1527 c57b a17b 3c8a d97c 1a62     .(5I'.{.{..<|.b.
   ab7f4:	8b67 dfe9 442d 5b5f 39ba 968f 26ab 4d47     g...-D_[.9...&GM
   ab804:	4d9a cba5 2dc8 d6bb 69c0 a1a2 474c dcb1     .M...-...i..LG..
   ab814:	8517 225f 0718 03fb 27d2 9e37 d395 b8ea     .._".....'7.....
   ab824:	60cb 3da4 44ce 0a2a f519 e579 1de8 db66     .`.=.D*...y...f.
   ab834:	bc77 4335 009d 553e a901 cd52 ef0d 9357     w.5C..>U..R...W.
   ab844:	cb0f e132 00c0 f0ec a1a2 e48b 9c7c 1334     ..2.........|.4.
   ab854:	64d0 9765 c2bb 4c76 43db 9360 5eb8 a834     .de...vL.C`..^4.
   ab864:	f1c6 a7c6 4acc dc36 b955 275f 14ad 7aaa     .....J6.U._'...z
   ab874:	9b8a fb31 7566 9272 b6a1 901a a6b6 a76e     ..1.fur.......n.
   ab884:	82c2 a42e 8ae2 322f 5330 75c3 16b5 02d6     ....../20S.u....
   ab894:	4713 1081 a05e 674f 1360 7683 6912 61c4     .G..^.Og`..v.i.a
   ab8a4:	4d2c dde5 a949 5313 c0ae f379 22bd 7af7     ,M..I..S..y..".z
   ab8b4:	d174 f9ac 540e feb0 90b0 7d61 d9c8 7ebf     t....T....a}...~
   ab8c4:	6323 3865 8fea 63ea 40f8 bdf1 8e8f 3749     #ce8...c.@....I7
   ab8d4:	4880 dc0c 2b22 fdea de7c 7ddd c886 08e6     .H.."+..|..}....
   ab8e4:	523a 063b 5ac1 6ac2 d610 27db 8107 8747     :R;..Z.j...'..G.
   ab8f4:	417e fe37 9fb6 91f9 85ab da59 985a f188     ~A7.......Y.Z...
   ab904:	1148 b913 ad18 8295 983a 8f12 6d01 e380     H.......:....m..
   ab914:	d2ad 3cd3 3ace 9e9d a27f 361b 472d 071e     ...<.:.....6-G..
   ab924:	4dac cc47 5f16 ebf7 217d 8bd0 eb97 0dc6     .MG.._..}!......
   ab934:	4a3b dbfe 2f78 c311 778f 738d 0a56 b315     ;J..x/...w.sV...
   ab944:	ba2a 103b ec0b 1be7 4660 373f 1336 45e6     *.;.....`F?76..E
   ab954:	fe7f f44b 4d38 4694 db88 14e3 d55e e9cd     ..K.8M.F....^...
   ab964:	6757 aac5 7bc2 73d3 912b 7edd 47ae 6159     Wg...{.s+..~.GYa
   ab974:	a50f b6a1 5c1b ef13 7185 0a48 b029 8444     .....\...qH.).D.
   ab984:	15ae 2003 febf 9426 f587 8ab3 f47c 72ae     ... ..&.....|..r
   ab994:	f769 7517 dcc5 efb6 121c 56ed e8f5 c69f     i..u.......V....
   ab9a4:	93d8 20ad 0e54 fb79 c761 2e0a c631 1c60     ... T.y.a...1.`.
   ab9b4:	f3a1 d1d6 e948 258a 14da fbd3 4f37 c414     ....H..%....7O..
   ab9c4:	0f6b b0c6 d03f 585e 6ea9 3dc4 f51f 4765     k...?.^X.n.=..eG
   ab9d4:	2f71 faaa 8085 793f fe3f 1732 5445 3101     q/....?y?.2.ET.1
   ab9e4:	16b9 5557 e474 c779 a4e2 e26a 9213 fa89     ..WUt.y...j.....
   ab9f4:	d030 9e2c f86c af0a 9ed2 5859 4f49 fe51     0.,.l.....YXIOQ.
   aba04:	6ec9 9403 6896 23f8 deaa 6a35 1b41 ab36     .n...h.#..5jA.6.
   aba14:	b61d af7a ead1 103d c747 706a 6e50 7451     ..z...=.G.jpPnQt
   aba24:	686b 099b bba0 23a5 26e4 9096 b97f 3f31     kh.....#.&....1?
   aba34:	a77c b4bc 9778 b895 a2a8 473b 0ab8 f9b3     |...x.....;G....
   aba44:	d5fb c1dd 8c3d 757d f077 5e88 7e62 e399     ....=.}uw..^b~..
   aba54:	3dcb 8a8a 6f75 7276 7e1f 7a13 3479 4e9f     .=..uovr.~.zy4.N
   aba64:	afdf 29e2 ccbd c41e e3f3 e23b 1680 42a5     ...)......;....B
   aba74:	26bf c668 71d7 dce2 7f79 4d21 137b dae0     .&h..q..y.!M{...
   aba84:	b192 bff7 a7ff 06c7 c5ca 68cf cf21 8b66     ...........h!.f.
   aba94:	5e4c 765a 378c 1737 2a95 5e86 65cc efb7     L^Zv.77..*.^.e..
   abaa4:	b072 bbae 435f 071f 1ef7 edde 1fd3 dc8c     r..._C..........
   abab4:	ff75 10d1 ee5f cc9f 17e8 dfbf 0e9f 77e9     u..._..........w
   abac4:	7e8f d1ef 7def 7dfa bf00 0f5f aaa9 87af     .~...}.}.._.....
   abad4:	fe31 3bde 97a1 09fb 3efe e018 ecef 4a6b     1..;.....>....kJ
   abae4:	4d9a 37e9 97a1 1ee4 52fd e4f9 fd21 fcc6     .M.7.....R..!...
   abaf4:	9b01 307d 06c4 dc1f 8aa5 dc1f 8ac3 c41f     ..}0............
   abb04:	cb54 1383 f2ac 4241 3cad df98 df85 4387     T.....AB.<.....C
   abb14:	f2fa e290 3d8e d21c 8797 f47b ef65 bf3e     .....=....{.e.>.
   abb24:	a03c 47df 82fc 3c0d e1e2 1a3f 90e0 dd1e     <..G...<..?.....
   abb34:	9ec5 ba3d e347 747e 21ef 52fd fbae 749c     ..=.G.~t.!.R...t
   abb44:	071f e8fb ca6b 35fb fc56 21e8 eff6 09d1     ....k..5V..!....
   abb54:	3b95 a1c1 9a3e 5672 9d9a 5347 3d2a 66c3     .;..>.rV..GS*=.f
   abb64:	251f 2c54 62c1 60f1 bf48 1298 a353 3df1     .%T,.b.`H...S..=
   abb74:	b94a 2947 1ef7 efd0 fa43 61a5 d4c4 f88d     J.G)....C..a....
   abb84:	653e c9a2 1f8c 33f0 28f6 5ea6 0fc4 30a9     >e.....3.(.^...0
   abb94:	25f5 5ee6 b4c4 313a 4ead a53c a8fa 3147     .%.^..:1.N<...G1
   abba4:	25f5 bea6 509c 4e5f 17a8 7727 fa13 b5c5     .%...P_N..'w....
   abbb4:	e13e 3869 77b9 7e8f d8b1 fdc9 e9af ab17     >.i8.w.~........
   abbc4:	a13b 3859 59a1 a138 4f96 fc68 d327 fd01     ;.Y8.Y8..Oh.'...
   abbd4:	7e52 f81a 2ef4 f4ad def4 7e80 e6bf 8797     R~.........~....
   abbe4:	1bf4 0bf3 9e66 e4d2 a94e 2989 3e55 caa5     ....f...N..)U>..
   abbf4:	34a7 29a0 dfc1 2094 3a6f 3ca5 4a53 86a7     .4.)... o:.<SJ..
   abc04:	33a6 3b2a 74a3 db1a c694 a336 ccf1 2478     .3*;.t....6...x$
   abc14:	1a33 8cc9 9b1a 18d1 d466 8ccc 999a 634d     3.......f.....Mc
   abc24:	c5fa 6666 3db3 302a 02a3 eb54 770c 20f7     ..ff.=*0..T..w. 
   abc34:	3bb9 dfa4 7d7b 83fa 9225 0f7b e5e8 b61e     .;..{}..%.{.....
   abc44:	9c94 f7d0 fe13 f27e 7e88 e84f 3b17 4c9b     ......~..~O..;.L
   abc54:	d21f ea07 7cf3 90f8 317e fcd3 7dee 7dfa     .....|..~1...}.}
   abc64:	bf40 f294 fa80 7f3c d580 1fce 9012 1fce     @.....<.........
   abc74:	a3de afdf 97e9 3ef2 0fe2 f88f e085 4e7a     .......>......zN
   abc84:	cd4d 8e71 8386 59bd ff1f 1ddc efd0 bf1e     M.q....Y........
   abc94:	a03c 47df 1bf4 efd3 7e8c fc13 ffbd 7e90     <..G.....~.....~
   abca4:	ebe9 84fd 7c0a a54d 43a9 e7f0 fe1e 82e2     .....|M..C......
   abcb4:	efc3 fa7d 96a5 521e 8f1d f7f0 7dee ab98     ..}....R.....}..
   abcc4:	83e1 3521 60f7 0588 701e 0fdb d2ee fdcb     ..!5.`...p......
   abcd4:	fa3d 8bbd 0fbf f9e8 3d01 3c9f 4ca0 7088     =........=.<.L.p
   abce4:	0f86 0068 a60f 288f 4669 67df e1f8 00e1     ..h....(iF.g....
   abcf4:	0477 a1fc 1897 fa3b 0f68 01a7 ecfe efd1     w.....;.h.......
   abd04:	fa03 71c5 ba3c 294b a977 4792 6177 8625     ...q<.K)w..Gwa%.
   abd14:	f0f1 fd01 e7e2 8118 7e0d 5571 0fe0 3f8e     .........~qU...?
   abd24:	c1a6 08c6 f018 9f7b 7c3e c53d 07df e977     ......{.>|=...w.
   abd34:	01e5 e0bf 4f08 7708 1fc0 dcec 0d09 e4ed     .....O.w........
   abd44:	d7ee 4494 4af3 6a7b 8278 7a7b f278 f535     ...D.J{jx.{zx.5.
   abd54:	84fa 7a06 70f2 bf40 fc43 698d 4e66 fbe2     ...z.p@.C..ifN..
   abd64:	fbf4 7e90 5071 bdd3 7e29 de98 4bbd 5fbf     ...~qP..)~...K._
   abd74:	2fd3 7df6 a33a a766 3db3 bdfa 2f47 80c9     ./.}:.f..=..G/..
   abd84:	f77e e5f8 fd21 04e2 a6cd 7994 6096 d9f9     ~...!......y.`..
   abd94:	c09c 8661 d1e7 60de a530 0a5f 48cf ee55     ..a....`0._..HU.
   abda4:	e60d cb50 34de e399 74cb dd0e 9bdb f425     ..P..4...t....%.
   abdb4:	8a85 1ddc c5ec 9e74 d1ed a3cb f447 230b     ......t.....G..#
   abdc4:	bf8d 1afe c48b e35f c262 94ef 677e 8bf8     ......_.b...~g..
   abdd4:	c235 542f 3f15 7444 bf07 d35f 09ef eefe     5./T.?Dt.._.....
   abde4:	a7dd 4a5f 8441 3f19 e6a4 87e2 e054 1ed1     .._JA..?....T...
   abdf4:	264e c1fc 1e9a 3ed1 1f8b a7dd b42f e021     N&.....>..../.!.
   abe04:	d60f e8f8 2ee4 72fd dc66 3174 e421 2638     .......rf.t1!.8&
   abe14:	0f44 127f c5fc 0bad 7bbf 7bf4 7e9f ddb1     D........{.{.~..
   abe24:	def8 fa5d 02a5 a678 efc0 151e b93b bf47     ..]...x.....;.G.
   abe34:	e80f 21f7 52fd 8845 e289 4f18 4842 4fb8     ...!.RE....OBH.O
   abe44:	0fbf 17e9 39ba 6793 1cf9 6be7 327e 304c     .....9.g...k~2L0
   abe54:	25d2 c125 4c1f f64a 05f8 3cc7 3f9f e84a     .%%..LJ....<.?J.
   abe64:	ce17 d1fd 6565 0b7c 814d af0c 3759 d26f     ....ee|.M...Y7o.
   abe74:	13ad 95d2 28d5 6155 f7b0 29fa 9b59 2c61     .....(Ua...)Y.a,
   abe84:	722a 8b2b 1634 3251 5ca2 9f87 14a8 1b7d     *r+.4.Q2.\....}.
   abe94:	9ac9 eaf1 55a3 d23b 87c2 f485 83c4 b439     .....U;.......9.
   abea4:	3672 eeba 50a1 4ac1 1fd3 1945 005c 43fb     r6...P.J..E.\..C
   abeb4:	b2de 29e2 7379 d5cb ee07 fd9a 3a89 9029     ...)ys.......:).
   abec4:	1bde c70e 23bf 77d9 58e8 5923 0b9e 9f74     .....#.w.X#Y..t.
   abed4:	68a1 8d0a 9f70 2124 9868 d774 936d de24     .h..p.$!h.t.m.$.
   abee4:	56de b0e2 1f12 f12a 42a2 e291 aacb 6861     .V....*..B....ah
   abef4:	1d88 0478 bbed 4f57 7449 f851 644e 8a0c     ..x...WOItQ.Nd..
   abf04:	7883 a18a bd13 c734 d3f8 3026 be22 fdaf     .x....4...&0"...
   abf14:	bc40 7e22 250a 2f14 fcc8 eee7 e476 cfbd     @."~.%./....v...
   abf24:	e7df 4a27 716e 7de7 477e e879 6c9d b5b0     ..'Jnq.}~Gy..l..
   abf34:	de50 cd9b 3b85 e910 2523 b25a 7948 d474     P....;..#%Z.Hyt.
   abf44:	075b 6423 5208 6452 1e31 982a 5017 a937     [.#d.RRd1.*..P7.
   abf54:	f0b5 93de 9d7e b276 1fdc 1306 09f8 40d3     ....~.v........@
   abf64:	3be8 aa36 f4b2 c2b0 28ed f89e 75d2 a171     .;6......(...uq.
   abf74:	da2f 11d0 dd41 e28b 30de f508 bc57 4133     /...A....0..W.3A
   abf84:	7903 af13 f3a1 5d36 bf8f 9f7c 6e4f 1670     .y....6]..|.Onp.
   abf94:	e2d6 1569 405d c5cb aec5 fead 6933 fe12     ..i.]@......3i..
   abfa4:	0aa6 9387 8ed8 465c 70c2 da05 9d1b 15db     ......\F.p......
   abfb4:	6fe5 190b e2a7 d802 27f4 5a0a 3574 3eee     .o.......'.Zt5.>
   abfc4:	3593 c6c2 db59 a6da 05bc 83b4 542a 1c5b     .5..Y.......*T[.
   abfd4:	39a0 b4f5 c338 d04f 3795 0a45 aedc 51ef     .9..8.O..7E....Q
   abfe4:	c93f 0eaf 142e a071 ab8f d5b6 0b61 8ad0     ?.....q.....a...
   abff4:	a51c 045e 9355 01ed 8dba 1cab 656f 3bf2     ..^.U.......oe.;
   ac004:	9b2a 1090 ebc0 7974 7285 cc18 2017 3e64     *.....ty.r... d>
   ac014:	fc91 6bf4 7660 86ef 391e f60e c3c4 33d0     ...k`v...9.....3
   ac024:	168e a3c5 23d0 c377 9343 f861 2875 e87d     .....#w.C.a.u(}.
   ac034:	e189 9083 ec7d 2189 4314 7b17 0862 de25     ....}..!.C.{b.%.
   ac044:	c8c4 8b45 01bd 057c f054 98a2 847e c837     ..E...|.T...~.7.
   ac054:	b4fb 7a9a eee2 941e dae7 deef ccc5 2aec     ...z...........*
   ac064:	eef2 7e3d 9766 7792 63ef 307b 7747 35a1     ..=~f..w.c{0Gw.5
   ac074:	c972 ee2a 0542 b1ec 2ef2 4634 a045 e92d     r.*.B.....4FE.-.
   ac084:	f2d9 b41e 25c5 61ef 253d f64c 69db af89     .....%.a=%L..i..
   ac094:	1150 3e7b 6786 4ba8 fbba f714 eca1 13c8     P.{>.g.K........
   ac0a4:	0f5f 2f43 6182 1fc2 05f4 1e28 a9ed bb87     _.C/.a....(.....
   ac0b4:	01f2 1ee8 02ca 4e14 f5e8 5431 03e7 0b53     .......N..1T..S.
   ac0c4:	3590 f89c 6bf0 6eaa 50f8 7e66 5d08 f814     .5...k.n.Pf~.]..
   ac0d4:	1657 047a dbfd bfc5 d0d0 fc1d ed0b 77fc     W.z............w
   ac0e4:	1498 ae9c f823 738b fef5 3e3d 8640 fc63     ....#..s..=>@.c.
   ac0f4:	190b 01fe bbfd 87bb 85f3 c5a3 bbc7 946a     ..............j.
   ac104:	72f8 cd4f be07 d7dc 0153 0f6f 4cf6 f117     .rO.....S.o..L..
   ac114:	aef5 439a 517c 8b33 5fcf f99b d7c7 f607     ...C|Q3.._......
   ac124:	7c12 177d 7b8e 793d 1fe8 fa50 ac47 d7a2     .|}..{=y..P.G...
   ac134:	e895 33d4 8c1a 8386 3271 7a4a 00bd 20dd     ...3....q2Jz... 
   ac144:	eef6 3c3d 7f26 bd88 5f47 471f a32c 3d41     ..=<&...G_.G,.A=
   ac154:	536d ebe0 a3fb 8347 6471 a88a 746c 725b     mS....G.qd..lt[r
   ac164:	e140 6646 5b89 3866 ee1a 45d9 c37a 50e1     @.Ff.[f8...Ez..P
   ac174:	4336 7113 791c 7adf c43d 84bd 9ef2 e255     6C.q.y.z=.....U.
   ac184:	670f 6983 8657 8589 f68c 3dee 9318 b1ae     .g.iW......=....
   ac194:	86c4 1049 e326 7868 ef6f 9c1e f744 eef7     ..I.&.hxo...D...
   ac1a4:	47e1 27ef 128f dfef 1afd 8112 c570 52c4     .G.'........p..R
   ac1b4:	e897 07e3 f62e 01e0 8314 1c25 b150 8a92     ..........%.P...
   ac1c4:	6f01 b7ba f3b3 6f70 c540 0bbc 842f f467     .o....po@.../.g.
   ac1d4:	3929 d0f1 f785 6f0b 3bad 3b56 70c6 6814     )9.....o.;V;.p.h
   ac1e4:	d947 e374 28b4 3ac7 1175 6be5 ca16 2779     G.t..(.:u..k..y'
   ac1f4:	5fea d55d d517 f389 aaaf ed20 abd5 bf2f     ._]....... .../.
   ac204:	f2fc fd15 f013 a1bf c7fe af69 6c5e f7fc     ..........i.^l..
   ac214:	df39 4365 1b27 09ff 9e6c e7da befa 12fc     9.eC'...l.......
   ac224:	c65a e1c7 db8b bfaa 59a5 eefe a1c1 95e8     Z........Y......
   ac234:	3fd6 be51 757a ff46 7fca dfe5 f399 264f     .?Q.zuF.......O&
   ac244:	fae6 97df 8e79 ca99 5fff 3bfc ff6b 91a3     ....y...._.;k...
   ac254:	f2a1 c90d ee6f 0b33 7f78 724e 9614 7c66     ....o.3.x.Nr..f|
   ac264:	d48d e0e7 bf01 8c3c c7a7 4477 b901 0011     ......<...wD....
   ac274:	31e0 c786 3f17 f095 2284 17a0 c327 1e1c     .1...?..."..'...
   ac284:	7833 87a4 0455 3850 de6a 486d af03 0594     3x..U.P8j.mH....
   ac294:	b948 b2a5 05a4 62bd 291a ade1 2398 32a1     H......b.)...#.2
   ac2a4:	4c03 1d30 46cf debd 982c 5133 b400 9f8b     .L0..F..,.3Q....
   ac2b4:	00cb b342 f604 2ccb 64b0 5094 2c40 95a2     ..B....,.d.P@,..
   ac2c4:	242e d2c9 d1f9 78ec 9de4 f9c1 4e55 39f0     .$.....x....UN.9
   ac2d4:	845a a88b db5c 96a5 4a9b b10d ced4 878e     Z...\....J......
   ac2e4:	ce44 4b92 b97b 6a87 38ab f20e b09e 4a8c     D..K{..j.8.....J
   ac2f4:	df41 a3d1 e728 09f8 7d83 fa98 d087 f9ab     A...(....}......
   ac304:	e0d1 3478 0fed 1abb c9e9 b046 85b1 0bfc     ..x4......F.....
   ac314:	7a5f 63c3 e2d9 c3d0 6073 451b 8bb0 f96d     _z.c....s`.E..m.
   ac324:	a809 21c4 6124 1cfe deff 70dc 8be3 3440     ...!$a.....p..@4
   ac334:	d746 3239 a0f4 b026 80dd 789b e9e5 053b     F.92..&....x..;.
   ac344:	4bef d74a f918 8234 a0f6 5392 ea68 ea4b     .KJ...4....Sh.K.
   ac354:	e9da d431 6a77 fe26 9a3c b7c1 ee6d 1f76     ..1.wj&.<...m.v.
   ac364:	c6fb 87b9 f732 4684 db00 2cec 8d9a c74e     ....2..F...,..N.
   ac374:	5067 0cfa 3dda 8e3b 47ce e8b3 3fb4 7f5c     gP...=;..G...?\.
   ac384:	6ade c0bc 9055 caf5 84b5 e6b4 046a 839d     .j..U.......j...
   ac394:	f347 ce46 e587 ce82 e9e1 a70c 81c7 c23b     G.F...........;.
   ac3a4:	88ab f71a 1367 611e 0ab8 89c4 834c 13a2     ....g..a....L...
   ac3b4:	822c e769 d5d1 cdcd 04c9 057b b050 bc79     ,.i.......{.P.y.
   ac3c4:	deaa 714b 8361 f63a 72b2 897a 0e99 16a0     ..Kqa.:..rz.....
   ac3d4:	002c c0c3 3b5c 763b 1a16 e8dc a8c2 d7f2     ,...\;;v........
   ac3e4:	5040 881f 6059 ae99 8c7e e266 746d c8a1     @P..Y`..~.f.mt..
   ac3f4:	a77e e82e 36ea 2f4f a455 763a 7d16 cd1c     ~....6O/U.:v.}..
   ac404:	e7a0 a3d8 354c 8677 3a3d 7f1b d9dc 50b9     ....L5w.=:.....P
   ac414:	3ed7 d16f 964a 1d5a 8f8a 2ce2 e3e0 30f2     .>o.J.Z....,...0
   ac424:	933a 9cad 2d61 39a8 aa64 d9a0 7518 b0d4     :...a-.9d....u..
   ac434:	0e27 06b1 31f1 a33a 73be cde9 e1ad 2518     '....1:..s.....%
   ac444:	01a2 e54e c742 0393 b830 20c4 44a2 df64     ..N.B...0.. .Dd.
   ac454:	e7f9 aafb 2777 d840 1ca0 f674 1a5d 3fa5     ....w'@...t.]..?
   ac464:	b171 cabb a5c9 9eb1 81bd beb0 72a3 d407     q............r..
   ac474:	2f3e 8bfc aba0 a87a 0bfd 9eae d4b3 bf45     >/....z.......E.
   ac484:	bd51 32b3 bed3 71fd b58a 8e9b bb6f 38cd     Q..2...q....o..8
   ac494:	4d45 312e 72c5 62e2 f6bd bd2d f38d a4a4     EM.1.r.b..-.....
   ac4a4:	bed0 bdde 7bdd 03bb a04f a7d5 a4cd ec78     .....{..O.....x.
   ac4b4:	dbc0 e2a2 312f 7c42 1005 fcd0 5672 56cc     ..../1B|....rV.V
   ac4c4:	3259 fc49 f932 9573 c096 ec17 deee ff81     Y2I.2.s.........
   ac4d4:	e967 9dc9 e029 33dd 0aba 1c03 7617 0730     g...)..3.....v0.
   ac4e4:	1b1c 6778 ff87 c6ee b367 3f09 47fa d5dd     ..xg....g..?.G..
   ac4f4:	a31c 5cad 9be2 363b 2b60 8e9c 1b03 85b0     ...\..;6`+......
   ac504:	afa6 c5d0 1b91 f9d4 f88f ae3c 65a6 acba     ..........<..e..
   ac514:	cd2d a6d4 e9a7 3186 300a 25ea 48fc 1b2d     -......1.0.%.H-.
   ac524:	ecba bf42 68b2 c1b9 9467 2f74 c779 dba3     ..B..h..g.t/y...
   ac534:	7330 0a21 3614 b26a e142 8841 fad8 3398     0s!..6j.B.A....3
   ac544:	58f8 b05b 8a86 4873 ea04 3d1b 1b81 2c2a     .X[...sH...=..*,
   ac554:	a86d 2e7b e951 94eb 8f8c a64d bdc2 e51a     m.{.Q.....M.....
   ac564:	20fe fe8a f787 720f 0df8 3c44 b6de 756a     . .....r..D<..ju
   ac574:	8a28 8d5a 802e 0c63 6e16 a9de c21e bbed     (.Z...c..n......
   ac584:	991e 2747 1766 7acc 24fe 4a3c 1e9e f51f     ..G'f..z.$<J....
   ac594:	f7de 278f 1ef0 ee4c f368 d4ea d657 da64     ...'..L.h...W.d.
   ac5a4:	acac 22b3 4358 2ecf 2d54 b44b 13ba ba1e     ..."XC..T-K.....
   ac5b4:	e70c 4022 1c56 3fbd 5ebe f7bf 07df f462     .."@V..?.^....b.
   ac5c4:	7c3e abbf c95c 56e6 f649 03fb 8e6c 1eac     >|..\..VI...l...
   ac5d4:	d77d 637a eea7 0c68 a2f5 456e 0a8c 9c1a     }.zc..h...nE....
   ac5e4:	607f bfe7 7973 b527 b6c2 5f2b d8b9 5983     .`..sy'...+_...Y
   ac5f4:	9fdc c31f b157 6069 de77 5acf b2bd eb67     ....W.i`w..Z..g.
   ac604:	982b f7ad f0bb 9837 cd74 c6db 097a 7270     +.....7.t...z.pr
   ac614:	53a7 f7be 8795 3c9e b2cd 8255 d92c 0a03     .S.....<..U.,...
   ac624:	85da ee19 0660 f227 3638 c180 298d 8eea     ....`.'.86...)..
   ac634:	c27e a73d 8467 3314 aae3 e546 805e 6011     ~.=.g..3..F.^..`
   ac644:	30ac dc9a b4d6 a1f9 e62a a48d ff3b 3584     .0......*...;..5
   ac654:	15c2 a312 f8f0 e50b 57e8 8067 e0be 11be     .........Wg.....
   ac664:	94ce a69e 5767 3cc7 32f0 0539 e1ec 8b29     ....gW.<.29...).
   ac674:	fef4 f61e b7cb 1f72 94d4 f74f 5ad4 4146     ......r...O..ZFA
   ac684:	369e 764b cdc1 f633 37df 7700 3226 d003     .6Kv..3..7.w&2..
   ac694:	e1ff 6b4e a663 4212 4225 a5fe 0712 7b75     ..Nkc..B%B....u{
   ac6a4:	ff79 0776 2e47 5d54 ffbc 03e2 81cc 8296     y.v.G.T]........
   ac6b4:	8ce9 f640 505e 0430 04d2 5e7a 053d 8090     ..@.^P0...z^=...
   ac6c4:	4efa 58a0 6701 45c3 364d d250 39dd 89e0     .N.X.g.EM6P..9..
   ac6d4:	345d d264 3df3 fd49 f915 1443 762b 2e49     ]4d..=I...C.+vI.
   ac6e4:	208a ee84 3341 8929 8505 88f5 454e e215     . ..A3).....NE..
   ac6f4:	bb88 88f4 448c 4816 d675 bfa7 f342 ffa9     .....D.Hu...B...
   ac704:	4046 1e80 7db8 7152 5866 58ff 171b 660b     F@...}RqfX.X...f
   ac714:	0bea 9d9c aa3f cf22 7d66 5709 8f66 bb93     ....?.".f}.Wf...
   ac724:	8912 d13f be6d 9fc4 0b88 d1b7 369e 5406     ..?.m........6.T
   ac734:	2d0a 0ac7 961f e46a f931 32e6 d08d 481a     .-....j.1..2...H
   ac744:	06af bdda 6041 cf61 e1aa 4004 6ea2 2383     ....A`a....@.n.#
   ac754:	ae0d a406 7680 56e7 52ed 051b bb58 f0af     .....v.V.R..X...
   ac764:	dafb 9620 7d8e da65 bacc e4db e6e1 e3ad     .. ..}e.........
   ac774:	a902 867e d860 5f69 d838 daec a743 9d3a     ..~.`.i_8...C.:.
   ac784:	c25d 3c62 7639 febf c55c 6a55 2b6f 1607     ].b<9v..\.Ujo+..
   ac794:	174d d257 c169 3cee 1fae c403 3c5f 9e96     M.W.i..<...._<..
   ac7a4:	f5e7 e5ab 2cf8 d8a7 8eef 6cdb acc2 c032     .....,.....l..2.
   ac7b4:	9b3b f847 7183 341e 5d8d a8e1 a22c 595c     ;.G..q.4.]..,.\Y
   ac7c4:	f5d5 5afb 3cf7 f869 2f03 fdd0 dbcc d75a     ...Z.<i../....Z.
   ac7d4:	731f 0f18 b528 73b3 5c77 89c9 ae0a 3d7b     .s..(..sw\....{=
   ac7e4:	0335 33ec dfa4 032f 5ae9 f246 501e eee6     5..3../..ZF..P..
   ac7f4:	cece 50d7 d7a6 352b 7247 e8e7 f78b ea17     ...P..+5Gr......
   ac804:	8910 2083 9f45 3a7c 1f4a d21d dd56 4a6b     ... E.|:J...V.kJ
   ac814:	4e69 6148 d5c3 e8d4 c0c6 ba7e 6e96 d023     iNHa......~..n#.
   ac824:	75d3 5332 1242 05f6 c5ae e824 2326 fe57     .u2SB.....$.&#W.
   ac834:	9309 28f3 5a95 f939 80bc a2dd d7fd d2b1     ...(.Z9.........
   ac844:	9c4e a7a5 7139 aa22 79c5 1fcb 6ed9 4c56     N...9q"..y...nVL
   ac854:	ece3 b897 46ac 8039 4e74 4570 b42e 7376     .....F9.tNpE..vs
   ac864:	1f8c f5a2 2c67 83ff 8e1c a73b 8358 abb0     ....g,....;.X...
   ac874:	92a2 62fa af69 bb96 9fe7 a153 d7e9 d6cc     ...bi.....S.....
   ac884:	d212 6d68 2d4a c07e 0900 52e8 112e 48f4     ..hmJ-~....R...H
   ac894:	0b31 7c52 d566 167b c2fc 74eb 530a 41f0     1.R|f.{....t.S.A
   ac8a4:	5386 4888 3c8b 4cb9 7461 0d4d 8f49 c626     .S.H.<.LatM.I.&.
   ac8b4:	480b 4e7f e1e5 dac9 041e 91a3 6e31 3790     .H.N........1n.7
   ac8c4:	c519 b2ee fa58 7841 4f52 c20e 320b f073     ....X.AxRO...2s.
   ac8d4:	67d1 f484 6499 47e2 4716 b685 4502 f93a     .g...d.G.G...E:.
   ac8e4:	1472 b2c8 4886 1dd6 e89f d0a7 5620 b9da     r....H...... V..
   ac8f4:	4cb8 3065 a9d1 07b0 2043 cce7 2d7c 511c     .Le0....C ..|-.Q
   ac904:	56a5 3340 a816 ee09 a495 0fdf 5e68 8298     .V@3........h^..
   ac914:	d9d7 23d0 a99a 696b 3e54 b617 9a9a f751     ...#..kiT>....Q.
   ac924:	f614 9d52 2912 c46b 0e7b d538 d61b 313c     ..R..)k.{.8...<1
   ac934:	a440 2f6f 9218 ead4 02b2 84b3 da2a 66aa     @.o/........*..f
   ac944:	3181 91be 8027 36b5 aac0 8b4e 9591 5d16     .1..'..6..N....]
   ac954:	6363 c261 1a11 0fac e66b 5141 19af 38ea     cca.....k.AQ...8
   ac964:	8acd 4693 b925 4895 e6fa b5e6 a959 b2f9     ...F%..H....Y...
   ac974:	b7b6 39f2 a24c 8a1a 451a 8d74 22db 266c     ...9L....Et.."l&
   ac984:	dc0b 261b f4d5 b452 a2d3 1617 7e7d b766     ...&..R.....}~f.
   ac994:	b261 eb34 bda7 5a27 699d c365 99ce afca     a.4...'Z.ie.....
   ac9a4:	e26c 71bf 9385 c2eb 0a70 1ae5 c945 13e0     l..q....p...E...
   ac9b4:	f231 b96c 47de 9fa4 5a5c 3a09 a13b a34a     1.l..G..\Z.:;.J.
   ac9c4:	a9d0 8c73 5300 817a 2647 e450 398d cde5     ..s..Sz.G&P..9..
   ac9d4:	4238 75d3 2cc2 9465 6a9a 3974 2952 fa9f     8B.u.,e..jt9R)..
   ac9e4:	41a5 120b 025b 9421 af48 2a13 f92f d52b     .A..[.!.H..*/.+.
   ac9f4:	0604 a224 ca83 0cdc 44ff 56df 8069 a834     ..$......D.Vi.4.
   aca04:	fb01 e780 406b 8c77 40f6 6149 a0cd d6ec     ....k@w..@Ia....
   aca14:	0398 8483 b722 6b3e 5e03 7636 6194 72d3     ....".>k.^6v.a.r
   aca24:	a914 e223 46f1 3ee4 b604 487d 7b6a eeda     ..#..F.>..}Hj{..
   aca34:	174b b0bb fbf5 7110 5c78 8af6 37e8 40de     K......qx\...7.@
   aca44:	d1da 17ce d2e2 f0f7 ed5a aa04 0456 6c7b     ........Z...V.{l
   aca54:	604a 18ec 7af8 2e20 1c9c ad27 fc1c dafd     J`...z ...'.....
   aca64:	afa4 f121 250d 3c8e f9dd 4e74 40cf 031f     ..!..%.<..tN.@..
   aca74:	c004 01a3 3d62 f35d 6762 40c7 f4e8 7ac8     ....b=].bg.@...z
   aca84:	0836 8a35 9c4e 0a5c 8ab3 a756 6fc5 b10d     6.5.N.\...V..o..
   aca94:	f600 a924 ad31 5b28 f8a3 8e41 42c3 32c2     ..$.1.([..A..B.2
   acaa4:	4103 2077 c35e eac7 0522 b542 8e63 d468     .Aw ^...".B.c.h.
   acab4:	7d42 700f af6a 1679 d2a8 5c69 0aa9 f00f     B}.pj.y...i\....
   acac4:	485b 93dc d88a 1fc6 3274 c8dd dab6 c738     [H......t2....8.
   acad4:	0072 a27e f1ae e029 1789 5067 8580 1d24     r.~...)...gP..$.
   acae4:	e225 9c5a fb71 e464 ccda d790 91f4 2fa5     %.Z.q.d......../
   acaf4:	afad 7f15 cf4d bf3a f466 6175 cfcd 8181     ....M.:.f.ua....
   acb04:	0327 0791 5716 16f0 13a0 13e5 e3fa e6c7     '....W..........
   acb14:	81c7 f1f5 0ead a656 db17 a122 b322 99dd     ......V..."."...
   acb24:	5474 78a6 2793 63e1 49c2 67be 1c4e de38     tT.x.'.c.I.gN.8.
   acb34:	71ce 7089 7ed2 bff2 f411 8270 05fd 13ea     .q.p.~....p.....
   acb44:	5b6d 98cf b3b1 5ed7 5d15 d140 9c6f f2ac     m[.....^.]@.o...
   acb54:	aad0 2f27 17c3 9d0a d61c fa4d 3802 a5d7     ..'/......M..8..
   acb64:	765f a001 ad28 34ed c995 e4f5 7843 e908     _v..(..4....Cx..
   acb74:	99be ec69 a1e4 e858 3ee5 82a1 cb16 0c4d     ..i...X..>....M.
   acb84:	0b35 543d 1f25 83c3 2420 90f1 e4ac 0a18     5.=T%... $......
   acb94:	6bce 9659 e8f7 feb7 021f 55a1 a1ea 9287     .kY........U....
   acba4:	67d6 f2dc 530a be96 10b5 8e87 838a 4a94     .g...S.........J
   acbb4:	8d1c afde 07df 8fef b005 84a0 1691 81fe     ................
   acbc4:	e655 67c3 f996 9568 e179 2f20 b6a1 104b     U..g..h.y. /..K.
   acbd4:	24be d0ba 9c81 ae97 0fb6 efd0 e4f9 f845     .$............E.
   acbe4:	1512 f1ef 20f1 a8fc 0cd4 d560 5450 0086     ..... ....`.PT..
   acbf4:	2390 d06c b186 70e7 e772 ef7d ef7d dfa6     .#l....pr.}.}...
   acc04:	a257 b507 136e 5059 586d 4aa0 6261 aed2     W...n.YPmX.Jab..
   acc14:	02f9 dfb0 7bc6 5f4f efce 8447 e030 62e8     .....{O_..G.0..b
   acc24:	f18c df89 e577 9e68 5bd1 7963 b10e 6381     ....w.h..[cy...c
   acc34:	c0b5 aaec 794b d2ec 7e23 cce5 f70e 5b60     ....Ky..#~....`[
   acc44:	069e 17de c4d7 4bc3 1845 8ded 4713 0af2     .......KE....G..
   acc54:	7d3b 9e20 935a d4f7 de72 66b5 6ca4 5991     ;} .Z...r..f.l.Y
   acc64:	e186 fbd3 92ce 6082 4185 73ab ad8f 5ee5     .......`.A.s...^
   acc74:	7af9 ea6b 021a f0b1 f025 845d 9c36 f93c     .zk.....%.].6.<.
   acc84:	053b 606d 6d79 218d d394 2279 102e 5ea6     ;.m`ym.!..y"...^
   acc94:	e174 67a1 7e56 c307 43db 3257 0f13 d986     t..gV~...CW2....
   acca4:	ca31 9a3f aba7 c5ae bc48 c1d4 cc06 c6c7     1.?.....H.......
   accb4:	3daa e774 e1cd 2b1a 9a7e 0f3c 457f afcc     .=t....+~.<..E..
   accc4:	689d ced1 2e56 9d16 ae9a 89ea 2ca9 6d54     .h..V........,Tm
   accd4:	bcf5 bb2d aa05 21ac e132 fa39 02d5 03bf     ..-....!2.9.....
   acce4:	7705 b6bf fac7 6bbc 18be 20de a6f7 2591     .w.....k... ...%
   accf4:	2db5 f81a 63b5 3e8d 146a a0b7 b8a3 eed9     .-...c.>j.......
   acd04:	924f 5537 64ef 6cbe 082e 7ea5 9358 5076     O.7U.d.l...~X.vP
   acd14:	9d9b 5c36 7444 9ce2 cb42 dc50 fe2d 8e83     ..6\Dt..B.P.-...
   acd24:	30c8 c9c6 3492 1509 54f1 1ef2 4dc7 4972     .0...4...T...MrI
   acd34:	04ee 129b 52ac a7c3 bace 1ae0 a74c 6dbf     .....R......L..m
   acd44:	27bb 3bba f72a 1c9b 3919 e995 c564 d7d0     .'.;*....9..d...
   acd54:	3ebd aea9 6a48 7826 1c26 7e20 dad3 dcb8     .>..Hj&x&. ~....
   acd64:	0b9d c6f1 f5ca b597 2ea7 d851 e6a6 97fe     ..........Q.....
   acd74:	74f6 f2ff db39 3342 77a0 6c37 2f8c e62c     .t..9.B3.w7l./,.
   acd84:	4e11 bfd7 77c4 67e2 43ab 6cdf 37dc ff13     .N...w.g.C.l.7..
   acd94:	2614 2b9d 6095 2df9 cf1e 9400 b0e6 13fa     .&.+.`.-........
   acda4:	ab0f a376 767f 4ad7 3f52 1c43 8b98 afb7     ..v..v.JR?C.....
   acdb4:	3bc2 8678 dc4c 1e53 a480 960b 4fb1 eb12     .;x.L.S......O..
   acdc4:	237f 43be b289 e8ec 3677 7f80 74e7 9221     .#.C....w6...t!.
   acdd4:	c5e7 76c7 7f5f a6b6 1d59 5f6c b3b4 e6fd     ...v_...Y.l_....
   acde4:	e7d4 dc10 72e8 e98a dae6 c322 2704 124a     .....r...."..'J.
   acdf4:	59bc 0fdd ab56 b20d 9de2 29a6 c5da b9de     .Y..V......)....
   ace04:	a130 abba eab0 168f ff59 9b63 fe5e 489e     0.......Y.c.^..H
   ace14:	9301 d4d9 bdfb ba33 9734 9028 042f 801c     ......3.4.(./...
   ace24:	52d3 3c5e 71fe be6b 2a70 d1fa 48a9 e5f5     .R^<.qk.p*...H..
   ace34:	a477 3f55 52bf 93ab 5bbf ff75 d74e 017c     w.U?.R...[u.N.|.
   ace44:	d182 cece a1d2 9269 69da abf7 5adb 4440     ......i..i...Z@D
   ace54:	7618 3a83 527f 61eb a591 d740 324b 02ef     .v.:.R.a..@.K2..
   ace64:	9489 b2e6 b5d4 2eb5 d52e e357 6070 59df     ..........W.p`.Y
   ace74:	cd9d 4feb ba6f eeb2 cbd8 5ba5 bd90 5414     ...Oo......[...T
   ace84:	149a eb2a ab36 d697 605d d694 25ff 65c7     ..*.6...]`...%.e
   ace94:	61c7 f4b9 5a8b 1900 d69d 1b08 00fc babd     .a...Z..........
   acea4:	4175 8b38 1582 692c d061 d766 7a8b e9f3     uA8...,ia.f..z..
   aceb4:	f9b7 b3f0 4331 0eec 3ade 97ca c5fe c826     ....1C...:....&.
   acec4:	7698 47ad 37f5 6ea0 4b5a 7690 cb99 fbcd     .v.G.7.nZK.v....
   aced4:	64c0 4387 bec4 7077 cd60 3cee 5ce6 02d5     .d.C..wp`..<.\..
   acee4:	6aba 015d 5db8 7854 b21b e211 226e 8d5c     .j]..]Tx....n"\.
   acef4:	2df2 b819 035b 45ea 6a7c 36ff 69e7 776e     .-..[..E|j.6.inw
   acf04:	d8f9 edea 3147 3bb3 b33b 29f3 c039 67c2     ....G1.;;..)9..g
   acf14:	eb2e f898 856f 7fa1 3a42 929e e616 12d9     ....o...B:......
   acf24:	76bf b4d5 7ff4 8e00 88cd 703b 1792 ce86     .v........;p....
   acf34:	e241 5960 d38b 9c5a efa3 9607 fd10 c39c     A.`Y..Z.........
   acf44:	3a0e d1ab 3c71 3512 1248 a73c e20f 130a     .:..q<.5H.<.....
   acf54:	8e99 2713 f9ea e6e6 3a0a 6f8b 7c28 9d62     ...'.....:.o(|b.
   acf64:	7103 7f51 234a 1af4 8773 a089 a6cd 4ff9     .qQ.J#..s......O
   acf74:	bd6f ea96 bee2 0325 4742 56c9 09c2 9424     o.....%.BG.V..$.
   acf84:	c276 7714 263d 1b98 5171 dc44 8782 e111     v..w=&..qQD.....
   acf94:	d53c bd0c 45ac 5d1c 8ce3 5084 fe04 c204     <....E.]...P....
   acfa4:	d723 5ef3 6358 9b78 417a 740f 8594 f0b9     #..^Xcx.zA.t....
   acfb4:	0566 a9fd 2bcb 2bfa 3983 b3d2 26a2 e14b     f....+.+.9...&K.
   acfc4:	05d1 3d0b 2ca1 cd33 0957 e4bd 05c9 95fd     ...=.,3.W.......
   acfd4:	51c1 11f0 c9e3 c4ab d593 29e9 d850 82f8     .Q.........)P...
   acfe4:	1b67 0876 06ff 4b54 5b55 5009 fadc 99aa     g.v...TKU[.P....
   acff4:	4c78 2fd3 8c58 3584 ca98 984f e0b7 e78a     xL./X..5..O.....
   ad004:	2f34 264a 2984 3c5a 02c4 2e21 0745 deb8     4/J&.)Z<..!.E...
   ad014:	98ae 9ea6 1921 b44e 8530 9021 0b42 1a3d     ....!.N.0.!.B.=.
   ad024:	2217 a5fc 81c4 d017 4c6a 57f3 0aa0 5000     ."......jL.W...P
   ad034:	f0c1 cab0 4159 0665 afcf 57e2 fbf0 873c     ....YAe....W..<.
   ad044:	b4f7 c2be 785c 4439 d1ad 2043 8858 0984     ....\x9D..C X...
   ad054:	9c52 2814 6b4f 4dd4 c27a acd1 0996 8f0f     R..(Ok.Mz.......
   ad064:	1696 ae52 24d2 d19b 4a8c 1241 947e 388f     ..R..$...JA.~..8
   ad074:	3382 289d 031f 8fa1 b095 a35c e5e0 56b2     .3.(......\....V
   ad084:	dc46 8612 15cc 84b3 8b23 5d06 0c8b 09a1     F.......#..]....
   ad094:	f775 a8e7 4f74 eb35 bb37 ea72 3f07 c207     u...tO5.7.r..?..
   ad0a4:	2376 038f af32 6658 3ab9 e601 8a99 47c8     v#..2.Xf.:.....G
   ad0b4:	2c4c f3d3 e6b8 d416 2533 3517 4939 1f96     L,......3%.59I..
   ad0c4:	1bd4 0ece a786 6ae5 23e4 d1ca 94c8 12bf     .......j.#......
   ad0d4:	ddcc c3c1 5149 f064 ce27 c2af ad6a d42f     ....IQd.'...j./.
   ad0e4:	e856 23e0 e20b d5a3 9471 8fc1 4562 3462     V..#....q...bEb4
   ad0f4:	386d a3a8 a83b f1f4 ced5 d197 78fe 727b     m8..;........x{r
   ad104:	3ff3 79fe 477c 847c 7fd4 37fe 0a5f 6ff3     .?.y|G|....7_..o
   ad114:	d9d2 990d df99 7164 ba7e 4f8a 1b93 cd9c     ......dq~..O....
   ad124:	fc1b 031c 941c e837 fa45 8e06 1bd1 b274     ......7.E.....t.
   ad134:	5651 0dc9 92dd 9cde 0c00 9cde d317 e4f8     QV..............
   ad144:	b4e6 978c c08b 23bb d6de e791 5d1f 8faf     .......#.....]..
   ad154:	4f03 d61c 35d1 36ae c23a 8391 2780 24b5     .O...5.6:....'.$
   ad164:	1ee4 c787 4f08 8fac 4f81 c212 a9f0 8ac1     .....O...O......
   ad174:	e886 e369 5403 f84a 242e 9439 770c cf4c     ..i..TJ..$9..wL.
   ad184:	3ef2 d38c f4a7 2d77 d45e 16f2 eb86 abe5     .>....w-^.......
   ad194:	9918 39a2 4029 8a67 3a91 0251 6bfe 1012     ...9)@g..:Q..k..
   ad1a4:	a5be daa6 a22e 95ae 0370 84f6 81d2 4908     ........p......I
   ad1b4:	054d 3e9b 163a c592 f90c 019e 55dd 820e     M..>:........U..
   ad1c4:	79fe 602d 2758 1919 0082 2157 4df4 984c     .y-`X'....W!.ML.
   ad1d4:	5b9b 2119 c617 db4e b9d9 6f3e 5364 8d91     .[.!..N...>odS..
   ad1e4:	c861 eb03 c27e 8dbe e96a 35c5 ab2e fb6a     a...~...j..5..j.
   ad1f4:	cab2 46fe a0de 8868 4f0d e47d a3b0 322a     ...F..h..O}...*2
   ad204:	a29f 7dae 25c6 dd69 24bc 5725 d642 87b5     ...}.%i..$%WB...
   ad214:	9e15 9519 5850 c8a9 0852 8edb a92a 408e     ....PX..R...*..@
   ad224:	32c6 d1be 50f5 c621 93d0 ab9a a63e 7af8     .2...P!.....>..z
   ad234:	1aa9 4511 7acb 8792 7a96 6450 a08e f86d     ...E.z...zPd..m.
   ad244:	1e88 7b85 74f0 7c8a bf6f 4f4f 6593 9c8d     ...{.t.|o.OO.e..
   ad254:	74c1 4c96 313d b723 7c25 2704 0e81 6d2a     .t.L=1#.%|.'..*m
   ad264:	6a79 2c12 b070 2554 caa2 ed68 cfa0 918d     yj.,p.T%..h.....
   ad274:	79f3 523b 7546 835b 7491 86b4 9c91 3ea5     .y;RFu[..t.....>
   ad284:	00c2 cf8d 736a 35cb b7f7 1b89 d3c5 fdee     ....js.5........
   ad294:	1dc9 2ea5 efac b3cd b6a8 3baf 1946 3beb     ...........;F..;
   ad2a4:	0c64 2baf 7afa 9194 f4d2 8a2a 824e 8a38     d..+.z....*.N.8.
   ad2b4:	2ae9 eb49 ac20 a3b6 a4df 8326 97ba e58b     .*I. .....&.....
   ad2c4:	1535 bc91 4568 0aa7 d601 e5af 9bb5 a3ce     5...hE..........
   ad2d4:	60cb 7506 a5bf d00b a708 b732 4798 1469     .`.u......2..Gi.
   ad2e4:	474d 5286 2bc6 4826 c499 301a fe7a 2546     MG.R.+&H...0z.F%
   ad2f4:	e131 5024 7999 1bd1 0386 a1be 1241 0a70     1.$P.y......A.p.
   ad304:	421d 327a 6ab5 1f34 66ed 61ce 6591 ffd7     .Bz2.j4..f.a.e..
   ad314:	e6b5 00cf a078 8192 e5b9 98c1 d8ab 9ba5     ....x...........
   ad324:	399b 7a6c debc 159c 3670 4c24 bd9c 4ca5     .9lz....p6$L...L
   ad334:	14d0 076d cbf8 ac18 cfe7 8327 1870 7684     ..m.......'.p..v
   ad344:	301f bce9 d376 fcee 9fd3 7884 dffa e3c8     .0..v......x....
   ad354:	b03e 61c0 3d02 fbd9 1cea db5d d991 995e     >..a.=....]...^.
   ad364:	394e b610 5e17 3daf 8841 80e7 0537 65c7     N9...^.=A...7..e
   ad374:	a938 6439 77b8 2be7 33f7 bbc6 1fd7 babf     8.9d.w.+.3......
   ad384:	c9e3 0c28 cdf4 052a e61f 0645 7b73 9252     ..(...*...E.s{R.
   ad394:	db21 c922 da60 1908 2642 e042 e85e b928     !.".`...B&B.^.(.
   ad3a4:	4e32 2f27 405a e28f 3d1b d49f afe8 3d04     2N'/Z@...=.....=
   ad3b4:	9d06 a3a2 f2a0 5519 7be4 d217 0809 6e60     .......U.{....`n
   ad3c4:	9aa7 473b dfef 7c5f ca81 5a7c f69f cbf9     ..;G.._|..|Z....
   ad3d4:	3ea7 7039 63bd b467 754b 4e66 67a6 959f     .>9p.cg.KufN.g..
   ad3e4:	b519 601b e22f ff6e 06ec 32ec fd97 a57f     ...`/.n....2....
   ad3f4:	bfd4 3bd4 759c cf21 e6b8 e3dc fa21 6e89     ...;.u!.....!..n
   ad404:	67fe 678a deb3 e5ad 5601 6a3a 85a0 6c30     .g.g.....V:j..0l
   ad414:	6749 f369 53f9 f87d 157b 5541 269e cd79     Igi..S}.{.AU.&y.
   ad424:	f949 8fc7 a4ab 0abc 0988 c8a0 4f4d 2f51     I...........MOQ/
   ad434:	f7d3 29be 1a8a 96c8 f978 6a8f 7beb f5a8     ...)....x..j.{..
   ad444:	d52d 25b4 ccf5 592b 0bce bd46 1a8d d6e0     -..%..+Y..F.....
   ad454:	bd75 1c52 1868 2bb3 5a03 4074 adcb 05e1     u.R.h..+.Zt@....
   ad464:	746e 6bfd f272 ad31 cb0f af38 7252 edce     nt.kr.1...8.Rr..
   ad474:	345d c852 f1a2 f165 9d97 d6a7 e8cf 5e7e     ]4R...e.......~^
   ad484:	b6bc 15bf d14e a2ad b791 58de 218d 7340     ....N......X.!@s
   ad494:	4024 6349 b987 edd5 b488 80eb 3efe 8fca     $@Ic.........>..
   ad4a4:	19e5 0d77 c245 de1a 46d7 2787 9dd9 bbe7     ..w.E....F.'....
   ad4b4:	d9c9 432a 7b1b 17bb db51 2a55 bca9 e453     ..*C.{..Q.U*..S.
   ad4c4:	84b5 0e1d 42ee 602f aa7a c8c6 662d f516     .....B/`z...-f..
   ad4d4:	a4b1 7b95 336a c0b9 2708 2a80 6177 9031     ...{j3...'.*wa1.
   ad4e4:	43a7 6672 44b5 6306 0cd7 1770 6bba 3e74     .Crf.D.c..p..kt>
   ad4f4:	9f2c a955 240a 080a 76d6 df71 4955 4a84     ,.U..$...vq.UI.J
   ad504:	5db5 481f 83f1 d5dc 56ed 64cb 029a d46d     .].H.....V.d..m.
   ad514:	4818 7d74 1802 d09f a6e8 09ee 54e4 714f     .Ht}.........TOq
   ad524:	6eea b5cd 4468 b1fc 38dc 3121 1402 5270     .n..hD...8!1..pR
   ad534:	bb07 c569 3ab3 ebc1 2c68 faf0 0fe4 54f9     ..i..:..h,.....T
   ad544:	9e5a 2cfc 2eb5 9925 fdc0 f6b3 66e5 9f11     Z..,..%......f..
   ad554:	f305 f6a8 b3b9 3773 63c2 f814 7479 ebc4     ......s7.c..yt..
   ad564:	7e27 481a 716f 6938 117e 4b90 bf44 2215     '~.Hoq8i~..KD.."
   ad574:	6a1c 2e56 5333 1874 c08d 3b33 61a4 1c84     .jV.3St...3;.a..
   ad584:	b943 6244 bc94 d373 0e19 2854 6569 e5a9     C.Db..s...T(ie..
   ad594:	6b46 e909 6e5c ce91 9812 ddf9 9019 33ad     Fk..\n.........3
   ad5a4:	f532 894d 4cf2 e92b f046 3b0d c415 36b0     2.M..L+.F..;...6
   ad5b4:	1be8 fb98 54e7 abad 38f5 7652 baab 2db5     .....T...8Rv...-
   ad5c4:	71fa ff7c 75c6 c50d 7166 f71d 1979 6700     .q|..u..fq..y..g
   ad5d4:	a8e4 ac5d 2dbf 64ca 324e 8015 3b98 71ff     ..]..-.dN2...;.q
   ad5e4:	b8f4 7bff ffdc 18cb ec22 e4ec 422a 7f86     ...{...."...*B..
   ad5f4:	f767 7f2b fd12 7a07 3b43 eafe e08b f08e     g.+....zC;......
   ad604:	40bc 51bb f205 6d19 d415 147d 9952 3752     .@.Q...m..}.R.R7
   ad614:	0cb1 c995 7dbe 5f73 8dfa cdf0 4b5d 9281     .....}s_....]K..
   ad624:	761e 8a03 5afa 0c38 8edc f066 ded0 4dcd     .v...Z8...f....M
   ad634:	07d7 8ec1 635d 8cb5 98ad 0070 251c ca85     ....]c....p..%..
   ad644:	ff44 e878 784c 7bcd d3d8 f475 35d1 be3b     D.x.Lx.{..u..5;.
   ad654:	a278 fe88 c471 5873 9e9c 4066 ebd7 8e76     x...q.sX..f@..v.
   ad664:	01ff b414 f70d 0609 8595 6f47 270a 47c5     ..........Go.'.G
   ad674:	a577 1da4 5631 fb01 de3e e5fd 4fe9 9f6f     w...1V..>....Oo.
   ad684:	7ebf 7915 7777 d0f7 c914 0d0e 5b2c 3b6a     .~.yww......,[j;
   ad694:	964a c213 e0ce 4f71 8f41 0ad3 dd79 d899     J.....qOA...y...
   ad6a4:	d50a 17a3 2d28 dcd5 2e97 9a26 4b00 029c     ....(-....&..K..
   ad6b4:	83ec 18ed 9e8d baf2 4d58 c417 a28d 03db     ........XM......
   ad6c4:	547d 07a8 5879 ecec 176c d3bb a8ac 3a10     }T..yX..l......:
   ad6d4:	ddbc 3e3c 893f 3ecb f1fc ad02 9a62 fff8     ..<>?..>....b...
   ad6e4:	9fd8 e7a5 245b 3196 6573 f3e6 f8ce 811f     ....[$.1se......
   ad6f4:	a474 78fe 5e4e e5bc 9932 f389 ff94 aaef     t..xN^..2.......
   ad704:	ff7b 95b1 dca2 a516 6dd9 a2d5 70b8 9d27     {........m...p'.
   ad714:	defc ee76 a536 995b fd9a 8735 a2d1 a63c     ..v.6.[...5...<.
   ad724:	f390 61bf 621b 792b 99b3 f1b5 e17a e4ac     ...a.b+y....z...
   ad734:	e4c7 b30a 0d44 bb7f fc77 0fbb ee6f 6e0d     ....D...w...o..n
   ad744:	1ef6 da04 04ae a2b2 5779 f0a0 b590 75d6     ........yW.....u
   ad754:	f9cb fa28 6e5a 0d7a db15 27e5 2241 108d     ..(.Znz....'A"..
   ad764:	d09a 6143 4827 c76c 3737 cef1 dece c403     ..Ca'Hl.77......
   ad774:	aa9c ca43 ff6e 4681 a8a7 4903 d681 a08b     ..C.n..F...I....
   ad784:	7d3d 1106 d5ca 6b54 6de9 6965 1798 0fb5     =}....Tk.mei....
   ad794:	3c1d c407 2a88 6925 4295 b6f7 a062 23fe     .<...*%i.B..b..#
   ad7a4:	e759 8e3f 02ca 19b7 dc40 b60a af58 fdea     Y.?.....@...X...
   ad7b4:	6c43 34c9 1314 149d 9497 1d4c 74ce 2a08     Cl.4......L..t.*
   ad7c4:	4266 b759 12f1 e7d2 8669 e5d0 b285 c15f     fBY.....i....._.
   ad7d4:	eee8 6b43 3b54 ab3b 00f1 fa7e 717d e06f     ..CkT;;...~.}qo.
   ad7e4:	efa6 9a67 85c9 5eb7 fc4f 158f cd20 8615     ..g....^O... ...
   ad7f4:	ccd0 9376 fd3f 7b55 6bd0 be15 3d13 00d0     ..v.?.U{.k...=..
   ad804:	a1cd 6340 bce4 a545 de70 0f77 a88c 8a2f     ..@c..E.p.w.../.
   ad814:	df1b 02f2 cebe 0261 a8eb f9cb 5dad a56d     ......a......]m.
   ad824:	05e9 61b5 6037 c221 fd95 9978 0ee2 64fb     ...a7`!...x....d
   ad834:	8316 b70d 4ef8 56f7 b63f de80 5d3f d165     .....N.V?...?]e.
   ad844:	e681 94b8 28dc ca9b 3059 70c0 01d1 5d12     .....(..Y0.p...]
   ad854:	ef1b a05f 3e1c 2c75 9de9 f149 f5b0 53e9     .._..>u,..I....S
   ad864:	27c7 87b8 14f0 d277 8704 cdc4 3b6f 528c     .'....w.....o;.R
   ad874:	8c38 757c b90c 82c8 c1bb 17f8 c61b a4a0     8.|u............
   ad884:	b3ad b723 a5dd 7a02 6a6a 4b48 ea87 1ab2     ..#....zjjHK....
   ad894:	a974 d06e 2af8 7b93 6152 9c6a 80df 55ee     t.n..*.{Raj....U
   ad8a4:	396a 4d12 a03c 3c12 ef3a d26d 250f 960b     j9.M<..<:.m..%..
   ad8b4:	256e c415 26b6 6004 00cd 1aa1 c3fc a55e     n%...&.`......^.
   ad8c4:	142c 88c5 93c0 a6ee 9442 e084 cfdd 00d1     ,.......B.......
   ad8d4:	f203 d0b6 cd3d e372 48a0 12d7 aa71 5a9d     ....=.r..H..q..Z
   ad8e4:	0740 ee8a 4093 ebd9 6200 a0e4 d460 542c     @....@...b..`.,T
   ad8f4:	5be6 84d3 465d 17e5 4337 308c a927 9b1b     .[..]F..7C.0'...
   ad904:	3033 caed 036b 687d 6750 7d5b 6545 b5fd     30..k.}hPg[}Ee..
   ad914:	8cb3 89aa b6c8 4358 a009 3465 5c1b 2e17     ......XC..e4.\..
   ad924:	a8c5 5226 dfce cb78 d55d 482d 59d0 0b3a     ..&R..x.].-H.Y:.
   ad934:	b1c2 cf12 cd66 78c4 d7e2 5868 cc5d c0e7     ....f..x..hX]...
   ad944:	fca8 ce9a d7c8 c9bf 6298 36d8 f3a0 2a9c     .........b.6...*
   ad954:	f1e7 2b8c 8b54 f6ee 23c5 3aeb 7a6b ba2d     ...+T....#.:kz-.
   ad964:	abae 080f 3e60 906f 0342 3588 0c1e 8f37     ....`>o.B..5..7.
   ad974:	dc42 5e2e 26c8 b87f a35b 5278 e06c 80ef     B..^.&..[.xRl...
   ad984:	e84b 18e2 e1fd 01fd 1b9a 7922 8ce0 0713     K........."y....
   ad994:	1ebf bb29 4023 b0cb 23c2 40f5 3e66 e8fc     ..).#@...#.@f>..
   ad9a4:	fb20 24dc 1a7f 63cf e53d 50a7 563c f065      ..$...c=..P<Ve.
   ad9b4:	8365 4562 43a0 e98c 6224 6ce0 9ac4 fbb6     e.bE.C..$b.l....
   ad9c4:	bc91 d08b 2a20 e159 823c cf64 c961 a15a     .... *Y.<.d.a.Z.
   ad9d4:	2cf0 72b3 e319 e5a5 7c68 d9b2 78f7 c1b8     .,.r....h|...x..
   ad9e4:	b8cb 2e63 aace 8077 a1e4 acbf ce3f 1d96     ..c...w.....?...
   ad9f4:	dd12 7a75 6236 c5da e289 ce90 1feb 2b92     ..uz6b.........+
   ada04:	43bc 0120 e5bf 17c8 27af c664 23f3 f459     .C ......'d..#Y.
   ada14:	6278 c31e 9333 1e6a dbc3 761a 701b db0c     xb..3.j....v.p..
   ada24:	4631 7249 7373 632d 9380 3e05 3f49 3030     1FIrss-c...>I?00
   ada34:	d6c3 9041 01c0 4131 4371 8078 d38e c407     ..A...1AqCx.....
   ada44:	1dc6 8e46 71e6 9aec 11eb 1352 d015 4755     ..F..q....R...UG
   ada54:	62c7 ef25 89e4 bbc6 0344 1e2b d1db b531     .b%.....D.+...1.
   ada64:	1382 5ab9 2cc2 76ae a676 1bd0 6ff2 b98d     ...Z.,.vv....o..
   ada74:	5760 460d 3ef1 3096 c32e 7263 11c0 e261     `W.F.>.0..cr..a.
   ada84:	7c51 b62c bcc9 8313 fc87 b3b9 7073 0f44     Q|,.........spD.
   ada94:	dbc7 f491 74a6 b373 e7c2 fa98 9d08 6b36     .....ts.......6k
   adaa4:	1db6 90ad 437d 5973 835a 777c 975a 3c19     ....}CsYZ.|wZ..<
   adab4:	6612 60a8 fb13 8701 0486 2452 8ed8 8a22     .f.`......R$..".
   adac4:	907e d3ce aca4 9f5a 1625 479f 2baa 3f11     ~.....Z.%..G.+.?
   adad4:	47b1 a8a7 c918 4e4e b38b 2293 ff42 73dc     .G....NN..."B..s
   adae4:	8668 25c6 66bd 18c4 2281 fd63 4d47 6fcf     h..%.f..."c.GM.o
   adaf4:	8e65 ad99 2f02 7c13 00c7 8e91 e487 0a51     e..../.|......Q.
   adb04:	4f89 cce3 12fd 9c67 072e 3e6a 0260 917d     .O....g...j>`.}.
   adb14:	61b3 b0be b135 07ed 3321 a401 103f 7611     .a..5...!3..?..v
   adb24:	fb00 d913 1f2b b963 59f0 737d 3303 4e58     ....+.c..Y}s.3XN
   adb34:	aa9f 5f03 e860 eda1 ca21 48cd 9387 cd6e     ..._`...!..H..n.
   adb44:	111a da0e 064c 74a1 c23b 9b41 98eb f074     ....L..t;.A...t.
   adb54:	6121 8cdd e05e e55a f502 d525 b789 b38d     !a..^.Z...%.....
   adb64:	c93c a857 12cd 9a25 90fd 6121 d370 d08f     <.W...%...!ap...
   adb74:	5782 6b03 ef22 3e80 9ca2 f267 fa11 7e17     .W.k"..>..g....~
   adb84:	2290 9825 1842 4527 4846 751c 5b1e 887b     ."%.B.'EFH.u.[{.
   adb94:	8996 be95 fe68 31f9 54ce 4d22 3c3d ec36     ....h..1.T"M=<6.
   adba4:	1b53 70c7 d16c 168c 3f02 d404 ebdf 001d     S..pl....?......
   adbb4:	0980 5dc7 69fd 4e20 176d 85f5 2618 5d77     ...].i Nm....&w]
   adbc4:	6e6b 2fa8 98c3 1846 4b11 760e 1d9b 7d27     kn./..F..K.v..'}
   adbd4:	5984 abc0 b74b c0fc f2f8 4559 22d8 d9ec     .Y..K.....YE."..
   adbe4:	1d95 7e01 70c5 8d3b bd56 c921 a4c4 a66c     ...~.p;.V.!...l.
   adbf4:	630a e7a4 7066 c3ba e397 ee40 60d2 c0b4     .c..fp....@..`..
   adc04:	e814 e038 4492 ecac cdde 3b2c c63c 9134     ..8..D....,;<.4.
   adc14:	21c4 4479 9a2e 64a2 0472 c70f f2a1 0939     .!yD...dr.....9.
   adc24:	9d2f 0761 10e0 4a3c c58f 51c9 4c79 41fe     /.a...<J...QyL.A
   adc34:	81f0 2122 18db 5e02 54af 7c06 c380 d9d7     .."!...^.T.|....
   adc44:	8163 9298 2347 5c99 d112 7c87 0a56 bfd3     c...G#.\...|V...
   adc54:	b29d f54d b832 465e 46d7 1c9a 4e23 0f3d     ..M.2.^F.F..#N=.
   adc64:	f1e2 fba3 fbe8 6f74 4c0c 79ef 7ef3 2639     ......to.L.y.~9&
   adc74:	493f e747 e180 a38e 5838 d1a7 28f2 9e3f     ?IG.....8X...(?.
   adc84:	3e28 0bc5 374d 46d7 562d 469d 7629 8949     (>..M7.F-V.F)vI.
   adc94:	fc44 d234 02c5 0d71 618f 3429 0b2a 2781     D.4...q..a)4*..'
   adca4:	90e2 a9a6 4163 596b 5f1c 251c 683d 97b0     ....cAkY._.%=h..
   adcb4:	231f 113d 8625 46d0 3daf 82a7 b1c2 9f68     .#=.%..F.=....h.
   adcc4:	26a3 cb42 5f70 089b e423 7416 8718 3f30     .&B.p_..#..t..0?
   adcd4:	67d2 e5ed 8e51 ecbb 5238 370f 7037 c456     .g..Q...8R.77pV.
   adce4:	bd3e 3500 fbaa 9828 cd8a 8025 09ac 522e     >..5..(...%....R
   adcf4:	c153 3951 a4f1 207f 27e8 852e ec77 4f5f     S.Q9... .'..w._O
   add04:	5e25 6b0a b46b ad76 dc72 5aaa eb00 613f     %^.kk.v.r..Z..?a
   add14:	0866 8765 20a9 1d54 2826 24de 34e5 2a71     f.e.. T.&(.$.4q*
   add24:	a3ce 87eb 351c f8d1 accc cf95 c4cc ccf8     .....5..........
   add34:	8cac cccf f6a9 8999 9b1b 651c e34e 9565     ...........eN.e.
   add44:	4769 8999 9472 1959 9947 cb80 9592 9474     iG..r.Y.G.....t.
   add54:	cf89 ed33 3328 8e51 1732 51da a666 651d     ..3.(3Q.2..Qf..e
   add64:	a4ae cca3 38d2 e4ca e892 3319 2bcd 8b76     .....8.....3.+v.
   add74:	4b39 f632 4982 85f8 5fbc d3f2 dede f93d     9K2..I..._....=.
   add84:	16b8 d167 70f5 35f0 8eaa 57b2 9ecc 15e5     ..g..p.5...W....
   add94:	2873 5c1d a50e cb83 87ff 621c c5ae 7455     s(.\.......b..Ut
   adda4:	fded 8f0f 7b32 f0db 0877 ff7f fc1b 83dd     ....2{..w.......
   addb4:	ffbf 7f01 7aef 8be2 bbd0 6f07 c25f 7ddb     .....z.....o_..}
   addc4:	fbf8 f84f 35fb 45fc fed5 f007 2bf7 fbf8     ..O..5.E.....+..
   addd4:	fe10 c2a2 23fa a73c 2fe1 abf0 a81f 1e63     .....#<../....c.
   adde4:	3502 1874 697e ff00 fef0 8e41 bd38 f27d     .5t.~i....A.8.}.
   addf4:	26e4 b1bc 1d47 26f7 751e bbdc a8f1 6ba3     .&..G..&.u.....k
   ade04:	1271 175d be4b a232 4555 0c2d fbc0 226a     q.].K.2.UE-...j"
   ade14:	32b5 829e 5809 18e3 30b9 6b5a bf80 cef0     .2...X...0Zk....
   ade24:	78cb 937a 29be f066 00b3 003e c4fe d3da     .xz..)f...>.....
   ade34:	7c4d 9e9e b5e2 2efc b26c 251a c11f 2b84     M|......l..%...+
   ade44:	d096 16b4 8097 c44e fe05 e01c 1e0f e23d     ......N.......=.
   ade54:	fe2d 2a1c 2dba 868f bda3 38c1 90a7 e758     -..*.-.....8..X.
   ade64:	b047 b856 bd7b 6c39 f962 307d 347a d48e     G.V.{.9lb.}0z4..
   ade74:	9cf7 76dc 23e6 8224 1e0d d401 542b 030a     ...v.#$.....+T..
   ade84:	9592 c080 e2b6 ff6d 2f81 3a73 2b42 7626     ......m../s:B+&v
   ade94:	2f5c 118a 4933 3842 5a21 8631 28ad 0b80     \/..3IB8!Z1..(..
   adea4:	978a 354a b1d8 30fb 587a 15ab f27d d87d     ..J5...0zX..}.}.
   adeb4:	6fc5 627e c133 0a6b 2780 e119 62ee b30a     .o~b3.k..'...b..
   adec4:	80d5 cde2 0fb3 1345 0975 3306 d491 711d     ......E.u..3...q
   aded4:	ccae 701a 9b3e ea12 ac6c dc3f b447 43d8     ...p>...l.?.G..C
   adee4:	13ae 3738 af74 43da 6934 7e1c 516c 1a4c     ..87t..C4i.~lQL.
   adef4:	0bbc e485 9009 de13 57f3 7e6f 243e 8c6d     .........Wo~>$m.
   adf04:	3e3a 12c5 1640 7dbc e2fa 41e9 f133 e9f0     :>..@..}...A3...
   adf14:	876f 7f8f fa7a 4dd8 8bc6 039e b4d4 29ca     o...z..M.......)
   adf24:	1680 624a 42d7 2853 0edd e1c2 92e8 3c94     ..Jb.BS(.......<
   adf34:	7286 56bf c562 d001 12f0 78b6 52cd cd7b     .r.Vb......x.R{.
   adf44:	8c52 48d0 3804 e610 e32f 817a 80b1 4afd     R..H.8../.z....J
   adf54:	3a50 5421 01e9 96f2 13b2 3993 8542 7f28     P:!T.......9B.(.
   adf64:	3a85 f56a fa91 1c7e 450d d3e6 c29b 70ec     .:j...~..E.....p
   adf74:	f140 a23b a16a 0632 0841 fd94 596d 98e1     @.;.j.2.A...mY..
   adf84:	ec8e 32e3 9497 5bdc 4fc1 d1db cde1 94cd     ...2...[.O......
   adf94:	af22 a500 a05e f65a e45b f44d 5046 d645     "...^.Z.[.M.FPE.
   adfa4:	2be8 a5f7 b55a 83e8 2cf8 6b5f d9ea 00ff     .+..Z....,_k....
   adfb4:	2c5c c0fb 9a16 16ad baa6 9d0e b5bc 4f60     \,............`O
   adfc4:	0631 2cd6 c04e b54a dae3 19d0 76ae d012     1..,N.J......v..
   adfd4:	083c 2a59 001d 769d 77ce 17a4 4a67 93c9     <.Y*...v.w..gJ..
   adfe4:	749f 68e1 7167 c882 1b5b 303a 9acb e6db     .t.hgq..[.:0....
   adff4:	f55c 8611 3ced 4ed6 f060 9c6a 8902 6b25     \....<.N`.j...%k
   ae004:	0f5f 1031 eddb da41 1f29 3464 be48 bd9c     _.1...A.).d4H...
   ae014:	955e 07d9 c9d4 7c04 2f1c 3bd3 3ade 6e10     ^......|./.;.:.n
   ae024:	bc0e aadb 1855 e4ed 48d6 b66e b7c3 762f     ....U....Hn.../v
   ae034:	3fe3 6000 b0a5 cdec b7eb 8087 cadc a38c     .?.`............
   ae044:	abd0 7b46 4089 4601 fdf8 d7db a4af 9d6f     ..F{.@.F......o.
   ae054:	7e74 c085 ad51 53a6 a480 a730 ac0c c928     t~..Q..S..0...(.
   ae064:	223a 7571 4f95 3a31 94ef 21b7 6b7f b2a9     :"qu.O1:...!.k..
   ae074:	fca0 d44d f896 4cad 3f4e 21a0 644b e306     ..M....LN?.!Kd..
   ae084:	f9c3 b417 5d32 2994 d38c b5ce c8d7 9675     ....2].)......u.
   ae094:	b59c baab 91db 5da9 bdd5 ae46 9165 4e65     .......]..F.e.eN
   ae0a4:	fb86 66cc 592e 5cc6 fbff 87da 39a1 da8b     ...f.Y.\.....9..
   ae0b4:	59b0 0b6c 6111 5065 b8e3 92c8 59dd 0e8a     .Yl..aeP.....Y..
   ae0c4:	98cd 1adf bfa1 3af6 b9a2 c65e 9565 0450     .......:..^.e.P.
   ae0d4:	6ab6 5909 5c29 0a01 2b10 12e0 978d 3e76     .j.Y)\...+....v>
   ae0e4:	ae4e ad49 fbd4 44a6 c425 552d 0b62 2205     N.I....D%.-Ub.."
   ae0f4:	555b 9e52 71e3 ab4c 56e8 5827 e689 38db     [UR..qL..V'X...8
   ae104:	92cd 4fd9 c3f2 cbd3 4e84 0f79 8a60 6494     ...O.....Ny.`..d
   ae114:	0eca 12cf 0305 6b12 61c6 f310 cd3a 722a     .......k.a..:.*r
   ae124:	8508 c762 4bd7 23df edc1 a935 4bb3 f140     ..b..K.#..5..K@.
   ae134:	eb42 5aa6 94ea 6208 46ad e552 642d fa72     B..Z...b.FR.-dr.
   ae144:	5d1a 8630 d36c aab9 8d04 bd4d b751 2869     .]0.l.....M.Q.i(
   ae154:	33b5 b594 110c 5dc7 d82e ccc5 91a6 4289     .3.....].......B
   ae164:	9a5f e8fb 497c 8eb9 2582 fd85 c3ea f8fe     _...|I...%......
   ae174:	ac33 01d7 b779 b347 9f01 87a3 0ded a806     3...y.G.........
   ae184:	c908 311d 00ce 7d63 4a6d 8efd 7e9d adc7     ...1..c}mJ...~..
   ae194:	c77e 7e8d 652b 3594 b806 c13d 7d88 9f82     ~..~+e.5..=..}..
   ae1a4:	e210 643e 9e05 51e3 cf5b 9ae3 c9fc b685     ..>d...Q[.......
   ae1b4:	511c 725d 0668 439f a2af b35b c5b7 9caa     .Q]rh..C..[.....
   ae1c4:	fba2 f56f 07e8 bd21 cfb0 80f2 927c a714     ..o...!.....|...
   ae1d4:	6ed5 5f19 8ca0 3c90 267b 2fbb f5a8 39a7     .n._...<{&./...9
   ae1e4:	a580 9d7f a59c 1035 4076 4bb3 2b85 cea5     ......5.v@.K.+..
   ae1f4:	0b5c 3d0c 7801 5960 05a6 da90 4918 f4a0     \..=.x`Y.....I..
   ae204:	acd6 3b4e fe2f d8df ec47 f717 22f0 f32e     ..N;/...G...."..
   ae214:	37ff 10f6 85fb a0dd 024e 088e 513b dab8     .7......N...;Q..
   ae224:	ac79 be0f 5dc7 1ca7 b578 c161 9c11 55b4     y....]..x.a....U
   ae234:	c1c7 8d70 7917 9761 1c08 c163 0675 38b5     ..p..ya...c.u..8
   ae244:	804d c5d1 45ed 68f2 8a8c 81fa bae0 dcad     M....E.h........
   ae254:	5285 a4a5 7c4c d5d6 0d83 8e85 95a6 3792     .R..L|.........7
   ae264:	22cc 84d5 3d65 4698 230a acdf b8c9 b874     ."..e=.F.#....t.
   ae274:	aead 4272 6071 5d64 6dc8 d697 3fe8 f244     ..rBq`d].m...?D.
   ae284:	9501 cb01 5a6a d294 180f 21a6 8712 9da1     ....jZ.....!....
   ae294:	b086 e0eb 8034 6b3f 13eb 101e 7cbb d840     ....4.?k.....|@.
   ae2a4:	e10a 1fc6 11d9 b1bc eac3 6ca6 96ad 0898     ...........l....
   ae2b4:	3e8f 61a9 dff8 2201 f490 c7fa d016 5ba2     .>.a...".......[
   ae2c4:	9dff 22e2 63fe 5aab ab14 b66c 9275 c56c     ...".c.Z..l.u.l.
   ae2d4:	b65b ceb3 f772 07c3 833a 7c3e 6ed8 9a06     [...r...:.>|.n..
   ae2e4:	a8ec 871b 54ee 6f96 58c5 0b68 9801 adaa     .....T.o.Xh.....
   ae2f4:	e8ac 2cb1 2e60 d21b d6e5 ca20 f8a3 5ff8     ...,`..... ...._
   ae304:	ab6e a101 d9f6 a7a0 0f15 bf09 ef40 f28d     n...........@...
   ae314:	f620 7524 ace6 9d00 7fe3 017b 3f80 8d68      .$u......{..?h.
   ae324:	3fe7 28b5 189f 5910 5ae0 61e3 b3e7 e18d     .?.(...Y.Z.a....
   ae334:	a800 87b5 2263 7f28 2c3e 4541 bf7f aa9b     ....c"(.>,AE....
   ae344:	ea75 8a66 fb1c eca9 d966 e6ee 08bf 9ff7     u.f.....f.......
   ae354:	ed39 430c e734 f2ff 1c50 d210 6164 ce6b     9..C4...P...dak.
   ae364:	7e89 2f73 2574 0f95 8e6c 469f 07f7 f881     .~s/t%..l..F....
   ae374:	71ac 7fe4 a413 d6c4 3f7f ab8b f88f ec97     .q.......?......
   ae384:	36b0 b28c 786b 67d8 5e25 cd1c 920a b631     .6..kx.g%^....1.
   ae394:	0880 f089 1fb4 470d 3d64 fbe9 4ec5 a01e     .......Gd=...N..
   ae3a4:	d3df d41d 4c21 83c7 aaee 773d 2e76 b4e2     ....!L....=wv...
   ae3b4:	cd6e aa0e d08c 150c 4330 3445 a01c 0ad9     n.......0CE4....
   ae3c4:	c63c c9ff eac9 8b48 f3ff 6813 e609 812d     <.....H....h..-.
   ae3d4:	5e3e b680 8f47 95c3 9b13 986d ed53 1612     >^..G.....m.S...
   ae3e4:	56a6 19f8 66cc 93c4 564a f11f 2904 7457     .V...f..JV...)Wt
   ae3f4:	99ed ecfa b85a f693 f225 ead6 2558 3c0a     ....Z...%...X%.<
   ae404:	0bc8 f933 fe92 c0ff 1047 401d f1f6 7d63     ..3.....G..@..c}
   ae414:	05de 196c 386d dbfe 1547 fe9f d5dd 9f94     ..l.m8..G.......
   ae424:	0d55 c3cf 5aa6 ddca 722e ab74 2e7b d437     U....Z...rt.{.7.
   ae434:	e9f0 e8e1 2dfd 1989 b164 87c4 e706 ec9c     .....-..d.......
   ae444:	d926 4587 8282 a8df 5693 dd61 6789 0394     &..E.....Va..g..
   ae454:	f8ea 79a2 8e6d 57b8 202e ddd3 96bc 1468     ...ym..W. ....h.
   ae464:	c69b 1a19 397b e0ba f5fc b30b 51d4 7bee     ....{9.......Q.{
   ae474:	21ff e0dd 8bf6 56e5 8cb5 6273 390e 1ce7     .!.....V..sb.9..
   ae484:	25b6 8bde 2bd6 a0f4 93a5 3ecf a87e e013     .%...+.....>~...
   ae494:	6e2c d465 a34b 983a bb04 fa8b 332c 42de     ,ne.K.:.....,3.B
   ae4a4:	7dd1 19f4 49ca b631 1975 4dac 18d5 eafb     .}...I1.u..M....
   ae4b4:	38b0 d2c8 49e5 9711 a733 1905 0c77 88a8     .8...I..3...w...
   ae4c4:	25b3 4b10 1807 be64 b62e 2aa6 b873 a185     .%.K..d....*s...
   ae4d4:	7aae 6207 064b 4ac2 3eac 635b 17b6 66df     .z.bK..J.>[c...f
   ae4e4:	8f62 263a d448 66c7 ac3a 1e74 6d50 4035     b.:&H..f:.t.Pm5@
   ae4f4:	6573 822f 7935 ab5d 9fc0 48bf e5f3 c6aa     se/.5y]....H....
   ae504:	a065 ff87 a540 64ca 57d6 a572 b5aa 5f18     e...@..d.Wr...._
   ae514:	b920 cb4d ef86 d67d eeee 6153 d9af a01b      .M...}...Sa....
   ae524:	63e5 68d7 aba1 d671 9968 902e f1eb 7a1a     .c.h..q.h......z
   ae534:	6d1d d16d 5d0e 350f c087 f839 7f5e 3fc3     .mm..].5..9.^..?
   ae544:	6b4f cb7d 66cb c3ee 5ec8 d280 7810 4578     Ok}..f...^...xxE
   ae554:	1838 e061 e2f7 5478 7af4 dd4a 038a 5c36     8.a...xT.zJ...6\
   ae564:	d963 6530 3ff6 5e25 1d79 628c 6154 48fd     c.0e.?%^y..bTa.H
   ae574:	0104 9580 e533 3dc8 4310 9313 d4d2 7d2d     ....3..=.C....-}
   ae584:	4f6e 4f38 a912 f8cc 19ad e2ae a4f3 e243     nO8O..........C.
   ae594:	dd87 26fc 4e2b a610 2e2c 58e1 895e acb5     ...&+N..,..X^...
   ae5a4:	a0c1 f6f7 d444 b02c 7877 ab15 0fe9 1c1f     ....D.,.wx......
   ae5b4:	2976 466a 8044 1013 3fce 5951 9b12 e7a6     v)jFD....?QY....
   ae5c4:	c8ed 46f3 bf75 0a3f 5ef2 6894 a69e e171     ...Fu.?..^.h..q.
   ae5d4:	d0ae 8510 5791 bcc4 62f3 a29e 0e88 433f     .....W...b....?C
   ae5e4:	afe3 f2f9 da18 8761 dad4 fcc1 e7b4 ed6d     ......a.......m.
   ae5f4:	eeee d16e 6c07 58c7 1aa3 944e b368 5856     ..n..l.X..N.h.VX
   ae604:	290d b4da 6d1a 1632 d3d7 e45e 791d 8e1a     .)...m2...^..y..
   ae614:	00e6 7345 a6fb 1e62 cd24 5b4b e9d4 a1f0     ..Es..b.$.K[....
   ae624:	3f9c d09f 92b5 f417 f260 cd38 f3bb 96d5     .?......`.8.....
   ae634:	9bd7 9743 babf 4683 bdf7 0328 ad62 27a4     ..C....F..(.b..'
   ae644:	ed98 39a3 795d 87f4 eca2 e50d 6ba4 372c     ...9]y.......k,7
   ae654:	c5ed ca3d 1fdd 3d06 d8ef 635b d77d 48de     ..=....=..[c}..H
   ae664:	2e46 7d32 9bc4 e4e5 7e96 26cd de1e 6d6d     F.2}.....~.&..mm
   ae674:	c751 2e9c c760 e842 86e0 60ae 9bf0 dd0d     Q...`.B....`....
   ae684:	eb59 e80b 66a6 3269 f699 e1fe a3fd 2d67     Y....fi2......g-
   ae694:	d007 c347 d041 aba3 0eb6 3493 612c 87a5     ..G.A......4,a..
   ae6a4:	76d3 0359 ddbc eba0 a31c 3a39 bf7c 08de     .vY.......9:|...
   ae6b4:	98ef b777 678c 25e9 0d56 b3cf 5964 e02f     ..w..g.%V...dY/.
   ae6c4:	6bf9 1431 f8a4 6406 bfda 7ea1 9e6b 13c1     .k1....d...~k...
   ae6d4:	dc46 ff64 97be 1cfa 5f16 dc08 8fb9 c62b     F.d......_....+.
   ae6e4:	904a c116 a47f b54a bcdd a95f bf77 8b7b     J.....J..._.w.{.
   ae6f4:	a0a6 4328 bfa5 744a 7d7d 5f6a 2531 add6     ..(C..Jt}}j_1%..
   ae704:	5a56 ab7d 85c7 68b2 08c8 1207 a8b9 349e     VZ}....h.......4
   ae714:	5812 8e4f e4b4 5542 11bf 22dd d49e e819     .XO...BU..."....
   ae724:	733c b5ae a612 2400 1cc2 c361 69af e8a6     <s.....$..a..i..
   ae734:	0412 614d 1fc9 1a4f 8f91 2063 52f6 a03c     ..Ma..O...c .R<.
   ae744:	5452 c8f6 ff49 4696 708c 2058 a60c bb41     RT..I..F.pX ..A.
   ae754:	95eb 69ec 8c71 98d0 dfc2 91a8 756e 3f10     ...iq.......nu.?
   ae764:	07a3 7371 37ce 5407 0339 c3a2 c85f 40c9     ..qs.7.T9..._..@
   ae774:	b20a 8fd2 4864 82a9 467d 0d7a dcf4 894b     ....dH..}Fz...K.
   ae784:	642b 8c65 c39a 8629 b22a ecf1 9e75 a15d     +de...).*...u.].
   ae794:	9eec c365 6e52 79ec 8428 a792 07c3 943a     ..e.Rn.y(.....:.
   ae7a4:	9c3b 9027 9f21 c9ad b98d b613 fa0b f016     ;.'.!...........
   ae7b4:	4ffd 2af4 4fac 7870 87ba 05ac eac5 c3a0     .O.*.Opx........
   ae7c4:	579c afe4 8a21 2d4c 4fbb bf5e 4a7a 6b3a     .W..!.L-.O^.zJ:k
   ae7d4:	e496 14c7 2941 1a39 219c 6b11 e7b5 0bce     ....A)9..!.k....
   ae7e4:	600a f323 71ba f072 01b8 2872 169f 7433     .`#..qr...r(..3t
   ae7f4:	816b 7193 a286 e55e 0280 5b3f d3f3 eb7d     k..q..^...?[..}.
   ae804:	bd4a cc68 4fa1 fd12 f678 e2b8 c350 4142     J.h..O..x...P.BA
   ae814:	efb7 d6a9 e4e8 4bd2 caec dcc7 4dba 2298     .......K.....M."
   ae824:	d018 9da4 f584 4e92 ffd9 bcb7 6da7 db6e     .......N.....mn.
   ae834:	fa38 fa73 602b b1d8 10c8 a524 b4cc 867d     8.s.+`....$...}.
   ae844:	9914 ec69 49f4 5c67 c677 93f6 507c 0c54     ..i..Ig\w...|PT.
   ae854:	c148 6312 6410 5001 46b6 7fe1 f67f deed     H..c.d.P.F......
   ae864:	0380 4948 bf69 33d4 8116 bdc3 eedf eede     ..HIi..3........
   ae874:	eede 861e 8508 3afe 8f1f 14aa d80d 891a     .......:........
   ae884:	686c 938f 8208 0f0f 4d60 351e 3351 deef     lh......`M.5Q3..
   ae894:	5102 2877 bfe9 59b3 1184 791e 7a8a 1b51     .Qw(...Y...y.zQ.
   ae8a4:	d804 77cd c2e6 2b44 2820 6d9d 282b dcf8     ...w..D+ (.m+(..
   ae8b4:	9daa bef6 e55f 40c7 62dc 2795 9dc5 908d     ...._..@.b.'....
   ae8c4:	4fa7 b004 a9ef 7d46 a947 abdb 9b57 6e4c     .O....F}G...W.Ln
   ae8d4:	0603 6152 745e 70f7 d988 e4c4 63a7 3e42     ..Ra^t.p.....cB>
   ae8e4:	348d 36ac 3d07 5f79 8a6d 3ae4 f8a5 d528     .4.6.=y_m..:..(.
   ae8f4:	8de8 0495 7a58 2597 61b9 bfce a30d 32fb     ....Xz.%.a.....2
   ae904:	582d f2d2 62c5 28e1 36fb a717 b14e a62c     -X...b.(.6..N.,.
   ae914:	e230 5640 849c a1cf f0f1 80ad 5c7f e95d     0.@V.........\].
   ae924:	845b 672f cd9c 3449 accc 8eb0 938d 984e     [./g..I4......N.
   ae934:	d4f9 4fd3 fc4b d871 79e0 a838 fdd4 d626     ...OK.q..y8...&.
   ae944:	9e49 675c f9a2 3e38 1300 9eae 8869 603a     I.\g..8>....i.:`
   ae954:	ceff 4705 770d ef9e bf0c b5e2 672b cd60     ...G.w......+g`.
   ae964:	f806 b2a4 e5e8 fdd1 af52 84ee faf9 e1bd     ........R.......
   ae974:	ac70 c079 a9eb 4610 288c 693c e1dc e44c     p.y....F.(<i..L.
   ae984:	a09e 8d8e 37e2 6425 38c2 725e 094b c426     .....7%d.8^rK.&.
   ae994:	2098 8938 90b9 a06d 654c 8ae8 ae18 0fd3     . 8...m.Le......
   ae9a4:	f709 a2b4 72e5 bab8 88c2 2933 7a53 8f7e     .....r....3)Sz~.
   ae9b4:	dcc8 d8a2 d0ec 2047 3b3d 86fb 13df 7090     ......G =;.....p
   ae9c4:	bdd7 3fb3 fbf5 8186 37c2 d774 d04e 9905     ...?.....7t.N...
   ae9d4:	3e9c 5da2 fabe 2ed7 6b45 2691 0bd9 92b9     .>.]....Ek.&....
   ae9e4:	3861 5078 fb13 0cc8 01d7 a3e5 3ba4 9c91     a8xP.........;..
   ae9f4:	23dc 8a61 0084 b870 ebb9 04c9 171a 923f     .#a...p.......?.
   aea04:	ed36 4ec9 b430 620c 7335 7868 f5c3 b602     6..N0..b5shx....
   aea14:	8b74 d7c8 a80e f295 64c3 e000 69fa 7e95     t........d...i.~
   aea24:	48d6 062f 1335 a7ba 0bdb a908 4a78 59b1     .H/.5.......xJ.Y
   aea34:	4618 4aeb ef16 c731 48ff 9d1c 579f cdd5     .F.J..1..H...W..
   aea44:	6487 6251 27d4 340c 96f2 074f ebd4 49cf     .dQb.'.4..O....I
   aea54:	95b1 5138 4dd5 4d0a 845d a4db d2ac b86c     ..8Q.M.M].....l.
   aea64:	3201 1491 409f 489e 8bd6 5a15 d05e 488d     .2...@.H...Z^..H
   aea74:	340b bb3c 38bc dcbb 8547 016d 7aa1 2c40     .4<..8..G.m..z@,
   aea84:	915e 41e2 834f e49e fc82 0da7 c778 49a5     ^..AO.......x..I
   aea94:	995d bd36 bd38 49ac 33b9 5fe7 57d8 f157     ].6.8..I.3._.WW.
   aeaa4:	dba8 6702 4f55 e12e ce91 2d88 1115 465a     ...gUO.....-..ZF
   aeab4:	3453 6a47 73ce b89d de72 d208 e670 2f9f     S4Gj.s..r...p../
   aeac4:	43d7 ff46 4a61 fdc5 a14b d69c 6b96 7bac     .CF.aJ..K....k.{
   aead4:	07c6 668f 7b6d a795 26bf 88ff 8ce7 f2e7     ...fm{...&......
   aeae4:	9a45 adf5 ca7c 7a87 2d93 4292 e62a 7c81     E...|..z.-.B*..|
   aeaf4:	34e0 a0ac cf77 639d 615f ae05 f2b0 0052     .4..w..c_a....R.
   aeb04:	0080 4e3d 2b30 cb7f ffc8 c3e4 c7a6 2844     ..=N0+........D(
   aeb14:	80f2 a734 c9e0 bf65 6659 6e55 04d1 c522     ..4...e.YfUn..".
   aeb24:	6e0b b977 0c5d 115e 7608 87b9 81a5 8a1f     .nw.].^..v......
   aeb34:	054c c81c 9e16 0453 74a2 f789 6bcb 2206     L.....S..t...k."
   aeb44:	5443 2dd6 6137 f29d 8b98 d498 8d2c cfca     CT.-7a......,...
   aeb54:	16c9 1199 5b21 ff0e f611 bf65 277d 39db     ....![....e.}'.9
   aeb64:	7552 275e 1417 cd70 aa95 7834 0b7e c29f     Ru^'..p...4x~...
   aeb74:	da08 8981 8bbd 6111 a726 95e6 7224 e848     .......a&...$rH.
   aeb84:	0682 969c d92b 5c5c 898c 4034 00b4 bdcc     ....+.\\..4@....
   aeb94:	af83 0e67 2227 7945 3bc9 a8e1 70b6 f6ea     ..g.'"Ey.;...p..
   aeba4:	d92a 0081 afbb 14ae bb01 8aba 6081 ecc1     *............`..
   aebb4:	53cb 7c8b ad21 53da f86f 69da 1035 372c     .S.|!..So..i5.,7
   aebc4:	07c3 fd61 1517 a009 5659 8673 2c95 0351     ..a.....YVs..,Q.
   aebd4:	7db4 846b c978 0d75 3105 2780 ad44 301e     .}k.x.u..1.'D..0
   aebe4:	ec70 161d a73c 00fd 9d99 e270 d2ea e834     p...<.....p...4.
   aebf4:	2eda 7adb 84ef d009 6c35 77b6 ff50 9970     ...z....5l.wP.p.
   aec04:	ae2d 0cd0 5e16 6ae3 c313 45d7 1a4c 50db     -....^.j...EL..P
   aec14:	8567 c339 86a6 7ae9 718b 71e0 115e dd7c     g.9....z.q.q^.|.
   aec24:	080c 8d06 985c ccd8 b98a 9590 5534 f4c5     ....\.......4U..
   aec34:	33aa 7e01 d8f1 fd10 f2dc 2b68 4288 c85d     .3.~......h+.B].
   aec44:	d886 68f4 898d 5b80 e1fc 5468 307c 0920     ...h...[..hT|0 .
   aec54:	81a6 3914 d53e bd06 cdb8 86e0 9f5e 545a     ...9>.......^.ZT
   aec64:	9a53 0190 d586 26b0 4695 4307 a211 ab5a     S......&.F.C..Z.
   aec74:	aea1 edfd c9d5 afb2 4226 a3af 21eb ae3b     ........&B...!;.
   aec84:	befd 436d b175 9154 8955 d2ca 21af e2b1     ..mCu.T.U....!..
   aec94:	5eac 3f94 b858 a2f8 3e17 b777 950c 264d     .^.?X....>w...M&
   aeca4:	675b b453 9ea6 5e21 b954 cba9 335d e43a     [gS...!^T...]3:.
   aecb4:	2d18 72f3 d628 8d7d abc2 e6e5 e940 eceb     .-.r(.}.....@...
   aecc4:	7b6e d983 de42 65af 0f71 0a23 84c1 dae8     n{..B..eq.#.....
   aecd4:	5091 5037 b7c2 b50c 9143 4d9e 880a db9c     .P7P....C..M....
   aece4:	84e2 a010 6f5a 5a8c 0eba 3d10 a525 f010     ....Zo.Z...=%...
   aecf4:	ce19 07b2 6774 6bf4 f469 7827 ab1a e8f5     ....tg.ki.'x....
   aed04:	7115 0e77 bab8 a01b 4374 e761 bea1 fa90     .qw.....tCa.....
   aed14:	aba0 1527 00ee ee8f e08a e1f8 d1f5 317b     ..'...........{1
   aed24:	4d0a fc82 1693 78bf 016b cda6 0153 904d     .M.....xk...S.M.
   aed34:	7581 91f0 86e1 aa48 c48e 6750 59a5 6cd7     .u....H...Pg.Y.l
   aed44:	20d5 a3cc b165 6341 2644 e1ba 43be 91c4     . ..e.AcD&...C..
   aed54:	5a9e c230 25f2 3d0b c1aa fd59 af5c f227     .Z0..%.=..Y.\.'.
   aed64:	ce9a d381 ae8b 28c2 3618 53f9 14f7 6acd     .......(.6.S...j
   aed74:	dab1 f8a0 53d8 0d2a 4fd8 d8e5 6ecc 5bdd     .....S*..O...n.[
   aed84:	9540 3f40 8d0a 7289 1353 92bf a47d 02fa     @.@?...rS...}...
   aed94:	19db fccd 8450 4e6c 69b7 9600 400d ae5a     ....P.lN.i...@Z.
   aeda4:	ca28 a731 d1f2 939b ce43 a2d1 80fa 3b94     (.1.....C......;
   aedb4:	4361 8841 c88d 90d9 02ad 64ac a540 fc96     aCA........d@...
   aedc4:	4aa3 249d 26dd 5b19 b5da 07d2 9676 c96e     .J.$.&.[....v.n.
   aedd4:	9e41 430d 4d64 df43 dc69 795e c840 6c96     A..CdMC.i.^y@..l
   aede4:	1745 d670 cd00 1428 2a78 b6ce a20e bfc8     E.p...(.x*......
   aedf4:	344d 1300 af43 06b9 3f6c 4892 620b 8b0a     M4..C...l?.H.b..
   aee04:	1869 5661 ebc1 1d89 20be 3c48 e5ce 1327     i.aV..... H<..'.
   aee14:	d541 6b98 0da2 df72 11c9 512a a2ad 0213     A..k..r...*Q....
   aee24:	2b3f 64de 5aca d232 5a5c 9359 6b2c 4acb     ?+.d.Z2.\ZY.,k.J
   aee34:	98ee 315a cf00 a3fd 00e5 0bb4 f1e4 cb75     ..Z1..........u.
   aee44:	f601 c0de 6919 e15f 2394 128a 58d8 f105     .....i_..#...X..
   aee54:	80fd 61e4 c960 849d 647d dd35 2200 8c1e     ...a`...}d5.."..
   aee64:	90be de95 5718 20dd 7c07 1d38 e1da 522f     .....W. .|8.../R
   aee74:	5cc6 562b ca83 daa4 5ec4 a43f 66c5 9e4d     .\+V.....^?..fM.
   aee84:	bce6 82dd 3116 4420 604c 51ee 16e4 2f1c     .....1 DL`.Q.../
   aee94:	8b42 9182 6ac7 b2a4 2b89 1f53 fdf4 94ed     B....j...+S.....
   aeea4:	4802 88b3 de95 e092 1b29 5ec1 6551 8968     .H......)..^Qeh.
   aeeb4:	52fd 8b2b 266e 2ddb 4d31 404a 8fe9 d048     .R+.n&.-1MJ@..H.
   aeec4:	f593 cc6a 4117 4f68 8c6f 9ba4 11b2 2a82     ..j..AhOo......*
   aeed4:	9d26 e40f 946b b926 1017 49b9 2231 cb03     &...k.&....I1"..
   aeee4:	c94d 2f52 cf5f 8259 8899 3232 3dd3 54f7     M.R/_.Y...22.=.T
   aeef4:	5ddb dc2c 9203 4f45 8b85 9d10 bd54 eec1     .],...EO....T...
   aef04:	58f6 d76f b633 2904 81c5 0354 ebeb 3c27     .Xo.3..)..T...'<
   aef14:	f37d 9eac 555d 33e3 c89e 37d6 a93b 1fab     }...]U.3...7;...
   aef24:	8c71 c0fe d449 b8c2 70a1 4b1e 17e3 cc56     q...I....p.K..V.
   aef34:	8e43 4391 9d18 1d28 5f2f c058 898b f933     C..C..(./_X...3.
   aef44:	65b3 9c4b 761b cfc8 1500 594a 340e 7375     .eK..v....JY.4us
   aef54:	440d edbe 0d24 9b46 b164 5850 8e3c 56ab     .D..$.F.d.PX<..V
   aef64:	4655 08fc 7659 e303 d565 c9d3 50d3 168e     UF..Yv..e....P..
   aef74:	e4c6 bc71 e847 3c65 ad9c a1f8 05ec b340     ..q.G.e<......@.
   aef84:	d68f 3d60 1334 0c06 2031 5763 fc3e f6ae     ..`=4...1 cW>...
   aef94:	f7d3 d2c5 26af edc3 64b3 c1bd 63f3 6134     .....&...d...c4a
   aefa4:	9d9e 618e e308 7f35 9d99 1272 c5d9 decb     ...a..5...r.....
   aefb4:	bbc3 4dcd 04bc e6b6 99d9 410a 95ae dddc     ...M.......A....
   aefc4:	555b d62d 33dc 32ab 7fa3 2824 66db 603b     [U-..3.2..$(.f;`
   aefd4:	d477 0681 b386 be52 7990 3954 3dc8 f46d     w.....R..yT9.=m.
   aefe4:	749a 5df2 525b 168b 28de 5ed1 be40 2aa4     .t.][R...(.^@..*
   aeff4:	d26f 9ab4 7891 5fa6 cb43 cf0b 8f72 38e3     o....x._C...r..8
   af004:	8319 1dd2 27a2 5e38 fc97 aaed df52 e5ff     .....'8^....R...
   af014:	1fa7 a35e 40fb 834b 5649 8a0d da63 94eb     ..^..@K.IV..c...
   af024:	1e40 26d6 120d 361b e7ae da07 35cf a0ac     @..&...6.....5..
   af034:	8511 4ab5 8183 3efb 2b57 63af e413 282e     ...J...>W+.c...(
   af044:	d1f6 5211 4a65 f72a 01f3 0cf1 b657 2273     ...ReJ*.....W.s"
   af054:	ea6f e421 0dba 7ed0 e1fc 9bcd d47f f858     o.!....~......X.
   af064:	86dc 1c1a f5b8 23aa 8148 c470 9c2a 7303     .......#H.p.*..s
   af074:	e9fc c4d0 e20a 7efd 76c2 607e f30a 3d03     .......~.v~`...=
   af084:	1ece e3d5 8827 4fe4 f0ed 08e6 39dc d342     ....'..O.....9B.
   af094:	d9d5 f6c6 6d69 16b0 28ec dc64 1f6d 8a8f     ....im...(d.m...
   af0a4:	a1c3 7efb da7e 3ec0 3707 6787 1d7d cc55     ...~~..>.7.g}.U.
   af0b4:	8d8f 7907 cb05 d308 1db1 c76d f450 378e     ...y......m.P..7
   af0c4:	7ba6 6d91 4c02 408e e8cd c360 73b3 dba7     .{.m.L.@..`..s..
   af0d4:	6b64 9fea 1981 9664 6033 a433 c70a 39d9     dk....d.3`3....9
   af0e4:	1590 259d 1592 d9e9 7ce9 1d33 360c 55fd     ...%.....|3..6.U
   af0f4:	336f 7280 03ed fcf9 85f8 fd82 08f8 b8d5     o3.r............
   af104:	f07b f8c0 1f66 b1ad 1a35 6bec b1c6 9cbc     {...f...5..k....
   af114:	f9fd fa74 1c42 39ce 1b7c 6d88 31c0 e738     ..t.B..9|..m.18.
   af124:	7ccf fda0 d8c2 f793 3912 ec2c 734f b1ff     .|.......9,.Os..
   af134:	1e01 2a74 d62f 7c74 7a76 4dfa c439 7570     ..t*/.t|vz.M9.pu
   af144:	befb 6ca3 96c0 2734 d4de 99a1 9c35 299f     ...l..4'....5..)
   af154:	4cf9 239a c649 e0e6 1ecd ce6b 9b9a 4cca     .L.#I.....k....L
   af164:	d675 97f4 d6ed 63c7 bb02 ea4a 727c bbfc     u......c..J.|r..
   af174:	20e8 8ab2 3491 7564 4dfc 63f0 659a e09b     . ...4du.M.c.e..
   af184:	37d9 84e8 d97e a0c2 ebda cc08 f40d 4f35     .7..~.........5O
   af194:	8901 b028 a95c 5086 9623 e6c6 77a4 5961     ..(.\..P#....waY
   af1a4:	9b8c 6806 d6ec 9dc1 ff94 499b a181 bd41     ...h.......I..A.
   af1b4:	6b42 d823 26cb a3b4 e845 3052 cf61 9a02     Bk#..&..E.R0a...
   af1c4:	1717 1478 d9b7 dfbb ef2b 99cd b5ed 7189     ..x.....+......q
   af1d4:	44c3 ae69 c88e 8de8 3a35 5122 e8a4 ad04     .Di.....5:"Q....
   af1e4:	8717 e28e 5ed1 a8c1 8958 b4d3 fe26 7d00     .....^..X...&..}
   af1f4:	2bb7 6732 e6fa ce70 ef1c 0dc7 73b7 c3dd     .+2g..p......s..
   af204:	ab37 ed3c fc34 a113 d224 a91e 30ea 1f60     7.<.4...$....0`.
   af214:	8cc1 5c7e 997d f384 3420 5b06 df94 e723     ..~\}... 4.[..#.
   af224:	ecdb 8d03 4b94 940f 45ce eebd 0241 3e49     .....K...E..A.I>
   af234:	6ec7 ae35 420c 2fcc 0866 eafb 6af6 8353     .n5..B./f....jS.
   af244:	75a2 de0c 28d6 b58f b25e d48a 20ab a94c     .u...(..^.... L.
   af254:	0eba 4963 18f9 2990 23c4 644f 792d 7e22     ..cI...).#Od-y"~
   af264:	51ca 83ec 5f8f e49b a36b 261c 91de 9ff7     .Q..._..k..&....
   af274:	8b7d 88c2 c9d2 cc84 6a44 aaef 53e7 f77a     }.......Dj...Sz.
   af284:	0523 b157 422b 9303 6b02 af83 c731 515e     #.W.+B...k..1.^Q
   af294:	45d5 6dfc 0daf c812 99fd 3f3d 93ec 65f9     .E.m......=?...e
   af2a4:	45f5 b0d9 f959 0d22 d1a5 c845 9301 45d9     .E..Y."...E....E
   af2b4:	8c3e 93ee 1272 7816 cda3 1cc2 922b 112f     >...r..x....+./.
   af2c4:	3440 5c7d 3e7b 75e2 f784 ca94 d0f5 3f15     @4}\{>.u.......?
   af2d4:	c218 3942 bb89 c95f 9eeb f33f fee3 1dd2     ..B9.._...?.....
   af2e4:	28c8 4dbd b8b2 8aac 4511 1f76 c2cc 2040     .(.M.....Ev...@ 
   af2f4:	6c3c c5a8 1955 9472 b357 10de 6d94 9b70     <l..U.r.W....mp.
   af304:	cf0d 91f6 a735 5f3e 68e9 9535 0cb8 002a     ....5.>_.h5...*.
   af314:	ffc3 c36d a349 73aa c53b 2688 7c8d cd20     ..m.I..s;..&.| .
   af324:	9008 bca9 d549 94f3 361d 024a 4193 ade2     ....I....6J..A..
   af334:	fac2 ff5e 29e0 0afc 5bf6 acba 4a6a 7f1d     ..^..)...[..jJ..
   af344:	414d 30df 70a4 eebd a9f9 7667 db80 4ffb     MA.0.p....gv...O
   af354:	9576 ba7b 2df7 c1d2 61d2 0ce8 3d94 26ae     v.{..-...a...=.&
   af364:	61c5 8713 6a63 d346 2b74 5d5c d18e eaea     .a..cjF.t+\]....
   af374:	81a9 f12f 4a97 c352 19f0 3ec5 856c c8d8     ../..JR....>l...
   af384:	466f 4453 2e6e 3177 4474 8b04 f6f2 5f78     oFSDn.w1tD....x_
   af394:	f629 2b7d 880e ee17 ba1d 23ef 1dd8 32fa     ).}+.......#...2
   af3a4:	6ba9 68d6 6cde dc17 f157 ab27 6367 271b     .k.h.l..W.'.gc.'
   af3b4:	c5a9 dee9 69be 6774 c9ef 1918 1ee6 d8fe     .....itg........
   af3c4:	4a9c ac47 b21f 717f 5b73 ffd6 04a4 762e     .JG....qs[.....v
   af3d4:	b579 a75a 2d30 598b 898b 710c 760f 84bc     y.Z.0-.Y...q.v..
   af3e4:	18d4 5679 3368 f12f 3109 f4be 5524 a297     ..yVh3/..1..$U..
   af3f4:	a703 62f7 ffdc 598e 49da 052f 45d2 5fcc     ...b...Y.I/..E._
   af404:	a547 5b91 1715 1ced 8602 f08b c08f 708a     G..[...........p
   af414:	a969 adbc 18bc 4725 7c47 c9e8 a4d9 3c06     i.....%GG|.....<
   af424:	2d94 5b8a 1c18 c729 9350 c161 a4e7 2cd6     .-.[..).P.a....,
   af434:	2a0c e092 e830 8902 69b2 0e10 41d2 0518     .*..0....i...A..
   af444:	86f9 206f 5454 96fb 6a91 18a0 aa91 8bba     ..o TT...j......
   af454:	8fc5 1b06 4104 8fbe aef7 5ed3 7d80 9be0     .....A.....^.}..
   af464:	cd4e 3a45 731d 77a1 59b8 8623 a01c f673     N.E:.s.w.Y#...s.
   af474:	c671 3120 3b92 aea8 3762 cc3e f44c 8b80     q. 1.;..b7>.L...
   af484:	3952 4ad9 18b0 b16c 4016 4f86 29f9 9b51     R9.J..l..@.O.)Q.
   af494:	bb5f 70f9 7b79 a17a 9b35 53ae a194 8632     _..py{z.5..S..2.
   af4a4:	0fd6 838d 3918 e4be bdda 1d10 a058 69e2     .....9......X..i
   af4b4:	f7c3 a12c 6920 28c9 2329 3cbc 9a10 d205     ..,. i.()#.<....
   af4c4:	1003 c116 97bc 8ad1 f49e 4678 20e1 a7d9     ..........xF. ..
   af4d4:	277a 21e5 fbbb 2cea 1a9c ef67 8e38 c9d7     z'.!...,..g.8...
   af4e4:	872a 9e9f 55cc c814 443a 11f0 6a99 a8d2     *....U..:D...j..
   af4f4:	0a0e ad58 3ee0 7b40 ab30 c042 d83e 7fa5     ..X..>@{0.B.>...
   af504:	a7c9 fefb f281 282b 753f 26ca 0d8b 2676     ......+(?u.&..v&
   af514:	5aec 8167 b351 71ca 16ac 8e21 38a3 6a16     .Zg.Q..q..!..8.j
   af524:	c719 1476 ee6f 4187 2b6c cd1b c611 c413     ..v.o..Al+......
   af534:	518d 7b59 dfdb 801d 6f41 2aa5 44aa 2547     .QY{....Ao.*.DG%
   af544:	a2c3 4ea2 089d 7570 04ec 3470 07a3 e090     ...N..pu..p4....
   af554:	33b2 9520 b747 ceca 8dfd 1a86 2a08 4385     .3 .G........*.C
   af564:	c1ab 7c28 5ab3 4914 c771 09a8 5998 1f05     ..(|.Z.Iq....Y..
   af574:	1cd1 847b 5d01 4659 bb7d 3c91 c57f 210f     ..{..]YF}..<...!
   af584:	5cc7 c93a a501 d155 2813 127b c14a 2b13     .\:...U..({.J..+
   af594:	abd8 aeea b9c2 a1d6 7cbc 35d9 97ca 3f2f     .........|.5../?
   af5a4:	2de2 b952 5b1d fd3c aab2 58f8 060f 3d2f     .-R..[<....X../=
   af5b4:	01fd 4cd2 2a00 0a0e 2405 14d4 d38a 3d2f     ...L.*...$..../=
   af5c4:	2c26 f972 a571 01b8 d607 6e06 331a 5c99     &,r.q......n.3.\
   af5d4:	f6ae c009 475a 40d0 09a3 e348 aea0 3431     ....ZG.@..H...14
   af5e4:	1dc5 e389 6899 cc30 cfb4 e86c 8844 f1c0     .....h0...l.D...
   af5f4:	29bb 80ea 6302 2b38 9c6e 402b c145 1551     .)...c8+n.+@E.Q.
   af604:	b1b0 6fd5 d9bf f85f a3b8 35b8 d27d fed3     ...o.._....5}...
   af614:	6fdb 57cc 9968 fac0 e486 07c1 f7a6 237b     .o.Wh.........{#
   af624:	3c2c 999b 6d1c 847b a9a0 8203 7427 269d     ,<...m{.....'t.&
   af634:	12ec 0cac 7041 5f32 ae11 10b8 9b4a 7d27     ....Ap2_....J.'}
   af644:	de8e 6326 3980 8166 eac7 35a9 ae49 5dd6     ..&c.9f....5I..]
   af654:	f50a ae25 bd9b 3a40 9ac8 489d b767 dcc2     ..%...@:...Hg...
   af664:	803b d135 dbcd 19b9 84da 74df ac78 2723     ;.5........tx.#'
   af674:	65a1 04f0 3090 6639 8212 b313 1e17 40df     .e...09f.......@
   af684:	faa8 be8f 9eb8 d68d 8f99 4501 7da7 2344     ...........E.}D#
   af694:	94b0 4fcb 7093 9f50 e59a 6027 34e1 333d     ...O.pP...'`.4=3
   af6a4:	2cdf 9ee8 e059 bca3 9ed1 7536 2248 2440     .,..Y.....6uH"@$
   af6b4:	913e b411 2e73 a1de b3bc 9378 3996 2053     >...s.....x..9S 
   af6c4:	c0f5 4075 41d4 0c97 a57f b98a 1bc1 7c75     ..u@.A........u|
   af6d4:	2373 7883 68d8 3b3a 2f7f 5294 1452 4f72     s#.x.h:;./.RR.rO
   af6e4:	77e4 b5df 3aef ce75 343a e257 836f f935     .w...:u.:4W.o.5.
   af6f4:	a9c2 e2a5 ecf7 b5d1 a159 3add 6d75 c75a     ........Y..:umZ.
   af704:	e266 19bd 00b3 2627 f19d 24f5 52f5 a28b     f.....'&...$.R..
   af714:	ea4c 681b 7733 5ab5 8dab 63ed 56e9 17c1     L..h3w.Z...c.V..
   af724:	585e cab1 bb23 19ae bcfa ba44 7842 bb3d     ^X..#.....D.Bx=.
   af734:	748c f0ad edfa 7ee5 5d4f 272d dc17 88d9     .t.....~O]-'....
   af744:	d4a2 6c69 24bc 8d01 e4a7 f25d 58f9 9cb5     ..il.$....]..X..
   af754:	8735 466d 96d1 60f5 362d 3aea 42f9 b78a     5.mF...`-6.:.B..
   af764:	6a9b c7f2 4f53 5460 79e3 5646 d66d d274     .j..SO`T.yFVm.t.
   af774:	4545 7aa2 46af 1ea6 dded 97c6 f44c a0f0     EE.z.F......L...
   af784:	b684 722c e8c7 dd93 ba82 72d1 17bf 246d     ..,r.......r..m$
   af794:	018f fd90 74af 5a01 f57a c198 ded3 7300     .....t.Zz......s
   af7a4:	0b2b 5e12 4546 0d7a 3e80 e0b9 f10d f512     +..^FEz..>......
   af7b4:	12b2 2025 9be6 d0d6 c333 673b 9e08 2d7e     ..% ....3.;g..~-
   af7c4:	7123 310c 0f9b bcf4 1a0e 842a 11e1 8096     #q.1......*.....
   af7d4:	fcb5 833e 3dc0 e2ea 7755 82eb eb8e 8e2c     ..>..=..Uw....,.
   af7e4:	fd83 d9ee f133 e8e0 608b f79a fbc9 67d5     ....3....`.....g
   af7f4:	a610 90a4 9b4a b128 87cb 6ba5 94e5 ea8b     ....J.(....k....
   af804:	8952 dc95 c48c 535a 97fd 49fe 0044 83c7     R.....ZS...ID...
   af814:	0d52 c886 ab40 18c5 bc8d 7177 0409 e90b     R...@.....wq....
   af824:	be9a 58cb 8387 b16c ab21 f639 04f1 39f6     ...X..l.!.9....9
   af834:	b6b0 522c ada3 1406 7708 6584 5ef8 a21f     ..,R.....w.e.^..
   af844:	ae5a 085d 2f9d 4d5c f478 82dc 0381 e1bf     Z.]../\Mx.......
   af854:	d4f3 dadf fe77 3a83 f4b9 b550 3d10 ed3b     ....w..:..P..=;.
   af864:	7a4f a69d 6e2a a297 c3a6 ac5e 632d dc38     Oz..*n....^.-c8.
   af874:	15cd e05e 0b44 6d3c 55ba c3ce de01 a614     ..^.D.<m.U......
   af884:	37d6 a4bf 1b2b d9f0 4781 f132 723d 6704     .7..+....G2.=r.g
   af894:	077d ffbd f4be 7760 ee27 123f c7dd 64ff     }.....`w'.?....d
   af8a4:	7376 c5ec 53f8 4bab a2a8 b7fa 2a76 910a     vs...S.K....v*..
   af8b4:	93e2 25f3 5b6d 2f4e 1165 d1c6 9ff8 03b4     ...%m[N/e.......
   af8c4:	83e0 f34a dd77 367f e242 4397 f2ac 4343     ..J.w..6B..C..CC
   af8d4:	c51c b971 a6db 1c45 875b d684 c695 2946     ..q...E.[.....F)
   af8e4:	674f fa77 cf14 90ef b0c6 1a24 63bd 5ec9     Ogw.......$..c.^
   af8f4:	98a3 fa97 dbb9 4d03 4fb2 e977 0b5b c5ed     .......M.Ow.[...
   af904:	1550 23cc 13a0 524b ec62 7484 c3b1 03e0     P..#..KRb..t....
   af914:	5f1c 7e17 8a29 8ead 1b19 6c71 1d60 5789     ._.~).....ql`..W
   af924:	46fb f080 f384 d1b7 67e1 998d eb20 8689     .F.......g.. ...
   af934:	b165 a61c 7ad8 38f8 43f3 b3e7 ce6e c4b6     e....z.8.C..n...
   af944:	f655 9ac6 90b5 5d51 7dd4 082d faf0 78ea     U.....Q].}-....x
   af954:	72c5 6008 48bf c131 bdfd 1a8d 7c1d cb37     .r.`.H1......|7.
   af964:	5be5 e343 7d29 f4f4 d5ae d6ec f870 6f77     .[C.)}......p.wo
   af974:	7948 595d bdad af4b bf81 1bff b82a 8edb     Hy]Y..K.....*...
   af984:	d13b 51af 602a 0f2c a544 8612 ed0a c595     ;..Q*`,.D.......
   af994:	7283 e1aa 5173 fc76 eed0 4208 0f41 d6fb     .r..sQv....BA...
   af9a4:	7d4c 24ae 8bca fac4 5e46 611f 6dd8 58fb     L}.$....F^.a.m.X
   af9b4:	dfa7 858e aab5 c408 2d83 e670 4372 2a2f     .........-p.rC/*
   af9c4:	f7b1 c8c6 c658 c078 4588 e960 ea8b e5b1     ....X.x..E`.....
   af9d4:	1297 2c59 9d06 f022 f7a4 1174 5a3c 1b11     ..Y,.."...t.<Z..
   af9e4:	7c69 0755 526e 1442 6de8 30a6 0db5 5ef3     i|U.nRB..m.0...^
   af9f4:	6bba 20d5 5bf4 6f93 3f97 bdb5 3d5a afab     .k. .[.o.?..Z=..
   afa04:	be96 a5dd 78f5 5487 f7f6 8898 c7df a8fe     .....x.T........
   afa14:	01f0 1774 21df 3ea7 1d86 ac61 ca3e a0be     ..t..!.>..a.>...
   afa24:	38b1 a642 1201 6876 103a c379 80a4 a4a8     .8B...vh:.y.....
   afa34:	27c5 99be 0904 3c8d 44a2 fe46 7bc2 063c     .'.....<.DF..{<.
   afa44:	8273 e5ca b6fd 8b28 6414 e1a8 600a 7ef1     s.....(..d...`.~
   afa54:	1ccc 4bba 3e81 5d02 406b 254e 05f5 af10     ...K.>.]k@N%....
   afa64:	b44e 6ee7 64d0 a039 0f46 a403 ca6c dc10     N..n.d9.F...l...
   afa74:	2871 59be 8f6d bc2c ba5e c89e c3e2 5479     q(.Ym.,.^.....yT
   afa84:	ed59 da54 e5ee 38da b2f5 a6a6 5a63 1ee8     Y.T....8....cZ..
   afa94:	14a1 8426 36c7 ffb9 5d89 9aac 3324 657a     ..&..6...]..$3ze
   afaa4:	39c7 e0e9 f686 7ad1 ab59 a2c7 befb 7c6a     .9.....zY.....j|
   afab4:	e06c a95e 6af3 3955 ddb4 9957 bb9f 69a1     l.^..jU9..W....i
   afac4:	5a6b 4bcc af1b b757 eb8e 999e 666f bbea     kZ.K..W.....of..
   afad4:	fa0a 795d de58 2ce8 f4d7 da13 5bef cd5d     ..]yX..,.....[].
   afae4:	92fc 0be7 8bba 78c7 9b06 aaad 804a 044d     .......x....J.M.
   afaf4:	c6bc a1ef 4443 fb63 b640 83b6 cd91 3d56     ....CDc.@.....V=
   afb04:	84d2 af41 3dde e037 a4c6 e270 3458 a2c8     ..A..=7...p.X4..
   afb14:	12a9 d6f0 e4c9 3428 caa6 a4ed 0839 1de5     ......(4....9...
   afb24:	788a 53ef e43b 5762 0238 8610 3efa 606c     .x.S;.bW8....>l`
   afb34:	709f 2493 6d5c 78df 19bf ac94 19a7 f71c     .p.$\m.x........
   afb44:	738b f2a8 7b51 d98c 8f35 f171 ce3b cfbb     .s..Q{..5.q.;...
   afb54:	d8eb 3a97 063a 1fba d1d8 b439 b789 6776     ...::.....9...vg
   afb64:	b26b 572c cbaa 9d70 95fa 94ab 6949 1b8b     k.,W..p.....Ii..
   afb74:	9441 4f03 2acd 0dbb 5451 63e2 7a53 9bb0     A..O.*..QT.cSz..
   afb84:	ba50 c204 be54 17a0 6776 4eba 1f19 a8ac     P...T...vg.N....
   afb94:	7416 27cd 9a25 19a7 55c1 5647 912b dc1d     .t.'%....UGV+...
   afba4:	8e46 6449 b084 0a5c 2b24 ae9d cdea 59ac     F.Id..\.$+.....Y
   afbb4:	4787 d3d5 0018 2ee2 054e b83d a783 cd24     .G......N.=...$.
   afbc4:	548d 115c db05 07c3 44ff f8cd 5252 b04e     .T\......D..RRN.
   afbd4:	8c58 f49a 9c7d df6b 3e4f 3ed7 1fa6 f58f     X...}.k.O>.>....
   afbe4:	73e5 ffc6 9750 693e 75da 45fd b06f 5c66     .s..P.>i.u.Eo.f\
   afbf4:	8e79 bed9 dbc2 456e ba4b 3599 c38e efab     y.....nEK..5....
   afc04:	a32a 9614 3f9b d60a af03 86b4 df38 be1f     *....?......8...
   afc14:	044f 8aa3 acd7 a64f 63e7 0b26 f3f3 c367     O.....O..c&...g.
   afc24:	1fe1 fabe 3cea e55b 829f cd22 6166 dd59     .....<[...".faY.
   afc34:	2965 fb7b 7804 fc8d 1c2c d78f 97c9 55e5     e){..x..,......U
   afc44:	ac0e a6cf d12a 1bac 965f f59b 1298 233e     ....*..._.....>#
   afc54:	3a13 1ba6 c7ef 9118 bb29 eb1b a38c 0af5     .:......).......
   afc64:	9672 1865 e78c 8cd8 919c 0881 0b39 aa6f     r.e.........9.o.
   afc74:	5b6a c64e ec63 f5f9 baaa 2dd9 cea8 5b34     j[N.c......-..4[
   afc84:	175d dde9 8318 8efb 2d7e 6da1 cd80 5f82     ].......~-.m..._
   afc94:	b6b1 cb5f 1e70 fee8 21ff 7f80 ab0f 9978     .._.p....!....x.
   afca4:	b7e4 0949 6a4c 85ad ba7a 4cdd edc0 870c     ..I.Lj..z..L....
   afcb4:	d573 ae12 acd2 6511 fe78 98c2 f41c c1fa     s......ex.......
   afcc4:	8c3d 2bf9 333c db40 6083 e016 e0e2 18ab     =..+<3@..`......
   afcd4:	e35e 3256 2c85 7b7b c641 6937 e572 466b     ^.V2.,{{A.7ir.kF
   afce4:	6fc9 4061 e4f7 2a61 0427 bfec a817 9c3e     .oa@..a*'.....>.
   afcf4:	0127 15b9 42ce 5a39 9322 5961 e7cc 5061     '....B9Z".aY..aP
   afd04:	946c 787b 70d0 0f18 d702 722d 9e16 3d7f     l.{x.p....-r...=
   afd14:	b4a4 ebe0 5439 cc0d 6a84 84de 9803 795b     ....9T...j....[y
   afd24:	7382 df0c f2a1 c964 cd22 fa02 943b 9e3b     .s....d."...;.;.
   afd34:	dbd4 301a 0c31 efe6 e461 0050 0dc6 cf55     ...01...a.P...U.
   afd44:	29cf 8046 1614 622e ce7e a402 0a99 033d     .)F....b~.....=.
   afd54:	9b98 55f6 5218 9018 da85 26cd 78c3 b5a2     ...U.R.....&.x..
   afd64:	2f6e f80a b14f a409 729a 00b7 d2d4 2d15     n/..O....r.....-
   afd74:	3caa ff80 3943 a18e 05e7 45dd 7f3a 394f     .<..C9.....E:.O9
   afd84:	c7cf 1c5c 89fa c28d 324f 6b37 88f6 92c5     ..\.....O27k....
   afd94:	8df0 62d6 f871 07c5 562d 5af7 b31d 6a28     ...bq...-V.Z..(j
   afda4:	eec0 7ca2 16af bfe5 3966 1c68 62d6 f3a0     ...|....f9h..b..
   afdb4:	7fd1 2978 2770 ada8 87c3 9eff 6875 1728     ..x)p'......uh(.
   afdc4:	e7e7 15d5 9c4e 816c 435f 98bd 89c0 ffb2     ....N.l._C......
   afdd4:	89b9 37b8 29ba 69b8 94aa f4a7 5d6a d4ef     ...7.).i....j]..
   afde4:	55ef abb1 eb83 1dac 6913 0ebb 26de 20b7     .U.......i...&. 
   afdf4:	048b 19b8 e459 d8b8 767c 33e9 7ab0 4800     ....Y...|v.3.z.H
   afe04:	b3c3 216f 4f39 7274 a5ce 07f9 ee80 2d36     ..o!9Otr......6-
   afe14:	54ca b701 b1dc 768b c122 4aea 8665 760a     .T.....v"..Je..v
   afe24:	5599 155e 1f86 94f8 d4ad 6827 057c 3650     .U^.......'h|.P6
   afe34:	2a84 d5ab c932 a108 fa14 65cc 6233 1a67     .*..2......e3bg.
   afe44:	9406 e56c 1714 5137 58a7 a3fd 0b0a a2e6     ..l...7Q.X......
   afe54:	29a0 fefa 5366 cb54 555d 88ba 4cb6 148a     .)..fST.]U...L..
   afe64:	5c11 366d 3d89 5d24 3af7 77cd 2a6a 19f8     .\m6.=$].:.wj*..
   afe74:	c127 7ff2 75f6 7877 7143 c3a3 f2b9 2a54     '....uwxCq....T*
   afe84:	bf83 7927 9d72 b3e2 a31a 1333 9fe7 5716     ..'yr.....3....W
   afe94:	7673 3cc3 e31f f073 e00f 9557 1101 1d52     sv.<..s...W...R.
   afea4:	7a7b 8a5a ed6e 95a2 5722 1447 24fc 5f05     {zZ.n..."WG..$._
   afeb4:	2915 e242 5ac3 dccd dec2 6b76 10e0 2eb6     .)B..Z....vk....
   afec4:	9eb4 0539 6d13 934d a0e7 196a db1d 6c90     ..9..mM...j....l
   afed4:	f777 8b16 ccbc e9aa 97db d5d7 8a54 effe     w...........T...
   afee4:	4d06 a179 6068 397d 6438 3272 debd f9a9     .My.h`}98dr2....
   afef4:	877e f7a2 f6e1 a2ad 5438 fc29 fd26 6c78     ~.......8T).&.xl
   aff04:	52d9 bc8a 6e4f b869 d3e5 d8a6 7fb2 9ee9     .R..Oni.........
   aff14:	42b4 738d 20a7 69f2 bf0d 24d5 bba5 1bdd     .B.s. .i...$....
   aff24:	5e35 c08d 7784 4243 d33c f185 732e 809e     5^...wCB<....s..
   aff34:	2906 91de 22ff 4405 6dac de5e eee2 bc98     .)...".D.m^.....
   aff44:	63b9 c6ce 308d 5f01 aa0d 2e13 c32e e6c6     .c...0._........
   aff54:	8dcb b449 aa09 2246 1c4e 9445 14ff 2932     ..I...F"N.E...2)
   aff64:	c067 440f f4bd 9220 256e b6e3 5d7c 766c     g..D.. .n%..|]lv
   aff74:	40db 0d3f dd7f d595 e3ea bd2a ad0a 69ce     .@?.......*....i
   aff84:	bdbd 78bf e358 2406 579a 371b 2c70 c649     ...xX..$.W.7p,I.
   aff94:	fc88 d4dd 3158 c711 e490 604e 6223 f4c8     ....X1....N`#b..
   affa4:	c0c8 8e1a 1ebf 51d3 a376 1e3a 593a 2799     .......Qv.:.:Y.'
   affb4:	4e44 69f0 2018 b2b4 5bb5 dc3a 81e6 d54e     DN.i. ...[:...N.
   affc4:	7382 df1e 5533 8e89 39b5 2d7f be4f 28a6     .s..3U...9.-O..(
   affd4:	e66a c89c 850e cf6b 7cee 9cb9 9e83 07f9     j.....k..|......
   affe4:	92eb 07a8 c975 4084 139d f761 6535 f9c5     ....u..@..a.5e..
   afff4:	bf9c e7a3 393a 5c20 5a4c 94e0 4011 2345     ....:9 \LZ...@E#
   b0004:	039d e35d 16e2 e0cd c8bf 1b0d 1ca4 6f8b     ..]............o
   b0014:	f04f ac60 49a4 8274 ba6b 9ec8 4a2c b3aa     O.`..It.k...,J..
   b0024:	53c1 91f1 918e 5033 e72d 2fa2 977e ab41     .S....3P-../~.A.
   b0034:	1a96 9fc1 437d 8773 12e9 61b3 1d76 d3c8     ....}Cs....av...
   b0044:	4afa 953d 4eeb c5ba a5fa d287 3fad 983f     .J=..N.......??.
   b0054:	d56c 1b8e 2d0f 3772 0650 4a87 9e93 e01a     l....-r7P..J....
   b0064:	7e10 201a 1cd2 1fcd 87c3 a5ce 2235 a039     .~. ........5"9.
   b0074:	2475 0a36 fe67 b138 9c8e 0303 bcf4 abc2     u$6.g.8.........
   b0084:	4556 0a64 9558 7019 a35b 0bb0 65e6 c341     VEd.X..p[....eA.
   b0094:	299f 4208 3c78 5bc8 0a83 041f f6d2 a629     .).Bx<.[......).
   b00a4:	2a4d 9038 2d01 a775 6dc0 1961 2bbe e2f1     M*8..-u..ma..+..
   b00b4:	da35 d4bd c8a9 8ac1 b1f4 fce7 3c15 b63d     5............<=.
   b00c4:	eb12 7408 d42e 46a3 6aa9 6050 848e b4f4     ...t...F.jP`....
   b00d4:	a06d dc5e 4988 ac9b 46c5 a17a 58bf 8006     m.^..I...Fz..X..
   b00e4:	44aa 34b7 bf7a dcd9 6132 57a5 5d7b f59d     .D.4z...2a.W{]..
   b00f4:	5a62 d9a6 d517 c511 7519 8c52 b076 b579     bZ.......uR.v.y.
   b0104:	8a2b 0abc 3af0 622d 1ef1 4001 f24e 34e7     +....:-b...@N..4
   b0114:	02cb 83fc c348 aa93 4eaf 3984 67e5 dcd3     ....H....N.9.g..
   b0124:	d984 b98a 43ab fe74 870a 4c86 0906 63d0     .....Ct....L...c
   b0134:	d054 ffcf 831f 94c4 5eb8 064c 0000 0000     T........^L.....

000b0144 <__func__.7950>:
   b0144:	7277 7469 5f65 6577 7062 6761 0065 0000     write_webpage...
   b0154:	7265 6e72 3d6f 6425 2520 312e 7336 000a     errno=%d %.16s..
   b0164:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   b0174:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   b0184:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   b0194:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   b01a4:	6b72 622f 7361 6369 6577 2f62 7468 7074     rk/basicweb/http
   b01b4:	735f 7265 6576 2e72 3a63 7325 253a 2064     _server.c:%s:%d 
   b01c4:	5245 4f52 2852 6425 3a29 6220 6461 755f     ERROR(%d): bad_u
   b01d4:	6c72 000a 2e2e 732f 6372 412f 4653 742f     rl..../src/ASF/t
   b01e4:	6968 6472 6170 7472 2f79 7266 6565 7472     hirdparty/freert
   b01f4:	736f 642f 6d65 2f6f 776c 7069 615f 7276     os/demo/lwip_avr
   b0204:	3233 755f 3363 655f 6178 706d 656c 6e2f     32_uc3_example/n
   b0214:	7465 6f77 6b72 622f 7361 6369 6577 2f62     etwork/basicweb/
   b0224:	7468 7074 735f 7265 6576 2e72 3a63 7325     http_server.c:%s
   b0234:	253a 2064 5245 4f52 2852 6425 3a29 5320     :%d ERROR(%d): S
   b0244:	7274 6e61 6567 7020 7461 2068 7325 2820     trange path %s (
   b0254:	656c 3d6e 6425 0a29 0000 0000 4547 0054     len=%d).....GET.
   b0264:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   b0274:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   b0284:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   b0294:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   b02a4:	6b72 622f 7361 6369 6577 2f62 7468 7074     rk/basicweb/http
   b02b4:	735f 7265 6576 2e72 3a63 7325 253a 2064     _server.c:%s:%d 
   b02c4:	5245 4f52 2852 6425 3a29 2820 6425 2029     ERROR(%d): (%d) 
   b02d4:	7325 000a 5255 204c 6f6e 2074 6f66 6e75     %s..URL not foun
   b02e4:	0064 0000 2e2e 732f 6372 412f 4653 742f     d...../src/ASF/t
   b02f4:	6968 6472 6170 7472 2f79 7266 6565 7472     hirdparty/freert
   b0304:	736f 642f 6d65 2f6f 776c 7069 615f 7276     os/demo/lwip_avr
   b0314:	3233 755f 3363 655f 6178 706d 656c 6e2f     32_uc3_example/n
   b0324:	7465 6f77 6b72 622f 7361 6369 6577 2f62     etwork/basicweb/
   b0334:	7468 7074 735f 7265 6576 2e72 0063 0000     http_server.c...
   b0344:	4f50 5453 0000 0000 7242 6b6f 6e65 5520     POST....Broken U
   b0354:	4c52 0000 2e2e 732f 6372 412f 4653 742f     RL..../src/ASF/t
   b0364:	6968 6472 6170 7472 2f79 7266 6565 7472     hirdparty/freert
   b0374:	736f 642f 6d65 2f6f 776c 7069 615f 7276     os/demo/lwip_avr
   b0384:	3233 755f 3363 655f 6178 706d 656c 6e2f     32_uc3_example/n
   b0394:	7465 6f77 6b72 622f 7361 6369 6577 2f62     etwork/basicweb/
   b03a4:	7468 7074 735f 7265 6576 2e72 3a63 7325     http_server.c:%s
   b03b4:	253a 2064 5245 4f52 2852 6425 3a29 7020     :%d ERROR(%d): p
   b03c4:	7261 6573 755f 6c72 5028 534f 2954 000a     arse_url(POST)..
   b03d4:	7061 2f69 0000 0000 654d 6874 646f 6e20     api/....Method n
   b03e4:	746f 6920 706d 656c 656d 746e 6465 0000     ot implemented..
   b03f4:	6142 2064 5255 2c4c 6220 6461 6d20 7465     Bad URL, bad met
   b0404:	6f68 2d64 6469 0000 6142 2064 5255 2c4c     hod-id..Bad URL,
   b0414:	6d20 7465 6f68 2d64 6469 6f20 7475 6f20      method-id out o
   b0424:	2066 6172 676e 0065 6f43 746e 6e65 2d74     f range.Content-
   b0434:	654c 676e 6874 003a 6f63 746e 6e65 2d74     Length:.content-
   b0444:	656c 676e 6874 003a 433c 6e6f 6574 746e     length:.<Content
   b0454:	4c2d 6e65 7467 3e68 6620 6c69 6465 6e20     -Length> filed n
   b0464:	746f 6620 756f 646e 0000 0000 2e2e 732f     ot found....../s
   b0474:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   b0484:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   b0494:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   b04a4:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   b04b4:	7361 6369 6577 2f62 7468 7074 735f 7265     asicweb/http_ser
   b04c4:	6576 2e72 3a63 7325 253a 2064 5245 4f52     ver.c:%s:%d ERRO
   b04d4:	2852 6425 3a29 6e20 7465 6f63 6e6e 725f     R(%d): netconn_r
   b04e4:	6365 2876 0a29 0000 0a0d 0a0d 0000 0000     ecv()...........
   b04f4:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   b0504:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   b0514:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   b0524:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   b0534:	6b72 622f 7361 6369 6577 2f62 7468 7074     rk/basicweb/http
   b0544:	735f 7265 6576 2e72 3a63 7325 253a 2064     _server.c:%s:%d 
   b0554:	5245 4f52 2852 6425 3a29 5f20 6572 6c70     ERROR(%d): _repl
   b0564:	5f79 6568 6461 2928 000a 0000 656e 6374     y_head()....netc
   b0574:	6e6f 5f6e 7277 7469 2865 0029 3d3d 3d3d     onn_write().====
   b0584:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 485b 4145     ============[HEA
   b0594:	5d44 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     D]==============
   b05a4:	3d3d 000a 6572 6461 725f 7165 6575 7473     ==..read_request
   b05b4:	685f 6165 2864 0029 0a20 4548 4441 2d20     _head(). .HEAD -
   b05c4:	003e 0000 2d3c 000a 2d2d 2d2d 2d2d 2d2d     >...<-..--------
   b05d4:	2d2d 2d2d 5448 5054 485f 4145 4544 5f52     ----HTTP_HEADER_
   b05e4:	4f50 5453 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     POST------------
   b05f4:	000a 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ....============
   b0604:	3d3d 3d3d 425b 444f 5d59 3d3d 3d3d 3d3d     ====[BODY]======
   b0614:	3d3d 3d3d 3d3d 3d3d 3d3d 000a 0a20 4c41     ==========.. .AL
   b0624:	204c 2d20 003e 0000 6572 6461 725f 7165     L  ->...read_req
   b0634:	6575 7473 625f 646f 2879 0029 0a20 4f42     uest_body(). .BO
   b0644:	5944 2d20 003e 0000 7865 6365 7475 5f65     DY ->...execute_
   b0654:	6f70 7473 6d5f 7465 6f68 2864 0029 0000     post_method()...
   b0664:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 5448 5054     ------------HTTP
   b0674:	485f 4145 4544 5f52 4547 2d54 2d2d 2d2d     _HEADER_GET-----
   b0684:	2d2d 2d2d 2d2d 0a2d 0000 0000 2e2e 732f     -------......./s
   b0694:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   b06a4:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   b06b4:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   b06c4:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   b06d4:	7361 6369 6577 2f62 7468 7074 735f 7265     asicweb/http_ser
   b06e4:	6576 2e72 3a63 7325 253a 2064 5245 4f52     ver.c:%s:%d ERRO
   b06f4:	2852 6425 3a29 7720 6972 6574 775f 6265     R(%d): write_web
   b0704:	6170 6567 2928 000a 2d2d 2d2d 2d2d 2d2d     page()..--------
   b0714:	2d2d 2d2d 5448 5054 485f 4145 4544 5f52     ----HTTP_HEADER_
   b0724:	5245 2d52 2d2d 2d2d 2d2d 2d2d 2d2d 0a2d     ERR------------.
   b0734:	0000 0000                                   ....

000b0738 <__func__.7964>:
   b0738:	6168 646e 656c 725f 7165 6575 7473 0000     handle_request..

000b0748 <__func__.7904>:
   b0748:	675f 7465 6d5f 7465 6f68 5f64 6469 0000     _get_method_id..

000b0758 <__func__.7915>:
   b0758:	675f 7465 755f 6c72 705f 7461 0068 0000     _get_url_path...

000b0768 <__func__.7922>:
   b0768:	6170 7372 5f65 6572 7571 7365 5f74 6568     parse_request_he
   b0778:	6461 0000 6c25 646c 0000 0000 6461 7264     ad..%lld....addr
   b0788:	253d 2c64 656c 3d6e 6425 6d2c 6e69 253d     =%d,len=%d,min=%
   b0798:	2c64 3d69 6425 000a 7720 6972 6574 6d2d     d,i=%d.. write-m
   b07a8:	6d65 0020 3225 2064 0000 0000 7220 6165     em .%2d .... rea
   b07b8:	2d64 656d 206d 0000 6461 7264 253d 2c64     d-mem ..addr=%d,
   b07c8:	656c 3d6e 6425 6d2c 6e69 253d 2c64 3d69     len=%d,min=%d,i=
   b07d8:	6425 6d2c 656c 3d6e 6c25 2c64 6e65 3d64     %d,mlen=%ld,end=
   b07e8:	6425 0a20 0000 0000 7564 6d6d 2079 7061     %d .....dummy ap
   b07f8:	0069 0000                                   i...

000b07fc <__func__.8068>:
   b07fc:	7865 6365 7475 5f65 7277 7469 5f65 656d     execute_write_me
   b080c:	006d 0000                                   m...

000b0810 <__func__.7931>:
   b0810:	7865 6365 7475 5f65 6572 6461 725f 6765     execute_read_reg
   b0820:	0000 0000                                   ....

000b0824 <__func__.8039>:
   b0824:	5f5f 6263 775f 656d 5f6d 6164 6174 0000     __cb_wmem_data..

000b0834 <__func__.8012>:
   b0834:	725f 6165 5f64 6e61 5f64 6573 646e 645f     _read_and_send_d
   b0844:	7461 0061                                   ata.

000b0848 <__func__.7999>:
   b0848:	5f5f 6573 646e 645f 7461 0061               __send_data.

000b0854 <__func__.7946>:
   b0854:	6263 775f 6972 6574 725f 6765 0000 0000     cb_write_reg....

000b0864 <__func__.8059>:
   b0864:	6263 775f 6972 6574 6d5f 6d65 0000 0000     cb_write_mem....
   b0874:	2a25 0073 616e 656d 2d20 3e2d 0020 0000     %*s.name --> ...
   b0884:	6176 756c 2d65 3e2d 0020 0000 0a0a 0000     value--> .......
   b0894:	6e69 6564 2078 2d2d 203e 6425 000a 0000     index --> %d....
   b08a4:	6176 756c 2065 2d2d 203e 0000 2e2e 732f     value --> ..../s
   b08b4:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   b08c4:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   b08d4:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   b08e4:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   b08f4:	7361 6369 6577 2f62 6f70 7473 6d5f 7465     asicweb/post_met
   b0904:	6f68 7364 632e 253a 3a73 6425 4520 5252     hods.c:%s:%d ERR
   b0914:	524f 2528 2964 203a 2528 2964 2520 0a73     OR(%d): (%d) %s.
   b0924:	0000 0000 6142 2064 6572 2067 6461 7264     ....Bad reg addr
   b0934:	7365 2073 6572 7571 7365 0074 2e2e 732f     ess request.../s
   b0944:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   b0954:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   b0964:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   b0974:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   b0984:	7361 6369 6577 2f62 6f70 7473 6d5f 7465     asicweb/post_met
   b0994:	6f68 7364 632e 0000 6142 2064 6572 2067     hods.c..Bad reg 
   b09a4:	7277 7469 2065 6572 7571 7365 0074 0000     write request...
   b09b4:	4244 3a47 2e2e 732f 6372 412f 4653 742f     DBG:../src/ASF/t
   b09c4:	6968 6472 6170 7472 2f79 7266 6565 7472     hirdparty/freert
   b09d4:	736f 642f 6d65 2f6f 776c 7069 615f 7276     os/demo/lwip_avr
   b09e4:	3233 755f 3363 655f 6178 706d 656c 6e2f     32_uc3_example/n
   b09f4:	7465 6f77 6b72 622f 7361 6369 6577 2f62     etwork/basicweb/
   b0a04:	6f70 7473 6d5f 7465 6f68 7364 632e 253a     post_methods.c:%
   b0a14:	3a73 6425 203a 6568 6572 000a 4244 3a47     s:%d: here..DBG:
   b0a24:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   b0a34:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   b0a44:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   b0a54:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   b0a64:	6b72 622f 7361 6369 6577 2f62 6f70 7473     rk/basicweb/post
   b0a74:	6d5f 7465 6f68 7364 632e 253a 3a73 6425     _methods.c:%s:%d
   b0a84:	203a 6568 6572 0a32 0000 0000 4244 3a47     : here2.....DBG:
   b0a94:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
   b0aa4:	6170 7472 2f79 7266 6565 7472 736f 642f     party/freertos/d
   b0ab4:	6d65 2f6f 776c 7069 615f 7276 3233 755f     emo/lwip_avr32_u
   b0ac4:	3363 655f 6178 706d 656c 6e2f 7465 6f77     c3_example/netwo
   b0ad4:	6b72 622f 7361 6369 6577 2f62 6f70 7473     rk/basicweb/post
   b0ae4:	6d5f 7465 6f68 7364 632e 253a 3a73 6425     _methods.c:%s:%d
   b0af4:	203a 6548 6572 0a3b 0000 0000 7322 6375     : Here;....."suc
   b0b04:	6563 7373 0022 0000 6142 2064 656d 206d     cess"...Bad mem 
   b0b14:	6461 7264 7365 2073 6572 7571 7365 0074     address request.
   b0b24:	6142 2064 656d 206d 7277 7469 2065 6572     Bad mem write re
   b0b34:	7571 7365 0074 0000 202c 0000 656e 6374     quest..., ..netc
   b0b44:	6e6f 5f6e 7270 6e69 6674 2728 272c 0029     onn_printf(',').
   b0b54:	6162 6573 745f 5f6f 7473 6972 676e 2928     base_to_string()
   b0b64:	0000 0000 2e25 732a 0000 0000 205b 0000     ....%.*s....[ ..
   b0b74:	656e 6374 6e6f 5f6e 7270 6e69 6674 2728     netconn_printf('
   b0b84:	275b 0029 656c 676e 6874 253d 2c64 6920     [').length=%d, i
   b0b94:	253d 2c64 4d20 5841 4d5f 4d45 425f 4655     =%d, MAX_MEM_BUF
   b0ba4:	4c5f 4e45 253d 2c64 6520 646e 732d 6174     _LEN=%d, end-sta
   b0bb4:	7472 253d 0a64 0000 5f5f 6573 646e 645f     rt=%d...__send_d
   b0bc4:	7461 2861 0029 0000 5d20 0000 656e 6374     ata()... ]..netc
   b0bd4:	6e6f 5f6e 7270 6e69 6674 2728 275d 0029     onn_printf(']').
   b0be4:	725f 7065 796c 685f 6165 2864 0029 0000     _reply_head()...
   b0bf4:	227b 6572 7573 746c 3a22 0000 656e 6374     {"result":..netc
   b0c04:	6e6f 5f6e 7270 6e69 6674 7b28 7222 7365     onn_printf({"res
   b0c14:	6c75 2274 293a 0000 725f 6165 5f64 6e61     ult":).._read_an
   b0c24:	5f64 6573 646e 645f 7461 2861 0029 0000     d_send_data()...
   b0c34:	007d 0000 656e 6374 6e6f 5f6e 7270 6e69     }...netconn_prin
   b0c44:	6674 7d28 0029 0000 4244 3a47 2e2e 732f     tf(})...DBG:../s
   b0c54:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   b0c64:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   b0c74:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   b0c84:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   b0c94:	7361 6369 6577 2f62 6f70 7473 6d5f 7465     asicweb/post_met
   b0ca4:	6f68 7364 632e 253a 3a73 6425 203a 7257     hods.c:%s:%d: Wr
   b0cb4:	7469 2065 6425 000a 4244 3a47 2e2e 732f     ite %d..DBG:../s
   b0cc4:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   b0cd4:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   b0ce4:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   b0cf4:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   b0d04:	7361 6369 6577 2f62 6f70 7473 6d5f 7465     asicweb/post_met
   b0d14:	6f68 7364 632e 253a 3a73 6425 203a 6e49     hods.c:%s:%d: In
   b0d24:	6564 2078 6425 000a 4244 3a47 2e2e 732f     dex %d..DBG:../s
   b0d34:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   b0d44:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   b0d54:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   b0d64:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   b0d74:	7361 6369 6577 2f62 6f70 7473 6d5f 7465     asicweb/post_met
   b0d84:	6f68 7364 632e 253a 3a73 6425 203a 6156     hods.c:%s:%d: Va
   b0d94:	756c 2065 7325 000a 4244 3a47 2e2e 732f     lue %s..DBG:../s
   b0da4:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
   b0db4:	2f79 7266 6565 7472 736f 642f 6d65 2f6f     y/freertos/demo/
   b0dc4:	776c 7069 615f 7276 3233 755f 3363 655f     lwip_avr32_uc3_e
   b0dd4:	6178 706d 656c 6e2f 7465 6f77 6b72 622f     xample/network/b
   b0de4:	7361 6369 6577 2f62 6f70 7473 6d5f 7465     asicweb/post_met
   b0df4:	6f68 7364 632e 253a 3a73 6425 203a 4146     hods.c:%s:%d: FA
   b0e04:	4c49 000a 6166 6c69 6465 7420 206f 6174     IL..failed to ta
   b0e14:	656b 615f 6970 2928 0000 0000 6966 656c     ke_api()....file
   b0e24:	2064 6f74 7020 7261 6573 6a20 6f73 206e     d to parse json 
   b0e34:	626f 656a 7463 0000 6164 6174 702e 6972     object..data.pri
   b0e44:	746e 0000 6572 2e67 6572 6461 0000 0000     nt..reg.read....
   b0e54:	6572 6761 772e 6972 6574 0000 656d 2e6d     reag.write..mem.
   b0e64:	6572 6461 0000 0000 656d 2e6d 7277 7469     read....mem.writ
   b0e74:	0065 0000                                   e...

000b0e78 <__func__.7961>:
   b0e78:	7865 6365 7475 5f65 7277 7469 5f65 6572     execute_write_re
   b0e88:	0067 0000                                   g...

000b0e8c <__func__.8021>:
   b0e8c:	7865 6365 7475 5f65 6572 6461 6d5f 6d65     execute_read_mem
   b0e9c:	0000 0000                                   ....

000b0ea0 <__func__.8087>:
   b0ea0:	7865 6365 7475 5f65 6f70 7473 6d5f 7465     execute_post_met
   b0eb0:	6f68 0064                                   hod.

000b0eb4 <__func__.8027>:
   b0eb4:	5f5f 7570 6873 645f 7461 0061               __push_data.

000b0ec0 <__func__.7921>:
   b0ec0:	6263 725f 6165 5f64 6572 0067               cb_read_reg.

000b0ecc <__func__.7984>:
   b0ecc:	6263 725f 6165 5f64 656d 006d               cb_read_mem.

000b0ed8 <LED_DESCRIPTOR>:
   b0ed8:	000c 0000 0000 0000 002d 0000 0000 0000     ........-.......
   b0ee8:	002c 0000 0000 0000 000d 0000 0001 0000     ,...............
   b0ef8:	7473 6361 206b 766f 7265 6c66 776f 2520     stack overflow %
   b0f08:	2078 7325 0a0d 0000 2d2d 4620 6572 5265     x %s....-- FreeR
   b0f18:	4f54 2053 6977 6874 6c20 4977 2050 7845     TOS with lwIP Ex
   b0f28:	6d61 6c70 2065 2d2d 0d0a 0000 2d2d 2520     ample --....-- %
   b0f38:	0a73 000d 4153 334d 2d58 4b45 0000 0000     s...SAM3X-EK....
   b0f48:	2d2d 4320 6d6f 6970 656c 3a64 2520 2073     -- Compiled: %s 
   b0f58:	7325 2d20 0a2d 000d 6553 2070 3620 3220     %s --...Sep  6 2
   b0f68:	3130 0034 3131 323a 3a37 3933 0000 0000     014.11:27:39....
   b0f78:	654c 0064 6146 6c69 6465 7420 206f 7263     Led.Failed to cr
   b0f88:	6165 6574 7420 7365 2074 656c 2064 6174     eate test led ta
   b0f98:	6b73 0a0d 0000 0000 4557 0042 774c 5049     sk......WEB.LwIP
   b0fa8:	203a 7453 7461 6369 4920 2050 6441 7264     : Static IP Addr
   b0fb8:	7365 2073 7341 6973 6e67 6465 0000 0000     ess Assigned....
   b0fc8:	654e 7774 726f 206b 7075 0000 654e 7774     Network up..Netw
   b0fd8:	726f 206b 6f64 6e77 0000 0000 5445 4c48     ork down....ETHL
   b0fe8:	5541 434e 0048 0000 7325 0909 6325 2509     AUNCH...%s..%c.%
   b0ff8:	0975 7525 2509 0d75 000a 0000 4449 454c     u.%u.%u.....IDLE
   b1008:	0000 0000 4354 2f50 5049 0000               ....TCP/IP..

000b1014 <memp_num>:
   b1014:	0001 0001 0002 0001 0009 0005 000f 0003     ................
   b1024:	0004 0008 0008 0006 0006 0006               ............

000b1030 <memp_sizes>:
   b1030:	001c 0020 00a4 0020 0010 0020 0018 0010     .. ... ... .....
   b1040:	002c 0014 0014 0010 0010 0204               ,...........

000b104c <tcp_pcb_lists>:
   b104c:	68e0 2007 68e8 2007 68d8 2007 68ec 2007     .h. .h. .h. .h. 

000b105c <tcp_backoff>:
   b105c:	0201 0403 0605 0707 0707 0707 0007 0000     ................

000b106c <tcp_persist_backoff>:
   b106c:	0603 180c 6030 0078                         ....0`x.

000b1074 <ethbroadcast>:
   b1074:	ffff ffff ffff 0000                         ........

000b107c <ethzero>:
	...
   b1084:	5445 4948 544e 0000                         ETHINT..

000b108c <gs_uc_mac_address>:
   b108c:	0400 1c25 02a0 0000                         ..%.....

000b1094 <_ctype_>:
   b1094:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b10a4:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b10b4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b10c4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b10d4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b10e4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b10f4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b1104:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b1114:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b1198 <_global_impure_ptr>:
   b1198:	02d0 2007 0043                              ... C.

000b119e <blanks.6743>:
   b119e:	2020 2020 2020 2020 2020 2020 2020 2020                     

000b11ae <zeroes.6744>:
   b11ae:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   b11be:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
   b11ce:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   b11de:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   b11ee:	0066 0030                                   f.0.

000b11f2 <blanks.6701>:
   b11f2:	2020 2020 2020 2020 2020 2020 2020 2020                     

000b1202 <zeroes.6702>:
   b1202:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

000b1212 <blanks.6758>:
   b1212:	2020 2020 2020 2020 2020 2020 2020 2020                     

000b1222 <zeroes.6759>:
   b1222:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   b1232:	6e49 6966 696e 7974 4e00 4e61 5000 534f     Infinity.NaN.POS
   b1242:	5849 2e00 0000                              IX....

000b1248 <p05.5289>:
   b1248:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

000b1258 <__mprec_tens>:
   b1258:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b1268:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b1278:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b1288:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b1298:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b12a8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b12b8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b12c8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b12d8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b12e8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b12f8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b1308:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b1318:	9db4 79d9 7843 44ea                         ...yCx.D

000b1320 <__mprec_tinytens>:
   b1320:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b1330:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b1340:	6f43 64ac 0628 0ac8                         Co.d(...

000b1348 <__mprec_bigtens>:
   b1348:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b1358:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b1368:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b1370 <blanks.6687>:
   b1370:	2020 2020 2020 2020 2020 2020 2020 2020                     

000b1380 <zeroes.6688>:
   b1380:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

000b1390 <_init>:
   b1390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b1392:	bf00      	nop
   b1394:	bcf8      	pop	{r3, r4, r5, r6, r7}
   b1396:	bc08      	pop	{r3}
   b1398:	469e      	mov	lr, r3
   b139a:	4770      	bx	lr

000b139c <__init_array_start>:
   b139c:	0008fa39 	.word	0x0008fa39

000b13a0 <__frame_dummy_init_array_entry>:
   b13a0:	0008016d                                m...

000b13a4 <_fini>:
   b13a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b13a6:	bf00      	nop
   b13a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   b13aa:	bc08      	pop	{r3}
   b13ac:	469e      	mov	lr, r3
   b13ae:	4770      	bx	lr

000b13b0 <__fini_array_start>:
   b13b0:	00080145 	.word	0x00080145
