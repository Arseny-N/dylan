
# API 


#### reqire(library) 

You can access api functions by `require()` ing a certain library.
Also you can `require()` a *script* file opened in the editor, the `.js` extention could be omitted.

* library  [*String*]  - the library which should be required
				 
* returns  [*Object*]   - the *exports* object of the library.

```javascript
var foolib = require("foo-lib");
```


#### exports

All library functions and variables are exportet through the *exports* Object.
By default `exports == {}`.


####examples
```javascript

/* CatzLib.js */
var log = require('logger');

exports.greet = fucntion(what) {	
	log.info("Meow " + what);
}

/* Sctript.js */

var cat = require("CatzLib");

cat.greet("John");  // Will output "Meow John"

```



---
## Helper libs



### logger 
The logger functions allow you to log information in the logger window,
there are three functions wich accept one argument - a _string_ to be logged on the window.
You can also pass an object which will be converted to a string.

#### logger.dir(object, options)
	
Converts an object to a string.	
	
* object  [*Object*]  - the object which should be converted.
* options [*Object*]  - an options object. It's fileds include:
 * radix [*Number*] - the base to wich numbers in the object should be converted. By default 10.
 * depth [*Number*] - the maximum depth og the object, if set to -1, ignored. By default 16.
 * tab 	 [*String*] - the tab character used when the data is outputted.
 * nl 	 [*String*] - the new line character used when the data is outputted.
 * index [*Boolean*]- if set to true - output an index before each *Array* element commented out with c-style comments. _WARNING!_ no comments are allowed in the JSON notation. 			 
* returns  [*String*]   - a string rapresentaion of *object*.
	
#### logger.info(message)
#### logger.error(message)
#### logger.warn(message)
	
Logs a *message* with appropriate priority.
	
* message [***] - a message which should be logged.
	
```javascript

var log = require('logger'),

log.info("Hello World");
log.info({"hello":"word"});


```

### documents 
The documents functions allow you to manipulate file contests.
The files should be opened in the editor.

#### documents.list()
	
Lists all the avaible documents. (a little bit useless)
	
* returns [*Array*] - an array os strings.

#### documents.get(docname)
	
Gets the contests of a document.
	
* docname [*String*] - a name of the document.
* returns [*String*] - the contests of the document (*docname*).
	
#### documents.set(docname, data)
	
Sets the contests of a document.
	
* docname [*String*] - a name of the document.
* data 	  [*String*] - data which should be written to *docname*.

```javascript
var docs = require('documents');
		
/* Get the names of all the opened files */
var docNames = docs.list();

/* Get the data from great-file.txt (it should be opened in the editor) */
var greatData = docs.get("great-file.txt") 			 

/* Append the data to great-file.txt (it should be opened in the editor) */
docs.set("great-file.txt", greatData + " End Of Great File") 
```

---
## Server interaction

The *api* library allows you to send and recive data from and to the server.
You can require the *api* library in the following way:

```javascript
var api = require('api');

api.mem.write(0x11, [2,3,4,5,56]);

```


### api.mem

The *api.mem* set of functions allows you to interact with the memory of the microprocessor.

#### api.mem.read(address, callback)

Reads a memory location.
	
* address  [*Number*]  - a memory adrress from where data should be read.
* callback [*Function*]- a callback fuction which will be called when the operation will complete.
The function should take two arguments - *err* and *res*, if an error occurs
the *err* argumen is filled with an error message otherwise the result is 
stored in the *res* argument.
				 
* returns  [*Array*]   - the function returns the result of the memory read to the given location. 
The return value is equal to the *res* argument of *callback*.
	     
#### api.mem.write(address, data, callback)

Writes a memory location.

* address  [*Number*]  - a memory address where data should be written.
* data	   [*Array*] 	- data which should be written to the *address*.
* callback [*Function*]- a callback fuction which will be called when the operation will complete.
The function should take two arguments - *err* and *res*, if an error occurs
the *err* argumen is filled with an error message otherwise the result is 
stored in the *res* argument.
	
* returns  [*String*]   - the function returns the result of the memory read to the given location. 
The return value is equal to the *res* argument of *callback*.
	 		 
* Notes - A sucessfull write returns a *"success"* string.
	
### examples

```javascript
var SOME_ADDR = 0x4356;
var data = [0x1, 0x2, 0x3, 0x4, 0x5];

var api = require('api');
var log = require('logger');

api.mem.write(SOME_ADDR, mem_data);
data = api.mem.read(SOME_ADDR+2, 2);

log.info("mem.read result = " +	log.dir(data)); // Shuld output "mem.read result = [0x3, 0x4]"

```	
-----

### api.reg

The *api.reg* set of functions allows you to interact with the registers of the microprocessor.

#### api.reg.read(register, callback)

Reads a register.

* register [*Untyped*] - a register from where data should be read.
* callback [*Function*]- a callback fuction which will be called when the operation will complete.
The function should take two arguments - *err* and *res*, if an error occurs
the *err* argumen is filled with an error message otherwise the result is 
stored in the *res* argument.
			 
* returns  [*Number*]  - the function returns the result of the register read. 
The return value is equal to the *res* argument of *callback*.
	     
#### api.reg.write(register, data, callback)
Writes a register.

* register [*Untyped*]  - a register where data should be written.
* data	   [*Number*] 	- data which should be written to the *register*.
* callback [*Function*]- a callback fuction which will be called when the operation will complete.
The function should take two arguments - *err* and *res*, if an error occurs
the *err* argumen is filled with an error message otherwise the result is 
stored in the *res* argument.
	
* returns  [*String*]   - the function returns the result of the memory read to the given location. 
The return value is equal to the *res* argument of *callback*.
		 		 
* Notes - A sucessfull write returns a *"success"* string.
	
#### api.reg.wait(register, data) ???
	

### examples

```javascript
var SOME_REG = 12;
var data = 5;

var api = require('api');
var log = require('logger');

api.reg.write(SOME_REG, data);
data = api.reg.read(SOME_REG);

log.info("reg.read result = " +	data); // Shuld output "mem.read result = 5"

```
