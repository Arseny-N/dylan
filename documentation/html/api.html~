<html>
<style>

html {
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
    font-family: sans-serif;
}

body {
    margin: 0;
    padding: 30px 80px;

    background-color: #fff;
    color: #333333;
    font: 16px Helvetica, arial, freesans, clean, sans-serif;
    line-height: 1.4;
}

    body > *:first-child {
        margin-top: 0 !important;
    }

    body > *:last-child {
        margin-bottom: 0 !important;
    }
p {
	max-width: 2000px;
}
a {
    color: #4183c4;
    text-decoration: none;
}

    a:hover {
        outline: 0;
        text-decoration: underline;
    }

    a:focus {
        outline: thin dotted;
        text-decoration: underline;
    }

    a:active {
        outline: 0;
        text-decoration: underline;
    }

h1, h2, h3, h4, h5, h6 {
    position: relative;
    margin: 1em 0 15px;
    padding: 0;
    font-weight: bold;
    line-height: 1.7;
    cursor: text;
}

    h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
        top: 15%;
        margin-left: -30px;
        padding-left: 8px;
        text-decoration: none;
        line-height: 1;
    }

    h1 code, h2 code, h3 code, h4 code, h5 code, h6 code {
        font-size: inherit;
    }

h1 {
    border-bottom: 1px solid #ddd;
    font-size: 2.5em;
}

h2 {
    border-bottom: 1px solid #eee;
    font-size: 2em;
}

h3 {
    font-size: 1.5em;
}

h4 {
    font-size: 1.2em;
}

h5 {
    font-size: 1em;
}

h6 {
    color: #777;
    font-size: 1em;
}

b, strong {
    font-weight: bold;
}

hr:before, hr:after {
    display: table;
    content: " ";
}

hr:after {
    clear: both;
}

sub, sup {
    position: relative;
    vertical-align: baseline;
    font-size: 75%;
    line-height: 0;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

img {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    max-width: 100%;
    border: 0;
}

code, pre {
    font-size: 12px;
    font-family: Consolas, "Liberation Mono", Courier, monospace;
}

pre {
    margin-top: 0;
    margin-bottom: 0;
}

a.anchor:focus {
    outline: none;
}

p, blockquote, ul, ol, dl, table, pre {
    margin: 15px 0;
}

ul, ol {
    margin-top: 0;
    margin-bottom: 0;
    padding: 0;
    padding-left: 30px;
}

    ul.no-list, ol.no-list {
        padding: 0;
        list-style-type: none;
    }

    ul ul, ul ol, ol ol, ol ul {
        margin-top: 0;
        margin-bottom: 0;
    }

dl {
    padding: 0;
}

blockquote {
    padding: 0 15px;
    border-left: 4px solid #DDD;
    color: #777;
}

table {
    display: block;
    overflow: auto;
    width: 100%;
}

    table th, table td {
        padding: 6px 13px;
        border: 1px solid #ddd;
    }

    table tr:nth-child(2n) {
        background-color: #f8f8f8;
    }

code {
    display: inline-block;
    overflow: auto;
    margin: 0;
    padding: 0;
    max-width: 100%;
    border: 1px solid #ddd;
    border-radius: 3px;
    background-color: #f8f8f8;
    vertical-align: middle;

    line-height: 1.3;
}

    code:before, code:after {
        content: "\00a0";
        letter-spacing: -0.2em;
    }

pre {
    overflow: auto;
    padding: 6px 10px;
    border: 1px solid #ddd;
    border-radius: 3px;
    background-color: #f8f8f8;
    word-wrap: normal;
    font-size: 13px;
    line-height: 19px;
}

    pre code {
        display: inline;
        overflow: initial;
        margin: 0;
        padding: 0;
        max-width: initial;
        border: none;
        background-color: transparent;
        word-wrap: normal;
        line-height: inherit;
    }

        pre code:before, pre code:after {
            content: normal;
        }
</style>
<body>

<h1 id="api">API</h1>
<hr>
<h4 id="reqire-library-">reqire(library)</h4>
<p>You can access api functions by <code>require()</code> ing a certain library.
Also you can <code>require()</code> a <em>script</em> file opened in the editor, the <code>.js</code> extention could be omitted.</p>
<ul>
<li><p>library  [<em>String</em>]  - the library which should be required</p>
</li>
<li><p>returns  [<em>Object</em>]   - the <em>exports</em> object of the library.</p>
</li>
</ul>
<pre><code class="lang-javascript">var foolib = require(&quot;foo-lib&quot;);
</code></pre>
<h4 id="exports">exports</h4>
<p>All library functions and variables are exportet through the <em>exports</em> Object.
By default <code>exports == {}</code>.</p>
<h4 id="examples">examples</h4>
<pre><code class="lang-javascript">
/* CatzLib.js */
var log = require(&#39;logger&#39;);

exports.greet = fucntion(what) {    
    log.info(&quot;Meow &quot; + what);
}

/* Sctript.js */

var cat = require(&quot;CatzLib&quot;);

cat.greet(&quot;John&quot;);  // Will output &quot;Meow John&quot;
</code></pre>
<h2 id="helper-libs">Helper libs</h2>
<hr>
<h3 id="logger">logger</h3>
<p>The logger functions allow you to log information in the logger window,
there are three functions wich accept one argument - a <em>string</em> to be logged on the window.
You can also pass an object which will be converted to a string.</p>
<h4 id="logger-dir-object-options-">logger.dir(object, options)</h4>
<p>Converts an object to a string.    </p>
<ul>
<li>object  [<em>Object</em>]  - the object which should be converted.</li>
<li>options [<em>Object</em>]  - an options object. It&#39;s fileds include:<ul>
<li>radix [<em>Number</em>] - the base to wich numbers in the object should be converted. By default 10.</li>
<li>depth [<em>Number</em>] - the maximum depth og the object, if set to -1, ignored. By default 16.</li>
<li>tab      [<em>String</em>] - the tab character used when the data is outputted.</li>
<li>nl      [<em>String</em>] - the new line character used when the data is outputted.</li>
<li>index [<em>Boolean</em>]- if set to true - output an index before each <em>Array</em> element commented out with c-style comments. <em>WARNING!</em> no comments are allowed in the JSON notation.              </li>
</ul>
</li>
<li>returns  [<em>String</em>]   - a string rapresentaion of <em>object</em>.</li>
</ul>
<h4 id="logger-info-message-">logger.info(message)</h4>
<h4 id="logger-error-message-">logger.error(message)</h4>
<h4 id="logger-warn-message-">logger.warn(message)</h4>
<p>Logs a <em>message</em> with appropriate priority.</p>
<ul>
<li>message [<em>String/Object</em>] - a message which should be logged.</li>
</ul>
<pre><code class="lang-javascript">
var log = require(&#39;logger&#39;),

log.info(&quot;Hello World&quot;);
log.info({&quot;hello&quot;:&quot;word&quot;});
</code></pre>
<hr>
<h3 id="documents">documents</h3>
<p>The documents functions allow you to manipulate file contests.
The files should be opened in the editor.</p>
<h4 id="documents-list-">documents.list()</h4>
<p>Lists all the avaible documents. (a little bit useless)</p>
<ul>
<li>returns [<em>Array</em>] - an array os strings.</li>
</ul>
<h4 id="documents-get-docname-">documents.get(docname)</h4>
<p>Gets the contests of a document.</p>
<ul>
<li>docname [<em>String</em>] - a name of the document.</li>
<li>returns [<em>String</em>] - the contests of the document (<em>docname</em>).</li>
</ul>
<h4 id="documents-set-docname-data-">documents.set(docname, data)</h4>
<p>Sets the contests of a document.</p>
<ul>
<li>docname [<em>String</em>] - a name of the document.</li>
<li>data       [<em>String</em>] - data which should be written to <em>docname</em>.</li>
</ul>
<pre><code class="lang-javascript">var docs = require(&#39;documents&#39;);

/* Get the names of all the opened files */
var docNames = docs.list();

/* Get the data from great-file.txt (it should be opened in the editor) */
var greatData = docs.get(&quot;great-file.txt&quot;)              

/* Append the data to great-file.txt (it should be opened in the editor) */
docs.set(&quot;great-file.txt&quot;, greatData + &quot; End Of Great File&quot;)
</code></pre>
<hr>
<h2 id="server-interaction">Server interaction</h2>
<p>The <em>api</em> library allows you to send and recive data from and to the server.
You can require the <em>api</em> library in the following way:</p>
<pre><code class="lang-javascript">var api = require(&#39;api&#39;);

api.mem.write(0x11, [2,3,4,5,56]);
</code></pre>
<hr>
<h3 id="api-mem">api.mem</h3>
<p>The <em>api.mem</em> set of functions allows you to interact with the memory of the microprocessor.</p>
<h4 id="api-mem-read-address-callback-">api.mem.read(address, callback)</h4>
<p>Reads a memory location.</p>
<ul>
<li>address  [<em>Number</em>]  - a memory adrress from where data should be read.</li>
<li><p>callback [<em>Function</em>]- a callback fuction which will be called when the operation will complete.
The function should take two arguments - <em>err</em> and <em>res</em>, if an error occurs
the <em>err</em> argumen is filled with an error message otherwise the result is 
stored in the <em>res</em> argument.</p>
</li>
<li><p>returns  [<em>Array</em>]   - the function returns the result of the memory read to the given location. </p>
<pre><code>        The return value is equal to the *res* argument of *callback*.
</code></pre></li>
</ul>
<h4 id="api-mem-write-address-data-callback-">api.mem.write(address, data, callback)</h4>
<p>Writes a memory location.</p>
<ul>
<li>address  [<em>Number</em>]  - a memory address where data should be written.</li>
<li>data       [<em>Array</em>]     - data which should be written to the <em>address</em>.</li>
<li><p>callback [<em>Function</em>]- a callback fuction which will be called when the operation will complete.
The function should take two arguments - <em>err</em> and <em>res</em>, if an error occurs
the <em>err</em> argumen is filled with an error message otherwise the result is 
stored in the <em>res</em> argument.</p>
</li>
<li><p>returns  [<em>String</em>]   - the function returns the result of the memory read to the given location. </p>
<pre><code>        The return value is equal to the *res* argument of *callback*.
</code></pre></li>
<li><p>Notes - A sucessfull write returns a <em>&quot;success&quot;</em> string.</p>
</li>
</ul>
<h3 id="examples">examples</h3>
<pre><code class="lang-javascript">var SOME_ADDR = 0x4356;
var data = [0x1, 0x2, 0x3, 0x4, 0x5];

var api = require(&#39;api&#39;);
var log = require(&#39;logger&#39;);

api.mem.write(SOME_ADDR, mem_data);
data = api.mem.read(SOME_ADDR+2, 2);

log.info(&quot;mem.read result = &quot; +    log.dir(data)); // Shuld output &quot;mem.read result = [0x3, 0x4]&quot;
</code></pre>
<hr>
<h3 id="api-reg">api.reg</h3>
<p>The <em>api.reg</em> set of functions allows you to interact with the registers of the microprocessor.</p>
<h4 id="api-reg-read-register-callback-">api.reg.read(register, callback)</h4>
<p>Reads a register.</p>
<ul>
<li>register [<em>Untyped</em>] - a register from where data should be read.</li>
<li><p>callback [<em>Function</em>]- a callback fuction which will be called when the operation will complete.
The function should take two arguments - <em>err</em> and <em>res</em>, if an error occurs
the <em>err</em> argumen is filled with an error message otherwise the result is 
stored in the <em>res</em> argument.</p>
</li>
<li><p>returns  [<em>Number</em>]  - the function returns the result of the register read. </p>
<pre><code>        The return value is equal to the *res* argument of *callback*.
</code></pre></li>
</ul>
<h4 id="api-reg-write-register-data-callback-">api.reg.write(register, data, callback)</h4>
<p>Writes a register.</p>
<ul>
<li>register [<em>Untyped</em>]  - a register where data should be written.</li>
<li>data       [<em>Number</em>]     - data which should be written to the <em>register</em>.</li>
<li><p>callback [<em>Function</em>]- a callback fuction which will be called when the operation will complete.
The function should take two arguments - <em>err</em> and <em>res</em>, if an error occurs
the <em>err</em> argumen is filled with an error message otherwise the result is 
stored in the <em>res</em> argument.</p>
</li>
<li><p>returns  [<em>String</em>]   - the function returns the result of the memory read to the given location. </p>
<pre><code>        The return value is equal to the *res* argument of *callback*.
</code></pre></li>
<li><p>Notes - A sucessfull write returns a <em>&quot;success&quot;</em> string.</p>
</li>
</ul>
<h4 id="api-reg-wait-register-data-">api.reg.wait(register, data) ???</h4>
<hr>
<h3 id="examples">examples</h3>
<pre><code class="lang-javascript">var SOME_REG = 12;
var data = 5;

var api = require(&#39;api&#39;);
var log = require(&#39;logger&#39;);

api.reg.write(SOME_REG, data);
data = api.reg.read(SOME_REG);

log.info(&quot;reg.read result = &quot; +    data); // Shuld output &quot;mem.read result = 5&quot;
</code></pre>

</body>
</html>
