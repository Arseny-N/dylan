var expect = require("chai").expect;
var sapi = require("../api")

describe('api', function(){
	function bad_clone(o) {
		return JSON.parse( JSON.stringify( o ) );
	}
	describe('# reg I/O', function(){
		var registers = [0, 1, 2, 3];
		var rmap = {};			
		it('writes should be always successfull', function(done){
			var regs = bad_clone(registers);
			(function next(reg) {
				if(typeof reg === "undefined") {

					return done();
				}
				
				rmap[reg] = Math.round(Math.random() * 100);
				
				sapi.reg.write(reg, rmap[reg], function(err, value){	
					if(err) return done(err);
					
					expect(value).to.be.equal("success");
					
					next(regs.pop())
				});
			})(regs.pop());
		})
		it('reads should return the written values', function(done){			
			var regs = bad_clone(registers);

			(function next(r){
				if(typeof r === "undefined") {
					done();	
					return;
				}

				sapi.reg.read(r, function(err, 	value){
					if(err) return done(err);
			
					expect(value).to.be.equal(rmap[r], "register " + r);
					next(regs.pop());
				})


			})(regs.pop());	
		})
	})
	describe('# mem I/O', function(){
		var memory = [ {
			start : 0, 
			count : 20
		}, {
			start : 100, 
			count : 20
		}];		
		before(function(){
				
		});
		it('writes should be always successfull', function(done){
			var mem = memory;
			(function next(index) {
				
				if(!mem[index]) 
					return done();
				mem[index].data = [];
				for(var i = 0; i < mem[index].count; ++i ) {		
					var d = Math.round(Math.random() * 100) 
					mem[index].data.push( d );
				}
				
				sapi.mem.write(mem[index].start, mem[index].data, function(err, value){	
					if(err) return done(err);
					
					expect(value).to.be.equal("success");
					
					next(index+1)
				});
			})(0);
		});
		it('reads should return the written values', function(done){			
			var mem = bad_clone(memory);
	
			(function next(m){
				if(!m) 
					return done();
				sapi.mem.read(m.start, m.count, function(err, data){
					if(err) return done(err);	
					console.log("----------");
					console.dir(data);
					console.dir(m.data);
					
					expect(data).to.be.deep.equal(m.data);					
					next(mem.pop())
				});
			})(mem.pop());	
		});
	})
})
